!function(t){function e(t){var e=document.getElementsByTagName("head")[0],n=document.createElement("script");n.type="text/javascript",n.charset="utf-8",n.src=l.p+""+t+"."+y+".hot-update.js",e.appendChild(n)}function n(t){if("undefined"==typeof XMLHttpRequest)return t(new Error("No browser support"));try{var e=new XMLHttpRequest,n=l.p+""+y+".hot-update.json";e.open("GET",n,!0),e.timeout=1e4,e.send(null)}catch(r){return t(r)}e.onreadystatechange=function(){if(4===e.readyState)if(0===e.status)t(new Error("Manifest request to "+n+" timed out."));else if(404===e.status)t();else if(200!==e.status&&304!==e.status)t(new Error("Manifest request to "+n+" failed."));else{try{var r=JSON.parse(e.responseText)}catch(o){return void t(o)}t(null,r)}}}function r(t){var e=S[t];if(!e)return l;var n=function(n){return e.hot.active?S[n]?(S[n].parents.indexOf(t)<0&&S[n].parents.push(t),e.children.indexOf(n)<0&&e.children.push(n)):g=[t]:(console.warn("[HMR] unexpected require("+n+") from disposed module "+t),g=[]),l(n)};for(var r in l)Object.prototype.hasOwnProperty.call(l,r)&&(n[r]=l[r]);return n.e=function(t,e){"ready"===b&&i("prepare"),N++,l.e(t,function(){function r(){N--,"prepare"===b&&(D[t]||u(t),0===N&&0===w&&c())}try{e.call(null,n)}finally{r()}})},n}function o(t){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],active:!0,accept:function(t,n){if("undefined"==typeof t)e._selfAccepted=!0;else if("function"==typeof t)e._selfAccepted=t;else if("number"==typeof t)e._acceptedDependencies[t]=n;else for(var r=0;r<t.length;r++)e._acceptedDependencies[t[r]]=n},decline:function(t){if("undefined"==typeof t)e._selfDeclined=!0;else if("number"==typeof t)e._declinedDependencies[t]=!0;else for(var n=0;n<t.length;n++)e._declinedDependencies[t[n]]=!0},dispose:function(t){e._disposeHandlers.push(t)},addDisposeHandler:function(t){e._disposeHandlers.push(t)},removeDisposeHandler:function(t){var n=e._disposeHandlers.indexOf(t);n>=0&&e._disposeHandlers.splice(n,1)},check:a,apply:p,status:function(t){return t?void E.push(t):b},addStatusHandler:function(t){E.push(t)},removeStatusHandler:function(t){var e=E.indexOf(t);e>=0&&E.splice(e,1)},data:_[t]};return e}function i(t){b=t;for(var e=0;e<E.length;e++)E[e].call(null,t)}function a(t,e){if("idle"!==b)throw new Error("check() is only allowed in idle status");"function"==typeof t?(m=!1,e=t):(m=t,e=e||function(t){if(t)throw t}),i("check"),n(function(t,n){if(t)return e(t);if(!n)return i("idle"),void e(null,null);O={},C={},D={};for(var r=0;r<n.c.length;r++)C[n.c[r]]=!0;v=n.h,i("prepare"),h=e,d={};var o=0;u(o),0===N&&0===w&&c()})}function s(t,e){if(C[t]&&O[t]){O[t]=!1;for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(d[n]=e[n]);0===--w&&0===N&&c()}}function u(t){C[t]?(O[t]=!0,w++,e(t)):D[t]=!0}function c(){i("ready");var t=h;if(h=null,t)if(m)p(m,t);else{var e=[];for(var n in d)Object.prototype.hasOwnProperty.call(d,n)&&e.push(+n);t(null,e)}}function p(e,n){function r(t){for(var e=[t],n={},r=e.slice();r.length>0;){var i=r.pop(),t=S[i];if(t&&!t.hot._selfAccepted){if(t.hot._selfDeclined)return new Error("Aborted because of self decline: "+i);if(0===i)return;for(var a=0;a<t.parents.length;a++){var s=t.parents[a],u=S[s];if(u.hot._declinedDependencies[i])return new Error("Aborted because of declined dependency: "+i+" in "+s);e.indexOf(s)>=0||(u.hot._acceptedDependencies[i]?(n[s]||(n[s]=[]),o(n[s],[i])):(delete n[s],e.push(s),r.push(s)))}}}return[e,n]}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];t.indexOf(r)<0&&t.push(r)}}if("ready"!==b)throw new Error("apply() is only allowed in ready status");"function"==typeof e?(n=e,e={}):e&&"object"==typeof e?n=n||function(t){if(t)throw t}:(e={},n=n||function(t){if(t)throw t});var a={},s=[],u={};for(var c in d)if(Object.prototype.hasOwnProperty.call(d,c)){var p=+c,f=r(p);if(!f){if(e.ignoreUnaccepted)continue;return i("abort"),n(new Error("Aborted because "+p+" is not accepted"))}if(f instanceof Error)return i("abort"),n(f);u[p]=d[p],o(s,f[0]);for(var p in f[1])Object.prototype.hasOwnProperty.call(f[1],p)&&(a[p]||(a[p]=[]),o(a[p],f[1][p]))}for(var h=[],m=0;m<s.length;m++){var p=s[m];S[p]&&S[p].hot._selfAccepted&&h.push({module:p,errorHandler:S[p].hot._selfAccepted})}i("dispose");for(var E=s.slice();E.length>0;){var p=E.pop(),w=S[p];if(w){for(var N={},D=w.hot._disposeHandlers,O=0;O<D.length;O++){var C=D[O];C(N)}_[p]=N,w.hot.active=!1,delete S[p];for(var O=0;O<w.children.length;O++){var x=S[w.children[O]];if(x){var I=x.parents.indexOf(p);I>=0&&(x.parents.splice(I,1),0===x.parents.length&&x.hot&&x.hot._disposeHandlers&&x.hot._disposeHandlers.length>0&&E.push(x.id))}}}}for(var p in a)if(Object.prototype.hasOwnProperty.call(a,p))for(var w=S[p],k=a[p],O=0;O<k.length;O++){var M=k[O],I=w.children.indexOf(M);I>=0&&w.children.splice(I,1)}i("apply"),y=v;for(var p in u)Object.prototype.hasOwnProperty.call(u,p)&&(t[p]=u[p]);var T=null;for(var p in a)if(Object.prototype.hasOwnProperty.call(a,p)){for(var w=S[p],k=a[p],R=[],m=0;m<k.length;m++){var M=k[m],C=w.hot._acceptedDependencies[M];R.indexOf(C)>=0||R.push(C)}for(var m=0;m<R.length;m++){var C=R[m];try{C(a)}catch(A){T||(T=A)}}}for(var m=0;m<h.length;m++){var P=h[m],p=P.module;g=[p];try{l(p)}catch(A){if("function"==typeof P.errorHandler)try{P.errorHandler(A)}catch(A){T||(T=A)}else T||(T=A)}}return T?(i("fail"),n(T)):(i("idle"),void n(null,s))}function l(e){if(S[e])return S[e].exports;var n=S[e]={exports:{},id:e,loaded:!1,hot:o(e),parents:g,children:[]};return t[e].call(n.exports,n,n.exports,r(e)),n.loaded=!0,n.exports}var f=this.webpackHotUpdate;this.webpackHotUpdate=function(t,e){s(t,e),f&&f(t,e)};var h,d,v,m=!0,y="b5b64a55a92023deca68",_={},g=[],E=[],b="idle",w=0,N=0,D={},O={},C={},S={};return l.m=t,l.c=S,l.p="/build",l.h=function(){return y},r(0)(0)}([function(t,e,n){n(185),n(188),t.exports=n(106)},function(t){function e(){}var n=t.exports={};n.nextTick=function(){var t="undefined"!=typeof window&&window.setImmediate,e="undefined"!=typeof window&&window.MutationObserver,n="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(t)return function(t){return window.setImmediate(t)};var r=[];if(e){var o=document.createElement("div"),i=new MutationObserver(function(){var t=r.slice();r.length=0,t.forEach(function(t){t()})});return i.observe(o,{attributes:!0}),function(t){r.length||o.setAttribute("yes","no"),r.push(t)}}return n?(window.addEventListener("message",function(t){var e=t.source;if((e===window||null===e)&&"process-tick"===t.data&&(t.stopPropagation(),r.length>0)){var n=r.shift();n()}},!0),function(t){r.push(t),window.postMessage("process-tick","*")}):function(t){setTimeout(t,0)}}(),n.title="browser",n.browser=!0,n.env={},n.argv=[],n.on=e,n.addListener=e,n.once=e,n.off=e,n.removeListener=e,n.removeAllListeners=e,n.emit=e,n.binding=function(){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(){throw new Error("process.chdir is not supported")}},function(t,e,n){(function(e){"use strict";var n=function(t,n,r,o,i,a,s,u){if("production"!==e.env.NODE_ENV&&void 0===n)throw new Error("invariant requires an error message argument");if(!t){var c;if(void 0===n)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var p=[r,o,i,a,s,u],l=0;c=new Error("Invariant Violation: "+n.replace(/%s/g,function(){return p[l++]}))}throw c.framesToPop=1,c}};t.exports=n}).call(e,n(1))},function(t){function e(t){if(null==t)throw new TypeError("Object.assign target cannot be null or undefined");for(var e=Object(t),n=Object.prototype.hasOwnProperty,r=1;r<arguments.length;r++){var o=arguments[r];if(null!=o){var i=Object(o);for(var a in i)n.call(i,a)&&(e[a]=i[a])}}return e}t.exports=e},function(t,e,n){(function(e){"use strict";function r(t,n){Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:function(){return this._store?this._store[n]:null},set:function(t){"production"!==e.env.NODE_ENV?s(!1,"Don't set the "+n+" property of the component. Mutate the existing props object instead."):null,this._store[n]=t}})}function o(t){try{var e={props:!0};for(var n in e)r(t,n);c=!0}catch(o){}}var i=n(45),a=n(18),s=n(6),u={key:!0,ref:!0},c=!1,p=function(t,n,r,o,i,a){return this.type=t,this.key=n,this.ref=r,this._owner=o,this._context=i,"production"!==e.env.NODE_ENV&&(this._store={validated:!1,props:a},c)?void Object.freeze(this):void(this.props=a)};p.prototype={_isReactElement:!0},"production"!==e.env.NODE_ENV&&o(p.prototype),p.createElement=function(t,n,r){var o,c={},l=null,f=null;if(null!=n){f=void 0===n.ref?null:n.ref,"production"!==e.env.NODE_ENV&&("production"!==e.env.NODE_ENV?s(null!==n.key,"createElement(...): Encountered component with a `key` of null. In a future version, this will be treated as equivalent to the string 'null'; instead, provide an explicit key or use undefined."):null),l=null==n.key?null:""+n.key;for(o in n)n.hasOwnProperty(o)&&!u.hasOwnProperty(o)&&(c[o]=n[o])}var h=arguments.length-2;if(1===h)c.children=r;else if(h>1){for(var d=Array(h),v=0;h>v;v++)d[v]=arguments[v+2];c.children=d}if(t&&t.defaultProps){var m=t.defaultProps;for(o in m)"undefined"==typeof c[o]&&(c[o]=m[o])}return new p(t,l,f,a.current,i.current,c)},p.createFactory=function(t){var e=p.createElement.bind(null,t);return e.type=t,e},p.cloneAndReplaceProps=function(t,n){var r=new p(t.type,t.key,t.ref,t._owner,t._context,n);return"production"!==e.env.NODE_ENV&&(r._store.validated=t._store.validated),r},p.isValidElement=function(t){var e=!(!t||!t._isReactElement);return e},t.exports=p}).call(e,n(1))},function(t){"use strict";var e=!("undefined"==typeof window||!window.document||!window.document.createElement),n={canUseDOM:e,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:e&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:e&&!!window.screen,isInWorker:!e};t.exports=n},function(t,e,n){(function(e){"use strict";var r=n(13),o=r;"production"!==e.env.NODE_ENV&&(o=function(t,e){for(var n=[],r=2,o=arguments.length;o>r;r++)n.push(arguments[r]);if(void 0===e)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(!t){var i=0;console.warn("Warning: "+e.replace(/%s/g,function(){return n[i++]}))}}),t.exports=o}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(t){var e=b(t);return e&&U.getID(e)}function o(t){var n=i(t);if(n)if(I.hasOwnProperty(n)){var r=I[n];r!==t&&("production"!==e.env.NODE_ENV?N(!u(r,n),"ReactMount: Two valid but unequal nodes with the same `%s`: %s",x,n):N(!u(r,n)),I[n]=t)}else I[n]=t;return n}function i(t){return t&&t.getAttribute&&t.getAttribute(x)||""}function a(t,e){var n=i(t);n!==e&&delete I[n],t.setAttribute(x,e),I[e]=t}function s(t){return I.hasOwnProperty(t)&&u(I[t],t)||(I[t]=U.findReactNodeByID(t)),I[t]}function u(t,n){if(t){"production"!==e.env.NODE_ENV?N(i(t)===n,"ReactMount: Unexpected modification of `%s`",x):N(i(t)===n);var r=U.findReactContainerForID(n);if(r&&g(r,t))return!0}return!1}function c(t){delete I[t]}function p(t){var e=I[t];return e&&u(e,t)?void(L=e):!1}function l(t){L=null,y.traverseAncestors(t,p);var e=L;return L=null,e}var f=n(17),h=n(22),d=n(18),v=n(4),m=n(27),y=n(24),_=n(11),g=n(77),E=n(49),b=n(81),w=n(37),N=n(2),D=n(57),O=n(6),C=m.wrapCreateElement(v.createElement),S=y.SEPARATOR,x=f.ID_ATTRIBUTE_NAME,I={},k=1,M=9,T={},R={};if("production"!==e.env.NODE_ENV)var A={};var P=[],L=null,U={_instancesByReactRootID:T,scrollMonitor:function(t,e){e()},_updateRootComponent:function(t,n,o,i){var a=n.props;return U.scrollMonitor(o,function(){t.replaceProps(a,i)}),"production"!==e.env.NODE_ENV&&(A[r(o)]=b(o)),t},_registerComponent:function(t,n){"production"!==e.env.NODE_ENV?N(n&&(n.nodeType===k||n.nodeType===M),"_registerComponent(...): Target container is not a DOM element."):N(n&&(n.nodeType===k||n.nodeType===M)),h.ensureScrollValueMonitoring();var r=U.registerContainer(n);return T[r]=t,r},_renderNewRootComponent:_.measure("ReactMount","_renderNewRootComponent",function(t,n,r){"production"!==e.env.NODE_ENV?O(null==d.current,"_renderNewRootComponent(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null;var o=w(t,null),i=U._registerComponent(o,n);return o.mountComponentIntoNode(i,n,r),"production"!==e.env.NODE_ENV&&(A[i]=b(n)),o}),render:function(t,n,o){"production"!==e.env.NODE_ENV?N(v.isValidElement(t),"renderComponent(): Invalid component element.%s","string"==typeof t?" Instead of passing an element string, make sure to instantiate it by passing it to React.createElement.":m.isValidFactory(t)?" Instead of passing a component class, make sure to instantiate it by passing it to React.createElement.":"undefined"!=typeof t.props?" This may be caused by unintentionally loading two independent copies of React.":""):N(v.isValidElement(t));var i=T[r(n)];if(i){var a=i._currentElement;if(D(a,t))return U._updateRootComponent(i,t,n,o);U.unmountComponentAtNode(n)}var s=b(n),u=s&&U.isRenderedByReact(s),c=u&&!i,p=U._renderNewRootComponent(t,n,c);return o&&o.call(p),p},constructAndRenderComponent:function(t,e,n){var r=C(t,e);return U.render(r,n)},constructAndRenderComponentByID:function(t,n,r){var o=document.getElementById(r);return"production"!==e.env.NODE_ENV?N(o,'Tried to get element with id of "%s" but it is not present on the page.',r):N(o),U.constructAndRenderComponent(t,n,o)},registerContainer:function(t){var e=r(t);return e&&(e=y.getReactRootIDFromNodeID(e)),e||(e=y.createReactRootID()),R[e]=t,e},unmountComponentAtNode:function(t){"production"!==e.env.NODE_ENV?O(null==d.current,"unmountComponentAtNode(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null;var n=r(t),o=T[n];return o?(U.unmountComponentFromNode(o,t),delete T[n],delete R[n],"production"!==e.env.NODE_ENV&&delete A[n],!0):!1},unmountComponentFromNode:function(t,e){for(t.unmountComponent(),e.nodeType===M&&(e=e.documentElement);e.lastChild;)e.removeChild(e.lastChild)},findReactContainerForID:function(t){var n=y.getReactRootIDFromNodeID(t),r=R[n];if("production"!==e.env.NODE_ENV){var o=A[n];if(o&&o.parentNode!==r){"production"!==e.env.NODE_ENV?N(i(o)===n,"ReactMount: Root element ID differed from reactRootID."):N(i(o)===n);var a=r.firstChild;a&&n===i(a)?A[n]=a:console.warn("ReactMount: Root element has been removed from its original container. New container:",o.parentNode)}}return r},findReactNodeByID:function(t){var e=U.findReactContainerForID(t);return U.findComponentRoot(e,t)},isRenderedByReact:function(t){if(1!==t.nodeType)return!1;var e=U.getID(t);return e?e.charAt(0)===S:!1},getFirstReactDOM:function(t){for(var e=t;e&&e.parentNode!==e;){if(U.isRenderedByReact(e))return e;e=e.parentNode}return null},findComponentRoot:function(t,n){var r=P,o=0,i=l(n)||t;for(r[0]=i.firstChild,r.length=1;o<r.length;){for(var a,s=r[o++];s;){var u=U.getID(s);u?n===u?a=s:y.isAncestorIDOf(u,n)&&(r.length=o=0,r.push(s.firstChild)):r.push(s.firstChild),s=s.nextSibling}if(a)return r.length=0,a}r.length=0,"production"!==e.env.NODE_ENV?N(!1,"findComponentRoot(..., %s): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.",n,U.getID(t)):N(!1)},getReactRootID:r,getID:o,setID:a,getNode:s,purgeID:c};U.renderComponent=E("ReactMount","renderComponent","render",this,U.render),t.exports=U}).call(e,n(1))},function(t,e,n){"use strict";var r=n(25),o=r({bubbled:null,captured:null}),i=r({topBlur:null,topChange:null,topClick:null,topCompositionEnd:null,topCompositionStart:null,topCompositionUpdate:null,topContextMenu:null,topCopy:null,topCut:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topError:null,topFocus:null,topInput:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topLoad:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topPaste:null,topReset:null,topScroll:null,topSelectionChange:null,topSubmit:null,topTextInput:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topWheel:null}),a={topLevelTypes:i,PropagationPhases:o};t.exports=a},function(t,e,n){(function(e){"use strict";function r(t){var e=t._owner||null;return e&&e.constructor&&e.constructor.displayName?" Check the render method of `"+e.constructor.displayName+"`.":""}function o(t,n,r){for(var o in n)n.hasOwnProperty(o)&&("production"!==e.env.NODE_ENV?x("function"==typeof n[o],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",t.displayName||"ReactCompositeComponent",D[r],o):x("function"==typeof n[o]))}function i(t,n){var r=V.hasOwnProperty(n)?V[n]:null;B.hasOwnProperty(n)&&("production"!==e.env.NODE_ENV?x(r===L.OVERRIDE_BASE,"ReactCompositeComponentInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",n):x(r===L.OVERRIDE_BASE)),t.hasOwnProperty(n)&&("production"!==e.env.NODE_ENV?x(r===L.DEFINE_MANY||r===L.DEFINE_MANY_MERGED,"ReactCompositeComponentInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",n):x(r===L.DEFINE_MANY||r===L.DEFINE_MANY_MERGED))}function a(t){var n=t._compositeLifeCycleState;"production"!==e.env.NODE_ENV?x(t.isMounted()||n===z.MOUNTING,"replaceState(...): Can only update a mounted or mounting component."):x(t.isMounted()||n===z.MOUNTING),"production"!==e.env.NODE_ENV?x(null==d.current,"replaceState(...): Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."):x(null==d.current),"production"!==e.env.NODE_ENV?x(n!==z.UNMOUNTING,"replaceState(...): Cannot update while unmounting component. This usually means you called setState() on an unmounted component."):x(n!==z.UNMOUNTING)}function s(t,n){if(n){"production"!==e.env.NODE_ENV?x(!g.isValidFactory(n),"ReactCompositeComponent: You're attempting to use a component class as a mixin. Instead, just use a regular object."):x(!g.isValidFactory(n)),"production"!==e.env.NODE_ENV?x(!v.isValidElement(n),"ReactCompositeComponent: You're attempting to use a component as a mixin. Instead, just use a regular object."):x(!v.isValidElement(n));var r=t.prototype;n.hasOwnProperty(P)&&j.mixins(t,n.mixins);for(var o in n)if(n.hasOwnProperty(o)&&o!==P){var a=n[o];if(i(r,o),j.hasOwnProperty(o))j[o](t,a);else{var s=V.hasOwnProperty(o),u=r.hasOwnProperty(o),c=a&&a.__reactDontBind,f="function"==typeof a,h=f&&!s&&!u&&!c;if(h)r.__reactAutoBindMap||(r.__reactAutoBindMap={}),r.__reactAutoBindMap[o]=a,r[o]=a;else if(u){var d=V[o];"production"!==e.env.NODE_ENV?x(s&&(d===L.DEFINE_MANY_MERGED||d===L.DEFINE_MANY),"ReactCompositeComponent: Unexpected spec policy %s for key %s when mixing in component specs.",d,o):x(s&&(d===L.DEFINE_MANY_MERGED||d===L.DEFINE_MANY)),d===L.DEFINE_MANY_MERGED?r[o]=p(r[o],a):d===L.DEFINE_MANY&&(r[o]=l(r[o],a))}else r[o]=a,"production"!==e.env.NODE_ENV&&"function"==typeof a&&n.displayName&&(r[o].displayName=n.displayName+"_"+o)}}}}function u(t,n){if(n)for(var r in n){var o=n[r];if(n.hasOwnProperty(r)){var i=r in j;"production"!==e.env.NODE_ENV?x(!i,'ReactCompositeComponent: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',r):x(!i);var a=r in t;"production"!==e.env.NODE_ENV?x(!a,"ReactCompositeComponent: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",r):x(!a),t[r]=o}}}function c(t,n){return"production"!==e.env.NODE_ENV?x(t&&n&&"object"==typeof t&&"object"==typeof n,"mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects"):x(t&&n&&"object"==typeof t&&"object"==typeof n),T(n,function(n,r){"production"!==e.env.NODE_ENV?x(void 0===t[r],"mergeObjectsWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",r):x(void 0===t[r]),t[r]=n}),t}function p(t,e){return function(){var n=t.apply(this,arguments),r=e.apply(this,arguments);return null==n?r:null==r?n:c(n,r)}}function l(t,e){return function(){t.apply(this,arguments),e.apply(this,arguments)}}var f=n(23),h=n(45),d=n(18),v=n(4),m=n(46),y=n(34),_=n(142),g=n(27),E=n(69),b=n(11),w=n(146),N=n(71),D=n(70),O=n(12),C=n(3),S=n(37),x=n(2),I=n(25),k=n(14),M=n(38),T=n(84),R=n(57),A=n(6),P=k({mixins:null}),L=I({DEFINE_ONCE:null,DEFINE_MANY:null,OVERRIDE_BASE:null,DEFINE_MANY_MERGED:null}),U=[],V={mixins:L.DEFINE_MANY,statics:L.DEFINE_MANY,propTypes:L.DEFINE_MANY,contextTypes:L.DEFINE_MANY,childContextTypes:L.DEFINE_MANY,getDefaultProps:L.DEFINE_MANY_MERGED,getInitialState:L.DEFINE_MANY_MERGED,getChildContext:L.DEFINE_MANY_MERGED,render:L.DEFINE_ONCE,componentWillMount:L.DEFINE_MANY,componentDidMount:L.DEFINE_MANY,componentWillReceiveProps:L.DEFINE_MANY,shouldComponentUpdate:L.DEFINE_ONCE,componentWillUpdate:L.DEFINE_MANY,componentDidUpdate:L.DEFINE_MANY,componentWillUnmount:L.DEFINE_MANY,updateComponent:L.OVERRIDE_BASE},j={displayName:function(t,e){t.displayName=e},mixins:function(t,e){if(e)for(var n=0;n<e.length;n++)s(t,e[n])},childContextTypes:function(t,e){o(t,e,N.childContext),t.childContextTypes=C({},t.childContextTypes,e)},contextTypes:function(t,e){o(t,e,N.context),t.contextTypes=C({},t.contextTypes,e)},getDefaultProps:function(t,e){t.getDefaultProps=t.getDefaultProps?p(t.getDefaultProps,e):e},propTypes:function(t,e){o(t,e,N.prop),t.propTypes=C({},t.propTypes,e)},statics:function(t,e){u(t,e)}},z=I({MOUNTING:null,UNMOUNTING:null,RECEIVING_PROPS:null}),B={construct:function(){f.Mixin.construct.apply(this,arguments),E.Mixin.construct.apply(this,arguments),this.state=null,this._pendingState=null,this.context=null,this._compositeLifeCycleState=null},isMounted:function(){return f.Mixin.isMounted.call(this)&&this._compositeLifeCycleState!==z.MOUNTING},mountComponent:b.measure("ReactCompositeComponent","mountComponent",function(t,n,r){f.Mixin.mountComponent.call(this,t,n,r),this._compositeLifeCycleState=z.MOUNTING,this.__reactAutoBindMap&&this._bindAutoBindMethods(),this.context=this._processContext(this._currentElement._context),this.props=this._processProps(this.props),this.state=this.getInitialState?this.getInitialState():null,"production"!==e.env.NODE_ENV?x("object"==typeof this.state&&!Array.isArray(this.state),"%s.getInitialState(): must return an object or null",this.constructor.displayName||"ReactCompositeComponent"):x("object"==typeof this.state&&!Array.isArray(this.state)),this._pendingState=null,this._pendingForceUpdate=!1,this.componentWillMount&&(this.componentWillMount(),this._pendingState&&(this.state=this._pendingState,this._pendingState=null)),this._renderedComponent=S(this._renderValidatedComponent(),this._currentElement.type),this._compositeLifeCycleState=null;var o=this._renderedComponent.mountComponent(t,n,r+1);return this.componentDidMount&&n.getReactMountReady().enqueue(this.componentDidMount,this),o}),unmountComponent:function(){this._compositeLifeCycleState=z.UNMOUNTING,this.componentWillUnmount&&this.componentWillUnmount(),this._compositeLifeCycleState=null,this._renderedComponent.unmountComponent(),this._renderedComponent=null,f.Mixin.unmountComponent.call(this)},setState:function(t,n){"production"!==e.env.NODE_ENV?x("object"==typeof t||null==t,"setState(...): takes an object of state variables to update."):x("object"==typeof t||null==t),"production"!==e.env.NODE_ENV&&("production"!==e.env.NODE_ENV?A(null!=t,"setState(...): You passed an undefined or null state object; instead, use forceUpdate()."):null),this.replaceState(C({},this._pendingState||this.state,t),n)},replaceState:function(t,e){a(this),this._pendingState=t,this._compositeLifeCycleState!==z.MOUNTING&&O.enqueueUpdate(this,e)},_processContext:function(t){var n=null,r=this.constructor.contextTypes;if(r){n={};for(var o in r)n[o]=t[o];"production"!==e.env.NODE_ENV&&this._checkPropTypes(r,n,N.context)}return n},_processChildContext:function(t){var n=this.getChildContext&&this.getChildContext(),r=this.constructor.displayName||"ReactCompositeComponent";if(n){"production"!==e.env.NODE_ENV?x("object"==typeof this.constructor.childContextTypes,"%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",r):x("object"==typeof this.constructor.childContextTypes),"production"!==e.env.NODE_ENV&&this._checkPropTypes(this.constructor.childContextTypes,n,N.childContext);for(var o in n)"production"!==e.env.NODE_ENV?x(o in this.constructor.childContextTypes,'%s.getChildContext(): key "%s" is not defined in childContextTypes.',r,o):x(o in this.constructor.childContextTypes);return C({},t,n)}return t},_processProps:function(t){if("production"!==e.env.NODE_ENV){var n=this.constructor.propTypes;n&&this._checkPropTypes(n,t,N.prop)}return t},_checkPropTypes:function(t,n,o){var i=this.constructor.displayName;for(var a in t)if(t.hasOwnProperty(a)){var s=t[a](n,a,i,o);if(s instanceof Error){var u=r(this);"production"!==e.env.NODE_ENV?A(!1,s.message+u):null}}},performUpdateIfNecessary:function(t){var n=this._compositeLifeCycleState;if(n!==z.MOUNTING&&n!==z.RECEIVING_PROPS&&(null!=this._pendingElement||null!=this._pendingState||this._pendingForceUpdate)){var r=this.context,o=this.props,i=this._currentElement;null!=this._pendingElement&&(i=this._pendingElement,r=this._processContext(i._context),o=this._processProps(i.props),this._pendingElement=null,this._compositeLifeCycleState=z.RECEIVING_PROPS,this.componentWillReceiveProps&&this.componentWillReceiveProps(o,r)),this._compositeLifeCycleState=null;var a=this._pendingState||this.state;this._pendingState=null;var s=this._pendingForceUpdate||!this.shouldComponentUpdate||this.shouldComponentUpdate(o,a,r);"production"!==e.env.NODE_ENV&&"undefined"==typeof s&&console.warn((this.constructor.displayName||"ReactCompositeComponent")+".shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false."),s?(this._pendingForceUpdate=!1,this._performComponentUpdate(i,o,a,r,t)):(this._currentElement=i,this.props=o,this.state=a,this.context=r,this._owner=i._owner)}},_performComponentUpdate:function(t,e,n,r,o){var i=this._currentElement,a=this.props,s=this.state,u=this.context;this.componentWillUpdate&&this.componentWillUpdate(e,n,r),this._currentElement=t,this.props=e,this.state=n,this.context=r,this._owner=t._owner,this.updateComponent(o,i),this.componentDidUpdate&&o.getReactMountReady().enqueue(this.componentDidUpdate.bind(this,a,s,u),this)},receiveComponent:function(t,e){(t!==this._currentElement||null==t._owner)&&f.Mixin.receiveComponent.call(this,t,e)},updateComponent:b.measure("ReactCompositeComponent","updateComponent",function(t,e){f.Mixin.updateComponent.call(this,t,e);var n=this._renderedComponent,r=n._currentElement,o=this._renderValidatedComponent();if(R(r,o))n.receiveComponent(o,t);else{var i=this._rootNodeID,a=n._rootNodeID;n.unmountComponent(),this._renderedComponent=S(o,this._currentElement.type);var s=this._renderedComponent.mountComponent(i,t,this._mountDepth+1);f.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(a,s)}}),forceUpdate:function(t){var n=this._compositeLifeCycleState;"production"!==e.env.NODE_ENV?x(this.isMounted()||n===z.MOUNTING,"forceUpdate(...): Can only force an update on mounted or mounting components."):x(this.isMounted()||n===z.MOUNTING),"production"!==e.env.NODE_ENV?x(n!==z.UNMOUNTING&&null==d.current,"forceUpdate(...): Cannot force an update while unmounting component or within a `render` function."):x(n!==z.UNMOUNTING&&null==d.current),this._pendingForceUpdate=!0,O.enqueueUpdate(this,t)},_renderValidatedComponent:b.measure("ReactCompositeComponent","_renderValidatedComponent",function(){var t,n=h.current;h.current=this._processChildContext(this._currentElement._context),d.current=this;try{t=this.render(),null===t||t===!1?(t=y.getEmptyComponent(),y.registerNullComponentID(this._rootNodeID)):y.deregisterNullComponentID(this._rootNodeID)}finally{h.current=n,d.current=null}return"production"!==e.env.NODE_ENV?x(v.isValidElement(t),"%s.render(): A valid ReactComponent must be returned. You may have returned undefined, an array or some other invalid object.",this.constructor.displayName||"ReactCompositeComponent"):x(v.isValidElement(t)),t}),_bindAutoBindMethods:function(){for(var t in this.__reactAutoBindMap)if(this.__reactAutoBindMap.hasOwnProperty(t)){var e=this.__reactAutoBindMap[t];this[t]=this._bindAutoBindMethod(_.guard(e,this.constructor.displayName+"."+t))}},_bindAutoBindMethod:function(t){var n=this,r=t.bind(n);if("production"!==e.env.NODE_ENV){r.__reactBoundContext=n,r.__reactBoundMethod=t,r.__reactBoundArguments=null;var o=n.constructor.displayName,i=r.bind;r.bind=function(e){for(var a=[],s=1,u=arguments.length;u>s;s++)a.push(arguments[s]);if(e!==n&&null!==e)M("react_bind_warning",{component:o}),console.warn("bind(): React component methods may only be bound to the component instance. See "+o);else if(!a.length)return M("react_bind_warning",{component:o}),console.warn("bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See "+o),r;var c=i.apply(r,arguments);return c.__reactBoundContext=n,c.__reactBoundMethod=t,c.__reactBoundArguments=a,c}}return r}},q=function(){};C(q.prototype,f.Mixin,E.Mixin,w.Mixin,B);var W={LifeCycle:z,Base:q,createClass:function(t){var n=function(){};n.prototype=new q,n.prototype.constructor=n,U.forEach(s.bind(null,n)),s(n,t),n.getDefaultProps&&(n.defaultProps=n.getDefaultProps()),"production"!==e.env.NODE_ENV?x(n.prototype.render,"createClass(...): Class specification must implement a `render` method."):x(n.prototype.render),"production"!==e.env.NODE_ENV&&n.prototype.componentShouldUpdate&&(M("react_component_should_update_warning",{component:t.displayName}),console.warn((t.displayName||"A component")+" has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value."));for(var r in V)n.prototype[r]||(n.prototype[r]=null);return g.wrapFactory("production"!==e.env.NODE_ENV?m.createFactory(n):v.createFactory(n))},injection:{injectMixin:function(t){U.push(t)}}};t.exports=W}).call(e,n(1))},function(t,e,n){(function(e){"use strict";var r=n(34),o=n(7),i=n(2),a={getDOMNode:function(){return"production"!==e.env.NODE_ENV?i(this.isMounted(),"getDOMNode(): A component must be mounted to have a DOM node."):i(this.isMounted()),r.isNullComponentID(this._rootNodeID)?null:o.getNode(this._rootNodeID)}};t.exports=a}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function n(t,e,n){return n}var r={enableMeasure:!1,storedMeasure:n,measure:function(t,n,o){if("production"!==e.env.NODE_ENV){var i=null,a=function(){return r.enableMeasure?(i||(i=r.storedMeasure(t,n,o)),i.apply(this,arguments)):o.apply(this,arguments)};return a.displayName=t+"_"+n,a}return o},injection:{injectMeasure:function(t){r.storedMeasure=t}}};t.exports=r}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(){"production"!==e.env.NODE_ENV?m(S.ReactReconcileTransaction&&b,"ReactUpdates: must inject a reconcile transaction class and batching strategy"):m(S.ReactReconcileTransaction&&b)
}function o(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=p.getPooled(),this.reconcileTransaction=S.ReactReconcileTransaction.getPooled()}function i(t,e,n){r(),b.batchedUpdates(t,e,n)}function a(t,e){return t._mountDepth-e._mountDepth}function s(t){var n=t.dirtyComponentsLength;"production"!==e.env.NODE_ENV?m(n===_.length,"Expected flush transaction's stored dirty-components length (%s) to match dirty-components array length (%s).",n,_.length):m(n===_.length),_.sort(a);for(var r=0;n>r;r++){var o=_[r];if(o.isMounted()){var i=o._pendingCallbacks;if(o._pendingCallbacks=null,o.performUpdateIfNecessary(t.reconcileTransaction),i)for(var s=0;s<i.length;s++)t.callbackQueue.enqueue(i[s],o)}}}function u(t,n){return"production"!==e.env.NODE_ENV?m(!n||"function"==typeof n,"enqueueUpdate(...): You called `setProps`, `replaceProps`, `setState`, `replaceState`, or `forceUpdate` with a callback that isn't callable."):m(!n||"function"==typeof n),r(),"production"!==e.env.NODE_ENV?y(null==f.current,"enqueueUpdate(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null,b.isBatchingUpdates?(_.push(t),void(n&&(t._pendingCallbacks?t._pendingCallbacks.push(n):t._pendingCallbacks=[n]))):void b.batchedUpdates(u,t,n)}function c(t,n){"production"!==e.env.NODE_ENV?m(b.isBatchingUpdates,"ReactUpdates.asap: Can't enqueue an asap callback in a context whereupdates are not being batched."):m(b.isBatchingUpdates),g.enqueue(t,n),E=!0}var p=n(42),l=n(15),f=n(18),h=n(11),d=n(36),v=n(3),m=n(2),y=n(6),_=[],g=p.getPooled(),E=!1,b=null,w={initialize:function(){this.dirtyComponentsLength=_.length},close:function(){this.dirtyComponentsLength!==_.length?(_.splice(0,this.dirtyComponentsLength),O()):_.length=0}},N={initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}},D=[w,N];v(o.prototype,d.Mixin,{getTransactionWrappers:function(){return D},destructor:function(){this.dirtyComponentsLength=null,p.release(this.callbackQueue),this.callbackQueue=null,S.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(t,e,n){return d.Mixin.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,t,e,n)}}),l.addPoolingTo(o);var O=h.measure("ReactUpdates","flushBatchedUpdates",function(){for(;_.length||E;){if(_.length){var t=o.getPooled();t.perform(s,null,t),o.release(t)}if(E){E=!1;var e=g;g=p.getPooled(),e.notifyAll(),p.release(e)}}}),C={injectReconcileTransaction:function(t){"production"!==e.env.NODE_ENV?m(t,"ReactUpdates: must provide a reconcile transaction class"):m(t),S.ReactReconcileTransaction=t},injectBatchingStrategy:function(t){"production"!==e.env.NODE_ENV?m(t,"ReactUpdates: must provide a batching strategy"):m(t),"production"!==e.env.NODE_ENV?m("function"==typeof t.batchedUpdates,"ReactUpdates: must provide a batchedUpdates() function"):m("function"==typeof t.batchedUpdates),"production"!==e.env.NODE_ENV?m("boolean"==typeof t.isBatchingUpdates,"ReactUpdates: must provide an isBatchingUpdates boolean attribute"):m("boolean"==typeof t.isBatchingUpdates),b=t}},S={ReactReconcileTransaction:null,batchedUpdates:i,enqueueUpdate:u,flushBatchedUpdates:O,injection:C,asap:c};t.exports=S}).call(e,n(1))},function(t){function e(t){return function(){return t}}function n(){}n.thatReturns=e,n.thatReturnsFalse=e(!1),n.thatReturnsTrue=e(!0),n.thatReturnsNull=e(null),n.thatReturnsThis=function(){return this},n.thatReturnsArgument=function(t){return t},t.exports=n},function(t){var e=function(t){var e;for(e in t)if(t.hasOwnProperty(e))return e;return null};t.exports=e},function(t,e,n){(function(e){"use strict";var r=n(2),o=function(t){var e=this;if(e.instancePool.length){var n=e.instancePool.pop();return e.call(n,t),n}return new e(t)},i=function(t,e){var n=this;if(n.instancePool.length){var r=n.instancePool.pop();return n.call(r,t,e),r}return new n(t,e)},a=function(t,e,n){var r=this;if(r.instancePool.length){var o=r.instancePool.pop();return r.call(o,t,e,n),o}return new r(t,e,n)},s=function(t,e,n,r,o){var i=this;if(i.instancePool.length){var a=i.instancePool.pop();return i.call(a,t,e,n,r,o),a}return new i(t,e,n,r,o)},u=function(t){var n=this;"production"!==e.env.NODE_ENV?r(t instanceof n,"Trying to release an instance into a pool of a different type."):r(t instanceof n),t.destructor&&t.destructor(),n.instancePool.length<n.poolSize&&n.instancePool.push(t)},c=10,p=o,l=function(t,e){var n=t;return n.instancePool=[],n.getPooled=e||p,n.poolSize||(n.poolSize=c),n.release=u,n},f={addPoolingTo:l,oneArgumentPooler:o,twoArgumentPooler:i,threeArgumentPooler:a,fiveArgumentPooler:s};t.exports=f}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(t){return a.markNonLegacyFactory("production"!==e.env.NODE_ENV?i.createFactory(t):o.createFactory(t))}var o=n(4),i=n(46),a=n(27),s=n(84),u=s({a:"a",abbr:"abbr",address:"address",area:"area",article:"article",aside:"aside",audio:"audio",b:"b",base:"base",bdi:"bdi",bdo:"bdo",big:"big",blockquote:"blockquote",body:"body",br:"br",button:"button",canvas:"canvas",caption:"caption",cite:"cite",code:"code",col:"col",colgroup:"colgroup",data:"data",datalist:"datalist",dd:"dd",del:"del",details:"details",dfn:"dfn",dialog:"dialog",div:"div",dl:"dl",dt:"dt",em:"em",embed:"embed",fieldset:"fieldset",figcaption:"figcaption",figure:"figure",footer:"footer",form:"form",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",head:"head",header:"header",hr:"hr",html:"html",i:"i",iframe:"iframe",img:"img",input:"input",ins:"ins",kbd:"kbd",keygen:"keygen",label:"label",legend:"legend",li:"li",link:"link",main:"main",map:"map",mark:"mark",menu:"menu",menuitem:"menuitem",meta:"meta",meter:"meter",nav:"nav",noscript:"noscript",object:"object",ol:"ol",optgroup:"optgroup",option:"option",output:"output",p:"p",param:"param",picture:"picture",pre:"pre",progress:"progress",q:"q",rp:"rp",rt:"rt",ruby:"ruby",s:"s",samp:"samp",script:"script",section:"section",select:"select",small:"small",source:"source",span:"span",strong:"strong",style:"style",sub:"sub",summary:"summary",sup:"sup",table:"table",tbody:"tbody",td:"td",textarea:"textarea",tfoot:"tfoot",th:"th",thead:"thead",time:"time",title:"title",tr:"tr",track:"track",u:"u",ul:"ul","var":"var",video:"video",wbr:"wbr",circle:"circle",defs:"defs",ellipse:"ellipse",g:"g",line:"line",linearGradient:"linearGradient",mask:"mask",path:"path",pattern:"pattern",polygon:"polygon",polyline:"polyline",radialGradient:"radialGradient",rect:"rect",stop:"stop",svg:"svg",text:"text",tspan:"tspan"},r);t.exports=u}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(t,e){return(t&e)===e}var o=n(2),i={MUST_USE_ATTRIBUTE:1,MUST_USE_PROPERTY:2,HAS_SIDE_EFFECTS:4,HAS_BOOLEAN_VALUE:8,HAS_NUMERIC_VALUE:16,HAS_POSITIVE_NUMERIC_VALUE:48,HAS_OVERLOADED_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(t){var n=t.Properties||{},a=t.DOMAttributeNames||{},u=t.DOMPropertyNames||{},c=t.DOMMutationMethods||{};t.isCustomAttribute&&s._isCustomAttributeFunctions.push(t.isCustomAttribute);for(var p in n){"production"!==e.env.NODE_ENV?o(!s.isStandardName.hasOwnProperty(p),"injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.",p):o(!s.isStandardName.hasOwnProperty(p)),s.isStandardName[p]=!0;var l=p.toLowerCase();if(s.getPossibleStandardName[l]=p,a.hasOwnProperty(p)){var f=a[p];s.getPossibleStandardName[f]=p,s.getAttributeName[p]=f}else s.getAttributeName[p]=l;s.getPropertyName[p]=u.hasOwnProperty(p)?u[p]:p,s.getMutationMethod[p]=c.hasOwnProperty(p)?c[p]:null;var h=n[p];s.mustUseAttribute[p]=r(h,i.MUST_USE_ATTRIBUTE),s.mustUseProperty[p]=r(h,i.MUST_USE_PROPERTY),s.hasSideEffects[p]=r(h,i.HAS_SIDE_EFFECTS),s.hasBooleanValue[p]=r(h,i.HAS_BOOLEAN_VALUE),s.hasNumericValue[p]=r(h,i.HAS_NUMERIC_VALUE),s.hasPositiveNumericValue[p]=r(h,i.HAS_POSITIVE_NUMERIC_VALUE),s.hasOverloadedBooleanValue[p]=r(h,i.HAS_OVERLOADED_BOOLEAN_VALUE),"production"!==e.env.NODE_ENV?o(!s.mustUseAttribute[p]||!s.mustUseProperty[p],"DOMProperty: Cannot require using both attribute and property: %s",p):o(!s.mustUseAttribute[p]||!s.mustUseProperty[p]),"production"!==e.env.NODE_ENV?o(s.mustUseProperty[p]||!s.hasSideEffects[p],"DOMProperty: Properties that have side effects must use property: %s",p):o(s.mustUseProperty[p]||!s.hasSideEffects[p]),"production"!==e.env.NODE_ENV?o(!!s.hasBooleanValue[p]+!!s.hasNumericValue[p]+!!s.hasOverloadedBooleanValue[p]<=1,"DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s",p):o(!!s.hasBooleanValue[p]+!!s.hasNumericValue[p]+!!s.hasOverloadedBooleanValue[p]<=1)}}},a={},s={ID_ATTRIBUTE_NAME:"data-reactid",isStandardName:{},getPossibleStandardName:{},getAttributeName:{},getPropertyName:{},getMutationMethod:{},mustUseAttribute:{},mustUseProperty:{},hasSideEffects:{},hasBooleanValue:{},hasNumericValue:{},hasPositiveNumericValue:{},hasOverloadedBooleanValue:{},_isCustomAttributeFunctions:[],isCustomAttribute:function(t){for(var e=0;e<s._isCustomAttributeFunctions.length;e++){var n=s._isCustomAttributeFunctions[e];if(n(t))return!0}return!1},getDefaultValueForProperty:function(t,e){var n,r=a[t];return r||(a[t]=r={}),e in r||(n=document.createElement(t),r[e]=n[e]),r[e]},injection:i};t.exports=s}).call(e,n(1))},function(t){"use strict";var e={current:null};t.exports=e},function(t,e,n){"use strict";function r(t,e,n){this.dispatchConfig=t,this.dispatchMarker=e,this.nativeEvent=n;var r=this.constructor.Interface;for(var o in r)if(r.hasOwnProperty(o)){var i=r[o];this[o]=i?i(n):n[o]}var s=null!=n.defaultPrevented?n.defaultPrevented:n.returnValue===!1;this.isDefaultPrevented=s?a.thatReturnsTrue:a.thatReturnsFalse,this.isPropagationStopped=a.thatReturnsFalse}var o=n(15),i=n(3),a=n(13),s=n(54),u={type:null,target:s,currentTarget:a.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};i(r.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t.preventDefault?t.preventDefault():t.returnValue=!1,this.isDefaultPrevented=a.thatReturnsTrue},stopPropagation:function(){var t=this.nativeEvent;t.stopPropagation?t.stopPropagation():t.cancelBubble=!0,this.isPropagationStopped=a.thatReturnsTrue},persist:function(){this.isPersistent=a.thatReturnsTrue},isPersistent:a.thatReturnsFalse,destructor:function(){var t=this.constructor.Interface;for(var e in t)this[e]=null;this.dispatchConfig=null,this.dispatchMarker=null,this.nativeEvent=null}}),r.Interface=u,r.augmentClass=function(t,e){var n=this,r=Object.create(n.prototype);i(r,t.prototype),t.prototype=r,t.prototype.constructor=t,t.Interface=i({},n.Interface,e),t.augmentClass=n.augmentClass,o.addPoolingTo(t,o.threeArgumentPooler)},o.addPoolingTo(r,o.threeArgumentPooler),t.exports=r},function(t,e,n){(function(e){"use strict";function r(t,e){return null==e||o.hasBooleanValue[t]&&!e||o.hasNumericValue[t]&&isNaN(e)||o.hasPositiveNumericValue[t]&&1>e||o.hasOverloadedBooleanValue[t]&&e===!1}var o=n(17),i=n(50),a=n(85),s=n(6),u=a(function(t){return i(t)+'="'});if("production"!==e.env.NODE_ENV)var c={children:!0,dangerouslySetInnerHTML:!0,key:!0,ref:!0},p={},l=function(t){if(!(c.hasOwnProperty(t)&&c[t]||p.hasOwnProperty(t)&&p[t])){p[t]=!0;var n=t.toLowerCase(),r=o.isCustomAttribute(n)?n:o.getPossibleStandardName.hasOwnProperty(n)?o.getPossibleStandardName[n]:null;"production"!==e.env.NODE_ENV?s(null==r,"Unknown DOM property "+t+". Did you mean "+r+"?"):null}};var f={createMarkupForID:function(t){return u(o.ID_ATTRIBUTE_NAME)+i(t)+'"'},createMarkupForProperty:function(t,n){if(o.isStandardName.hasOwnProperty(t)&&o.isStandardName[t]){if(r(t,n))return"";var a=o.getAttributeName[t];return o.hasBooleanValue[t]||o.hasOverloadedBooleanValue[t]&&n===!0?i(a):u(a)+i(n)+'"'}return o.isCustomAttribute(t)?null==n?"":u(t)+i(n)+'"':("production"!==e.env.NODE_ENV&&l(t),null)},setValueForProperty:function(t,n,i){if(o.isStandardName.hasOwnProperty(n)&&o.isStandardName[n]){var a=o.getMutationMethod[n];if(a)a(t,i);else if(r(n,i))this.deleteValueForProperty(t,n);else if(o.mustUseAttribute[n])t.setAttribute(o.getAttributeName[n],""+i);else{var s=o.getPropertyName[n];o.hasSideEffects[n]&&""+t[s]==""+i||(t[s]=i)}}else o.isCustomAttribute(n)?null==i?t.removeAttribute(n):t.setAttribute(n,""+i):"production"!==e.env.NODE_ENV&&l(n)},deleteValueForProperty:function(t,n){if(o.isStandardName.hasOwnProperty(n)&&o.isStandardName[n]){var r=o.getMutationMethod[n];if(r)r(t,void 0);else if(o.mustUseAttribute[n])t.removeAttribute(o.getAttributeName[n]);else{var i=o.getPropertyName[n],a=o.getDefaultValueForProperty(t.nodeName,i);o.hasSideEffects[n]&&""+t[i]===a||(t[i]=a)}}else o.isCustomAttribute(n)?t.removeAttribute(n):"production"!==e.env.NODE_ENV&&l(n)}};t.exports=f}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(t,e,n){var r=e.dispatchConfig.phasedRegistrationNames[n];return m(t,r)}function o(t,n,o){if("production"!==e.env.NODE_ENV&&!t)throw new Error("Dispatching id must not be null");var i=n?v.bubbled:v.captured,a=r(t,o,i);a&&(o._dispatchListeners=h(o._dispatchListeners,a),o._dispatchIDs=h(o._dispatchIDs,t))}function i(t){t&&t.dispatchConfig.phasedRegistrationNames&&f.injection.getInstanceHandle().traverseTwoPhase(t.dispatchMarker,o,t)}function a(t,e,n){if(n&&n.dispatchConfig.registrationName){var r=n.dispatchConfig.registrationName,o=m(t,r);o&&(n._dispatchListeners=h(n._dispatchListeners,o),n._dispatchIDs=h(n._dispatchIDs,t))}}function s(t){t&&t.dispatchConfig.registrationName&&a(t.dispatchMarker,null,t)}function u(t){d(t,i)}function c(t,e,n,r){f.injection.getInstanceHandle().traverseEnterLeave(n,r,a,t,e)}function p(t){d(t,s)}var l=n(8),f=n(26),h=n(48),d=n(51),v=l.PropagationPhases,m=f.getListener,y={accumulateTwoPhaseDispatches:u,accumulateDirectDispatches:p,accumulateEnterLeaveDispatches:c};t.exports=y}).call(e,n(1))},function(t,e,n){"use strict";function r(t){return Object.prototype.hasOwnProperty.call(t,v)||(t[v]=h++,l[t[v]]={}),l[t[v]]}var o=n(8),i=n(26),a=n(62),s=n(143),u=n(76),c=n(3),p=n(56),l={},f=!1,h=0,d={topBlur:"blur",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topWheel:"wheel"},v="_reactListenersID"+String(Math.random()).slice(2),m=c({},s,{ReactEventListener:null,injection:{injectReactEventListener:function(t){t.setHandleTopLevel(m.handleTopLevel),m.ReactEventListener=t}},setEnabled:function(t){m.ReactEventListener&&m.ReactEventListener.setEnabled(t)},isEnabled:function(){return!(!m.ReactEventListener||!m.ReactEventListener.isEnabled())},listenTo:function(t,e){for(var n=e,i=r(n),s=a.registrationNameDependencies[t],u=o.topLevelTypes,c=0,l=s.length;l>c;c++){var f=s[c];i.hasOwnProperty(f)&&i[f]||(f===u.topWheel?p("wheel")?m.ReactEventListener.trapBubbledEvent(u.topWheel,"wheel",n):p("mousewheel")?m.ReactEventListener.trapBubbledEvent(u.topWheel,"mousewheel",n):m.ReactEventListener.trapBubbledEvent(u.topWheel,"DOMMouseScroll",n):f===u.topScroll?p("scroll",!0)?m.ReactEventListener.trapCapturedEvent(u.topScroll,"scroll",n):m.ReactEventListener.trapBubbledEvent(u.topScroll,"scroll",m.ReactEventListener.WINDOW_HANDLE):f===u.topFocus||f===u.topBlur?(p("focus",!0)?(m.ReactEventListener.trapCapturedEvent(u.topFocus,"focus",n),m.ReactEventListener.trapCapturedEvent(u.topBlur,"blur",n)):p("focusin")&&(m.ReactEventListener.trapBubbledEvent(u.topFocus,"focusin",n),m.ReactEventListener.trapBubbledEvent(u.topBlur,"focusout",n)),i[u.topBlur]=!0,i[u.topFocus]=!0):d.hasOwnProperty(f)&&m.ReactEventListener.trapBubbledEvent(f,d[f],n),i[f]=!0)}},trapBubbledEvent:function(t,e,n){return m.ReactEventListener.trapBubbledEvent(t,e,n)},trapCapturedEvent:function(t,e,n){return m.ReactEventListener.trapCapturedEvent(t,e,n)},ensureScrollValueMonitoring:function(){if(!f){var t=u.refreshScrollValues;m.ReactEventListener.monitorScrollValue(t),f=!0}},eventNameDispatchConfigs:i.eventNameDispatchConfigs,registrationNameModules:i.registrationNameModules,putListener:i.putListener,getListener:i.getListener,deleteListener:i.deleteListener,deleteAllListeners:i.deleteAllListeners});t.exports=m},function(t,e,n){(function(e){"use strict";var r=n(4),o=n(69),i=n(12),a=n(3),s=n(2),u=n(25),c=u({MOUNTED:null,UNMOUNTED:null}),p=!1,l=null,f=null,h={injection:{injectEnvironment:function(t){"production"!==e.env.NODE_ENV?s(!p,"ReactComponent: injectEnvironment() can only be called once."):s(!p),f=t.mountImageIntoNode,l=t.unmountIDFromEnvironment,h.BackendIDOperations=t.BackendIDOperations,p=!0}},LifeCycle:c,BackendIDOperations:null,Mixin:{isMounted:function(){return this._lifeCycleState===c.MOUNTED},setProps:function(t,e){var n=this._pendingElement||this._currentElement;this.replaceProps(a({},n.props,t),e)},replaceProps:function(t,n){"production"!==e.env.NODE_ENV?s(this.isMounted(),"replaceProps(...): Can only update a mounted component."):s(this.isMounted()),"production"!==e.env.NODE_ENV?s(0===this._mountDepth,"replaceProps(...): You called `setProps` or `replaceProps` on a component with a parent. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created."):s(0===this._mountDepth),this._pendingElement=r.cloneAndReplaceProps(this._pendingElement||this._currentElement,t),i.enqueueUpdate(this,n)},_setPropsInternal:function(t,e){var n=this._pendingElement||this._currentElement;this._pendingElement=r.cloneAndReplaceProps(n,a({},n.props,t)),i.enqueueUpdate(this,e)},construct:function(t){this.props=t.props,this._owner=t._owner,this._lifeCycleState=c.UNMOUNTED,this._pendingCallbacks=null,this._currentElement=t,this._pendingElement=null},mountComponent:function(t,n,r){"production"!==e.env.NODE_ENV?s(!this.isMounted(),"mountComponent(%s, ...): Can only mount an unmounted component. Make sure to avoid storing components between renders or reusing a single component instance in multiple places.",t):s(!this.isMounted());var i=this._currentElement.ref;if(null!=i){var a=this._currentElement._owner;o.addComponentAsRefTo(this,i,a)}this._rootNodeID=t,this._lifeCycleState=c.MOUNTED,this._mountDepth=r},unmountComponent:function(){"production"!==e.env.NODE_ENV?s(this.isMounted(),"unmountComponent(): Can only unmount a mounted component."):s(this.isMounted());var t=this._currentElement.ref;null!=t&&o.removeComponentAsRefFrom(this,t,this._owner),l(this._rootNodeID),this._rootNodeID=null,this._lifeCycleState=c.UNMOUNTED},receiveComponent:function(t,n){"production"!==e.env.NODE_ENV?s(this.isMounted(),"receiveComponent(...): Can only update a mounted component."):s(this.isMounted()),this._pendingElement=t,this.performUpdateIfNecessary(n)},performUpdateIfNecessary:function(t){if(null!=this._pendingElement){var e=this._currentElement,n=this._pendingElement;this._currentElement=n,this.props=n.props,this._owner=n._owner,this._pendingElement=null,this.updateComponent(t,e)}},updateComponent:function(t,e){var n=this._currentElement;(n._owner!==e._owner||n.ref!==e.ref)&&(null!=e.ref&&o.removeComponentAsRefFrom(this,e.ref,e._owner),null!=n.ref&&o.addComponentAsRefTo(this,n.ref,n._owner))},mountComponentIntoNode:function(t,e,n){var r=i.ReactReconcileTransaction.getPooled();r.perform(this._mountComponentIntoNode,this,t,e,r,n),i.ReactReconcileTransaction.release(r)},_mountComponentIntoNode:function(t,e,n,r){var o=this.mountComponent(t,n,0);f(o,e,r)},isOwnedBy:function(t){return this._owner===t},getSiblingByRef:function(t){var e=this._owner;return e&&e.refs?e.refs[t]:null}}};t.exports=h}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(t){return h+t.toString(36)}function o(t,e){return t.charAt(e)===h||e===t.length}function i(t){return""===t||t.charAt(0)===h&&t.charAt(t.length-1)!==h}function a(t,e){return 0===e.indexOf(t)&&o(e,t.length)}function s(t){return t?t.substr(0,t.lastIndexOf(h)):""}function u(t,n){if("production"!==e.env.NODE_ENV?f(i(t)&&i(n),"getNextDescendantID(%s, %s): Received an invalid React DOM ID.",t,n):f(i(t)&&i(n)),"production"!==e.env.NODE_ENV?f(a(t,n),"getNextDescendantID(...): React has made an invalid assumption about the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.",t,n):f(a(t,n)),t===n)return t;for(var r=t.length+d,s=r;s<n.length&&!o(n,s);s++);return n.substr(0,s)}function c(t,n){var r=Math.min(t.length,n.length);if(0===r)return"";for(var a=0,s=0;r>=s;s++)if(o(t,s)&&o(n,s))a=s;else if(t.charAt(s)!==n.charAt(s))break;var u=t.substr(0,a);return"production"!==e.env.NODE_ENV?f(i(u),"getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s",t,n,u):f(i(u)),u}function p(t,n,r,o,i,c){t=t||"",n=n||"","production"!==e.env.NODE_ENV?f(t!==n,"traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.",t):f(t!==n);var p=a(n,t);"production"!==e.env.NODE_ENV?f(p||a(t,n),"traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do not have a parent path.",t,n):f(p||a(t,n));for(var l=0,h=p?s:u,d=t;;d=h(d,n)){var m;if(i&&d===t||c&&d===n||(m=r(d,p,o)),m===!1||d===n)break;"production"!==e.env.NODE_ENV?f(l++<v,"traverseParentPath(%s, %s, ...): Detected an infinite loop while traversing the React DOM ID tree. This may be due to malformed IDs: %s",t,n):f(l++<v)}}var l=n(74),f=n(2),h=".",d=h.length,v=100,m={createReactRootID:function(){return r(l.createReactRootIndex())},createReactID:function(t,e){return t+e},getReactRootIDFromNodeID:function(t){if(t&&t.charAt(0)===h&&t.length>1){var e=t.indexOf(h,1);return e>-1?t.substr(0,e):t}return null},traverseEnterLeave:function(t,e,n,r,o){var i=c(t,e);i!==t&&p(t,i,n,r,!1,!0),i!==e&&p(i,e,n,o,!0,!1)},traverseTwoPhase:function(t,e,n){t&&(p("",t,e,n,!0,!1),p(t,"",e,n,!1,!0))},traverseAncestors:function(t,e,n){p("",t,e,n,!0,!1)},_getFirstCommonAncestorID:c,_getNextDescendantID:u,isAncestorIDOf:a,SEPARATOR:h};t.exports=m}).call(e,n(1))},function(t,e,n){(function(e){"use strict";var r=n(2),o=function(t){var n,o={};"production"!==e.env.NODE_ENV?r(t instanceof Object&&!Array.isArray(t),"keyMirror(...): Argument must be an object."):r(t instanceof Object&&!Array.isArray(t));for(n in t)t.hasOwnProperty(n)&&(o[n]=n);return o};t.exports=o}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(){var t=!f||!f.traverseTwoPhase||!f.traverseEnterLeave;if(t)throw new Error("InstanceHandle not injected before use!")}var o=n(62),i=n(43),a=n(48),s=n(51),u=n(2),c={},p=null,l=function(t){if(t){var e=i.executeDispatch,n=o.getPluginModuleForEvent(t);n&&n.executeDispatch&&(e=n.executeDispatch),i.executeDispatchesInOrder(t,e),t.isPersistent()||t.constructor.release(t)}},f=null,h={injection:{injectMount:i.injection.injectMount,injectInstanceHandle:function(t){f=t,"production"!==e.env.NODE_ENV&&r()},getInstanceHandle:function(){return"production"!==e.env.NODE_ENV&&r(),f},injectEventPluginOrder:o.injectEventPluginOrder,injectEventPluginsByName:o.injectEventPluginsByName},eventNameDispatchConfigs:o.eventNameDispatchConfigs,registrationNameModules:o.registrationNameModules,putListener:function(t,n,r){"production"!==e.env.NODE_ENV?u(!r||"function"==typeof r,"Expected %s listener to be a function, instead got type %s",n,typeof r):u(!r||"function"==typeof r);var o=c[n]||(c[n]={});o[t]=r},getListener:function(t,e){var n=c[e];return n&&n[t]},deleteListener:function(t,e){var n=c[e];n&&delete n[t]},deleteAllListeners:function(t){for(var e in c)delete c[e][t]},extractEvents:function(t,e,n,r){for(var i,s=o.plugins,u=0,c=s.length;c>u;u++){var p=s[u];if(p){var l=p.extractEvents(t,e,n,r);l&&(i=a(i,l))}}return i},enqueueEvents:function(t){t&&(p=a(p,t))},processEventQueue:function(){var t=p;p=null,s(t,l),"production"!==e.env.NODE_ENV?u(!p,"processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."):u(!p)},__purge:function(){c={}},__getListenerBank:function(){return c}};t.exports=h}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(){if(d._isLegacyCallWarningEnabled){var t=s.current,n=t&&t.constructor?t.constructor.displayName:"";n||(n="Something"),l.hasOwnProperty(n)||(l[n]=!0,"production"!==e.env.NODE_ENV?p(!1,n+" is calling a React component directly. Use a factory or JSX instead. See: http://fb.me/react-legacyfactory"):null,c("react_legacy_factory_call",{version:3,name:n}))}}function o(t){var n=t.prototype&&"function"==typeof t.prototype.mountComponent&&"function"==typeof t.prototype.receiveComponent;if(n)"production"!==e.env.NODE_ENV?p(!1,"Did not expect to get a React class here. Use `Component` instead of `Component.type` or `this.constructor`."):null;else{if(!t._reactWarnedForThisType){try{t._reactWarnedForThisType=!0}catch(r){}c("react_non_component_in_jsx",{version:3,name:t.name})}"production"!==e.env.NODE_ENV?p(!1,"This JSX uses a plain function. Only React components are valid in React's JSX transform."):null}}function i(t){"production"!==e.env.NODE_ENV?p(!1,"Do not pass React.DOM."+t.type+' to JSX or createFactory. Use the string "'+t.type+'" instead.'):null}function a(t,e){if("function"==typeof e)for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];if("function"==typeof r){var o=r.bind(e);for(var i in r)r.hasOwnProperty(i)&&(o[i]=r[i]);t[n]=o}else t[n]=r}}var s=n(18),u=n(2),c=n(38),p=n(6),l={},f={},h={},d={};d.wrapCreateFactory=function(t){var n=function(n){return"function"!=typeof n?t(n):n.isReactNonLegacyFactory?("production"!==e.env.NODE_ENV&&i(n),t(n.type)):n.isReactLegacyFactory?t(n.type):("production"!==e.env.NODE_ENV&&o(n),n)};return n},d.wrapCreateElement=function(t){var n=function(n){if("function"!=typeof n)return t.apply(this,arguments);var r;return n.isReactNonLegacyFactory?("production"!==e.env.NODE_ENV&&i(n),r=Array.prototype.slice.call(arguments,0),r[0]=n.type,t.apply(this,r)):n.isReactLegacyFactory?(n._isMockFunction&&(n.type._mockedReactClassConstructor=n),r=Array.prototype.slice.call(arguments,0),r[0]=n.type,t.apply(this,r)):("production"!==e.env.NODE_ENV&&o(n),n.apply(null,Array.prototype.slice.call(arguments,1)))};return n},d.wrapFactory=function(t){"production"!==e.env.NODE_ENV?u("function"==typeof t,"This is suppose to accept a element factory"):u("function"==typeof t);var n=function(){return"production"!==e.env.NODE_ENV&&r(),t.apply(this,arguments)};return a(n,t.type),n.isReactLegacyFactory=f,n.type=t.type,n},d.markNonLegacyFactory=function(t){return t.isReactNonLegacyFactory=h,t},d.isValidFactory=function(t){return"function"==typeof t&&t.isReactLegacyFactory===f},d.isValidClass=function(t){return"production"!==e.env.NODE_ENV&&("production"!==e.env.NODE_ENV?p(!1,"isValidClass is deprecated and will be removed in a future release. Use a more specific validator instead."):null),d.isValidFactory(t)},d._isLegacyCallWarningEnabled=!0,t.exports=d}).call(e,n(1))},function(t,e,n){"use strict";function r(t,e,n){o.call(this,t,e,n)}var o=n(19),i=n(54),a={view:function(t){if(t.view)return t.view;var e=i(t);if(null!=e&&e.window===e)return e;var n=e.ownerDocument;return n?n.defaultView||n.parentWindow:window},detail:function(t){return t.detail||0}};o.augmentClass(r,a),t.exports=r},function(t){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e,n){"use strict";function r(){a||console.warn("It appears that React Hot Loader isn't configured correctly. If you're using NPM, make sure your dependencies don't drag duplicate React distributions into their node_modules and that require(\"react\") corresponds to the React instance you render your app with.","If you're using a precompiled version of React, see https://github.com/gaearon/react-hot-loader/tree/master/docs#usage-with-external-react for integration instructions."),a=!0}var o=n(103),i=null,a=!1,s={injection:{injectProvider:function(t){i=t}},getRootInstances:function(t){if(i)return i.getRootInstances();var e=t&&o(t)||[];return Object.keys(e).length||r(),e}};t.exports=s},function(t,e,n){"use strict";function r(t){if(i(t.exports))return!1;var e=t.exports,n=!1;o(t.exports)&&(t.exports=t.makeHot(t.exports,"__MODULE_EXPORTS"),n=!0);for(var r in t.exports)e.hasOwnProperty(r)&&o(e[r])&&(Object.getOwnPropertyDescriptor(t.exports,r).writable?(t.exports[r]=t.makeHot(e[r],"__MODULE_EXPORTS_"+r),n=!0):console.warn("Can't make class "+r+" hot reloadable due to being read-only. You can exclude files or directories (for example, /node_modules/) using 'exclude' option in loader configuration."));return n}var o=n(59),i=n(108);t.exports=r},function(t,e,n){"use strict";t.exports=n(112)},function(t,e,n){"use strict";var r=n(78),o={componentDidMount:function(){this.props.autoFocus&&r(this.getDOMNode())}};t.exports=o},function(t,e,n){(function(e){"use strict";function r(){return"production"!==e.env.NODE_ENV?c(s,"Trying to return null from a render, but no null placeholder component was injected."):c(s),s()}function o(t){p[t]=!0}function i(t){delete p[t]}function a(t){return p[t]}var s,u=n(4),c=n(2),p={},l={injectEmptyComponent:function(t){s=u.createFactory(t)}},f={deregisterNullComponentID:i,getEmptyComponent:r,injection:l,isNullComponentID:a,registerNullComponentID:o};t.exports=f}).call(e,n(1))},function(t,e,n){"use strict";function r(t,e,n){o.call(this,t,e,n)}var o=n(28),i=n(76),a=n(53),s={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:a,button:function(t){var e=t.button;return"which"in t?e:2===e?2:4===e?1:0},buttons:null,relatedTarget:function(t){return t.relatedTarget||(t.fromElement===t.srcElement?t.toElement:t.fromElement)},pageX:function(t){return"pageX"in t?t.pageX:t.clientX+i.currentScrollLeft},pageY:function(t){return"pageY"in t?t.pageY:t.clientY+i.currentScrollTop}};o.augmentClass(r,s),t.exports=r},function(t,e,n){(function(e){"use strict";var r=n(2),o={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(t,n,o,i,a,s,u,c){"production"!==e.env.NODE_ENV?r(!this.isInTransaction(),"Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction."):r(!this.isInTransaction());var p,l;try{this._isInTransaction=!0,p=!0,this.initializeAll(0),l=t.call(n,o,i,a,s,u,c),p=!1}finally{try{if(p)try{this.closeAll(0)}catch(f){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return l},initializeAll:function(t){for(var e=this.transactionWrappers,n=t;n<e.length;n++){var r=e[n];try{this.wrapperInitData[n]=i.OBSERVED_ERROR,this.wrapperInitData[n]=r.initialize?r.initialize.call(this):null}finally{if(this.wrapperInitData[n]===i.OBSERVED_ERROR)try{this.initializeAll(n+1)}catch(o){}}}},closeAll:function(t){"production"!==e.env.NODE_ENV?r(this.isInTransaction(),"Transaction.closeAll(): Cannot close transaction when none are open."):r(this.isInTransaction());
for(var n=this.transactionWrappers,o=t;o<n.length;o++){var a,s=n[o],u=this.wrapperInitData[o];try{a=!0,u!==i.OBSERVED_ERROR&&s.close&&s.close.call(this,u),a=!1}finally{if(a)try{this.closeAll(o+1)}catch(c){}}}this.wrapperInitData.length=0}},i={Mixin:o,OBSERVED_ERROR:{}};t.exports=i}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(t,n){var r;if("production"!==e.env.NODE_ENV&&("production"!==e.env.NODE_ENV?o(t&&("function"==typeof t.type||"string"==typeof t.type),"Only functions or strings can be mounted as React components."):null,t.type._mockedReactClassConstructor)){a._isLegacyCallWarningEnabled=!1;try{r=new t.type._mockedReactClassConstructor(t.props)}finally{a._isLegacyCallWarningEnabled=!0}i.isValidElement(r)&&(r=new r.type(r.props));var c=r.render;if(c)return c._isMockFunction&&!c._getMockImplementation()&&c.mockImplementation(u.getEmptyComponent),r.construct(t),r;t=u.getEmptyComponent()}return r="string"==typeof t.type?s.createInstanceForTag(t.type,t.props,n):new t.type(t.props),"production"!==e.env.NODE_ENV&&("production"!==e.env.NODE_ENV?o("function"==typeof r.construct&&"function"==typeof r.mountComponent&&"function"==typeof r.receiveComponent,"Only React Components can be mounted."):null),r.construct(t),r}var o=n(6),i=n(4),a=n(27),s=n(68),u=n(34);t.exports=r}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(t){"production"!==e.env.NODE_ENV?o(t&&!/[^a-z0-9_]/.test(t),"You must provide an eventName using only the characters [a-z0-9_]"):o(t&&!/[^a-z0-9_]/.test(t))}var o=n(2);t.exports=r}).call(e,n(1))},function(t,e,n){t.exports=n(126)},function(t,e,n){e=t.exports=n(88)(),e.push([t.id,"body{background-color:#fefefe;color:#333}",""])},function(t,e,n){function r(t,e,n){var r=c(t,e,n),o=p(r.mixins),i={displayName:r.displayName,mixins:r.mixins,render:function(){return D&&D.call(this,"render"),r.render.call(this,this.props,this.props.statics)}};o&&(i.statics=o,l(r.mixins));var a=w.createClass(i),s=function(t,e){var n=b(arguments).filter(w.isValidElement);return"object"==typeof t&&(e=t,t=void 0),e||(e={}),d(e)&&(e={cursor:e}),t&&(e.key=t),n.length&&(e.children=n),w.createElement(a,e)};return s.jsx=a,o&&(s=f(s,o)),s}function o(e,n){var r=t.exports.isEqualState,o=y(E(_,g)),c=m(i(e),o),p=m(i(this.props),o),l=Object.keys(c),f=Object.keys(p);return f.length!==l.length?(D&&D.call(this,"shouldComponentUpdate => true (number of cursors differ)"),!0):a(f,p,c)?(D&&D.call(this,"shouldComponentUpdate => true (cursors have different keys)"),!0):s(p,c)?(D&&D.call(this,"shouldComponentUpdate => true (cursors have changed)"),!0):r(this.state,n)?u(p,c)?(D&&D.call(this,"shouldComponentUpdate => true (properties have changed)"),!0):(D&&D.call(this,"shouldComponentUpdate => false"),!1):(D&&D.call(this,"shouldComponentUpdate => true (state has changed)"),!0)}function i(t){return t?d(t)?{_dummy_key:t}:"object"!=typeof t?{_dummy_key:t}:t:{}}function a(t,e,n){return!t.every(function(t){return"undefined"!=typeof e[t]&&"undefined"!=typeof n[t]})}function s(e,n){e=m(e,d),n=m(n,d);var r=t.exports.isEqualCursor;for(var o in e)if(!r(e[o],n[o]))return!0;return!1}function u(t,e){t=m(t,y(d)),e=m(e,y(d));for(var n in t)if(!N(t[n],e[n]))return!0;return!1}function c(e,n,r){if("function"==typeof e&&(r=e,n=[],e=void 0),"object"==typeof e&&"function"==typeof n&&(r=n,n=e,e=void 0),"string"==typeof e&&"function"==typeof n&&(r=n,n=[]),Array.isArray(n)||(n=[n]),!h(n)){var o={shouldComponentUpdate:t.exports.shouldComponentUpdate};n=[o].concat(n)}return{displayName:e,mixins:n,render:r}}function p(t){var e=t.filter(function(t){return!!t.statics});if(!e.length)return void 0;var n={};return e.forEach(function(t){n=f(n,t.statics)}),n}function l(t){t.filter(function(t){return!!t.statics}).forEach(function(t){delete t.statics})}function f(t,e){for(key in e)e.hasOwnProperty(key)&&!t[key]&&(t[key]=e[key]);return t}function h(t){return!!t.filter(function(t){return!!t.shouldComponentUpdate}).length}function d(t){return t&&("function"==typeof t.deref||"function"==typeof t.__deref)}function v(t){return d(t)?"function"==typeof t.deref?t.deref():t.__deref():t}function m(t,e){var n,r={};for(n in t)e(t[n],n)&&(r[n]=t[n]);return r}function y(t){return function(){return!t.apply(t,arguments)}}function _(t,e){return"statics"===e}function g(t,e){return"children"===e}function E(t,e){return function(){return t.apply(null,arguments)||e.apply(null,arguments)}}function b(t){return Array.prototype.slice.call(t)}var w=n(39),N=n(100);t.exports=r,t.exports.shouldComponentUpdate=o,t.exports.isEqualState=function(){return N.apply(this,arguments)},t.exports.isEqualCursor=function(t,e){return v(t)===v(e)},t.exports.isCursor=d;var D;t.exports.debug=function(t){var e=new RegExp(t||".*");D=function(t){var n=this._currentElement&&this._currentElement.key?" key="+this._currentElement.key:"",r=this.constructor.displayName,o=r+n;(n||r)&&e.test(o)&&console.debug("<"+o+">: "+t)}}},function(t,e,n){(function(e){"use strict";function r(){this._callbacks=null,this._contexts=null}var o=n(15),i=n(3),a=n(2);i(r.prototype,{enqueue:function(t,e){this._callbacks=this._callbacks||[],this._contexts=this._contexts||[],this._callbacks.push(t),this._contexts.push(e)},notifyAll:function(){var t=this._callbacks,n=this._contexts;if(t){"production"!==e.env.NODE_ENV?a(t.length===n.length,"Mismatched list of contexts in callback queue"):a(t.length===n.length),this._callbacks=null,this._contexts=null;for(var r=0,o=t.length;o>r;r++)t[r].call(n[r]);t.length=0,n.length=0}},reset:function(){this._callbacks=null,this._contexts=null},destructor:function(){this.reset()}}),o.addPoolingTo(r),t.exports=r}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(t){return t===y.topMouseUp||t===y.topTouchEnd||t===y.topTouchCancel}function o(t){return t===y.topMouseMove||t===y.topTouchMove}function i(t){return t===y.topMouseDown||t===y.topTouchStart}function a(t,n){var r=t._dispatchListeners,o=t._dispatchIDs;if("production"!==e.env.NODE_ENV&&h(t),Array.isArray(r))for(var i=0;i<r.length&&!t.isPropagationStopped();i++)n(t,r[i],o[i]);else r&&n(t,r,o)}function s(t,e,n){t.currentTarget=m.Mount.getNode(n);var r=e(t,n);return t.currentTarget=null,r}function u(t,e){a(t,e),t._dispatchListeners=null,t._dispatchIDs=null}function c(t){var n=t._dispatchListeners,r=t._dispatchIDs;if("production"!==e.env.NODE_ENV&&h(t),Array.isArray(n)){for(var o=0;o<n.length&&!t.isPropagationStopped();o++)if(n[o](t,r[o]))return r[o]}else if(n&&n(t,r))return r;return null}function p(t){var e=c(t);return t._dispatchIDs=null,t._dispatchListeners=null,e}function l(t){"production"!==e.env.NODE_ENV&&h(t);var n=t._dispatchListeners,r=t._dispatchIDs;"production"!==e.env.NODE_ENV?v(!Array.isArray(n),"executeDirectDispatch(...): Invalid `event`."):v(!Array.isArray(n));var o=n?n(t,r):null;return t._dispatchListeners=null,t._dispatchIDs=null,o}function f(t){return!!t._dispatchListeners}var h,d=n(8),v=n(2),m={Mount:null,injectMount:function(t){m.Mount=t,"production"!==e.env.NODE_ENV&&("production"!==e.env.NODE_ENV?v(t&&t.getNode,"EventPluginUtils.injection.injectMount(...): Injected Mount module is missing getNode."):v(t&&t.getNode))}},y=d.topLevelTypes;"production"!==e.env.NODE_ENV&&(h=function(t){var n=t._dispatchListeners,r=t._dispatchIDs,o=Array.isArray(n),i=Array.isArray(r),a=i?r.length:r?1:0,s=o?n.length:n?1:0;"production"!==e.env.NODE_ENV?v(i===o&&a===s,"EventPluginUtils: Invalid `event`."):v(i===o&&a===s)});var _={isEndish:r,isMoveish:o,isStartish:i,executeDirectDispatch:l,executeDispatch:s,executeDispatchesInOrder:u,executeDispatchesInOrderStopAtTrue:p,hasDispatches:f,injection:m,useTouchEvents:!1};t.exports=_}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(t){"production"!==e.env.NODE_ENV?c(null==t.props.checkedLink||null==t.props.valueLink,"Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don't want to use valueLink and vice versa."):c(null==t.props.checkedLink||null==t.props.valueLink)}function o(t){r(t),"production"!==e.env.NODE_ENV?c(null==t.props.value&&null==t.props.onChange,"Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink."):c(null==t.props.value&&null==t.props.onChange)}function i(t){r(t),"production"!==e.env.NODE_ENV?c(null==t.props.checked&&null==t.props.onChange,"Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don't want to use checkedLink"):c(null==t.props.checked&&null==t.props.onChange)}function a(t){this.props.valueLink.requestChange(t.target.value)}function s(t){this.props.checkedLink.requestChange(t.target.checked)}var u=n(72),c=n(2),p={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},l={Mixin:{propTypes:{value:function(t,e){return!t[e]||p[t.type]||t.onChange||t.readOnly||t.disabled?void 0:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(t,e){return!t[e]||t.onChange||t.readOnly||t.disabled?void 0:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:u.func}},getValue:function(t){return t.props.valueLink?(o(t),t.props.valueLink.value):t.props.value},getChecked:function(t){return t.props.checkedLink?(i(t),t.props.checkedLink.value):t.props.checked},getOnChange:function(t){return t.props.valueLink?(o(t),a):t.props.checkedLink?(i(t),s):t.props.onChange}};t.exports=l}).call(e,n(1))},function(t,e,n){"use strict";var r=n(3),o={current:{},withContext:function(t,e){var n,i=o.current;o.current=r({},i,t);try{n=e()}finally{o.current=i}return n}};t.exports=o},function(t,e,n){(function(e){"use strict";function r(){var t=f.current;return t&&t.constructor.displayName||void 0}function o(t,e){t._store.validated||null!=t.key||(t._store.validated=!0,a("react_key_warning",'Each child in an array should have a unique "key" prop.',t,e))}function i(t,e,n){_.test(t)&&a("react_numeric_key_warning","Child objects should have non-numeric keys so ordering is preserved.",e,n)}function a(t,e,n,o){var i=r(),a=o.displayName,s=i||a,u=v[t];if(!u.hasOwnProperty(s)){u[s]=!0,e+=i?" Check the render method of "+i+".":" Check the renderComponent call using <"+a+">.";var c=null;n._owner&&n._owner!==f.current&&(c=n._owner.constructor.displayName,e+=" It was passed a child from "+c+"."),e+=" See http://fb.me/react-warning-keys for more information.",h(t,{component:s,componentOwner:c}),console.warn(e)}}function s(){var t=r()||"";m.hasOwnProperty(t)||(m[t]=!0,h("react_object_map_children"))}function u(t,e){if(Array.isArray(t))for(var n=0;n<t.length;n++){var r=t[n];p.isValidElement(r)&&o(r,e)}else if(p.isValidElement(t))t._store.validated=!0;else if(t&&"object"==typeof t){s();for(var a in t)i(a,t[a],e)}}function c(t,e,n,r){for(var o in e)if(e.hasOwnProperty(o)){var i;try{i=e[o](n,o,t,r)}catch(a){i=a}i instanceof Error&&!(i.message in y)&&(y[i.message]=!0,h("react_failed_descriptor_type_check",{message:i.message}))}}var p=n(4),l=n(71),f=n(18),h=n(38),d=n(6),v={react_key_warning:{},react_numeric_key_warning:{}},m={},y={},_=/^\d+$/,g={createElement:function(t){"production"!==e.env.NODE_ENV?d(null!=t,"React.createElement: type should not be null or undefined. It should be a string (for DOM elements) or a ReactClass (for composite components)."):null;var n=p.createElement.apply(this,arguments);if(null==n)return n;for(var r=2;r<arguments.length;r++)u(arguments[r],t);if(t){var o=t.displayName;t.propTypes&&c(o,t.propTypes,n.props,l.prop),t.contextTypes&&c(o,t.contextTypes,n._context,l.context)}return n},createFactory:function(t){var e=g.createElement.bind(null,t);return e.type=t,e}};t.exports=g}).call(e,n(1))},function(t,e,n){"use strict";function r(t){return i(document.documentElement,t)}var o=n(136),i=n(77),a=n(78),s=n(79),u={hasSelectionCapabilities:function(t){return t&&("INPUT"===t.nodeName&&"text"===t.type||"TEXTAREA"===t.nodeName||"true"===t.contentEditable)},getSelectionInformation:function(){var t=s();return{focusedElem:t,selectionRange:u.hasSelectionCapabilities(t)?u.getSelection(t):null}},restoreSelection:function(t){var e=s(),n=t.focusedElem,o=t.selectionRange;e!==n&&r(n)&&(u.hasSelectionCapabilities(n)&&u.setSelection(n,o),a(n))},getSelection:function(t){var e;if("selectionStart"in t)e={start:t.selectionStart,end:t.selectionEnd};else if(document.selection&&"INPUT"===t.nodeName){var n=document.selection.createRange();n.parentElement()===t&&(e={start:-n.moveStart("character",-t.value.length),end:-n.moveEnd("character",-t.value.length)})}else e=o.getOffsets(t);return e||{start:0,end:0}},setSelection:function(t,e){var n=e.start,r=e.end;if("undefined"==typeof r&&(r=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(r,t.value.length);else if(document.selection&&"INPUT"===t.nodeName){var i=t.createTextRange();i.collapse(!0),i.moveStart("character",n),i.moveEnd("character",r-n),i.select()}else o.setOffsets(t,e)}};t.exports=u},function(t,e,n){(function(e){"use strict";function r(t,n){if("production"!==e.env.NODE_ENV?o(null!=n,"accumulateInto(...): Accumulated items must not be null or undefined."):o(null!=n),null==t)return n;var r=Array.isArray(t),i=Array.isArray(n);return r&&i?(t.push.apply(t,n),t):r?(t.push(n),t):i?[t].concat(n):[t,n]}var o=n(2);t.exports=r}).call(e,n(1))},function(t,e,n){(function(e){function r(t,n,r,a,s){var u=!1;if("production"!==e.env.NODE_ENV){var c=function(){return"production"!==e.env.NODE_ENV?i(u,t+"."+n+" will be deprecated in a future version. "+("Use "+t+"."+r+" instead.")):null,u=!0,s.apply(a,arguments)};return c.displayName=t+"_"+n,o(c,s)}return s}var o=n(3),i=n(6);t.exports=r}).call(e,n(1))},function(t){"use strict";function e(t){return r[t]}function n(t){return(""+t).replace(o,e)}var r={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"},o=/[&><"']/g;t.exports=n},function(t){"use strict";var e=function(t,e,n){Array.isArray(t)?t.forEach(e,n):t&&e.call(n,t)};t.exports=e},function(t){"use strict";function e(t){var e,n=t.keyCode;return"charCode"in t?(e=t.charCode,0===e&&13===n&&(e=13)):e=n,e>=32||13===e?e:0}t.exports=e},function(t){"use strict";function e(t){var e=this,n=e.nativeEvent;if(n.getModifierState)return n.getModifierState(t);var o=r[t];return o?!!n[o]:!1}function n(){return e}var r={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};t.exports=n},function(t){"use strict";function e(t){var e=t.target||t.srcElement||window;return 3===e.nodeType?e.parentNode:e}t.exports=e},function(t,e,n){"use strict";function r(){return!i&&o.canUseDOM&&(i="textContent"in document.documentElement?"textContent":"innerText"),i}var o=n(5),i=null;t.exports=r},function(t,e,n){"use strict";/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
function r(t,e){if(!i.canUseDOM||e&&!("addEventListener"in document))return!1;var n="on"+t,r=n in document;if(!r){var a=document.createElement("div");a.setAttribute(n,"return;"),r="function"==typeof a[n]}return!r&&o&&"wheel"===t&&(r=document.implementation.hasFeature("Events.wheel","3.0")),r}var o,i=n(5);i.canUseDOM&&(o=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0),t.exports=r},function(t){"use strict";function e(t,e){return t&&e&&t.type===e.type&&t.key===e.key&&t._owner===e._owner?!0:!1}t.exports=e},function(t){!function(e,n){t.exports=n()}(this,function(){"use strict";function t(t,e){e&&(t.prototype=Object.create(e.prototype)),t.prototype.constructor=t}function e(t){return t.value=!1,t}function n(t){t&&(t.value=!0)}function r(){}function o(t,e){e=e||0;for(var n=Math.max(0,t.length-e),r=new Array(n),o=0;n>o;o++)r[o]=t[o+e];return r}function i(t){return void 0===t.size&&(t.size=t.__iterate(s)),t.size}function a(t,e){return e>=0?+e:i(t)+ +e}function s(){return!0}function u(t,e,n){return(0===t||void 0!==n&&-n>=t)&&(void 0===e||void 0!==n&&e>=n)}function c(t,e){return l(t,e,0)}function p(t,e){return l(t,e,e)}function l(t,e,n){return void 0===t?n:0>t?Math.max(0,e+t):void 0===e?t:Math.min(e,t)}function f(t){return m(t)?t:I(t)}function h(t){return y(t)?t:k(t)}function d(t){return _(t)?t:M(t)}function v(t){return m(t)&&!g(t)?t:T(t)}function m(t){return!(!t||!t[hr])}function y(t){return!(!t||!t[dr])}function _(t){return!(!t||!t[vr])}function g(t){return y(t)||_(t)}function E(t){return!(!t||!t[mr])}function b(t){this.next=t}function w(t,e,n,r){var o=0===t?e:1===t?n:[e,n];return r?r.value=o:r={value:o,done:!1},r}function N(){return{value:void 0,done:!0}}function D(t){return!!S(t)}function O(t){return t&&"function"==typeof t.next}function C(t){var e=S(t);return e&&e.call(t)}function S(t){var e=t&&(Er&&t[Er]||t[br]);return"function"==typeof e?e:void 0}function x(t){return t&&"number"==typeof t.length}function I(t){return null===t||void 0===t?V():m(t)?t.toSeq():B(t)}function k(t){return null===t||void 0===t?V().toKeyedSeq():m(t)?y(t)?t.toSeq():t.fromEntrySeq():j(t)}function M(t){return null===t||void 0===t?V():m(t)?y(t)?t.entrySeq():t.toIndexedSeq():z(t)}function T(t){return(null===t||void 0===t?V():m(t)?y(t)?t.entrySeq():t:z(t)).toSetSeq()}function R(t){this._array=t,this.size=t.length}function A(t){var e=Object.keys(t);this._object=t,this._keys=e,this.size=e.length}function P(t){this._iterable=t,this.size=t.length||t.size}function L(t){this._iterator=t,this._iteratorCache=[]}function U(t){return!(!t||!t[Nr])}function V(){return Dr||(Dr=new R([]))}function j(t){var e=Array.isArray(t)?new R(t).fromEntrySeq():O(t)?new L(t).fromEntrySeq():D(t)?new P(t).fromEntrySeq():"object"==typeof t?new A(t):void 0;if(!e)throw new TypeError("Expected Array or iterable object of [k, v] entries, or keyed object: "+t);return e}function z(t){var e=q(t);if(!e)throw new TypeError("Expected Array or iterable object of values: "+t);return e}function B(t){var e=q(t)||"object"==typeof t&&new A(t);if(!e)throw new TypeError("Expected Array or iterable object of values, or keyed object: "+t);return e}function q(t){return x(t)?new R(t):O(t)?new L(t):D(t)?new P(t):void 0}function W(t,e,n,r){var o=t._cache;if(o){for(var i=o.length-1,a=0;i>=a;a++){var s=o[n?i-a:a];if(e(s[1],r?s[0]:a,t)===!1)return a+1}return a}return t.__iterateUncached(e,n)}function F(t,e,n,r){var o=t._cache;if(o){var i=o.length-1,a=0;return new b(function(){var t=o[n?i-a:a];return a++>i?N():w(e,r?t[0]:a-1,t[1])})}return t.__iteratorUncached(e,n)}function H(){throw TypeError("Abstract")}function K(){}function X(){}function Y(){}function $(t,e){return t===e||t!==t&&e!==e?!0:t&&e?("function"==typeof t.valueOf&&"function"==typeof e.valueOf&&(t=t.valueOf(),e=e.valueOf()),"function"==typeof t.equals&&"function"==typeof e.equals?t.equals(e):t===e||t!==t&&e!==e):!1}function G(t,e){return e?J(e,t,"",{"":t}):Q(t)}function J(t,e,n,r){return Array.isArray(e)?t.call(r,n,M(e).map(function(n,r){return J(t,n,r,e)})):Z(e)?t.call(r,n,k(e).map(function(n,r){return J(t,n,r,e)})):e}function Q(t){return Array.isArray(t)?M(t).map(Q).toList():Z(t)?k(t).map(Q).toMap():t}function Z(t){return t&&t.constructor===Object}function te(t){return t>>>1&1073741824|3221225471&t}function ee(t){if(t===!1||null===t||void 0===t)return 0;if("function"==typeof t.valueOf&&(t=t.valueOf(),t===!1||null===t||void 0===t))return 0;if(t===!0)return 1;var e=typeof t;if("number"===e){var n=0|t;for(n!==t&&(n^=4294967295*t);t>4294967295;)t/=4294967295,n^=t;return te(n)}return"string"===e?t.length>kr?ne(t):re(t):"function"==typeof t.hashCode?t.hashCode():oe(t)}function ne(t){var e=Rr[t];return void 0===e&&(e=re(t),Tr===Mr&&(Tr=0,Rr={}),Tr++,Rr[t]=e),e}function re(t){for(var e=0,n=0;n<t.length;n++)e=31*e+t.charCodeAt(n)|0;return te(e)}function oe(t){var e=Sr&&Sr.get(t);if(e)return e;if(e=t[Ir])return e;if(!Cr){if(e=t.propertyIsEnumerable&&t.propertyIsEnumerable[Ir])return e;if(e=ie(t))return e}if(Object.isExtensible&&!Object.isExtensible(t))throw new Error("Non-extensible objects are not allowed as keys.");if(e=++xr,1073741824&xr&&(xr=0),Sr)Sr.set(t,e);else if(Cr)Object.defineProperty(t,Ir,{enumerable:!1,configurable:!1,writable:!1,value:e});else if(t.propertyIsEnumerable&&t.propertyIsEnumerable===t.constructor.prototype.propertyIsEnumerable)t.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},t.propertyIsEnumerable[Ir]=e;else{if(!t.nodeType)throw new Error("Unable to set a non-enumerable property on object.");t[Ir]=e}return e}function ie(t){if(t&&t.nodeType>0)switch(t.nodeType){case 1:return t.uniqueID;case 9:return t.documentElement&&t.documentElement.uniqueID}}function ae(t,e){if(!t)throw new Error(e)}function se(t){ae(1/0!==t,"Cannot perform this action with an infinite size.")}function ue(t,e){this._iter=t,this._useKeys=e,this.size=t.size}function ce(t){this._iter=t,this.size=t.size}function pe(t){this._iter=t,this.size=t.size}function le(t){this._iter=t,this.size=t.size}function fe(t){var e=Re(t);return e._iter=t,e.size=t.size,e.flip=function(){return t},e.reverse=function(){var e=t.reverse.apply(this);return e.flip=function(){return t.reverse()},e},e.has=function(e){return t.contains(e)},e.contains=function(e){return t.has(e)},e.cacheResult=Ae,e.__iterateUncached=function(e,n){var r=this;return t.__iterate(function(t,n){return e(n,t,r)!==!1},n)},e.__iteratorUncached=function(e,n){if(e===gr){var r=t.__iterator(e,n);return new b(function(){var t=r.next();if(!t.done){var e=t.value[0];t.value[0]=t.value[1],t.value[1]=e}return t})}return t.__iterator(e===_r?yr:_r,n)},e}function he(t,e,n){var r=Re(t);return r.size=t.size,r.has=function(e){return t.has(e)},r.get=function(r,o){var i=t.get(r,pr);return i===pr?o:e.call(n,i,r,t)},r.__iterateUncached=function(r,o){var i=this;return t.__iterate(function(t,o,a){return r(e.call(n,t,o,a),o,i)!==!1},o)},r.__iteratorUncached=function(r,o){var i=t.__iterator(gr,o);return new b(function(){var o=i.next();if(o.done)return o;var a=o.value,s=a[0];return w(r,s,e.call(n,a[1],s,t),o)})},r}function de(t,e){var n=Re(t);return n._iter=t,n.size=t.size,n.reverse=function(){return t},t.flip&&(n.flip=function(){var e=fe(t);return e.reverse=function(){return t.flip()},e}),n.get=function(n,r){return t.get(e?n:-1-n,r)},n.has=function(n){return t.has(e?n:-1-n)},n.contains=function(e){return t.contains(e)},n.cacheResult=Ae,n.__iterate=function(e,n){var r=this;return t.__iterate(function(t,n){return e(t,n,r)},!n)},n.__iterator=function(e,n){return t.__iterator(e,!n)},n}function ve(t,e,n,r){var o=Re(t);return r&&(o.has=function(r){var o=t.get(r,pr);return o!==pr&&!!e.call(n,o,r,t)},o.get=function(r,o){var i=t.get(r,pr);return i!==pr&&e.call(n,i,r,t)?i:o}),o.__iterateUncached=function(o,i){var a=this,s=0;return t.__iterate(function(t,i,u){return e.call(n,t,i,u)?(s++,o(t,r?i:s-1,a)):void 0},i),s},o.__iteratorUncached=function(o,i){var a=t.__iterator(gr,i),s=0;return new b(function(){for(;;){var i=a.next();if(i.done)return i;var u=i.value,c=u[0],p=u[1];if(e.call(n,p,c,t))return w(o,r?c:s++,p,i)}})},o}function me(t,e,n){var r=Ue().asMutable();return t.__iterate(function(o,i){r.update(e.call(n,o,i,t),0,function(t){return t+1})}),r.asImmutable()}function ye(t,e,n){var r=y(t),o=(E(t)?Dn():Ue()).asMutable();t.__iterate(function(i,a){o.update(e.call(n,i,a,t),function(t){return t=t||[],t.push(r?[a,i]:i),t})});var i=Te(t);return o.map(function(e){return Ie(t,i(e))})}function _e(t,e,n,r){var o=t.size;if(u(e,n,o))return t;var i=c(e,o),s=p(n,o);if(i!==i||s!==s)return _e(t.toSeq().cacheResult(),e,n,r);var l=s-i;0>l&&(l=0);var f=Re(t);return f.size=0===l?l:t.size&&l||void 0,!r&&U(t)&&l>=0&&(f.get=function(e,n){return e=a(this,e),e>=0&&l>e?t.get(e+i,n):n}),f.__iterateUncached=function(e,n){var o=this;if(0===l)return 0;if(n)return this.cacheResult().__iterate(e,n);var a=0,s=!0,u=0;return t.__iterate(function(t,n){return s&&(s=a++<i)?void 0:(u++,e(t,r?n:u-1,o)!==!1&&u!==l)}),u},f.__iteratorUncached=function(e,n){if(l&&n)return this.cacheResult().__iterator(e,n);var o=l&&t.__iterator(e,n),a=0,s=0;return new b(function(){for(;a++!==i;)o.next();if(++s>l)return N();var t=o.next();return r||e===_r?t:e===yr?w(e,s-1,void 0,t):w(e,s-1,t.value[1],t)})},f}function ge(t,e,n){var r=Re(t);return r.__iterateUncached=function(r,o){var i=this;if(o)return this.cacheResult().__iterate(r,o);var a=0;return t.__iterate(function(t,o,s){return e.call(n,t,o,s)&&++a&&r(t,o,i)}),a},r.__iteratorUncached=function(r,o){var i=this;if(o)return this.cacheResult().__iterator(r,o);var a=t.__iterator(gr,o),s=!0;return new b(function(){if(!s)return N();var t=a.next();if(t.done)return t;var o=t.value,u=o[0],c=o[1];return e.call(n,c,u,i)?r===gr?t:w(r,u,c,t):(s=!1,N())})},r}function Ee(t,e,n,r){var o=Re(t);return o.__iterateUncached=function(o,i){var a=this;if(i)return this.cacheResult().__iterate(o,i);var s=!0,u=0;return t.__iterate(function(t,i,c){return s&&(s=e.call(n,t,i,c))?void 0:(u++,o(t,r?i:u-1,a))}),u},o.__iteratorUncached=function(o,i){var a=this;if(i)return this.cacheResult().__iterator(o,i);var s=t.__iterator(gr,i),u=!0,c=0;return new b(function(){var t,i,p;do{if(t=s.next(),t.done)return r||o===_r?t:o===yr?w(o,c++,void 0,t):w(o,c++,t.value[1],t);var l=t.value;i=l[0],p=l[1],u&&(u=e.call(n,p,i,a))}while(u);return o===gr?t:w(o,i,p,t)})},o}function be(t,e){var n=y(t),r=[t].concat(e).map(function(t){return m(t)?n&&(t=h(t)):t=n?j(t):z(Array.isArray(t)?t:[t]),t}).filter(function(t){return 0!==t.size});if(0===r.length)return t;if(1===r.length){var o=r[0];if(o===t||n&&y(o)||_(t)&&_(o))return o}var i=new R(r);return n?i=i.toKeyedSeq():_(t)||(i=i.toSetSeq()),i=i.flatten(!0),i.size=r.reduce(function(t,e){if(void 0!==t){var n=e.size;if(void 0!==n)return t+n}},0),i}function we(t,e,n){var r=Re(t);return r.__iterateUncached=function(r,o){function i(t,u){var c=this;t.__iterate(function(t,o){return(!e||e>u)&&m(t)?i(t,u+1):r(t,n?o:a++,c)===!1&&(s=!0),!s},o)}var a=0,s=!1;return i(t,0),a},r.__iteratorUncached=function(r,o){var i=t.__iterator(r,o),a=[],s=0;return new b(function(){for(;i;){var t=i.next();if(t.done===!1){var u=t.value;if(r===gr&&(u=u[1]),e&&!(a.length<e)||!m(u))return n?t:w(r,s++,u,t);a.push(i),i=u.__iterator(r,o)}else i=a.pop()}return N()})},r}function Ne(t,e,n){var r=Te(t);return t.toSeq().map(function(o,i){return r(e.call(n,o,i,t))}).flatten(!0)}function De(t,e){var n=Re(t);return n.size=t.size&&2*t.size-1,n.__iterateUncached=function(n,r){var o=this,i=0;return t.__iterate(function(t){return(!i||n(e,i++,o)!==!1)&&n(t,i++,o)!==!1},r),i},n.__iteratorUncached=function(n,r){var o,i=t.__iterator(_r,r),a=0;return new b(function(){return(!o||a%2)&&(o=i.next(),o.done)?o:a%2?w(n,a++,e):w(n,a++,o.value,o)})},n}function Oe(t,e,n){e||(e=Pe);var r=y(t),o=0,i=t.toSeq().map(function(e,r){return[r,e,o++,n?n(e,r,t):e]}).toArray();return i.sort(function(t,n){return e(t[3],n[3])||t[2]-n[2]}).forEach(r?function(t,e){i[e].length=2}:function(t,e){i[e]=t[1]}),r?k(i):_(t)?M(i):T(i)}function Ce(t,e,n){if(e||(e=Pe),n){var r=t.toSeq().map(function(e,r){return[e,n(e,r,t)]}).reduce(function(t,n){return Se(e,t[1],n[1])?n:t});return r&&r[0]}return t.reduce(function(t,n){return Se(e,t,n)?n:t})}function Se(t,e,n){var r=t(n,e);return 0===r&&n!==e&&(void 0===n||null===n||n!==n)||r>0}function xe(t,e,n){var r=Re(t);return r.size=new R(n).map(function(t){return t.size}).min(),r.__iterate=function(t,e){for(var n,r=this.__iterator(_r,e),o=0;!(n=r.next()).done&&t(n.value,o++,this)!==!1;);return o},r.__iteratorUncached=function(t,r){var o=n.map(function(t){return t=f(t),C(r?t.reverse():t)}),i=0,a=!1;return new b(function(){var n;return a||(n=o.map(function(t){return t.next()}),a=n.some(function(t){return t.done})),a?N():w(t,i++,e.apply(null,n.map(function(t){return t.value})))})},r}function Ie(t,e){return U(t)?e:t.constructor(e)}function ke(t){if(t!==Object(t))throw new TypeError("Expected [K, V] tuple: "+t)}function Me(t){return se(t.size),i(t)}function Te(t){return y(t)?h:_(t)?d:v}function Re(t){return Object.create((y(t)?k:_(t)?M:T).prototype)}function Ae(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):I.prototype.cacheResult.call(this)}function Pe(t,e){return t>e?1:e>t?-1:0}function Le(t){var e=C(t);if(!e){if(!x(t))throw new TypeError("Expected iterable or array-like: "+t);e=C(f(t))}return e}function Ue(t){return null===t||void 0===t?Ye():Ve(t)?t:Ye().withMutations(function(e){var n=h(t);se(n.size),n.forEach(function(t,n){return e.set(n,t)})})}function Ve(t){return!(!t||!t[Ar])}function je(t,e){this.ownerID=t,this.entries=e}function ze(t,e,n){this.ownerID=t,this.bitmap=e,this.nodes=n}function Be(t,e,n){this.ownerID=t,this.count=e,this.nodes=n}function qe(t,e,n){this.ownerID=t,this.keyHash=e,this.entries=n}function We(t,e,n){this.ownerID=t,this.keyHash=e,this.entry=n}function Fe(t,e,n){this._type=e,this._reverse=n,this._stack=t._root&&Ke(t._root)}function He(t,e){return w(t,e[0],e[1])}function Ke(t,e){return{node:t,index:0,__prev:e}}function Xe(t,e,n,r){var o=Object.create(Pr);return o.size=t,o._root=e,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function Ye(){return Lr||(Lr=Xe(0))}function $e(t,n,r){var o,i;if(t._root){var a=e(lr),s=e(fr);if(o=Ge(t._root,t.__ownerID,0,void 0,n,r,a,s),!s.value)return t;i=t.size+(a.value?r===pr?-1:1:0)}else{if(r===pr)return t;i=1,o=new je(t.__ownerID,[[n,r]])}return t.__ownerID?(t.size=i,t._root=o,t.__hash=void 0,t.__altered=!0,t):o?Xe(i,o):Ye()}function Ge(t,e,r,o,i,a,s,u){return t?t.update(e,r,o,i,a,s,u):a===pr?t:(n(u),n(s),new We(e,o,[i,a]))}function Je(t){return t.constructor===We||t.constructor===qe}function Qe(t,e,n,r,o){if(t.keyHash===r)return new qe(e,r,[t.entry,o]);var i,a=(0===n?t.keyHash:t.keyHash>>>n)&cr,s=(0===n?r:r>>>n)&cr,u=a===s?[Qe(t,e,n+sr,r,o)]:(i=new We(e,r,o),s>a?[t,i]:[i,t]);return new ze(e,1<<a|1<<s,u)}function Ze(t,e,n,o){t||(t=new r);for(var i=new We(t,ee(n),[n,o]),a=0;a<e.length;a++){var s=e[a];i=i.update(t,0,void 0,s[0],s[1])}return i}function tn(t,e,n,r){for(var o=0,i=0,a=new Array(n),s=0,u=1,c=e.length;c>s;s++,u<<=1){var p=e[s];void 0!==p&&s!==r&&(o|=u,a[i++]=p)}return new ze(t,o,a)}function en(t,e,n,r,o){for(var i=0,a=new Array(ur),s=0;0!==n;s++,n>>>=1)a[s]=1&n?e[i++]:void 0;return a[r]=o,new Be(t,i+1,a)}function nn(t,e,n){for(var r=[],o=0;o<n.length;o++){var i=n[o],a=h(i);m(i)||(a=a.map(function(t){return G(t)})),r.push(a)}return on(t,e,r)}function rn(t){return function(e,n){return e&&e.mergeDeepWith&&m(n)?e.mergeDeepWith(t,n):t?t(e,n):n}}function on(t,e,n){return n=n.filter(function(t){return 0!==t.size}),0===n.length?t:0===t.size&&1===n.length?t.constructor(n[0]):t.withMutations(function(t){for(var r=e?function(n,r){t.update(r,pr,function(t){return t===pr?n:e(t,n)})}:function(e,n){t.set(n,e)},o=0;o<n.length;o++)n[o].forEach(r)})}function an(t,e,n,r){var o=t===pr,i=e.next();if(i.done){var a=o?n:t,s=r(a);return s===a?t:s}ae(o||t&&t.set,"invalid keyPath");var u=i.value,c=o?pr:t.get(u,pr),p=an(c,e,n,r);return p===c?t:p===pr?t.remove(u):(o?Ye():t).set(u,p)}function sn(t){return t-=t>>1&1431655765,t=(858993459&t)+(t>>2&858993459),t=t+(t>>4)&252645135,t+=t>>8,t+=t>>16,127&t}function un(t,e,n,r){var i=r?t:o(t);return i[e]=n,i}function cn(t,e,n,r){var o=t.length+1;if(r&&e+1===o)return t[e]=n,t;for(var i=new Array(o),a=0,s=0;o>s;s++)s===e?(i[s]=n,a=-1):i[s]=t[s+a];return i}function pn(t,e,n){var r=t.length-1;if(n&&e===r)return t.pop(),t;for(var o=new Array(r),i=0,a=0;r>a;a++)a===e&&(i=1),o[a]=t[a+i];return o}function ln(t){var e=mn();if(null===t||void 0===t)return e;if(fn(t))return t;var n=d(t),r=n.size;return 0===r?e:(se(r),r>0&&ur>r?vn(0,r,sr,null,new hn(n.toArray())):e.withMutations(function(t){t.setSize(r),n.forEach(function(e,n){return t.set(n,e)})}))}function fn(t){return!(!t||!t[zr])}function hn(t,e){this.array=t,this.ownerID=e}function dn(t,e){function n(t,e,n){return 0===e?r(t,n):o(t,e,n)}function r(t,n){var r=n===s?u&&u.array:t&&t.array,o=n>i?0:i-n,c=a-n;return c>ur&&(c=ur),function(){if(o===c)return Wr;var t=e?--c:o++;return r&&r[t]}}function o(t,r,o){var s,u=t&&t.array,c=o>i?0:i-o>>r,p=(a-o>>r)+1;return p>ur&&(p=ur),function(){for(;;){if(s){var t=s();if(t!==Wr)return t;s=null}if(c===p)return Wr;var i=e?--p:c++;s=n(u&&u[i],r-sr,o+(i<<r))}}}var i=t._origin,a=t._capacity,s=Nn(a),u=t._tail;return n(t._root,t._level,0)}function vn(t,e,n,r,o,i,a){var s=Object.create(Br);return s.size=e-t,s._origin=t,s._capacity=e,s._level=n,s._root=r,s._tail=o,s.__ownerID=i,s.__hash=a,s.__altered=!1,s}function mn(){return qr||(qr=vn(0,0,sr))}function yn(t,n,r){if(n=a(t,n),n>=t.size||0>n)return t.withMutations(function(t){0>n?bn(t,n).set(0,r):bn(t,0,n+1).set(n,r)});n+=t._origin;var o=t._tail,i=t._root,s=e(fr);return n>=Nn(t._capacity)?o=_n(o,t.__ownerID,0,n,r,s):i=_n(i,t.__ownerID,t._level,n,r,s),s.value?t.__ownerID?(t._root=i,t._tail=o,t.__hash=void 0,t.__altered=!0,t):vn(t._origin,t._capacity,t._level,i,o):t}function _n(t,e,r,o,i,a){var s=o>>>r&cr,u=t&&s<t.array.length;if(!u&&void 0===i)return t;var c;if(r>0){var p=t&&t.array[s],l=_n(p,e,r-sr,o,i,a);return l===p?t:(c=gn(t,e),c.array[s]=l,c)}return u&&t.array[s]===i?t:(n(a),c=gn(t,e),void 0===i&&s===c.array.length-1?c.array.pop():c.array[s]=i,c)}function gn(t,e){return e&&t&&e===t.ownerID?t:new hn(t?t.array.slice():[],e)}function En(t,e){if(e>=Nn(t._capacity))return t._tail;if(e<1<<t._level+sr){for(var n=t._root,r=t._level;n&&r>0;)n=n.array[e>>>r&cr],r-=sr;return n}}function bn(t,e,n){var o=t.__ownerID||new r,i=t._origin,a=t._capacity,s=i+e,u=void 0===n?a:0>n?a+n:i+n;if(s===i&&u===a)return t;if(s>=u)return t.clear();for(var c=t._level,p=t._root,l=0;0>s+l;)p=new hn(p&&p.array.length?[void 0,p]:[],o),c+=sr,l+=1<<c;l&&(s+=l,i+=l,u+=l,a+=l);for(var f=Nn(a),h=Nn(u);h>=1<<c+sr;)p=new hn(p&&p.array.length?[p]:[],o),c+=sr;var d=t._tail,v=f>h?En(t,u-1):h>f?new hn([],o):d;if(d&&h>f&&a>s&&d.array.length){p=gn(p,o);for(var m=p,y=c;y>sr;y-=sr){var _=f>>>y&cr;m=m.array[_]=gn(m.array[_],o)}m.array[f>>>sr&cr]=d}if(a>u&&(v=v&&v.removeAfter(o,0,u)),s>=h)s-=h,u-=h,c=sr,p=null,v=v&&v.removeBefore(o,0,s);else if(s>i||f>h){for(l=0;p;){var g=s>>>c&cr;if(g!==h>>>c&cr)break;g&&(l+=(1<<c)*g),c-=sr,p=p.array[g]}p&&s>i&&(p=p.removeBefore(o,c,s-l)),p&&f>h&&(p=p.removeAfter(o,c,h-l)),l&&(s-=l,u-=l)}return t.__ownerID?(t.size=u-s,t._origin=s,t._capacity=u,t._level=c,t._root=p,t._tail=v,t.__hash=void 0,t.__altered=!0,t):vn(s,u,c,p,v)}function wn(t,e,n){for(var r=[],o=0,i=0;i<n.length;i++){var a=n[i],s=d(a);s.size>o&&(o=s.size),m(a)||(s=s.map(function(t){return G(t)})),r.push(s)}return o>t.size&&(t=t.setSize(o)),on(t,e,r)}function Nn(t){return ur>t?0:t-1>>>sr<<sr}function Dn(t){return null===t||void 0===t?Sn():On(t)?t:Sn().withMutations(function(e){var n=h(t);se(n.size),n.forEach(function(t,n){return e.set(n,t)})})}function On(t){return Ve(t)&&E(t)}function Cn(t,e,n,r){var o=Object.create(Dn.prototype);return o.size=t?t.size:0,o._map=t,o._list=e,o.__ownerID=n,o.__hash=r,o}function Sn(){return Fr||(Fr=Cn(Ye(),mn()))}function xn(t,e,n){var r,o,i=t._map,a=t._list,s=i.get(e),u=void 0!==s;if(n===pr){if(!u)return t;a.size>=ur&&a.size>=2*i.size?(o=a.filter(function(t,e){return void 0!==t&&s!==e}),r=o.toKeyedSeq().map(function(t){return t[0]}).flip().toMap(),t.__ownerID&&(r.__ownerID=o.__ownerID=t.__ownerID)):(r=i.remove(e),o=s===a.size-1?a.pop():a.set(s,void 0))}else if(u){if(n===a.get(s)[1])return t;r=i,o=a.set(s,[e,n])}else r=i.set(e,a.size),o=a.set(a.size,[e,n]);return t.__ownerID?(t.size=r.size,t._map=r,t._list=o,t.__hash=void 0,t):Cn(r,o)}function In(t){return null===t||void 0===t?Tn():kn(t)?t:Tn().unshiftAll(t)}function kn(t){return!(!t||!t[Hr])}function Mn(t,e,n,r){var o=Object.create(Kr);return o.size=t,o._head=e,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function Tn(){return Xr||(Xr=Mn(0))}function Rn(t){return null===t||void 0===t?Un():An(t)?t:Un().withMutations(function(e){var n=v(t);se(n.size),n.forEach(function(t){return e.add(t)})})}function An(t){return!(!t||!t[Yr])}function Pn(t,e){return t.__ownerID?(t.size=e.size,t._map=e,t):e===t._map?t:0===e.size?t.__empty():t.__make(e)}function Ln(t,e){var n=Object.create($r);return n.size=t?t.size:0,n._map=t,n.__ownerID=e,n}function Un(){return Gr||(Gr=Ln(Ye()))}function Vn(t){return null===t||void 0===t?Bn():jn(t)?t:Bn().withMutations(function(e){var n=v(t);se(n.size),n.forEach(function(t){return e.add(t)})})}function jn(t){return An(t)&&E(t)}function zn(t,e){var n=Object.create(Jr);return n.size=t?t.size:0,n._map=t,n.__ownerID=e,n}function Bn(){return Qr||(Qr=zn(Sn()))}function qn(t,e){var n=function(t){return this instanceof n?void(this._map=Ue(t)):new n(t)},r=Object.keys(t),o=n.prototype=Object.create(Zr);o.constructor=n,e&&(o._name=e),o._defaultValues=t,o._keys=r,o.size=r.length;try{r.forEach(function(t){Object.defineProperty(n.prototype,t,{get:function(){return this.get(t)},set:function(e){ae(this.__ownerID,"Cannot set on an immutable record."),this.set(t,e)}})})}catch(i){}return n}function Wn(t,e,n){var r=Object.create(Object.getPrototypeOf(t));return r._map=e,r.__ownerID=n,r}function Fn(t){return t._name||t.constructor.name}function Hn(t,e){if(t===e)return!0;if(!m(e)||void 0!==t.size&&void 0!==e.size&&t.size!==e.size||void 0!==t.__hash&&void 0!==e.__hash&&t.__hash!==e.__hash||y(t)!==y(e)||_(t)!==_(e)||E(t)!==E(e))return!1;if(0===t.size&&0===e.size)return!0;var n=!g(t);if(E(t)){var r=t.entries();return e.every(function(t,e){var o=r.next().value;return o&&$(o[1],t)&&(n||$(o[0],e))})&&r.next().done}var o=!1;if(void 0===t.size)if(void 0===e.size)t.cacheResult();else{o=!0;var i=t;t=e,e=i}var a=!0,s=e.__iterate(function(e,r){return(n?t.has(e):o?$(e,t.get(r,pr)):$(t.get(r,pr),e))?void 0:(a=!1,!1)});return a&&t.size===s}function Kn(t,e,n){if(!(this instanceof Kn))return new Kn(t,e,n);if(ae(0!==n,"Cannot step a Range by 0"),t=t||0,void 0===e&&(e=1/0),n=void 0===n?1:Math.abs(n),t>e&&(n=-n),this._start=t,this._end=e,this._step=n,this.size=Math.max(0,Math.ceil((e-t)/n-1)+1),0===this.size){if(to)return to;to=this}}function Xn(t,e){if(!(this instanceof Xn))return new Xn(t,e);if(this._value=t,this.size=void 0===e?1/0:Math.max(0,e),0===this.size){if(eo)return eo;eo=this}}function Yn(t,e){var n=function(n){t.prototype[n]=e[n]};return Object.keys(e).forEach(n),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(e).forEach(n),t}function $n(t,e){return e}function Gn(t,e){return[e,t]}function Jn(t){return function(){return!t.apply(this,arguments)}}function Qn(t){return function(){return-t.apply(this,arguments)}}function Zn(t){return"string"==typeof t?JSON.stringify(t):t}function tr(){return o(arguments)}function er(t,e){return e>t?1:t>e?-1:0}function nr(t){if(1/0===t.size)return 0;var e=E(t),n=y(t),r=e?1:0,o=t.__iterate(n?e?function(t,e){r=31*r+or(ee(t),ee(e))|0}:function(t,e){r=r+or(ee(t),ee(e))|0}:e?function(t){r=31*r+ee(t)|0}:function(t){r=r+ee(t)|0});return rr(o,r)}function rr(t,e){return e=Or(e,3432918353),e=Or(e<<15|e>>>-15,461845907),e=Or(e<<13|e>>>-13,5),e=(e+3864292196|0)^t,e=Or(e^e>>>16,2246822507),e=Or(e^e>>>13,3266489909),e=te(e^e>>>16)}function or(t,e){return t^e+2654435769+(t<<6)+(t>>2)|0}var ir=Array.prototype.slice,ar="delete",sr=5,ur=1<<sr,cr=ur-1,pr={},lr={value:!1},fr={value:!1};t(h,f),t(d,f),t(v,f),f.isIterable=m,f.isKeyed=y,f.isIndexed=_,f.isAssociative=g,f.isOrdered=E,f.Keyed=h,f.Indexed=d,f.Set=v;var hr="@@__IMMUTABLE_ITERABLE__@@",dr="@@__IMMUTABLE_KEYED__@@",vr="@@__IMMUTABLE_INDEXED__@@",mr="@@__IMMUTABLE_ORDERED__@@",yr=0,_r=1,gr=2,Er="function"==typeof Symbol&&Symbol.iterator,br="@@iterator",wr=Er||br;b.prototype.toString=function(){return"[Iterator]"},b.KEYS=yr,b.VALUES=_r,b.ENTRIES=gr,b.prototype.inspect=b.prototype.toSource=function(){return this.toString()},b.prototype[wr]=function(){return this},t(I,f),I.of=function(){return I(arguments)},I.prototype.toSeq=function(){return this},I.prototype.toString=function(){return this.__toString("Seq {","}")},I.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},I.prototype.__iterate=function(t,e){return W(this,t,e,!0)},I.prototype.__iterator=function(t,e){return F(this,t,e,!0)},t(k,I),k.of=function(){return k(arguments)},k.prototype.toKeyedSeq=function(){return this},k.prototype.toSeq=function(){return this},t(M,I),M.of=function(){return M(arguments)},M.prototype.toIndexedSeq=function(){return this},M.prototype.toString=function(){return this.__toString("Seq [","]")},M.prototype.__iterate=function(t,e){return W(this,t,e,!1)},M.prototype.__iterator=function(t,e){return F(this,t,e,!1)},t(T,I),T.of=function(){return T(arguments)},T.prototype.toSetSeq=function(){return this},I.isSeq=U,I.Keyed=k,I.Set=T,I.Indexed=M;var Nr="@@__IMMUTABLE_SEQ__@@";I.prototype[Nr]=!0,t(R,M),R.prototype.get=function(t,e){return this.has(t)?this._array[a(this,t)]:e},R.prototype.__iterate=function(t,e){for(var n=this._array,r=n.length-1,o=0;r>=o;o++)if(t(n[e?r-o:o],o,this)===!1)return o+1;return o},R.prototype.__iterator=function(t,e){var n=this._array,r=n.length-1,o=0;return new b(function(){return o>r?N():w(t,o,n[e?r-o++:o++])})},t(A,k),A.prototype.get=function(t,e){return void 0===e||this.has(t)?this._object[t]:e},A.prototype.has=function(t){return this._object.hasOwnProperty(t)},A.prototype.__iterate=function(t,e){for(var n=this._object,r=this._keys,o=r.length-1,i=0;o>=i;i++){var a=r[e?o-i:i];if(t(n[a],a,this)===!1)return i+1}return i},A.prototype.__iterator=function(t,e){var n=this._object,r=this._keys,o=r.length-1,i=0;return new b(function(){var a=r[e?o-i:i];return i++>o?N():w(t,a,n[a])})},A.prototype[mr]=!0,t(P,M),P.prototype.__iterateUncached=function(t,e){if(e)return this.cacheResult().__iterate(t,e);var n=this._iterable,r=C(n),o=0;if(O(r))for(var i;!(i=r.next()).done&&t(i.value,o++,this)!==!1;);return o},P.prototype.__iteratorUncached=function(t,e){if(e)return this.cacheResult().__iterator(t,e);var n=this._iterable,r=C(n);if(!O(r))return new b(N);var o=0;return new b(function(){var e=r.next();return e.done?e:w(t,o++,e.value)})},t(L,M),L.prototype.__iterateUncached=function(t,e){if(e)return this.cacheResult().__iterate(t,e);for(var n=this._iterator,r=this._iteratorCache,o=0;o<r.length;)if(t(r[o],o++,this)===!1)return o;for(var i;!(i=n.next()).done;){var a=i.value;if(r[o]=a,t(a,o++,this)===!1)break}return o},L.prototype.__iteratorUncached=function(t,e){if(e)return this.cacheResult().__iterator(t,e);var n=this._iterator,r=this._iteratorCache,o=0;return new b(function(){if(o>=r.length){var e=n.next();if(e.done)return e;r[o]=e.value}return w(t,o,r[o++])})};var Dr;t(H,f),t(K,H),t(X,H),t(Y,H),H.Keyed=K,H.Indexed=X,H.Set=Y;var Or="function"==typeof Math.imul&&-2===Math.imul(4294967295,2)?Math.imul:function(t,e){t=0|t,e=0|e;var n=65535&t,r=65535&e;return n*r+((t>>>16)*r+n*(e>>>16)<<16>>>0)|0},Cr=function(){try{return Object.defineProperty({},"x",{}),!0}catch(t){return!1}}(),Sr="function"==typeof WeakMap&&new WeakMap,xr=0,Ir="__immutablehash__";"function"==typeof Symbol&&(Ir=Symbol(Ir));var kr=16,Mr=255,Tr=0,Rr={};t(ue,k),ue.prototype.get=function(t,e){return this._iter.get(t,e)},ue.prototype.has=function(t){return this._iter.has(t)},ue.prototype.valueSeq=function(){return this._iter.valueSeq()},ue.prototype.reverse=function(){var t=this,e=de(this,!0);return this._useKeys||(e.valueSeq=function(){return t._iter.toSeq().reverse()}),e},ue.prototype.map=function(t,e){var n=this,r=he(this,t,e);return this._useKeys||(r.valueSeq=function(){return n._iter.toSeq().map(t,e)}),r},ue.prototype.__iterate=function(t,e){var n,r=this;return this._iter.__iterate(this._useKeys?function(e,n){return t(e,n,r)}:(n=e?Me(this):0,function(o){return t(o,e?--n:n++,r)}),e)},ue.prototype.__iterator=function(t,e){if(this._useKeys)return this._iter.__iterator(t,e);var n=this._iter.__iterator(_r,e),r=e?Me(this):0;return new b(function(){var o=n.next();return o.done?o:w(t,e?--r:r++,o.value,o)})},ue.prototype[mr]=!0,t(ce,M),ce.prototype.contains=function(t){return this._iter.contains(t)},ce.prototype.__iterate=function(t,e){var n=this,r=0;return this._iter.__iterate(function(e){return t(e,r++,n)},e)},ce.prototype.__iterator=function(t,e){var n=this._iter.__iterator(_r,e),r=0;return new b(function(){var e=n.next();return e.done?e:w(t,r++,e.value,e)})},t(pe,T),pe.prototype.has=function(t){return this._iter.contains(t)},pe.prototype.__iterate=function(t,e){var n=this;return this._iter.__iterate(function(e){return t(e,e,n)},e)},pe.prototype.__iterator=function(t,e){var n=this._iter.__iterator(_r,e);return new b(function(){var e=n.next();return e.done?e:w(t,e.value,e.value,e)})},t(le,k),le.prototype.entrySeq=function(){return this._iter.toSeq()},le.prototype.__iterate=function(t,e){var n=this;return this._iter.__iterate(function(e){return e?(ke(e),t(e[1],e[0],n)):void 0},e)},le.prototype.__iterator=function(t,e){var n=this._iter.__iterator(_r,e);return new b(function(){for(;;){var e=n.next();if(e.done)return e;var r=e.value;if(r)return ke(r),t===gr?e:w(t,r[0],r[1],e)}})},ce.prototype.cacheResult=ue.prototype.cacheResult=pe.prototype.cacheResult=le.prototype.cacheResult=Ae,t(Ue,K),Ue.prototype.toString=function(){return this.__toString("Map {","}")},Ue.prototype.get=function(t,e){return this._root?this._root.get(0,void 0,t,e):e},Ue.prototype.set=function(t,e){return $e(this,t,e)},Ue.prototype.setIn=function(t,e){return this.updateIn(t,pr,function(){return e})},Ue.prototype.remove=function(t){return $e(this,t,pr)},Ue.prototype.deleteIn=function(t){return this.updateIn(t,function(){return pr})},Ue.prototype.update=function(t,e,n){return 1===arguments.length?t(this):this.updateIn([t],e,n)},Ue.prototype.updateIn=function(t,e,n){n||(n=e,e=void 0);var r=an(this,Le(t),e,n);return r===pr?void 0:r},Ue.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):Ye()},Ue.prototype.merge=function(){return nn(this,void 0,arguments)},Ue.prototype.mergeWith=function(t){var e=ir.call(arguments,1);return nn(this,t,e)},Ue.prototype.mergeIn=function(t){var e=ir.call(arguments,1);return this.updateIn(t,Ye(),function(t){return t.merge.apply(t,e)})},Ue.prototype.mergeDeep=function(){return nn(this,rn(void 0),arguments)},Ue.prototype.mergeDeepWith=function(t){var e=ir.call(arguments,1);return nn(this,rn(t),e)},Ue.prototype.mergeDeepIn=function(t){var e=ir.call(arguments,1);return this.updateIn(t,Ye(),function(t){return t.mergeDeep.apply(t,e)})},Ue.prototype.sort=function(t){return Dn(Oe(this,t))},Ue.prototype.sortBy=function(t,e){return Dn(Oe(this,e,t))},Ue.prototype.withMutations=function(t){var e=this.asMutable();return t(e),e.wasAltered()?e.__ensureOwner(this.__ownerID):this},Ue.prototype.asMutable=function(){return this.__ownerID?this:this.__ensureOwner(new r)},Ue.prototype.asImmutable=function(){return this.__ensureOwner()},Ue.prototype.wasAltered=function(){return this.__altered},Ue.prototype.__iterator=function(t,e){return new Fe(this,t,e)},Ue.prototype.__iterate=function(t,e){var n=this,r=0;
return this._root&&this._root.iterate(function(e){return r++,t(e[1],e[0],n)},e),r},Ue.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?Xe(this.size,this._root,t,this.__hash):(this.__ownerID=t,this.__altered=!1,this)},Ue.isMap=Ve;var Ar="@@__IMMUTABLE_MAP__@@",Pr=Ue.prototype;Pr[Ar]=!0,Pr[ar]=Pr.remove,Pr.removeIn=Pr.deleteIn,je.prototype.get=function(t,e,n,r){for(var o=this.entries,i=0,a=o.length;a>i;i++)if($(n,o[i][0]))return o[i][1];return r},je.prototype.update=function(t,e,r,i,a,s,u){for(var c=a===pr,p=this.entries,l=0,f=p.length;f>l&&!$(i,p[l][0]);l++);var h=f>l;if(h?p[l][1]===a:c)return this;if(n(u),(c||!h)&&n(s),!c||1!==p.length){if(!h&&!c&&p.length>=Ur)return Ze(t,p,i,a);var d=t&&t===this.ownerID,v=d?p:o(p);return h?c?l===f-1?v.pop():v[l]=v.pop():v[l]=[i,a]:v.push([i,a]),d?(this.entries=v,this):new je(t,v)}},ze.prototype.get=function(t,e,n,r){void 0===e&&(e=ee(n));var o=1<<((0===t?e:e>>>t)&cr),i=this.bitmap;return 0===(i&o)?r:this.nodes[sn(i&o-1)].get(t+sr,e,n,r)},ze.prototype.update=function(t,e,n,r,o,i,a){void 0===n&&(n=ee(r));var s=(0===e?n:n>>>e)&cr,u=1<<s,c=this.bitmap,p=0!==(c&u);if(!p&&o===pr)return this;var l=sn(c&u-1),f=this.nodes,h=p?f[l]:void 0,d=Ge(h,t,e+sr,n,r,o,i,a);if(d===h)return this;if(!p&&d&&f.length>=Vr)return en(t,f,c,s,d);if(p&&!d&&2===f.length&&Je(f[1^l]))return f[1^l];if(p&&d&&1===f.length&&Je(d))return d;var v=t&&t===this.ownerID,m=p?d?c:c^u:c|u,y=p?d?un(f,l,d,v):pn(f,l,v):cn(f,l,d,v);return v?(this.bitmap=m,this.nodes=y,this):new ze(t,m,y)},Be.prototype.get=function(t,e,n,r){void 0===e&&(e=ee(n));var o=(0===t?e:e>>>t)&cr,i=this.nodes[o];return i?i.get(t+sr,e,n,r):r},Be.prototype.update=function(t,e,n,r,o,i,a){void 0===n&&(n=ee(r));var s=(0===e?n:n>>>e)&cr,u=o===pr,c=this.nodes,p=c[s];if(u&&!p)return this;var l=Ge(p,t,e+sr,n,r,o,i,a);if(l===p)return this;var f=this.count;if(p){if(!l&&(f--,jr>f))return tn(t,c,f,s)}else f++;var h=t&&t===this.ownerID,d=un(c,s,l,h);return h?(this.count=f,this.nodes=d,this):new Be(t,f,d)},qe.prototype.get=function(t,e,n,r){for(var o=this.entries,i=0,a=o.length;a>i;i++)if($(n,o[i][0]))return o[i][1];return r},qe.prototype.update=function(t,e,r,i,a,s,u){void 0===r&&(r=ee(i));var c=a===pr;if(r!==this.keyHash)return c?this:(n(u),n(s),Qe(this,t,e,r,[i,a]));for(var p=this.entries,l=0,f=p.length;f>l&&!$(i,p[l][0]);l++);var h=f>l;if(h?p[l][1]===a:c)return this;if(n(u),(c||!h)&&n(s),c&&2===f)return new We(t,this.keyHash,p[1^l]);var d=t&&t===this.ownerID,v=d?p:o(p);return h?c?l===f-1?v.pop():v[l]=v.pop():v[l]=[i,a]:v.push([i,a]),d?(this.entries=v,this):new qe(t,this.keyHash,v)},We.prototype.get=function(t,e,n,r){return $(n,this.entry[0])?this.entry[1]:r},We.prototype.update=function(t,e,r,o,i,a,s){var u=i===pr,c=$(o,this.entry[0]);return(c?i===this.entry[1]:u)?this:(n(s),u?void n(a):c?t&&t===this.ownerID?(this.entry[1]=i,this):new We(t,this.keyHash,[o,i]):(n(a),Qe(this,t,e,ee(o),[o,i])))},je.prototype.iterate=qe.prototype.iterate=function(t,e){for(var n=this.entries,r=0,o=n.length-1;o>=r;r++)if(t(n[e?o-r:r])===!1)return!1},ze.prototype.iterate=Be.prototype.iterate=function(t,e){for(var n=this.nodes,r=0,o=n.length-1;o>=r;r++){var i=n[e?o-r:r];if(i&&i.iterate(t,e)===!1)return!1}},We.prototype.iterate=function(t){return t(this.entry)},t(Fe,b),Fe.prototype.next=function(){for(var t=this._type,e=this._stack;e;){var n,r=e.node,o=e.index++;if(r.entry){if(0===o)return He(t,r.entry)}else if(r.entries){if(n=r.entries.length-1,n>=o)return He(t,r.entries[this._reverse?n-o:o])}else if(n=r.nodes.length-1,n>=o){var i=r.nodes[this._reverse?n-o:o];if(i){if(i.entry)return He(t,i.entry);e=this._stack=Ke(i,e)}continue}e=this._stack=this._stack.__prev}return N()};var Lr,Ur=ur/4,Vr=ur/2,jr=ur/4;t(ln,X),ln.of=function(){return this(arguments)},ln.prototype.toString=function(){return this.__toString("List [","]")},ln.prototype.get=function(t,e){if(t=a(this,t),0>t||t>=this.size)return e;t+=this._origin;var n=En(this,t);return n&&n.array[t&cr]},ln.prototype.set=function(t,e){return yn(this,t,e)},ln.prototype.remove=function(t){return this.has(t)?0===t?this.shift():t===this.size-1?this.pop():this.splice(t,1):this},ln.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=sr,this._root=this._tail=null,this.__hash=void 0,this.__altered=!0,this):mn()},ln.prototype.push=function(){var t=arguments,e=this.size;return this.withMutations(function(n){bn(n,0,e+t.length);for(var r=0;r<t.length;r++)n.set(e+r,t[r])})},ln.prototype.pop=function(){return bn(this,0,-1)},ln.prototype.unshift=function(){var t=arguments;return this.withMutations(function(e){bn(e,-t.length);for(var n=0;n<t.length;n++)e.set(n,t[n])})},ln.prototype.shift=function(){return bn(this,1)},ln.prototype.merge=function(){return wn(this,void 0,arguments)},ln.prototype.mergeWith=function(t){var e=ir.call(arguments,1);return wn(this,t,e)},ln.prototype.mergeDeep=function(){return wn(this,rn(void 0),arguments)},ln.prototype.mergeDeepWith=function(t){var e=ir.call(arguments,1);return wn(this,rn(t),e)},ln.prototype.setSize=function(t){return bn(this,0,t)},ln.prototype.slice=function(t,e){var n=this.size;return u(t,e,n)?this:bn(this,c(t,n),p(e,n))},ln.prototype.__iterator=function(t,e){var n=0,r=dn(this,e);return new b(function(){var e=r();return e===Wr?N():w(t,n++,e)})},ln.prototype.__iterate=function(t,e){for(var n,r=0,o=dn(this,e);(n=o())!==Wr&&t(n,r++,this)!==!1;);return r},ln.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?vn(this._origin,this._capacity,this._level,this._root,this._tail,t,this.__hash):(this.__ownerID=t,this)},ln.isList=fn;var zr="@@__IMMUTABLE_LIST__@@",Br=ln.prototype;Br[zr]=!0,Br[ar]=Br.remove,Br.setIn=Pr.setIn,Br.deleteIn=Br.removeIn=Pr.removeIn,Br.update=Pr.update,Br.updateIn=Pr.updateIn,Br.mergeIn=Pr.mergeIn,Br.mergeDeepIn=Pr.mergeDeepIn,Br.withMutations=Pr.withMutations,Br.asMutable=Pr.asMutable,Br.asImmutable=Pr.asImmutable,Br.wasAltered=Pr.wasAltered,hn.prototype.removeBefore=function(t,e,n){if(n===e?1<<e:0||0===this.array.length)return this;var r=n>>>e&cr;if(r>=this.array.length)return new hn([],t);var o,i=0===r;if(e>0){var a=this.array[r];if(o=a&&a.removeBefore(t,e-sr,n),o===a&&i)return this}if(i&&!o)return this;var s=gn(this,t);if(!i)for(var u=0;r>u;u++)s.array[u]=void 0;return o&&(s.array[r]=o),s},hn.prototype.removeAfter=function(t,e,n){if(n===e?1<<e:0||0===this.array.length)return this;var r=n-1>>>e&cr;if(r>=this.array.length)return this;var o,i=r===this.array.length-1;if(e>0){var a=this.array[r];if(o=a&&a.removeAfter(t,e-sr,n),o===a&&i)return this}if(i&&!o)return this;var s=gn(this,t);return i||s.array.pop(),o&&(s.array[r]=o),s};var qr,Wr={};t(Dn,Ue),Dn.of=function(){return this(arguments)},Dn.prototype.toString=function(){return this.__toString("OrderedMap {","}")},Dn.prototype.get=function(t,e){var n=this._map.get(t);return void 0!==n?this._list.get(n)[1]:e},Dn.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this):Sn()},Dn.prototype.set=function(t,e){return xn(this,t,e)},Dn.prototype.remove=function(t){return xn(this,t,pr)},Dn.prototype.wasAltered=function(){return this._map.wasAltered()||this._list.wasAltered()},Dn.prototype.__iterate=function(t,e){var n=this;return this._list.__iterate(function(e){return e&&t(e[1],e[0],n)},e)},Dn.prototype.__iterator=function(t,e){return this._list.fromEntrySeq().__iterator(t,e)},Dn.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map.__ensureOwner(t),n=this._list.__ensureOwner(t);return t?Cn(e,n,t,this.__hash):(this.__ownerID=t,this._map=e,this._list=n,this)},Dn.isOrderedMap=On,Dn.prototype[mr]=!0,Dn.prototype[ar]=Dn.prototype.remove;var Fr;t(In,X),In.of=function(){return this(arguments)},In.prototype.toString=function(){return this.__toString("Stack [","]")},In.prototype.get=function(t,e){for(var n=this._head;n&&t--;)n=n.next;return n?n.value:e},In.prototype.peek=function(){return this._head&&this._head.value},In.prototype.push=function(){if(0===arguments.length)return this;for(var t=this.size+arguments.length,e=this._head,n=arguments.length-1;n>=0;n--)e={value:arguments[n],next:e};return this.__ownerID?(this.size=t,this._head=e,this.__hash=void 0,this.__altered=!0,this):Mn(t,e)},In.prototype.pushAll=function(t){if(t=d(t),0===t.size)return this;se(t.size);var e=this.size,n=this._head;return t.reverse().forEach(function(t){e++,n={value:t,next:n}}),this.__ownerID?(this.size=e,this._head=n,this.__hash=void 0,this.__altered=!0,this):Mn(e,n)},In.prototype.pop=function(){return this.slice(1)},In.prototype.unshift=function(){return this.push.apply(this,arguments)},In.prototype.unshiftAll=function(t){return this.pushAll(t)},In.prototype.shift=function(){return this.pop.apply(this,arguments)},In.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):Tn()},In.prototype.slice=function(t,e){if(u(t,e,this.size))return this;var n=c(t,this.size),r=p(e,this.size);if(r!==this.size)return X.prototype.slice.call(this,t,e);for(var o=this.size-n,i=this._head;n--;)i=i.next;return this.__ownerID?(this.size=o,this._head=i,this.__hash=void 0,this.__altered=!0,this):Mn(o,i)},In.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?Mn(this.size,this._head,t,this.__hash):(this.__ownerID=t,this.__altered=!1,this)},In.prototype.__iterate=function(t,e){if(e)return this.toSeq().cacheResult.__iterate(t,e);for(var n=0,r=this._head;r&&t(r.value,n++,this)!==!1;)r=r.next;return n},In.prototype.__iterator=function(t,e){if(e)return this.toSeq().cacheResult().__iterator(t,e);var n=0,r=this._head;return new b(function(){if(r){var e=r.value;return r=r.next,w(t,n++,e)}return N()})},In.isStack=kn;var Hr="@@__IMMUTABLE_STACK__@@",Kr=In.prototype;Kr[Hr]=!0,Kr.withMutations=Pr.withMutations,Kr.asMutable=Pr.asMutable,Kr.asImmutable=Pr.asImmutable,Kr.wasAltered=Pr.wasAltered;var Xr;t(Rn,Y),Rn.of=function(){return this(arguments)},Rn.fromKeys=function(t){return this(h(t).keySeq())},Rn.prototype.toString=function(){return this.__toString("Set {","}")},Rn.prototype.has=function(t){return this._map.has(t)},Rn.prototype.add=function(t){return Pn(this,this._map.set(t,!0))},Rn.prototype.remove=function(t){return Pn(this,this._map.remove(t))},Rn.prototype.clear=function(){return Pn(this,this._map.clear())},Rn.prototype.union=function(){var t=ir.call(arguments,0);return t=t.filter(function(t){return 0!==t.size}),0===t.length?this:0===this.size&&1===t.length?this.constructor(t[0]):this.withMutations(function(e){for(var n=0;n<t.length;n++)v(t[n]).forEach(function(t){return e.add(t)})})},Rn.prototype.intersect=function(){var t=ir.call(arguments,0);if(0===t.length)return this;t=t.map(function(t){return v(t)});var e=this;return this.withMutations(function(n){e.forEach(function(e){t.every(function(t){return t.contains(e)})||n.remove(e)})})},Rn.prototype.subtract=function(){var t=ir.call(arguments,0);if(0===t.length)return this;t=t.map(function(t){return v(t)});var e=this;return this.withMutations(function(n){e.forEach(function(e){t.some(function(t){return t.contains(e)})&&n.remove(e)})})},Rn.prototype.merge=function(){return this.union.apply(this,arguments)},Rn.prototype.mergeWith=function(){var t=ir.call(arguments,1);return this.union.apply(this,t)},Rn.prototype.sort=function(t){return Vn(Oe(this,t))},Rn.prototype.sortBy=function(t,e){return Vn(Oe(this,e,t))},Rn.prototype.wasAltered=function(){return this._map.wasAltered()},Rn.prototype.__iterate=function(t,e){var n=this;return this._map.__iterate(function(e,r){return t(r,r,n)},e)},Rn.prototype.__iterator=function(t,e){return this._map.map(function(t,e){return e}).__iterator(t,e)},Rn.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map.__ensureOwner(t);return t?this.__make(e,t):(this.__ownerID=t,this._map=e,this)},Rn.isSet=An;var Yr="@@__IMMUTABLE_SET__@@",$r=Rn.prototype;$r[Yr]=!0,$r[ar]=$r.remove,$r.mergeDeep=$r.merge,$r.mergeDeepWith=$r.mergeWith,$r.withMutations=Pr.withMutations,$r.asMutable=Pr.asMutable,$r.asImmutable=Pr.asImmutable,$r.__empty=Un,$r.__make=Ln;var Gr;t(Vn,Rn),Vn.of=function(){return this(arguments)},Vn.fromKeys=function(t){return this(h(t).keySeq())},Vn.prototype.toString=function(){return this.__toString("OrderedSet {","}")},Vn.isOrderedSet=jn;var Jr=Vn.prototype;Jr[mr]=!0,Jr.__empty=Bn,Jr.__make=zn;var Qr;t(qn,K),qn.prototype.toString=function(){return this.__toString(Fn(this)+" {","}")},qn.prototype.has=function(t){return this._defaultValues.hasOwnProperty(t)},qn.prototype.get=function(t,e){if(!this.has(t))return e;var n=this._defaultValues[t];return this._map?this._map.get(t,n):n},qn.prototype.clear=function(){if(this.__ownerID)return this._map&&this._map.clear(),this;var t=Object.getPrototypeOf(this).constructor;return t._empty||(t._empty=Wn(this,Ye()))},qn.prototype.set=function(t,e){if(!this.has(t))throw new Error('Cannot set unknown key "'+t+'" on '+Fn(this));var n=this._map&&this._map.set(t,e);return this.__ownerID||n===this._map?this:Wn(this,n)},qn.prototype.remove=function(t){if(!this.has(t))return this;var e=this._map&&this._map.remove(t);return this.__ownerID||e===this._map?this:Wn(this,e)},qn.prototype.wasAltered=function(){return this._map.wasAltered()},qn.prototype.__iterator=function(t,e){var n=this;return h(this._defaultValues).map(function(t,e){return n.get(e)}).__iterator(t,e)},qn.prototype.__iterate=function(t,e){var n=this;return h(this._defaultValues).map(function(t,e){return n.get(e)}).__iterate(t,e)},qn.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map&&this._map.__ensureOwner(t);return t?Wn(this,e,t):(this.__ownerID=t,this._map=e,this)};var Zr=qn.prototype;Zr[ar]=Zr.remove,Zr.deleteIn=Zr.removeIn=Pr.removeIn,Zr.merge=Pr.merge,Zr.mergeWith=Pr.mergeWith,Zr.mergeIn=Pr.mergeIn,Zr.mergeDeep=Pr.mergeDeep,Zr.mergeDeepWith=Pr.mergeDeepWith,Zr.mergeDeepIn=Pr.mergeDeepIn,Zr.setIn=Pr.setIn,Zr.update=Pr.update,Zr.updateIn=Pr.updateIn,Zr.withMutations=Pr.withMutations,Zr.asMutable=Pr.asMutable,Zr.asImmutable=Pr.asImmutable,t(Kn,M),Kn.prototype.toString=function(){return 0===this.size?"Range []":"Range [ "+this._start+"..."+this._end+(this._step>1?" by "+this._step:"")+" ]"},Kn.prototype.get=function(t,e){return this.has(t)?this._start+a(this,t)*this._step:e},Kn.prototype.contains=function(t){var e=(t-this._start)/this._step;return e>=0&&e<this.size&&e===Math.floor(e)},Kn.prototype.slice=function(t,e){return u(t,e,this.size)?this:(t=c(t,this.size),e=p(e,this.size),t>=e?new Kn(0,0):new Kn(this.get(t,this._end),this.get(e,this._end),this._step))},Kn.prototype.indexOf=function(t){var e=t-this._start;if(e%this._step===0){var n=e/this._step;if(n>=0&&n<this.size)return n}return-1},Kn.prototype.lastIndexOf=function(t){return this.indexOf(t)},Kn.prototype.__iterate=function(t,e){for(var n=this.size-1,r=this._step,o=e?this._start+n*r:this._start,i=0;n>=i;i++){if(t(o,i,this)===!1)return i+1;o+=e?-r:r}return i},Kn.prototype.__iterator=function(t,e){var n=this.size-1,r=this._step,o=e?this._start+n*r:this._start,i=0;return new b(function(){var a=o;return o+=e?-r:r,i>n?N():w(t,i++,a)})},Kn.prototype.equals=function(t){return t instanceof Kn?this._start===t._start&&this._end===t._end&&this._step===t._step:Hn(this,t)};var to;t(Xn,M),Xn.prototype.toString=function(){return 0===this.size?"Repeat []":"Repeat [ "+this._value+" "+this.size+" times ]"},Xn.prototype.get=function(t,e){return this.has(t)?this._value:e},Xn.prototype.contains=function(t){return $(this._value,t)},Xn.prototype.slice=function(t,e){var n=this.size;return u(t,e,n)?this:new Xn(this._value,p(e,n)-c(t,n))},Xn.prototype.reverse=function(){return this},Xn.prototype.indexOf=function(t){return $(this._value,t)?0:-1},Xn.prototype.lastIndexOf=function(t){return $(this._value,t)?this.size:-1},Xn.prototype.__iterate=function(t){for(var e=0;e<this.size;e++)if(t(this._value,e,this)===!1)return e+1;return e},Xn.prototype.__iterator=function(t){var e=this,n=0;return new b(function(){return n<e.size?w(t,n++,e._value):N()})},Xn.prototype.equals=function(t){return t instanceof Xn?$(this._value,t._value):Hn(t)};var eo;f.Iterator=b,Yn(f,{toArray:function(){se(this.size);var t=new Array(this.size||0);return this.valueSeq().__iterate(function(e,n){t[n]=e}),t},toIndexedSeq:function(){return new ce(this)},toJS:function(){return this.toSeq().map(function(t){return t&&"function"==typeof t.toJS?t.toJS():t}).__toJS()},toJSON:function(){return this.toSeq().map(function(t){return t&&"function"==typeof t.toJSON?t.toJSON():t}).__toJS()},toKeyedSeq:function(){return new ue(this,!0)},toMap:function(){return Ue(this.toKeyedSeq())},toObject:function(){se(this.size);var t={};return this.__iterate(function(e,n){t[n]=e}),t},toOrderedMap:function(){return Dn(this.toKeyedSeq())},toOrderedSet:function(){return Vn(y(this)?this.valueSeq():this)},toSet:function(){return Rn(y(this)?this.valueSeq():this)},toSetSeq:function(){return new pe(this)},toSeq:function(){return _(this)?this.toIndexedSeq():y(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return In(y(this)?this.valueSeq():this)},toList:function(){return ln(y(this)?this.valueSeq():this)},toString:function(){return"[Iterable]"},__toString:function(t,e){return 0===this.size?t+e:t+" "+this.toSeq().map(this.__toStringMapper).join(", ")+" "+e},concat:function(){var t=ir.call(arguments,0);return Ie(this,be(this,t))},contains:function(t){return this.some(function(e){return $(e,t)})},entries:function(){return this.__iterator(gr)},every:function(t,e){se(this.size);var n=!0;return this.__iterate(function(r,o,i){return t.call(e,r,o,i)?void 0:(n=!1,!1)}),n},filter:function(t,e){return Ie(this,ve(this,t,e,!0))},find:function(t,e,n){var r=this.findEntry(t,e);return r?r[1]:n},findEntry:function(t,e){var n;return this.__iterate(function(r,o,i){return t.call(e,r,o,i)?(n=[o,r],!1):void 0}),n},findLastEntry:function(t,e){return this.toSeq().reverse().findEntry(t,e)},forEach:function(t,e){return se(this.size),this.__iterate(e?t.bind(e):t)},join:function(t){se(this.size),t=void 0!==t?""+t:",";var e="",n=!0;return this.__iterate(function(r){n?n=!1:e+=t,e+=null!==r&&void 0!==r?r:""}),e},keys:function(){return this.__iterator(yr)},map:function(t,e){return Ie(this,he(this,t,e))},reduce:function(t,e,n){se(this.size);var r,o;return arguments.length<2?o=!0:r=e,this.__iterate(function(e,i,a){o?(o=!1,r=e):r=t.call(n,r,e,i,a)}),r},reduceRight:function(){var t=this.toKeyedSeq().reverse();return t.reduce.apply(t,arguments)},reverse:function(){return Ie(this,de(this,!0))},slice:function(t,e){return Ie(this,_e(this,t,e,!0))},some:function(t,e){return!this.every(Jn(t),e)},sort:function(t){return Ie(this,Oe(this,t))},values:function(){return this.__iterator(_r)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return void 0!==this.size?0===this.size:!this.some(function(){return!0})},count:function(t,e){return i(t?this.toSeq().filter(t,e):this)},countBy:function(t,e){return me(this,t,e)},equals:function(t){return Hn(this,t)},entrySeq:function(){var t=this;if(t._cache)return new R(t._cache);var e=t.toSeq().map(Gn).toIndexedSeq();return e.fromEntrySeq=function(){return t.toSeq()},e},filterNot:function(t,e){return this.filter(Jn(t),e)},findLast:function(t,e,n){return this.toKeyedSeq().reverse().find(t,e,n)},first:function(){return this.find(s)},flatMap:function(t,e){return Ie(this,Ne(this,t,e))},flatten:function(t){return Ie(this,we(this,t,!0))},fromEntrySeq:function(){return new le(this)},get:function(t,e){return this.find(function(e,n){return $(n,t)},void 0,e)},getIn:function(t,e){for(var n,r=this,o=Le(t);!(n=o.next()).done;){var i=n.value;if(r=r&&r.get?r.get(i,pr):pr,r===pr)return e}return r},groupBy:function(t,e){return ye(this,t,e)},has:function(t){return this.get(t,pr)!==pr},hasIn:function(t){return this.getIn(t,pr)!==pr},isSubset:function(t){return t="function"==typeof t.contains?t:f(t),this.every(function(e){return t.contains(e)})},isSuperset:function(t){return t.isSubset(this)},keySeq:function(){return this.toSeq().map($n).toIndexedSeq()},last:function(){return this.toSeq().reverse().first()},max:function(t){return Ce(this,t)},maxBy:function(t,e){return Ce(this,e,t)},min:function(t){return Ce(this,t?Qn(t):er)},minBy:function(t,e){return Ce(this,e?Qn(e):er,t)},rest:function(){return this.slice(1)},skip:function(t){return this.slice(Math.max(0,t))},skipLast:function(t){return Ie(this,this.toSeq().reverse().skip(t).reverse())},skipWhile:function(t,e){return Ie(this,Ee(this,t,e,!0))},skipUntil:function(t,e){return this.skipWhile(Jn(t),e)},sortBy:function(t,e){return Ie(this,Oe(this,e,t))},take:function(t){return this.slice(0,Math.max(0,t))},takeLast:function(t){return Ie(this,this.toSeq().reverse().take(t).reverse())},takeWhile:function(t,e){return Ie(this,ge(this,t,e))},takeUntil:function(t,e){return this.takeWhile(Jn(t),e)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=nr(this))}});var no=f.prototype;no[hr]=!0,no[wr]=no.values,no.__toJS=no.toArray,no.__toStringMapper=Zn,no.inspect=no.toSource=function(){return this.toString()},no.chain=no.flatMap,function(){try{Object.defineProperty(no,"length",{get:function(){if(!f.noLengthWarning){var t;try{throw new Error}catch(e){t=e.stack}if(-1===t.indexOf("_wrapObject"))return console&&console.warn&&console.warn("iterable.length has been deprecated, use iterable.size or iterable.count(). This warning will become a silent error in a future version. "+t),this.size}}})}catch(t){}}(),Yn(h,{flip:function(){return Ie(this,fe(this))},findKey:function(t,e){var n=this.findEntry(t,e);return n&&n[0]},findLastKey:function(t,e){return this.toSeq().reverse().findKey(t,e)},keyOf:function(t){return this.findKey(function(e){return $(e,t)})},lastKeyOf:function(t){return this.findLastKey(function(e){return $(e,t)})},mapEntries:function(t,e){var n=this,r=0;return Ie(this,this.toSeq().map(function(o,i){return t.call(e,[i,o],r++,n)}).fromEntrySeq())},mapKeys:function(t,e){var n=this;return Ie(this,this.toSeq().flip().map(function(r,o){return t.call(e,r,o,n)}).flip())}});var ro=h.prototype;ro[dr]=!0,ro[wr]=no.entries,ro.__toJS=no.toObject,ro.__toStringMapper=function(t,e){return e+": "+Zn(t)},Yn(d,{toKeyedSeq:function(){return new ue(this,!1)},filter:function(t,e){return Ie(this,ve(this,t,e,!1))},findIndex:function(t,e){var n=this.findEntry(t,e);return n?n[0]:-1},indexOf:function(t){var e=this.toKeyedSeq().keyOf(t);return void 0===e?-1:e},lastIndexOf:function(t){return this.toSeq().reverse().indexOf(t)},reverse:function(){return Ie(this,de(this,!1))},slice:function(t,e){return Ie(this,_e(this,t,e,!1))},splice:function(t,e){var n=arguments.length;if(e=Math.max(0|e,0),0===n||2===n&&!e)return this;t=c(t,this.size);var r=this.slice(0,t);return Ie(this,1===n?r:r.concat(o(arguments,2),this.slice(t+e)))},findLastIndex:function(t,e){var n=this.toKeyedSeq().findLastKey(t,e);return void 0===n?-1:n},first:function(){return this.get(0)},flatten:function(t){return Ie(this,we(this,t,!1))},get:function(t,e){return t=a(this,t),0>t||1/0===this.size||void 0!==this.size&&t>this.size?e:this.find(function(e,n){return n===t},void 0,e)},has:function(t){return t=a(this,t),t>=0&&(void 0!==this.size?1/0===this.size||t<this.size:-1!==this.indexOf(t))},interpose:function(t){return Ie(this,De(this,t))},interleave:function(){var t=[this].concat(o(arguments)),e=xe(this.toSeq(),M.of,t),n=e.flatten(!0);return e.size&&(n.size=e.size*t.length),Ie(this,n)},last:function(){return this.get(-1)},skipWhile:function(t,e){return Ie(this,Ee(this,t,e,!1))},zip:function(){var t=[this].concat(o(arguments));return Ie(this,xe(this,tr,t))},zipWith:function(t){var e=o(arguments);return e[0]=this,Ie(this,xe(this,t,e))}}),d.prototype[vr]=!0,d.prototype[mr]=!0,Yn(v,{get:function(t,e){return this.has(t)?t:e},contains:function(t){return this.has(t)},keySeq:function(){return this.valueSeq()}}),v.prototype.has=no.contains,Yn(k,h.prototype),Yn(M,d.prototype),Yn(T,v.prototype),Yn(K,h.prototype),Yn(X,d.prototype),Yn(Y,v.prototype);var oo={Iterable:f,Seq:I,Collection:H,Map:Ue,OrderedMap:Dn,List:ln,Stack:In,Set:Rn,OrderedSet:Vn,Record:qn,Range:Kn,Repeat:Xn,is:$,fromJS:G};return oo})},function(t){function e(t){return t?t.prototype&&"function"==typeof t.prototype.render?!0:t.type&&t.type.prototype&&"function"==typeof t.type.prototype.render?!0:!1:!1}t.exports=e},function(t){"use strict";function e(t,e){return t+e.charAt(0).toUpperCase()+e.substring(1)}var n={columnCount:!0,flex:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,strokeOpacity:!0},r=["Webkit","ms","Moz","O"];Object.keys(n).forEach(function(t){r.forEach(function(r){n[e(r,t)]=n[t]})});var o={background:{backgroundImage:!0,backgroundPosition:!0,backgroundRepeat:!0,backgroundColor:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0}},i={isUnitlessNumber:n,shorthandPropertyExpansions:o};t.exports=i},function(t,e,n){(function(e){"use strict";var r=n(60),o=n(5),i=n(164),a=n(168),s=n(174),u=n(85),c=n(6),p=u(function(t){return s(t)}),l="cssFloat";if(o.canUseDOM&&void 0===document.documentElement.style.cssFloat&&(l="styleFloat"),"production"!==e.env.NODE_ENV)var f={},h=function(t){f.hasOwnProperty(t)&&f[t]||(f[t]=!0,"production"!==e.env.NODE_ENV?c(!1,"Unsupported style property "+t+". Did you mean "+i(t)+"?"):null)};var d={createMarkupForStyles:function(t){var n="";for(var r in t)if(t.hasOwnProperty(r)){"production"!==e.env.NODE_ENV&&r.indexOf("-")>-1&&h(r);var o=t[r];null!=o&&(n+=p(r)+":",n+=a(r,o)+";")}return n||null},setValueForStyles:function(t,n){var o=t.style;for(var i in n)if(n.hasOwnProperty(i)){"production"!==e.env.NODE_ENV&&i.indexOf("-")>-1&&h(i);var s=a(i,n[i]);if("float"===i&&(i=l),s)o[i]=s;else{var u=r.shorthandPropertyExpansions[i];if(u)for(var c in u)o[c]="";else o[i]=""}}}};t.exports=d}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(){if(s)for(var t in u){var n=u[t],r=s.indexOf(t);if("production"!==e.env.NODE_ENV?a(r>-1,"EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.",t):a(r>-1),!c.plugins[r]){"production"!==e.env.NODE_ENV?a(n.extractEvents,"EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.",t):a(n.extractEvents),c.plugins[r]=n;var i=n.eventTypes;for(var p in i)"production"!==e.env.NODE_ENV?a(o(i[p],n,p),"EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.",p,t):a(o(i[p],n,p))}}}function o(t,n,r){"production"!==e.env.NODE_ENV?a(!c.eventNameDispatchConfigs.hasOwnProperty(r),"EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.",r):a(!c.eventNameDispatchConfigs.hasOwnProperty(r)),c.eventNameDispatchConfigs[r]=t;var o=t.phasedRegistrationNames;if(o){for(var s in o)if(o.hasOwnProperty(s)){var u=o[s];i(u,n,r)}return!0}return t.registrationName?(i(t.registrationName,n,r),!0):!1}function i(t,n,r){"production"!==e.env.NODE_ENV?a(!c.registrationNameModules[t],"EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.",t):a(!c.registrationNameModules[t]),c.registrationNameModules[t]=n,c.registrationNameDependencies[t]=n.eventTypes[r].dependencies}var a=n(2),s=null,u={},c={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},injectEventPluginOrder:function(t){"production"!==e.env.NODE_ENV?a(!s,"EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."):a(!s),s=Array.prototype.slice.call(t),r()},injectEventPluginsByName:function(t){var n=!1;for(var o in t)if(t.hasOwnProperty(o)){var i=t[o];u.hasOwnProperty(o)&&u[o]===i||("production"!==e.env.NODE_ENV?a(!u[o],"EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.",o):a(!u[o]),u[o]=i,n=!0)}n&&r()},getPluginModuleForEvent:function(t){var e=t.dispatchConfig;if(e.registrationName)return c.registrationNameModules[e.registrationName]||null;for(var n in e.phasedRegistrationNames)if(e.phasedRegistrationNames.hasOwnProperty(n)){var r=c.registrationNameModules[e.phasedRegistrationNames[n]];if(r)return r}return null},_resetEventPlugins:function(){s=null;for(var t in u)u.hasOwnProperty(t)&&delete u[t];c.plugins.length=0;var e=c.eventNameDispatchConfigs;for(var n in e)e.hasOwnProperty(n)&&delete e[n];var r=c.registrationNameModules;for(var o in r)r.hasOwnProperty(o)&&delete r[o]}};t.exports=c}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(t){t.remove()}var o=n(22),i=n(48),a=n(51),s=n(2),u={trapBubbledEvent:function(t,n){"production"!==e.env.NODE_ENV?s(this.isMounted(),"Must be mounted to trap events"):s(this.isMounted());var r=o.trapBubbledEvent(t,n,this.getDOMNode());this._localEventListeners=i(this._localEventListeners,r)},componentWillUnmount:function(){this._localEventListeners&&a(this._localEventListeners,r)}};t.exports=u}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(t){t&&("production"!==e.env.NODE_ENV?_(null==t.children||null==t.dangerouslySetInnerHTML,"Can only set one of `children` or `props.dangerouslySetInnerHTML`."):_(null==t.children||null==t.dangerouslySetInnerHTML),"production"!==e.env.NODE_ENV&&t.contentEditable&&null!=t.children&&console.warn("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."),"production"!==e.env.NODE_ENV?_(null==t.style||"object"==typeof t.style,"The `style` prop expects a mapping from style properties to values, not a string."):_(null==t.style||"object"==typeof t.style))}function o(t,n,r,o){"production"!==e.env.NODE_ENV&&("onScroll"!==n||g("scroll",!0)||(b("react_no_scroll_event"),console.warn("This browser doesn't support the `onScroll` event")));var i=h.findReactContainerForID(t);if(i){var a=i.nodeType===S?i.ownerDocument:i;N(n,a)}o.getPutListenerQueue().enqueuePutListener(t,n,r)}function i(t){M.call(k,t)||("production"!==e.env.NODE_ENV?_(I.test(t),"Invalid tag: %s",t):_(I.test(t)),k[t]=!0)}function a(t){i(t),this._tag=t,this.tagName=t.toUpperCase()}var s=n(61),u=n(17),c=n(20),p=n(10),l=n(23),f=n(22),h=n(7),d=n(66),v=n(11),m=n(3),y=n(50),_=n(2),g=n(56),E=n(14),b=n(38),w=f.deleteListener,N=f.listenTo,D=f.registrationNameModules,O={string:!0,number:!0},C=E({style:null}),S=1,x={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},I=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,k={},M={}.hasOwnProperty;a.displayName="ReactDOMComponent",a.Mixin={mountComponent:v.measure("ReactDOMComponent","mountComponent",function(t,e,n){l.Mixin.mountComponent.call(this,t,e,n),r(this.props);var o=x[this._tag]?"":"</"+this._tag+">";return this._createOpenTagMarkupAndPutListeners(e)+this._createContentMarkup(e)+o}),_createOpenTagMarkupAndPutListeners:function(t){var e=this.props,n="<"+this._tag;for(var r in e)if(e.hasOwnProperty(r)){var i=e[r];if(null!=i)if(D.hasOwnProperty(r))o(this._rootNodeID,r,i,t);else{r===C&&(i&&(i=e.style=m({},e.style)),i=s.createMarkupForStyles(i));var a=c.createMarkupForProperty(r,i);a&&(n+=" "+a)}}if(t.renderToStaticMarkup)return n+">";var u=c.createMarkupForID(this._rootNodeID);return n+" "+u+">"},_createContentMarkup:function(t){var e=this.props.dangerouslySetInnerHTML;if(null!=e){if(null!=e.__html)return e.__html}else{var n=O[typeof this.props.children]?this.props.children:null,r=null!=n?null:this.props.children;
if(null!=n)return y(n);if(null!=r){var o=this.mountChildren(r,t);return o.join("")}}return""},receiveComponent:function(t,e){(t!==this._currentElement||null==t._owner)&&l.Mixin.receiveComponent.call(this,t,e)},updateComponent:v.measure("ReactDOMComponent","updateComponent",function(t,e){r(this._currentElement.props),l.Mixin.updateComponent.call(this,t,e),this._updateDOMProperties(e.props,t),this._updateDOMChildren(e.props,t)}),_updateDOMProperties:function(t,e){var n,r,i,a=this.props;for(n in t)if(!a.hasOwnProperty(n)&&t.hasOwnProperty(n))if(n===C){var s=t[n];for(r in s)s.hasOwnProperty(r)&&(i=i||{},i[r]="")}else D.hasOwnProperty(n)?w(this._rootNodeID,n):(u.isStandardName[n]||u.isCustomAttribute(n))&&l.BackendIDOperations.deletePropertyByID(this._rootNodeID,n);for(n in a){var c=a[n],p=t[n];if(a.hasOwnProperty(n)&&c!==p)if(n===C)if(c&&(c=a.style=m({},c)),p){for(r in p)!p.hasOwnProperty(r)||c&&c.hasOwnProperty(r)||(i=i||{},i[r]="");for(r in c)c.hasOwnProperty(r)&&p[r]!==c[r]&&(i=i||{},i[r]=c[r])}else i=c;else D.hasOwnProperty(n)?o(this._rootNodeID,n,c,e):(u.isStandardName[n]||u.isCustomAttribute(n))&&l.BackendIDOperations.updatePropertyByID(this._rootNodeID,n,c)}i&&l.BackendIDOperations.updateStylesByID(this._rootNodeID,i)},_updateDOMChildren:function(t,e){var n=this.props,r=O[typeof t.children]?t.children:null,o=O[typeof n.children]?n.children:null,i=t.dangerouslySetInnerHTML&&t.dangerouslySetInnerHTML.__html,a=n.dangerouslySetInnerHTML&&n.dangerouslySetInnerHTML.__html,s=null!=r?null:t.children,u=null!=o?null:n.children,c=null!=r||null!=i,p=null!=o||null!=a;null!=s&&null==u?this.updateChildren(null,e):c&&!p&&this.updateTextContent(""),null!=o?r!==o&&this.updateTextContent(""+o):null!=a?i!==a&&l.BackendIDOperations.updateInnerHTMLByID(this._rootNodeID,a):null!=u&&this.updateChildren(u,e)},unmountComponent:function(){this.unmountChildren(),f.deleteAllListeners(this._rootNodeID),l.Mixin.unmountComponent.call(this)}},m(a.prototype,l.Mixin,a.Mixin,d.Mixin,p),t.exports=a}).call(e,n(1))},function(t,e,n){"use strict";var r=n(162),o={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(t){var e=r(t);return t.replace(">"," "+o.CHECKSUM_ATTR_NAME+'="'+e+'">')},canReuseMarkup:function(t,e){var n=e.getAttribute(o.CHECKSUM_ATTR_NAME);n=n&&parseInt(n,10);var i=r(t);return i===n}};t.exports=o},function(t,e,n){"use strict";function r(t,e,n){v.push({parentID:t,parentNode:null,type:p.INSERT_MARKUP,markupIndex:m.push(e)-1,textContent:null,fromIndex:null,toIndex:n})}function o(t,e,n){v.push({parentID:t,parentNode:null,type:p.MOVE_EXISTING,markupIndex:null,textContent:null,fromIndex:e,toIndex:n})}function i(t,e){v.push({parentID:t,parentNode:null,type:p.REMOVE_NODE,markupIndex:null,textContent:null,fromIndex:e,toIndex:null})}function a(t,e){v.push({parentID:t,parentNode:null,type:p.TEXT_CONTENT,markupIndex:null,textContent:e,fromIndex:null,toIndex:null})}function s(){v.length&&(c.BackendIDOperations.dangerouslyProcessChildrenUpdates(v,m),u())}function u(){v.length=0,m.length=0}var c=n(23),p=n(67),l=n(170),f=n(37),h=n(57),d=0,v=[],m=[],y={Mixin:{mountChildren:function(t,e){var n=l(t),r=[],o=0;this._renderedChildren=n;for(var i in n){var a=n[i];if(n.hasOwnProperty(i)){var s=f(a,null);n[i]=s;var u=this._rootNodeID+i,c=s.mountComponent(u,e,this._mountDepth+1);s._mountIndex=o,r.push(c),o++}}return r},updateTextContent:function(t){d++;var e=!0;try{var n=this._renderedChildren;for(var r in n)n.hasOwnProperty(r)&&this._unmountChildByName(n[r],r);this.setTextContent(t),e=!1}finally{d--,d||(e?u():s())}},updateChildren:function(t,e){d++;var n=!0;try{this._updateChildren(t,e),n=!1}finally{d--,d||(n?u():s())}},_updateChildren:function(t,e){var n=l(t),r=this._renderedChildren;if(n||r){var o,i=0,a=0;for(o in n)if(n.hasOwnProperty(o)){var s=r&&r[o],u=s&&s._currentElement,c=n[o];if(h(u,c))this.moveChild(s,a,i),i=Math.max(s._mountIndex,i),s.receiveComponent(c,e),s._mountIndex=a;else{s&&(i=Math.max(s._mountIndex,i),this._unmountChildByName(s,o));var p=f(c,null);this._mountChildByNameAtIndex(p,o,a,e)}a++}for(o in r)!r.hasOwnProperty(o)||n&&n[o]||this._unmountChildByName(r[o],o)}},unmountChildren:function(){var t=this._renderedChildren;for(var e in t){var n=t[e];n.unmountComponent&&n.unmountComponent()}this._renderedChildren=null},moveChild:function(t,e,n){t._mountIndex<n&&o(this._rootNodeID,t._mountIndex,e)},createChild:function(t,e){r(this._rootNodeID,e,t._mountIndex)},removeChild:function(t){i(this._rootNodeID,t._mountIndex)},setTextContent:function(t){a(this._rootNodeID,t)},_mountChildByNameAtIndex:function(t,e,n,r){var o=this._rootNodeID+e,i=t.mountComponent(o,r,this._mountDepth+1);t._mountIndex=n,this.createChild(t,i),this._renderedChildren=this._renderedChildren||{},this._renderedChildren[e]=t},_unmountChildByName:function(t,e){this.removeChild(t),t._mountIndex=null,t.unmountComponent(),delete this._renderedChildren[e]}}};t.exports=y},function(t,e,n){"use strict";var r=n(25),o=r({INSERT_MARKUP:null,MOVE_EXISTING:null,REMOVE_NODE:null,TEXT_CONTENT:null});t.exports=o},function(t,e,n){(function(e){"use strict";function r(t,n,r){var o=s[t];return null==o?("production"!==e.env.NODE_ENV?i(a,"There is no registered component for the tag %s",t):i(a),new a(t,n)):r===t?("production"!==e.env.NODE_ENV?i(a,"There is no registered component for the tag %s",t):i(a),new a(t,n)):new o.type(n)}var o=n(3),i=n(2),a=null,s={},u={injectGenericComponentClass:function(t){a=t},injectComponentClasses:function(t){o(s,t)}},c={createInstanceForTag:r,injection:u};t.exports=c}).call(e,n(1))},function(t,e,n){(function(e){"use strict";var r=n(169),o=n(2),i={isValidOwner:function(t){return!(!t||"function"!=typeof t.attachRef||"function"!=typeof t.detachRef)},addComponentAsRefTo:function(t,n,r){"production"!==e.env.NODE_ENV?o(i.isValidOwner(r),"addComponentAsRefTo(...): Only a ReactOwner can have refs. This usually means that you're trying to add a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."):o(i.isValidOwner(r)),r.attachRef(n,t)},removeComponentAsRefFrom:function(t,n,r){"production"!==e.env.NODE_ENV?o(i.isValidOwner(r),"removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This usually means that you're trying to remove a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."):o(i.isValidOwner(r)),r.refs[n]===t&&r.detachRef(n)},Mixin:{construct:function(){this.refs=r},attachRef:function(t,n){"production"!==e.env.NODE_ENV?o(n.isOwnedBy(this),"attachRef(%s, ...): Only a component's owner can store a ref to it.",t):o(n.isOwnedBy(this));var i=this.refs===r?this.refs={}:this.refs;i[t]=n},detachRef:function(t){delete this.refs[t]}}};t.exports=i}).call(e,n(1))},function(t,e,n){(function(e){"use strict";var n={};"production"!==e.env.NODE_ENV&&(n={prop:"prop",context:"context",childContext:"child context"}),t.exports=n}).call(e,n(1))},function(t,e,n){"use strict";var r=n(25),o=r({prop:null,context:null,childContext:null});t.exports=o},function(t,e,n){"use strict";function r(t){function e(e,n,r,o,i){if(o=o||b,null!=n[r])return t(n,r,o,i);var a=_[i];return e?new Error("Required "+a+" `"+r+"` was not specified in "+("`"+o+"`.")):void 0}var n=e.bind(null,!1);return n.isRequired=e.bind(null,!0),n}function o(t){function e(e,n,r,o){var i=e[n],a=v(i);if(a!==t){var s=_[o],u=m(i);return new Error("Invalid "+s+" `"+n+"` of type `"+u+"` "+("supplied to `"+r+"`, expected `"+t+"`."))}}return r(e)}function i(){return r(E.thatReturns())}function a(t){function e(e,n,r,o){var i=e[n];if(!Array.isArray(i)){var a=_[o],s=v(i);return new Error("Invalid "+a+" `"+n+"` of type "+("`"+s+"` supplied to `"+r+"`, expected an array."))}for(var u=0;u<i.length;u++){var c=t(i,u,r,o);if(c instanceof Error)return c}}return r(e)}function s(){function t(t,e,n,r){if(!y.isValidElement(t[e])){var o=_[r];return new Error("Invalid "+o+" `"+e+"` supplied to "+("`"+n+"`, expected a ReactElement."))}}return r(t)}function u(t){function e(e,n,r,o){if(!(e[n]instanceof t)){var i=_[o],a=t.name||b;return new Error("Invalid "+i+" `"+n+"` supplied to "+("`"+r+"`, expected instance of `"+a+"`."))}}return r(e)}function c(t){function e(e,n,r,o){for(var i=e[n],a=0;a<t.length;a++)if(i===t[a])return;var s=_[o],u=JSON.stringify(t);return new Error("Invalid "+s+" `"+n+"` of value `"+i+"` "+("supplied to `"+r+"`, expected one of "+u+"."))}return r(e)}function p(t){function e(e,n,r,o){var i=e[n],a=v(i);if("object"!==a){var s=_[o];return new Error("Invalid "+s+" `"+n+"` of type "+("`"+a+"` supplied to `"+r+"`, expected an object."))}for(var u in i)if(i.hasOwnProperty(u)){var c=t(i,u,r,o);if(c instanceof Error)return c}}return r(e)}function l(t){function e(e,n,r,o){for(var i=0;i<t.length;i++){var a=t[i];if(null==a(e,n,r,o))return}var s=_[o];return new Error("Invalid "+s+" `"+n+"` supplied to "+("`"+r+"`."))}return r(e)}function f(){function t(t,e,n,r){if(!d(t[e])){var o=_[r];return new Error("Invalid "+o+" `"+e+"` supplied to "+("`"+n+"`, expected a ReactNode."))}}return r(t)}function h(t){function e(e,n,r,o){var i=e[n],a=v(i);if("object"!==a){var s=_[o];return new Error("Invalid "+s+" `"+n+"` of type `"+a+"` "+("supplied to `"+r+"`, expected `object`."))}for(var u in t){var c=t[u];if(c){var p=c(i,u,r,o);if(p)return p}}}return r(e,"expected `object`")}function d(t){switch(typeof t){case"number":case"string":return!0;case"boolean":return!t;case"object":if(Array.isArray(t))return t.every(d);if(y.isValidElement(t))return!0;for(var e in t)if(!d(t[e]))return!1;return!0;default:return!1}}function v(t){var e=typeof t;return Array.isArray(t)?"array":t instanceof RegExp?"object":e}function m(t){var e=v(t);if("object"===e){if(t instanceof Date)return"date";if(t instanceof RegExp)return"regexp"}return e}var y=n(4),_=n(70),g=n(49),E=n(13),b="<<anonymous>>",w=s(),N=f(),D={array:o("array"),bool:o("boolean"),func:o("function"),number:o("number"),object:o("object"),string:o("string"),any:i(),arrayOf:a,element:w,instanceOf:u,node:N,objectOf:p,oneOf:c,oneOfType:l,shape:h,component:g("React.PropTypes","component","element",this,w),renderable:g("React.PropTypes","renderable","node",this,N)};t.exports=D},function(t,e,n){"use strict";function r(){this.listenersToPut=[]}var o=n(15),i=n(22),a=n(3);a(r.prototype,{enqueuePutListener:function(t,e,n){this.listenersToPut.push({rootNodeID:t,propKey:e,propValue:n})},putListeners:function(){for(var t=0;t<this.listenersToPut.length;t++){var e=this.listenersToPut[t];i.putListener(e.rootNodeID,e.propKey,e.propValue)}},reset:function(){this.listenersToPut.length=0},destructor:function(){this.reset()}}),o.addPoolingTo(r),t.exports=r},function(t){"use strict";var e={injectCreateReactRootIndex:function(t){n.createReactRootIndex=t}},n={createReactRootIndex:null,injection:e};t.exports=n},function(t,e,n){"use strict";var r=n(20),o=n(23),i=n(4),a=n(3),s=n(50),u=function(){};a(u.prototype,o.Mixin,{mountComponent:function(t,e,n){o.Mixin.mountComponent.call(this,t,e,n);var i=s(this.props);return e.renderToStaticMarkup?i:"<span "+r.createMarkupForID(t)+">"+i+"</span>"},receiveComponent:function(t){var e=t.props;e!==this.props&&(this.props=e,o.BackendIDOperations.updateTextContentByID(this._rootNodeID,e))}});var c=function(t){return new i(u,null,null,null,null,t)};c.type=u,t.exports=c},function(t,e,n){"use strict";var r=n(82),o={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(){var t=r(window);o.currentScrollLeft=t.x,o.currentScrollTop=t.y}};t.exports=o},function(t,e,n){function r(t,e){return t&&e?t===e?!0:o(t)?!1:o(e)?r(t,e.parentNode):t.contains?t.contains(e):t.compareDocumentPosition?!!(16&t.compareDocumentPosition(e)):!1:!1}var o=n(176);t.exports=r},function(t){"use strict";function e(t){try{t.focus()}catch(e){}}t.exports=e},function(t){function e(){try{return document.activeElement||document.body}catch(t){return document.body}}t.exports=e},function(t,e,n){(function(e){function r(t){return"production"!==e.env.NODE_ENV?i(!!a,"Markup wrapping node not initialized"):i(!!a),f.hasOwnProperty(t)||(t="*"),s.hasOwnProperty(t)||(a.innerHTML="*"===t?"<link />":"<"+t+"></"+t+">",s[t]=!a.firstChild),s[t]?f[t]:null}var o=n(5),i=n(2),a=o.canUseDOM?document.createElement("div"):null,s={circle:!0,defs:!0,ellipse:!0,g:!0,line:!0,linearGradient:!0,path:!0,polygon:!0,polyline:!0,radialGradient:!0,rect:!0,stop:!0,text:!0},u=[1,'<select multiple="true">',"</select>"],c=[1,"<table>","</table>"],p=[3,"<table><tbody><tr>","</tr></tbody></table>"],l=[1,"<svg>","</svg>"],f={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:u,option:u,caption:c,colgroup:c,tbody:c,tfoot:c,thead:c,td:p,th:p,circle:l,defs:l,ellipse:l,g:l,line:l,linearGradient:l,path:l,polygon:l,polyline:l,radialGradient:l,rect:l,stop:l,text:l};t.exports=r}).call(e,n(1))},function(t){"use strict";function e(t){return t?t.nodeType===n?t.documentElement:t.firstChild:null}var n=9;t.exports=e},function(t){"use strict";function e(t){return t===window?{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}:{x:t.scrollLeft,y:t.scrollTop}}t.exports=e},function(t){"use strict";function e(t){return t&&("INPUT"===t.nodeName&&n[t.type]||"TEXTAREA"===t.nodeName)}var n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};t.exports=e},function(t){"use strict";function e(t,e,r){if(!t)return null;var o={};for(var i in t)n.call(t,i)&&(o[i]=e.call(r,t[i],i,t));return o}var n=Object.prototype.hasOwnProperty;t.exports=e},function(t){"use strict";function e(t){var e={};return function(n){return e.hasOwnProperty(n)?e[n]:e[n]=t.call(this,n)}}t.exports=e},function(t,e,n){"use strict";var r=n(5),o=/^[ \r\n\t\f]/,i=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,a=function(t,e){t.innerHTML=e};if(r.canUseDOM){var s=document.createElement("div");s.innerHTML=" ",""===s.innerHTML&&(a=function(t,e){if(t.parentNode&&t.parentNode.replaceChild(t,t),o.test(e)||"<"===e[0]&&i.test(e)){t.innerHTML="﻿"+e;var n=t.firstChild;1===n.data.length?t.removeChild(n):n.deleteData(0,1)}else t.innerHTML=e})}t.exports=a},function(t,e,n){(function(e){"use strict";function r(t){return h[t]}function o(t,e){return t&&null!=t.key?a(t.key):e.toString(36)}function i(t){return(""+t).replace(d,r)}function a(t){return"$"+i(t)}function s(t,e,n){return null==t?0:v(t,"",0,e,n)}var u=n(4),c=n(24),p=n(2),l=c.SEPARATOR,f=":",h={"=":"=0",".":"=1",":":"=2"},d=/[=.:]/g,v=function(t,n,r,i,s){var c,h,d=0;if(Array.isArray(t))for(var m=0;m<t.length;m++){var y=t[m];c=n+(n?f:l)+o(y,m),h=r+d,d+=v(y,c,h,i,s)}else{var _=typeof t,g=""===n,E=g?l+o(t,0):n;if(null==t||"boolean"===_)i(s,null,E,r),d=1;else if("string"===_||"number"===_||u.isValidElement(t))i(s,t,E,r),d=1;else if("object"===_){"production"!==e.env.NODE_ENV?p(!t||1!==t.nodeType,"traverseAllChildren(...): Encountered an invalid child; DOM elements are not valid children of React components."):p(!t||1!==t.nodeType);for(var b in t)t.hasOwnProperty(b)&&(c=n+(n?f:l)+a(b)+f+o(t[b],0),h=r+d,d+=v(t[b],c,h,i,s))}}return d};t.exports=s}).call(e,n(1))},function(t){t.exports=function(){var t=[];return t.toString=function(){for(var t=[],e=0;e<this.length;e++){var n=this[e];t.push(n[2]?"@media "+n[2]+"{"+n[1]+"}":n[1])}return t.join("")},t}},function(t,e,n){function r(){return this instanceof r?void(this.instances={}):new r}function o(t,e){if("object"==typeof e.key&&(e.data=e.key,e.key=void 0),e.key&&t.instances[e.key])return t.instances[e.key];var n=new i(e);return t.instances[n.key]=n,n}var i=n(93);r.prototype.get=function(t,e){return o(this,{key:t,data:e})},r.prototype.clear=function(){this.instances={}},r.prototype.remove=function(t){return delete this.instances[t]},r.prototype.withHistory=function(t,e){return o(this,{key:t,data:e,history:!0})};var a=new r;t.exports=function(t,e){return o(a,{key:t,data:e})},t.exports.withHistory=function(t,e){return o(a,{key:t,data:e,history:!0})},t.exports.Structure=i,t.exports.Immstruct=r,t.exports.clear=a.clear.bind(a),t.exports.remove=a.remove.bind(a),Object.defineProperty(t.exports,"instances",{get:function(){return a.instances},enumerable:!0,configurable:!0})},function(t){"use strict";function e(t,e,n){this.fn=t,this.context=e,this.once=n||!1}function n(){}n.prototype._events=void 0,n.prototype.listeners=function(t){if(!this._events||!this._events[t])return[];if(this._events[t].fn)return[this._events[t].fn];for(var e=0,n=this._events[t].length,r=new Array(n);n>e;e++)r[e]=this._events[t][e].fn;return r},n.prototype.emit=function(t,e,n,r,o,i){if(!this._events||!this._events[t])return!1;var a,s,u=this._events[t],c=arguments.length;if("function"==typeof u.fn){switch(u.once&&this.removeListener(t,u.fn,!0),c){case 1:return u.fn.call(u.context),!0;case 2:return u.fn.call(u.context,e),!0;case 3:return u.fn.call(u.context,e,n),!0;case 4:return u.fn.call(u.context,e,n,r),!0;case 5:return u.fn.call(u.context,e,n,r,o),!0;case 6:return u.fn.call(u.context,e,n,r,o,i),!0}for(s=1,a=new Array(c-1);c>s;s++)a[s-1]=arguments[s];u.fn.apply(u.context,a)}else{var p,l=u.length;for(s=0;l>s;s++)switch(u[s].once&&this.removeListener(t,u[s].fn,!0),c){case 1:u[s].fn.call(u[s].context);break;case 2:u[s].fn.call(u[s].context,e);break;case 3:u[s].fn.call(u[s].context,e,n);break;default:if(!a)for(p=1,a=new Array(c-1);c>p;p++)a[p-1]=arguments[p];u[s].fn.apply(u[s].context,a)}}return!0},n.prototype.on=function(t,n,r){var o=new e(n,r||this);return this._events||(this._events={}),this._events[t]?this._events[t].fn?this._events[t]=[this._events[t],o]:this._events[t].push(o):this._events[t]=o,this},n.prototype.once=function(t,n,r){var o=new e(n,r||this,!0);return this._events||(this._events={}),this._events[t]?this._events[t].fn?this._events[t]=[this._events[t],o]:this._events[t].push(o):this._events[t]=o,this},n.prototype.removeListener=function(t,e,n){if(!this._events||!this._events[t])return this;var r=this._events[t],o=[];if(e&&(r.fn&&(r.fn!==e||n&&!r.once)&&o.push(r),!r.fn))for(var i=0,a=r.length;a>i;i++)(r[i].fn!==e||n&&!r[i].once)&&o.push(r[i]);return o.length?this._events[t]=1===o.length?o[0]:o:delete this._events[t],this},n.prototype.removeAllListeners=function(t){return this._events?(t?delete this._events[t]:this._events={},this):this},n.prototype.off=n.prototype.removeListener,n.prototype.addListener=n.prototype.on,n.prototype.setMaxListeners=function(){return this},n.EventEmitter=n,n.EventEmitter2=n,n.EventEmitter3=n,t.exports=n},function(t,e,n){function r(t,e,n){return 1===arguments.length?e=[]:"function"==typeof e?(n=e,e=[]):e=f(e),a(t,e,n)}function o(t,e,n,r){this.size=r,this._rootData=t,this._keyPath=e,this._onChange=n}function i(t,e,n,r){this.size=r,this._rootData=t,this._keyPath=e,this._onChange=n}function a(t,e,n,r){arguments.length<4&&(r=t.getIn(e));var a=r&&r.size,s=d.isIndexed(r)?i:o;return new s(t,e,n,a)}function s(t,e,n){return d.isIterable(n)?u(t,e,n):n}function u(t,e,n){return a(t._rootData,p(t._keyPath,e),t._onChange,n)}function c(t,e,n){var r=arguments.length>2,o=t._rootData.updateIn(t._keyPath,r?y():void 0,e),i=t._keyPath||[],s=t._onChange&&t._onChange.call(void 0,o,t._rootData,r?p(i,n):i);return void 0!==s&&(o=s),a(o,t._keyPath,t._onChange)}function p(t,e){return t.concat(l(e))}function l(t){return Array.isArray(t)?t:h.Iterable(t).toArray()}function f(t){return Array.isArray(t)?t:d.isIterable(t)?t.toArray():[t]}var h=n(58),d=h.Iterable,v=d.Iterator,m=h.Seq,y=h.Map,_=Object.create(m.Keyed.prototype),g=Object.create(m.Indexed.prototype);_.constructor=o,g.constructor=i,_.toString=function(){return this.__toString("Cursor {","}")},g.toString=function(){return this.__toString("Cursor [","]")},_.deref=_.valueOf=g.deref=g.valueOf=function(t){return this._rootData.getIn(this._keyPath,t)},_.get=g.get=function(t,e){return this.getIn([t],e)},_.getIn=g.getIn=function(t,e){if(t=l(t),0===t.length)return this;var n=this._rootData.getIn(p(this._keyPath,t),E);return n===E?e:s(this,t,n)},g.set=_.set=function(t,e){return c(this,function(n){return n.set(t,e)},[t])},g.setIn=_.setIn=y.prototype.setIn,_.remove=_["delete"]=g.remove=g["delete"]=function(t){return c(this,function(e){return e.remove(t)},[t])},g.removeIn=g.deleteIn=_.removeIn=_.deleteIn=y.prototype.deleteIn,_.clear=g.clear=function(){return c(this,function(t){return t.clear()})},g.update=_.update=function(t,e,n){return 1===arguments.length?c(this,t):this.updateIn([t],e,n)},g.updateIn=_.updateIn=function(t,e,n){return c(this,function(r){return r.updateIn(t,e,n)},t)},g.merge=_.merge=function(){var t=arguments;return c(this,function(e){return e.merge.apply(e,t)})},g.mergeWith=_.mergeWith=function(){var t=arguments;return c(this,function(e){return e.mergeWith.apply(e,t)})},g.mergeIn=_.mergeIn=y.prototype.mergeIn,g.mergeDeep=_.mergeDeep=function(){var t=arguments;return c(this,function(e){return e.mergeDeep.apply(e,t)})},g.mergeDeepWith=_.mergeDeepWith=function(){var t=arguments;return c(this,function(e){return e.mergeDeepWith.apply(e,t)})},g.mergeDeepIn=_.mergeDeepIn=y.prototype.mergeDeepIn,_.withMutations=g.withMutations=function(t){return c(this,function(e){return(e||y()).withMutations(t)})},_.cursor=g.cursor=function(t){return t=f(t),0===t.length?this:u(this,t)},_.__iterate=g.__iterate=function(t,e){var n=this,r=n.deref();return r&&r.__iterate?r.__iterate(function(e,r){return t(s(n,[r],e),r,n)},e):0},_.__iterator=g.__iterator=function(t,e){var n=this.deref(),r=this,o=n&&n.__iterator&&n.__iterator(v.ENTRIES,e);return new v(function(){if(!o)return{value:void 0,done:!0};var e=o.next();if(e.done)return e;var n=e.value,i=n[0],a=s(r,[i],n[1]);return{value:t===v.KEYS?i:t===v.VALUES?a:[i,a],done:!1}})},o.prototype=_,i.prototype=g;var E={};e.from=r},function(t){t.exports="function"==typeof Object.create?function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){function r(t){var e=this;return t=t||{},this instanceof r?(this.key=t.key||E.generateRandomKey(),this.current=t.data,d(this.current)&&this.current||(this.current=m.fromJS(this.current||{})),t.history&&(this.history=m.List.of(this.current),this._currentRevision=0),this._pathListeners=[],this.on("swap",function(t,n,r){l(e._pathListeners,p(r)).forEach(function(e){e.forEach(function(e){"function"==typeof e&&e(t,n,r)})})}),void _.call(this,arguments)):new r(t)}function o(t,e){return function(n,r){var o=e.apply(e,arguments);return t.history&&n!==r?(t.history=t.history.take(++t._currentRevision).push(t.current),o):o}}function i(t,e){return function(n,r,o){var i=e.apply(e,arguments);return n===r?i:(t.emit("swap",i,r,o),b(t,i,r,o),i)}}function a(t,e){return function(n,r,o){var i=e.apply(e,arguments);if(n===r)return i;var a=u(n,r,o);return a.eventName&&t.emit.apply(t,[a.eventName].concat(a.arguments)),i}}function s(t,e,n,r){n&&n.forEach(function(n){if(!r||n!==r){var o=t._pathListeners[e].indexOf(n);t._pathListeners[e].splice(o,1)}})}function u(t,e,n){var r,o,i=e&&e.getIn(n),a=t&&t.getIn(n),s=e&&c(e,n),u=t&&c(t,n);return s&&!u?(o="delete",r=[n,i]):s&&u?(o="change",r=[n,a,i]):!s&&u&&(o="add",r=[n,a]),{eventName:o,arguments:r}}function c(t,e){return t.hasIn?t.hasIn(e):t.getIn(e,w)!==w}function p(t){var e="global";return t&&t.length?[e].concat(t).join("|"):e}function l(t,e){var n=[];for(var r in t){if(!t.hasOwnProperty(r))return;0===e.indexOf(r)&&n.push(t[r])}return n}function f(t,e){return function(n,r,o){var i=u(n,r,o);if(i.eventName===t)return e(n,r,o)}}function h(t){return t&&"function"==typeof t.deref}function d(t){return v("Iterable","isIterable",t)||v("Seq","isSeq",t)||v("Map","isMap",t)||v("OrderedMap","isOrderedMap",t)||v("List","isList",t)||v("Stack","isStack",t)||v("Set","isSet",t)}function v(t,e,n){return m[t]&&m[t][e]&&m[t][e](n)}var m=n(58),y=n(91),_=n(90).EventEmitter,g=n(92),E=n(94);g(r,_),t.exports=r,r.prototype.cursor=function(t){var e=this;if(t=t||[],!this.current)throw new Error("No structure loaded.");var n=function(t,n,r){return e.current=e.current===n?t:c(t,r)?e.current.setIn(r,t.getIn(r)):e.current.removeIn(r)};return n=o(this,n),n=i(this,n),n=a(this,n),y.from(e.current,t,n)},r.prototype.reference=function(t){h(t)&&t._keyPath&&(t=t._keyPath);var e=this,n=p(t),r=e._pathListeners[n],o=this.cursor(t),i=function(){o=e.cursor(t)},a=[i];return this._pathListeners[n]=r?r.concat(i):a,{observe:function(t,r){return"function"==typeof t&&(r=t,t=void 0),this._dead||"function"!=typeof r?void 0:(t&&"swap"!==t&&(r=f(t,r)),e._pathListeners[n]=e._pathListeners[n].concat(r),a=a.concat(r),function(){var t=e._pathListeners[n].indexOf(r),o=a.indexOf(r);a[o]===r&&a.splice(o,1),e._pathListeners[n]&&e._pathListeners[n][t]===r&&e._pathListeners[n].splice(t,1)})},cursor:function(t){return t?o.cursor(t):o},unobserveAll:function(){s(e,n,a,i),a=[i]},destroy:function(){s(e,n,a),a=void 0,o=void 0,this._dead=!0,this.observe=void 0,this.unobserveAll=void 0,this.cursor=void 0,this.destroy=void 0}}},r.prototype.forceHasSwapped=function(t,e,n){this.emit("swap",t||this.current,e,n),b(this,t||this.current,e,n)},r.prototype.undo=function(t){return this._currentRevision-=t||1,this._currentRevision<0&&(this._currentRevision=0),this.current=this.history.get(this._currentRevision),this.current},r.prototype.redo=function(t){return this._currentRevision+=t||1,this._currentRevision>this.history.count()-1&&(this._currentRevision=this.history.count()-1),this.current=this.history.get(this._currentRevision),this.current},r.prototype.undoUntil=function(t){return this._currentRevision=this.history.indexOf(t),this.current=t,t};var b=function(){var t=!1;return"function"!=typeof requestAnimationFrame?function(){}:function(e,n,r){t||(t=!0,requestAnimationFrame(function(){t=!1,e.emit("next-animation-frame",n,r)}))}}(),w={}},function(t){t.exports.generateRandomKey=function(t){return t=t||10,Math.random().toString(36).substring(2).substring(0,t)}},function(t){!function(e,n){t.exports=n()}(this,function(){"use strict";function t(t,e){e&&(t.prototype=Object.create(e.prototype)),t.prototype.constructor=t}function e(t){return t.value=!1,t}function n(t){t&&(t.value=!0)}function r(){}function o(t,e){e=e||0;for(var n=Math.max(0,t.length-e),r=new Array(n),o=0;n>o;o++)r[o]=t[o+e];return r}function i(t){return void 0===t.size&&(t.size=t.__iterate(s)),t.size}function a(t,e){return e>=0?+e:i(t)+ +e}function s(){return!0}function u(t,e,n){return(0===t||void 0!==n&&-n>=t)&&(void 0===e||void 0!==n&&e>=n)}function c(t,e){return l(t,e,0)}function p(t,e){return l(t,e,e)}function l(t,e,n){return void 0===t?n:0>t?Math.max(0,e+t):void 0===e?t:Math.min(e,t)}function f(t){return m(t)?t:I(t)}function h(t){return y(t)?t:k(t)}function d(t){return _(t)?t:M(t)}function v(t){return m(t)&&!g(t)?t:T(t)}function m(t){return!(!t||!t[hr])}function y(t){return!(!t||!t[dr])}function _(t){return!(!t||!t[vr])}function g(t){return y(t)||_(t)}function E(t){return!(!t||!t[mr])}function b(t){this.next=t}function w(t,e,n,r){var o=0===t?e:1===t?n:[e,n];return r?r.value=o:r={value:o,done:!1},r}function N(){return{value:void 0,done:!0}}function D(t){return!!S(t)}function O(t){return t&&"function"==typeof t.next}function C(t){var e=S(t);return e&&e.call(t)}function S(t){var e=t&&(Er&&t[Er]||t[br]);return"function"==typeof e?e:void 0}function x(t){return t&&"number"==typeof t.length}function I(t){return null===t||void 0===t?V():m(t)?t.toSeq():B(t)}function k(t){return null===t||void 0===t?V().toKeyedSeq():m(t)?y(t)?t.toSeq():t.fromEntrySeq():j(t)}function M(t){return null===t||void 0===t?V():m(t)?y(t)?t.entrySeq():t.toIndexedSeq():z(t)}function T(t){return(null===t||void 0===t?V():m(t)?y(t)?t.entrySeq():t:z(t)).toSetSeq()}function R(t){this._array=t,this.size=t.length}function A(t){var e=Object.keys(t);this._object=t,this._keys=e,this.size=e.length}function P(t){this._iterable=t,this.size=t.length||t.size}function L(t){this._iterator=t,this._iteratorCache=[]}function U(t){return!(!t||!t[Nr])}function V(){return Dr||(Dr=new R([]))}function j(t){var e=Array.isArray(t)?new R(t).fromEntrySeq():O(t)?new L(t).fromEntrySeq():D(t)?new P(t).fromEntrySeq():"object"==typeof t?new A(t):void 0;if(!e)throw new TypeError("Expected Array or iterable object of [k, v] entries, or keyed object: "+t);return e}function z(t){var e=q(t);if(!e)throw new TypeError("Expected Array or iterable object of values: "+t);return e}function B(t){var e=q(t)||"object"==typeof t&&new A(t);if(!e)throw new TypeError("Expected Array or iterable object of values, or keyed object: "+t);return e}function q(t){return x(t)?new R(t):O(t)?new L(t):D(t)?new P(t):void 0}function W(t,e,n,r){var o=t._cache;if(o){for(var i=o.length-1,a=0;i>=a;a++){var s=o[n?i-a:a];if(e(s[1],r?s[0]:a,t)===!1)return a+1}return a}return t.__iterateUncached(e,n)}function F(t,e,n,r){var o=t._cache;if(o){var i=o.length-1,a=0;return new b(function(){var t=o[n?i-a:a];return a++>i?N():w(e,r?t[0]:a-1,t[1])})}return t.__iteratorUncached(e,n)}function H(){throw TypeError("Abstract")}function K(){}function X(){}function Y(){}function $(t,e){return t===e||t!==t&&e!==e?!0:t&&e?("function"==typeof t.valueOf&&"function"==typeof e.valueOf&&(t=t.valueOf(),e=e.valueOf()),"function"==typeof t.equals&&"function"==typeof e.equals?t.equals(e):t===e||t!==t&&e!==e):!1}function G(t,e){return e?J(e,t,"",{"":t}):Q(t)}function J(t,e,n,r){return Array.isArray(e)?t.call(r,n,M(e).map(function(n,r){return J(t,n,r,e)})):Z(e)?t.call(r,n,k(e).map(function(n,r){return J(t,n,r,e)})):e}function Q(t){return Array.isArray(t)?M(t).map(Q).toList():Z(t)?k(t).map(Q).toMap():t}function Z(t){return t&&t.constructor===Object}function te(t){return t>>>1&1073741824|3221225471&t}function ee(t){if(t===!1||null===t||void 0===t)return 0;if("function"==typeof t.valueOf&&(t=t.valueOf(),t===!1||null===t||void 0===t))return 0;if(t===!0)return 1;var e=typeof t;if("number"===e){var n=0|t;for(n!==t&&(n^=4294967295*t);t>4294967295;)t/=4294967295,n^=t;return te(n)}return"string"===e?t.length>kr?ne(t):re(t):"function"==typeof t.hashCode?t.hashCode():oe(t)}function ne(t){var e=Rr[t];return void 0===e&&(e=re(t),Tr===Mr&&(Tr=0,Rr={}),Tr++,Rr[t]=e),e}function re(t){for(var e=0,n=0;n<t.length;n++)e=31*e+t.charCodeAt(n)|0;return te(e)}function oe(t){var e=Sr&&Sr.get(t);if(e)return e;if(e=t[Ir])return e;if(!Cr){if(e=t.propertyIsEnumerable&&t.propertyIsEnumerable[Ir])return e;if(e=ie(t))return e}if(Object.isExtensible&&!Object.isExtensible(t))throw new Error("Non-extensible objects are not allowed as keys.");if(e=++xr,1073741824&xr&&(xr=0),Sr)Sr.set(t,e);else if(Cr)Object.defineProperty(t,Ir,{enumerable:!1,configurable:!1,writable:!1,value:e});else if(t.propertyIsEnumerable&&t.propertyIsEnumerable===t.constructor.prototype.propertyIsEnumerable)t.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},t.propertyIsEnumerable[Ir]=e;else{if(!t.nodeType)throw new Error("Unable to set a non-enumerable property on object.");t[Ir]=e}return e}function ie(t){if(t&&t.nodeType>0)switch(t.nodeType){case 1:return t.uniqueID;case 9:return t.documentElement&&t.documentElement.uniqueID}}function ae(t,e){if(!t)throw new Error(e)}function se(t){ae(1/0!==t,"Cannot perform this action with an infinite size.")}function ue(t,e){this._iter=t,this._useKeys=e,this.size=t.size}function ce(t){this._iter=t,this.size=t.size}function pe(t){this._iter=t,this.size=t.size}function le(t){this._iter=t,this.size=t.size}function fe(t){var e=Re(t);return e._iter=t,e.size=t.size,e.flip=function(){return t},e.reverse=function(){var e=t.reverse.apply(this);
return e.flip=function(){return t.reverse()},e},e.has=function(e){return t.contains(e)},e.contains=function(e){return t.has(e)},e.cacheResult=Ae,e.__iterateUncached=function(e,n){var r=this;return t.__iterate(function(t,n){return e(n,t,r)!==!1},n)},e.__iteratorUncached=function(e,n){if(e===gr){var r=t.__iterator(e,n);return new b(function(){var t=r.next();if(!t.done){var e=t.value[0];t.value[0]=t.value[1],t.value[1]=e}return t})}return t.__iterator(e===_r?yr:_r,n)},e}function he(t,e,n){var r=Re(t);return r.size=t.size,r.has=function(e){return t.has(e)},r.get=function(r,o){var i=t.get(r,pr);return i===pr?o:e.call(n,i,r,t)},r.__iterateUncached=function(r,o){var i=this;return t.__iterate(function(t,o,a){return r(e.call(n,t,o,a),o,i)!==!1},o)},r.__iteratorUncached=function(r,o){var i=t.__iterator(gr,o);return new b(function(){var o=i.next();if(o.done)return o;var a=o.value,s=a[0];return w(r,s,e.call(n,a[1],s,t),o)})},r}function de(t,e){var n=Re(t);return n._iter=t,n.size=t.size,n.reverse=function(){return t},t.flip&&(n.flip=function(){var e=fe(t);return e.reverse=function(){return t.flip()},e}),n.get=function(n,r){return t.get(e?n:-1-n,r)},n.has=function(n){return t.has(e?n:-1-n)},n.contains=function(e){return t.contains(e)},n.cacheResult=Ae,n.__iterate=function(e,n){var r=this;return t.__iterate(function(t,n){return e(t,n,r)},!n)},n.__iterator=function(e,n){return t.__iterator(e,!n)},n}function ve(t,e,n,r){var o=Re(t);return r&&(o.has=function(r){var o=t.get(r,pr);return o!==pr&&!!e.call(n,o,r,t)},o.get=function(r,o){var i=t.get(r,pr);return i!==pr&&e.call(n,i,r,t)?i:o}),o.__iterateUncached=function(o,i){var a=this,s=0;return t.__iterate(function(t,i,u){return e.call(n,t,i,u)?(s++,o(t,r?i:s-1,a)):void 0},i),s},o.__iteratorUncached=function(o,i){var a=t.__iterator(gr,i),s=0;return new b(function(){for(;;){var i=a.next();if(i.done)return i;var u=i.value,c=u[0],p=u[1];if(e.call(n,p,c,t))return w(o,r?c:s++,p,i)}})},o}function me(t,e,n){var r=Ue().asMutable();return t.__iterate(function(o,i){r.update(e.call(n,o,i,t),0,function(t){return t+1})}),r.asImmutable()}function ye(t,e,n){var r=y(t),o=(E(t)?Dn():Ue()).asMutable();t.__iterate(function(i,a){o.update(e.call(n,i,a,t),function(t){return t=t||[],t.push(r?[a,i]:i),t})});var i=Te(t);return o.map(function(e){return Ie(t,i(e))})}function _e(t,e,n,r){var o=t.size;if(u(e,n,o))return t;var i=c(e,o),s=p(n,o);if(i!==i||s!==s)return _e(t.toSeq().cacheResult(),e,n,r);var l=s-i;0>l&&(l=0);var f=Re(t);return f.size=0===l?l:t.size&&l||void 0,!r&&U(t)&&l>=0&&(f.get=function(e,n){return e=a(this,e),e>=0&&l>e?t.get(e+i,n):n}),f.__iterateUncached=function(e,n){var o=this;if(0===l)return 0;if(n)return this.cacheResult().__iterate(e,n);var a=0,s=!0,u=0;return t.__iterate(function(t,n){return s&&(s=a++<i)?void 0:(u++,e(t,r?n:u-1,o)!==!1&&u!==l)}),u},f.__iteratorUncached=function(e,n){if(l&&n)return this.cacheResult().__iterator(e,n);var o=l&&t.__iterator(e,n),a=0,s=0;return new b(function(){for(;a++!==i;)o.next();if(++s>l)return N();var t=o.next();return r||e===_r?t:e===yr?w(e,s-1,void 0,t):w(e,s-1,t.value[1],t)})},f}function ge(t,e,n){var r=Re(t);return r.__iterateUncached=function(r,o){var i=this;if(o)return this.cacheResult().__iterate(r,o);var a=0;return t.__iterate(function(t,o,s){return e.call(n,t,o,s)&&++a&&r(t,o,i)}),a},r.__iteratorUncached=function(r,o){var i=this;if(o)return this.cacheResult().__iterator(r,o);var a=t.__iterator(gr,o),s=!0;return new b(function(){if(!s)return N();var t=a.next();if(t.done)return t;var o=t.value,u=o[0],c=o[1];return e.call(n,c,u,i)?r===gr?t:w(r,u,c,t):(s=!1,N())})},r}function Ee(t,e,n,r){var o=Re(t);return o.__iterateUncached=function(o,i){var a=this;if(i)return this.cacheResult().__iterate(o,i);var s=!0,u=0;return t.__iterate(function(t,i,c){return s&&(s=e.call(n,t,i,c))?void 0:(u++,o(t,r?i:u-1,a))}),u},o.__iteratorUncached=function(o,i){var a=this;if(i)return this.cacheResult().__iterator(o,i);var s=t.__iterator(gr,i),u=!0,c=0;return new b(function(){var t,i,p;do{if(t=s.next(),t.done)return r||o===_r?t:o===yr?w(o,c++,void 0,t):w(o,c++,t.value[1],t);var l=t.value;i=l[0],p=l[1],u&&(u=e.call(n,p,i,a))}while(u);return o===gr?t:w(o,i,p,t)})},o}function be(t,e){var n=y(t),r=[t].concat(e).map(function(t){return m(t)?n&&(t=h(t)):t=n?j(t):z(Array.isArray(t)?t:[t]),t}).filter(function(t){return 0!==t.size});if(0===r.length)return t;if(1===r.length){var o=r[0];if(o===t||n&&y(o)||_(t)&&_(o))return o}var i=new R(r);return n?i=i.toKeyedSeq():_(t)||(i=i.toSetSeq()),i=i.flatten(!0),i.size=r.reduce(function(t,e){if(void 0!==t){var n=e.size;if(void 0!==n)return t+n}},0),i}function we(t,e,n){var r=Re(t);return r.__iterateUncached=function(r,o){function i(t,u){var c=this;t.__iterate(function(t,o){return(!e||e>u)&&m(t)?i(t,u+1):r(t,n?o:a++,c)===!1&&(s=!0),!s},o)}var a=0,s=!1;return i(t,0),a},r.__iteratorUncached=function(r,o){var i=t.__iterator(r,o),a=[],s=0;return new b(function(){for(;i;){var t=i.next();if(t.done===!1){var u=t.value;if(r===gr&&(u=u[1]),e&&!(a.length<e)||!m(u))return n?t:w(r,s++,u,t);a.push(i),i=u.__iterator(r,o)}else i=a.pop()}return N()})},r}function Ne(t,e,n){var r=Te(t);return t.toSeq().map(function(o,i){return r(e.call(n,o,i,t))}).flatten(!0)}function De(t,e){var n=Re(t);return n.size=t.size&&2*t.size-1,n.__iterateUncached=function(n,r){var o=this,i=0;return t.__iterate(function(t){return(!i||n(e,i++,o)!==!1)&&n(t,i++,o)!==!1},r),i},n.__iteratorUncached=function(n,r){var o,i=t.__iterator(_r,r),a=0;return new b(function(){return(!o||a%2)&&(o=i.next(),o.done)?o:a%2?w(n,a++,e):w(n,a++,o.value,o)})},n}function Oe(t,e,n){e||(e=Pe);var r=y(t),o=0,i=t.toSeq().map(function(e,r){return[r,e,o++,n?n(e,r,t):e]}).toArray();return i.sort(function(t,n){return e(t[3],n[3])||t[2]-n[2]}).forEach(r?function(t,e){i[e].length=2}:function(t,e){i[e]=t[1]}),r?k(i):_(t)?M(i):T(i)}function Ce(t,e,n){if(e||(e=Pe),n){var r=t.toSeq().map(function(e,r){return[e,n(e,r,t)]}).reduce(function(t,n){return Se(e,t[1],n[1])?n:t});return r&&r[0]}return t.reduce(function(t,n){return Se(e,t,n)?n:t})}function Se(t,e,n){var r=t(n,e);return 0===r&&n!==e&&(void 0===n||null===n||n!==n)||r>0}function xe(t,e,n){var r=Re(t);return r.size=new R(n).map(function(t){return t.size}).min(),r.__iterate=function(t,e){for(var n,r=this.__iterator(_r,e),o=0;!(n=r.next()).done&&t(n.value,o++,this)!==!1;);return o},r.__iteratorUncached=function(t,r){var o=n.map(function(t){return t=f(t),C(r?t.reverse():t)}),i=0,a=!1;return new b(function(){var n;return a||(n=o.map(function(t){return t.next()}),a=n.some(function(t){return t.done})),a?N():w(t,i++,e.apply(null,n.map(function(t){return t.value})))})},r}function Ie(t,e){return U(t)?e:t.constructor(e)}function ke(t){if(t!==Object(t))throw new TypeError("Expected [K, V] tuple: "+t)}function Me(t){return se(t.size),i(t)}function Te(t){return y(t)?h:_(t)?d:v}function Re(t){return Object.create((y(t)?k:_(t)?M:T).prototype)}function Ae(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):I.prototype.cacheResult.call(this)}function Pe(t,e){return t>e?1:e>t?-1:0}function Le(t){var e=C(t);if(!e){if(!x(t))throw new TypeError("Expected iterable or array-like: "+t);e=C(f(t))}return e}function Ue(t){return null===t||void 0===t?Ye():Ve(t)?t:Ye().withMutations(function(e){var n=h(t);se(n.size),n.forEach(function(t,n){return e.set(n,t)})})}function Ve(t){return!(!t||!t[Ar])}function je(t,e){this.ownerID=t,this.entries=e}function ze(t,e,n){this.ownerID=t,this.bitmap=e,this.nodes=n}function Be(t,e,n){this.ownerID=t,this.count=e,this.nodes=n}function qe(t,e,n){this.ownerID=t,this.keyHash=e,this.entries=n}function We(t,e,n){this.ownerID=t,this.keyHash=e,this.entry=n}function Fe(t,e,n){this._type=e,this._reverse=n,this._stack=t._root&&Ke(t._root)}function He(t,e){return w(t,e[0],e[1])}function Ke(t,e){return{node:t,index:0,__prev:e}}function Xe(t,e,n,r){var o=Object.create(Pr);return o.size=t,o._root=e,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function Ye(){return Lr||(Lr=Xe(0))}function $e(t,n,r){var o,i;if(t._root){var a=e(lr),s=e(fr);if(o=Ge(t._root,t.__ownerID,0,void 0,n,r,a,s),!s.value)return t;i=t.size+(a.value?r===pr?-1:1:0)}else{if(r===pr)return t;i=1,o=new je(t.__ownerID,[[n,r]])}return t.__ownerID?(t.size=i,t._root=o,t.__hash=void 0,t.__altered=!0,t):o?Xe(i,o):Ye()}function Ge(t,e,r,o,i,a,s,u){return t?t.update(e,r,o,i,a,s,u):a===pr?t:(n(u),n(s),new We(e,o,[i,a]))}function Je(t){return t.constructor===We||t.constructor===qe}function Qe(t,e,n,r,o){if(t.keyHash===r)return new qe(e,r,[t.entry,o]);var i,a=(0===n?t.keyHash:t.keyHash>>>n)&cr,s=(0===n?r:r>>>n)&cr,u=a===s?[Qe(t,e,n+sr,r,o)]:(i=new We(e,r,o),s>a?[t,i]:[i,t]);return new ze(e,1<<a|1<<s,u)}function Ze(t,e,n,o){t||(t=new r);for(var i=new We(t,ee(n),[n,o]),a=0;a<e.length;a++){var s=e[a];i=i.update(t,0,void 0,s[0],s[1])}return i}function tn(t,e,n,r){for(var o=0,i=0,a=new Array(n),s=0,u=1,c=e.length;c>s;s++,u<<=1){var p=e[s];void 0!==p&&s!==r&&(o|=u,a[i++]=p)}return new ze(t,o,a)}function en(t,e,n,r,o){for(var i=0,a=new Array(ur),s=0;0!==n;s++,n>>>=1)a[s]=1&n?e[i++]:void 0;return a[r]=o,new Be(t,i+1,a)}function nn(t,e,n){for(var r=[],o=0;o<n.length;o++){var i=n[o],a=h(i);m(i)||(a=a.map(function(t){return G(t)})),r.push(a)}return on(t,e,r)}function rn(t){return function(e,n){return e&&e.mergeDeepWith&&m(n)?e.mergeDeepWith(t,n):t?t(e,n):n}}function on(t,e,n){return n=n.filter(function(t){return 0!==t.size}),0===n.length?t:0===t.size&&1===n.length?t.constructor(n[0]):t.withMutations(function(t){for(var r=e?function(n,r){t.update(r,pr,function(t){return t===pr?n:e(t,n)})}:function(e,n){t.set(n,e)},o=0;o<n.length;o++)n[o].forEach(r)})}function an(t,e,n,r){var o=t===pr,i=e.next();if(i.done){var a=o?n:t,s=r(a);return s===a?t:s}ae(o||t&&t.set,"invalid keyPath");var u=i.value,c=o?pr:t.get(u,pr),p=an(c,e,n,r);return p===c?t:p===pr?t.remove(u):(o?Ye():t).set(u,p)}function sn(t){return t-=t>>1&1431655765,t=(858993459&t)+(t>>2&858993459),t=t+(t>>4)&252645135,t+=t>>8,t+=t>>16,127&t}function un(t,e,n,r){var i=r?t:o(t);return i[e]=n,i}function cn(t,e,n,r){var o=t.length+1;if(r&&e+1===o)return t[e]=n,t;for(var i=new Array(o),a=0,s=0;o>s;s++)s===e?(i[s]=n,a=-1):i[s]=t[s+a];return i}function pn(t,e,n){var r=t.length-1;if(n&&e===r)return t.pop(),t;for(var o=new Array(r),i=0,a=0;r>a;a++)a===e&&(i=1),o[a]=t[a+i];return o}function ln(t){var e=mn();if(null===t||void 0===t)return e;if(fn(t))return t;var n=d(t),r=n.size;return 0===r?e:(se(r),r>0&&ur>r?vn(0,r,sr,null,new hn(n.toArray())):e.withMutations(function(t){t.setSize(r),n.forEach(function(e,n){return t.set(n,e)})}))}function fn(t){return!(!t||!t[zr])}function hn(t,e){this.array=t,this.ownerID=e}function dn(t,e){function n(t,e,n){return 0===e?r(t,n):o(t,e,n)}function r(t,n){var r=n===s?u&&u.array:t&&t.array,o=n>i?0:i-n,c=a-n;return c>ur&&(c=ur),function(){if(o===c)return Wr;var t=e?--c:o++;return r&&r[t]}}function o(t,r,o){var s,u=t&&t.array,c=o>i?0:i-o>>r,p=(a-o>>r)+1;return p>ur&&(p=ur),function(){for(;;){if(s){var t=s();if(t!==Wr)return t;s=null}if(c===p)return Wr;var i=e?--p:c++;s=n(u&&u[i],r-sr,o+(i<<r))}}}var i=t._origin,a=t._capacity,s=Nn(a),u=t._tail;return n(t._root,t._level,0)}function vn(t,e,n,r,o,i,a){var s=Object.create(Br);return s.size=e-t,s._origin=t,s._capacity=e,s._level=n,s._root=r,s._tail=o,s.__ownerID=i,s.__hash=a,s.__altered=!1,s}function mn(){return qr||(qr=vn(0,0,sr))}function yn(t,n,r){if(n=a(t,n),n>=t.size||0>n)return t.withMutations(function(t){0>n?bn(t,n).set(0,r):bn(t,0,n+1).set(n,r)});n+=t._origin;var o=t._tail,i=t._root,s=e(fr);return n>=Nn(t._capacity)?o=_n(o,t.__ownerID,0,n,r,s):i=_n(i,t.__ownerID,t._level,n,r,s),s.value?t.__ownerID?(t._root=i,t._tail=o,t.__hash=void 0,t.__altered=!0,t):vn(t._origin,t._capacity,t._level,i,o):t}function _n(t,e,r,o,i,a){var s=o>>>r&cr,u=t&&s<t.array.length;if(!u&&void 0===i)return t;var c;if(r>0){var p=t&&t.array[s],l=_n(p,e,r-sr,o,i,a);return l===p?t:(c=gn(t,e),c.array[s]=l,c)}return u&&t.array[s]===i?t:(n(a),c=gn(t,e),void 0===i&&s===c.array.length-1?c.array.pop():c.array[s]=i,c)}function gn(t,e){return e&&t&&e===t.ownerID?t:new hn(t?t.array.slice():[],e)}function En(t,e){if(e>=Nn(t._capacity))return t._tail;if(e<1<<t._level+sr){for(var n=t._root,r=t._level;n&&r>0;)n=n.array[e>>>r&cr],r-=sr;return n}}function bn(t,e,n){var o=t.__ownerID||new r,i=t._origin,a=t._capacity,s=i+e,u=void 0===n?a:0>n?a+n:i+n;if(s===i&&u===a)return t;if(s>=u)return t.clear();for(var c=t._level,p=t._root,l=0;0>s+l;)p=new hn(p&&p.array.length?[void 0,p]:[],o),c+=sr,l+=1<<c;l&&(s+=l,i+=l,u+=l,a+=l);for(var f=Nn(a),h=Nn(u);h>=1<<c+sr;)p=new hn(p&&p.array.length?[p]:[],o),c+=sr;var d=t._tail,v=f>h?En(t,u-1):h>f?new hn([],o):d;if(d&&h>f&&a>s&&d.array.length){p=gn(p,o);for(var m=p,y=c;y>sr;y-=sr){var _=f>>>y&cr;m=m.array[_]=gn(m.array[_],o)}m.array[f>>>sr&cr]=d}if(a>u&&(v=v&&v.removeAfter(o,0,u)),s>=h)s-=h,u-=h,c=sr,p=null,v=v&&v.removeBefore(o,0,s);else if(s>i||f>h){for(l=0;p;){var g=s>>>c&cr;if(g!==h>>>c&cr)break;g&&(l+=(1<<c)*g),c-=sr,p=p.array[g]}p&&s>i&&(p=p.removeBefore(o,c,s-l)),p&&f>h&&(p=p.removeAfter(o,c,h-l)),l&&(s-=l,u-=l)}return t.__ownerID?(t.size=u-s,t._origin=s,t._capacity=u,t._level=c,t._root=p,t._tail=v,t.__hash=void 0,t.__altered=!0,t):vn(s,u,c,p,v)}function wn(t,e,n){for(var r=[],o=0,i=0;i<n.length;i++){var a=n[i],s=d(a);s.size>o&&(o=s.size),m(a)||(s=s.map(function(t){return G(t)})),r.push(s)}return o>t.size&&(t=t.setSize(o)),on(t,e,r)}function Nn(t){return ur>t?0:t-1>>>sr<<sr}function Dn(t){return null===t||void 0===t?Sn():On(t)?t:Sn().withMutations(function(e){var n=h(t);se(n.size),n.forEach(function(t,n){return e.set(n,t)})})}function On(t){return Ve(t)&&E(t)}function Cn(t,e,n,r){var o=Object.create(Dn.prototype);return o.size=t?t.size:0,o._map=t,o._list=e,o.__ownerID=n,o.__hash=r,o}function Sn(){return Fr||(Fr=Cn(Ye(),mn()))}function xn(t,e,n){var r,o,i=t._map,a=t._list,s=i.get(e),u=void 0!==s;if(n===pr){if(!u)return t;a.size>=ur&&a.size>=2*i.size?(o=a.filter(function(t,e){return void 0!==t&&s!==e}),r=o.toKeyedSeq().map(function(t){return t[0]}).flip().toMap(),t.__ownerID&&(r.__ownerID=o.__ownerID=t.__ownerID)):(r=i.remove(e),o=s===a.size-1?a.pop():a.set(s,void 0))}else if(u){if(n===a.get(s)[1])return t;r=i,o=a.set(s,[e,n])}else r=i.set(e,a.size),o=a.set(a.size,[e,n]);return t.__ownerID?(t.size=r.size,t._map=r,t._list=o,t.__hash=void 0,t):Cn(r,o)}function In(t){return null===t||void 0===t?Tn():kn(t)?t:Tn().unshiftAll(t)}function kn(t){return!(!t||!t[Hr])}function Mn(t,e,n,r){var o=Object.create(Kr);return o.size=t,o._head=e,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function Tn(){return Xr||(Xr=Mn(0))}function Rn(t){return null===t||void 0===t?Un():An(t)?t:Un().withMutations(function(e){var n=v(t);se(n.size),n.forEach(function(t){return e.add(t)})})}function An(t){return!(!t||!t[Yr])}function Pn(t,e){return t.__ownerID?(t.size=e.size,t._map=e,t):e===t._map?t:0===e.size?t.__empty():t.__make(e)}function Ln(t,e){var n=Object.create($r);return n.size=t?t.size:0,n._map=t,n.__ownerID=e,n}function Un(){return Gr||(Gr=Ln(Ye()))}function Vn(t){return null===t||void 0===t?Bn():jn(t)?t:Bn().withMutations(function(e){var n=v(t);se(n.size),n.forEach(function(t){return e.add(t)})})}function jn(t){return An(t)&&E(t)}function zn(t,e){var n=Object.create(Jr);return n.size=t?t.size:0,n._map=t,n.__ownerID=e,n}function Bn(){return Qr||(Qr=zn(Sn()))}function qn(t,e){var n=function(t){return this instanceof n?void(this._map=Ue(t)):new n(t)},r=Object.keys(t),o=n.prototype=Object.create(Zr);o.constructor=n,e&&(o._name=e),o._defaultValues=t,o._keys=r,o.size=r.length;try{r.forEach(function(t){Object.defineProperty(n.prototype,t,{get:function(){return this.get(t)},set:function(e){ae(this.__ownerID,"Cannot set on an immutable record."),this.set(t,e)}})})}catch(i){}return n}function Wn(t,e,n){var r=Object.create(Object.getPrototypeOf(t));return r._map=e,r.__ownerID=n,r}function Fn(t){return t._name||t.constructor.name}function Hn(t,e){if(t===e)return!0;if(!m(e)||void 0!==t.size&&void 0!==e.size&&t.size!==e.size||void 0!==t.__hash&&void 0!==e.__hash&&t.__hash!==e.__hash||y(t)!==y(e)||_(t)!==_(e)||E(t)!==E(e))return!1;if(0===t.size&&0===e.size)return!0;var n=!g(t);if(E(t)){var r=t.entries();return e.every(function(t,e){var o=r.next().value;return o&&$(o[1],t)&&(n||$(o[0],e))})&&r.next().done}var o=!1;if(void 0===t.size)if(void 0===e.size)t.cacheResult();else{o=!0;var i=t;t=e,e=i}var a=!0,s=e.__iterate(function(e,r){return(n?t.has(e):o?$(e,t.get(r,pr)):$(t.get(r,pr),e))?void 0:(a=!1,!1)});return a&&t.size===s}function Kn(t,e,n){if(!(this instanceof Kn))return new Kn(t,e,n);if(ae(0!==n,"Cannot step a Range by 0"),t=t||0,void 0===e&&(e=1/0),n=void 0===n?1:Math.abs(n),t>e&&(n=-n),this._start=t,this._end=e,this._step=n,this.size=Math.max(0,Math.ceil((e-t)/n-1)+1),0===this.size){if(to)return to;to=this}}function Xn(t,e){if(!(this instanceof Xn))return new Xn(t,e);if(this._value=t,this.size=void 0===e?1/0:Math.max(0,e),0===this.size){if(eo)return eo;eo=this}}function Yn(t,e){var n=function(n){t.prototype[n]=e[n]};return Object.keys(e).forEach(n),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(e).forEach(n),t}function $n(t,e){return e}function Gn(t,e){return[e,t]}function Jn(t){return function(){return!t.apply(this,arguments)}}function Qn(t){return function(){return-t.apply(this,arguments)}}function Zn(t){return"string"==typeof t?JSON.stringify(t):t}function tr(){return o(arguments)}function er(t,e){return e>t?1:t>e?-1:0}function nr(t){if(1/0===t.size)return 0;var e=E(t),n=y(t),r=e?1:0,o=t.__iterate(n?e?function(t,e){r=31*r+or(ee(t),ee(e))|0}:function(t,e){r=r+or(ee(t),ee(e))|0}:e?function(t){r=31*r+ee(t)|0}:function(t){r=r+ee(t)|0});return rr(o,r)}function rr(t,e){return e=Or(e,3432918353),e=Or(e<<15|e>>>-15,461845907),e=Or(e<<13|e>>>-13,5),e=(e+3864292196|0)^t,e=Or(e^e>>>16,2246822507),e=Or(e^e>>>13,3266489909),e=te(e^e>>>16)}function or(t,e){return t^e+2654435769+(t<<6)+(t>>2)|0}var ir=Array.prototype.slice,ar="delete",sr=5,ur=1<<sr,cr=ur-1,pr={},lr={value:!1},fr={value:!1};t(h,f),t(d,f),t(v,f),f.isIterable=m,f.isKeyed=y,f.isIndexed=_,f.isAssociative=g,f.isOrdered=E,f.Keyed=h,f.Indexed=d,f.Set=v;var hr="@@__IMMUTABLE_ITERABLE__@@",dr="@@__IMMUTABLE_KEYED__@@",vr="@@__IMMUTABLE_INDEXED__@@",mr="@@__IMMUTABLE_ORDERED__@@",yr=0,_r=1,gr=2,Er="function"==typeof Symbol&&Symbol.iterator,br="@@iterator",wr=Er||br;b.prototype.toString=function(){return"[Iterator]"},b.KEYS=yr,b.VALUES=_r,b.ENTRIES=gr,b.prototype.inspect=b.prototype.toSource=function(){return this.toString()},b.prototype[wr]=function(){return this},t(I,f),I.of=function(){return I(arguments)},I.prototype.toSeq=function(){return this},I.prototype.toString=function(){return this.__toString("Seq {","}")},I.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},I.prototype.__iterate=function(t,e){return W(this,t,e,!0)},I.prototype.__iterator=function(t,e){return F(this,t,e,!0)},t(k,I),k.of=function(){return k(arguments)},k.prototype.toKeyedSeq=function(){return this},k.prototype.toSeq=function(){return this},t(M,I),M.of=function(){return M(arguments)},M.prototype.toIndexedSeq=function(){return this},M.prototype.toString=function(){return this.__toString("Seq [","]")},M.prototype.__iterate=function(t,e){return W(this,t,e,!1)},M.prototype.__iterator=function(t,e){return F(this,t,e,!1)},t(T,I),T.of=function(){return T(arguments)},T.prototype.toSetSeq=function(){return this},I.isSeq=U,I.Keyed=k,I.Set=T,I.Indexed=M;var Nr="@@__IMMUTABLE_SEQ__@@";I.prototype[Nr]=!0,t(R,M),R.prototype.get=function(t,e){return this.has(t)?this._array[a(this,t)]:e},R.prototype.__iterate=function(t,e){for(var n=this._array,r=n.length-1,o=0;r>=o;o++)if(t(n[e?r-o:o],o,this)===!1)return o+1;return o},R.prototype.__iterator=function(t,e){var n=this._array,r=n.length-1,o=0;return new b(function(){return o>r?N():w(t,o,n[e?r-o++:o++])})},t(A,k),A.prototype.get=function(t,e){return void 0===e||this.has(t)?this._object[t]:e},A.prototype.has=function(t){return this._object.hasOwnProperty(t)},A.prototype.__iterate=function(t,e){for(var n=this._object,r=this._keys,o=r.length-1,i=0;o>=i;i++){var a=r[e?o-i:i];if(t(n[a],a,this)===!1)return i+1}return i},A.prototype.__iterator=function(t,e){var n=this._object,r=this._keys,o=r.length-1,i=0;return new b(function(){var a=r[e?o-i:i];return i++>o?N():w(t,a,n[a])})},A.prototype[mr]=!0,t(P,M),P.prototype.__iterateUncached=function(t,e){if(e)return this.cacheResult().__iterate(t,e);var n=this._iterable,r=C(n),o=0;if(O(r))for(var i;!(i=r.next()).done&&t(i.value,o++,this)!==!1;);return o},P.prototype.__iteratorUncached=function(t,e){if(e)return this.cacheResult().__iterator(t,e);var n=this._iterable,r=C(n);if(!O(r))return new b(N);var o=0;return new b(function(){var e=r.next();return e.done?e:w(t,o++,e.value)})},t(L,M),L.prototype.__iterateUncached=function(t,e){if(e)return this.cacheResult().__iterate(t,e);for(var n=this._iterator,r=this._iteratorCache,o=0;o<r.length;)if(t(r[o],o++,this)===!1)return o;for(var i;!(i=n.next()).done;){var a=i.value;if(r[o]=a,t(a,o++,this)===!1)break}return o},L.prototype.__iteratorUncached=function(t,e){if(e)return this.cacheResult().__iterator(t,e);var n=this._iterator,r=this._iteratorCache,o=0;return new b(function(){if(o>=r.length){var e=n.next();if(e.done)return e;r[o]=e.value}return w(t,o,r[o++])})};var Dr;t(H,f),t(K,H),t(X,H),t(Y,H),H.Keyed=K,H.Indexed=X,H.Set=Y;var Or="function"==typeof Math.imul&&-2===Math.imul(4294967295,2)?Math.imul:function(t,e){t=0|t,e=0|e;var n=65535&t,r=65535&e;return n*r+((t>>>16)*r+n*(e>>>16)<<16>>>0)|0},Cr=function(){try{return Object.defineProperty({},"x",{}),!0}catch(t){return!1}}(),Sr="function"==typeof WeakMap&&new WeakMap,xr=0,Ir="__immutablehash__";"function"==typeof Symbol&&(Ir=Symbol(Ir));var kr=16,Mr=255,Tr=0,Rr={};t(ue,k),ue.prototype.get=function(t,e){return this._iter.get(t,e)},ue.prototype.has=function(t){return this._iter.has(t)},ue.prototype.valueSeq=function(){return this._iter.valueSeq()},ue.prototype.reverse=function(){var t=this,e=de(this,!0);return this._useKeys||(e.valueSeq=function(){return t._iter.toSeq().reverse()}),e},ue.prototype.map=function(t,e){var n=this,r=he(this,t,e);return this._useKeys||(r.valueSeq=function(){return n._iter.toSeq().map(t,e)}),r},ue.prototype.__iterate=function(t,e){var n,r=this;return this._iter.__iterate(this._useKeys?function(e,n){return t(e,n,r)}:(n=e?Me(this):0,function(o){return t(o,e?--n:n++,r)}),e)},ue.prototype.__iterator=function(t,e){if(this._useKeys)return this._iter.__iterator(t,e);var n=this._iter.__iterator(_r,e),r=e?Me(this):0;return new b(function(){var o=n.next();return o.done?o:w(t,e?--r:r++,o.value,o)})},ue.prototype[mr]=!0,t(ce,M),ce.prototype.contains=function(t){return this._iter.contains(t)},ce.prototype.__iterate=function(t,e){var n=this,r=0;return this._iter.__iterate(function(e){return t(e,r++,n)},e)},ce.prototype.__iterator=function(t,e){var n=this._iter.__iterator(_r,e),r=0;return new b(function(){var e=n.next();return e.done?e:w(t,r++,e.value,e)})},t(pe,T),pe.prototype.has=function(t){return this._iter.contains(t)},pe.prototype.__iterate=function(t,e){var n=this;return this._iter.__iterate(function(e){return t(e,e,n)},e)},pe.prototype.__iterator=function(t,e){var n=this._iter.__iterator(_r,e);return new b(function(){var e=n.next();return e.done?e:w(t,e.value,e.value,e)})},t(le,k),le.prototype.entrySeq=function(){return this._iter.toSeq()},le.prototype.__iterate=function(t,e){var n=this;return this._iter.__iterate(function(e){return e?(ke(e),t(e[1],e[0],n)):void 0},e)},le.prototype.__iterator=function(t,e){var n=this._iter.__iterator(_r,e);return new b(function(){for(;;){var e=n.next();if(e.done)return e;var r=e.value;if(r)return ke(r),t===gr?e:w(t,r[0],r[1],e)}})},ce.prototype.cacheResult=ue.prototype.cacheResult=pe.prototype.cacheResult=le.prototype.cacheResult=Ae,t(Ue,K),Ue.prototype.toString=function(){return this.__toString("Map {","}")},Ue.prototype.get=function(t,e){return this._root?this._root.get(0,void 0,t,e):e},Ue.prototype.set=function(t,e){return $e(this,t,e)},Ue.prototype.setIn=function(t,e){return this.updateIn(t,pr,function(){return e})},Ue.prototype.remove=function(t){return $e(this,t,pr)},Ue.prototype.deleteIn=function(t){return this.updateIn(t,function(){return pr})},Ue.prototype.update=function(t,e,n){return 1===arguments.length?t(this):this.updateIn([t],e,n)},Ue.prototype.updateIn=function(t,e,n){n||(n=e,e=void 0);var r=an(this,Le(t),e,n);return r===pr?void 0:r},Ue.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):Ye()},Ue.prototype.merge=function(){return nn(this,void 0,arguments)},Ue.prototype.mergeWith=function(t){var e=ir.call(arguments,1);return nn(this,t,e)},Ue.prototype.mergeIn=function(t){var e=ir.call(arguments,1);return this.updateIn(t,Ye(),function(t){return t.merge.apply(t,e)})},Ue.prototype.mergeDeep=function(){return nn(this,rn(void 0),arguments)},Ue.prototype.mergeDeepWith=function(t){var e=ir.call(arguments,1);return nn(this,rn(t),e)},Ue.prototype.mergeDeepIn=function(t){var e=ir.call(arguments,1);return this.updateIn(t,Ye(),function(t){return t.mergeDeep.apply(t,e)})},Ue.prototype.sort=function(t){return Dn(Oe(this,t))},Ue.prototype.sortBy=function(t,e){return Dn(Oe(this,e,t))},Ue.prototype.withMutations=function(t){var e=this.asMutable();return t(e),e.wasAltered()?e.__ensureOwner(this.__ownerID):this},Ue.prototype.asMutable=function(){return this.__ownerID?this:this.__ensureOwner(new r)},Ue.prototype.asImmutable=function(){return this.__ensureOwner()},Ue.prototype.wasAltered=function(){return this.__altered},Ue.prototype.__iterator=function(t,e){return new Fe(this,t,e)},Ue.prototype.__iterate=function(t,e){var n=this,r=0;return this._root&&this._root.iterate(function(e){return r++,t(e[1],e[0],n)},e),r},Ue.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?Xe(this.size,this._root,t,this.__hash):(this.__ownerID=t,this.__altered=!1,this)},Ue.isMap=Ve;var Ar="@@__IMMUTABLE_MAP__@@",Pr=Ue.prototype;Pr[Ar]=!0,Pr[ar]=Pr.remove,Pr.removeIn=Pr.deleteIn,je.prototype.get=function(t,e,n,r){for(var o=this.entries,i=0,a=o.length;a>i;i++)if($(n,o[i][0]))return o[i][1];return r},je.prototype.update=function(t,e,r,i,a,s,u){for(var c=a===pr,p=this.entries,l=0,f=p.length;f>l&&!$(i,p[l][0]);l++);var h=f>l;if(h?p[l][1]===a:c)return this;if(n(u),(c||!h)&&n(s),!c||1!==p.length){if(!h&&!c&&p.length>=Ur)return Ze(t,p,i,a);var d=t&&t===this.ownerID,v=d?p:o(p);return h?c?l===f-1?v.pop():v[l]=v.pop():v[l]=[i,a]:v.push([i,a]),d?(this.entries=v,this):new je(t,v)}},ze.prototype.get=function(t,e,n,r){void 0===e&&(e=ee(n));var o=1<<((0===t?e:e>>>t)&cr),i=this.bitmap;return 0===(i&o)?r:this.nodes[sn(i&o-1)].get(t+sr,e,n,r)},ze.prototype.update=function(t,e,n,r,o,i,a){void 0===n&&(n=ee(r));var s=(0===e?n:n>>>e)&cr,u=1<<s,c=this.bitmap,p=0!==(c&u);if(!p&&o===pr)return this;var l=sn(c&u-1),f=this.nodes,h=p?f[l]:void 0,d=Ge(h,t,e+sr,n,r,o,i,a);if(d===h)return this;if(!p&&d&&f.length>=Vr)return en(t,f,c,s,d);if(p&&!d&&2===f.length&&Je(f[1^l]))return f[1^l];if(p&&d&&1===f.length&&Je(d))return d;var v=t&&t===this.ownerID,m=p?d?c:c^u:c|u,y=p?d?un(f,l,d,v):pn(f,l,v):cn(f,l,d,v);return v?(this.bitmap=m,this.nodes=y,this):new ze(t,m,y)},Be.prototype.get=function(t,e,n,r){void 0===e&&(e=ee(n));var o=(0===t?e:e>>>t)&cr,i=this.nodes[o];return i?i.get(t+sr,e,n,r):r},Be.prototype.update=function(t,e,n,r,o,i,a){void 0===n&&(n=ee(r));var s=(0===e?n:n>>>e)&cr,u=o===pr,c=this.nodes,p=c[s];if(u&&!p)return this;var l=Ge(p,t,e+sr,n,r,o,i,a);if(l===p)return this;var f=this.count;if(p){if(!l&&(f--,jr>f))return tn(t,c,f,s)}else f++;var h=t&&t===this.ownerID,d=un(c,s,l,h);return h?(this.count=f,this.nodes=d,this):new Be(t,f,d)},qe.prototype.get=function(t,e,n,r){for(var o=this.entries,i=0,a=o.length;a>i;i++)if($(n,o[i][0]))return o[i][1];return r},qe.prototype.update=function(t,e,r,i,a,s,u){void 0===r&&(r=ee(i));var c=a===pr;if(r!==this.keyHash)return c?this:(n(u),n(s),Qe(this,t,e,r,[i,a]));for(var p=this.entries,l=0,f=p.length;f>l&&!$(i,p[l][0]);l++);var h=f>l;if(h?p[l][1]===a:c)return this;if(n(u),(c||!h)&&n(s),c&&2===f)return new We(t,this.keyHash,p[1^l]);var d=t&&t===this.ownerID,v=d?p:o(p);return h?c?l===f-1?v.pop():v[l]=v.pop():v[l]=[i,a]:v.push([i,a]),d?(this.entries=v,this):new qe(t,this.keyHash,v)},We.prototype.get=function(t,e,n,r){return $(n,this.entry[0])?this.entry[1]:r},We.prototype.update=function(t,e,r,o,i,a,s){var u=i===pr,c=$(o,this.entry[0]);return(c?i===this.entry[1]:u)?this:(n(s),u?void n(a):c?t&&t===this.ownerID?(this.entry[1]=i,this):new We(t,this.keyHash,[o,i]):(n(a),Qe(this,t,e,ee(o),[o,i])))},je.prototype.iterate=qe.prototype.iterate=function(t,e){for(var n=this.entries,r=0,o=n.length-1;o>=r;r++)if(t(n[e?o-r:r])===!1)return!1},ze.prototype.iterate=Be.prototype.iterate=function(t,e){for(var n=this.nodes,r=0,o=n.length-1;o>=r;r++){var i=n[e?o-r:r];if(i&&i.iterate(t,e)===!1)return!1}},We.prototype.iterate=function(t){return t(this.entry)},t(Fe,b),Fe.prototype.next=function(){for(var t=this._type,e=this._stack;e;){var n,r=e.node,o=e.index++;if(r.entry){if(0===o)return He(t,r.entry)}else if(r.entries){if(n=r.entries.length-1,n>=o)return He(t,r.entries[this._reverse?n-o:o])}else if(n=r.nodes.length-1,n>=o){var i=r.nodes[this._reverse?n-o:o];if(i){if(i.entry)return He(t,i.entry);e=this._stack=Ke(i,e)}continue}e=this._stack=this._stack.__prev}return N()};var Lr,Ur=ur/4,Vr=ur/2,jr=ur/4;t(ln,X),ln.of=function(){return this(arguments)},ln.prototype.toString=function(){return this.__toString("List [","]")},ln.prototype.get=function(t,e){if(t=a(this,t),0>t||t>=this.size)return e;t+=this._origin;var n=En(this,t);return n&&n.array[t&cr]},ln.prototype.set=function(t,e){return yn(this,t,e)},ln.prototype.remove=function(t){return this.has(t)?0===t?this.shift():t===this.size-1?this.pop():this.splice(t,1):this},ln.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=sr,this._root=this._tail=null,this.__hash=void 0,this.__altered=!0,this):mn()},ln.prototype.push=function(){var t=arguments,e=this.size;return this.withMutations(function(n){bn(n,0,e+t.length);for(var r=0;r<t.length;r++)n.set(e+r,t[r])})},ln.prototype.pop=function(){return bn(this,0,-1)},ln.prototype.unshift=function(){var t=arguments;return this.withMutations(function(e){bn(e,-t.length);for(var n=0;n<t.length;n++)e.set(n,t[n])})},ln.prototype.shift=function(){return bn(this,1)},ln.prototype.merge=function(){return wn(this,void 0,arguments)},ln.prototype.mergeWith=function(t){var e=ir.call(arguments,1);return wn(this,t,e)},ln.prototype.mergeDeep=function(){return wn(this,rn(void 0),arguments)},ln.prototype.mergeDeepWith=function(t){var e=ir.call(arguments,1);return wn(this,rn(t),e)},ln.prototype.setSize=function(t){return bn(this,0,t)},ln.prototype.slice=function(t,e){var n=this.size;return u(t,e,n)?this:bn(this,c(t,n),p(e,n))},ln.prototype.__iterator=function(t,e){var n=0,r=dn(this,e);return new b(function(){var e=r();return e===Wr?N():w(t,n++,e)})},ln.prototype.__iterate=function(t,e){for(var n,r=0,o=dn(this,e);(n=o())!==Wr&&t(n,r++,this)!==!1;);return r},ln.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?vn(this._origin,this._capacity,this._level,this._root,this._tail,t,this.__hash):(this.__ownerID=t,this)},ln.isList=fn;var zr="@@__IMMUTABLE_LIST__@@",Br=ln.prototype;Br[zr]=!0,Br[ar]=Br.remove,Br.setIn=Pr.setIn,Br.deleteIn=Br.removeIn=Pr.removeIn,Br.update=Pr.update,Br.updateIn=Pr.updateIn,Br.mergeIn=Pr.mergeIn,Br.mergeDeepIn=Pr.mergeDeepIn,Br.withMutations=Pr.withMutations,Br.asMutable=Pr.asMutable,Br.asImmutable=Pr.asImmutable,Br.wasAltered=Pr.wasAltered,hn.prototype.removeBefore=function(t,e,n){if(n===e?1<<e:0||0===this.array.length)return this;var r=n>>>e&cr;if(r>=this.array.length)return new hn([],t);var o,i=0===r;if(e>0){var a=this.array[r];if(o=a&&a.removeBefore(t,e-sr,n),o===a&&i)return this
}if(i&&!o)return this;var s=gn(this,t);if(!i)for(var u=0;r>u;u++)s.array[u]=void 0;return o&&(s.array[r]=o),s},hn.prototype.removeAfter=function(t,e,n){if(n===e?1<<e:0||0===this.array.length)return this;var r=n-1>>>e&cr;if(r>=this.array.length)return this;var o,i=r===this.array.length-1;if(e>0){var a=this.array[r];if(o=a&&a.removeAfter(t,e-sr,n),o===a&&i)return this}if(i&&!o)return this;var s=gn(this,t);return i||s.array.pop(),o&&(s.array[r]=o),s};var qr,Wr={};t(Dn,Ue),Dn.of=function(){return this(arguments)},Dn.prototype.toString=function(){return this.__toString("OrderedMap {","}")},Dn.prototype.get=function(t,e){var n=this._map.get(t);return void 0!==n?this._list.get(n)[1]:e},Dn.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this):Sn()},Dn.prototype.set=function(t,e){return xn(this,t,e)},Dn.prototype.remove=function(t){return xn(this,t,pr)},Dn.prototype.wasAltered=function(){return this._map.wasAltered()||this._list.wasAltered()},Dn.prototype.__iterate=function(t,e){var n=this;return this._list.__iterate(function(e){return e&&t(e[1],e[0],n)},e)},Dn.prototype.__iterator=function(t,e){return this._list.fromEntrySeq().__iterator(t,e)},Dn.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map.__ensureOwner(t),n=this._list.__ensureOwner(t);return t?Cn(e,n,t,this.__hash):(this.__ownerID=t,this._map=e,this._list=n,this)},Dn.isOrderedMap=On,Dn.prototype[mr]=!0,Dn.prototype[ar]=Dn.prototype.remove;var Fr;t(In,X),In.of=function(){return this(arguments)},In.prototype.toString=function(){return this.__toString("Stack [","]")},In.prototype.get=function(t,e){for(var n=this._head;n&&t--;)n=n.next;return n?n.value:e},In.prototype.peek=function(){return this._head&&this._head.value},In.prototype.push=function(){if(0===arguments.length)return this;for(var t=this.size+arguments.length,e=this._head,n=arguments.length-1;n>=0;n--)e={value:arguments[n],next:e};return this.__ownerID?(this.size=t,this._head=e,this.__hash=void 0,this.__altered=!0,this):Mn(t,e)},In.prototype.pushAll=function(t){if(t=d(t),0===t.size)return this;se(t.size);var e=this.size,n=this._head;return t.reverse().forEach(function(t){e++,n={value:t,next:n}}),this.__ownerID?(this.size=e,this._head=n,this.__hash=void 0,this.__altered=!0,this):Mn(e,n)},In.prototype.pop=function(){return this.slice(1)},In.prototype.unshift=function(){return this.push.apply(this,arguments)},In.prototype.unshiftAll=function(t){return this.pushAll(t)},In.prototype.shift=function(){return this.pop.apply(this,arguments)},In.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):Tn()},In.prototype.slice=function(t,e){if(u(t,e,this.size))return this;var n=c(t,this.size),r=p(e,this.size);if(r!==this.size)return X.prototype.slice.call(this,t,e);for(var o=this.size-n,i=this._head;n--;)i=i.next;return this.__ownerID?(this.size=o,this._head=i,this.__hash=void 0,this.__altered=!0,this):Mn(o,i)},In.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?Mn(this.size,this._head,t,this.__hash):(this.__ownerID=t,this.__altered=!1,this)},In.prototype.__iterate=function(t,e){if(e)return this.toSeq().cacheResult.__iterate(t,e);for(var n=0,r=this._head;r&&t(r.value,n++,this)!==!1;)r=r.next;return n},In.prototype.__iterator=function(t,e){if(e)return this.toSeq().cacheResult().__iterator(t,e);var n=0,r=this._head;return new b(function(){if(r){var e=r.value;return r=r.next,w(t,n++,e)}return N()})},In.isStack=kn;var Hr="@@__IMMUTABLE_STACK__@@",Kr=In.prototype;Kr[Hr]=!0,Kr.withMutations=Pr.withMutations,Kr.asMutable=Pr.asMutable,Kr.asImmutable=Pr.asImmutable,Kr.wasAltered=Pr.wasAltered;var Xr;t(Rn,Y),Rn.of=function(){return this(arguments)},Rn.fromKeys=function(t){return this(h(t).keySeq())},Rn.prototype.toString=function(){return this.__toString("Set {","}")},Rn.prototype.has=function(t){return this._map.has(t)},Rn.prototype.add=function(t){return Pn(this,this._map.set(t,!0))},Rn.prototype.remove=function(t){return Pn(this,this._map.remove(t))},Rn.prototype.clear=function(){return Pn(this,this._map.clear())},Rn.prototype.union=function(){var t=ir.call(arguments,0);return t=t.filter(function(t){return 0!==t.size}),0===t.length?this:0===this.size&&1===t.length?this.constructor(t[0]):this.withMutations(function(e){for(var n=0;n<t.length;n++)v(t[n]).forEach(function(t){return e.add(t)})})},Rn.prototype.intersect=function(){var t=ir.call(arguments,0);if(0===t.length)return this;t=t.map(function(t){return v(t)});var e=this;return this.withMutations(function(n){e.forEach(function(e){t.every(function(t){return t.contains(e)})||n.remove(e)})})},Rn.prototype.subtract=function(){var t=ir.call(arguments,0);if(0===t.length)return this;t=t.map(function(t){return v(t)});var e=this;return this.withMutations(function(n){e.forEach(function(e){t.some(function(t){return t.contains(e)})&&n.remove(e)})})},Rn.prototype.merge=function(){return this.union.apply(this,arguments)},Rn.prototype.mergeWith=function(){var t=ir.call(arguments,1);return this.union.apply(this,t)},Rn.prototype.sort=function(t){return Vn(Oe(this,t))},Rn.prototype.sortBy=function(t,e){return Vn(Oe(this,e,t))},Rn.prototype.wasAltered=function(){return this._map.wasAltered()},Rn.prototype.__iterate=function(t,e){var n=this;return this._map.__iterate(function(e,r){return t(r,r,n)},e)},Rn.prototype.__iterator=function(t,e){return this._map.map(function(t,e){return e}).__iterator(t,e)},Rn.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map.__ensureOwner(t);return t?this.__make(e,t):(this.__ownerID=t,this._map=e,this)},Rn.isSet=An;var Yr="@@__IMMUTABLE_SET__@@",$r=Rn.prototype;$r[Yr]=!0,$r[ar]=$r.remove,$r.mergeDeep=$r.merge,$r.mergeDeepWith=$r.mergeWith,$r.withMutations=Pr.withMutations,$r.asMutable=Pr.asMutable,$r.asImmutable=Pr.asImmutable,$r.__empty=Un,$r.__make=Ln;var Gr;t(Vn,Rn),Vn.of=function(){return this(arguments)},Vn.fromKeys=function(t){return this(h(t).keySeq())},Vn.prototype.toString=function(){return this.__toString("OrderedSet {","}")},Vn.isOrderedSet=jn;var Jr=Vn.prototype;Jr[mr]=!0,Jr.__empty=Bn,Jr.__make=zn;var Qr;t(qn,K),qn.prototype.toString=function(){return this.__toString(Fn(this)+" {","}")},qn.prototype.has=function(t){return this._defaultValues.hasOwnProperty(t)},qn.prototype.get=function(t,e){if(!this.has(t))return e;var n=this._defaultValues[t];return this._map?this._map.get(t,n):n},qn.prototype.clear=function(){if(this.__ownerID)return this._map&&this._map.clear(),this;var t=Object.getPrototypeOf(this).constructor;return t._empty||(t._empty=Wn(this,Ye()))},qn.prototype.set=function(t,e){if(!this.has(t))throw new Error('Cannot set unknown key "'+t+'" on '+Fn(this));var n=this._map&&this._map.set(t,e);return this.__ownerID||n===this._map?this:Wn(this,n)},qn.prototype.remove=function(t){if(!this.has(t))return this;var e=this._map&&this._map.remove(t);return this.__ownerID||e===this._map?this:Wn(this,e)},qn.prototype.wasAltered=function(){return this._map.wasAltered()},qn.prototype.__iterator=function(t,e){var n=this;return h(this._defaultValues).map(function(t,e){return n.get(e)}).__iterator(t,e)},qn.prototype.__iterate=function(t,e){var n=this;return h(this._defaultValues).map(function(t,e){return n.get(e)}).__iterate(t,e)},qn.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map&&this._map.__ensureOwner(t);return t?Wn(this,e,t):(this.__ownerID=t,this._map=e,this)};var Zr=qn.prototype;Zr[ar]=Zr.remove,Zr.deleteIn=Zr.removeIn=Pr.removeIn,Zr.merge=Pr.merge,Zr.mergeWith=Pr.mergeWith,Zr.mergeIn=Pr.mergeIn,Zr.mergeDeep=Pr.mergeDeep,Zr.mergeDeepWith=Pr.mergeDeepWith,Zr.mergeDeepIn=Pr.mergeDeepIn,Zr.setIn=Pr.setIn,Zr.update=Pr.update,Zr.updateIn=Pr.updateIn,Zr.withMutations=Pr.withMutations,Zr.asMutable=Pr.asMutable,Zr.asImmutable=Pr.asImmutable,t(Kn,M),Kn.prototype.toString=function(){return 0===this.size?"Range []":"Range [ "+this._start+"..."+this._end+(this._step>1?" by "+this._step:"")+" ]"},Kn.prototype.get=function(t,e){return this.has(t)?this._start+a(this,t)*this._step:e},Kn.prototype.contains=function(t){var e=(t-this._start)/this._step;return e>=0&&e<this.size&&e===Math.floor(e)},Kn.prototype.slice=function(t,e){return u(t,e,this.size)?this:(t=c(t,this.size),e=p(e,this.size),t>=e?new Kn(0,0):new Kn(this.get(t,this._end),this.get(e,this._end),this._step))},Kn.prototype.indexOf=function(t){var e=t-this._start;if(e%this._step===0){var n=e/this._step;if(n>=0&&n<this.size)return n}return-1},Kn.prototype.lastIndexOf=function(t){return this.indexOf(t)},Kn.prototype.__iterate=function(t,e){for(var n=this.size-1,r=this._step,o=e?this._start+n*r:this._start,i=0;n>=i;i++){if(t(o,i,this)===!1)return i+1;o+=e?-r:r}return i},Kn.prototype.__iterator=function(t,e){var n=this.size-1,r=this._step,o=e?this._start+n*r:this._start,i=0;return new b(function(){var a=o;return o+=e?-r:r,i>n?N():w(t,i++,a)})},Kn.prototype.equals=function(t){return t instanceof Kn?this._start===t._start&&this._end===t._end&&this._step===t._step:Hn(this,t)};var to;t(Xn,M),Xn.prototype.toString=function(){return 0===this.size?"Repeat []":"Repeat [ "+this._value+" "+this.size+" times ]"},Xn.prototype.get=function(t,e){return this.has(t)?this._value:e},Xn.prototype.contains=function(t){return $(this._value,t)},Xn.prototype.slice=function(t,e){var n=this.size;return u(t,e,n)?this:new Xn(this._value,p(e,n)-c(t,n))},Xn.prototype.reverse=function(){return this},Xn.prototype.indexOf=function(t){return $(this._value,t)?0:-1},Xn.prototype.lastIndexOf=function(t){return $(this._value,t)?this.size:-1},Xn.prototype.__iterate=function(t){for(var e=0;e<this.size;e++)if(t(this._value,e,this)===!1)return e+1;return e},Xn.prototype.__iterator=function(t){var e=this,n=0;return new b(function(){return n<e.size?w(t,n++,e._value):N()})},Xn.prototype.equals=function(t){return t instanceof Xn?$(this._value,t._value):Hn(t)};var eo;f.Iterator=b,Yn(f,{toArray:function(){se(this.size);var t=new Array(this.size||0);return this.valueSeq().__iterate(function(e,n){t[n]=e}),t},toIndexedSeq:function(){return new ce(this)},toJS:function(){return this.toSeq().map(function(t){return t&&"function"==typeof t.toJS?t.toJS():t}).__toJS()},toJSON:function(){return this.toSeq().map(function(t){return t&&"function"==typeof t.toJSON?t.toJSON():t}).__toJS()},toKeyedSeq:function(){return new ue(this,!0)},toMap:function(){return Ue(this.toKeyedSeq())},toObject:function(){se(this.size);var t={};return this.__iterate(function(e,n){t[n]=e}),t},toOrderedMap:function(){return Dn(this.toKeyedSeq())},toOrderedSet:function(){return Vn(y(this)?this.valueSeq():this)},toSet:function(){return Rn(y(this)?this.valueSeq():this)},toSetSeq:function(){return new pe(this)},toSeq:function(){return _(this)?this.toIndexedSeq():y(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return In(y(this)?this.valueSeq():this)},toList:function(){return ln(y(this)?this.valueSeq():this)},toString:function(){return"[Iterable]"},__toString:function(t,e){return 0===this.size?t+e:t+" "+this.toSeq().map(this.__toStringMapper).join(", ")+" "+e},concat:function(){var t=ir.call(arguments,0);return Ie(this,be(this,t))},contains:function(t){return this.some(function(e){return $(e,t)})},entries:function(){return this.__iterator(gr)},every:function(t,e){se(this.size);var n=!0;return this.__iterate(function(r,o,i){return t.call(e,r,o,i)?void 0:(n=!1,!1)}),n},filter:function(t,e){return Ie(this,ve(this,t,e,!0))},find:function(t,e,n){var r=this.findEntry(t,e);return r?r[1]:n},findEntry:function(t,e){var n;return this.__iterate(function(r,o,i){return t.call(e,r,o,i)?(n=[o,r],!1):void 0}),n},findLastEntry:function(t,e){return this.toSeq().reverse().findEntry(t,e)},forEach:function(t,e){return se(this.size),this.__iterate(e?t.bind(e):t)},join:function(t){se(this.size),t=void 0!==t?""+t:",";var e="",n=!0;return this.__iterate(function(r){n?n=!1:e+=t,e+=null!==r&&void 0!==r?r:""}),e},keys:function(){return this.__iterator(yr)},map:function(t,e){return Ie(this,he(this,t,e))},reduce:function(t,e,n){se(this.size);var r,o;return arguments.length<2?o=!0:r=e,this.__iterate(function(e,i,a){o?(o=!1,r=e):r=t.call(n,r,e,i,a)}),r},reduceRight:function(){var t=this.toKeyedSeq().reverse();return t.reduce.apply(t,arguments)},reverse:function(){return Ie(this,de(this,!0))},slice:function(t,e){return Ie(this,_e(this,t,e,!0))},some:function(t,e){return!this.every(Jn(t),e)},sort:function(t){return Ie(this,Oe(this,t))},values:function(){return this.__iterator(_r)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return void 0!==this.size?0===this.size:!this.some(function(){return!0})},count:function(t,e){return i(t?this.toSeq().filter(t,e):this)},countBy:function(t,e){return me(this,t,e)},equals:function(t){return Hn(this,t)},entrySeq:function(){var t=this;if(t._cache)return new R(t._cache);var e=t.toSeq().map(Gn).toIndexedSeq();return e.fromEntrySeq=function(){return t.toSeq()},e},filterNot:function(t,e){return this.filter(Jn(t),e)},findLast:function(t,e,n){return this.toKeyedSeq().reverse().find(t,e,n)},first:function(){return this.find(s)},flatMap:function(t,e){return Ie(this,Ne(this,t,e))},flatten:function(t){return Ie(this,we(this,t,!0))},fromEntrySeq:function(){return new le(this)},get:function(t,e){return this.find(function(e,n){return $(n,t)},void 0,e)},getIn:function(t,e){for(var n,r=this,o=Le(t);!(n=o.next()).done;){var i=n.value;if(r=r&&r.get?r.get(i,pr):pr,r===pr)return e}return r},groupBy:function(t,e){return ye(this,t,e)},has:function(t){return this.get(t,pr)!==pr},hasIn:function(t){return this.getIn(t,pr)!==pr},isSubset:function(t){return t="function"==typeof t.contains?t:f(t),this.every(function(e){return t.contains(e)})},isSuperset:function(t){return t.isSubset(this)},keySeq:function(){return this.toSeq().map($n).toIndexedSeq()},last:function(){return this.toSeq().reverse().first()},max:function(t){return Ce(this,t)},maxBy:function(t,e){return Ce(this,e,t)},min:function(t){return Ce(this,t?Qn(t):er)},minBy:function(t,e){return Ce(this,e?Qn(e):er,t)},rest:function(){return this.slice(1)},skip:function(t){return this.slice(Math.max(0,t))},skipLast:function(t){return Ie(this,this.toSeq().reverse().skip(t).reverse())},skipWhile:function(t,e){return Ie(this,Ee(this,t,e,!0))},skipUntil:function(t,e){return this.skipWhile(Jn(t),e)},sortBy:function(t,e){return Ie(this,Oe(this,e,t))},take:function(t){return this.slice(0,Math.max(0,t))},takeLast:function(t){return Ie(this,this.toSeq().reverse().take(t).reverse())},takeWhile:function(t,e){return Ie(this,ge(this,t,e))},takeUntil:function(t,e){return this.takeWhile(Jn(t),e)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=nr(this))}});var no=f.prototype;no[hr]=!0,no[wr]=no.values,no.__toJS=no.toArray,no.__toStringMapper=Zn,no.inspect=no.toSource=function(){return this.toString()},no.chain=no.flatMap,function(){try{Object.defineProperty(no,"length",{get:function(){if(!f.noLengthWarning){var t;try{throw new Error}catch(e){t=e.stack}if(-1===t.indexOf("_wrapObject"))return console&&console.warn&&console.warn("iterable.length has been deprecated, use iterable.size or iterable.count(). This warning will become a silent error in a future version. "+t),this.size}}})}catch(t){}}(),Yn(h,{flip:function(){return Ie(this,fe(this))},findKey:function(t,e){var n=this.findEntry(t,e);return n&&n[0]},findLastKey:function(t,e){return this.toSeq().reverse().findKey(t,e)},keyOf:function(t){return this.findKey(function(e){return $(e,t)})},lastKeyOf:function(t){return this.findLastKey(function(e){return $(e,t)})},mapEntries:function(t,e){var n=this,r=0;return Ie(this,this.toSeq().map(function(o,i){return t.call(e,[i,o],r++,n)}).fromEntrySeq())},mapKeys:function(t,e){var n=this;return Ie(this,this.toSeq().flip().map(function(r,o){return t.call(e,r,o,n)}).flip())}});var ro=h.prototype;ro[dr]=!0,ro[wr]=no.entries,ro.__toJS=no.toObject,ro.__toStringMapper=function(t,e){return e+": "+Zn(t)},Yn(d,{toKeyedSeq:function(){return new ue(this,!1)},filter:function(t,e){return Ie(this,ve(this,t,e,!1))},findIndex:function(t,e){var n=this.findEntry(t,e);return n?n[0]:-1},indexOf:function(t){var e=this.toKeyedSeq().keyOf(t);return void 0===e?-1:e},lastIndexOf:function(t){return this.toSeq().reverse().indexOf(t)},reverse:function(){return Ie(this,de(this,!1))},slice:function(t,e){return Ie(this,_e(this,t,e,!1))},splice:function(t,e){var n=arguments.length;if(e=Math.max(0|e,0),0===n||2===n&&!e)return this;t=c(t,this.size);var r=this.slice(0,t);return Ie(this,1===n?r:r.concat(o(arguments,2),this.slice(t+e)))},findLastIndex:function(t,e){var n=this.toKeyedSeq().findLastKey(t,e);return void 0===n?-1:n},first:function(){return this.get(0)},flatten:function(t){return Ie(this,we(this,t,!1))},get:function(t,e){return t=a(this,t),0>t||1/0===this.size||void 0!==this.size&&t>this.size?e:this.find(function(e,n){return n===t},void 0,e)},has:function(t){return t=a(this,t),t>=0&&(void 0!==this.size?1/0===this.size||t<this.size:-1!==this.indexOf(t))},interpose:function(t){return Ie(this,De(this,t))},interleave:function(){var t=[this].concat(o(arguments)),e=xe(this.toSeq(),M.of,t),n=e.flatten(!0);return e.size&&(n.size=e.size*t.length),Ie(this,n)},last:function(){return this.get(-1)},skipWhile:function(t,e){return Ie(this,Ee(this,t,e,!1))},zip:function(){var t=[this].concat(o(arguments));return Ie(this,xe(this,tr,t))},zipWith:function(t){var e=o(arguments);return e[0]=this,Ie(this,xe(this,t,e))}}),d.prototype[vr]=!0,d.prototype[mr]=!0,Yn(v,{get:function(t,e){return this.has(t)?t:e},contains:function(t){return this.has(t)},keySeq:function(){return this.valueSeq()}}),v.prototype.has=no.contains,Yn(k,h.prototype),Yn(M,d.prototype),Yn(T,v.prototype),Yn(K,h.prototype),Yn(X,d.prototype),Yn(Y,v.prototype);var oo={Iterable:f,Seq:I,Collection:H,Map:Ue,OrderedMap:Dn,List:ln,Stack:In,Set:Rn,OrderedSet:Vn,Record:qn,Range:Kn,Repeat:Xn,is:$,fromJS:G};return oo})},function(t,e,n){function r(){}function o(t,e,n){function o(){u.parentNode&&u.parentNode.removeChild(u),window[v]=r,c&&clearTimeout(c)}function s(){window[v]&&o()}"function"==typeof e&&(n=e,e={}),e||(e={});var u,c,p=e.prefix||"__jp",l=e.param||"callback",f=null!=e.timeout?e.timeout:6e4,h=encodeURIComponent,d=document.getElementsByTagName("script")[0]||document.head,v=p+a++;return f&&(c=setTimeout(function(){o(),n&&n(new Error("Timeout"))},f)),window[v]=function(t){i("jsonp got",t),o(),n&&n(null,t)},t+=(~t.indexOf("?")?"&":"?")+l+"="+h(v),t=t.replace("?&","?"),i('jsonp req "%s"',t),u=document.createElement("script"),u.src=t,d.parentNode.insertBefore(u,d),s}var i=n(97)("jsonp");t.exports=o;var a=0},function(t,e,n){function r(){return"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31}function o(){var t=arguments,n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),!n)return t;var r="color: "+this.color;t=[t[0],r,"color: inherit"].concat(Array.prototype.slice.call(t,1));var o=0,i=0;return t[0].replace(/%[a-z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))}),t.splice(i,0,r),t}function i(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function a(t){try{null==t?u.removeItem("debug"):u.debug=t}catch(e){}}function s(){var t;try{t=u.debug}catch(e){}return t}e=t.exports=n(98),e.log=i,e.formatArgs=o,e.save=a,e.load=s,e.useColors=r;var u;u="undefined"!=typeof chrome&&"undefined"!=typeof chrome.storage?chrome.storage.local:window.localStorage,e.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],e.formatters.j=function(t){return JSON.stringify(t)},e.enable(s())},function(t,e,n){function r(){return e.colors[p++%e.colors.length]}function o(t){function n(){}function o(){var t=o,n=+new Date,i=n-(c||n);t.diff=i,t.prev=c,t.curr=n,c=n,null==t.useColors&&(t.useColors=e.useColors()),null==t.color&&t.useColors&&(t.color=r());var a=Array.prototype.slice.call(arguments);a[0]=e.coerce(a[0]),"string"!=typeof a[0]&&(a=["%o"].concat(a));var s=0;a[0]=a[0].replace(/%([a-z%])/g,function(n,r){if("%%"===n)return n;s++;var o=e.formatters[r];if("function"==typeof o){var i=a[s];n=o.call(t,i),a.splice(s,1),s--}return n}),"function"==typeof e.formatArgs&&(a=e.formatArgs.apply(t,a));var u=o.log||e.log||console.log.bind(console);u.apply(t,a)}n.enabled=!1,o.enabled=!0;var i=e.enabled(t)?o:n;return i.namespace=t,i}function i(t){e.save(t);for(var n=(t||"").split(/[\s,]+/),r=n.length,o=0;r>o;o++)n[o]&&(t=n[o].replace(/\*/g,".*?"),"-"===t[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")))}function a(){e.enable("")}function s(t){var n,r;for(n=0,r=e.skips.length;r>n;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;r>n;n++)if(e.names[n].test(t))return!0;return!1}function u(t){return t instanceof Error?t.stack||t.message:t}e=t.exports=o,e.coerce=u,e.disable=a,e.enable=i,e.enabled=s,e.humanize=n(99),e.names=[],e.skips=[],e.formatters={};var c,p=0},function(t){function e(t){var e=/^((?:\d+)?\.?\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(t);if(e){var n=parseFloat(e[1]),r=(e[2]||"ms").toLowerCase();switch(r){case"years":case"year":case"y":return n*c;case"days":case"day":case"d":return n*u;case"hours":case"hour":case"h":return n*s;case"minutes":case"minute":case"m":return n*a;case"seconds":case"second":case"s":return n*i;case"ms":return n}}}function n(t){return t>=u?Math.round(t/u)+"d":t>=s?Math.round(t/s)+"h":t>=a?Math.round(t/a)+"m":t>=i?Math.round(t/i)+"s":t+"ms"}function r(t){return o(t,u,"day")||o(t,s,"hour")||o(t,a,"minute")||o(t,i,"second")||t+" ms"}function o(t,e,n){return e>t?void 0:1.5*e>t?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}var i=1e3,a=60*i,s=60*a,u=24*s,c=365.25*u;t.exports=function(t,o){return o=o||{},"string"==typeof t?e(t):o["long"]?r(t):n(t)}},function(t,e,n){function r(t){return null===t||void 0===t}function o(t){return t&&"object"==typeof t&&"number"==typeof t.length?"function"!=typeof t.copy||"function"!=typeof t.slice?!1:t.length>0&&"number"!=typeof t[0]?!1:!0:!1}function i(t,e,n){var i,p;if(r(t)||r(e))return!1;if(t.prototype!==e.prototype)return!1;if(u(t))return u(e)?(t=a.call(t),e=a.call(e),c(t,e,n)):!1;if(o(t)){if(!o(e))return!1;if(t.length!==e.length)return!1;for(i=0;i<t.length;i++)if(t[i]!==e[i])return!1;return!0}try{var l=s(t),f=s(e)}catch(h){return!1}if(l.length!=f.length)return!1;for(l.sort(),f.sort(),i=l.length-1;i>=0;i--)if(l[i]!=f[i])return!1;for(i=l.length-1;i>=0;i--)if(p=l[i],!c(t[p],e[p],n))return!1;return typeof t==typeof e}var a=Array.prototype.slice,s=n(102),u=n(101),c=t.exports=function(t,e,n){return n||(n={}),t===e?!0:t instanceof Date&&e instanceof Date?t.getTime()===e.getTime():"object"!=typeof t&&"object"!=typeof e?n.strict?t===e:t==e:i(t,e,n)}},function(t,e){function n(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function r(t){return t&&"object"==typeof t&&"number"==typeof t.length&&Object.prototype.hasOwnProperty.call(t,"callee")&&!Object.prototype.propertyIsEnumerable.call(t,"callee")||!1}var o="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();e=t.exports=o?n:r,e.supported=n,e.unsupported=r},function(t,e){function n(t){var e=[];for(var n in t)e.push(n);return e}e=t.exports="function"==typeof Object.keys?Object.keys:n,e.shim=n},function(t){"use strict";function e(t){return t._instancesByReactRootID||t._instancesByContainerID||[]}t.exports=e},function(t,e,n){(function(t){!function(){var e=n(32),r=n(30),o=n(7);t.makeHot=t.hot.data?t.hot.data.makeHot:e(function(){return r.getRootInstances(o)})}(),function(){"use strict";var e=function(t){return t&&t.__esModule?t["default"]:t},r=e(n(39)),o=e(n(41)),i=e(n(107));t.exports=o("App",function(t){var e=t.entries,n=e.map(function(t){return r.createElement(i,{name:t.get("name")})}).toArray();return r.createElement("div",{className:"faluntipping"},n)})}(),!function(){if(t.hot.dispose(function(e){e.makeHot=t.makeHot}),t.exports&&t.makeHot){var e=n(31),r=!1;e(t)&&(r=!0);var o=!0&&r;o&&t.hot.accept(function(t){t&&console.error("Cannot not apply hot update to app.js: "+t.message)})}}()}).call(e,n(29)(t))},function(t,e,n){(function(t){!function(){var e=n(32),r=n(30),o=n(7);t.makeHot=t.hot.data?t.hot.data.makeHot:e(function(){return r.getRootInstances(o)})}(),function(){"use strict";var e=function(t){return t&&t.__esModule?t["default"]:t},r=e(n(96));t.exports=function(t){console.log("getting data!"),r("https://spreadsheets.google.com/feeds/list/1HaBpOgbo0uHEDc3zfFJx_XwI4y6ZGkX9I2Wtii0VhmE/1/public/values?alt=json-in-script",function(e,n){console.log(n);var r=n.feed.entry.map(function(t){var e={name:t.gsx$navn.$t},n=Object.keys(t).filter(function(t){return-1!=t.indexOf("gsx$plass_")}).map(function(e){return t[e].$t});for(e.bets=[];n.length>0;)e.bets.push({1:n[0],2:n[1],3:n[2]}),n=n.slice(3);return e.medalCount={gold:t.gsx$antallgull.$t,silver:t.gsx$antallsølv.$t,bronze:t.gsx$antallbronse.$t},e});t({entries:r})})}}(),!function(){if(t.hot.dispose(function(e){e.makeHot=t.makeHot}),t.exports&&t.makeHot){var e=n(31),r=!1;e(t)&&(r=!0);var o=!0&&r;o&&t.hot.accept(function(t){t&&console.error("Cannot not apply hot update to googleData.js: "+t.message)})}}()}).call(e,n(29)(t))},function(t,e,n){(function(t){!function(){var e=n(32),r=n(30),o=n(7);t.makeHot=t.hot.data?t.hot.data.makeHot:e(function(){return r.getRootInstances(o)})}(),function(){"use strict";var t=function(t){return t&&t.__esModule?t["default"]:t},e=t(n(39)),r=(t(n(41)),t(n(89))),o=t(n(95)),i=t(n(105)),a=t(n(104));n(184);var s=r({entries:[]});i(function(t){s.cursor().update(function(){return o.fromJS(t)})});var u=function(){return e.render(a({entries:s.cursor("entries")}),document.body)};u(),s.on("swap",u)}(),!function(){if(t.hot.dispose(function(e){e.makeHot=t.makeHot}),t.exports&&t.makeHot){var e=n(31),r=!1;e(t)&&(r=!0);var o=!0&&r;o&&t.hot.accept(function(t){t&&console.error("Cannot not apply hot update to index.js: "+t.message)})}}()}).call(e,n(29)(t))},function(t,e,n){(function(t){!function(){var e=n(32),r=n(30),o=n(7);t.makeHot=t.hot.data?t.hot.data.makeHot:e(function(){return r.getRootInstances(o)})}(),function(){"use strict";var e=function(t){return t&&t.__esModule?t["default"]:t},r=e(n(39)),o=e(n(41));t.exports=o("User",function(t){var e=t.name;return r.createElement("div",{className:"user"},e)})}(),!function(){if(t.hot.dispose(function(e){e.makeHot=t.makeHot}),t.exports&&t.makeHot){var e=n(31),r=!1;e(t)&&(r=!0);var o=!0&&r;o&&t.hot.accept(function(t){t&&console.error("Cannot not apply hot update to user.js: "+t.message)})}}()}).call(e,n(29)(t))},function(t,e,n){function r(t){return t?"[object Object]"===Object.prototype.toString.call(t.props)&&o(t.type):!1}var o=n(59);t.exports=r},function(t){"use strict";function e(t,e){var n=e.bind(t);n.__reactBoundContext=t,n.__reactBoundMethod=e,n.__reactBoundArguments=null;var r=t.constructor.displayName,o=n.bind;return n.bind=function(i){var a=Array.prototype.slice.call(arguments,1);if(i!==t&&null!==i)console.warn("bind(): React component methods may only be bound to the component instance. See "+r);else if(!a.length)return console.warn("bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See "+r),n;var s=o.apply(n,arguments);return s.__reactBoundContext=t,s.__reactBoundMethod=e,s.__reactBoundArguments=a,s},n}t.exports=function(t){for(var n in t.__reactAutoBindMap)if(t.__reactAutoBindMap.hasOwnProperty(n)&&(!t.hasOwnProperty(n)||t[n].__reactBoundContext!==t)){var r=t.__reactAutoBindMap[n];t[n]=e(t,r)}}},function(t,e,n){"use strict";function r(t){t._instance&&(t=t._instance),o(t),t.forceUpdate&&t.forceUpdate(),t._renderedComponent&&r(t._renderedComponent);for(var e in t._renderedChildren)r(t._renderedChildren[e])}var o=n(109);t.exports=r},function(t){"use strict";t.exports=function(){function t(t){return function(){return o[t]?o[t].apply(this,arguments):void 0}}function e(e,n){e[n]=o[n],"function"==typeof e[n]&&"type"!==n&&"constructor"!==n&&(e[n]=t(n),o[n].isReactClassApproved&&(e[n].isReactClassApproved=o[n].isReactClassApproved),e.__reactAutoBindMap&&e.__reactAutoBindMap[n]&&(e.__reactAutoBindMap[n]=e[n]))}function n(t){o={},Object.getOwnPropertyNames(t).forEach(function(e){o[e]=t[e]})}function r(t){i.push(t),i.forEach(function(t){Object.getOwnPropertyNames(o).forEach(function(n){e(t,n)})})}var o,i=[];return function(t){t.__isAssimilatedByReactHotAPI||(n(t),r(t),t.__isAssimilatedByReactHotAPI=!0)}}},function(t,e,n){"use strict";var r=n(113);t.exports=function(t){if("function"!=typeof t)throw new Error("Expected getRootInstances to be a function.");var e={};return function(n,o){if(o=o||n.displayName||n.name,!o)return console.error("Hot reload is disabled for one of your types. To enable it, pass a string uniquely identifying this class within this current module as a second parameter to makeHot."),n;e[o]||(e[o]=r(t));var i=e[o];return i(n)}}},function(t,e,n){"use strict";function r(t){if(!t.hasOwnProperty("type"))return!1;var e=Object.getOwnPropertyDescriptor(t,"type");return"function"==typeof e.get?!1:!0}function o(t){var e=t.prototype,n=e&&"function"==typeof e.render;return!n&&r(t)&&(e=t.type.prototype),e}var i=n(111),a=n(114);t.exports=function(t){var e=i(),n=null;return function(r){var i=o(r);return e(i),n&&a(t),n||(n=r)}}},function(t,e,n){var r=n(110),o=!1;t.exports=function(t){function e(){o=!1;var e=t();for(var n in e)e.hasOwnProperty(n)&&r(e[n])}o||setTimeout(e)}},function(t,e,n){"use strict";function r(){var t=window.opera;return"object"==typeof t&&"function"==typeof t.version&&parseInt(t.version(),10)<=12}function o(t){return(t.ctrlKey||t.altKey||t.metaKey)&&!(t.ctrlKey&&t.altKey)}var i=n(8),a=n(21),s=n(5),u=n(158),c=n(14),p=s.canUseDOM&&"TextEvent"in window&&!("documentMode"in document||r()),l=32,f=String.fromCharCode(l),h=i.topLevelTypes,d={beforeInput:{phasedRegistrationNames:{bubbled:c({onBeforeInput:null}),captured:c({onBeforeInputCapture:null})},dependencies:[h.topCompositionEnd,h.topKeyPress,h.topTextInput,h.topPaste]}},v=null,m=!1,y={eventTypes:d,extractEvents:function(t,e,n,r){var i;if(p)switch(t){case h.topKeyPress:var s=r.which;if(s!==l)return;m=!0,i=f;break;case h.topTextInput:if(i=r.data,i===f&&m)return;break;default:return}else{switch(t){case h.topPaste:v=null;break;case h.topKeyPress:r.which&&!o(r)&&(v=String.fromCharCode(r.which));break;case h.topCompositionEnd:v=r.data}if(null===v)return;i=v}if(i){var c=u.getPooled(d.beforeInput,n,r);return c.data=i,v=null,a.accumulateTwoPhaseDispatches(c),c}}};t.exports=y},function(t,e,n){"use strict";function r(t){return"SELECT"===t.nodeName||"INPUT"===t.nodeName&&"file"===t.type}function o(t){var e=N.getPooled(x.change,k,t);E.accumulateTwoPhaseDispatches(e),w.batchedUpdates(i,e)}function i(t){g.enqueueEvents(t),g.processEventQueue()}function a(t,e){I=t,k=e,I.attachEvent("onchange",o)}function s(){I&&(I.detachEvent("onchange",o),I=null,k=null)}function u(t,e,n){return t===S.topChange?n:void 0}function c(t,e,n){t===S.topFocus?(s(),a(e,n)):t===S.topBlur&&s()}function p(t,e){I=t,k=e,M=t.value,T=Object.getOwnPropertyDescriptor(t.constructor.prototype,"value"),Object.defineProperty(I,"value",P),I.attachEvent("onpropertychange",f)}function l(){I&&(delete I.value,I.detachEvent("onpropertychange",f),I=null,k=null,M=null,T=null)}function f(t){if("value"===t.propertyName){var e=t.srcElement.value;e!==M&&(M=e,o(t))}}function h(t,e,n){return t===S.topInput?n:void 0}function d(t,e,n){t===S.topFocus?(l(),p(e,n)):t===S.topBlur&&l()}function v(t){return t!==S.topSelectionChange&&t!==S.topKeyUp&&t!==S.topKeyDown||!I||I.value===M?void 0:(M=I.value,k)}function m(t){return"INPUT"===t.nodeName&&("checkbox"===t.type||"radio"===t.type)
}function y(t,e,n){return t===S.topClick?n:void 0}var _=n(8),g=n(26),E=n(21),b=n(5),w=n(12),N=n(19),D=n(56),O=n(83),C=n(14),S=_.topLevelTypes,x={change:{phasedRegistrationNames:{bubbled:C({onChange:null}),captured:C({onChangeCapture:null})},dependencies:[S.topBlur,S.topChange,S.topClick,S.topFocus,S.topInput,S.topKeyDown,S.topKeyUp,S.topSelectionChange]}},I=null,k=null,M=null,T=null,R=!1;b.canUseDOM&&(R=D("change")&&(!("documentMode"in document)||document.documentMode>8));var A=!1;b.canUseDOM&&(A=D("input")&&(!("documentMode"in document)||document.documentMode>9));var P={get:function(){return T.get.call(this)},set:function(t){M=""+t,T.set.call(this,t)}},L={eventTypes:x,extractEvents:function(t,e,n,o){var i,a;if(r(e)?R?i=u:a=c:O(e)?A?i=h:(i=v,a=d):m(e)&&(i=y),i){var s=i(t,e,n);if(s){var p=N.getPooled(x.change,s,o);return E.accumulateTwoPhaseDispatches(p),p}}a&&a(t,e,n)}};t.exports=L},function(t){"use strict";var e=0,n={createReactRootIndex:function(){return e++}};t.exports=n},function(t,e,n){"use strict";function r(t){switch(t){case _.topCompositionStart:return E.compositionStart;case _.topCompositionEnd:return E.compositionEnd;case _.topCompositionUpdate:return E.compositionUpdate}}function o(t,e){return t===_.topKeyDown&&e.keyCode===v}function i(t,e){switch(t){case _.topKeyUp:return-1!==d.indexOf(e.keyCode);case _.topKeyDown:return e.keyCode!==v;case _.topKeyPress:case _.topMouseDown:case _.topBlur:return!0;default:return!1}}function a(t){this.root=t,this.startSelection=p.getSelection(t),this.startValue=this.getText()}var s=n(8),u=n(21),c=n(5),p=n(47),l=n(155),f=n(55),h=n(14),d=[9,13,27,32],v=229,m=c.canUseDOM&&"CompositionEvent"in window,y=!m||"documentMode"in document&&document.documentMode>8&&document.documentMode<=11,_=s.topLevelTypes,g=null,E={compositionEnd:{phasedRegistrationNames:{bubbled:h({onCompositionEnd:null}),captured:h({onCompositionEndCapture:null})},dependencies:[_.topBlur,_.topCompositionEnd,_.topKeyDown,_.topKeyPress,_.topKeyUp,_.topMouseDown]},compositionStart:{phasedRegistrationNames:{bubbled:h({onCompositionStart:null}),captured:h({onCompositionStartCapture:null})},dependencies:[_.topBlur,_.topCompositionStart,_.topKeyDown,_.topKeyPress,_.topKeyUp,_.topMouseDown]},compositionUpdate:{phasedRegistrationNames:{bubbled:h({onCompositionUpdate:null}),captured:h({onCompositionUpdateCapture:null})},dependencies:[_.topBlur,_.topCompositionUpdate,_.topKeyDown,_.topKeyPress,_.topKeyUp,_.topMouseDown]}};a.prototype.getText=function(){return this.root.value||this.root[f()]},a.prototype.getData=function(){var t=this.getText(),e=this.startSelection.start,n=this.startValue.length-this.startSelection.end;return t.substr(e,t.length-n-e)};var b={eventTypes:E,extractEvents:function(t,e,n,s){var c,p;if(m?c=r(t):g?i(t,s)&&(c=E.compositionEnd):o(t,s)&&(c=E.compositionStart),y&&(g||c!==E.compositionStart?c===E.compositionEnd&&g&&(p=g.getData(),g=null):g=new a(e)),c){var f=l.getPooled(c,n,s);return p&&(f.data=p),u.accumulateTwoPhaseDispatches(f),f}}};t.exports=b},function(t,e,n){(function(e){"use strict";function r(t,e,n){t.insertBefore(e,t.childNodes[n]||null)}var o,i=n(120),a=n(67),s=n(55),u=n(2),c=s();o="textContent"===c?function(t,e){t.textContent=e}:function(t,e){for(;t.firstChild;)t.removeChild(t.firstChild);if(e){var n=t.ownerDocument||document;t.appendChild(n.createTextNode(e))}};var p={dangerouslyReplaceNodeWithMarkup:i.dangerouslyReplaceNodeWithMarkup,updateTextContent:o,processUpdates:function(t,n){for(var s,c=null,p=null,l=0;s=t[l];l++)if(s.type===a.MOVE_EXISTING||s.type===a.REMOVE_NODE){var f=s.fromIndex,h=s.parentNode.childNodes[f],d=s.parentID;"production"!==e.env.NODE_ENV?u(h,"processUpdates(): Unable to find child %s of element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.",f,d):u(h),c=c||{},c[d]=c[d]||[],c[d][f]=h,p=p||[],p.push(h)}var v=i.dangerouslyRenderMarkup(n);if(p)for(var m=0;m<p.length;m++)p[m].parentNode.removeChild(p[m]);for(var y=0;s=t[y];y++)switch(s.type){case a.INSERT_MARKUP:r(s.parentNode,v[s.markupIndex],s.toIndex);break;case a.MOVE_EXISTING:r(s.parentNode,c[s.parentID][s.fromIndex],s.toIndex);break;case a.TEXT_CONTENT:o(s.parentNode,s.textContent);break;case a.REMOVE_NODE:}}};t.exports=p}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(t){return t.substring(1,t.indexOf(" "))}var o=n(5),i=n(167),a=n(13),s=n(80),u=n(2),c=/^(<[^ \/>]+)/,p="data-danger-index",l={dangerouslyRenderMarkup:function(t){"production"!==e.env.NODE_ENV?u(o.canUseDOM,"dangerouslyRenderMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use React.renderToString for server rendering."):u(o.canUseDOM);for(var n,l={},f=0;f<t.length;f++)"production"!==e.env.NODE_ENV?u(t[f],"dangerouslyRenderMarkup(...): Missing markup."):u(t[f]),n=r(t[f]),n=s(n)?n:"*",l[n]=l[n]||[],l[n][f]=t[f];var h=[],d=0;for(n in l)if(l.hasOwnProperty(n)){var v=l[n];for(var m in v)if(v.hasOwnProperty(m)){var y=v[m];v[m]=y.replace(c,"$1 "+p+'="'+m+'" ')}var _=i(v.join(""),a);for(f=0;f<_.length;++f){var g=_[f];g.hasAttribute&&g.hasAttribute(p)?(m=+g.getAttribute(p),g.removeAttribute(p),"production"!==e.env.NODE_ENV?u(!h.hasOwnProperty(m),"Danger: Assigning to an already-occupied result index."):u(!h.hasOwnProperty(m)),h[m]=g,d+=1):"production"!==e.env.NODE_ENV&&console.error("Danger: Discarding unexpected node:",g)}}return"production"!==e.env.NODE_ENV?u(d===h.length,"Danger: Did not assign to every index of resultList."):u(d===h.length),"production"!==e.env.NODE_ENV?u(h.length===t.length,"Danger: Expected markup to render %s nodes, but rendered %s.",t.length,h.length):u(h.length===t.length),h},dangerouslyReplaceNodeWithMarkup:function(t,n){"production"!==e.env.NODE_ENV?u(o.canUseDOM,"dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use React.renderToString for server rendering."):u(o.canUseDOM),"production"!==e.env.NODE_ENV?u(n,"dangerouslyReplaceNodeWithMarkup(...): Missing markup."):u(n),"production"!==e.env.NODE_ENV?u("html"!==t.tagName.toLowerCase(),"dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See renderComponentToString()."):u("html"!==t.tagName.toLowerCase());var r=i(n,a)[0];t.parentNode.replaceChild(r,t)}};t.exports=l}).call(e,n(1))},function(t,e,n){"use strict";var r=n(14),o=[r({ResponderEventPlugin:null}),r({SimpleEventPlugin:null}),r({TapEventPlugin:null}),r({EnterLeaveEventPlugin:null}),r({ChangeEventPlugin:null}),r({SelectEventPlugin:null}),r({CompositionEventPlugin:null}),r({BeforeInputEventPlugin:null}),r({AnalyticsEventPlugin:null}),r({MobileSafariClickEventPlugin:null})];t.exports=o},function(t,e,n){"use strict";var r=n(8),o=n(21),i=n(35),a=n(7),s=n(14),u=r.topLevelTypes,c=a.getFirstReactDOM,p={mouseEnter:{registrationName:s({onMouseEnter:null}),dependencies:[u.topMouseOut,u.topMouseOver]},mouseLeave:{registrationName:s({onMouseLeave:null}),dependencies:[u.topMouseOut,u.topMouseOver]}},l=[null,null],f={eventTypes:p,extractEvents:function(t,e,n,r){if(t===u.topMouseOver&&(r.relatedTarget||r.fromElement))return null;if(t!==u.topMouseOut&&t!==u.topMouseOver)return null;var s;if(e.window===e)s=e;else{var f=e.ownerDocument;s=f?f.defaultView||f.parentWindow:window}var h,d;if(t===u.topMouseOut?(h=e,d=c(r.relatedTarget||r.toElement)||s):(h=s,d=e),h===d)return null;var v=h?a.getID(h):"",m=d?a.getID(d):"",y=i.getPooled(p.mouseLeave,v,r);y.type="mouseleave",y.target=h,y.relatedTarget=d;var _=i.getPooled(p.mouseEnter,m,r);return _.type="mouseenter",_.target=d,_.relatedTarget=h,o.accumulateEnterLeaveDispatches(y,_,v,m),l[0]=y,l[1]=_,l}};t.exports=f},function(t,e,n){(function(e){var r=n(13),o={listen:function(t,e,n){return t.addEventListener?(t.addEventListener(e,n,!1),{remove:function(){t.removeEventListener(e,n,!1)}}):t.attachEvent?(t.attachEvent("on"+e,n),{remove:function(){t.detachEvent("on"+e,n)}}):void 0},capture:function(t,n,o){return t.addEventListener?(t.addEventListener(n,o,!0),{remove:function(){t.removeEventListener(n,o,!0)}}):("production"!==e.env.NODE_ENV&&console.error("Attempted to listen to events during the capture phase on a browser that does not support the capture phase. Your application will not receive some events."),{remove:r})},registerDefault:function(){}};t.exports=o}).call(e,n(1))},function(t,e,n){"use strict";var r,o=n(17),i=n(5),a=o.injection.MUST_USE_ATTRIBUTE,s=o.injection.MUST_USE_PROPERTY,u=o.injection.HAS_BOOLEAN_VALUE,c=o.injection.HAS_SIDE_EFFECTS,p=o.injection.HAS_NUMERIC_VALUE,l=o.injection.HAS_POSITIVE_NUMERIC_VALUE,f=o.injection.HAS_OVERLOADED_BOOLEAN_VALUE;if(i.canUseDOM){var h=document.implementation;r=h&&h.hasFeature&&h.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")}var d={isCustomAttribute:RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),Properties:{accept:null,acceptCharset:null,accessKey:null,action:null,allowFullScreen:a|u,allowTransparency:a,alt:null,async:u,autoComplete:null,autoPlay:u,cellPadding:null,cellSpacing:null,charSet:a,checked:s|u,classID:a,className:r?a:s,cols:a|l,colSpan:null,content:null,contentEditable:null,contextMenu:a,controls:s|u,coords:null,crossOrigin:null,data:null,dateTime:a,defer:u,dir:null,disabled:a|u,download:f,draggable:null,encType:null,form:a,formAction:a,formEncType:a,formMethod:a,formNoValidate:u,formTarget:a,frameBorder:a,height:a,hidden:a|u,href:null,hrefLang:null,htmlFor:null,httpEquiv:null,icon:null,id:s,label:null,lang:null,list:a,loop:s|u,manifest:a,marginHeight:null,marginWidth:null,max:null,maxLength:a,media:a,mediaGroup:null,method:null,min:null,multiple:s|u,muted:s|u,name:null,noValidate:u,open:null,pattern:null,placeholder:null,poster:null,preload:null,radioGroup:null,readOnly:s|u,rel:null,required:u,role:a,rows:a|l,rowSpan:null,sandbox:null,scope:null,scrolling:null,seamless:a|u,selected:s|u,shape:null,size:a|l,sizes:a,span:l,spellCheck:null,src:null,srcDoc:s,srcSet:a,start:p,step:null,style:null,tabIndex:null,target:null,title:null,type:null,useMap:null,value:s|c,width:a,wmode:a,autoCapitalize:null,autoCorrect:null,itemProp:a,itemScope:a|u,itemType:a,property:null},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{autoCapitalize:"autocapitalize",autoComplete:"autocomplete",autoCorrect:"autocorrect",autoFocus:"autofocus",autoPlay:"autoplay",encType:"enctype",hrefLang:"hreflang",radioGroup:"radiogroup",spellCheck:"spellcheck",srcDoc:"srcdoc",srcSet:"srcset"}};t.exports=d},function(t,e,n){"use strict";var r=n(8),o=n(13),i=r.topLevelTypes,a={eventTypes:null,extractEvents:function(t,e,n,r){if(t===i.topTouchStart){var a=r.target;a&&!a.onclick&&(a.onclick=o)}}};t.exports=a},function(t,e,n){(function(e){"use strict";var r=n(20),o=n(43),i=n(127),a=n(23),s=n(9),u=n(45),c=n(18),p=n(4),l=n(46),f=n(16),h=n(64),d=n(139),v=n(24),m=n(27),y=n(7),_=n(66),g=n(11),E=n(72),b=n(148),w=n(75),N=n(3),D=n(49),O=n(178);d.inject();var C=p.createElement,S=p.createFactory;"production"!==e.env.NODE_ENV&&(C=l.createElement,S=l.createFactory),C=m.wrapCreateElement(C),S=m.wrapCreateFactory(S);var x=g.measure("React","render",y.render),I={Children:{map:i.map,forEach:i.forEach,count:i.count,only:O},DOM:f,PropTypes:E,initializeTouchEvents:function(t){o.useTouchEvents=t},createClass:s.createClass,createElement:C,createFactory:S,constructAndRenderComponent:y.constructAndRenderComponent,constructAndRenderComponentByID:y.constructAndRenderComponentByID,render:x,renderToString:b.renderToString,renderToStaticMarkup:b.renderToStaticMarkup,unmountComponentAtNode:y.unmountComponentAtNode,isValidClass:m.isValidClass,isValidElement:p.isValidElement,withContext:u.withContext,__spread:N,renderComponent:D("React","renderComponent","render",this,x),renderComponentToString:D("React","renderComponentToString","renderToString",this,b.renderToString),renderComponentToStaticMarkup:D("React","renderComponentToStaticMarkup","renderToStaticMarkup",this,b.renderToStaticMarkup),isValidComponent:D("React","isValidComponent","isValidElement",this,p.isValidElement)};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({Component:a,CurrentOwner:c,DOMComponent:h,DOMPropertyOperations:r,InstanceHandles:v,Mount:y,MultiChild:_,TextComponent:w}),"production"!==e.env.NODE_ENV){var k=n(5);if(k.canUseDOM&&window.top===window.self){navigator.userAgent.indexOf("Chrome")>-1&&"undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&console.debug("Download the React DevTools for a better development experience: http://fb.me/react-devtools");for(var M=[Array.isArray,Array.prototype.every,Array.prototype.forEach,Array.prototype.indexOf,Array.prototype.map,Date.now,Function.prototype.bind,Object.keys,String.prototype.split,String.prototype.trim,Object.create,Object.freeze],T=0;T<M.length;T++)if(!M[T]){console.error("One or more ES5 shim/shams expected by React are not available: http://fb.me/react-warning-polyfills");break}}}I.version="0.12.2",t.exports=I}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(t,e){this.forEachFunction=t,this.forEachContext=e}function o(t,e,n,r){var o=t;o.forEachFunction.call(o.forEachContext,e,r)}function i(t,e,n){if(null==t)return t;var i=r.getPooled(e,n);f(t,o,i),r.release(i)}function a(t,e,n){this.mapResult=t,this.mapFunction=e,this.mapContext=n}function s(t,n,r,o){var i=t,a=i.mapResult,s=!a.hasOwnProperty(r);if("production"!==e.env.NODE_ENV?h(s,"ReactChildren.map(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.",r):null,s){var u=i.mapFunction.call(i.mapContext,n,o);a[r]=u}}function u(t,e,n){if(null==t)return t;var r={},o=a.getPooled(r,e,n);return f(t,s,o),a.release(o),r}function c(){return null}function p(t){return f(t,c,null)}var l=n(15),f=n(87),h=n(6),d=l.twoArgumentPooler,v=l.threeArgumentPooler;l.addPoolingTo(r,d),l.addPoolingTo(a,v);var m={forEach:i,map:u,count:p};t.exports=m}).call(e,n(1))},function(t,e,n){(function(e){"use strict";var r=n(131),o=n(65),i=n(7),a=n(11),s=n(147),u=n(81),c=n(2),p=n(86),l=1,f=9,h={ReactReconcileTransaction:s,BackendIDOperations:r,unmountIDFromEnvironment:function(t){i.purgeID(t)},mountImageIntoNode:a.measure("ReactComponentBrowserEnvironment","mountImageIntoNode",function(t,n,r){if("production"!==e.env.NODE_ENV?c(n&&(n.nodeType===l||n.nodeType===f),"mountComponentIntoNode(...): Target container is not valid."):c(n&&(n.nodeType===l||n.nodeType===f)),r){if(o.canReuseMarkup(t,u(n)))return;"production"!==e.env.NODE_ENV?c(n.nodeType!==f,"You're trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side."):c(n.nodeType!==f),"production"!==e.env.NODE_ENV&&console.warn("React attempted to use reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server.")}"production"!==e.env.NODE_ENV?c(n.nodeType!==f,"You're trying to render a component to the document but you didn't use server rendering. We can't do this without using server rendering due to cross-browser quirks. See renderComponentToString() for server rendering."):c(n.nodeType!==f),p(n,t)})};t.exports=h}).call(e,n(1))},function(t,e,n){"use strict";var r=n(33),o=n(10),i=n(9),a=n(4),s=n(16),u=n(25),c=a.createFactory(s.button.type),p=u({onClick:!0,onDoubleClick:!0,onMouseDown:!0,onMouseMove:!0,onMouseUp:!0,onClickCapture:!0,onDoubleClickCapture:!0,onMouseDownCapture:!0,onMouseMoveCapture:!0,onMouseUpCapture:!0}),l=i.createClass({displayName:"ReactDOMButton",mixins:[r,o],render:function(){var t={};for(var e in this.props)!this.props.hasOwnProperty(e)||this.props.disabled&&p[e]||(t[e]=this.props[e]);return c(t,this.props.children)}});t.exports=l},function(t,e,n){"use strict";var r=n(8),o=n(63),i=n(10),a=n(9),s=n(4),u=n(16),c=s.createFactory(u.form.type),p=a.createClass({displayName:"ReactDOMForm",mixins:[i,o],render:function(){return c(this.props)},componentDidMount:function(){this.trapBubbledEvent(r.topLevelTypes.topReset,"reset"),this.trapBubbledEvent(r.topLevelTypes.topSubmit,"submit")}});t.exports=p},function(t,e,n){(function(e){"use strict";var r=n(61),o=n(119),i=n(20),a=n(7),s=n(11),u=n(2),c=n(86),p={dangerouslySetInnerHTML:"`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.",style:"`style` must be set using `updateStylesByID()`."},l={updatePropertyByID:s.measure("ReactDOMIDOperations","updatePropertyByID",function(t,n,r){var o=a.getNode(t);"production"!==e.env.NODE_ENV?u(!p.hasOwnProperty(n),"updatePropertyByID(...): %s",p[n]):u(!p.hasOwnProperty(n)),null!=r?i.setValueForProperty(o,n,r):i.deleteValueForProperty(o,n)}),deletePropertyByID:s.measure("ReactDOMIDOperations","deletePropertyByID",function(t,n,r){var o=a.getNode(t);"production"!==e.env.NODE_ENV?u(!p.hasOwnProperty(n),"updatePropertyByID(...): %s",p[n]):u(!p.hasOwnProperty(n)),i.deleteValueForProperty(o,n,r)}),updateStylesByID:s.measure("ReactDOMIDOperations","updateStylesByID",function(t,e){var n=a.getNode(t);r.setValueForStyles(n,e)}),updateInnerHTMLByID:s.measure("ReactDOMIDOperations","updateInnerHTMLByID",function(t,e){var n=a.getNode(t);c(n,e)}),updateTextContentByID:s.measure("ReactDOMIDOperations","updateTextContentByID",function(t,e){var n=a.getNode(t);o.updateTextContent(n,e)}),dangerouslyReplaceNodeWithMarkupByID:s.measure("ReactDOMIDOperations","dangerouslyReplaceNodeWithMarkupByID",function(t,e){var n=a.getNode(t);o.dangerouslyReplaceNodeWithMarkup(n,e)}),dangerouslyProcessChildrenUpdates:s.measure("ReactDOMIDOperations","dangerouslyProcessChildrenUpdates",function(t,e){for(var n=0;n<t.length;n++)t[n].parentNode=a.getNode(t[n].parentID);o.processUpdates(t,e)})};t.exports=l}).call(e,n(1))},function(t,e,n){"use strict";var r=n(8),o=n(63),i=n(10),a=n(9),s=n(4),u=n(16),c=s.createFactory(u.img.type),p=a.createClass({displayName:"ReactDOMImg",tagName:"IMG",mixins:[i,o],render:function(){return c(this.props)},componentDidMount:function(){this.trapBubbledEvent(r.topLevelTypes.topLoad,"load"),this.trapBubbledEvent(r.topLevelTypes.topError,"error")}});t.exports=p},function(t,e,n){(function(e){"use strict";function r(){this.isMounted()&&this.forceUpdate()}var o=n(33),i=n(20),a=n(44),s=n(10),u=n(9),c=n(4),p=n(16),l=n(7),f=n(12),h=n(3),d=n(2),v=c.createFactory(p.input.type),m={},y=u.createClass({displayName:"ReactDOMInput",mixins:[o,a.Mixin,s],getInitialState:function(){var t=this.props.defaultValue;return{initialChecked:this.props.defaultChecked||!1,initialValue:null!=t?t:null}},render:function(){var t=h({},this.props);t.defaultChecked=null,t.defaultValue=null;var e=a.getValue(this);t.value=null!=e?e:this.state.initialValue;var n=a.getChecked(this);return t.checked=null!=n?n:this.state.initialChecked,t.onChange=this._handleChange,v(t,this.props.children)},componentDidMount:function(){var t=l.getID(this.getDOMNode());m[t]=this},componentWillUnmount:function(){var t=this.getDOMNode(),e=l.getID(t);delete m[e]},componentDidUpdate:function(){var t=this.getDOMNode();null!=this.props.checked&&i.setValueForProperty(t,"checked",this.props.checked||!1);var e=a.getValue(this);null!=e&&i.setValueForProperty(t,"value",""+e)},_handleChange:function(t){var n,o=a.getOnChange(this);o&&(n=o.call(this,t)),f.asap(r,this);var i=this.props.name;if("radio"===this.props.type&&null!=i){for(var s=this.getDOMNode(),u=s;u.parentNode;)u=u.parentNode;for(var c=u.querySelectorAll("input[name="+JSON.stringify(""+i)+'][type="radio"]'),p=0,h=c.length;h>p;p++){var v=c[p];if(v!==s&&v.form===s.form){var y=l.getID(v);"production"!==e.env.NODE_ENV?d(y,"ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."):d(y);var _=m[y];"production"!==e.env.NODE_ENV?d(_,"ReactDOMInput: Unknown radio button ID %s.",y):d(_),f.asap(r,_)}}}return n}});t.exports=y}).call(e,n(1))},function(t,e,n){(function(e){"use strict";var r=n(10),o=n(9),i=n(4),a=n(16),s=n(6),u=i.createFactory(a.option.type),c=o.createClass({displayName:"ReactDOMOption",mixins:[r],componentWillMount:function(){"production"!==e.env.NODE_ENV&&("production"!==e.env.NODE_ENV?s(null==this.props.selected,"Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."):null)},render:function(){return u(this.props,this.props.children)}});t.exports=c}).call(e,n(1))},function(t,e,n){"use strict";function r(){this.isMounted()&&(this.setState({value:this._pendingValue}),this._pendingValue=0)}function o(t,e){if(null!=t[e])if(t.multiple){if(!Array.isArray(t[e]))return new Error("The `"+e+"` prop supplied to <select> must be an array if `multiple` is true.")}else if(Array.isArray(t[e]))return new Error("The `"+e+"` prop supplied to <select> must be a scalar value if `multiple` is false.")}function i(t,e){var n,r,o,i=t.props.multiple,a=null!=e?e:t.state.value,s=t.getDOMNode().options;if(i)for(n={},r=0,o=a.length;o>r;++r)n[""+a[r]]=!0;else n=""+a;for(r=0,o=s.length;o>r;r++){var u=i?n.hasOwnProperty(s[r].value):s[r].value===n;u!==s[r].selected&&(s[r].selected=u)}}var a=n(33),s=n(44),u=n(10),c=n(9),p=n(4),l=n(16),f=n(12),h=n(3),d=p.createFactory(l.select.type),v=c.createClass({displayName:"ReactDOMSelect",mixins:[a,s.Mixin,u],propTypes:{defaultValue:o,value:o},getInitialState:function(){return{value:this.props.defaultValue||(this.props.multiple?[]:"")}},componentWillMount:function(){this._pendingValue=null},componentWillReceiveProps:function(t){!this.props.multiple&&t.multiple?this.setState({value:[this.state.value]}):this.props.multiple&&!t.multiple&&this.setState({value:this.state.value[0]})},render:function(){var t=h({},this.props);return t.onChange=this._handleChange,t.value=null,d(t,this.props.children)},componentDidMount:function(){i(this,s.getValue(this))},componentDidUpdate:function(t){var e=s.getValue(this),n=!!t.multiple,r=!!this.props.multiple;(null!=e||n!==r)&&i(this,e)},_handleChange:function(t){var e,n=s.getOnChange(this);n&&(e=n.call(this,t));var o;if(this.props.multiple){o=[];for(var i=t.target.options,a=0,u=i.length;u>a;a++)i[a].selected&&o.push(i[a].value)}else o=t.target.value;return this._pendingValue=o,f.asap(r,this),e}});t.exports=v},function(t,e,n){"use strict";function r(t,e,n,r){return t===n&&e===r}function o(t){var e=document.selection,n=e.createRange(),r=n.text.length,o=n.duplicate();o.moveToElementText(t),o.setEndPoint("EndToStart",n);var i=o.text.length,a=i+r;return{start:i,end:a}}function i(t){var e=window.getSelection&&window.getSelection();if(!e||0===e.rangeCount)return null;var n=e.anchorNode,o=e.anchorOffset,i=e.focusNode,a=e.focusOffset,s=e.getRangeAt(0),u=r(e.anchorNode,e.anchorOffset,e.focusNode,e.focusOffset),c=u?0:s.toString().length,p=s.cloneRange();p.selectNodeContents(t),p.setEnd(s.startContainer,s.startOffset);var l=r(p.startContainer,p.startOffset,p.endContainer,p.endOffset),f=l?0:p.toString().length,h=f+c,d=document.createRange();d.setStart(n,o),d.setEnd(i,a);var v=d.collapsed;return{start:v?h:f,end:v?f:h}}function a(t,e){var n,r,o=document.selection.createRange().duplicate();"undefined"==typeof e.end?(n=e.start,r=n):e.start>e.end?(n=e.end,r=e.start):(n=e.start,r=e.end),o.moveToElementText(t),o.moveStart("character",n),o.setEndPoint("EndToStart",o),o.moveEnd("character",r-n),o.select()}function s(t,e){if(window.getSelection){var n=window.getSelection(),r=t[p()].length,o=Math.min(e.start,r),i="undefined"==typeof e.end?o:Math.min(e.end,r);if(!n.extend&&o>i){var a=i;i=o,o=a}var s=c(t,o),u=c(t,i);if(s&&u){var l=document.createRange();l.setStart(s.node,s.offset),n.removeAllRanges(),o>i?(n.addRange(l),n.extend(u.node,u.offset)):(l.setEnd(u.node,u.offset),n.addRange(l))}}}var u=n(5),c=n(172),p=n(55),l=u.canUseDOM&&document.selection,f={getOffsets:l?o:i,setOffsets:l?a:s};t.exports=f},function(t,e,n){(function(e){"use strict";function r(){this.isMounted()&&this.forceUpdate()}var o=n(33),i=n(20),a=n(44),s=n(10),u=n(9),c=n(4),p=n(16),l=n(12),f=n(3),h=n(2),d=n(6),v=c.createFactory(p.textarea.type),m=u.createClass({displayName:"ReactDOMTextarea",mixins:[o,a.Mixin,s],getInitialState:function(){var t=this.props.defaultValue,n=this.props.children;null!=n&&("production"!==e.env.NODE_ENV&&("production"!==e.env.NODE_ENV?d(!1,"Use the `defaultValue` or `value` props instead of setting children on <textarea>."):null),"production"!==e.env.NODE_ENV?h(null==t,"If you supply `defaultValue` on a <textarea>, do not pass children."):h(null==t),Array.isArray(n)&&("production"!==e.env.NODE_ENV?h(n.length<=1,"<textarea> can only have at most one child."):h(n.length<=1),n=n[0]),t=""+n),null==t&&(t="");var r=a.getValue(this);return{initialValue:""+(null!=r?r:t)}},render:function(){var t=f({},this.props);return"production"!==e.env.NODE_ENV?h(null==t.dangerouslySetInnerHTML,"`dangerouslySetInnerHTML` does not make sense on <textarea>."):h(null==t.dangerouslySetInnerHTML),t.defaultValue=null,t.value=null,t.onChange=this._handleChange,v(t,this.state.initialValue)},componentDidUpdate:function(){var t=a.getValue(this);if(null!=t){var e=this.getDOMNode();i.setValueForProperty(e,"value",""+t)}},_handleChange:function(t){var e,n=a.getOnChange(this);return n&&(e=n.call(this,t)),l.asap(r,this),e}});t.exports=m}).call(e,n(1))},function(t,e,n){"use strict";function r(){this.reinitializeTransaction()}var o=n(12),i=n(36),a=n(3),s=n(13),u={initialize:s,close:function(){f.isBatchingUpdates=!1}},c={initialize:s,close:o.flushBatchedUpdates.bind(o)},p=[c,u];a(r.prototype,i.Mixin,{getTransactionWrappers:function(){return p}});var l=new r,f={isBatchingUpdates:!1,batchedUpdates:function(t,e,n){var r=f.isBatchingUpdates;f.isBatchingUpdates=!0,r?t(e,n):l.perform(t,null,e,n)}};t.exports=f},function(t,e,n){(function(e){"use strict";function r(){if(O.EventEmitter.injectReactEventListener(D),O.EventPluginHub.injectEventPluginOrder(u),O.EventPluginHub.injectInstanceHandle(C),O.EventPluginHub.injectMount(S),O.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:k,EnterLeaveEventPlugin:c,ChangeEventPlugin:i,CompositionEventPlugin:s,MobileSafariClickEventPlugin:f,SelectEventPlugin:x,BeforeInputEventPlugin:o}),O.NativeComponent.injectGenericComponentClass(m),O.NativeComponent.injectComponentClasses({button:y,form:_,img:g,input:E,option:b,select:w,textarea:N,html:T("html"),head:T("head"),body:T("body")}),O.CompositeComponent.injectMixin(h),O.DOMProperty.injectDOMPropertyConfig(l),O.DOMProperty.injectDOMPropertyConfig(M),O.EmptyComponent.injectEmptyComponent("noscript"),O.Updates.injectReconcileTransaction(d.ReactReconcileTransaction),O.Updates.injectBatchingStrategy(v),O.RootIndex.injectCreateReactRootIndex(p.canUseDOM?a.createReactRootIndex:I.createReactRootIndex),O.Component.injectEnvironment(d),"production"!==e.env.NODE_ENV){var t=p.canUseDOM&&window.location.href||"";if(/[?&]react_perf\b/.test(t)){var r=n(140);r.start()}}}var o=n(115),i=n(116),a=n(117),s=n(118),u=n(121),c=n(122),p=n(5),l=n(124),f=n(125),h=n(10),d=n(128),v=n(138),m=n(64),y=n(129),_=n(130),g=n(132),E=n(133),b=n(134),w=n(135),N=n(137),D=n(144),O=n(145),C=n(24),S=n(7),x=n(151),I=n(152),k=n(153),M=n(150),T=n(166);t.exports={inject:r}}).call(e,n(1))},function(t,e,n){"use strict";function r(t){return Math.floor(100*t)/100}function o(t,e,n){t[e]=(t[e]||0)+n}var i=n(17),a=n(141),s=n(7),u=n(11),c=n(180),p={_allMeasurements:[],_mountStack:[0],_injected:!1,start:function(){p._injected||u.injection.injectMeasure(p.measure),p._allMeasurements.length=0,u.enableMeasure=!0},stop:function(){u.enableMeasure=!1},getLastMeasurements:function(){return p._allMeasurements},printExclusive:function(t){t=t||p._allMeasurements;var e=a.getExclusiveSummary(t);console.table(e.map(function(t){return{"Component class name":t.componentName,"Total inclusive time (ms)":r(t.inclusive),"Exclusive mount time (ms)":r(t.exclusive),"Exclusive render time (ms)":r(t.render),"Mount time per instance (ms)":r(t.exclusive/t.count),"Render time per instance (ms)":r(t.render/t.count),Instances:t.count}}))},printInclusive:function(t){t=t||p._allMeasurements;var e=a.getInclusiveSummary(t);console.table(e.map(function(t){return{"Owner > component":t.componentName,"Inclusive time (ms)":r(t.time),Instances:t.count}})),console.log("Total time:",a.getTotalTime(t).toFixed(2)+" ms")},getMeasurementsSummaryMap:function(t){var e=a.getInclusiveSummary(t,!0);return e.map(function(t){return{"Owner > component":t.componentName,"Wasted time (ms)":t.time,Instances:t.count}})},printWasted:function(t){t=t||p._allMeasurements,console.table(p.getMeasurementsSummaryMap(t)),console.log("Total time:",a.getTotalTime(t).toFixed(2)+" ms")},printDOM:function(t){t=t||p._allMeasurements;var e=a.getDOMSummary(t);console.table(e.map(function(t){var e={};return e[i.ID_ATTRIBUTE_NAME]=t.id,e.type=t.type,e.args=JSON.stringify(t.args),e})),console.log("Total time:",a.getTotalTime(t).toFixed(2)+" ms")},_recordWrite:function(t,e,n,r){var o=p._allMeasurements[p._allMeasurements.length-1].writes;o[t]=o[t]||[],o[t].push({type:e,time:n,args:r})},measure:function(t,e,n){return function(){for(var r=[],i=0,a=arguments.length;a>i;i++)r.push(arguments[i]);var u,l,f;if("_renderNewRootComponent"===e||"flushBatchedUpdates"===e)return p._allMeasurements.push({exclusive:{},inclusive:{},render:{},counts:{},writes:{},displayNames:{},totalTime:0}),f=c(),l=n.apply(this,r),p._allMeasurements[p._allMeasurements.length-1].totalTime=c()-f,l;if("ReactDOMIDOperations"===t||"ReactComponentBrowserEnvironment"===t){if(f=c(),l=n.apply(this,r),u=c()-f,"mountImageIntoNode"===e){var h=s.getID(r[1]);p._recordWrite(h,e,u,r[0])}else"dangerouslyProcessChildrenUpdates"===e?r[0].forEach(function(t){var e={};null!==t.fromIndex&&(e.fromIndex=t.fromIndex),null!==t.toIndex&&(e.toIndex=t.toIndex),null!==t.textContent&&(e.textContent=t.textContent),null!==t.markupIndex&&(e.markup=r[1][t.markupIndex]),p._recordWrite(t.parentID,t.type,u,e)}):p._recordWrite(r[0],e,u,Array.prototype.slice.call(r,1));return l}if("ReactCompositeComponent"!==t||"mountComponent"!==e&&"updateComponent"!==e&&"_renderValidatedComponent"!==e)return n.apply(this,r);var d="mountComponent"===e?r[0]:this._rootNodeID,v="_renderValidatedComponent"===e,m="mountComponent"===e,y=p._mountStack,_=p._allMeasurements[p._allMeasurements.length-1];if(v?o(_.counts,d,1):m&&y.push(0),f=c(),l=n.apply(this,r),u=c()-f,v)o(_.render,d,u);else if(m){var g=y.pop();y[y.length-1]+=u,o(_.exclusive,d,u-g),o(_.inclusive,d,u)}else o(_.inclusive,d,u);return _.displayNames[d]={current:this.constructor.displayName,owner:this._owner?this._owner.constructor.displayName:"<root>"},l}}};t.exports=p},function(t,e,n){function r(t){for(var e=0,n=0;n<t.length;n++){var r=t[n];e+=r.totalTime}return e}function o(t){for(var e=[],n=0;n<t.length;n++){var r,o=t[n];for(r in o.writes)o.writes[r].forEach(function(t){e.push({id:r,type:p[t.type]||t.type,args:t.args})})}return e}function i(t){for(var e,n={},r=0;r<t.length;r++){var o=t[r],i=u({},o.exclusive,o.inclusive);
for(var a in i)e=o.displayNames[a].current,n[e]=n[e]||{componentName:e,inclusive:0,exclusive:0,render:0,count:0},o.render[a]&&(n[e].render+=o.render[a]),o.exclusive[a]&&(n[e].exclusive+=o.exclusive[a]),o.inclusive[a]&&(n[e].inclusive+=o.inclusive[a]),o.counts[a]&&(n[e].count+=o.counts[a])}var s=[];for(e in n)n[e].exclusive>=c&&s.push(n[e]);return s.sort(function(t,e){return e.exclusive-t.exclusive}),s}function a(t,e){for(var n,r={},o=0;o<t.length;o++){var i,a=t[o],p=u({},a.exclusive,a.inclusive);e&&(i=s(a));for(var l in p)if(!e||i[l]){var f=a.displayNames[l];n=f.owner+" > "+f.current,r[n]=r[n]||{componentName:n,time:0,count:0},a.inclusive[l]&&(r[n].time+=a.inclusive[l]),a.counts[l]&&(r[n].count+=a.counts[l])}}var h=[];for(n in r)r[n].time>=c&&h.push(r[n]);return h.sort(function(t,e){return e.time-t.time}),h}function s(t){var e={},n=Object.keys(t.writes),r=u({},t.exclusive,t.inclusive);for(var o in r){for(var i=!1,a=0;a<n.length;a++)if(0===n[a].indexOf(o)){i=!0;break}!i&&t.counts[o]>0&&(e[o]=!0)}return e}var u=n(3),c=1.2,p={mountImageIntoNode:"set innerHTML",INSERT_MARKUP:"set innerHTML",MOVE_EXISTING:"move",REMOVE_NODE:"remove",TEXT_CONTENT:"set textContent",updatePropertyByID:"update attribute",deletePropertyByID:"delete attribute",updateStylesByID:"update styles",updateInnerHTMLByID:"set innerHTML",dangerouslyReplaceNodeWithMarkupByID:"replace"},l={getExclusiveSummary:i,getInclusiveSummary:a,getDOMSummary:o,getTotalTime:r};t.exports=l},function(t){"use strict";var e={guard:function(t){return t}};t.exports=e},function(t,e,n){"use strict";function r(t){o.enqueueEvents(t),o.processEventQueue()}var o=n(26),i={handleTopLevel:function(t,e,n,i){var a=o.extractEvents(t,e,n,i);r(a)}};t.exports=i},function(t,e,n){"use strict";function r(t){var e=l.getID(t),n=p.getReactRootIDFromNodeID(e),r=l.findReactContainerForID(n),o=l.getFirstReactDOM(r);return o}function o(t,e){this.topLevelType=t,this.nativeEvent=e,this.ancestors=[]}function i(t){for(var e=l.getFirstReactDOM(d(t.nativeEvent))||window,n=e;n;)t.ancestors.push(n),n=r(n);for(var o=0,i=t.ancestors.length;i>o;o++){e=t.ancestors[o];var a=l.getID(e)||"";m._handleTopLevel(t.topLevelType,e,a,t.nativeEvent)}}function a(t){var e=v(window);t(e)}var s=n(123),u=n(5),c=n(15),p=n(24),l=n(7),f=n(12),h=n(3),d=n(54),v=n(82);h(o.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),c.addPoolingTo(o,c.twoArgumentPooler);var m={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:u.canUseDOM?window:null,setHandleTopLevel:function(t){m._handleTopLevel=t},setEnabled:function(t){m._enabled=!!t},isEnabled:function(){return m._enabled},trapBubbledEvent:function(t,e,n){var r=n;if(r)return s.listen(r,e,m.dispatchEvent.bind(null,t))},trapCapturedEvent:function(t,e,n){var r=n;if(r)return s.capture(r,e,m.dispatchEvent.bind(null,t))},monitorScrollValue:function(t){var e=a.bind(null,t);s.listen(window,"scroll",e),s.listen(window,"resize",e)},dispatchEvent:function(t,e){if(m._enabled){var n=o.getPooled(t,e);try{f.batchedUpdates(i,n)}finally{o.release(n)}}}};t.exports=m},function(t,e,n){"use strict";var r=n(17),o=n(26),i=n(23),a=n(9),s=n(34),u=n(22),c=n(68),p=n(11),l=n(74),f=n(12),h={Component:i.injection,CompositeComponent:a.injection,DOMProperty:r.injection,EmptyComponent:s.injection,EventPluginHub:o.injection,EventEmitter:u.injection,NativeComponent:c.injection,Perf:p.injection,RootIndex:l.injection,Updates:f.injection};t.exports=h},function(t,e,n){(function(e){"use strict";function r(t){return function(e,n,r){e[n]=e.hasOwnProperty(n)?t(e[n],r):r}}function o(t,e){for(var n in e)if(e.hasOwnProperty(n)){var r=f[n];r&&f.hasOwnProperty(n)?r(t,n,e[n]):t.hasOwnProperty(n)||(t[n]=e[n])}return t}var i=n(3),a=n(13),s=n(2),u=n(177),c=n(6),p=!1,l=r(function(t,e){return i({},e,t)}),f={children:a,className:r(u),style:l},h={TransferStrategies:f,mergeProps:function(t,e){return o(i({},t),e)},Mixin:{transferPropsTo:function(t){return"production"!==e.env.NODE_ENV?s(t._owner===this,"%s: You can't call transferPropsTo() on a component that you don't own, %s. This usually means you are calling transferPropsTo() on a component passed in as props or children.",this.constructor.displayName,"string"==typeof t.type?t.type:t.type.displayName):s(t._owner===this),"production"!==e.env.NODE_ENV&&(p||(p=!0,"production"!==e.env.NODE_ENV?c(!1,"transferPropsTo is deprecated. See http://fb.me/react-transferpropsto for more information."):null)),o(t.props,this.props),t}}};t.exports=h}).call(e,n(1))},function(t,e,n){"use strict";function r(){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=o.getPooled(null),this.putListenerQueue=u.getPooled()}var o=n(42),i=n(15),a=n(22),s=n(47),u=n(73),c=n(36),p=n(3),l={initialize:s.getSelectionInformation,close:s.restoreSelection},f={initialize:function(){var t=a.isEnabled();return a.setEnabled(!1),t},close:function(t){a.setEnabled(t)}},h={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},d={initialize:function(){this.putListenerQueue.reset()},close:function(){this.putListenerQueue.putListeners()}},v=[d,l,f,h],m={getTransactionWrappers:function(){return v},getReactMountReady:function(){return this.reactMountReady},getPutListenerQueue:function(){return this.putListenerQueue},destructor:function(){o.release(this.reactMountReady),this.reactMountReady=null,u.release(this.putListenerQueue),this.putListenerQueue=null}};p(r.prototype,c.Mixin,m),i.addPoolingTo(r),t.exports=r},function(t,e,n){(function(e){"use strict";function r(t){"production"!==e.env.NODE_ENV?p(i.isValidElement(t),"renderToString(): You must pass a valid ReactElement."):p(i.isValidElement(t));var n;try{var r=a.createReactRootID();return n=u.getPooled(!1),n.perform(function(){var e=c(t,null),o=e.mountComponent(r,n,0);return s.addChecksumToMarkup(o)},null)}finally{u.release(n)}}function o(t){"production"!==e.env.NODE_ENV?p(i.isValidElement(t),"renderToStaticMarkup(): You must pass a valid ReactElement."):p(i.isValidElement(t));var n;try{var r=a.createReactRootID();return n=u.getPooled(!0),n.perform(function(){var e=c(t,null);return e.mountComponent(r,n,0)},null)}finally{u.release(n)}}var i=n(4),a=n(24),s=n(65),u=n(149),c=n(37),p=n(2);t.exports={renderToString:r,renderToStaticMarkup:o}}).call(e,n(1))},function(t,e,n){"use strict";function r(t){this.reinitializeTransaction(),this.renderToStaticMarkup=t,this.reactMountReady=i.getPooled(null),this.putListenerQueue=a.getPooled()}var o=n(15),i=n(42),a=n(73),s=n(36),u=n(3),c=n(13),p={initialize:function(){this.reactMountReady.reset()},close:c},l={initialize:function(){this.putListenerQueue.reset()},close:c},f=[l,p],h={getTransactionWrappers:function(){return f},getReactMountReady:function(){return this.reactMountReady},getPutListenerQueue:function(){return this.putListenerQueue},destructor:function(){i.release(this.reactMountReady),this.reactMountReady=null,a.release(this.putListenerQueue),this.putListenerQueue=null}};u(r.prototype,s.Mixin,h),o.addPoolingTo(r),t.exports=r},function(t,e,n){"use strict";var r=n(17),o=r.injection.MUST_USE_ATTRIBUTE,i={Properties:{cx:o,cy:o,d:o,dx:o,dy:o,fill:o,fillOpacity:o,fontFamily:o,fontSize:o,fx:o,fy:o,gradientTransform:o,gradientUnits:o,markerEnd:o,markerMid:o,markerStart:o,offset:o,opacity:o,patternContentUnits:o,patternUnits:o,points:o,preserveAspectRatio:o,r:o,rx:o,ry:o,spreadMethod:o,stopColor:o,stopOpacity:o,stroke:o,strokeDasharray:o,strokeLinecap:o,strokeOpacity:o,strokeWidth:o,textAnchor:o,transform:o,version:o,viewBox:o,x1:o,x2:o,x:o,y1:o,y2:o,y:o},DOMAttributeNames:{fillOpacity:"fill-opacity",fontFamily:"font-family",fontSize:"font-size",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",patternContentUnits:"patternContentUnits",patternUnits:"patternUnits",preserveAspectRatio:"preserveAspectRatio",spreadMethod:"spreadMethod",stopColor:"stop-color",stopOpacity:"stop-opacity",strokeDasharray:"stroke-dasharray",strokeLinecap:"stroke-linecap",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",textAnchor:"text-anchor",viewBox:"viewBox"}};t.exports=i},function(t,e,n){"use strict";function r(t){if("selectionStart"in t&&s.hasSelectionCapabilities(t))return{start:t.selectionStart,end:t.selectionEnd};if(window.getSelection){var e=window.getSelection();return{anchorNode:e.anchorNode,anchorOffset:e.anchorOffset,focusNode:e.focusNode,focusOffset:e.focusOffset}}if(document.selection){var n=document.selection.createRange();return{parentElement:n.parentElement(),text:n.text,top:n.boundingTop,left:n.boundingLeft}}}function o(t){if(!_&&null!=v&&v==c()){var e=r(v);if(!y||!f(y,e)){y=e;var n=u.getPooled(d.select,m,t);return n.type="select",n.target=v,a.accumulateTwoPhaseDispatches(n),n}}}var i=n(8),a=n(21),s=n(47),u=n(19),c=n(79),p=n(83),l=n(14),f=n(181),h=i.topLevelTypes,d={select:{phasedRegistrationNames:{bubbled:l({onSelect:null}),captured:l({onSelectCapture:null})},dependencies:[h.topBlur,h.topContextMenu,h.topFocus,h.topKeyDown,h.topMouseDown,h.topMouseUp,h.topSelectionChange]}},v=null,m=null,y=null,_=!1,g={eventTypes:d,extractEvents:function(t,e,n,r){switch(t){case h.topFocus:(p(e)||"true"===e.contentEditable)&&(v=e,m=n,y=null);break;case h.topBlur:v=null,m=null,y=null;break;case h.topMouseDown:_=!0;break;case h.topContextMenu:case h.topMouseUp:return _=!1,o(r);case h.topSelectionChange:case h.topKeyDown:case h.topKeyUp:return o(r)}}};t.exports=g},function(t){"use strict";var e=Math.pow(2,53),n={createReactRootIndex:function(){return Math.ceil(Math.random()*e)}};t.exports=n},function(t,e,n){(function(e){"use strict";var r=n(8),o=n(43),i=n(21),a=n(154),s=n(19),u=n(157),c=n(159),p=n(35),l=n(156),f=n(160),h=n(28),d=n(161),v=n(52),m=n(2),y=n(14),_=n(6),g=r.topLevelTypes,E={blur:{phasedRegistrationNames:{bubbled:y({onBlur:!0}),captured:y({onBlurCapture:!0})}},click:{phasedRegistrationNames:{bubbled:y({onClick:!0}),captured:y({onClickCapture:!0})}},contextMenu:{phasedRegistrationNames:{bubbled:y({onContextMenu:!0}),captured:y({onContextMenuCapture:!0})}},copy:{phasedRegistrationNames:{bubbled:y({onCopy:!0}),captured:y({onCopyCapture:!0})}},cut:{phasedRegistrationNames:{bubbled:y({onCut:!0}),captured:y({onCutCapture:!0})}},doubleClick:{phasedRegistrationNames:{bubbled:y({onDoubleClick:!0}),captured:y({onDoubleClickCapture:!0})}},drag:{phasedRegistrationNames:{bubbled:y({onDrag:!0}),captured:y({onDragCapture:!0})}},dragEnd:{phasedRegistrationNames:{bubbled:y({onDragEnd:!0}),captured:y({onDragEndCapture:!0})}},dragEnter:{phasedRegistrationNames:{bubbled:y({onDragEnter:!0}),captured:y({onDragEnterCapture:!0})}},dragExit:{phasedRegistrationNames:{bubbled:y({onDragExit:!0}),captured:y({onDragExitCapture:!0})}},dragLeave:{phasedRegistrationNames:{bubbled:y({onDragLeave:!0}),captured:y({onDragLeaveCapture:!0})}},dragOver:{phasedRegistrationNames:{bubbled:y({onDragOver:!0}),captured:y({onDragOverCapture:!0})}},dragStart:{phasedRegistrationNames:{bubbled:y({onDragStart:!0}),captured:y({onDragStartCapture:!0})}},drop:{phasedRegistrationNames:{bubbled:y({onDrop:!0}),captured:y({onDropCapture:!0})}},focus:{phasedRegistrationNames:{bubbled:y({onFocus:!0}),captured:y({onFocusCapture:!0})}},input:{phasedRegistrationNames:{bubbled:y({onInput:!0}),captured:y({onInputCapture:!0})}},keyDown:{phasedRegistrationNames:{bubbled:y({onKeyDown:!0}),captured:y({onKeyDownCapture:!0})}},keyPress:{phasedRegistrationNames:{bubbled:y({onKeyPress:!0}),captured:y({onKeyPressCapture:!0})}},keyUp:{phasedRegistrationNames:{bubbled:y({onKeyUp:!0}),captured:y({onKeyUpCapture:!0})}},load:{phasedRegistrationNames:{bubbled:y({onLoad:!0}),captured:y({onLoadCapture:!0})}},error:{phasedRegistrationNames:{bubbled:y({onError:!0}),captured:y({onErrorCapture:!0})}},mouseDown:{phasedRegistrationNames:{bubbled:y({onMouseDown:!0}),captured:y({onMouseDownCapture:!0})}},mouseMove:{phasedRegistrationNames:{bubbled:y({onMouseMove:!0}),captured:y({onMouseMoveCapture:!0})}},mouseOut:{phasedRegistrationNames:{bubbled:y({onMouseOut:!0}),captured:y({onMouseOutCapture:!0})}},mouseOver:{phasedRegistrationNames:{bubbled:y({onMouseOver:!0}),captured:y({onMouseOverCapture:!0})}},mouseUp:{phasedRegistrationNames:{bubbled:y({onMouseUp:!0}),captured:y({onMouseUpCapture:!0})}},paste:{phasedRegistrationNames:{bubbled:y({onPaste:!0}),captured:y({onPasteCapture:!0})}},reset:{phasedRegistrationNames:{bubbled:y({onReset:!0}),captured:y({onResetCapture:!0})}},scroll:{phasedRegistrationNames:{bubbled:y({onScroll:!0}),captured:y({onScrollCapture:!0})}},submit:{phasedRegistrationNames:{bubbled:y({onSubmit:!0}),captured:y({onSubmitCapture:!0})}},touchCancel:{phasedRegistrationNames:{bubbled:y({onTouchCancel:!0}),captured:y({onTouchCancelCapture:!0})}},touchEnd:{phasedRegistrationNames:{bubbled:y({onTouchEnd:!0}),captured:y({onTouchEndCapture:!0})}},touchMove:{phasedRegistrationNames:{bubbled:y({onTouchMove:!0}),captured:y({onTouchMoveCapture:!0})}},touchStart:{phasedRegistrationNames:{bubbled:y({onTouchStart:!0}),captured:y({onTouchStartCapture:!0})}},wheel:{phasedRegistrationNames:{bubbled:y({onWheel:!0}),captured:y({onWheelCapture:!0})}}},b={topBlur:E.blur,topClick:E.click,topContextMenu:E.contextMenu,topCopy:E.copy,topCut:E.cut,topDoubleClick:E.doubleClick,topDrag:E.drag,topDragEnd:E.dragEnd,topDragEnter:E.dragEnter,topDragExit:E.dragExit,topDragLeave:E.dragLeave,topDragOver:E.dragOver,topDragStart:E.dragStart,topDrop:E.drop,topError:E.error,topFocus:E.focus,topInput:E.input,topKeyDown:E.keyDown,topKeyPress:E.keyPress,topKeyUp:E.keyUp,topLoad:E.load,topMouseDown:E.mouseDown,topMouseMove:E.mouseMove,topMouseOut:E.mouseOut,topMouseOver:E.mouseOver,topMouseUp:E.mouseUp,topPaste:E.paste,topReset:E.reset,topScroll:E.scroll,topSubmit:E.submit,topTouchCancel:E.touchCancel,topTouchEnd:E.touchEnd,topTouchMove:E.touchMove,topTouchStart:E.touchStart,topWheel:E.wheel};for(var w in b)b[w].dependencies=[w];var N={eventTypes:E,executeDispatch:function(t,n,r){var i=o.executeDispatch(t,n,r);"production"!==e.env.NODE_ENV?_("boolean"!=typeof i,"Returning `false` from an event handler is deprecated and will be ignored in a future release. Instead, manually call e.stopPropagation() or e.preventDefault(), as appropriate."):null,i===!1&&(t.stopPropagation(),t.preventDefault())},extractEvents:function(t,n,r,o){var y=b[t];if(!y)return null;var _;switch(t){case g.topInput:case g.topLoad:case g.topError:case g.topReset:case g.topSubmit:_=s;break;case g.topKeyPress:if(0===v(o))return null;case g.topKeyDown:case g.topKeyUp:_=c;break;case g.topBlur:case g.topFocus:_=u;break;case g.topClick:if(2===o.button)return null;case g.topContextMenu:case g.topDoubleClick:case g.topMouseDown:case g.topMouseMove:case g.topMouseOut:case g.topMouseOver:case g.topMouseUp:_=p;break;case g.topDrag:case g.topDragEnd:case g.topDragEnter:case g.topDragExit:case g.topDragLeave:case g.topDragOver:case g.topDragStart:case g.topDrop:_=l;break;case g.topTouchCancel:case g.topTouchEnd:case g.topTouchMove:case g.topTouchStart:_=f;break;case g.topScroll:_=h;break;case g.topWheel:_=d;break;case g.topCopy:case g.topCut:case g.topPaste:_=a}"production"!==e.env.NODE_ENV?m(_,"SimpleEventPlugin: Unhandled event type, `%s`.",t):m(_);var E=_.getPooled(y,r,o);return i.accumulateTwoPhaseDispatches(E),E}};t.exports=N}).call(e,n(1))},function(t,e,n){"use strict";function r(t,e,n){o.call(this,t,e,n)}var o=n(19),i={clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}};o.augmentClass(r,i),t.exports=r},function(t,e,n){"use strict";function r(t,e,n){o.call(this,t,e,n)}var o=n(19),i={data:null};o.augmentClass(r,i),t.exports=r},function(t,e,n){"use strict";function r(t,e,n){o.call(this,t,e,n)}var o=n(35),i={dataTransfer:null};o.augmentClass(r,i),t.exports=r},function(t,e,n){"use strict";function r(t,e,n){o.call(this,t,e,n)}var o=n(28),i={relatedTarget:null};o.augmentClass(r,i),t.exports=r},function(t,e,n){"use strict";function r(t,e,n){o.call(this,t,e,n)}var o=n(19),i={data:null};o.augmentClass(r,i),t.exports=r},function(t,e,n){"use strict";function r(t,e,n){o.call(this,t,e,n)}var o=n(28),i=n(52),a=n(171),s=n(53),u={key:a,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:s,charCode:function(t){return"keypress"===t.type?i(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?i(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}};o.augmentClass(r,u),t.exports=r},function(t,e,n){"use strict";function r(t,e,n){o.call(this,t,e,n)}var o=n(28),i=n(53),a={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:i};o.augmentClass(r,a),t.exports=r},function(t,e,n){"use strict";function r(t,e,n){o.call(this,t,e,n)}var o=n(35),i={deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:null,deltaMode:null};o.augmentClass(r,i),t.exports=r},function(t){"use strict";function e(t){for(var e=1,r=0,o=0;o<t.length;o++)e=(e+t.charCodeAt(o))%n,r=(r+e)%n;return e|r<<16}var n=65521;t.exports=e},function(t){function e(t){return t.replace(n,function(t,e){return e.toUpperCase()})}var n=/-(.)/g;t.exports=e},function(t,e,n){"use strict";function r(t){return o(t.replace(i,"ms-"))}var o=n(163),i=/^-ms-/;t.exports=r},function(t,e,n){function r(t){return!!t&&("object"==typeof t||"function"==typeof t)&&"length"in t&&!("setInterval"in t)&&"number"!=typeof t.nodeType&&(Array.isArray(t)||"callee"in t||"item"in t)}function o(t){return r(t)?Array.isArray(t)?t.slice():i(t):[t]}var i=n(182);t.exports=o},function(t,e,n){(function(e){"use strict";function r(t){var n=i.createFactory(t),r=o.createClass({displayName:"ReactFullPageComponent"+t,componentWillUnmount:function(){"production"!==e.env.NODE_ENV?a(!1,"%s tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.",this.constructor.displayName):a(!1)},render:function(){return n(this.props)}});return r}var o=n(9),i=n(4),a=n(2);t.exports=r}).call(e,n(1))},function(t,e,n){(function(e){function r(t){var e=t.match(p);return e&&e[1].toLowerCase()}function o(t,n){var o=c;"production"!==e.env.NODE_ENV?u(!!c,"createNodesFromMarkup dummy not initialized"):u(!!c);var i=r(t),p=i&&s(i);if(p){o.innerHTML=p[1]+t+p[2];for(var l=p[0];l--;)o=o.lastChild}else o.innerHTML=t;var f=o.getElementsByTagName("script");f.length&&("production"!==e.env.NODE_ENV?u(n,"createNodesFromMarkup(...): Unexpected <script> element rendered."):u(n),a(f).forEach(n));for(var h=a(o.childNodes);o.lastChild;)o.removeChild(o.lastChild);return h}var i=n(5),a=n(165),s=n(80),u=n(2),c=i.canUseDOM?document.createElement("div"):null,p=/^\s*<(\w+)/;t.exports=o}).call(e,n(1))},function(t,e,n){"use strict";function r(t,e){var n=null==e||"boolean"==typeof e||""===e;if(n)return"";var r=isNaN(e);return r||0===e||i.hasOwnProperty(t)&&i[t]?""+e:("string"==typeof e&&(e=e.trim()),e+"px")}var o=n(60),i=o.isUnitlessNumber;t.exports=r},function(t,e,n){(function(e){"use strict";var n={};"production"!==e.env.NODE_ENV&&Object.freeze(n),t.exports=n}).call(e,n(1))},function(t,e,n){(function(e){"use strict";function r(t,n,r){var o=t,a=!o.hasOwnProperty(r);if("production"!==e.env.NODE_ENV?s(a,"flattenChildren(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.",r):null,a&&null!=n){var u,c=typeof n;u="string"===c?i(n):"number"===c?i(""+n):n,o[r]=u}}function o(t){if(null==t)return t;var e={};return a(t,r,e),e}var i=n(75),a=n(87),s=n(6);t.exports=o}).call(e,n(1))},function(t,e,n){"use strict";function r(t){if(t.key){var e=i[t.key]||t.key;if("Unidentified"!==e)return e}if("keypress"===t.type){var n=o(t);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===t.type||"keyup"===t.type?a[t.keyCode]||"Unidentified":""}var o=n(52),i={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},a={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};t.exports=r},function(t){"use strict";function e(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function n(t){for(;t;){if(t.nextSibling)return t.nextSibling;t=t.parentNode}}function r(t,r){for(var o=e(t),i=0,a=0;o;){if(3==o.nodeType){if(a=i+o.textContent.length,r>=i&&a>=r)return{node:o,offset:r-i};i=a}o=e(n(o))}}t.exports=r},function(t){function e(t){return t.replace(n,"-$1").toLowerCase()}var n=/([A-Z])/g;t.exports=e},function(t,e,n){"use strict";function r(t){return o(t).replace(i,"-ms-")}var o=n(173),i=/^ms-/;t.exports=r},function(t){function e(t){return!(!t||!("function"==typeof Node?t instanceof Node:"object"==typeof t&&"number"==typeof t.nodeType&&"string"==typeof t.nodeName))}t.exports=e},function(t,e,n){function r(t){return o(t)&&3==t.nodeType}var o=n(175);t.exports=r},function(t){"use strict";function e(t){t||(t="");var e,n=arguments.length;if(n>1)for(var r=1;n>r;r++)e=arguments[r],e&&(t=(t?t+" ":"")+e);return t}t.exports=e},function(t,e,n){(function(e){"use strict";function r(t){return"production"!==e.env.NODE_ENV?i(o.isValidElement(t),"onlyChild must be passed a children with exactly one child."):i(o.isValidElement(t)),t}var o=n(4),i=n(2);t.exports=r}).call(e,n(1))},function(t,e,n){"use strict";var r,o=n(5);o.canUseDOM&&(r=window.performance||window.msPerformance||window.webkitPerformance),t.exports=r||{}},function(t,e,n){var r=n(179);r&&r.now||(r=Date);var o=r.now.bind(r);t.exports=o},function(t){"use strict";function e(t,e){if(t===e)return!0;var n;for(n in t)if(t.hasOwnProperty(n)&&(!e.hasOwnProperty(n)||t[n]!==e[n]))return!1;for(n in e)if(e.hasOwnProperty(n)&&!t.hasOwnProperty(n))return!1;return!0}t.exports=e},function(t,e,n){(function(e){function r(t){var n=t.length;if("production"!==e.env.NODE_ENV?o(!Array.isArray(t)&&("object"==typeof t||"function"==typeof t),"toArray: Array-like object expected"):o(!Array.isArray(t)&&("object"==typeof t||"function"==typeof t)),"production"!==e.env.NODE_ENV?o("number"==typeof n,"toArray: Object needs a length property"):o("number"==typeof n),"production"!==e.env.NODE_ENV?o(0===n||n-1 in t,"toArray: Object should have keys for indices"):o(0===n||n-1 in t),t.hasOwnProperty)try{return Array.prototype.slice.call(t)}catch(r){}for(var i=Array(n),a=0;n>a;a++)i[a]=t[a];return i}var o=n(2);t.exports=r}).call(e,n(1))},function(t){function e(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=u[r.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(o(r.parts[a],e))}else{for(var s=[],a=0;a<r.parts.length;a++)s.push(o(r.parts[a],e));u[r.id]={id:r.id,refs:1,parts:s}}}}function n(t){for(var e=[],n={},r=0;r<t.length;r++){var o=t[r],i=o[0],a=o[1],s=o[2],u=o[3],c={css:a,media:s,sourceMap:u};n[i]?n[i].parts.push(c):e.push(n[i]={id:i,parts:[c]})}return e}function r(){var t=document.createElement("style"),e=l();return t.type="text/css",e.appendChild(t),t}function o(t,e){var n,o,i;if(e.singleton){var u=h++;n=f||(f=r()),o=a.bind(null,n,u,!1),i=a.bind(null,n,u,!0)}else n=r(),o=s.bind(null,n),i=function(){n.parentNode.removeChild(n)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else i()}}function i(t,e,n){var r=["/** >>"+e+" **/","/** "+e+"<< **/"],o=t.lastIndexOf(r[0]),i=n?r[0]+n+r[1]:"";if(t.lastIndexOf(r[0])>=0){var a=t.lastIndexOf(r[1])+r[1].length;return t.slice(0,o)+i+t.slice(a)}return t+i}function a(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=i(t.styleSheet.cssText,e,o);else{var a=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(a,s[e]):t.appendChild(a)}}function s(t,e){var n=e.css,r=e.media,o=e.sourceMap;if(o&&"function"==typeof btoa)try{n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(JSON.stringify(o))+" */",n='@import url("data:text/css;base64,'+btoa(n)+'")'}catch(i){}if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var u={},c=function(t){var e;return function(){return"undefined"==typeof e&&(e=t.apply(this,arguments)),e}},p=c(function(){return/msie 9\b/.test(window.navigator.userAgent.toLowerCase())}),l=c(function(){return document.head||document.getElementsByTagName("head")[0]}),f=null,h=0;t.exports=function(t,r){r=r||{},"undefined"==typeof r.singleton&&(r.singleton=p());var o=n(t);return e(o,r),function(t){for(var i=[],a=0;a<o.length;a++){var s=o[a],c=u[s.id];c.refs--,i.push(c)}if(t){var p=n(t);e(p,r)}for(var a=0;a<i.length;a++){var c=i[a];if(0===c.refs){for(var l=0;l<c.parts.length;l++)c.parts[l]();delete u[c.id]}}}}},function(t,e,n){var r=n(40);"string"==typeof r&&(r=[[t.id,r,""]]);var o=n(183)(r,{});t.hot.accept(40,function(){var e=n(40);"string"==typeof e&&(e=[[t.id,e,""]]),o(e)}),t.hot.dispose(function(){o()})},function(t,e,n){(function(t){function e(){o?(console.log("[WDS] App hot update..."),window.postMessage("webpackHotUpdate"+a,"*")):(console.log("[WDS] App updated. Reloading..."),window.location.reload())}{var r=n(186);document.getElementsByTagName("script")}r=r.connect(t.substr(1));var o=!1,i=!0,a="";r.on("hot",function(){o=!0,console.log("[WDS] Hot Module Replacement enabled.")}),r.on("invalid",function(){console.log("[WDS] App updated. Recompiling...")}),r.on("hash",function(t){a=t}),r.on("ok",function(){return i?i=!1:void e()}),r.on("warnings",function(t){console.log("[WDS] Warnings while compiling.");for(var n=0;n<t.length;n++)console.warn(t[n]);return i?i=!1:void e()}),r.on("errors",function(t){console.log("[WDS] Errors while compiling.");for(var n=0;n<t.length;n++)console.error(t[n]);return i?i=!1:void e()}),r.on("proxy-error",function(t){console.log("[WDS] Proxy error.");for(var n=0;n<t.length;n++)console.error(t[n]);return i?i=!1:void e()}),r.on("disconnect",function(){console.error("[WDS] Disconnected!")})}).call(e,"?http://0.0.0.0:3000")},function(t,e,n){t.exports=n(187)},function(module,exports,__webpack_require__){(function(module){/*! Socket.IO.js build:0.9.10, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */
var io=module.exports;!function(){if(function(t,e){var n=t;n.version="0.9.10",n.protocol=1,n.transports=[],n.j=[],n.sockets={},n.connect=function(t,r){var o,i,a=n.util.parseUri(t);e&&e.location&&(a.protocol=a.protocol||e.location.protocol.slice(0,-1),a.host=a.host||(e.document?e.document.domain:e.location.hostname),a.port=a.port||e.location.port),o=n.util.uniqueUri(a);var s={host:a.host,secure:"https"==a.protocol,port:a.port||("https"==a.protocol?443:80),query:a.query||""};return n.util.merge(s,r),(s["force new connection"]||!n.sockets[o])&&(i=new n.Socket(s)),!s["force new connection"]&&i&&(n.sockets[o]=i),i=i||n.sockets[o],i.of(a.path.length>1?a.path:"")}}(module.exports,this),function(t,e){var n=t.util={},r=/^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,o=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];n.parseUri=function(t){for(var e=r.exec(t||""),n={},i=14;i--;)n[o[i]]=e[i]||"";return n},n.uniqueUri=function(t){var n=t.protocol,r=t.host,o=t.port;return"document"in e?(r=r||document.domain,o=o||("https"==n&&"https:"!==document.location.protocol?443:document.location.port)):(r=r||"localhost",o||"https"!=n||(o=443)),(n||"http")+"://"+r+":"+(o||80)},n.query=function(t,e){var r=n.chunkQuery(t||""),o=[];n.merge(r,n.chunkQuery(e||""));for(var i in r)r.hasOwnProperty(i)&&o.push(i+"="+r[i]);return o.length?"?"+o.join("&"):""},n.chunkQuery=function(t){for(var e,n={},r=t.split("&"),o=0,i=r.length;i>o;++o)e=r[o].split("="),e[0]&&(n[e[0]]=e[1]);return n};var i=!1;n.load=function(t){return"document"in e&&"complete"===document.readyState||i?t():void n.on(e,"load",t,!1)},n.on=function(t,e,n,r){t.attachEvent?t.attachEvent("on"+e,n):t.addEventListener&&t.addEventListener(e,n,r)},n.request=function(t){if(t&&"undefined"!=typeof XDomainRequest)return new XDomainRequest;if("undefined"!=typeof XMLHttpRequest&&(!t||n.ua.hasCORS))return new XMLHttpRequest;if(!t)try{return new(window[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}return null},"undefined"!=typeof window&&n.load(function(){i=!0}),n.defer=function(t){return n.ua.webkit&&"undefined"==typeof importScripts?void n.load(function(){setTimeout(t,100)}):t()},n.merge=function(t,e,r,o){var i,a=o||[],s="undefined"==typeof r?2:r;for(i in e)e.hasOwnProperty(i)&&n.indexOf(a,i)<0&&("object"==typeof t[i]&&s?n.merge(t[i],e[i],s-1,a):(t[i]=e[i],a.push(e[i])));return t},n.mixin=function(t,e){n.merge(t.prototype,e.prototype)},n.inherit=function(t,e){function n(){}n.prototype=e.prototype,t.prototype=new n},n.isArray=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)},n.intersect=function(t,e){for(var r=[],o=t.length>e.length?t:e,i=t.length>e.length?e:t,a=0,s=i.length;s>a;a++)~n.indexOf(o,i[a])&&r.push(i[a]);return r},n.indexOf=function(t,e,n){for(var r=t.length,n=0>n?0>n+r?0:n+r:n||0;r>n&&t[n]!==e;n++);return n>=r?-1:n},n.toArray=function(t){for(var e=[],n=0,r=t.length;r>n;n++)e.push(t[n]);return e},n.ua={},n.ua.hasCORS="undefined"!=typeof XMLHttpRequest&&function(){try{var t=new XMLHttpRequest}catch(e){return!1}return void 0!=t.withCredentials}(),n.ua.webkit="undefined"!=typeof navigator&&/webkit/i.test(navigator.userAgent),n.ua.iDevice="undefined"!=typeof navigator&&/iPad|iPhone|iPod/i.test(navigator.userAgent)}("undefined"!=typeof io?io:module.exports,this),function(t,e){function n(){}t.EventEmitter=n,n.prototype.on=function(t,n){return this.$events||(this.$events={}),this.$events[t]?e.util.isArray(this.$events[t])?this.$events[t].push(n):this.$events[t]=[this.$events[t],n]:this.$events[t]=n,this},n.prototype.addListener=n.prototype.on,n.prototype.once=function(t,e){function n(){r.removeListener(t,n),e.apply(this,arguments)}var r=this;return n.listener=e,this.on(t,n),this},n.prototype.removeListener=function(t,n){if(this.$events&&this.$events[t]){var r=this.$events[t];if(e.util.isArray(r)){for(var o=-1,i=0,a=r.length;a>i;i++)if(r[i]===n||r[i].listener&&r[i].listener===n){o=i;break}if(0>o)return this;r.splice(o,1),r.length||delete this.$events[t]}else(r===n||r.listener&&r.listener===n)&&delete this.$events[t]}return this},n.prototype.removeAllListeners=function(t){return void 0===t?(this.$events={},this):(this.$events&&this.$events[t]&&(this.$events[t]=null),this)},n.prototype.listeners=function(t){return this.$events||(this.$events={}),this.$events[t]||(this.$events[t]=[]),e.util.isArray(this.$events[t])||(this.$events[t]=[this.$events[t]]),this.$events[t]},n.prototype.emit=function(t){if(!this.$events)return!1;var n=this.$events[t];if(!n)return!1;var r=Array.prototype.slice.call(arguments,1);if("function"==typeof n)n.apply(this,r);else{if(!e.util.isArray(n))return!1;for(var o=n.slice(),i=0,a=o.length;a>i;i++)o[i].apply(this,r)}return!0}}("undefined"!=typeof io?io:module.exports,"undefined"!=typeof io?io:module.parent.exports),function(exports,nativeJSON){"use strict";function f(t){return 10>t?"0"+t:t}function date(t){return isFinite(t.valueOf())?t.getUTCFullYear()+"-"+f(t.getUTCMonth()+1)+"-"+f(t.getUTCDate())+"T"+f(t.getUTCHours())+":"+f(t.getUTCMinutes())+":"+f(t.getUTCSeconds())+"Z":null}function quote(t){return escapable.lastIndex=0,escapable.test(t)?'"'+t.replace(escapable,function(t){var e=meta[t];return"string"==typeof e?e:"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+t+'"'}function str(t,e){var n,r,o,i,a,s=gap,u=e[t];switch(u instanceof Date&&(u=date(t)),"function"==typeof rep&&(u=rep.call(e,t,u)),typeof u){case"string":return quote(u);case"number":return isFinite(u)?String(u):"null";case"boolean":case"null":return String(u);case"object":if(!u)return"null";if(gap+=indent,a=[],"[object Array]"===Object.prototype.toString.apply(u)){for(i=u.length,n=0;i>n;n+=1)a[n]=str(n,u)||"null";return o=0===a.length?"[]":gap?"[\n"+gap+a.join(",\n"+gap)+"\n"+s+"]":"["+a.join(",")+"]",gap=s,o}if(rep&&"object"==typeof rep)for(i=rep.length,n=0;i>n;n+=1)"string"==typeof rep[n]&&(r=rep[n],o=str(r,u),o&&a.push(quote(r)+(gap?": ":":")+o));else for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(o=str(r,u),o&&a.push(quote(r)+(gap?": ":":")+o));return o=0===a.length?"{}":gap?"{\n"+gap+a.join(",\n"+gap)+"\n"+s+"}":"{"+a.join(",")+"}",gap=s,o}}if(nativeJSON&&nativeJSON.parse)return exports.JSON={parse:nativeJSON.parse,stringify:nativeJSON.stringify};var JSON=exports.JSON={},cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","	":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;JSON.stringify=function(t,e,n){var r;if(gap="",indent="","number"==typeof n)for(r=0;n>r;r+=1)indent+=" ";else"string"==typeof n&&(indent=n);if(rep=e,e&&"function"!=typeof e&&("object"!=typeof e||"number"!=typeof e.length))throw new Error("JSON.stringify");return str("",{"":t})},JSON.parse=function(text,reviver){function walk(t,e){var n,r,o=t[e];if(o&&"object"==typeof o)for(n in o)Object.prototype.hasOwnProperty.call(o,n)&&(r=walk(o,n),void 0!==r?o[n]=r:delete o[n]);return reviver.call(t,e,o)}var j;if(text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(t){return"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)})),/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,"")))return j=eval("("+text+")"),"function"==typeof reviver?walk({"":j},""):j;throw new SyntaxError("JSON.parse")}}("undefined"!=typeof io?io:module.exports,"undefined"!=typeof JSON?JSON:void 0),function(t,e){var n=t.parser={},r=n.packets=["disconnect","connect","heartbeat","message","json","event","ack","error","noop"],o=n.reasons=["transport not supported","client not handshaken","unauthorized"],i=n.advice=["reconnect"],a=e.JSON,s=e.util.indexOf;n.encodePacket=function(t){var e=s(r,t.type),n=t.id||"",u=t.endpoint||"",c=t.ack,p=null;switch(t.type){case"error":var l=t.reason?s(o,t.reason):"",f=t.advice?s(i,t.advice):"";(""!==l||""!==f)&&(p=l+(""!==f?"+"+f:""));break;case"message":""!==t.data&&(p=t.data);break;case"event":var h={name:t.name};t.args&&t.args.length&&(h.args=t.args),p=a.stringify(h);break;case"json":p=a.stringify(t.data);break;case"connect":t.qs&&(p=t.qs);break;case"ack":p=t.ackId+(t.args&&t.args.length?"+"+a.stringify(t.args):"")}var d=[e,n+("data"==c?"+":""),u];return null!==p&&void 0!==p&&d.push(p),d.join(":")},n.encodePayload=function(t){var e="";if(1==t.length)return t[0];for(var n=0,r=t.length;r>n;n++){var o=t[n];e+="�"+o.length+"�"+t[n]}return e};var u=/([^:]+):([0-9]+)?(\+)?:([^:]+)?:?([\s\S]*)?/;n.decodePacket=function(t){var e=t.match(u);if(!e)return{};var n=e[2]||"",t=e[5]||"",s={type:r[e[1]],endpoint:e[4]||""};switch(n&&(s.id=n,s.ack=e[3]?"data":!0),s.type){case"error":var e=t.split("+");s.reason=o[e[0]]||"",s.advice=i[e[1]]||"";break;case"message":s.data=t||"";break;case"event":try{var c=a.parse(t);s.name=c.name,s.args=c.args}catch(p){}s.args=s.args||[];break;case"json":try{s.data=a.parse(t)}catch(p){}break;case"connect":s.qs=t||"";break;case"ack":var e=t.match(/^([0-9]+)(\+)?(.*)/);if(e&&(s.ackId=e[1],s.args=[],e[3]))try{s.args=e[3]?a.parse(e[3]):[]}catch(p){}break;case"disconnect":case"heartbeat":}return s},n.decodePayload=function(t){if("�"==t.charAt(0)){for(var e=[],r=1,o="";r<t.length;r++)"�"==t.charAt(r)?(e.push(n.decodePacket(t.substr(r+1).substr(0,o))),r+=Number(o)+1,o=""):o+=t.charAt(r);return e}return[n.decodePacket(t)]}}("undefined"!=typeof io?io:module.exports,"undefined"!=typeof io?io:module.parent.exports),function(t,e){function n(t,e){this.socket=t,this.sessid=e}t.Transport=n,e.util.mixin(n,e.EventEmitter),n.prototype.heartbeats=function(){return!0},n.prototype.onData=function(t){if(this.clearCloseTimeout(),(this.socket.connected||this.socket.connecting||this.socket.reconnecting)&&this.setCloseTimeout(),""!==t){var n=e.parser.decodePayload(t);if(n&&n.length)for(var r=0,o=n.length;o>r;r++)this.onPacket(n[r])}return this},n.prototype.onPacket=function(t){return this.socket.setHeartbeatTimeout(),"heartbeat"==t.type?this.onHeartbeat():("connect"==t.type&&""==t.endpoint&&this.onConnect(),"error"==t.type&&"reconnect"==t.advice&&(this.isOpen=!1),this.socket.onPacket(t),this)},n.prototype.setCloseTimeout=function(){if(!this.closeTimeout){var t=this;this.closeTimeout=setTimeout(function(){t.onDisconnect()},this.socket.closeTimeout)}},n.prototype.onDisconnect=function(){return this.isOpen&&this.close(),this.clearTimeouts(),this.socket.onDisconnect(),this},n.prototype.onConnect=function(){return this.socket.onConnect(),this},n.prototype.clearCloseTimeout=function(){this.closeTimeout&&(clearTimeout(this.closeTimeout),this.closeTimeout=null)},n.prototype.clearTimeouts=function(){this.clearCloseTimeout(),this.reopenTimeout&&clearTimeout(this.reopenTimeout)},n.prototype.packet=function(t){this.send(e.parser.encodePacket(t))},n.prototype.onHeartbeat=function(){this.packet({type:"heartbeat"})},n.prototype.onOpen=function(){this.isOpen=!0,this.clearCloseTimeout(),this.socket.onOpen()},n.prototype.onClose=function(){this.isOpen=!1,this.socket.onClose(),this.onDisconnect()},n.prototype.prepareUrl=function(){var t=this.socket.options;return this.scheme()+"://"+t.host+":"+t.port+"/"+t.resource+"/"+e.protocol+"/"+this.name+"/"+this.sessid},n.prototype.ready=function(t,e){e.call(this)}}("undefined"!=typeof io?io:module.exports,"undefined"!=typeof io?io:module.parent.exports),function(t,e,n){function r(t){if(this.options={port:80,secure:!1,document:"document"in n?document:!1,resource:"socket.io",transports:e.transports,"connect timeout":1e4,"try multiple transports":!0,reconnect:!0,"reconnection delay":500,"reconnection limit":1/0,"reopen delay":3e3,"max reconnection attempts":10,"sync disconnect on unload":!1,"auto connect":!0,"flash policy port":10843,manualFlush:!1},e.util.merge(this.options,t),this.connected=!1,this.open=!1,this.connecting=!1,this.reconnecting=!1,this.namespaces={},this.buffer=[],this.doBuffer=!1,this.options["sync disconnect on unload"]&&(!this.isXDomain()||e.util.ua.hasCORS)){var r=this;e.util.on(n,"beforeunload",function(){r.disconnectSync()},!1)}this.options["auto connect"]&&this.connect()}function o(){}t.Socket=r,e.util.mixin(r,e.EventEmitter),r.prototype.of=function(t){return this.namespaces[t]||(this.namespaces[t]=new e.SocketNamespace(this,t),""!==t&&this.namespaces[t].packet({type:"connect"})),this.namespaces[t]},r.prototype.publish=function(){this.emit.apply(this,arguments);var t;for(var e in this.namespaces)this.namespaces.hasOwnProperty(e)&&(t=this.of(e),t.$emit.apply(t,arguments))},r.prototype.handshake=function(t){function n(e){e instanceof Error?(r.connecting=!1,r.onError(e.message)):t.apply(null,e.split(":"))}var r=this,i=this.options,a=["http"+(i.secure?"s":"")+":/",i.host+":"+i.port,i.resource,e.protocol,e.util.query(this.options.query,"t="+ +new Date)].join("/");if(this.isXDomain()&&!e.util.ua.hasCORS){var s=document.getElementsByTagName("script")[0],u=document.createElement("script");u.src=a+"&jsonp="+e.j.length,s.parentNode.insertBefore(u,s),e.j.push(function(t){n(t),u.parentNode.removeChild(u)})}else{var c=e.util.request();c.open("GET",a,!0),this.isXDomain()&&(c.withCredentials=!0),c.onreadystatechange=function(){4==c.readyState&&(c.onreadystatechange=o,200==c.status?n(c.responseText):403==c.status?r.onError(c.responseText):(r.connecting=!1,!r.reconnecting&&r.onError(c.responseText)))},c.send(null)}},r.prototype.getTransport=function(t){for(var n,r=t||this.transports,o=0;n=r[o];o++)if(e.Transport[n]&&e.Transport[n].check(this)&&(!this.isXDomain()||e.Transport[n].xdomainCheck(this)))return new e.Transport[n](this,this.sessionid);return null},r.prototype.connect=function(t){if(this.connecting)return this;var n=this;return n.connecting=!0,this.handshake(function(r,o,i,a){function s(t){return n.transport&&n.transport.clearTimeouts(),n.transport=n.getTransport(t),n.transport?void n.transport.ready(n,function(){n.connecting=!0,n.publish("connecting",n.transport.name),n.transport.open(),n.options["connect timeout"]&&(n.connectTimeoutTimer=setTimeout(function(){if(!n.connected&&(n.connecting=!1,n.options["try multiple transports"])){for(var t=n.transports;t.length>0&&t.splice(0,1)[0]!=n.transport.name;);t.length?s(t):n.publish("connect_failed")}},n.options["connect timeout"]))}):n.publish("connect_failed")}n.sessionid=r,n.closeTimeout=1e3*i,n.heartbeatTimeout=1e3*o,n.transports||(n.transports=n.origTransports=a?e.util.intersect(a.split(","),n.options.transports):n.options.transports),n.setHeartbeatTimeout(),s(n.transports),n.once("connect",function(){clearTimeout(n.connectTimeoutTimer),t&&"function"==typeof t&&t()})}),this},r.prototype.setHeartbeatTimeout=function(){if(clearTimeout(this.heartbeatTimeoutTimer),!this.transport||this.transport.heartbeats()){var t=this;this.heartbeatTimeoutTimer=setTimeout(function(){t.transport.onClose()},this.heartbeatTimeout)}},r.prototype.packet=function(t){return this.connected&&!this.doBuffer?this.transport.packet(t):this.buffer.push(t),this},r.prototype.setBuffer=function(t){this.doBuffer=t,!t&&this.connected&&this.buffer.length&&(this.options.manualFlush||this.flushBuffer())},r.prototype.flushBuffer=function(){this.transport.payload(this.buffer),this.buffer=[]},r.prototype.disconnect=function(){return(this.connected||this.connecting)&&(this.open&&this.of("").packet({type:"disconnect"}),this.onDisconnect("booted")),this},r.prototype.disconnectSync=function(){var t=e.util.request(),n=["http"+(this.options.secure?"s":"")+":/",this.options.host+":"+this.options.port,this.options.resource,e.protocol,"",this.sessionid].join("/")+"/?disconnect=1";t.open("GET",n,!1),t.send(null),this.onDisconnect("booted")},r.prototype.isXDomain=function(){var t=n.location.port||("https:"==n.location.protocol?443:80);return this.options.host!==n.location.hostname||this.options.port!=t},r.prototype.onConnect=function(){this.connected||(this.connected=!0,this.connecting=!1,this.doBuffer||this.setBuffer(!1),this.emit("connect"))},r.prototype.onOpen=function(){this.open=!0},r.prototype.onClose=function(){this.open=!1,clearTimeout(this.heartbeatTimeoutTimer)},r.prototype.onPacket=function(t){this.of(t.endpoint).onPacket(t)},r.prototype.onError=function(t){t&&t.advice&&"reconnect"===t.advice&&(this.connected||this.connecting)&&(this.disconnect(),this.options.reconnect&&this.reconnect()),this.publish("error",t&&t.reason?t.reason:t)},r.prototype.onDisconnect=function(t){var e=this.connected,n=this.connecting;this.connected=!1,this.connecting=!1,this.open=!1,(e||n)&&(this.transport.close(),this.transport.clearTimeouts(),e&&(this.publish("disconnect",t),"booted"!=t&&this.options.reconnect&&!this.reconnecting&&this.reconnect()))},r.prototype.reconnect=function(){function t(){if(n.connected){for(var t in n.namespaces)n.namespaces.hasOwnProperty(t)&&""!==t&&n.namespaces[t].packet({type:"connect"});n.publish("reconnect",n.transport.name,n.reconnectionAttempts)}clearTimeout(n.reconnectionTimer),n.removeListener("connect_failed",e),n.removeListener("connect",e),n.reconnecting=!1,delete n.reconnectionAttempts,delete n.reconnectionDelay,delete n.reconnectionTimer,delete n.redoTransports,n.options["try multiple transports"]=o}function e(){return n.reconnecting?n.connected?t():n.connecting&&n.reconnecting?n.reconnectionTimer=setTimeout(e,1e3):void(n.reconnectionAttempts++>=r?n.redoTransports?(n.publish("reconnect_failed"),t()):(n.on("connect_failed",e),n.options["try multiple transports"]=!0,n.transports=n.origTransports,n.transport=n.getTransport(),n.redoTransports=!0,n.connect()):(n.reconnectionDelay<i&&(n.reconnectionDelay*=2),n.connect(),n.publish("reconnecting",n.reconnectionDelay,n.reconnectionAttempts),n.reconnectionTimer=setTimeout(e,n.reconnectionDelay))):void 0}this.reconnecting=!0,this.reconnectionAttempts=0,this.reconnectionDelay=this.options["reconnection delay"];var n=this,r=this.options["max reconnection attempts"],o=this.options["try multiple transports"],i=this.options["reconnection limit"];this.options["try multiple transports"]=!1,this.reconnectionTimer=setTimeout(e,this.reconnectionDelay),this.on("connect",e)}}("undefined"!=typeof io?io:module.exports,"undefined"!=typeof io?io:module.parent.exports,this),function(t,e){function n(t,e){this.socket=t,this.name=e||"",this.flags={},this.json=new r(this,"json"),this.ackPackets=0,this.acks={}}function r(t,e){this.namespace=t,this.name=e}t.SocketNamespace=n,e.util.mixin(n,e.EventEmitter),n.prototype.$emit=e.EventEmitter.prototype.emit,n.prototype.of=function(){return this.socket.of.apply(this.socket,arguments)},n.prototype.packet=function(t){return t.endpoint=this.name,this.socket.packet(t),this.flags={},this},n.prototype.send=function(t,e){var n={type:this.flags.json?"json":"message",data:t};return"function"==typeof e&&(n.id=++this.ackPackets,n.ack=!0,this.acks[n.id]=e),this.packet(n)},n.prototype.emit=function(t){var e=Array.prototype.slice.call(arguments,1),n=e[e.length-1],r={type:"event",name:t};return"function"==typeof n&&(r.id=++this.ackPackets,r.ack="data",this.acks[r.id]=n,e=e.slice(0,e.length-1)),r.args=e,this.packet(r)},n.prototype.disconnect=function(){return""===this.name?this.socket.disconnect():(this.packet({type:"disconnect"}),this.$emit("disconnect")),this},n.prototype.onPacket=function(t){function n(){r.packet({type:"ack",args:e.util.toArray(arguments),ackId:t.id})}var r=this;switch(t.type){case"connect":this.$emit("connect");break;case"disconnect":""===this.name?this.socket.onDisconnect(t.reason||"booted"):this.$emit("disconnect",t.reason);break;case"message":case"json":var o=["message",t.data];"data"==t.ack?o.push(n):t.ack&&this.packet({type:"ack",ackId:t.id}),this.$emit.apply(this,o);break;case"event":var o=[t.name].concat(t.args);"data"==t.ack&&o.push(n),this.$emit.apply(this,o);break;case"ack":this.acks[t.ackId]&&(this.acks[t.ackId].apply(this,t.args),delete this.acks[t.ackId]);break;case"error":t.advice?this.socket.onError(t):"unauthorized"==t.reason?this.$emit("connect_failed",t.reason):this.$emit("error",t.reason)}},r.prototype.send=function(){this.namespace.flags[this.name]=!0,this.namespace.send.apply(this.namespace,arguments)},r.prototype.emit=function(){this.namespace.flags[this.name]=!0,this.namespace.emit.apply(this.namespace,arguments)}}("undefined"!=typeof io?io:module.exports,"undefined"!=typeof io?io:module.parent.exports),function(t,e,n){function r(){e.Transport.apply(this,arguments)}t.websocket=r,e.util.inherit(r,e.Transport),r.prototype.name="websocket",r.prototype.open=function(){var t,r=e.util.query(this.socket.options.query),o=this;return t||(t=n.MozWebSocket||n.WebSocket),this.websocket=new t(this.prepareUrl()+r),this.websocket.onopen=function(){o.onOpen(),o.socket.setBuffer(!1)},this.websocket.onmessage=function(t){o.onData(t.data)},this.websocket.onclose=function(){o.onClose(),o.socket.setBuffer(!0)},this.websocket.onerror=function(t){o.onError(t)},this},r.prototype.send=e.util.ua.iDevice?function(t){var e=this;return setTimeout(function(){e.websocket.send(t)},0),this}:function(t){return this.websocket.send(t),this},r.prototype.payload=function(t){for(var e=0,n=t.length;n>e;e++)this.packet(t[e]);return this},r.prototype.close=function(){return this.websocket.close(),this},r.prototype.onError=function(t){this.socket.onError(t)},r.prototype.scheme=function(){return this.socket.options.secure?"wss":"ws"},r.check=function(){return"WebSocket"in n&&!("__addTask"in WebSocket)||"MozWebSocket"in n},r.xdomainCheck=function(){return!0},e.transports.push("websocket")}("undefined"!=typeof io?io.Transport:module.exports,"undefined"!=typeof io?io:module.parent.exports,this),function(t,e){function n(){e.Transport.websocket.apply(this,arguments)}t.flashsocket=n,e.util.inherit(n,e.Transport.websocket),n.prototype.name="flashsocket",n.prototype.open=function(){var t=this,n=arguments;return WebSocket.__addTask(function(){e.Transport.websocket.prototype.open.apply(t,n)}),this},n.prototype.send=function(){var t=this,n=arguments;return WebSocket.__addTask(function(){e.Transport.websocket.prototype.send.apply(t,n)}),this},n.prototype.close=function(){return WebSocket.__tasks.length=0,e.Transport.websocket.prototype.close.call(this),this},n.prototype.ready=function(t,r){function o(){var e=t.options,o=e["flash policy port"],a=["http"+(e.secure?"s":"")+":/",e.host+":"+e.port,e.resource,"static/flashsocket","WebSocketMain"+(t.isXDomain()?"Insecure":"")+".swf"];n.loaded||("undefined"==typeof WEB_SOCKET_SWF_LOCATION&&(WEB_SOCKET_SWF_LOCATION=a.join("/")),843!==o&&WebSocket.loadFlashPolicyFile("xmlsocket://"+e.host+":"+o),WebSocket.__initialize(),n.loaded=!0),r.call(i)}var i=this;return document.body?o():void e.util.load(o)},n.check=function(){return"undefined"!=typeof WebSocket&&"__initialize"in WebSocket&&swfobject?swfobject.getFlashPlayerVersion().major>=10:!1},n.xdomainCheck=function(){return!0},"undefined"!=typeof window&&(WEB_SOCKET_DISABLE_AUTO_INITIALIZATION=!0),e.transports.push("flashsocket")}("undefined"!=typeof io?io.Transport:module.exports,"undefined"!=typeof io?io:module.parent.exports),"undefined"!=typeof window)var swfobject=function(){function t(){if(!W){try{var t=L.getElementsByTagName("body")[0].appendChild(m("span"));t.parentNode.removeChild(t)}catch(e){return}W=!0;for(var n=j.length,r=0;n>r;r++)j[r]()}}function e(t){W?t():j[j.length]=t}function n(t){if(typeof P.addEventListener!=x)P.addEventListener("load",t,!1);else if(typeof L.addEventListener!=x)L.addEventListener("load",t,!1);else if(typeof P.attachEvent!=x)y(P,"onload",t);else if("function"==typeof P.onload){var e=P.onload;P.onload=function(){e(),t()}}else P.onload=t}function r(){V?o():i()}function o(){var t=L.getElementsByTagName("body")[0],e=m(I);e.setAttribute("type",T);var n=t.appendChild(e);if(n){var r=0;!function(){if(typeof n.GetVariable!=x){var o=n.GetVariable("$version");o&&(o=o.split(" ")[1].split(","),K.pv=[parseInt(o[0],10),parseInt(o[1],10),parseInt(o[2],10)])}else if(10>r)return r++,void setTimeout(arguments.callee,10);t.removeChild(e),n=null,i()}()}else i()}function i(){var t=z.length;if(t>0)for(var e=0;t>e;e++){var n=z[e].id,r=z[e].callbackFn,o={success:!1,id:n};if(K.pv[0]>0){var i=v(n);if(i)if(!_(z[e].swfVersion)||K.wk&&K.wk<312)if(z[e].expressInstall&&s()){var p={};p.data=z[e].expressInstall,p.width=i.getAttribute("width")||"0",p.height=i.getAttribute("height")||"0",i.getAttribute("class")&&(p.styleclass=i.getAttribute("class")),i.getAttribute("align")&&(p.align=i.getAttribute("align"));for(var l={},f=i.getElementsByTagName("param"),h=f.length,d=0;h>d;d++)"movie"!=f[d].getAttribute("name").toLowerCase()&&(l[f[d].getAttribute("name")]=f[d].getAttribute("value"));u(p,l,n,r)}else c(i),r&&r(o);else E(n,!0),r&&(o.success=!0,o.ref=a(n),r(o))}else if(E(n,!0),r){var m=a(n);m&&typeof m.SetVariable!=x&&(o.success=!0,o.ref=m),r(o)}}}function a(t){var e=null,n=v(t);if(n&&"OBJECT"==n.nodeName)if(typeof n.SetVariable!=x)e=n;else{var r=n.getElementsByTagName(I)[0];r&&(e=r)}return e}function s(){return!F&&_("6.0.65")&&(K.win||K.mac)&&!(K.wk&&K.wk<312)}function u(t,e,n,r){F=!0,D=r||null,O={success:!1,id:n};var o=v(n);if(o){"OBJECT"==o.nodeName?(w=p(o),N=null):(w=o,N=n),t.id=R,(typeof t.width==x||!/%$/.test(t.width)&&parseInt(t.width,10)<310)&&(t.width="310"),(typeof t.height==x||!/%$/.test(t.height)&&parseInt(t.height,10)<137)&&(t.height="137"),L.title=L.title.slice(0,47)+" - Flash Player Installation";var i=K.ie&&K.win?["Active"].concat("").join("X"):"PlugIn",a="MMredirectURL="+P.location.toString().replace(/&/g,"%26")+"&MMplayerType="+i+"&MMdoctitle="+L.title;if(typeof e.flashvars!=x?e.flashvars+="&"+a:e.flashvars=a,K.ie&&K.win&&4!=o.readyState){var s=m("div");n+="SWFObjectNew",s.setAttribute("id",n),o.parentNode.insertBefore(s,o),o.style.display="none",function(){4==o.readyState?o.parentNode.removeChild(o):setTimeout(arguments.callee,10)}()}l(t,e,n)}}function c(t){if(K.ie&&K.win&&4!=t.readyState){var e=m("div");t.parentNode.insertBefore(e,t),e.parentNode.replaceChild(p(t),e),t.style.display="none",function(){4==t.readyState?t.parentNode.removeChild(t):setTimeout(arguments.callee,10)}()}else t.parentNode.replaceChild(p(t),t)}function p(t){var e=m("div");if(K.win&&K.ie)e.innerHTML=t.innerHTML;else{var n=t.getElementsByTagName(I)[0];if(n){var r=n.childNodes;if(r)for(var o=r.length,i=0;o>i;i++)1==r[i].nodeType&&"PARAM"==r[i].nodeName||8==r[i].nodeType||e.appendChild(r[i].cloneNode(!0))}}return e}function l(t,e,n){var r,o=v(n);if(K.wk&&K.wk<312)return r;if(o)if(typeof t.id==x&&(t.id=n),K.ie&&K.win){var i="";for(var a in t)t[a]!=Object.prototype[a]&&("data"==a.toLowerCase()?e.movie=t[a]:"styleclass"==a.toLowerCase()?i+=' class="'+t[a]+'"':"classid"!=a.toLowerCase()&&(i+=" "+a+'="'+t[a]+'"'));var s="";for(var u in e)e[u]!=Object.prototype[u]&&(s+='<param name="'+u+'" value="'+e[u]+'" />');o.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'+i+">"+s+"</object>",B[B.length]=t.id,r=v(t.id)}else{var c=m(I);c.setAttribute("type",T);for(var p in t)t[p]!=Object.prototype[p]&&("styleclass"==p.toLowerCase()?c.setAttribute("class",t[p]):"classid"!=p.toLowerCase()&&c.setAttribute(p,t[p]));for(var l in e)e[l]!=Object.prototype[l]&&"movie"!=l.toLowerCase()&&f(c,l,e[l]);o.parentNode.replaceChild(c,o),r=c}return r}function f(t,e,n){var r=m("param");r.setAttribute("name",e),r.setAttribute("value",n),t.appendChild(r)}function h(t){var e=v(t);e&&"OBJECT"==e.nodeName&&(K.ie&&K.win?(e.style.display="none",function(){4==e.readyState?d(t):setTimeout(arguments.callee,10)}()):e.parentNode.removeChild(e))}function d(t){var e=v(t);if(e){for(var n in e)"function"==typeof e[n]&&(e[n]=null);e.parentNode.removeChild(e)}}function v(t){var e=null;try{e=L.getElementById(t)}catch(n){}return e}function m(t){return L.createElement(t)}function y(t,e,n){t.attachEvent(e,n),q[q.length]=[t,e,n]}function _(t){var e=K.pv,n=t.split(".");return n[0]=parseInt(n[0],10),n[1]=parseInt(n[1],10)||0,n[2]=parseInt(n[2],10)||0,e[0]>n[0]||e[0]==n[0]&&e[1]>n[1]||e[0]==n[0]&&e[1]==n[1]&&e[2]>=n[2]?!0:!1}function g(t,e,n,r){if(!K.ie||!K.mac){var o=L.getElementsByTagName("head")[0];if(o){var i=n&&"string"==typeof n?n:"screen";if(r&&(C=null,S=null),!C||S!=i){var a=m("style");a.setAttribute("type","text/css"),a.setAttribute("media",i),C=o.appendChild(a),K.ie&&K.win&&typeof L.styleSheets!=x&&L.styleSheets.length>0&&(C=L.styleSheets[L.styleSheets.length-1]),S=i}K.ie&&K.win?C&&typeof C.addRule==I&&C.addRule(t,e):C&&typeof L.createTextNode!=x&&C.appendChild(L.createTextNode(t+" {"+e+"}"))}}}function E(t,e){if(H){var n=e?"visible":"hidden";W&&v(t)?v(t).style.visibility=n:g("#"+t,"visibility:"+n)}}function b(t){var e=/[\\\"<>\.;]/,n=null!=e.exec(t);return n&&typeof encodeURIComponent!=x?encodeURIComponent(t):t}{var w,N,D,O,C,S,x="undefined",I="object",k="Shockwave Flash",M="ShockwaveFlash.ShockwaveFlash",T="application/x-shockwave-flash",R="SWFObjectExprInst",A="onreadystatechange",P=window,L=document,U=navigator,V=!1,j=[r],z=[],B=[],q=[],W=!1,F=!1,H=!0,K=function(){var t=typeof L.getElementById!=x&&typeof L.getElementsByTagName!=x&&typeof L.createElement!=x,e=U.userAgent.toLowerCase(),n=U.platform.toLowerCase(),r=/win/.test(n?n:e),o=/mac/.test(n?n:e),i=/webkit/.test(e)?parseFloat(e.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")):!1,a=!1,s=[0,0,0],u=null;if(typeof U.plugins!=x&&typeof U.plugins[k]==I)u=U.plugins[k].description,!u||typeof U.mimeTypes!=x&&U.mimeTypes[T]&&!U.mimeTypes[T].enabledPlugin||(V=!0,a=!1,u=u.replace(/^.*\s+(\S+\s+\S+$)/,"$1"),s[0]=parseInt(u.replace(/^(.*)\..*$/,"$1"),10),s[1]=parseInt(u.replace(/^.*\.(.*)\s.*$/,"$1"),10),s[2]=/[a-zA-Z]/.test(u)?parseInt(u.replace(/^.*[a-zA-Z]+(.*)$/,"$1"),10):0);else if(typeof P[["Active"].concat("Object").join("X")]!=x)try{var c=new(window[["Active"].concat("Object").join("X")])(M);c&&(u=c.GetVariable("$version"),u&&(a=!0,u=u.split(" ")[1].split(","),s=[parseInt(u[0],10),parseInt(u[1],10),parseInt(u[2],10)]))}catch(p){}return{w3:t,pv:s,wk:i,ie:a,win:r,mac:o}}();!function(){K.w3&&((typeof L.readyState!=x&&"complete"==L.readyState||typeof L.readyState==x&&(L.getElementsByTagName("body")[0]||L.body))&&t(),W||(typeof L.addEventListener!=x&&L.addEventListener("DOMContentLoaded",t,!1),K.ie&&K.win&&(L.attachEvent(A,function(){"complete"==L.readyState&&(L.detachEvent(A,arguments.callee),t())}),P==top&&!function(){if(!W){try{L.documentElement.doScroll("left")}catch(e){return void setTimeout(arguments.callee,0)}t()}}()),K.wk&&!function(){return W?void 0:/loaded|complete/.test(L.readyState)?void t():void setTimeout(arguments.callee,0)}(),n(t)))}(),function(){K.ie&&K.win&&window.attachEvent("onunload",function(){for(var t=q.length,e=0;t>e;e++)q[e][0].detachEvent(q[e][1],q[e][2]);for(var n=B.length,r=0;n>r;r++)h(B[r]);for(var o in K)K[o]=null;K=null;for(var i in swfobject)swfobject[i]=null;swfobject=null})}()}return{registerObject:function(t,e,n,r){if(K.w3&&t&&e){var o={};o.id=t,o.swfVersion=e,o.expressInstall=n,o.callbackFn=r,z[z.length]=o,E(t,!1)}else r&&r({success:!1,id:t})},getObjectById:function(t){return K.w3?a(t):void 0},embedSWF:function(t,n,r,o,i,a,c,p,f,h){var d={success:!1,id:n};K.w3&&!(K.wk&&K.wk<312)&&t&&n&&r&&o&&i?(E(n,!1),e(function(){r+="",o+="";var e={};if(f&&typeof f===I)for(var v in f)e[v]=f[v];e.data=t,e.width=r,e.height=o;var m={};if(p&&typeof p===I)for(var y in p)m[y]=p[y];if(c&&typeof c===I)for(var g in c)typeof m.flashvars!=x?m.flashvars+="&"+g+"="+c[g]:m.flashvars=g+"="+c[g];if(_(i)){var b=l(e,m,n);e.id==n&&E(n,!0),d.success=!0,d.ref=b}else{if(a&&s())return e.data=a,void u(e,m,n,h);E(n,!0)}h&&h(d)})):h&&h(d)},switchOffAutoHideShow:function(){H=!1},ua:K,getFlashPlayerVersion:function(){return{major:K.pv[0],minor:K.pv[1],release:K.pv[2]}
},hasFlashPlayerVersion:_,createSWF:function(t,e,n){return K.w3?l(t,e,n):void 0},showExpressInstall:function(t,e,n,r){K.w3&&s()&&u(t,e,n,r)},removeSWF:function(t){K.w3&&h(t)},createCSS:function(t,e,n,r){K.w3&&g(t,e,n,r)},addDomLoadEvent:e,addLoadEvent:n,getQueryParamValue:function(t){var e=L.location.search||L.location.hash;if(e){if(/\?/.test(e)&&(e=e.split("?")[1]),null==t)return b(e);for(var n=e.split("&"),r=0;r<n.length;r++)if(n[r].substring(0,n[r].indexOf("="))==t)return b(n[r].substring(n[r].indexOf("=")+1))}return""},expressInstallCallback:function(){if(F){var t=v(R);t&&w&&(t.parentNode.replaceChild(w,t),N&&(E(N,!0),K.ie&&K.win&&(w.style.display="block")),D&&D(O)),F=!1}}}}();!function(){if("undefined"!=typeof window&&!window.WebSocket){var t=window.console;if(t&&t.log&&t.error||(t={log:function(){},error:function(){}}),!swfobject.hasFlashPlayerVersion("10.0.0"))return void t.error("Flash Player >= 10.0.0 is required.");"file:"==location.protocol&&t.error("WARNING: web-socket-js doesn't work in file:///... URL unless you set Flash Security Settings properly. Open the page via Web server i.e. http://..."),WebSocket=function(t,e,n,r,o){var i=this;i.__id=WebSocket.__nextId++,WebSocket.__instances[i.__id]=i,i.readyState=WebSocket.CONNECTING,i.bufferedAmount=0,i.__events={},e?"string"==typeof e&&(e=[e]):e=[],setTimeout(function(){WebSocket.__addTask(function(){WebSocket.__flash.create(i.__id,t,e,n||null,r||0,o||null)})},0)},WebSocket.prototype.send=function(t){if(this.readyState==WebSocket.CONNECTING)throw"INVALID_STATE_ERR: Web Socket connection has not been established";var e=WebSocket.__flash.send(this.__id,encodeURIComponent(t));return 0>e?!0:(this.bufferedAmount+=e,!1)},WebSocket.prototype.close=function(){this.readyState!=WebSocket.CLOSED&&this.readyState!=WebSocket.CLOSING&&(this.readyState=WebSocket.CLOSING,WebSocket.__flash.close(this.__id))},WebSocket.prototype.addEventListener=function(t,e){t in this.__events||(this.__events[t]=[]),this.__events[t].push(e)},WebSocket.prototype.removeEventListener=function(t,e){if(t in this.__events)for(var n=this.__events[t],r=n.length-1;r>=0;--r)if(n[r]===e){n.splice(r,1);break}},WebSocket.prototype.dispatchEvent=function(t){for(var e=this.__events[t.type]||[],n=0;n<e.length;++n)e[n](t);var r=this["on"+t.type];r&&r(t)},WebSocket.prototype.__handleEvent=function(t){"readyState"in t&&(this.readyState=t.readyState),"protocol"in t&&(this.protocol=t.protocol);var e;if("open"==t.type||"error"==t.type)e=this.__createSimpleEvent(t.type);else if("close"==t.type)e=this.__createSimpleEvent("close");else{if("message"!=t.type)throw"unknown event type: "+t.type;var n=decodeURIComponent(t.message);e=this.__createMessageEvent("message",n)}this.dispatchEvent(e)},WebSocket.prototype.__createSimpleEvent=function(t){if(document.createEvent&&window.Event){var e=document.createEvent("Event");return e.initEvent(t,!1,!1),e}return{type:t,bubbles:!1,cancelable:!1}},WebSocket.prototype.__createMessageEvent=function(t,e){if(document.createEvent&&window.MessageEvent&&!window.opera){var n=document.createEvent("MessageEvent");return n.initMessageEvent("message",!1,!1,e,null,null,window,null),n}return{type:t,data:e,bubbles:!1,cancelable:!1}},WebSocket.CONNECTING=0,WebSocket.OPEN=1,WebSocket.CLOSING=2,WebSocket.CLOSED=3,WebSocket.__flash=null,WebSocket.__instances={},WebSocket.__tasks=[],WebSocket.__nextId=0,WebSocket.loadFlashPolicyFile=function(t){WebSocket.__addTask(function(){WebSocket.__flash.loadManualPolicyFile(t)})},WebSocket.__initialize=function(){if(!WebSocket.__flash){if(WebSocket.__swfLocation&&(window.WEB_SOCKET_SWF_LOCATION=WebSocket.__swfLocation),!window.WEB_SOCKET_SWF_LOCATION)return void t.error("[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf");var e=document.createElement("div");e.id="webSocketContainer",e.style.position="absolute",WebSocket.__isFlashLite()?(e.style.left="0px",e.style.top="0px"):(e.style.left="-100px",e.style.top="-100px");var n=document.createElement("div");n.id="webSocketFlash",e.appendChild(n),document.body.appendChild(e),swfobject.embedSWF(WEB_SOCKET_SWF_LOCATION,"webSocketFlash","1","1","10.0.0",null,null,{hasPriority:!0,swliveconnect:!0,allowScriptAccess:"always"},null,function(e){e.success||t.error("[WebSocket] swfobject.embedSWF failed")})}},WebSocket.__onFlashInitialized=function(){setTimeout(function(){WebSocket.__flash=document.getElementById("webSocketFlash"),WebSocket.__flash.setCallerUrl(location.href),WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);for(var t=0;t<WebSocket.__tasks.length;++t)WebSocket.__tasks[t]();WebSocket.__tasks=[]},0)},WebSocket.__onFlashEvent=function(){return setTimeout(function(){try{for(var e=WebSocket.__flash.receiveEvents(),n=0;n<e.length;++n)WebSocket.__instances[e[n].webSocketId].__handleEvent(e[n])}catch(r){t.error(r)}},0),!0},WebSocket.__log=function(e){t.log(decodeURIComponent(e))},WebSocket.__error=function(e){t.error(decodeURIComponent(e))},WebSocket.__addTask=function(t){WebSocket.__flash?t():WebSocket.__tasks.push(t)},WebSocket.__isFlashLite=function(){if(!window.navigator||!window.navigator.mimeTypes)return!1;var t=window.navigator.mimeTypes["application/x-shockwave-flash"];return t&&t.enabledPlugin&&t.enabledPlugin.filename&&t.enabledPlugin.filename.match(/flashlite/i)?!0:!1},window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION||(window.addEventListener?window.addEventListener("load",function(){WebSocket.__initialize()},!1):window.attachEvent("onload",function(){WebSocket.__initialize()}))}}(),function(t,e,n){function r(t){t&&(e.Transport.apply(this,arguments),this.sendBuffer=[])}function o(){}t.XHR=r,e.util.inherit(r,e.Transport),r.prototype.open=function(){return this.socket.setBuffer(!1),this.onOpen(),this.get(),this.setCloseTimeout(),this},r.prototype.payload=function(t){for(var n=[],r=0,o=t.length;o>r;r++)n.push(e.parser.encodePacket(t[r]));this.send(e.parser.encodePayload(n))},r.prototype.send=function(t){return this.post(t),this},r.prototype.post=function(t){function e(){4==this.readyState&&(this.onreadystatechange=o,i.posting=!1,200==this.status?i.socket.setBuffer(!1):i.onClose())}function r(){this.onload=o,i.socket.setBuffer(!1)}var i=this;this.socket.setBuffer(!0),this.sendXHR=this.request("POST"),n.XDomainRequest&&this.sendXHR instanceof XDomainRequest?this.sendXHR.onload=this.sendXHR.onerror=r:this.sendXHR.onreadystatechange=e,this.sendXHR.send(t)},r.prototype.close=function(){return this.onClose(),this},r.prototype.request=function(t){var n=e.util.request(this.socket.isXDomain()),r=e.util.query(this.socket.options.query,"t="+ +new Date);if(n.open(t||"GET",this.prepareUrl()+r,!0),"POST"==t)try{n.setRequestHeader?n.setRequestHeader("Content-type","text/plain;charset=UTF-8"):n.contentType="text/plain"}catch(o){}return n},r.prototype.scheme=function(){return this.socket.options.secure?"https":"http"},r.check=function(t,r){try{var o=e.util.request(r),i=n.XDomainRequest&&o instanceof XDomainRequest,a=t&&t.options&&t.options.secure?"https:":"http:",s=a!=n.location.protocol;if(o&&(!i||!s))return!0}catch(u){}return!1},r.xdomainCheck=function(t){return r.check(t,!0)}}("undefined"!=typeof io?io.Transport:module.exports,"undefined"!=typeof io?io:module.parent.exports,this),function(t,e){function n(){e.Transport.XHR.apply(this,arguments)}t.htmlfile=n,e.util.inherit(n,e.Transport.XHR),n.prototype.name="htmlfile",n.prototype.get=function(){this.doc=new(window[["Active"].concat("Object").join("X")])("htmlfile"),this.doc.open(),this.doc.write("<html></html>"),this.doc.close(),this.doc.parentWindow.s=this;var t=this.doc.createElement("div");t.className="socketio",this.doc.body.appendChild(t),this.iframe=this.doc.createElement("iframe"),t.appendChild(this.iframe);var n=this,r=e.util.query(this.socket.options.query,"t="+ +new Date);this.iframe.src=this.prepareUrl()+r,e.util.on(window,"unload",function(){n.destroy()})},n.prototype._=function(t,e){this.onData(t);try{var n=e.getElementsByTagName("script")[0];n.parentNode.removeChild(n)}catch(r){}},n.prototype.destroy=function(){if(this.iframe){try{this.iframe.src="about:blank"}catch(t){}this.doc=null,this.iframe.parentNode.removeChild(this.iframe),this.iframe=null,CollectGarbage()}},n.prototype.close=function(){return this.destroy(),e.Transport.XHR.prototype.close.call(this)},n.check=function(t){if("undefined"!=typeof window&&["Active"].concat("Object").join("X")in window)try{var n=new(window[["Active"].concat("Object").join("X")])("htmlfile");return n&&e.Transport.XHR.check(t)}catch(r){}return!1},n.xdomainCheck=function(){return!1},e.transports.push("htmlfile")}("undefined"!=typeof io?io.Transport:module.exports,"undefined"!=typeof io?io:module.parent.exports),function(t,e,n){function r(){e.Transport.XHR.apply(this,arguments)}function o(){}t["xhr-polling"]=r,e.util.inherit(r,e.Transport.XHR),e.util.merge(r,e.Transport.XHR),r.prototype.name="xhr-polling",r.prototype.heartbeats=function(){return!1},r.prototype.open=function(){var t=this;return e.Transport.XHR.prototype.open.call(t),!1},r.prototype.get=function(){function t(){4==this.readyState&&(this.onreadystatechange=o,200==this.status?(i.onData(this.responseText),i.get()):i.onClose())}function e(){this.onload=o,this.onerror=o,i.onData(this.responseText),i.get()}function r(){i.onClose()}if(this.isOpen){var i=this;this.xhr=this.request(),n.XDomainRequest&&this.xhr instanceof XDomainRequest?(this.xhr.onload=e,this.xhr.onerror=r):this.xhr.onreadystatechange=t,this.xhr.send(null)}},r.prototype.onClose=function(){if(e.Transport.XHR.prototype.onClose.call(this),this.xhr){this.xhr.onreadystatechange=this.xhr.onload=this.xhr.onerror=o;try{this.xhr.abort()}catch(t){}this.xhr=null}},r.prototype.ready=function(t,n){var r=this;e.util.defer(function(){n.call(r)})},e.transports.push("xhr-polling")}("undefined"!=typeof io?io.Transport:module.exports,"undefined"!=typeof io?io:module.parent.exports,this),function(t,e,n){function r(){e.Transport["xhr-polling"].apply(this,arguments),this.index=e.j.length;var t=this;e.j.push(function(e){t._(e)})}var o=n.document&&"MozAppearance"in n.document.documentElement.style;t["jsonp-polling"]=r,e.util.inherit(r,e.Transport["xhr-polling"]),r.prototype.name="jsonp-polling",r.prototype.post=function(t){function n(){r(),o.socket.setBuffer(!1)}function r(){o.iframe&&o.form.removeChild(o.iframe);try{a=document.createElement('<iframe name="'+o.iframeId+'">')}catch(t){a=document.createElement("iframe"),a.name=o.iframeId}a.id=o.iframeId,o.form.appendChild(a),o.iframe=a}var o=this,i=e.util.query(this.socket.options.query,"t="+ +new Date+"&i="+this.index);if(!this.form){var a,s=document.createElement("form"),u=document.createElement("textarea"),c=this.iframeId="socketio_iframe_"+this.index;s.className="socketio",s.style.position="absolute",s.style.top="0px",s.style.left="0px",s.style.display="none",s.target=c,s.method="POST",s.setAttribute("accept-charset","utf-8"),u.name="d",s.appendChild(u),document.body.appendChild(s),this.form=s,this.area=u}this.form.action=this.prepareUrl()+i,r(),this.area.value=e.JSON.stringify(t);try{this.form.submit()}catch(p){}this.iframe.attachEvent?a.onreadystatechange=function(){"complete"==o.iframe.readyState&&n()}:this.iframe.onload=n,this.socket.setBuffer(!0)},r.prototype.get=function(){var t=this,n=document.createElement("script"),r=e.util.query(this.socket.options.query,"t="+ +new Date+"&i="+this.index);this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),n.async=!0,n.src=this.prepareUrl()+r,n.onerror=function(){t.onClose()};var i=document.getElementsByTagName("script")[0];i.parentNode.insertBefore(n,i),this.script=n,o&&setTimeout(function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)},100)},r.prototype._=function(t){return this.onData(t),this.isOpen&&this.get(),this},r.prototype.ready=function(t,n){var r=this;return o?void e.util.load(function(){n.call(r)}):n.call(this)},r.check=function(){return"document"in n},r.xdomainCheck=function(){return!0},e.transports.push("jsonp-polling")}("undefined"!=typeof io?io.Transport:module.exports,"undefined"!=typeof io?io:module.parent.exports,this)}()}).call(exports,__webpack_require__(29)(module))},function(t,e,n){var r,o=function(){return r.indexOf(n.h())>=0},i=function s(){t.hot.check(function(e,n){return e?void console.warn(t.hot.status()in{abort:1,fail:1}?"[HMR] Cannot check for update. Need to do a full reload!":"[HMR] Update check failed: "+e):n?void t.hot.apply({ignoreUnaccepted:!0},function(e,r){if(e)return void console.warn(t.hot.status()in{abort:1,fail:1}?"[HMR] Cannot apply update (Need to do a full reload!): "+e:"[HMR] Update failed: "+e);o()||s();var i=n.filter(function(t){return r.indexOf(t)<0});i.length>0&&(console.warn("[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),i.forEach(function(t){console.warn("[HMR]  - "+t)})),r&&0!==r.length?(console.log("[HMR] Updated modules:"),r.forEach(function(t){console.log("[HMR]  - "+t)})):console.log("[HMR] Nothing hot updated."),o()&&console.log("[HMR] App is up to date.")}):(console.warn("[HMR] Cannot find update. Need to do a full reload!"),void console.warn("[HMR] (Propably because of restarting the webpack-dev-server)"))})},a=window.addEventListener?function(t,e){window.addEventListener(t,e,!1)}:function(t,e){window.attachEvent("on"+t,e)};a("message",function(e){"string"==typeof e.data&&0===e.data.indexOf("webpackHotUpdate")&&(r=e.data,o()||"idle"!==t.hot.status()||(console.log("[HMR] Checking for updates on the server..."),i()))}),console.log("[HMR] Waiting for update signal from WDS...")}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbWFpbi5lbnRyeS5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYjViNjRhNTVhOTIwMjNkZWNhNjgiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9+L25vZGUtbGlicy1icm93c2VyL34vcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9PYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0RWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0TW91bnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvRXZlbnRDb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RDb21wb3NpdGVDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RQZXJmLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0VXBkYXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL2tleU9mLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1Bvb2xlZENsYXNzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0RE9NLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL0RPTVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1N5bnRoZXRpY0V2ZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL0RPTVByb3BlcnR5T3BlcmF0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9FdmVudFByb3BhZ2F0b3JzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdEluc3RhbmNlSGFuZGxlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9rZXlNaXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvRXZlbnRQbHVnaW5IdWIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RMZWdhY3lFbGVtZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1N5bnRoZXRpY1VJRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWhvdC1sb2FkZXIvUm9vdEluc3RhbmNlUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1ob3QtbG9hZGVyL21ha2VFeHBvcnRzSG90LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtaG90LWxvYWRlci9+L3JlYWN0LWhvdC1hcGkvbW9kdWxlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9BdXRvRm9jdXNNaXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdEVtcHR5Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1N5bnRoZXRpY01vdXNlRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvVHJhbnNhY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9tb25pdG9yQ29kZVVzZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L3JlYWN0LmpzIiwid2VicGFjazovLy8uL2xlc3MvaW5kZXgubGVzcyIsIndlYnBhY2s6Ly8vLi9+L29tbmlzY2llbnQvY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL0NhbGxiYWNrUXVldWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvRXZlbnRQbHVnaW5VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9MaW5rZWRWYWx1ZVV0aWxzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0Q29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdEVsZW1lbnRWYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RJbnB1dFNlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9hY2N1bXVsYXRlSW50by5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9kZXByZWNhdGVkLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL2VzY2FwZVRleHRGb3JCcm93c2VyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL2ZvckVhY2hBY2N1bXVsYXRlZC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9nZXRFdmVudENoYXJDb2RlLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL2dldEV2ZW50TW9kaWZpZXJTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9nZXRFdmVudFRhcmdldC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9nZXRUZXh0Q29udGVudEFjY2Vzc29yLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL2lzRXZlbnRTdXBwb3J0ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbW1zdHJ1Y3Qvfi9pbW11dGFibGUvZGlzdC9pbW11dGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1ob3QtbG9hZGVyL2lzUmVhY3RDbGFzc2lzaC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9DU1NQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvRXZlbnRQbHVnaW5SZWdpc3RyeS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9Mb2NhbEV2ZW50VHJhcE1peGluLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0RE9NQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0TWFya3VwQ2hlY2tzdW0uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RNdWx0aUNoaWxkLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0TmF0aXZlQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0T3duZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdFByb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdFB1dExpc3RlbmVyUXVldWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RSb290SW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RUZXh0Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1ZpZXdwb3J0TWV0cmljcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9jb250YWluc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvZm9jdXNOb2RlLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL2dldEFjdGl2ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvZ2V0TWFya3VwV3JhcC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9nZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvaXNUZXh0SW5wdXRFbGVtZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL21hcE9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9tZW1vaXplU3RyaW5nT25seS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9zZXRJbm5lckhUTUwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvdHJhdmVyc2VBbGxDaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2Nzcy1sb2FkZXIvY3NzVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbW1zdHJ1Y3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbW1zdHJ1Y3Qvfi9ldmVudGVtaXR0ZXIzL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vaW1tc3RydWN0L34vaW1tdXRhYmxlL2NvbnRyaWIvY3Vyc29yL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vaW1tc3RydWN0L34vaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9+L2ltbXN0cnVjdC9zcmMvc3RydWN0dXJlLmpzIiwid2VicGFjazovLy8uL34vaW1tc3RydWN0L3NyYy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9+L2ltbXV0YWJsZS9kaXN0L2ltbXV0YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2pzb25wL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vanNvbnAvfi9kZWJ1Zy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL34vanNvbnAvfi9kZWJ1Zy9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9+L2pzb25wL34vZGVidWcvfi9tcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L29tbmlzY2llbnQvfi9kZWVwLWVxdWFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vb21uaXNjaWVudC9+L2RlZXAtZXF1YWwvbGliL2lzX2FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9+L29tbmlzY2llbnQvfi9kZWVwLWVxdWFsL2xpYi9rZXlzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtaG90LWxvYWRlci9nZXRSb290SW5zdGFuY2VzRnJvbVJlYWN0TW91bnQuanMiLCJ3ZWJwYWNrOi8vLy4vanMvYXBwLmpzIiwid2VicGFjazovLy8uL2pzL2dvb2dsZURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vanMvdXNlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWhvdC1sb2FkZXIvaXNSZWFjdEVsZW1lbnRpc2guanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1ob3QtbG9hZGVyL34vcmVhY3QtaG90LWFwaS9tb2R1bGVzL2JpbmRBdXRvQmluZE1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1ob3QtbG9hZGVyL34vcmVhY3QtaG90LWFwaS9tb2R1bGVzL2RlZXBGb3JjZVVwZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWhvdC1sb2FkZXIvfi9yZWFjdC1ob3QtYXBpL21vZHVsZXMvbWFrZUFzc2ltaWxhdGVQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1ob3QtbG9hZGVyL34vcmVhY3QtaG90LWFwaS9tb2R1bGVzL21ha2VNYWtlSG90LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtaG90LWxvYWRlci9+L3JlYWN0LWhvdC1hcGkvbW9kdWxlcy9tYWtlUGF0Y2hSZWFjdENsYXNzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtaG90LWxvYWRlci9+L3JlYWN0LWhvdC1hcGkvbW9kdWxlcy9yZXF1ZXN0Rm9yY2VVcGRhdGVBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvQmVmb3JlSW5wdXRFdmVudFBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9DaGFuZ2VFdmVudFBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9DbGllbnRSZWFjdFJvb3RJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9Db21wb3NpdGlvbkV2ZW50UGx1Z2luLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL0RPTUNoaWxkcmVuT3BlcmF0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9EYW5nZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvRW50ZXJMZWF2ZUV2ZW50UGx1Z2luLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL0V2ZW50TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvSFRNTERPTVByb3BlcnR5Q29uZmlnLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL01vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RDaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdERPTUJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdERPTUZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RET01JRE9wZXJhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RET01JbWcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RET01JbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdERPTU9wdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdERPTVNlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdERPTVNlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdERPTVRleHRhcmVhLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3REZWZhdWx0SW5qZWN0aW9uLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0RGVmYXVsdFBlcmYuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0RXJyb3JVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdEV2ZW50RW1pdHRlck1peGluLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0RXZlbnRMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdEluamVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdFByb3BUcmFuc2ZlcmVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RTZXJ2ZXJSZW5kZXJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9TVkdET01Qcm9wZXJ0eUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9TZWxlY3RFdmVudFBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9TZXJ2ZXJSZWFjdFJvb3RJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9TaW1wbGVFdmVudFBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9TeW50aGV0aWNDbGlwYm9hcmRFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9TeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1N5bnRoZXRpY0RyYWdFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9TeW50aGV0aWNGb2N1c0V2ZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1N5bnRoZXRpY0lucHV0RXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvU3ludGhldGljS2V5Ym9hcmRFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9TeW50aGV0aWNUb3VjaEV2ZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1N5bnRoZXRpY1doZWVsRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvYWRsZXIzMi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9jYW1lbGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9jYW1lbGl6ZVN0eWxlTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9jcmVhdGVBcnJheUZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvY3JlYXRlTm9kZXNGcm9tTWFya3VwLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL2Rhbmdlcm91c1N0eWxlVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvZW1wdHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvZmxhdHRlbkNoaWxkcmVuLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL2dldEV2ZW50S2V5LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL2dldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvaHlwaGVuYXRlLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL2h5cGhlbmF0ZVN0eWxlTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9pc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9qb2luQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9vbmx5Q2hpbGQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvcGVyZm9ybWFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvcGVyZm9ybWFuY2VOb3cuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL3RvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL2xlc3MvaW5kZXgubGVzcz9jMTZhIiwid2VicGFjazovLy8od2VicGFjayktZGV2LXNlcnZlci9jbGllbnQiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS1kZXYtc2VydmVyL2NsaWVudC93ZWJfbW9kdWxlcy9zb2NrZXQuaW8vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS1kZXYtc2VydmVyL2NsaWVudC93ZWJfbW9kdWxlcy9zb2NrZXQuaW8vc29ja2V0LmlvLmpzIiwid2VicGFjazovLy8od2VicGFjaykvaG90L29ubHktZGV2LXNlcnZlci5qcyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiaG90RG93bmxvYWRVcGRhdGVDaHVuayIsImNodW5rSWQiLCJoZWFkIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwiY2hhcnNldCIsInNyYyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJwIiwiaG90Q3VycmVudEhhc2giLCJhcHBlbmRDaGlsZCIsImhvdERvd25sb2FkTWFuaWZlc3QiLCJjYWxsYmFjayIsIlhNTEh0dHBSZXF1ZXN0IiwiRXJyb3IiLCJyZXF1ZXN0IiwicmVxdWVzdFBhdGgiLCJvcGVuIiwidGltZW91dCIsInNlbmQiLCJlcnIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwidXBkYXRlIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiZSIsImhvdENyZWF0ZVJlcXVpcmUiLCJtb2R1bGVJZCIsIm1lIiwiaW5zdGFsbGVkTW9kdWxlcyIsImZuIiwiaG90IiwiYWN0aXZlIiwicGFyZW50cyIsImluZGV4T2YiLCJwdXNoIiwiY2hpbGRyZW4iLCJob3RDdXJyZW50UGFyZW50cyIsImNvbnNvbGUiLCJ3YXJuIiwibmFtZSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImhvdFN0YXR1cyIsImhvdFNldFN0YXR1cyIsImhvdENodW5rc0xvYWRpbmciLCJmaW5pc2hDaHVua0xvYWRpbmciLCJob3RXYWl0aW5nRmlsZXNNYXAiLCJob3RFbnN1cmVVcGRhdGVDaHVuayIsImhvdFdhaXRpbmdGaWxlcyIsImhvdFVwZGF0ZURvd25sb2FkZWQiLCJob3RDcmVhdGVNb2R1bGUiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJfZGVjbGluZWREZXBlbmRlbmNpZXMiLCJfc2VsZkFjY2VwdGVkIiwiX3NlbGZEZWNsaW5lZCIsIl9kaXNwb3NlSGFuZGxlcnMiLCJhY2NlcHQiLCJkZXAiLCJpIiwibGVuZ3RoIiwiZGVjbGluZSIsImRpc3Bvc2UiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaWR4Iiwic3BsaWNlIiwiY2hlY2siLCJob3RDaGVjayIsImFwcGx5IiwiaG90QXBwbHkiLCJsIiwiaG90U3RhdHVzSGFuZGxlcnMiLCJhZGRTdGF0dXNIYW5kbGVyIiwicmVtb3ZlU3RhdHVzSGFuZGxlciIsImRhdGEiLCJob3RDdXJyZW50TW9kdWxlRGF0YSIsIm5ld1N0YXR1cyIsImhvdEFwcGx5T25VcGRhdGUiLCJob3RSZXF1ZXN0ZWRGaWxlc01hcCIsImhvdEF2YWlsaWJsZUZpbGVzTWFwIiwiYyIsImhvdFVwZGF0ZU5ld0hhc2giLCJoIiwiaG90Q2FsbGJhY2siLCJob3RVcGRhdGUiLCJob3RBZGRVcGRhdGVDaHVuayIsIm1vcmVNb2R1bGVzIiwib3V0ZGF0ZWRNb2R1bGVzIiwiaWQiLCJvcHRpb25zIiwiZ2V0QWZmZWN0ZWRTdHVmZiIsIm1vZHVsZSIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJzbGljZSIsInBvcCIsInBhcmVudElkIiwicGFyZW50IiwiYWRkQWxsVG9TZXQiLCJhIiwiYiIsIml0ZW0iLCJhcHBsaWVkVXBkYXRlIiwicmVzdWx0IiwiaWdub3JlVW5hY2NlcHRlZCIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImVycm9ySGFuZGxlciIsImRpc3Bvc2VIYW5kbGVycyIsImoiLCJjYiIsImNoaWxkIiwibW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJkZXBlbmRlbmN5IiwiZXJyb3IiLCJjYWxsYmFja3MiLCJleHBvcnRzIiwibG9hZGVkIiwicGFyZW50SG90VXBkYXRlQ2FsbGJhY2siLCJ0aGlzIiwibSIsIm5vb3AiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJjYW5TZXRJbW1lZGlhdGUiLCJ3aW5kb3ciLCJzZXRJbW1lZGlhdGUiLCJjYW5NdXRhdGlvbk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsImNhblBvc3QiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJmIiwiaGlkZGVuRGl2Iiwib2JzZXJ2ZXIiLCJxdWV1ZUxpc3QiLCJmb3JFYWNoIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJzZXRBdHRyaWJ1dGUiLCJldiIsInNvdXJjZSIsInN0b3BQcm9wYWdhdGlvbiIsInNoaWZ0Iiwic2V0VGltZW91dCIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImludmFyaWFudCIsImNvbmRpdGlvbiIsImZvcm1hdCIsImQiLCJOT0RFX0VOViIsInVuZGVmaW5lZCIsImFyZ3MiLCJhcmdJbmRleCIsInJlcGxhY2UiLCJmcmFtZXNUb1BvcCIsImFzc2lnbiIsInRhcmdldCIsIlR5cGVFcnJvciIsInRvIiwibmV4dEluZGV4IiwiYXJndW1lbnRzIiwibmV4dFNvdXJjZSIsImZyb20iLCJrZXkiLCJkZWZpbmVXYXJuaW5nUHJvcGVydHkiLCJvYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJfc3RvcmUiLCJzZXQiLCJ2YWx1ZSIsIndhcm5pbmciLCJkZWZpbmVNdXRhdGlvbk1lbWJyYW5lIiwicHNldWRvRnJvemVuUHJvcGVydGllcyIsInByb3BzIiwidXNlTXV0YXRpb25NZW1icmFuZSIsIngiLCJSZWFjdENvbnRleHQiLCJSZWFjdEN1cnJlbnRPd25lciIsIlJFU0VSVkVEX1BST1BTIiwicmVmIiwiUmVhY3RFbGVtZW50Iiwib3duZXIiLCJjb250ZXh0IiwiX293bmVyIiwiX2NvbnRleHQiLCJ2YWxpZGF0ZWQiLCJmcmVlemUiLCJfaXNSZWFjdEVsZW1lbnQiLCJjb25maWciLCJwcm9wTmFtZSIsImNoaWxkcmVuTGVuZ3RoIiwiY2hpbGRBcnJheSIsIkFycmF5IiwiZGVmYXVsdFByb3BzIiwiY3VycmVudCIsImNyZWF0ZUZhY3RvcnkiLCJmYWN0b3J5IiwiYmluZCIsImNsb25lQW5kUmVwbGFjZVByb3BzIiwib2xkRWxlbWVudCIsIm5ld1Byb3BzIiwibmV3RWxlbWVudCIsImlzVmFsaWRFbGVtZW50IiwiaXNFbGVtZW50IiwiY2FuVXNlRE9NIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJhdHRhY2hFdmVudCIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNJbldvcmtlciIsImVtcHR5RnVuY3Rpb24iLCIkX18wIiwiJF9fMSIsImdldFJlYWN0Um9vdElEIiwiY29udGFpbmVyIiwicm9vdEVsZW1lbnQiLCJnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIiLCJSZWFjdE1vdW50IiwiZ2V0SUQiLCJub2RlIiwiaW50ZXJuYWxHZXRJRCIsIm5vZGVDYWNoZSIsImNhY2hlZCIsImlzVmFsaWQiLCJBVFRSX05BTUUiLCJnZXRBdHRyaWJ1dGUiLCJzZXRJRCIsIm9sZElEIiwiZ2V0Tm9kZSIsImZpbmRSZWFjdE5vZGVCeUlEIiwiZmluZFJlYWN0Q29udGFpbmVyRm9ySUQiLCJjb250YWluc05vZGUiLCJwdXJnZUlEIiwiZmluZERlZXBlc3RDYWNoZWRBbmNlc3RvckltcGwiLCJhbmNlc3RvcklEIiwiYW5jZXN0b3IiLCJkZWVwZXN0Tm9kZVNvRmFyIiwiZmluZERlZXBlc3RDYWNoZWRBbmNlc3RvciIsInRhcmdldElEIiwiUmVhY3RJbnN0YW5jZUhhbmRsZXMiLCJ0cmF2ZXJzZUFuY2VzdG9ycyIsImZvdW5kTm9kZSIsIkRPTVByb3BlcnR5IiwiUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyIiwiUmVhY3RMZWdhY3lFbGVtZW50IiwiUmVhY3RQZXJmIiwiZGVwcmVjYXRlZCIsImluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQiLCJzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCIsIndyYXBDcmVhdGVFbGVtZW50IiwiU0VQQVJBVE9SIiwiSURfQVRUUklCVVRFX05BTUUiLCJFTEVNRU5UX05PREVfVFlQRSIsIkRPQ19OT0RFX1RZUEUiLCJpbnN0YW5jZXNCeVJlYWN0Um9vdElEIiwiY29udGFpbmVyc0J5UmVhY3RSb290SUQiLCJyb290RWxlbWVudHNCeVJlYWN0Um9vdElEIiwiZmluZENvbXBvbmVudFJvb3RSZXVzYWJsZUFycmF5IiwiX2luc3RhbmNlc0J5UmVhY3RSb290SUQiLCJzY3JvbGxNb25pdG9yIiwicmVuZGVyQ2FsbGJhY2siLCJfdXBkYXRlUm9vdENvbXBvbmVudCIsInByZXZDb21wb25lbnQiLCJuZXh0Q29tcG9uZW50IiwibmV4dFByb3BzIiwicmVwbGFjZVByb3BzIiwiX3JlZ2lzdGVyQ29tcG9uZW50Iiwibm9kZVR5cGUiLCJlbnN1cmVTY3JvbGxWYWx1ZU1vbml0b3JpbmciLCJyZWFjdFJvb3RJRCIsInJlZ2lzdGVyQ29udGFpbmVyIiwiX3JlbmRlck5ld1Jvb3RDb21wb25lbnQiLCJtZWFzdXJlIiwic2hvdWxkUmV1c2VNYXJrdXAiLCJjb21wb25lbnRJbnN0YW5jZSIsIm1vdW50Q29tcG9uZW50SW50b05vZGUiLCJyZW5kZXIiLCJuZXh0RWxlbWVudCIsImlzVmFsaWRGYWN0b3J5IiwicHJldkVsZW1lbnQiLCJfY3VycmVudEVsZW1lbnQiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwicmVhY3RSb290RWxlbWVudCIsImNvbnRhaW5lckhhc1JlYWN0TWFya3VwIiwiaXNSZW5kZXJlZEJ5UmVhY3QiLCJjb21wb25lbnQiLCJjb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsImVsZW1lbnQiLCJjb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnRCeUlEIiwiZG9tTm9kZSIsImdldEVsZW1lbnRCeUlkIiwiZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEIiwiY3JlYXRlUmVhY3RSb290SUQiLCJ1bm1vdW50Q29tcG9uZW50RnJvbU5vZGUiLCJpbnN0YW5jZSIsInVubW91bnRDb21wb25lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJsYXN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsInBhcmVudE5vZGUiLCJjb250YWluZXJDaGlsZCIsImZpcnN0Q2hpbGQiLCJyZWFjdFJvb3QiLCJmaW5kQ29tcG9uZW50Um9vdCIsImNoYXJBdCIsImdldEZpcnN0UmVhY3RET00iLCJhbmNlc3Rvck5vZGUiLCJmaXJzdENoaWxkcmVuIiwiY2hpbGRJbmRleCIsImRlZXBlc3RBbmNlc3RvciIsInRhcmdldENoaWxkIiwiY2hpbGRJRCIsImlzQW5jZXN0b3JJRE9mIiwibmV4dFNpYmxpbmciLCJyZW5kZXJDb21wb25lbnQiLCJrZXlNaXJyb3IiLCJQcm9wYWdhdGlvblBoYXNlcyIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsInRvcExldmVsVHlwZXMiLCJ0b3BCbHVyIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDb21wb3NpdGlvbkVuZCIsInRvcENvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvblVwZGF0ZSIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcEVycm9yIiwidG9wRm9jdXMiLCJ0b3BJbnB1dCIsInRvcEtleURvd24iLCJ0b3BLZXlQcmVzcyIsInRvcEtleVVwIiwidG9wTG9hZCIsInRvcE1vdXNlRG93biIsInRvcE1vdXNlTW92ZSIsInRvcE1vdXNlT3V0IiwidG9wTW91c2VPdmVyIiwidG9wTW91c2VVcCIsInRvcFBhc3RlIiwidG9wUmVzZXQiLCJ0b3BTY3JvbGwiLCJ0b3BTZWxlY3Rpb25DaGFuZ2UiLCJ0b3BTdWJtaXQiLCJ0b3BUZXh0SW5wdXQiLCJ0b3BUb3VjaENhbmNlbCIsInRvcFRvdWNoRW5kIiwidG9wVG91Y2hNb3ZlIiwidG9wVG91Y2hTdGFydCIsInRvcFdoZWVsIiwiRXZlbnRDb25zdGFudHMiLCJnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0iLCJkaXNwbGF5TmFtZSIsInZhbGlkYXRlVHlwZURlZiIsIkNvbnN0cnVjdG9yIiwidHlwZURlZiIsImxvY2F0aW9uIiwiUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMiLCJ2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlIiwicHJvdG8iLCJzcGVjUG9saWN5IiwiUmVhY3RDb21wb3NpdGVDb21wb25lbnRJbnRlcmZhY2UiLCJSZWFjdENvbXBvc2l0ZUNvbXBvbmVudE1peGluIiwiU3BlY1BvbGljeSIsIk9WRVJSSURFX0JBU0UiLCJERUZJTkVfTUFOWSIsIkRFRklORV9NQU5ZX01FUkdFRCIsInZhbGlkYXRlTGlmZUN5Y2xlT25SZXBsYWNlU3RhdGUiLCJjb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSIsIl9jb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSIsImlzTW91bnRlZCIsIkNvbXBvc2l0ZUxpZmVDeWNsZSIsIk1PVU5USU5HIiwiVU5NT1VOVElORyIsIm1peFNwZWNJbnRvQ29tcG9uZW50Iiwic3BlYyIsIk1JWElOU19LRVkiLCJSRVNFUlZFRF9TUEVDX0tFWVMiLCJtaXhpbnMiLCJwcm9wZXJ0eSIsImlzQ29tcG9zaXRlQ29tcG9uZW50TWV0aG9kIiwiaXNBbHJlYWR5RGVmaW5lZCIsIm1hcmtlZERvbnRCaW5kIiwiX19yZWFjdERvbnRCaW5kIiwiaXNGdW5jdGlvbiIsInNob3VsZEF1dG9CaW5kIiwiX19yZWFjdEF1dG9CaW5kTWFwIiwiY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24iLCJjcmVhdGVDaGFpbmVkRnVuY3Rpb24iLCJtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudCIsInN0YXRpY3MiLCJpc1Jlc2VydmVkIiwiaXNJbmhlcml0ZWQiLCJtZXJnZU9iamVjdHNXaXRoTm9EdXBsaWNhdGVLZXlzIiwib25lIiwidHdvIiwibWFwT2JqZWN0IiwiUmVhY3RDb21wb25lbnQiLCJSZWFjdEVsZW1lbnRWYWxpZGF0b3IiLCJSZWFjdEVtcHR5Q29tcG9uZW50IiwiUmVhY3RFcnJvclV0aWxzIiwiUmVhY3RPd25lciIsIlJlYWN0UHJvcFRyYW5zZmVyZXIiLCJSZWFjdFByb3BUeXBlTG9jYXRpb25zIiwiUmVhY3RVcGRhdGVzIiwia2V5T2YiLCJtb25pdG9yQ29kZVVzZSIsIkRFRklORV9PTkNFIiwiaW5qZWN0ZWRNaXhpbnMiLCJwcm9wVHlwZXMiLCJjb250ZXh0VHlwZXMiLCJjaGlsZENvbnRleHRUeXBlcyIsImdldERlZmF1bHRQcm9wcyIsImdldEluaXRpYWxTdGF0ZSIsImdldENoaWxkQ29udGV4dCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInVwZGF0ZUNvbXBvbmVudCIsImNoaWxkQ29udGV4dCIsInByb3AiLCJSRUNFSVZJTkdfUFJPUFMiLCJjb25zdHJ1Y3QiLCJNaXhpbiIsInN0YXRlIiwiX3BlbmRpbmdTdGF0ZSIsIm1vdW50Q29tcG9uZW50Iiwicm9vdElEIiwidHJhbnNhY3Rpb24iLCJtb3VudERlcHRoIiwiX2JpbmRBdXRvQmluZE1ldGhvZHMiLCJfcHJvY2Vzc0NvbnRleHQiLCJfcHJvY2Vzc1Byb3BzIiwiaXNBcnJheSIsIl9wZW5kaW5nRm9yY2VVcGRhdGUiLCJfcmVuZGVyZWRDb21wb25lbnQiLCJfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50IiwibWFya3VwIiwiZ2V0UmVhY3RNb3VudFJlYWR5IiwiZW5xdWV1ZSIsInNldFN0YXRlIiwicGFydGlhbFN0YXRlIiwicmVwbGFjZVN0YXRlIiwiY29tcGxldGVTdGF0ZSIsImVucXVldWVVcGRhdGUiLCJtYXNrZWRDb250ZXh0IiwiY29udGV4dE5hbWUiLCJfY2hlY2tQcm9wVHlwZXMiLCJfcHJvY2Vzc0NoaWxkQ29udGV4dCIsImN1cnJlbnRDb250ZXh0IiwiY29tcG9uZW50TmFtZSIsImFkZGVuZHVtIiwibWVzc2FnZSIsInBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeSIsIl9wZW5kaW5nRWxlbWVudCIsIm5leHRDb250ZXh0IiwibmV4dFN0YXRlIiwic2hvdWxkVXBkYXRlIiwiX3BlcmZvcm1Db21wb25lbnRVcGRhdGUiLCJwcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJwcmV2Q29udGV4dCIsInJlY2VpdmVDb21wb25lbnQiLCJwcmV2UGFyZW50RWxlbWVudCIsInByZXZDb21wb25lbnRJbnN0YW5jZSIsInRoaXNJRCIsIl9yb290Tm9kZUlEIiwicHJldkNvbXBvbmVudElEIiwibmV4dE1hcmt1cCIsIl9tb3VudERlcHRoIiwiQmFja2VuZElET3BlcmF0aW9ucyIsImRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRCIsImZvcmNlVXBkYXRlIiwicmVuZGVyZWRDb21wb25lbnQiLCJwcmV2aW91c0NvbnRleHQiLCJnZXRFbXB0eUNvbXBvbmVudCIsInJlZ2lzdGVyTnVsbENvbXBvbmVudElEIiwiZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRCIsImF1dG9CaW5kS2V5IiwibWV0aG9kIiwiX2JpbmRBdXRvQmluZE1ldGhvZCIsImd1YXJkIiwiYm91bmRNZXRob2QiLCJfX3JlYWN0Qm91bmRDb250ZXh0IiwiX19yZWFjdEJvdW5kTWV0aG9kIiwiX19yZWFjdEJvdW5kQXJndW1lbnRzIiwiX2JpbmQiLCJuZXdUaGlzIiwicmVib3VuZE1ldGhvZCIsIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50QmFzZSIsIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50IiwiTGlmZUN5Y2xlIiwiQmFzZSIsImNyZWF0ZUNsYXNzIiwiY29tcG9uZW50U2hvdWxkVXBkYXRlIiwibWV0aG9kTmFtZSIsIndyYXBGYWN0b3J5IiwiaW5qZWN0aW9uIiwiaW5qZWN0TWl4aW4iLCJtaXhpbiIsIlJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluIiwiZ2V0RE9NTm9kZSIsImlzTnVsbENvbXBvbmVudElEIiwiX25vTWVhc3VyZSIsIm9iak5hbWUiLCJmbk5hbWUiLCJmdW5jIiwiZW5hYmxlTWVhc3VyZSIsInN0b3JlZE1lYXN1cmUiLCJtZWFzdXJlZEZ1bmMiLCJ3cmFwcGVyIiwiaW5qZWN0TWVhc3VyZSIsImVuc3VyZUluamVjdGVkIiwiUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiIsImJhdGNoaW5nU3RyYXRlZ3kiLCJSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uIiwicmVpbml0aWFsaXplVHJhbnNhY3Rpb24iLCJkaXJ0eUNvbXBvbmVudHNMZW5ndGgiLCJjYWxsYmFja1F1ZXVlIiwiQ2FsbGJhY2tRdWV1ZSIsImdldFBvb2xlZCIsInJlY29uY2lsZVRyYW5zYWN0aW9uIiwiYmF0Y2hlZFVwZGF0ZXMiLCJtb3VudERlcHRoQ29tcGFyYXRvciIsImMxIiwiYzIiLCJydW5CYXRjaGVkVXBkYXRlcyIsImxlbiIsImRpcnR5Q29tcG9uZW50cyIsInNvcnQiLCJfcGVuZGluZ0NhbGxiYWNrcyIsImlzQmF0Y2hpbmdVcGRhdGVzIiwiYXNhcCIsImFzYXBDYWxsYmFja1F1ZXVlIiwiYXNhcEVucXVldWVkIiwiUG9vbGVkQ2xhc3MiLCJUcmFuc2FjdGlvbiIsIk5FU1RFRF9VUERBVEVTIiwiaW5pdGlhbGl6ZSIsImNsb3NlIiwiZmx1c2hCYXRjaGVkVXBkYXRlcyIsIlVQREFURV9RVUVVRUlORyIsInJlc2V0Iiwibm90aWZ5QWxsIiwiVFJBTlNBQ1RJT05fV1JBUFBFUlMiLCJnZXRUcmFuc2FjdGlvbldyYXBwZXJzIiwiZGVzdHJ1Y3RvciIsInJlbGVhc2UiLCJwZXJmb3JtIiwic2NvcGUiLCJhZGRQb29saW5nVG8iLCJSZWFjdFVwZGF0ZXNJbmplY3Rpb24iLCJpbmplY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiIsIlJlY29uY2lsZVRyYW5zYWN0aW9uIiwiaW5qZWN0QmF0Y2hpbmdTdHJhdGVneSIsIl9iYXRjaGluZ1N0cmF0ZWd5IiwibWFrZUVtcHR5RnVuY3Rpb24iLCJhcmciLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50Iiwib25lS2V5T2JqIiwib25lQXJndW1lbnRQb29sZXIiLCJjb3B5RmllbGRzRnJvbSIsIktsYXNzIiwiaW5zdGFuY2VQb29sIiwidHdvQXJndW1lbnRQb29sZXIiLCJhMSIsImEyIiwidGhyZWVBcmd1bWVudFBvb2xlciIsImEzIiwiZml2ZUFyZ3VtZW50UG9vbGVyIiwiYTQiLCJhNSIsInN0YW5kYXJkUmVsZWFzZXIiLCJwb29sU2l6ZSIsIkRFRkFVTFRfUE9PTF9TSVpFIiwiREVGQVVMVF9QT09MRVIiLCJDb3B5Q29uc3RydWN0b3IiLCJwb29sZXIiLCJOZXdLbGFzcyIsImNyZWF0ZURPTUZhY3RvcnkiLCJ0YWciLCJtYXJrTm9uTGVnYWN5RmFjdG9yeSIsIlJlYWN0RE9NIiwiYWJiciIsImFkZHJlc3MiLCJhcmVhIiwiYXJ0aWNsZSIsImFzaWRlIiwiYXVkaW8iLCJiYXNlIiwiYmRpIiwiYmRvIiwiYmlnIiwiYmxvY2txdW90ZSIsImJvZHkiLCJiciIsImJ1dHRvbiIsImNhbnZhcyIsImNhcHRpb24iLCJjaXRlIiwiY29kZSIsImNvbCIsImNvbGdyb3VwIiwiZGF0YWxpc3QiLCJkZCIsImRlbCIsImRldGFpbHMiLCJkZm4iLCJkaWFsb2ciLCJkaXYiLCJkbCIsImR0IiwiZW0iLCJlbWJlZCIsImZpZWxkc2V0IiwiZmlnY2FwdGlvbiIsImZpZ3VyZSIsImZvb3RlciIsImZvcm0iLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJoZWFkZXIiLCJociIsImh0bWwiLCJpZnJhbWUiLCJpbWciLCJpbnB1dCIsImlucyIsImtiZCIsImtleWdlbiIsImxhYmVsIiwibGVnZW5kIiwibGkiLCJsaW5rIiwibWFpbiIsIm1hcCIsIm1hcmsiLCJtZW51IiwibWVudWl0ZW0iLCJtZXRhIiwibWV0ZXIiLCJuYXYiLCJub3NjcmlwdCIsIm9sIiwib3B0Z3JvdXAiLCJvcHRpb24iLCJvdXRwdXQiLCJwYXJhbSIsInBpY3R1cmUiLCJwcmUiLCJwcm9ncmVzcyIsInEiLCJycCIsInJ0IiwicnVieSIsInMiLCJzYW1wIiwic2VjdGlvbiIsInNlbGVjdCIsInNtYWxsIiwic3BhbiIsInN0cm9uZyIsInN0eWxlIiwic3ViIiwic3VtbWFyeSIsInN1cCIsInRhYmxlIiwidGJvZHkiLCJ0ZCIsInRleHRhcmVhIiwidGZvb3QiLCJ0aCIsInRoZWFkIiwidGltZSIsInRyIiwidHJhY2siLCJ1IiwidWwiLCJ2YXIiLCJ2aWRlbyIsIndiciIsImNpcmNsZSIsImRlZnMiLCJlbGxpcHNlIiwiZyIsImxpbmUiLCJsaW5lYXJHcmFkaWVudCIsIm1hc2siLCJwYXRoIiwicGF0dGVybiIsInBvbHlnb24iLCJwb2x5bGluZSIsInJhZGlhbEdyYWRpZW50IiwicmVjdCIsInN0b3AiLCJzdmciLCJ0ZXh0IiwidHNwYW4iLCJjaGVja01hc2siLCJiaXRtYXNrIiwiRE9NUHJvcGVydHlJbmplY3Rpb24iLCJNVVNUX1VTRV9BVFRSSUJVVEUiLCJNVVNUX1VTRV9QUk9QRVJUWSIsIkhBU19TSURFX0VGRkVDVFMiLCJIQVNfQk9PTEVBTl9WQUxVRSIsIkhBU19OVU1FUklDX1ZBTFVFIiwiSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUiLCJIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFIiwiaW5qZWN0RE9NUHJvcGVydHlDb25maWciLCJkb21Qcm9wZXJ0eUNvbmZpZyIsIlByb3BlcnRpZXMiLCJET01BdHRyaWJ1dGVOYW1lcyIsIkRPTVByb3BlcnR5TmFtZXMiLCJET01NdXRhdGlvbk1ldGhvZHMiLCJpc0N1c3RvbUF0dHJpYnV0ZSIsIl9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9ucyIsImlzU3RhbmRhcmROYW1lIiwibG93ZXJDYXNlZCIsInRvTG93ZXJDYXNlIiwiZ2V0UG9zc2libGVTdGFuZGFyZE5hbWUiLCJhdHRyaWJ1dGVOYW1lIiwiZ2V0QXR0cmlidXRlTmFtZSIsImdldFByb3BlcnR5TmFtZSIsImdldE11dGF0aW9uTWV0aG9kIiwicHJvcENvbmZpZyIsIm11c3RVc2VBdHRyaWJ1dGUiLCJtdXN0VXNlUHJvcGVydHkiLCJoYXNTaWRlRWZmZWN0cyIsImhhc0Jvb2xlYW5WYWx1ZSIsImhhc051bWVyaWNWYWx1ZSIsImhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlIiwiaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSIsImRlZmF1bHRWYWx1ZUNhY2hlIiwiaXNDdXN0b21BdHRyaWJ1dGVGbiIsImdldERlZmF1bHRWYWx1ZUZvclByb3BlcnR5Iiwibm9kZU5hbWUiLCJ0ZXN0RWxlbWVudCIsIm5vZGVEZWZhdWx0cyIsIlN5bnRoZXRpY0V2ZW50IiwiZGlzcGF0Y2hDb25maWciLCJkaXNwYXRjaE1hcmtlciIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwibm9ybWFsaXplIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJnZXRFdmVudFRhcmdldCIsIkV2ZW50SW50ZXJmYWNlIiwiY3VycmVudFRhcmdldCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImV2ZW50IiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsImF1Z21lbnRDbGFzcyIsIkNsYXNzIiwiU3VwZXIiLCJjcmVhdGUiLCJzaG91bGRJZ25vcmVWYWx1ZSIsImlzTmFOIiwiZXNjYXBlVGV4dEZvckJyb3dzZXIiLCJtZW1vaXplU3RyaW5nT25seSIsInByb2Nlc3NBdHRyaWJ1dGVOYW1lQW5kUHJlZml4IiwicmVhY3RQcm9wcyIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwid2FybmVkUHJvcGVydGllcyIsIndhcm5Vbmtub3duUHJvcGVydHkiLCJsb3dlckNhc2VkTmFtZSIsInN0YW5kYXJkTmFtZSIsIkRPTVByb3BlcnR5T3BlcmF0aW9ucyIsImNyZWF0ZU1hcmt1cEZvcklEIiwiY3JlYXRlTWFya3VwRm9yUHJvcGVydHkiLCJzZXRWYWx1ZUZvclByb3BlcnR5IiwibXV0YXRpb25NZXRob2QiLCJkZWxldGVWYWx1ZUZvclByb3BlcnR5IiwicmVtb3ZlQXR0cmlidXRlIiwiZGVmYXVsdFZhbHVlIiwibGlzdGVuZXJBdFBoYXNlIiwicHJvcGFnYXRpb25QaGFzZSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsImdldExpc3RlbmVyIiwiYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcyIsImRvbUlEIiwidXB3YXJkcyIsInBoYXNlIiwibGlzdGVuZXIiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJhY2N1bXVsYXRlSW50byIsIl9kaXNwYXRjaElEcyIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUiLCJFdmVudFBsdWdpbkh1YiIsImdldEluc3RhbmNlSGFuZGxlIiwidHJhdmVyc2VUd29QaGFzZSIsImFjY3VtdWxhdGVEaXNwYXRjaGVzIiwiaWdub3JlZERpcmVjdGlvbiIsImFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyIsImV2ZW50cyIsImZvckVhY2hBY2N1bXVsYXRlZCIsImFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyIsImxlYXZlIiwiZW50ZXIiLCJmcm9tSUQiLCJ0b0lEIiwidHJhdmVyc2VFbnRlckxlYXZlIiwiYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMiLCJFdmVudFByb3BhZ2F0b3JzIiwiZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQiLCJtb3VudEF0IiwidG9wTGlzdGVuZXJzSURLZXkiLCJyZWFjdFRvcExpc3RlbmVyc0NvdW50ZXIiLCJhbHJlYWR5TGlzdGVuaW5nVG8iLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiIsIlZpZXdwb3J0TWV0cmljcyIsImlzRXZlbnRTdXBwb3J0ZWQiLCJpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSIsInRvcEV2ZW50TWFwcGluZyIsIlN0cmluZyIsIk1hdGgiLCJyYW5kb20iLCJSZWFjdEV2ZW50TGlzdGVuZXIiLCJpbmplY3RSZWFjdEV2ZW50TGlzdGVuZXIiLCJzZXRIYW5kbGVUb3BMZXZlbCIsImhhbmRsZVRvcExldmVsIiwic2V0RW5hYmxlZCIsImVuYWJsZWQiLCJpc0VuYWJsZWQiLCJsaXN0ZW5UbyIsImNvbnRlbnREb2N1bWVudEhhbmRsZSIsImlzTGlzdGVuaW5nIiwiZGVwZW5kZW5jaWVzIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsInRyYXBCdWJibGVkRXZlbnQiLCJ0cmFwQ2FwdHVyZWRFdmVudCIsIldJTkRPV19IQU5ETEUiLCJ0b3BMZXZlbFR5cGUiLCJoYW5kbGVyQmFzZU5hbWUiLCJoYW5kbGUiLCJyZWZyZXNoIiwicmVmcmVzaFNjcm9sbFZhbHVlcyIsIm1vbml0b3JTY3JvbGxWYWx1ZSIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwicHV0TGlzdGVuZXIiLCJkZWxldGVMaXN0ZW5lciIsImRlbGV0ZUFsbExpc3RlbmVycyIsIkNvbXBvbmVudExpZmVDeWNsZSIsIk1PVU5URUQiLCJVTk1PVU5URUQiLCJpbmplY3RlZCIsInVubW91bnRJREZyb21FbnZpcm9ubWVudCIsIm1vdW50SW1hZ2VJbnRvTm9kZSIsImluamVjdEVudmlyb25tZW50IiwiUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCIsIl9saWZlQ3ljbGVTdGF0ZSIsInNldFByb3BzIiwicGFydGlhbFByb3BzIiwiX3NldFByb3BzSW50ZXJuYWwiLCJhZGRDb21wb25lbnRBc1JlZlRvIiwicmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tIiwiX21vdW50Q29tcG9uZW50SW50b05vZGUiLCJpc093bmVkQnkiLCJnZXRTaWJsaW5nQnlSZWYiLCJyZWZzIiwiZ2V0UmVhY3RSb290SURTdHJpbmciLCJpbmRleCIsInRvU3RyaW5nIiwiaXNCb3VuZGFyeSIsImlzVmFsaWRJRCIsImRlc2NlbmRhbnRJRCIsImdldFBhcmVudElEIiwic3Vic3RyIiwibGFzdEluZGV4T2YiLCJnZXROZXh0RGVzY2VuZGFudElEIiwiZGVzdGluYXRpb25JRCIsInN0YXJ0IiwiU0VQQVJBVE9SX0xFTkdUSCIsImdldEZpcnN0Q29tbW9uQW5jZXN0b3JJRCIsIm9uZUlEIiwidHdvSUQiLCJtaW5MZW5ndGgiLCJtaW4iLCJsYXN0Q29tbW9uTWFya2VySW5kZXgiLCJsb25nZXN0Q29tbW9uSUQiLCJ0cmF2ZXJzZVBhcmVudFBhdGgiLCJza2lwRmlyc3QiLCJza2lwTGFzdCIsInRyYXZlcnNlVXAiLCJkZXB0aCIsInRyYXZlcnNlIiwicmV0IiwiTUFYX1RSRUVfREVQVEgiLCJSZWFjdFJvb3RJbmRleCIsImNyZWF0ZVJlYWN0Um9vdEluZGV4IiwiY3JlYXRlUmVhY3RJRCIsImxlYXZlSUQiLCJlbnRlcklEIiwidXBBcmciLCJkb3duQXJnIiwiX2dldEZpcnN0Q29tbW9uQW5jZXN0b3JJRCIsIl9nZXROZXh0RGVzY2VuZGFudElEIiwib2JqIiwidmFsaWRhdGVJbnN0YW5jZUhhbmRsZSIsImludmFsaWQiLCJJbnN0YW5jZUhhbmRsZSIsIkV2ZW50UGx1Z2luVXRpbHMiLCJsaXN0ZW5lckJhbmsiLCJldmVudFF1ZXVlIiwiZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlIiwiZXhlY3V0ZURpc3BhdGNoIiwiUGx1Z2luTW9kdWxlIiwiZ2V0UGx1Z2luTW9kdWxlRm9yRXZlbnQiLCJleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIiLCJpbmplY3RNb3VudCIsImluamVjdEluc3RhbmNlSGFuZGxlIiwiSW5qZWN0ZWRJbnN0YW5jZUhhbmRsZSIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSIsImV4dHJhY3RFdmVudHMiLCJ0b3BMZXZlbFRhcmdldCIsInRvcExldmVsVGFyZ2V0SUQiLCJwbHVnaW5zIiwicG9zc2libGVQbHVnaW4iLCJleHRyYWN0ZWRFdmVudHMiLCJlbnF1ZXVlRXZlbnRzIiwicHJvY2Vzc0V2ZW50UXVldWUiLCJwcm9jZXNzaW5nRXZlbnRRdWV1ZSIsIl9fcHVyZ2UiLCJfX2dldExpc3RlbmVyQmFuayIsIndhcm5Gb3JMZWdhY3lGYWN0b3J5Q2FsbCIsIlJlYWN0TGVnYWN5RWxlbWVudEZhY3RvcnkiLCJfaXNMZWdhY3lDYWxsV2FybmluZ0VuYWJsZWQiLCJsZWdhY3lGYWN0b3J5TG9ncyIsInZlcnNpb24iLCJ3YXJuRm9yUGxhaW5GdW5jdGlvblR5cGUiLCJpc1JlYWN0Q2xhc3MiLCJfcmVhY3RXYXJuZWRGb3JUaGlzVHlwZSIsIndhcm5Gb3JOb25MZWdhY3lGYWN0b3J5IiwicHJveHlTdGF0aWNNZXRob2RzIiwiYm91bmQiLCJrIiwiTEVHQUNZX01BUktFUiIsIk5PTl9MRUdBQ1lfTUFSS0VSIiwid3JhcENyZWF0ZUZhY3RvcnkiLCJsZWdhY3lDcmVhdGVGYWN0b3J5IiwiaXNSZWFjdE5vbkxlZ2FjeUZhY3RvcnkiLCJpc1JlYWN0TGVnYWN5RmFjdG9yeSIsImxlZ2FjeUNyZWF0ZUVsZW1lbnQiLCJfaXNNb2NrRnVuY3Rpb24iLCJfbW9ja2VkUmVhY3RDbGFzc0NvbnN0cnVjdG9yIiwibGVnYWN5RWxlbWVudEZhY3RvcnkiLCJpc1ZhbGlkQ2xhc3MiLCJTeW50aGV0aWNVSUV2ZW50IiwiVUlFdmVudEludGVyZmFjZSIsInZpZXciLCJkb2MiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJkZXRhaWwiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsIndhcm5PbmNlIiwiZGlkV2FybiIsImdldFJvb3RJbnN0YW5jZXNGcm9tUmVhY3RNb3VudCIsImluamVjdGVkUHJvdmlkZXIiLCJSb290SW5zdGFuY2VQcm92aWRlciIsImluamVjdFByb3ZpZGVyIiwicHJvdmlkZXIiLCJnZXRSb290SW5zdGFuY2VzIiwiaW5zdGFuY2VzIiwia2V5cyIsIm1ha2VFeHBvcnRzSG90IiwiaXNSZWFjdEVsZW1lbnRpc2giLCJmcmVzaEV4cG9ydHMiLCJmb3VuZFJlYWN0Q2xhc3NlcyIsImlzUmVhY3RDbGFzc2lzaCIsIm1ha2VIb3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ3cml0YWJsZSIsImZvY3VzTm9kZSIsIkF1dG9Gb2N1c01peGluIiwiYXV0b0ZvY3VzIiwibnVsbENvbXBvbmVudElkc1JlZ2lzdHJ5IiwiUmVhY3RFbXB0eUNvbXBvbmVudEluamVjdGlvbiIsImluamVjdEVtcHR5Q29tcG9uZW50IiwiZW1wdHlDb21wb25lbnQiLCJTeW50aGV0aWNNb3VzZUV2ZW50IiwiZ2V0RXZlbnRNb2RpZmllclN0YXRlIiwiTW91c2VFdmVudEludGVyZmFjZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJzcmNFbGVtZW50IiwidG9FbGVtZW50IiwicGFnZVgiLCJjdXJyZW50U2Nyb2xsTGVmdCIsInBhZ2VZIiwiY3VycmVudFNjcm9sbFRvcCIsInRyYW5zYWN0aW9uV3JhcHBlcnMiLCJ3cmFwcGVySW5pdERhdGEiLCJfaXNJblRyYW5zYWN0aW9uIiwiaXNJblRyYW5zYWN0aW9uIiwiZXJyb3JUaHJvd24iLCJpbml0aWFsaXplQWxsIiwiY2xvc2VBbGwiLCJzdGFydEluZGV4IiwiT0JTRVJWRURfRVJST1IiLCJpbml0RGF0YSIsInBhcmVudENvbXBvc2l0ZVR5cGUiLCJfZ2V0TW9ja0ltcGxlbWVudGF0aW9uIiwibW9ja0ltcGxlbWVudGF0aW9uIiwiUmVhY3ROYXRpdmVDb21wb25lbnQiLCJjcmVhdGVJbnN0YW5jZUZvclRhZyIsImV2ZW50TmFtZSIsInRlc3QiLCJjcmVhdGVEZWZhdWx0QXJndW1lbnRzIiwibWV0aG9kU3RhdGljcyIsInBpY2tTdGF0aWNNaXhpbnMiLCJjb21wb25lbnRPYmplY3QiLCJkZWJ1ZyIsInJlbW92ZU9sZFN0YXRpY01ldGhvZHMiLCJDb21wb25lbnQiLCJSZWFjdCIsInRvQXJyYXkiLCJmaWx0ZXIiLCJpc0N1cnNvciIsImN1cnNvciIsImpzeCIsImV4dGVuZCIsImlzRXF1YWxTdGF0ZSIsImlzTm90SWdub3JhYmxlIiwibm90Iiwib3IiLCJpc1N0YXRpY3MiLCJpc0NoaWxkcmVuIiwibmV4dEN1cnNvcnMiLCJmaWx0ZXJLZXlWYWx1ZSIsImd1YXJhbnRlZU9iamVjdCIsImN1cnJlbnRDdXJzb3JzIiwibmV4dEN1cnNvcnNLZXlzIiwiY3VycmVudEN1cnNvcnNLZXlzIiwiaGFzRGlmZmVyZW50S2V5cyIsImhhc0NoYW5nZWRDdXJzb3JzIiwiaGFzQ2hhbmdlZFByb3BlcnRpZXMiLCJfZHVtbXlfa2V5IiwiZXZlcnkiLCJuZXh0IiwiaXNFcXVhbEN1cnNvciIsImRlZXBFcXVhbCIsImhhc1Nob3VsZENvbXBvbmVudFVwZGF0ZSIsIlNob3VsZENvbXBvbmVudFVwZGF0ZSIsImNvbmNhdCIsImZpbHRlcmVkIiwib3JpZ2luYWwiLCJleHRlbnNpb24iLCJwb3RlbnRpYWwiLCJkZXJlZiIsIl9fZGVyZWYiLCJ1bkN1cnNvciIsInByZWRpY2F0ZSIsInZhbCIsImZuMSIsImZuMiIsInJlZ2V4IiwiUmVnRXhwIiwic3RyIiwiX2NhbGxiYWNrcyIsIl9jb250ZXh0cyIsImNvbnRleHRzIiwiaXNFbmRpc2giLCJpc01vdmVpc2giLCJpc1N0YXJ0aXNoIiwiZm9yRWFjaEV2ZW50RGlzcGF0Y2giLCJkaXNwYXRjaExpc3RlbmVycyIsImRpc3BhdGNoSURzIiwidmFsaWRhdGVFdmVudERpc3BhdGNoZXMiLCJNb3VudCIsImV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsIiwiZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZSIsImV4ZWN1dGVEaXJlY3REaXNwYXRjaCIsImRpc3BhdGNoTGlzdGVuZXIiLCJkaXNwYXRjaElEIiwicmVzIiwiaGFzRGlzcGF0Y2hlcyIsIkluamVjdGVkTW91bnQiLCJsaXN0ZW5lcnNJc0FyciIsImlkc0lzQXJyIiwiSURzTGVuIiwibGlzdGVuZXJzTGVuIiwidXNlVG91Y2hFdmVudHMiLCJfYXNzZXJ0U2luZ2xlTGluayIsImNoZWNrZWRMaW5rIiwidmFsdWVMaW5rIiwiX2Fzc2VydFZhbHVlTGluayIsIm9uQ2hhbmdlIiwiX2Fzc2VydENoZWNrZWRMaW5rIiwiY2hlY2tlZCIsIl9oYW5kbGVMaW5rZWRWYWx1ZUNoYW5nZSIsInJlcXVlc3RDaGFuZ2UiLCJfaGFuZGxlTGlua2VkQ2hlY2tDaGFuZ2UiLCJSZWFjdFByb3BUeXBlcyIsImhhc1JlYWRPbmx5VmFsdWUiLCJjaGVja2JveCIsImltYWdlIiwiaGlkZGVuIiwicmFkaW8iLCJzdWJtaXQiLCJMaW5rZWRWYWx1ZVV0aWxzIiwicmVhZE9ubHkiLCJkaXNhYmxlZCIsImdldFZhbHVlIiwiZ2V0Q2hlY2tlZCIsImdldE9uQ2hhbmdlIiwid2l0aENvbnRleHQiLCJuZXdDb250ZXh0Iiwic2NvcGVkQ2FsbGJhY2siLCJnZXRDdXJyZW50T3duZXJEaXNwbGF5TmFtZSIsInZhbGlkYXRlRXhwbGljaXRLZXkiLCJwYXJlbnRUeXBlIiwid2FybkFuZE1vbml0b3JGb3JLZXlVc2UiLCJ2YWxpZGF0ZVByb3BlcnR5S2V5IiwiTlVNRVJJQ19QUk9QRVJUWV9SRUdFWCIsIndhcm5pbmdJRCIsIm93bmVyTmFtZSIsInBhcmVudE5hbWUiLCJ1c2VOYW1lIiwibWVtb2l6ZXIiLCJvd25lckhhc0tleVVzZVdhcm5pbmciLCJjaGlsZE93bmVyTmFtZSIsImNvbXBvbmVudE93bmVyIiwibW9uaXRvclVzZU9mT2JqZWN0TWFwIiwiY3VycmVudE5hbWUiLCJvd25lckhhc01vbml0b3JlZE9iamVjdE1hcCIsInZhbGlkYXRlQ2hpbGRLZXlzIiwiY2hlY2tQcm9wVHlwZXMiLCJleCIsImxvZ2dlZFR5cGVGYWlsdXJlcyIsInJlYWN0X2tleV93YXJuaW5nIiwicmVhY3RfbnVtZXJpY19rZXlfd2FybmluZyIsInZhbGlkYXRlZEZhY3RvcnkiLCJpc0luRG9jdW1lbnQiLCJSZWFjdERPTVNlbGVjdGlvbiIsImdldEFjdGl2ZUVsZW1lbnQiLCJSZWFjdElucHV0U2VsZWN0aW9uIiwiaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzIiwiZWxlbSIsImNvbnRlbnRFZGl0YWJsZSIsImdldFNlbGVjdGlvbkluZm9ybWF0aW9uIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImdldFNlbGVjdGlvbiIsInJlc3RvcmVTZWxlY3Rpb24iLCJwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uIiwiY3VyRm9jdXNlZEVsZW0iLCJwcmlvckZvY3VzZWRFbGVtIiwicHJpb3JTZWxlY3Rpb25SYW5nZSIsInNldFNlbGVjdGlvbiIsInNlbGVjdGlvbiIsInNlbGVjdGlvblN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uRW5kIiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsInBhcmVudEVsZW1lbnQiLCJtb3ZlU3RhcnQiLCJtb3ZlRW5kIiwiZ2V0T2Zmc2V0cyIsIm9mZnNldHMiLCJjcmVhdGVUZXh0UmFuZ2UiLCJjb2xsYXBzZSIsInNldE9mZnNldHMiLCJjdXJyZW50SXNBcnJheSIsIm5leHRJc0FycmF5IiwibmFtZXNwYWNlIiwib2xkTmFtZSIsIm5ld05hbWUiLCJjdHgiLCJ3YXJuZWQiLCJuZXdGbiIsImVzY2FwZXIiLCJtYXRjaCIsIkVTQ0FQRV9MT09LVVAiLCJFU0NBUEVfUkVHRVgiLCImIiwiPiIsIjwiLCJcIiIsIiciLCJhcnIiLCJnZXRFdmVudENoYXJDb2RlIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwibW9kaWZpZXJTdGF0ZUdldHRlciIsImtleUFyZyIsInN5bnRoZXRpY0V2ZW50Iiwia2V5UHJvcCIsIm1vZGlmaWVyS2V5VG9Qcm9wIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsImdldFRleHRDb250ZW50QWNjZXNzb3IiLCJjb250ZW50S2V5IiwiZXZlbnROYW1lU3VmZml4IiwiY2FwdHVyZSIsImlzU3VwcG9ydGVkIiwidXNlSGFzRmVhdHVyZSIsImltcGxlbWVudGF0aW9uIiwiaGFzRmVhdHVyZSIsImdsb2JhbCIsImN0b3IiLCJzdXBlckNsYXNzIiwiTWFrZVJlZiIsIlNldFJlZiIsIk93bmVySUQiLCJhcnJDb3B5Iiwib2Zmc2V0IiwibWF4IiwibmV3QXJyIiwiaWkiLCJlbnN1cmVTaXplIiwiaXRlciIsInNpemUiLCJfX2l0ZXJhdGUiLCJyZXR1cm5UcnVlIiwid3JhcEluZGV4Iiwid2hvbGVTbGljZSIsImJlZ2luIiwicmVzb2x2ZUJlZ2luIiwicmVzb2x2ZUluZGV4IiwicmVzb2x2ZUVuZCIsImRlZmF1bHRJbmRleCIsIkl0ZXJhYmxlIiwiaXNJdGVyYWJsZSIsIlNlcSIsIktleWVkSXRlcmFibGUiLCJpc0tleWVkIiwiS2V5ZWRTZXEiLCJJbmRleGVkSXRlcmFibGUiLCJpc0luZGV4ZWQiLCJJbmRleGVkU2VxIiwiU2V0SXRlcmFibGUiLCJpc0Fzc29jaWF0aXZlIiwiU2V0U2VxIiwibWF5YmVJdGVyYWJsZSIsIklTX0lURVJBQkxFX1NFTlRJTkVMIiwibWF5YmVLZXllZCIsIklTX0tFWUVEX1NFTlRJTkVMIiwibWF5YmVJbmRleGVkIiwiSVNfSU5ERVhFRF9TRU5USU5FTCIsIm1heWJlQXNzb2NpYXRpdmUiLCJpc09yZGVyZWQiLCJtYXliZU9yZGVyZWQiLCJJU19PUkRFUkVEX1NFTlRJTkVMIiwiSXRlcmF0b3IiLCJpdGVyYXRvclZhbHVlIiwidiIsIml0ZXJhdG9yUmVzdWx0IiwiZG9uZSIsIml0ZXJhdG9yRG9uZSIsImhhc0l0ZXJhdG9yIiwiZ2V0SXRlcmF0b3JGbiIsImlzSXRlcmF0b3IiLCJtYXliZUl0ZXJhdG9yIiwiZ2V0SXRlcmF0b3IiLCJpdGVyYWJsZSIsIml0ZXJhdG9yRm4iLCJSRUFMX0lURVJBVE9SX1NZTUJPTCIsIkZBVVhfSVRFUkFUT1JfU1lNQk9MIiwiaXNBcnJheUxpa2UiLCJlbXB0eVNlcXVlbmNlIiwidG9TZXEiLCJzZXFGcm9tVmFsdWUiLCJ0b0tleWVkU2VxIiwiZnJvbUVudHJ5U2VxIiwia2V5ZWRTZXFGcm9tVmFsdWUiLCJlbnRyeVNlcSIsInRvSW5kZXhlZFNlcSIsImluZGV4ZWRTZXFGcm9tVmFsdWUiLCJ0b1NldFNlcSIsIkFycmF5U2VxIiwiYXJyYXkiLCJfYXJyYXkiLCJPYmplY3RTZXEiLCJfb2JqZWN0IiwiX2tleXMiLCJJdGVyYWJsZVNlcSIsIl9pdGVyYWJsZSIsIkl0ZXJhdG9yU2VxIiwiaXRlcmF0b3IiLCJfaXRlcmF0b3IiLCJfaXRlcmF0b3JDYWNoZSIsImlzU2VxIiwibWF5YmVTZXEiLCJJU19TRVFfU0VOVElORUwiLCJFTVBUWV9TRVEiLCJzZXEiLCJtYXliZUluZGV4ZWRTZXFGcm9tVmFsdWUiLCJzZXFJdGVyYXRlIiwicmV2ZXJzZSIsInVzZUtleXMiLCJjYWNoZSIsIl9jYWNoZSIsIm1heEluZGV4IiwiZW50cnkiLCJfX2l0ZXJhdGVVbmNhY2hlZCIsInNlcUl0ZXJhdG9yIiwiX19pdGVyYXRvclVuY2FjaGVkIiwiQ29sbGVjdGlvbiIsIktleWVkQ29sbGVjdGlvbiIsIkluZGV4ZWRDb2xsZWN0aW9uIiwiU2V0Q29sbGVjdGlvbiIsImlzIiwidmFsdWVBIiwidmFsdWVCIiwidmFsdWVPZiIsImVxdWFscyIsImZyb21KUyIsImpzb24iLCJjb252ZXJ0ZXIiLCJmcm9tSlNXaXRoIiwiZnJvbUpTRGVmYXVsdCIsInBhcmVudEpTT04iLCJpc1BsYWluT2JqIiwidG9MaXN0IiwidG9NYXAiLCJzbWkiLCJpMzIiLCJoYXNoIiwibyIsIlNUUklOR19IQVNIX0NBQ0hFX01JTl9TVFJMRU4iLCJjYWNoZWRIYXNoU3RyaW5nIiwiaGFzaFN0cmluZyIsImhhc2hDb2RlIiwiaGFzaEpTT2JqIiwic3RyaW5nIiwic3RyaW5nSGFzaENhY2hlIiwiU1RSSU5HX0hBU0hfQ0FDSEVfU0laRSIsIlNUUklOR19IQVNIX0NBQ0hFX01BWF9TSVpFIiwiY2hhckNvZGVBdCIsIndlYWtNYXAiLCJVSURfSEFTSF9LRVkiLCJjYW5EZWZpbmVQcm9wZXJ0eSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiZ2V0SUVOb2RlSGFzaCIsImlzRXh0ZW5zaWJsZSIsIm9iakhhc2hVSUQiLCJ1bmlxdWVJRCIsImFzc2VydE5vdEluZmluaXRlIiwiSW5maW5pdHkiLCJUb0tleWVkU2VxdWVuY2UiLCJpbmRleGVkIiwiX2l0ZXIiLCJfdXNlS2V5cyIsIlRvSW5kZXhlZFNlcXVlbmNlIiwiVG9TZXRTZXF1ZW5jZSIsIkZyb21FbnRyaWVzU2VxdWVuY2UiLCJlbnRyaWVzIiwiZmxpcEZhY3RvcnkiLCJmbGlwU2VxdWVuY2UiLCJtYWtlU2VxdWVuY2UiLCJmbGlwIiwicmV2ZXJzZWRTZXF1ZW5jZSIsImhhcyIsImNvbnRhaW5zIiwiY2FjaGVSZXN1bHQiLCJjYWNoZVJlc3VsdFRocm91Z2giLCJ0aGlzJDAiLCJJVEVSQVRFX0VOVFJJRVMiLCJfX2l0ZXJhdG9yIiwic3RlcCIsIklURVJBVEVfVkFMVUVTIiwiSVRFUkFURV9LRVlTIiwibWFwRmFjdG9yeSIsIm1hcHBlciIsIm1hcHBlZFNlcXVlbmNlIiwibm90U2V0VmFsdWUiLCJOT1RfU0VUIiwicmV2ZXJzZUZhY3RvcnkiLCJmaWx0ZXJGYWN0b3J5IiwiZmlsdGVyU2VxdWVuY2UiLCJpdGVyYXRpb25zIiwiY291bnRCeUZhY3RvcnkiLCJncm91cGVyIiwiZ3JvdXBzIiwiTWFwIiwiYXNNdXRhYmxlIiwiYXNJbW11dGFibGUiLCJncm91cEJ5RmFjdG9yeSIsImlzS2V5ZWRJdGVyIiwiT3JkZXJlZE1hcCIsImNvZXJjZSIsIml0ZXJhYmxlQ2xhc3MiLCJyZWlmeSIsInNsaWNlRmFjdG9yeSIsIm9yaWdpbmFsU2l6ZSIsInJlc29sdmVkQmVnaW4iLCJyZXNvbHZlZEVuZCIsInNsaWNlU2l6ZSIsInNsaWNlU2VxIiwic2tpcHBlZCIsImlzU2tpcHBpbmciLCJ0YWtlV2hpbGVGYWN0b3J5IiwidGFrZVNlcXVlbmNlIiwiaXRlcmF0aW5nIiwic2tpcFdoaWxlRmFjdG9yeSIsInNraXBTZXF1ZW5jZSIsInNraXBwaW5nIiwiY29uY2F0RmFjdG9yeSIsInZhbHVlcyIsImlzS2V5ZWRJdGVyYWJsZSIsIml0ZXJzIiwic2luZ2xldG9uIiwiY29uY2F0U2VxIiwiZmxhdHRlbiIsInJlZHVjZSIsInN1bSIsImZsYXR0ZW5GYWN0b3J5IiwiZmxhdFNlcXVlbmNlIiwiZmxhdERlZXAiLCJjdXJyZW50RGVwdGgiLCJzdG9wcGVkIiwic3RhY2siLCJmbGF0TWFwRmFjdG9yeSIsImludGVycG9zZUZhY3RvcnkiLCJzZXBhcmF0b3IiLCJpbnRlcnBvc2VkU2VxdWVuY2UiLCJzb3J0RmFjdG9yeSIsImNvbXBhcmF0b3IiLCJkZWZhdWx0Q29tcGFyYXRvciIsIm1heEZhY3RvcnkiLCJtYXhDb21wYXJlIiwiY29tcCIsInppcFdpdGhGYWN0b3J5Iiwia2V5SXRlciIsInppcHBlciIsInppcFNlcXVlbmNlIiwiaXRlcmF0b3JzIiwiaXNEb25lIiwic3RlcHMiLCJzb21lIiwidmFsaWRhdGVFbnRyeSIsInJlc29sdmVTaXplIiwiZm9yY2VJdGVyYXRvciIsImtleVBhdGgiLCJlbXB0eU1hcCIsImlzTWFwIiwid2l0aE11dGF0aW9ucyIsIm1heWJlTWFwIiwiSVNfTUFQX1NFTlRJTkVMIiwiQXJyYXlNYXBOb2RlIiwib3duZXJJRCIsIkJpdG1hcEluZGV4ZWROb2RlIiwiYml0bWFwIiwibm9kZXMiLCJIYXNoQXJyYXlNYXBOb2RlIiwiY291bnQiLCJIYXNoQ29sbGlzaW9uTm9kZSIsImtleUhhc2giLCJWYWx1ZU5vZGUiLCJNYXBJdGVyYXRvciIsIl90eXBlIiwiX3JldmVyc2UiLCJfc3RhY2siLCJfcm9vdCIsIm1hcEl0ZXJhdG9yRnJhbWUiLCJtYXBJdGVyYXRvclZhbHVlIiwicHJldiIsIl9fcHJldiIsIm1ha2VNYXAiLCJyb290IiwiTWFwUHJvdG90eXBlIiwiX19vd25lcklEIiwiX19oYXNoIiwiX19hbHRlcmVkIiwiRU1QVFlfTUFQIiwidXBkYXRlTWFwIiwibmV3Um9vdCIsIm5ld1NpemUiLCJkaWRDaGFuZ2VTaXplIiwiQ0hBTkdFX0xFTkdUSCIsImRpZEFsdGVyIiwiRElEX0FMVEVSIiwidXBkYXRlTm9kZSIsImlzTGVhZk5vZGUiLCJtZXJnZUludG9Ob2RlIiwibmV3Tm9kZSIsImlkeDEiLCJNQVNLIiwiaWR4MiIsIlNISUZUIiwiY3JlYXRlTm9kZXMiLCJwYWNrTm9kZXMiLCJleGNsdWRpbmciLCJwYWNrZWRJSSIsInBhY2tlZE5vZGVzIiwiYml0IiwiZXhwYW5kTm9kZXMiLCJpbmNsdWRpbmciLCJleHBhbmRlZE5vZGVzIiwiU0laRSIsIm1lcmdlSW50b01hcFdpdGgiLCJtZXJnZXIiLCJpdGVyYWJsZXMiLCJtZXJnZUludG9Db2xsZWN0aW9uV2l0aCIsImRlZXBNZXJnZXIiLCJleGlzdGluZyIsIm1lcmdlRGVlcFdpdGgiLCJjb2xsZWN0aW9uIiwibWVyZ2VJbnRvTWFwIiwidXBkYXRlSW5EZWVwTWFwIiwia2V5UGF0aEl0ZXIiLCJ1cGRhdGVyIiwiaXNOb3RTZXQiLCJleGlzdGluZ1ZhbHVlIiwibmV3VmFsdWUiLCJuZXh0RXhpc3RpbmciLCJuZXh0VXBkYXRlZCIsInJlbW92ZSIsInBvcENvdW50Iiwic2V0SW4iLCJjYW5FZGl0IiwibmV3QXJyYXkiLCJzcGxpY2VJbiIsIm5ld0xlbiIsImFmdGVyIiwic3BsaWNlT3V0IiwiTGlzdCIsImVtcHR5IiwiZW1wdHlMaXN0IiwiaXNMaXN0IiwibWFrZUxpc3QiLCJWTm9kZSIsImxpc3QiLCJzZXRTaXplIiwibWF5YmVMaXN0IiwiSVNfTElTVF9TRU5USU5FTCIsIml0ZXJhdGVMaXN0IiwiaXRlcmF0ZU5vZGVPckxlYWYiLCJsZXZlbCIsIml0ZXJhdGVMZWFmIiwiaXRlcmF0ZU5vZGUiLCJ0YWlsUG9zIiwidGFpbCIsImxlZnQiLCJyaWdodCIsIkRPTkUiLCJfb3JpZ2luIiwiX2NhcGFjaXR5IiwiZ2V0VGFpbE9mZnNldCIsIl90YWlsIiwiX2xldmVsIiwib3JpZ2luIiwiY2FwYWNpdHkiLCJMaXN0UHJvdG90eXBlIiwiRU1QVFlfTElTVCIsInVwZGF0ZUxpc3QiLCJzZXRMaXN0Qm91bmRzIiwibmV3VGFpbCIsInVwZGF0ZVZOb2RlIiwibm9kZUhhcyIsImxvd2VyTm9kZSIsIm5ld0xvd2VyTm9kZSIsImVkaXRhYmxlVk5vZGUiLCJsaXN0Tm9kZUZvciIsInJhd0luZGV4Iiwib2xkT3JpZ2luIiwib2xkQ2FwYWNpdHkiLCJuZXdPcmlnaW4iLCJuZXdDYXBhY2l0eSIsImNsZWFyIiwibmV3TGV2ZWwiLCJvZmZzZXRTaGlmdCIsIm9sZFRhaWxPZmZzZXQiLCJuZXdUYWlsT2Zmc2V0Iiwib2xkVGFpbCIsInJlbW92ZUFmdGVyIiwicmVtb3ZlQmVmb3JlIiwiYmVnaW5JbmRleCIsIm1lcmdlSW50b0xpc3RXaXRoIiwibWF4U2l6ZSIsImVtcHR5T3JkZXJlZE1hcCIsImlzT3JkZXJlZE1hcCIsIm1heWJlT3JkZXJlZE1hcCIsIm1ha2VPcmRlcmVkTWFwIiwib21hcCIsIl9tYXAiLCJfbGlzdCIsIkVNUFRZX09SREVSRURfTUFQIiwidXBkYXRlT3JkZXJlZE1hcCIsIm5ld01hcCIsIm5ld0xpc3QiLCJTdGFjayIsImVtcHR5U3RhY2siLCJpc1N0YWNrIiwidW5zaGlmdEFsbCIsIm1heWJlU3RhY2siLCJJU19TVEFDS19TRU5USU5FTCIsIm1ha2VTdGFjayIsIlN0YWNrUHJvdG90eXBlIiwiX2hlYWQiLCJFTVBUWV9TVEFDSyIsIlNldCIsImVtcHR5U2V0IiwiaXNTZXQiLCJhZGQiLCJtYXliZVNldCIsIklTX1NFVF9TRU5USU5FTCIsInVwZGF0ZVNldCIsIl9fZW1wdHkiLCJfX21ha2UiLCJtYWtlU2V0IiwiU2V0UHJvdG90eXBlIiwiRU1QVFlfU0VUIiwiT3JkZXJlZFNldCIsImVtcHR5T3JkZXJlZFNldCIsImlzT3JkZXJlZFNldCIsIm1heWJlT3JkZXJlZFNldCIsIm1ha2VPcmRlcmVkU2V0IiwiT3JkZXJlZFNldFByb3RvdHlwZSIsIkVNUFRZX09SREVSRURfU0VUIiwiUmVjb3JkIiwiZGVmYXVsdFZhbHVlcyIsIlJlY29yZFR5cGUiLCJSZWNvcmRUeXBlUHJvdG90eXBlIiwiUmVjb3JkUHJvdG90eXBlIiwiX25hbWUiLCJfZGVmYXVsdFZhbHVlcyIsIm1ha2VSZWNvcmQiLCJsaWtlUmVjb3JkIiwicmVjb3JkIiwiZ2V0UHJvdG90eXBlT2YiLCJyZWNvcmROYW1lIiwibm90QXNzb2NpYXRpdmUiLCJmbGlwcGVkIiwiXyIsImFsbEVxdWFsIiwiYlNpemUiLCJSYW5nZSIsImFicyIsIl9zdGFydCIsIl9lbmQiLCJfc3RlcCIsImNlaWwiLCJFTVBUWV9SQU5HRSIsIlJlcGVhdCIsInRpbWVzIiwiX3ZhbHVlIiwiRU1QVFlfUkVQRUFUIiwibWV0aG9kcyIsImtleUNvcGllciIsImdldE93blByb3BlcnR5U3ltYm9scyIsImtleU1hcHBlciIsImVudHJ5TWFwcGVyIiwibmVnIiwicXVvdGVTdHJpbmciLCJzdHJpbmdpZnkiLCJkZWZhdWx0WmlwcGVyIiwiZGVmYXVsdE5lZ0NvbXBhcmF0b3IiLCJoYXNoSXRlcmFibGUiLCJvcmRlcmVkIiwia2V5ZWQiLCJoYXNoTWVyZ2UiLCJtdXJtdXJIYXNoT2ZTaXplIiwiTWF0aF9faW11bCIsIlNMSUNFJDAiLCJERUxFVEUiLCJLZXllZCIsIkluZGV4ZWQiLCJTeW1ib2wiLCJJVEVSQVRPUl9TWU1CT0wiLCJLRVlTIiwiVkFMVUVTIiwiRU5UUklFUyIsImluc3BlY3QiLCJ0b1NvdXJjZSIsIm9mIiwiX190b1N0cmluZyIsImltdWwiLCJXZWFrTWFwIiwidmFsdWVTZXEiLCJ1cGRhdGVJbiIsImRlbGV0ZUluIiwidXBkYXRlZFZhbHVlIiwibWVyZ2UiLCJtZXJnZVdpdGgiLCJtZXJnZUluIiwibWVyZ2VEZWVwIiwibWVyZ2VEZWVwSW4iLCJzb3J0QnkiLCJtdXRhYmxlIiwid2FzQWx0ZXJlZCIsIl9fZW5zdXJlT3duZXIiLCJpdGVyYXRlIiwicmVtb3ZlSW4iLCJyZW1vdmVkIiwiZXhpc3RzIiwiTUFYX0FSUkFZX01BUF9TSVpFIiwiaXNFZGl0YWJsZSIsIm5ld0VudHJpZXMiLCJrZXlIYXNoRnJhZyIsIk1BWF9CSVRNQVBfSU5ERVhFRF9TSVpFIiwibmV3Qml0bWFwIiwibmV3Tm9kZXMiLCJuZXdDb3VudCIsIk1JTl9IQVNIX0FSUkFZX01BUF9TSVpFIiwia2V5TWF0Y2giLCJzdWJOb2RlIiwib2xkU2l6ZSIsInVuc2hpZnQiLCJvcmlnaW5JbmRleCIsIm5ld0NoaWxkIiwicmVtb3ZpbmdGaXJzdCIsIm9sZENoaWxkIiwiZWRpdGFibGUiLCJzaXplSW5kZXgiLCJyZW1vdmluZ0xhc3QiLCJwZWVrIiwicHVzaEFsbCIsImZyb21LZXlzIiwia2V5U2VxIiwidW5pb24iLCJpbnRlcnNlY3QiLCJvcmlnaW5hbFNldCIsInN1YnRyYWN0IiwiZGVmYXVsdFZhbCIsIlN1cGVyUmVjb3JkIiwiX2VtcHR5Iiwic2VhcmNoVmFsdWUiLCJwb3NzaWJsZUluZGV4IiwiZmxvb3IiLCJvZmZzZXRWYWx1ZSIsIm90aGVyIiwidG9KUyIsIl9fdG9KUyIsInRvSlNPTiIsInRvT2JqZWN0IiwidG9PcmRlcmVkTWFwIiwidG9PcmRlcmVkU2V0IiwidG9TZXQiLCJ0b1N0YWNrIiwiX190b1N0cmluZ01hcHBlciIsImpvaW4iLCJmaW5kIiwiZmluZEVudHJ5IiwiZm91bmQiLCJmaW5kTGFzdEVudHJ5Iiwic2lkZUVmZmVjdCIsImpvaW5lZCIsImlzRmlyc3QiLCJyZWR1Y2VyIiwiaW5pdGlhbFJlZHVjdGlvbiIsInJlZHVjdGlvbiIsInVzZUZpcnN0IiwicmVkdWNlUmlnaHQiLCJyZXZlcnNlZCIsImJ1dExhc3QiLCJpc0VtcHR5IiwiY291bnRCeSIsImVudHJpZXNTZXF1ZW5jZSIsImZpbHRlck5vdCIsImZpbmRMYXN0IiwiZmlyc3QiLCJmbGF0TWFwIiwic2VhcmNoS2V5IiwiZ2V0SW4iLCJzZWFyY2hLZXlQYXRoIiwibmVzdGVkIiwiZ3JvdXBCeSIsImhhc0luIiwiaXNTdWJzZXQiLCJpc1N1cGVyc2V0IiwibGFzdCIsIm1heEJ5IiwibWluQnkiLCJyZXN0Iiwic2tpcCIsImFtb3VudCIsInNraXBXaGlsZSIsInNraXBVbnRpbCIsInRha2UiLCJ0YWtlTGFzdCIsInRha2VXaGlsZSIsInRha2VVbnRpbCIsIkl0ZXJhYmxlUHJvdG90eXBlIiwiY2hhaW4iLCJub0xlbmd0aFdhcm5pbmciLCJmaW5kS2V5IiwiZmluZExhc3RLZXkiLCJsYXN0S2V5T2YiLCJtYXBFbnRyaWVzIiwibWFwS2V5cyIsIktleWVkSXRlcmFibGVQcm90b3R5cGUiLCJmaW5kSW5kZXgiLCJyZW1vdmVOdW0iLCJudW1BcmdzIiwic3BsaWNlZCIsImZpbmRMYXN0SW5kZXgiLCJpbnRlcnBvc2UiLCJpbnRlcmxlYXZlIiwiemlwcGVkIiwiaW50ZXJsZWF2ZWQiLCJ6aXAiLCJ6aXBXaXRoIiwiSW1tdXRhYmxlIiwicHJlZml4S2V5IiwicHJlZml4IiwidG9VcHBlckNhc2UiLCJzdWJzdHJpbmciLCJpc1VuaXRsZXNzTnVtYmVyIiwiY29sdW1uQ291bnQiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5Iiwic3Ryb2tlT3BhY2l0eSIsInByZWZpeGVzIiwic2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zIiwiYmFja2dyb3VuZCIsImJhY2tncm91bmRJbWFnZSIsImJhY2tncm91bmRQb3NpdGlvbiIsImJhY2tncm91bmRSZXBlYXQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXIiLCJib3JkZXJXaWR0aCIsImJvcmRlclN0eWxlIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJCb3R0b20iLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckJvdHRvbVN0eWxlIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJMZWZ0IiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyTGVmdFN0eWxlIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyUmlnaHRTdHlsZSIsImJvcmRlclJpZ2h0Q29sb3IiLCJib3JkZXJUb3AiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclRvcFN0eWxlIiwiYm9yZGVyVG9wQ29sb3IiLCJmb250IiwiZm9udFN0eWxlIiwiZm9udFZhcmlhbnQiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJDU1NQcm9wZXJ0eSIsImNhbWVsaXplU3R5bGVOYW1lIiwiZGFuZ2Vyb3VzU3R5bGVWYWx1ZSIsImh5cGhlbmF0ZVN0eWxlTmFtZSIsInByb2Nlc3NTdHlsZU5hbWUiLCJzdHlsZU5hbWUiLCJzdHlsZUZsb2F0QWNjZXNzb3IiLCJjc3NGbG9hdCIsIndhcm5lZFN0eWxlTmFtZXMiLCJ3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZSIsIkNTU1Byb3BlcnR5T3BlcmF0aW9ucyIsImNyZWF0ZU1hcmt1cEZvclN0eWxlcyIsInN0eWxlcyIsInNlcmlhbGl6ZWQiLCJzdHlsZVZhbHVlIiwic2V0VmFsdWVGb3JTdHlsZXMiLCJleHBhbnNpb24iLCJpbmRpdmlkdWFsU3R5bGVOYW1lIiwicmVjb21wdXRlUGx1Z2luT3JkZXJpbmciLCJFdmVudFBsdWdpbk9yZGVyIiwicGx1Z2luTmFtZSIsIm5hbWVzVG9QbHVnaW5zIiwicGx1Z2luSW5kZXgiLCJwdWJsaXNoZWRFdmVudHMiLCJldmVudFR5cGVzIiwicHVibGlzaEV2ZW50Rm9yUGx1Z2luIiwicGhhc2VOYW1lIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZSIsInB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lIiwiSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyIsImlzT3JkZXJpbmdEaXJ0eSIsIl9yZXNldEV2ZW50UGx1Z2lucyIsIkxvY2FsRXZlbnRUcmFwTWl4aW4iLCJfbG9jYWxFdmVudExpc3RlbmVycyIsImFzc2VydFZhbGlkUHJvcHMiLCJnZXRQdXRMaXN0ZW5lclF1ZXVlIiwiZW5xdWV1ZVB1dExpc3RlbmVyIiwidmFsaWRhdGVEYW5nZXJvdXNUYWciLCJ2YWxpZGF0ZWRUYWdDYWNoZSIsIlZBTElEX1RBR19SRUdFWCIsIlJlYWN0RE9NQ29tcG9uZW50IiwiX3RhZyIsInRhZ05hbWUiLCJSZWFjdE11bHRpQ2hpbGQiLCJDT05URU5UX1RZUEVTIiwibnVtYmVyIiwiU1RZTEUiLCJvbWl0dGVkQ2xvc2VUYWdzIiwiY2xvc2VUYWciLCJfY3JlYXRlT3BlblRhZ01hcmt1cEFuZFB1dExpc3RlbmVycyIsIl9jcmVhdGVDb250ZW50TWFya3VwIiwicHJvcEtleSIsInByb3BWYWx1ZSIsInJlbmRlclRvU3RhdGljTWFya3VwIiwibWFya3VwRm9ySUQiLCJpbm5lckhUTUwiLCJfX2h0bWwiLCJjb250ZW50VG9Vc2UiLCJjaGlsZHJlblRvVXNlIiwibW91bnRJbWFnZXMiLCJtb3VudENoaWxkcmVuIiwiX3VwZGF0ZURPTVByb3BlcnRpZXMiLCJfdXBkYXRlRE9NQ2hpbGRyZW4iLCJsYXN0UHJvcHMiLCJzdHlsZVVwZGF0ZXMiLCJsYXN0U3R5bGUiLCJkZWxldGVQcm9wZXJ0eUJ5SUQiLCJuZXh0UHJvcCIsImxhc3RQcm9wIiwidXBkYXRlUHJvcGVydHlCeUlEIiwidXBkYXRlU3R5bGVzQnlJRCIsImxhc3RDb250ZW50IiwibmV4dENvbnRlbnQiLCJsYXN0SHRtbCIsIm5leHRIdG1sIiwibGFzdENoaWxkcmVuIiwibmV4dENoaWxkcmVuIiwibGFzdEhhc0NvbnRlbnRPckh0bWwiLCJuZXh0SGFzQ29udGVudE9ySHRtbCIsInVwZGF0ZUNoaWxkcmVuIiwidXBkYXRlVGV4dENvbnRlbnQiLCJ1cGRhdGVJbm5lckhUTUxCeUlEIiwidW5tb3VudENoaWxkcmVuIiwiYWRsZXIzMiIsIlJlYWN0TWFya3VwQ2hlY2tzdW0iLCJDSEVDS1NVTV9BVFRSX05BTUUiLCJhZGRDaGVja3N1bVRvTWFya3VwIiwiY2hlY2tzdW0iLCJjYW5SZXVzZU1hcmt1cCIsImV4aXN0aW5nQ2hlY2tzdW0iLCJwYXJzZUludCIsIm1hcmt1cENoZWNrc3VtIiwiZW5xdWV1ZU1hcmt1cCIsInBhcmVudElEIiwidG9JbmRleCIsInVwZGF0ZVF1ZXVlIiwiUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMiLCJJTlNFUlRfTUFSS1VQIiwibWFya3VwSW5kZXgiLCJtYXJrdXBRdWV1ZSIsInRleHRDb250ZW50IiwiZnJvbUluZGV4IiwiZW5xdWV1ZU1vdmUiLCJNT1ZFX0VYSVNUSU5HIiwiZW5xdWV1ZVJlbW92ZSIsIlJFTU9WRV9OT0RFIiwiZW5xdWV1ZVRleHRDb250ZW50IiwiVEVYVF9DT05URU5UIiwicHJvY2Vzc1F1ZXVlIiwiZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzIiwiY2xlYXJRdWV1ZSIsImZsYXR0ZW5DaGlsZHJlbiIsInVwZGF0ZURlcHRoIiwibmVzdGVkQ2hpbGRyZW4iLCJfcmVuZGVyZWRDaGlsZHJlbiIsImNoaWxkSW5zdGFuY2UiLCJtb3VudEltYWdlIiwiX21vdW50SW5kZXgiLCJwcmV2Q2hpbGRyZW4iLCJfdW5tb3VudENoaWxkQnlOYW1lIiwic2V0VGV4dENvbnRlbnQiLCJuZXh0TmVzdGVkQ2hpbGRyZW4iLCJfdXBkYXRlQ2hpbGRyZW4iLCJsYXN0SW5kZXgiLCJwcmV2Q2hpbGQiLCJtb3ZlQ2hpbGQiLCJuZXh0Q2hpbGRJbnN0YW5jZSIsIl9tb3VudENoaWxkQnlOYW1lQXRJbmRleCIsInJlbmRlcmVkQ2hpbGRyZW4iLCJyZW5kZXJlZENoaWxkIiwiY3JlYXRlQ2hpbGQiLCJjb21wb25lbnRDbGFzcyIsInRhZ1RvQ29tcG9uZW50Q2xhc3MiLCJnZW5lcmljQ29tcG9uZW50Q2xhc3MiLCJSZWFjdE5hdGl2ZUNvbXBvbmVudEluamVjdGlvbiIsImluamVjdEdlbmVyaWNDb21wb25lbnRDbGFzcyIsImluamVjdENvbXBvbmVudENsYXNzZXMiLCJjb21wb25lbnRDbGFzc2VzIiwiZW1wdHlPYmplY3QiLCJpc1ZhbGlkT3duZXIiLCJhdHRhY2hSZWYiLCJkZXRhY2hSZWYiLCJjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlciIsInZhbGlkYXRlIiwiY2hlY2tUeXBlIiwiaXNSZXF1aXJlZCIsIkFOT05ZTU9VUyIsImxvY2F0aW9uTmFtZSIsImNoYWluZWRDaGVja1R5cGUiLCJjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlciIsImV4cGVjdGVkVHlwZSIsInByb3BUeXBlIiwiZ2V0UHJvcFR5cGUiLCJwcmVjaXNlVHlwZSIsImdldFByZWNpc2VUeXBlIiwiY3JlYXRlQW55VHlwZUNoZWNrZXIiLCJjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIiLCJ0eXBlQ2hlY2tlciIsImNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlciIsImNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIiLCJleHBlY3RlZENsYXNzIiwiZXhwZWN0ZWRDbGFzc05hbWUiLCJjcmVhdGVFbnVtVHlwZUNoZWNrZXIiLCJleHBlY3RlZFZhbHVlcyIsInZhbHVlc1N0cmluZyIsImNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIiLCJjcmVhdGVVbmlvblR5cGVDaGVja2VyIiwiYXJyYXlPZlR5cGVDaGVja2VycyIsImNoZWNrZXIiLCJjcmVhdGVOb2RlQ2hlY2tlciIsImlzTm9kZSIsImNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIiLCJzaGFwZVR5cGVzIiwiZWxlbWVudFR5cGVDaGVja2VyIiwibm9kZVR5cGVDaGVja2VyIiwiYm9vbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwicmVuZGVyYWJsZSIsIlJlYWN0UHV0TGlzdGVuZXJRdWV1ZSIsImxpc3RlbmVyc1RvUHV0Iiwicm9vdE5vZGVJRCIsInB1dExpc3RlbmVycyIsImxpc3RlbmVyVG9QdXQiLCJSZWFjdFJvb3RJbmRleEluamVjdGlvbiIsImluamVjdENyZWF0ZVJlYWN0Um9vdEluZGV4IiwiX2NyZWF0ZVJlYWN0Um9vdEluZGV4IiwiUmVhY3RUZXh0Q29tcG9uZW50IiwiZXNjYXBlZFRleHQiLCJ1cGRhdGVUZXh0Q29udGVudEJ5SUQiLCJSZWFjdFRleHRDb21wb25lbnRGYWN0b3J5IiwiZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24iLCJzY3JvbGxQb3NpdGlvbiIsInkiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJpc1RleHROb2RlIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJmb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJnZXRNYXJrdXBXcmFwIiwiZHVtbXlOb2RlIiwibWFya3VwV3JhcCIsInNob3VsZFdyYXAiLCJzZWxlY3RXcmFwIiwidGFibGVXcmFwIiwidHJXcmFwIiwic3ZnV3JhcCIsIioiLCJzY3JvbGxhYmxlIiwicGFnZVhPZmZzZXQiLCJzY3JvbGxMZWZ0IiwicGFnZVlPZmZzZXQiLCJzY3JvbGxUb3AiLCJpc1RleHRJbnB1dEVsZW1lbnQiLCJzdXBwb3J0ZWRJbnB1dFR5cGVzIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInNlYXJjaCIsInRlbCIsInVybCIsIndlZWsiLCJXSElURVNQQUNFX1RFU1QiLCJOT05WSVNJQkxFX1RFU1QiLCJzZXRJbm5lckhUTUwiLCJyZXBsYWNlQ2hpbGQiLCJ0ZXh0Tm9kZSIsImRlbGV0ZURhdGEiLCJ1c2VyUHJvdmlkZWRLZXlFc2NhcGVyIiwidXNlclByb3ZpZGVkS2V5RXNjYXBlckxvb2t1cCIsImdldENvbXBvbmVudEtleSIsIndyYXBVc2VyUHJvdmlkZWRLZXkiLCJlc2NhcGVVc2VyUHJvdmlkZWRLZXkiLCJ1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCIsInRyYXZlcnNlQWxsQ2hpbGRyZW4iLCJ0cmF2ZXJzZUNvbnRleHQiLCJ0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbCIsIlNVQlNFUEFSQVRPUiIsIj0iLCIuIiwiOiIsIm5hbWVTb0ZhciIsImluZGV4U29GYXIiLCJuZXh0TmFtZSIsInN1YnRyZWVDb3VudCIsImlzT25seUNoaWxkIiwic3RvcmFnZU5hbWUiLCJJbW1zdHJ1Y3QiLCJnZXRJbnN0YW5jZSIsIm5ld0luc3RhbmNlIiwiU3RydWN0dXJlIiwid2l0aEhpc3RvcnkiLCJoaXN0b3J5IiwiaW5zdCIsIkVFIiwiRXZlbnRFbWl0dGVyIiwiX2V2ZW50cyIsImxpc3RlbmVycyIsImVlIiwic2V0TWF4TGlzdGVuZXJzIiwiRXZlbnRFbWl0dGVyMiIsIkV2ZW50RW1pdHRlcjMiLCJjdXJzb3JGcm9tIiwicm9vdERhdGEiLCJ2YWxUb0tleVBhdGgiLCJtYWtlQ3Vyc29yIiwiS2V5ZWRDdXJzb3IiLCJfcm9vdERhdGEiLCJfa2V5UGF0aCIsIl9vbkNoYW5nZSIsIkluZGV4ZWRDdXJzb3IiLCJDdXJzb3JDbGFzcyIsIndyYXBwZWRWYWx1ZSIsInN1YkN1cnNvciIsIm5ld0tleVBhdGgiLCJ1cGRhdGVDdXJzb3IiLCJjaGFuZ2VGbiIsImNoYW5nZUtleVBhdGgiLCJkZWVwQ2hhbmdlIiwibmV3Um9vdERhdGEiLCJsaXN0VG9LZXlQYXRoIiwiS2V5ZWRDdXJzb3JQcm90b3R5cGUiLCJJbmRleGVkQ3Vyc29yUHJvdG90eXBlIiwia2V5T3JGbiIsInN1YktleVBhdGgiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJUZW1wQ3RvciIsInNlbGYiLCJ1dGlscyIsImdlbmVyYXRlUmFuZG9tS2V5IiwiaXNJbW11dGFibGVTdHJ1Y3R1cmUiLCJfY3VycmVudFJldmlzaW9uIiwiX3BhdGhMaXN0ZW5lcnMiLCJuZXdEYXRhIiwib2xkRGF0YSIsImxpc3RMaXN0ZW5lck1hdGNoaW5nIiwicGF0aFN0cmluZyIsImZucyIsImhhbmRsZUhpc3RvcnkiLCJlbWl0dGVyIiwibmV3U3RydWN0dXJlIiwiaGFuZGxlU3dhcCIsInBvc3NpYmx5RW1pdEFuaW1hdGlvbkZyYW1lRXZlbnQiLCJoYW5kbGVQZXJzaXN0aW5nIiwiaW5mbyIsImFuYWx5emUiLCJyZW1vdmVBbGxMaXN0ZW5lcnNCdXQiLCJwYXRoSWQiLCJleGNlcHQiLCJvbGRPYmplY3QiLCJuZXdPYmplY3QiLCJpbk9sZCIsImluTmV3IiwidG9wTGV2ZWwiLCJiYXNlUGF0aCIsIm5ld0xpc3RlbmVycyIsIm9ubHlPbkV2ZW50IiwiaW1tdXRhYmxlU2FmZUNoZWNrIiwibnMiLCJDdXJzb3IiLCJpbmhlcml0cyIsImNoYW5nZUxpc3RlbmVyIiwib2xkUm9vdCIsInJlZmVyZW5jZSIsImxpc3RlbmVyTnMiLCJyZWZlcmVuY2VMaXN0ZW5lcnMiLCJfZGVhZCIsImZuSW5kZXgiLCJsb2NhbExpc3RlbmVySW5kZXgiLCJzdWJQYXRoIiwidW5vYnNlcnZlQWxsIiwiZGVzdHJveSIsImZvcmNlSGFzU3dhcHBlZCIsInVuZG8iLCJiYWNrIiwicmVkbyIsInVuZG9VbnRpbCIsInN0cnVjdHVyZSIsInF1ZXVlZENoYW5nZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImpzb25wIiwib3B0cyIsImNsZWFudXAiLCJ0aW1lciIsImNsZWFyVGltZW91dCIsImNhbmNlbCIsImVuYyIsImVuY29kZVVSSUNvbXBvbmVudCIsImluc2VydEJlZm9yZSIsInVzZUNvbG9ycyIsImZpcmVidWciLCJleGNlcHRpb24iLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCIkMSIsImZvcm1hdEFyZ3MiLCJodW1hbml6ZSIsImRpZmYiLCJsYXN0QyIsImxvZyIsIkZ1bmN0aW9uIiwic2F2ZSIsIm5hbWVzcGFjZXMiLCJzdG9yYWdlIiwicmVtb3ZlSXRlbSIsImxvYWQiLCJyIiwiY2hyb21lIiwibG9jYWwiLCJsb2NhbFN0b3JhZ2UiLCJjb2xvcnMiLCJmb3JtYXR0ZXJzIiwiZW5hYmxlIiwic2VsZWN0Q29sb3IiLCJwcmV2Q29sb3IiLCJjdXJyIiwibXMiLCJwcmV2VGltZSIsImZvcm1hdHRlciIsImxvZ0ZuIiwic3BsaXQiLCJza2lwcyIsIm5hbWVzIiwiZGlzYWJsZSIsImV4ZWMiLCJuIiwicGFyc2VGbG9hdCIsInNob3J0Iiwicm91bmQiLCJsb25nIiwicGx1cmFsIiwiaXNVbmRlZmluZWRPck51bGwiLCJpc0J1ZmZlciIsImNvcHkiLCJvYmpFcXVpdiIsImlzQXJndW1lbnRzIiwicFNsaWNlIiwia2EiLCJvYmplY3RLZXlzIiwia2IiLCJhY3R1YWwiLCJleHBlY3RlZCIsImdldFRpbWUiLCJzdHJpY3QiLCJzdXBwb3J0ZWQiLCJ1bnN1cHBvcnRlZCIsInN1cHBvcnRzQXJndW1lbnRzQ2xhc3MiLCJzaGltIiwiX2luc3RhbmNlc0J5Q29udGFpbmVySUQiLCJSZWFjdEhvdEFQSSIsIl9pbnRlcm9wUmVxdWlyZSIsIl9fZXNNb2R1bGUiLCJVc2VyIiwiX3JlZiIsImFsbFVzZXJzIiwiY2xhc3NOYW1lIiwic2hvdWxkQWNjZXB0TW9kdWxlIiwiZmVlZCIsImdvb2dsZUVudHJ5IiwiZ3N4JG5hdm4iLCIkdCIsIm1lZGFscyIsImJldHMiLDEsMiwzLCJtZWRhbENvdW50IiwiZ29sZCIsImdzeCRhbnRhbGxndWxsIiwic2lsdmVyIiwiZ3N4JGFudGFsbHPDuGx2IiwiYnJvbnplIiwiZ3N4JGFudGFsbGJyb25zZSIsImltbXN0cnVjdCIsIkdvb2dsZURhdGEiLCJBcHAiLCJnb29nbGVEYXRhIiwiYmluZEF1dG9CaW5kTWV0aG9kIiwiZGVlcEZvcmNlVXBkYXRlIiwiX2luc3RhbmNlIiwiYmluZEF1dG9CaW5kTWV0aG9kcyIsIndyYXBNZXRob2QiLCJzdG9yZWRQcm90b3R5cGUiLCJwYXRjaFByb3BlcnR5IiwiaXNSZWFjdENsYXNzQXBwcm92ZWQiLCJ1cGRhdGVTdG9yZWRQcm90b3R5cGUiLCJmcmVzaFByb3RvdHlwZSIsImdldE93blByb3BlcnR5TmFtZXMiLCJyZWNvbmNpbGVXaXRoU3RvcmVkUHJvdG90eXBlcyIsImtub3duUHJvdG90eXBlcyIsIl9faXNBc3NpbWlsYXRlZEJ5UmVhY3RIb3RBUEkiLCJtYWtlUGF0Y2hSZWFjdENsYXNzIiwicGF0Y2hlcnMiLCJOZXh0Q2xhc3MiLCJwZXJzaXN0ZW50SWQiLCJwYXRjaFJlYWN0Q2xhc3MiLCJoYXNOb25TdHViVHlwZVByb3BlcnR5IiwiUmVhY3RDbGFzcyIsImRlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGUiLCJzZWVtc0xlZ2l0IiwibWFrZUFzc2ltaWxhdGVQcm90b3R5cGUiLCJyZXF1ZXN0Rm9yY2VVcGRhdGVBbGwiLCJhc3NpbWlsYXRlUHJvdG90eXBlIiwiRmlyc3RDbGFzcyIsIm5leHRQcm90b3R5cGUiLCJpc1JlcXVlc3RQZW5kaW5nIiwiZm9yY2VVcGRhdGVBbGwiLCJyb290SW5zdGFuY2VzIiwiaXNQcmVzdG8iLCJvcGVyYSIsImlzS2V5cHJlc3NDb21tYW5kIiwiU3ludGhldGljSW5wdXRFdmVudCIsImNhblVzZVRleHRJbnB1dEV2ZW50IiwiU1BBQ0VCQVJfQ09ERSIsIlNQQUNFQkFSX0NIQVIiLCJmcm9tQ2hhckNvZGUiLCJiZWZvcmVJbnB1dCIsIm9uQmVmb3JlSW5wdXQiLCJvbkJlZm9yZUlucHV0Q2FwdHVyZSIsImZhbGxiYWNrQ2hhcnMiLCJoYXNTcGFjZUtleXByZXNzIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsImNoYXJzIiwid2hpY2giLCJzaG91bGRVc2VDaGFuZ2VFdmVudCIsIm1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQiLCJjaGFuZ2UiLCJhY3RpdmVFbGVtZW50SUQiLCJydW5FdmVudEluQmF0Y2giLCJzdGFydFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgiLCJzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCIsImRldGFjaEV2ZW50IiwiZ2V0VGFyZ2V0SURGb3JDaGFuZ2VFdmVudCIsImhhbmRsZUV2ZW50c0ZvckNoYW5nZUV2ZW50SUU4Iiwic3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlIiwiYWN0aXZlRWxlbWVudFZhbHVlIiwiYWN0aXZlRWxlbWVudFZhbHVlUHJvcCIsIm5ld1ZhbHVlUHJvcCIsImhhbmRsZVByb3BlcnR5Q2hhbmdlIiwic3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UiLCJwcm9wZXJ0eU5hbWUiLCJnZXRUYXJnZXRJREZvcklucHV0RXZlbnQiLCJoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUUiLCJnZXRUYXJnZXRJREZvcklucHV0RXZlbnRJRSIsInNob3VsZFVzZUNsaWNrRXZlbnQiLCJnZXRUYXJnZXRJREZvckNsaWNrRXZlbnQiLCJvbkNoYW5nZUNhcHR1cmUiLCJkb2VzQ2hhbmdlRXZlbnRCdWJibGUiLCJkb2N1bWVudE1vZGUiLCJpc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJDaGFuZ2VFdmVudFBsdWdpbiIsImdldFRhcmdldElERnVuYyIsImhhbmRsZUV2ZW50RnVuYyIsIm5leHRSZWFjdFJvb3RJbmRleCIsIkNsaWVudFJlYWN0Um9vdEluZGV4IiwiZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblVwZGF0ZSIsImlzRmFsbGJhY2tTdGFydCIsIlNUQVJUX0tFWUNPREUiLCJpc0ZhbGxiYWNrRW5kIiwiRU5EX0tFWUNPREVTIiwiRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlIiwic3RhcnRTZWxlY3Rpb24iLCJzdGFydFZhbHVlIiwiZ2V0VGV4dCIsIlN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQiLCJ1c2VDb21wb3NpdGlvbkV2ZW50IiwidXNlRmFsbGJhY2tEYXRhIiwiY3VycmVudENvbXBvc2l0aW9uIiwib25Db21wb3NpdGlvbkVuZCIsIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZSIsIm9uQ29tcG9zaXRpb25VcGRhdGUiLCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZSIsImdldERhdGEiLCJlbmRWYWx1ZSIsInByZWZpeExlbmd0aCIsInN1ZmZpeExlbmd0aCIsIkNvbXBvc2l0aW9uRXZlbnRQbHVnaW4iLCJldmVudFR5cGUiLCJpbnNlcnRDaGlsZEF0IiwiY2hpbGROb2RlIiwiY2hpbGROb2RlcyIsIkRhbmdlciIsInRleHRDb250ZW50QWNjZXNzb3IiLCJjcmVhdGVUZXh0Tm9kZSIsIkRPTUNoaWxkcmVuT3BlcmF0aW9ucyIsImRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwIiwicHJvY2Vzc1VwZGF0ZXMiLCJ1cGRhdGVzIiwibWFya3VwTGlzdCIsImluaXRpYWxDaGlsZHJlbiIsInVwZGF0ZWRDaGlsZHJlbiIsInVwZGF0ZWRJbmRleCIsInVwZGF0ZWRDaGlsZCIsInJlbmRlcmVkTWFya3VwIiwiZGFuZ2Vyb3VzbHlSZW5kZXJNYXJrdXAiLCJnZXROb2RlTmFtZSIsImNyZWF0ZU5vZGVzRnJvbU1hcmt1cCIsIk9QRU5fVEFHX05BTUVfRVhQIiwiUkVTVUxUX0lOREVYX0FUVFIiLCJtYXJrdXBCeU5vZGVOYW1lIiwicmVzdWx0TGlzdCIsInJlc3VsdExpc3RBc3NpZ25tZW50Q291bnQiLCJtYXJrdXBMaXN0QnlOb2RlTmFtZSIsInJlc3VsdEluZGV4IiwicmVuZGVyTm9kZXMiLCJyZW5kZXJOb2RlIiwiaGFzQXR0cmlidXRlIiwiRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIiLCJSZXNwb25kZXJFdmVudFBsdWdpbiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiVGFwRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkFuYWx5dGljc0V2ZW50UGx1Z2luIiwiTW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpbiIsIm1vdXNlRW50ZXIiLCJvbk1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwib25Nb3VzZUxlYXZlIiwid2luIiwiRXZlbnRMaXN0ZW5lciIsImxpc3RlbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWdpc3RlckRlZmF1bHQiLCJoYXNTVkciLCJIVE1MRE9NUHJvcGVydHlDb25maWciLCJhY2NlcHRDaGFyc2V0IiwiYWNjZXNzS2V5IiwiYWN0aW9uIiwiYWxsb3dGdWxsU2NyZWVuIiwiYWxsb3dUcmFuc3BhcmVuY3kiLCJhbHQiLCJhc3luYyIsImF1dG9Db21wbGV0ZSIsImF1dG9QbGF5IiwiY2VsbFBhZGRpbmciLCJjZWxsU3BhY2luZyIsImNoYXJTZXQiLCJjbGFzc0lEIiwiY29scyIsImNvbFNwYW4iLCJjb250ZW50IiwiY29udGV4dE1lbnUiLCJjb250cm9scyIsImNvb3JkcyIsImNyb3NzT3JpZ2luIiwiZGF0ZVRpbWUiLCJkZWZlciIsImRpciIsImRvd25sb2FkIiwiZHJhZ2dhYmxlIiwiZW5jVHlwZSIsImZvcm1BY3Rpb24iLCJmb3JtRW5jVHlwZSIsImZvcm1NZXRob2QiLCJmb3JtTm9WYWxpZGF0ZSIsImZvcm1UYXJnZXQiLCJmcmFtZUJvcmRlciIsImhlaWdodCIsImhyZWYiLCJocmVmTGFuZyIsImh0bWxGb3IiLCJodHRwRXF1aXYiLCJpY29uIiwibGFuZyIsImxvb3AiLCJtYW5pZmVzdCIsIm1hcmdpbkhlaWdodCIsIm1hcmdpbldpZHRoIiwibWF4TGVuZ3RoIiwibWVkaWEiLCJtZWRpYUdyb3VwIiwibXVsdGlwbGUiLCJtdXRlZCIsIm5vVmFsaWRhdGUiLCJwbGFjZWhvbGRlciIsInBvc3RlciIsInByZWxvYWQiLCJyYWRpb0dyb3VwIiwicmVsIiwicmVxdWlyZWQiLCJyb2xlIiwicm93cyIsInJvd1NwYW4iLCJzYW5kYm94Iiwic2Nyb2xsaW5nIiwic2VhbWxlc3MiLCJzZWxlY3RlZCIsInNpemVzIiwic3BlbGxDaGVjayIsInNyY0RvYyIsInNyY1NldCIsInRhYkluZGV4IiwidXNlTWFwIiwid2lkdGgiLCJ3bW9kZSIsImF1dG9DYXBpdGFsaXplIiwiYXV0b0NvcnJlY3QiLCJpdGVtUHJvcCIsIml0ZW1TY29wZSIsIml0ZW1UeXBlIiwib25jbGljayIsIlJlYWN0Q2hpbGRyZW4iLCJSZWFjdERlZmF1bHRJbmplY3Rpb24iLCJSZWFjdFNlcnZlclJlbmRlcmluZyIsIm9ubHlDaGlsZCIsImluamVjdCIsIkNoaWxkcmVuIiwib25seSIsIkRPTSIsIlByb3BUeXBlcyIsImluaXRpYWxpemVUb3VjaEV2ZW50cyIsInNob3VsZFVzZVRvdWNoIiwicmVuZGVyVG9TdHJpbmciLCJfX3NwcmVhZCIsInJlbmRlckNvbXBvbmVudFRvU3RyaW5nIiwicmVuZGVyQ29tcG9uZW50VG9TdGF0aWNNYXJrdXAiLCJpc1ZhbGlkQ29tcG9uZW50IiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiQ3VycmVudE93bmVyIiwiRE9NQ29tcG9uZW50IiwiSW5zdGFuY2VIYW5kbGVzIiwiTXVsdGlDaGlsZCIsIlRleHRDb21wb25lbnQiLCJ0b3AiLCJleHBlY3RlZEZlYXR1cmVzIiwidHJpbSIsIkZvckVhY2hCb29rS2VlcGluZyIsImZvckVhY2hGdW5jdGlvbiIsImZvckVhY2hDb250ZXh0IiwiZm9yRWFjaFNpbmdsZUNoaWxkIiwiZm9yRWFjaEJvb2tLZWVwaW5nIiwiZm9yRWFjaENoaWxkcmVuIiwiZm9yRWFjaEZ1bmMiLCJNYXBCb29rS2VlcGluZyIsIm1hcFJlc3VsdCIsIm1hcEZ1bmN0aW9uIiwibWFwQ29udGV4dCIsIm1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQiLCJtYXBCb29rS2VlcGluZyIsImtleVVuaXF1ZSIsIm1hcHBlZENoaWxkIiwibWFwQ2hpbGRyZW4iLCJmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSIsImNvdW50Q2hpbGRyZW4iLCJSZWFjdERPTUlET3BlcmF0aW9ucyIsIlJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50IiwibW91c2VMaXN0ZW5lck5hbWVzIiwib25DbGljayIsIm9uRG91YmxlQ2xpY2siLCJvbk1vdXNlRG93biIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZVVwIiwib25DbGlja0NhcHR1cmUiLCJvbkRvdWJsZUNsaWNrQ2FwdHVyZSIsIm9uTW91c2VEb3duQ2FwdHVyZSIsIm9uTW91c2VNb3ZlQ2FwdHVyZSIsIm9uTW91c2VVcENhcHR1cmUiLCJSZWFjdERPTUJ1dHRvbiIsIlJlYWN0RE9NRm9ybSIsIklOVkFMSURfUFJPUEVSVFlfRVJST1JTIiwiUmVhY3RET01JbWciLCJmb3JjZVVwZGF0ZUlmTW91bnRlZCIsImluc3RhbmNlc0J5UmVhY3RJRCIsIlJlYWN0RE9NSW5wdXQiLCJpbml0aWFsQ2hlY2tlZCIsImRlZmF1bHRDaGVja2VkIiwiaW5pdGlhbFZhbHVlIiwiX2hhbmRsZUNoYW5nZSIsInJvb3ROb2RlIiwicXVlcnlSb290IiwiZ3JvdXAiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZ3JvdXBMZW4iLCJvdGhlck5vZGUiLCJvdGhlcklEIiwib3RoZXJJbnN0YW5jZSIsIlJlYWN0RE9NT3B0aW9uIiwidXBkYXRlV2l0aFBlbmRpbmdWYWx1ZUlmTW91bnRlZCIsIl9wZW5kaW5nVmFsdWUiLCJzZWxlY3RWYWx1ZVR5cGUiLCJ1cGRhdGVPcHRpb25zIiwic2VsZWN0ZWRWYWx1ZSIsIlJlYWN0RE9NU2VsZWN0IiwicHJldk11bHRpcGxlIiwiaXNDb2xsYXBzZWQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNPZmZzZXQiLCJnZXRJRU9mZnNldHMiLCJzZWxlY3RlZFJhbmdlIiwic2VsZWN0ZWRMZW5ndGgiLCJmcm9tU3RhcnQiLCJkdXBsaWNhdGUiLCJtb3ZlVG9FbGVtZW50VGV4dCIsInNldEVuZFBvaW50Iiwic3RhcnRPZmZzZXQiLCJlbmRPZmZzZXQiLCJnZXRNb2Rlcm5PZmZzZXRzIiwicmFuZ2VDb3VudCIsImN1cnJlbnRSYW5nZSIsImdldFJhbmdlQXQiLCJpc1NlbGVjdGlvbkNvbGxhcHNlZCIsInJhbmdlTGVuZ3RoIiwidGVtcFJhbmdlIiwiY2xvbmVSYW5nZSIsInNlbGVjdE5vZGVDb250ZW50cyIsInNldEVuZCIsInN0YXJ0Q29udGFpbmVyIiwiaXNUZW1wUmFuZ2VDb2xsYXBzZWQiLCJlbmRDb250YWluZXIiLCJkZXRlY3Rpb25SYW5nZSIsInNldFN0YXJ0IiwiaXNCYWNrd2FyZCIsImNvbGxhcHNlZCIsInNldElFT2Zmc2V0cyIsInNldE1vZGVybk9mZnNldHMiLCJ0ZW1wIiwic3RhcnRNYXJrZXIiLCJnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0IiwiZW5kTWFya2VyIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJ1c2VJRU9mZnNldHMiLCJSZWFjdERPTVRleHRhcmVhIiwiUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uIiwiUkVTRVRfQkFUQ0hFRF9VUERBVEVTIiwiUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSIsIkZMVVNIX0JBVENIRURfVVBEQVRFUyIsImFscmVhZHlCYXRjaGluZ1VwZGF0ZXMiLCJSZWFjdEluamVjdGlvbiIsIk5hdGl2ZUNvbXBvbmVudCIsImNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50IiwiQ29tcG9zaXRlQ29tcG9uZW50IiwiU1ZHRE9NUHJvcGVydHlDb25maWciLCJFbXB0eUNvbXBvbmVudCIsIlVwZGF0ZXMiLCJSb290SW5kZXgiLCJTZXJ2ZXJSZWFjdFJvb3RJbmRleCIsIlJlYWN0RGVmYXVsdFBlcmYiLCJyb3VuZEZsb2F0IiwiYWRkVmFsdWUiLCJSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMiLCJwZXJmb3JtYW5jZU5vdyIsIl9hbGxNZWFzdXJlbWVudHMiLCJfbW91bnRTdGFjayIsIl9pbmplY3RlZCIsImdldExhc3RNZWFzdXJlbWVudHMiLCJwcmludEV4Y2x1c2l2ZSIsIm1lYXN1cmVtZW50cyIsImdldEV4Y2x1c2l2ZVN1bW1hcnkiLCJDb21wb25lbnQgY2xhc3MgbmFtZSIsIlRvdGFsIGluY2x1c2l2ZSB0aW1lIChtcykiLCJpbmNsdXNpdmUiLCJFeGNsdXNpdmUgbW91bnQgdGltZSAobXMpIiwiZXhjbHVzaXZlIiwiRXhjbHVzaXZlIHJlbmRlciB0aW1lIChtcykiLCJNb3VudCB0aW1lIHBlciBpbnN0YW5jZSAobXMpIiwiUmVuZGVyIHRpbWUgcGVyIGluc3RhbmNlIChtcykiLCJJbnN0YW5jZXMiLCJwcmludEluY2x1c2l2ZSIsImdldEluY2x1c2l2ZVN1bW1hcnkiLCJPd25lciA+IGNvbXBvbmVudCIsIkluY2x1c2l2ZSB0aW1lIChtcykiLCJnZXRUb3RhbFRpbWUiLCJ0b0ZpeGVkIiwiZ2V0TWVhc3VyZW1lbnRzU3VtbWFyeU1hcCIsIldhc3RlZCB0aW1lIChtcykiLCJwcmludFdhc3RlZCIsInByaW50RE9NIiwiZ2V0RE9NU3VtbWFyeSIsIl9yZWNvcmRXcml0ZSIsInRvdGFsVGltZSIsIndyaXRlcyIsIm1vZHVsZU5hbWUiLCJydiIsImNvdW50cyIsImRpc3BsYXlOYW1lcyIsIm1vdW50SUQiLCJ3cml0ZUFyZ3MiLCJpc1JlbmRlciIsImlzTW91bnQiLCJtb3VudFN0YWNrIiwic3ViTW91bnRUaW1lIiwibWVhc3VyZW1lbnQiLCJpdGVtcyIsIndyaXRlIiwiRE9NX09QRVJBVElPTl9UWVBFUyIsImNhbmRpZGF0ZXMiLCJhbGxJRHMiLCJET05UX0NBUkVfVEhSRVNIT0xEIiwib25seUNsZWFuIiwiaW5jbHVzaXZlS2V5IiwiY2xlYW5Db21wb25lbnRzIiwiZ2V0VW5jaGFuZ2VkQ29tcG9uZW50cyIsImRpcnR5TGVhZklEcyIsImlzRGlydHkiLCJydW5FdmVudFF1ZXVlSW5CYXRjaCIsImZpbmRQYXJlbnQiLCJub2RlSUQiLCJUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmciLCJhbmNlc3RvcnMiLCJoYW5kbGVUb3BMZXZlbEltcGwiLCJib29rS2VlcGluZyIsIl9oYW5kbGVUb3BMZXZlbCIsInNjcm9sbFZhbHVlTW9uaXRvciIsIl9lbmFibGVkIiwiZGlzcGF0Y2hFdmVudCIsIlBlcmYiLCJjcmVhdGVUcmFuc2ZlclN0cmF0ZWd5IiwibWVyZ2VTdHJhdGVneSIsInRyYW5zZmVySW50byIsInRoaXNLZXkiLCJ0cmFuc2ZlclN0cmF0ZWd5IiwiVHJhbnNmZXJTdHJhdGVnaWVzIiwiam9pbkNsYXNzZXMiLCJ0cmFuc2ZlclN0cmF0ZWd5TWVyZ2UiLCJtZXJnZVByb3BzIiwib2xkUHJvcHMiLCJ0cmFuc2ZlclByb3BzVG8iLCJyZWFjdE1vdW50UmVhZHkiLCJwdXRMaXN0ZW5lclF1ZXVlIiwiU0VMRUNUSU9OX1JFU1RPUkFUSU9OIiwiRVZFTlRfU1VQUFJFU1NJT04iLCJjdXJyZW50bHlFbmFibGVkIiwicHJldmlvdXNseUVuYWJsZWQiLCJPTl9ET01fUkVBRFlfUVVFVUVJTkciLCJQVVRfTElTVEVORVJfUVVFVUVJTkciLCJSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uIiwiY3giLCJjeSIsImR4IiwiZHkiLCJmaWxsIiwiZngiLCJmeSIsImdyYWRpZW50VHJhbnNmb3JtIiwiZ3JhZGllbnRVbml0cyIsIm1hcmtlckVuZCIsIm1hcmtlck1pZCIsIm1hcmtlclN0YXJ0IiwicGF0dGVybkNvbnRlbnRVbml0cyIsInBhdHRlcm5Vbml0cyIsInBvaW50cyIsInByZXNlcnZlQXNwZWN0UmF0aW8iLCJyeCIsInJ5Iiwic3ByZWFkTWV0aG9kIiwic3RvcENvbG9yIiwic3RvcE9wYWNpdHkiLCJzdHJva2UiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VMaW5lY2FwIiwic3Ryb2tlV2lkdGgiLCJ0ZXh0QW5jaG9yIiwidHJhbnNmb3JtIiwidmlld0JveCIsIngxIiwieDIiLCJ5MSIsInkyIiwiYm91bmRpbmdUb3AiLCJib3VuZGluZ0xlZnQiLCJjb25zdHJ1Y3RTZWxlY3RFdmVudCIsIm1vdXNlRG93biIsImN1cnJlbnRTZWxlY3Rpb24iLCJsYXN0U2VsZWN0aW9uIiwic2hhbGxvd0VxdWFsIiwib25TZWxlY3QiLCJvblNlbGVjdENhcHR1cmUiLCJHTE9CQUxfTU9VTlRfUE9JTlRfTUFYIiwicG93IiwiU3ludGhldGljQ2xpcGJvYXJkRXZlbnQiLCJTeW50aGV0aWNGb2N1c0V2ZW50IiwiU3ludGhldGljS2V5Ym9hcmRFdmVudCIsIlN5bnRoZXRpY0RyYWdFdmVudCIsIlN5bnRoZXRpY1RvdWNoRXZlbnQiLCJTeW50aGV0aWNXaGVlbEV2ZW50IiwiYmx1ciIsIm9uQmx1ciIsIm9uQmx1ckNhcHR1cmUiLCJjbGljayIsIm9uQ29udGV4dE1lbnUiLCJvbkNvbnRleHRNZW51Q2FwdHVyZSIsIm9uQ29weSIsIm9uQ29weUNhcHR1cmUiLCJjdXQiLCJvbkN1dCIsIm9uQ3V0Q2FwdHVyZSIsImRvdWJsZUNsaWNrIiwiZHJhZyIsIm9uRHJhZyIsIm9uRHJhZ0NhcHR1cmUiLCJkcmFnRW5kIiwib25EcmFnRW5kIiwib25EcmFnRW5kQ2FwdHVyZSIsImRyYWdFbnRlciIsIm9uRHJhZ0VudGVyIiwib25EcmFnRW50ZXJDYXB0dXJlIiwiZHJhZ0V4aXQiLCJvbkRyYWdFeGl0Iiwib25EcmFnRXhpdENhcHR1cmUiLCJkcmFnTGVhdmUiLCJvbkRyYWdMZWF2ZSIsIm9uRHJhZ0xlYXZlQ2FwdHVyZSIsImRyYWdPdmVyIiwib25EcmFnT3ZlciIsIm9uRHJhZ092ZXJDYXB0dXJlIiwiZHJhZ1N0YXJ0Iiwib25EcmFnU3RhcnQiLCJvbkRyYWdTdGFydENhcHR1cmUiLCJkcm9wIiwib25Ecm9wIiwib25Ecm9wQ2FwdHVyZSIsIm9uRm9jdXMiLCJvbkZvY3VzQ2FwdHVyZSIsIm9uSW5wdXQiLCJvbklucHV0Q2FwdHVyZSIsImtleURvd24iLCJvbktleURvd24iLCJvbktleURvd25DYXB0dXJlIiwia2V5UHJlc3MiLCJvbktleVByZXNzIiwib25LZXlQcmVzc0NhcHR1cmUiLCJrZXlVcCIsIm9uS2V5VXAiLCJvbktleVVwQ2FwdHVyZSIsIm9uTG9hZCIsIm9uTG9hZENhcHR1cmUiLCJvbkVycm9yIiwib25FcnJvckNhcHR1cmUiLCJtb3VzZU1vdmUiLCJtb3VzZU91dCIsIm9uTW91c2VPdXQiLCJvbk1vdXNlT3V0Q2FwdHVyZSIsIm1vdXNlT3ZlciIsIm9uTW91c2VPdmVyIiwib25Nb3VzZU92ZXJDYXB0dXJlIiwibW91c2VVcCIsInBhc3RlIiwib25QYXN0ZSIsIm9uUGFzdGVDYXB0dXJlIiwib25SZXNldCIsIm9uUmVzZXRDYXB0dXJlIiwic2Nyb2xsIiwib25TY3JvbGwiLCJvblNjcm9sbENhcHR1cmUiLCJvblN1Ym1pdCIsIm9uU3VibWl0Q2FwdHVyZSIsInRvdWNoQ2FuY2VsIiwib25Ub3VjaENhbmNlbCIsIm9uVG91Y2hDYW5jZWxDYXB0dXJlIiwidG91Y2hFbmQiLCJvblRvdWNoRW5kIiwib25Ub3VjaEVuZENhcHR1cmUiLCJ0b3VjaE1vdmUiLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hNb3ZlQ2FwdHVyZSIsInRvdWNoU3RhcnQiLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoU3RhcnRDYXB0dXJlIiwid2hlZWwiLCJvbldoZWVsIiwib25XaGVlbENhcHR1cmUiLCJ0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWciLCJFdmVudENvbnN0cnVjdG9yIiwiQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UiLCJjbGlwYm9hcmREYXRhIiwiQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSIsIkRyYWdFdmVudEludGVyZmFjZSIsImRhdGFUcmFuc2ZlciIsIkZvY3VzRXZlbnRJbnRlcmZhY2UiLCJJbnB1dEV2ZW50SW50ZXJmYWNlIiwiZ2V0RXZlbnRLZXkiLCJLZXlib2FyZEV2ZW50SW50ZXJmYWNlIiwicmVwZWF0IiwibG9jYWxlIiwiVG91Y2hFdmVudEludGVyZmFjZSIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJXaGVlbEV2ZW50SW50ZXJmYWNlIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJNT0QiLCJjYW1lbGl6ZSIsIl9oeXBoZW5QYXR0ZXJuIiwiY2hhcmFjdGVyIiwibXNQYXR0ZXJuIiwiaGFzQXJyYXlOYXR1cmUiLCJjcmVhdGVBcnJheUZyb20iLCJlbGVtZW50RmFjdG9yeSIsIkZ1bGxQYWdlQ29tcG9uZW50Iiwibm9kZU5hbWVNYXRjaCIsIm5vZGVOYW1lUGF0dGVybiIsImhhbmRsZVNjcmlwdCIsIndyYXAiLCJ3cmFwRGVwdGgiLCJzY3JpcHRzIiwiaXNOb25OdW1lcmljIiwiZmxhdHRlblNpbmdsZUNoaWxkSW50b0NvbnRleHQiLCJub3JtYWxpemVkVmFsdWUiLCJub3JtYWxpemVLZXkiLCJ0cmFuc2xhdGVUb0tleSIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLDgsOSwxMiwxMywxNiwxNywxOCwxOSwyMCwyNywzMiwzMywzNCwzNSwzNiwzNywzOCwzOSw0MCw0NSw0NiwxMTIsMTEzLDExNCwxMTUsMTE2LDExNywxMTgsMTE5LDEyMCwxMjEsMTIyLDEyMywxNDQsMTQ1LDIyNCwiZ2V0TGVhZk5vZGUiLCJnZXRTaWJsaW5nTm9kZSIsIm5vZGVTdGFydCIsIm5vZGVFbmQiLCJoeXBoZW5hdGUiLCJfdXBwZXJjYXNlUGF0dGVybiIsIk5vZGUiLCJuZXh0Q2xhc3MiLCJhcmdMZW5ndGgiLCJwZXJmb3JtYW5jZSIsIm1zUGVyZm9ybWFuY2UiLCJ3ZWJraXRQZXJmb3JtYW5jZSIsIm9iakEiLCJvYmpCIiwiYWRkU3R5bGVzVG9Eb20iLCJkb21TdHlsZSIsInN0eWxlc0luRG9tIiwicGFydHMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsImNzcyIsInNvdXJjZU1hcCIsInBhcnQiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJzdHlsZUVsZW1lbnQiLCJnZXRIZWFkRWxlbWVudCIsInN0eWxlSW5kZXgiLCJzaW5nbGV0b25Db3VudGVyIiwic2luZ2xldG9uRWxlbWVudCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJhcHBseVRvVGFnIiwibmV3T2JqIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImJvdW5kYXJpZXMiLCJ3cmFwcGVkUmVwbGFjZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJidG9hIiwibWVtb2l6ZSIsIm1lbW8iLCJpc0lFOSIsIm1heVJlbW92ZSIsIm5ld0NvbnRlbnQiLCJfX3Jlc291cmNlUXVlcnkiLCJyZWxvYWRBcHAiLCJjdXJyZW50SGFzaCIsInJlbG9hZCIsImlvIiwiY29ubmVjdCIsImluaXRpYWwiLCJ3YXJuaW5ncyIsImVycm9ycyIsInByb3RvY29sIiwidHJhbnNwb3J0cyIsInNvY2tldHMiLCJob3N0IiwidXVyaSIsInNvY2tldCIsInVyaSIsInV0aWwiLCJwYXJzZVVyaSIsImRvbWFpbiIsImhvc3RuYW1lIiwicG9ydCIsInVuaXF1ZVVyaSIsInNlY3VyZSIsInF1ZXJ5IiwiU29ja2V0IiwicmUiLCJhZGRpdGlvbiIsImNodW5rUXVlcnkiLCJjb21wb25lbnRzIiwicXMiLCJrdiIsInBhcmFtcyIsInBhZ2VMb2FkZWQiLCJ4ZG9tYWluIiwiWERvbWFpblJlcXVlc3QiLCJ1YSIsImhhc0NPUlMiLCJ3ZWJraXQiLCJpbXBvcnRTY3JpcHRzIiwiYWRkaXRpb25hbCIsImRlZXAiLCJsYXN0c2VlbiIsInNlZW4iLCJjdG9yMiIsImluaGVyaXQiLCJhcnIyIiwibG9uZ2VzdCIsInNob3J0ZXN0IiwiZW51Iiwid2l0aENyZWRlbnRpYWxzIiwiaURldmljZSIsIiRldmVudHMiLCJwb3MiLCJoYW5kbGVyIiwibmF0aXZlSlNPTiIsImlzRmluaXRlIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwicXVvdGUiLCJlc2NhcGFibGUiLCJob2xkZXIiLCJwYXJ0aWFsIiwibWluZCIsImdhcCIsInJlcCIsImluZGVudCIsIlxiIiwiXHQiLCJcbiIsIlxmIiwiXHIiLCJcXCIsInJlcGxhY2VyIiwic3BhY2UiLCJyZXZpdmVyIiwid2FsayIsImV2YWwiLCJTeW50YXhFcnJvciIsInBhcnNlciIsInBhY2tldHMiLCJyZWFzb25zIiwiYWR2aWNlIiwiZW5jb2RlUGFja2V0IiwicGFja2V0IiwiZW5kcG9pbnQiLCJhY2siLCJyZWFzb24iLCJhZHYiLCJhY2tJZCIsImVuY29kZWQiLCJlbmNvZGVQYXlsb2FkIiwiZGVjb2RlZCIsInJlZ2V4cCIsImRlY29kZVBhY2tldCIsInBpZWNlcyIsImRlY29kZVBheWxvYWQiLCJOdW1iZXIiLCJUcmFuc3BvcnQiLCJzZXNzaWQiLCJoZWFydGJlYXRzIiwib25EYXRhIiwiY2xlYXJDbG9zZVRpbWVvdXQiLCJjb25uZWN0ZWQiLCJjb25uZWN0aW5nIiwicmVjb25uZWN0aW5nIiwic2V0Q2xvc2VUaW1lb3V0IiwibXNncyIsIm9uUGFja2V0Iiwic2V0SGVhcnRiZWF0VGltZW91dCIsIm9uSGVhcnRiZWF0Iiwib25Db25uZWN0IiwiaXNPcGVuIiwiY2xvc2VUaW1lb3V0Iiwib25EaXNjb25uZWN0IiwiY2xlYXJUaW1lb3V0cyIsInJlb3BlblRpbWVvdXQiLCJvbk9wZW4iLCJvbkNsb3NlIiwicHJlcGFyZVVybCIsInNjaGVtZSIsInJlc291cmNlIiwicmVhZHkiLCJjb25uZWN0IHRpbWVvdXQiLCJ0cnkgbXVsdGlwbGUgdHJhbnNwb3J0cyIsInJlY29ubmVjdCIsInJlY29ubmVjdGlvbiBkZWxheSIsInJlY29ubmVjdGlvbiBsaW1pdCIsInJlb3BlbiBkZWxheSIsIm1heCByZWNvbm5lY3Rpb24gYXR0ZW1wdHMiLCJzeW5jIGRpc2Nvbm5lY3Qgb24gdW5sb2FkIiwiYXV0byBjb25uZWN0IiwiZmxhc2ggcG9saWN5IHBvcnQiLCJtYW51YWxGbHVzaCIsImJ1ZmZlciIsImRvQnVmZmVyIiwiaXNYRG9tYWluIiwiZGlzY29ubmVjdFN5bmMiLCJTb2NrZXROYW1lc3BhY2UiLCJwdWJsaXNoIiwibnNwIiwiJGVtaXQiLCJoYW5kc2hha2UiLCJjb21wbGV0ZSIsImluc2VydEF0IiwieGhyIiwiZ2V0VHJhbnNwb3J0Iiwib3ZlcnJpZGUiLCJ0cmFuc3BvcnQiLCJ4ZG9tYWluQ2hlY2siLCJzZXNzaW9uaWQiLCJzaWQiLCJoZWFydGJlYXQiLCJjb25uZWN0VGltZW91dFRpbWVyIiwicmVtYWluaW5nIiwiaGVhcnRiZWF0VGltZW91dCIsIm9yaWdUcmFuc3BvcnRzIiwiaGVhcnRiZWF0VGltZW91dFRpbWVyIiwic2V0QnVmZmVyIiwiZmx1c2hCdWZmZXIiLCJwYXlsb2FkIiwiZGlzY29ubmVjdCIsIndhc0Nvbm5lY3RlZCIsIndhc0Nvbm5lY3RpbmciLCJyZWNvbm5lY3Rpb25BdHRlbXB0cyIsInJlY29ubmVjdGlvblRpbWVyIiwibWF5YmVSZWNvbm5lY3QiLCJyZWNvbm5lY3Rpb25EZWxheSIsInJlZG9UcmFuc3BvcnRzIiwidHJ5TXVsdGlwbGUiLCJtYXhBdHRlbXB0cyIsImxpbWl0IiwiZmxhZ3MiLCJGbGFnIiwiYWNrUGFja2V0cyIsImFja3MiLCJsYXN0QXJnIiwiV1MiLCJ3ZWJzb2NrZXQiLCJNb3pXZWJTb2NrZXQiLCJXZWJTb2NrZXQiLCJvbm9wZW4iLCJvbm1lc3NhZ2UiLCJvbmNsb3NlIiwib25lcnJvciIsIkZsYXNoc29ja2V0IiwiZmxhc2hzb2NrZXQiLCJfX2FkZFRhc2siLCJfX3Rhc2tzIiwiaW5pdCIsIldFQl9TT0NLRVRfU1dGX0xPQ0FUSU9OIiwibG9hZEZsYXNoUG9saWN5RmlsZSIsIl9faW5pdGlhbGl6ZSIsInN3Zm9iamVjdCIsImdldEZsYXNoUGxheWVyVmVyc2lvbiIsIm1ham9yIiwiV0VCX1NPQ0tFVF9ESVNBQkxFX0FVVE9fSU5JVElBTElaQVRJT04iLCJKIiwiWiIsIkMiLCJhYSIsIlgiLCJVIiwiWSIsIksiLCJPIiwiRCIsIm9ubG9hZCIsIlQiLCJWIiwiSCIsIkdldFZhcmlhYmxlIiwiYWIiLCJNIiwicHYiLCJjYWxsZWUiLCJhZyIsImFmIiwiY2FsbGJhY2tGbiIsInN1Y2Nlc3MiLCJhZSIsIkYiLCJzd2ZWZXJzaW9uIiwid2siLCJleHByZXNzSW5zdGFsbCIsIkEiLCJhaSIsInN0eWxlY2xhc3MiLCJhbGlnbiIsImFoIiwiYWMiLCJhZCIsIlAiLCJ3IiwieiIsIlNldFZhcmlhYmxlIiwibWFjIiwiRSIsIkIiLCJRIiwiUiIsImllIiwiZmxhc2h2YXJzIiwiZGlzcGxheSIsImNsb25lTm9kZSIsIm1vdmllIiwib3V0ZXJIVE1MIiwiTiIsIkkiLCJHIiwic3R5bGVTaGVldHMiLCJhZGRSdWxlIiwidmlzaWJpbGl0eSIsIkwiLCJTIiwiVyIsInQiLCJwbGF0Zm9ybSIsImRlc2NyaXB0aW9uIiwibWltZVR5cGVzIiwiZW5hYmxlZFBsdWdpbiIsInczIiwiZG9TY3JvbGwiLCJyZWdpc3Rlck9iamVjdCIsImdldE9iamVjdEJ5SWQiLCJlbWJlZFNXRiIsImFqIiwiYWwiLCJhbSIsImFrIiwiYW4iLCJzd2l0Y2hPZmZBdXRvSGlkZVNob3ciLCJtaW5vciIsImhhc0ZsYXNoUGxheWVyVmVyc2lvbiIsImNyZWF0ZVNXRiIsInNob3dFeHByZXNzSW5zdGFsbCIsInJlbW92ZVNXRiIsImNyZWF0ZUNTUyIsImFkZERvbUxvYWRFdmVudCIsImFkZExvYWRFdmVudCIsImdldFF1ZXJ5UGFyYW1WYWx1ZSIsImV4cHJlc3NJbnN0YWxsQ2FsbGJhY2siLCJwcm90b2NvbHMiLCJwcm94eUhvc3QiLCJwcm94eVBvcnQiLCJoZWFkZXJzIiwiX19pZCIsIl9fbmV4dElkIiwiX19pbnN0YW5jZXMiLCJDT05ORUNUSU5HIiwiYnVmZmVyZWRBbW91bnQiLCJfX2V2ZW50cyIsIl9fZmxhc2giLCJDTE9TRUQiLCJDTE9TSU5HIiwiX19oYW5kbGVFdmVudCIsImZsYXNoRXZlbnQiLCJqc0V2ZW50IiwiX19jcmVhdGVTaW1wbGVFdmVudCIsImRlY29kZVVSSUNvbXBvbmVudCIsIl9fY3JlYXRlTWVzc2FnZUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJFdmVudCIsImluaXRFdmVudCIsIk1lc3NhZ2VFdmVudCIsImluaXRNZXNzYWdlRXZlbnQiLCJPUEVOIiwibG9hZE1hbnVhbFBvbGljeUZpbGUiLCJfX3N3ZkxvY2F0aW9uIiwicG9zaXRpb24iLCJfX2lzRmxhc2hMaXRlIiwiaGFzUHJpb3JpdHkiLCJzd2xpdmVjb25uZWN0IiwiYWxsb3dTY3JpcHRBY2Nlc3MiLCJfX29uRmxhc2hJbml0aWFsaXplZCIsInNldENhbGxlclVybCIsInNldERlYnVnIiwiV0VCX1NPQ0tFVF9ERUJVRyIsIl9fb25GbGFzaEV2ZW50IiwicmVjZWl2ZUV2ZW50cyIsIndlYlNvY2tldElkIiwiX19sb2ciLCJfX2Vycm9yIiwidGFzayIsIm1pbWVUeXBlIiwiZmlsZW5hbWUiLCJYSFIiLCJzZW5kQnVmZmVyIiwicG9zdCIsInN0YXRlQ2hhbmdlIiwicG9zdGluZyIsInNlbmRYSFIiLCJyZXEiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiY29udGVudFR5cGUiLCJ1c2VzWERvbVJlcSIsInNvY2tldFByb3RvY29sIiwiaXNYUHJvdG9jb2wiLCJIVE1MRmlsZSIsImh0bWxmaWxlIiwiaWZyYW1lQyIsIkNvbGxlY3RHYXJiYWdlIiwiWEhSUG9sbGluZyIsImFib3J0IiwiSlNPTlBQb2xsaW5nIiwibXNnIiwiaW5kaWNhdG9yIiwiaW5pdElmcmFtZSIsImlmcmFtZUlkIiwibGFzdERhdGEiLCJ1cFRvRGF0ZSIsInVwZGF0ZWRNb2R1bGVzIiwiZmFpbCIsInJlbmV3ZWRNb2R1bGVzIiwidW5hY2NlcHRlZE1vZHVsZXMiXSwibWFwcGluZ3MiOiJDQUFTLFNBQVVBLEdDTW5CLFFBQUFDLEdBQUFDLEdBQ0EsR0FBQUMsR0FBQUMsU0FBQUMscUJBQUEsV0FDQUMsRUFBQUYsU0FBQUcsY0FBQSxTQUNBRCxHQUFBRSxLQUFBLGtCQUNBRixFQUFBRyxRQUFBLFFBQ0FILEVBQUFJLElBQUFDLEVBQUFDLEVBQUEsR0FBQVYsRUFBQSxJQUFBVyxFQUFBLGlCQUNBVixFQUFBVyxZQUFBUixHQUdBLFFBQUFTLEdBQUFDLEdBQ0Esc0JBQUFDLGdCQUNBLE1BQUFELEdBQUEsR0FBQUUsT0FBQSxzQkFDQSxLQUNBLEdBQUFDLEdBQUEsR0FBQUYsZ0JBQ0FHLEVBQUFU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LEdBQ0FXLFFBQUFDLEtBQUEsWUFBQVosTUFJQTYyRyxHQUFBLElBQUFBLEVBQUExMEcsUUFHQXhCLFFBQUFvdEUsSUFBQSwwQkFDQThvQyxFQUFBOXZHLFFBQUEsU0FBQS9HLEdBQ0FXLFFBQUFvdEUsSUFBQSxZQUFBL3RFLE1BSkFXLFFBQUFvdEUsSUFBQSw4QkFPQTJvQyxLQUNBLzFHLFFBQUFvdEUsSUFBQSwrQkF6Q0FwdEUsUUFBQUMsS0FBQSwyREFDQUQsU0FBQUMsS0FBQSxxRUErQ0E4RixFQUFBTixPQUFBTSxpQkFBQSxTQUFBczdCLEVBQUFqUCxHQUNBM3NCLE9BQUFNLGlCQUFBczdCLEVBQUFqUCxHQUFBLElBQ0UsU0FBQWlQLEVBQUFqUCxHQUNGM3NCLE9BQUFxRyxZQUFBLEtBQUF1MUIsRUFBQWpQLEdBRUFyc0IsR0FBQSxtQkFBQTZwQixHQUNBLGdCQUFBQSxHQUFBcnRCLE1BQUEsSUFBQXF0QixFQUFBcnRCLEtBQUEzQyxRQUFBLHNCQUNBazJHLEVBQUFsbUYsRUFBQXJ0QixLQUNBd3pHLEtBQUEsU0FBQXZ5RyxFQUFBL0QsSUFBQVgsV0FDQWtCLFFBQUFvdEUsSUFBQSwrQ0FDQXJyRSxRQUlBL0IsUUFBQW90RSxJQUFBIiwiZmlsZSI6Im1haW4uZW50cnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdHZhciBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayA9IHRoaXNbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdO1xuLyoqKioqKi8gXHR0aGlzW1wid2VicGFja0hvdFVwZGF0ZVwiXSA9IFx0XHRmdW5jdGlvbiB3ZWJwYWNrSG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHtcbi8qKioqKiovIFx0XHRcdFx0aG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuLyoqKioqKi8gXHRcdFx0XHRpZihwYXJlbnRIb3RVcGRhdGVDYWxsYmFjaykgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4vKioqKioqLyBcdFx0XHRcdHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbi8qKioqKiovIFx0XHRcdFx0c2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0Jztcbi8qKioqKiovIFx0XHRcdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuLyoqKioqKi8gXHRcdFx0XHRzY3JpcHQuc3JjID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc1wiO1xuLyoqKioqKi8gXHRcdFx0XHRoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gaG90RG93bmxvYWRNYW5pZmVzdChjYWxsYmFjaykge1xuLyoqKioqKi8gXHRcdFx0XHRpZih0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIpXG4vKioqKioqLyBcdFx0XHRcdFx0cmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydFwiKSk7XG4vKioqKioqLyBcdFx0XHRcdHRyeSB7XG4vKioqKioqLyBcdFx0XHRcdFx0dmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbi8qKioqKiovIFx0XHRcdFx0XHR2YXIgcmVxdWVzdFBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzb25cIjtcbi8qKioqKiovIFx0XHRcdFx0XHRyZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgcmVxdWVzdFBhdGgsIHRydWUpO1xuLyoqKioqKi8gXHRcdFx0XHRcdHJlcXVlc3QudGltZW91dCA9IDEwMDAwO1xuLyoqKioqKi8gXHRcdFx0XHRcdHJlcXVlc3Quc2VuZChudWxsKTtcbi8qKioqKiovIFx0XHRcdFx0fSBjYXRjaChlcnIpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRyZXR1cm4gY2FsbGJhY2soZXJyKTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRyZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdFx0XHRcdGlmKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkgcmV0dXJuO1xuLyoqKioqKi8gXHRcdFx0XHRcdGlmKHJlcXVlc3Quc3RhdHVzID09PSAwKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHQvLyB0aW1lb3V0XG4vKioqKioqLyBcdFx0XHRcdFx0XHRjYWxsYmFjayhuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiB0aW1lZCBvdXQuXCIpKTtcbi8qKioqKiovIFx0XHRcdFx0XHR9IGVsc2UgaWYocmVxdWVzdC5zdGF0dXMgPT09IDQwNCkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0Ly8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuLyoqKioqKi8gXHRcdFx0XHRcdFx0Y2FsbGJhY2soKTtcbi8qKioqKiovIFx0XHRcdFx0XHR9IGVsc2UgaWYocmVxdWVzdC5zdGF0dXMgIT09IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyAhPT0gMzA0KSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHQvLyBvdGhlciBmYWlsdXJlXG4vKioqKioqLyBcdFx0XHRcdFx0XHRjYWxsYmFjayhuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiBmYWlsZWQuXCIpKTtcbi8qKioqKiovIFx0XHRcdFx0XHR9IGVsc2Uge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0Ly8gc3VjY2Vzc1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0dHJ5IHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0dmFyIHVwZGF0ZSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0fSBjYXRjaChlKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGNhbGxiYWNrKGUpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRyZXR1cm47XG4vKioqKioqLyBcdFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdFx0XHRjYWxsYmFjayhudWxsLCB1cGRhdGUpO1xuLyoqKioqKi8gXHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0fTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHR2YXIgaG90QXBwbHlPblVwZGF0ZSA9IHRydWU7XG4vKioqKioqLyBcdHZhciBob3RDdXJyZW50SGFzaCA9IFwiYjViNjRhNTVhOTIwMjNkZWNhNjhcIjtcbi8qKioqKiovIFx0dmFyIGhvdEN1cnJlbnRNb2R1bGVEYXRhID0ge307XG4vKioqKioqLyBcdHZhciBob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuLyoqKioqKi9cbi8qKioqKiovIFx0ZnVuY3Rpb24gaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkge1xuLyoqKioqKi8gXHRcdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdGlmKCFtZSkgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX187XG4vKioqKioqLyBcdFx0dmFyIGZuID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuLyoqKioqKi8gXHRcdFx0aWYobWUuaG90LmFjdGl2ZSkge1xuLyoqKioqKi8gXHRcdFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpIDwgMClcbi8qKioqKiovIFx0XHRcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcbi8qKioqKiovIFx0XHRcdFx0XHRpZihtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpIDwgMClcbi8qKioqKiovIFx0XHRcdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG4vKioqKioqLyBcdFx0XHRcdH0gZWxzZSBob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0XHR9IGVsc2Uge1xuLyoqKioqKi8gXHRcdFx0XHRjb25zb2xlLndhcm4oXCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyByZXF1ZXN0ICsgXCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICsgbW9kdWxlSWQpO1xuLyoqKioqKi8gXHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18ocmVxdWVzdCk7XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0XHRmb3IodmFyIG5hbWUgaW4gX193ZWJwYWNrX3JlcXVpcmVfXykge1xuLyoqKioqKi8gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9fd2VicGFja19yZXF1aXJlX18sIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRcdGZuW25hbWVdID0gX193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Zm4uZSA9IGZ1bmN0aW9uKGNodW5rSWQsIGNhbGxiYWNrKSB7XG4vKioqKioqLyBcdFx0XHRpZihob3RTdGF0dXMgPT09IFwicmVhZHlcIilcbi8qKioqKiovIFx0XHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbi8qKioqKiovIFx0XHRcdGhvdENodW5rc0xvYWRpbmcrKztcbi8qKioqKiovIFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uZShjaHVua0lkLCBmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHRcdFx0dHJ5IHtcbi8qKioqKiovIFx0XHRcdFx0XHRjYWxsYmFjay5jYWxsKG51bGwsIGZuKTtcbi8qKioqKiovIFx0XHRcdFx0fSBmaW5hbGx5IHtcbi8qKioqKiovIFx0XHRcdFx0XHRmaW5pc2hDaHVua0xvYWRpbmcoKTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRmdW5jdGlvbiBmaW5pc2hDaHVua0xvYWRpbmcoKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZy0tO1xuLyoqKioqKi8gXHRcdFx0XHRcdGlmKGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmKCFob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0pIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4vKioqKioqLyBcdFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZihob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4vKioqKioqLyBcdFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0cmV0dXJuIGZuO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHRmdW5jdGlvbiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpIHtcbi8qKioqKiovIFx0XHR2YXIgaG90ID0ge1xuLyoqKioqKi8gXHRcdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuLyoqKioqKi8gXHRcdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcbi8qKioqKiovIFx0XHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG4vKioqKioqLyBcdFx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG4vKioqKioqL1xuLyoqKioqKi8gXHRcdFx0Ly8gTW9kdWxlIEFQSVxuLyoqKioqKi8gXHRcdFx0YWN0aXZlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0YWNjZXB0OiBmdW5jdGlvbihkZXAsIGNhbGxiYWNrKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKHR5cGVvZiBkZXAgPT09IFwidW5kZWZpbmVkXCIpXG4vKioqKioqLyBcdFx0XHRcdFx0aG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuLyoqKioqKi8gXHRcdFx0XHRlbHNlIGlmKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIilcbi8qKioqKiovIFx0XHRcdFx0XHRob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcbi8qKioqKiovIFx0XHRcdFx0ZWxzZSBpZih0eXBlb2YgZGVwID09PSBcIm51bWJlclwiKVxuLyoqKioqKi8gXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrO1xuLyoqKioqKi8gXHRcdFx0XHRlbHNlIGZvcih2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4vKioqKioqLyBcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2s7XG4vKioqKioqLyBcdFx0XHR9LFxuLyoqKioqKi8gXHRcdFx0ZGVjbGluZTogZnVuY3Rpb24oZGVwKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKHR5cGVvZiBkZXAgPT09IFwidW5kZWZpbmVkXCIpXG4vKioqKioqLyBcdFx0XHRcdFx0aG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuLyoqKioqKi8gXHRcdFx0XHRlbHNlIGlmKHR5cGVvZiBkZXAgPT09IFwibnVtYmVyXCIpXG4vKioqKioqLyBcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcbi8qKioqKiovIFx0XHRcdFx0ZWxzZSBmb3IodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuLyoqKioqKi8gXHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG4vKioqKioqLyBcdFx0XHR9LFxuLyoqKioqKi8gXHRcdFx0ZGlzcG9zZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbi8qKioqKiovIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4vKioqKioqLyBcdFx0XHR9LFxuLyoqKioqKi8gXHRcdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4vKioqKioqLyBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuLyoqKioqKi8gXHRcdFx0fSxcbi8qKioqKiovIFx0XHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG4vKioqKioqLyBcdFx0XHRcdGlmKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbi8qKioqKiovIFx0XHRcdH0sXG4vKioqKioqL1xuLyoqKioqKi8gXHRcdFx0Ly8gTWFuYWdlbWVudCBBUElcbi8qKioqKiovIFx0XHRcdGNoZWNrOiBob3RDaGVjayxcbi8qKioqKiovIFx0XHRcdGFwcGx5OiBob3RBcHBseSxcbi8qKioqKiovIFx0XHRcdHN0YXR1czogZnVuY3Rpb24obCkge1xuLyoqKioqKi8gXHRcdFx0XHRpZighbCkgcmV0dXJuIGhvdFN0YXR1cztcbi8qKioqKiovIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbi8qKioqKiovIFx0XHRcdH0sXG4vKioqKioqLyBcdFx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4vKioqKioqLyBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4vKioqKioqLyBcdFx0XHR9LFxuLyoqKioqKi8gXHRcdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgaWR4ID0gaG90U3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcbi8qKioqKiovIFx0XHRcdFx0aWYoaWR4ID49IDApIGhvdFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuLyoqKioqKi8gXHRcdFx0fSxcbi8qKioqKiovXG4vKioqKioqLyBcdFx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcbi8qKioqKiovIFx0XHRcdGRhdGE6IGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFx0cmV0dXJuIGhvdDtcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0dmFyIGhvdFN0YXR1c0hhbmRsZXJzID0gW107XG4vKioqKioqLyBcdHZhciBob3RTdGF0dXMgPSBcImlkbGVcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdFNldFN0YXR1cyhuZXdTdGF0dXMpIHtcbi8qKioqKiovIFx0XHRob3RTdGF0dXMgPSBuZXdTdGF0dXM7XG4vKioqKioqLyBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGhvdFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuLyoqKioqKi8gXHRcdFx0aG90U3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyB3aGlsZSBkb3dubG9hZGluZ1xuLyoqKioqKi8gXHR2YXIgaG90V2FpdGluZ0ZpbGVzID0gMDtcbi8qKioqKiovIFx0dmFyIGhvdENodW5rc0xvYWRpbmcgPSAwO1xuLyoqKioqKi8gXHR2YXIgaG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4vKioqKioqLyBcdHZhciBob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuLyoqKioqKi8gXHR2YXIgaG90QXZhaWxpYmxlRmlsZXNNYXAgPSB7fTtcbi8qKioqKiovIFx0dmFyIGhvdENhbGxiYWNrO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHVwZGF0ZSBpbmZvXG4vKioqKioqLyBcdHZhciBob3RVcGRhdGUsIGhvdFVwZGF0ZU5ld0hhc2g7XG4vKioqKioqL1xuLyoqKioqKi8gXHRmdW5jdGlvbiBob3RDaGVjayhhcHBseSwgY2FsbGJhY2spIHtcbi8qKioqKiovIFx0XHRpZihob3RTdGF0dXMgIT09IFwiaWRsZVwiKSB0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcbi8qKioqKiovIFx0XHRpZih0eXBlb2YgYXBwbHkgPT09IFwiZnVuY3Rpb25cIikge1xuLyoqKioqKi8gXHRcdFx0aG90QXBwbHlPblVwZGF0ZSA9IGZhbHNlO1xuLyoqKioqKi8gXHRcdFx0Y2FsbGJhY2sgPSBhcHBseTtcbi8qKioqKiovIFx0XHR9IGVsc2Uge1xuLyoqKioqKi8gXHRcdFx0aG90QXBwbHlPblVwZGF0ZSA9IGFwcGx5O1xuLyoqKioqKi8gXHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbihlcnIpIHsgaWYoZXJyKSB0aHJvdyBlcnIgfTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0aG90U2V0U3RhdHVzKFwiY2hlY2tcIik7XG4vKioqKioqLyBcdFx0aG90RG93bmxvYWRNYW5pZmVzdChmdW5jdGlvbihlcnIsIHVwZGF0ZSkge1xuLyoqKioqKi8gXHRcdFx0aWYoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcbi8qKioqKiovIFx0XHRcdGlmKCF1cGRhdGUpIHtcbi8qKioqKiovIFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbi8qKioqKiovIFx0XHRcdFx0Y2FsbGJhY2sobnVsbCwgbnVsbCk7XG4vKioqKioqLyBcdFx0XHRcdHJldHVybjtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuLyoqKioqKi8gXHRcdFx0aG90QXZhaWxpYmxlRmlsZXNNYXAgPSB7fTtcbi8qKioqKiovIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuLyoqKioqKi8gXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHVwZGF0ZS5jLmxlbmd0aDsgaSsrKVxuLyoqKioqKi8gXHRcdFx0XHRob3RBdmFpbGlibGVGaWxlc01hcFt1cGRhdGUuY1tpXV0gPSB0cnVlO1xuLyoqKioqKi8gXHRcdFx0aG90VXBkYXRlTmV3SGFzaCA9IHVwZGF0ZS5oO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4vKioqKioqLyBcdFx0XHRob3RDYWxsYmFjayA9IGNhbGxiYWNrO1xuLyoqKioqKi8gXHRcdFx0aG90VXBkYXRlID0ge307XG4vKioqKioqLyBcdFx0XHR2YXIgY2h1bmtJZCA9IDA7IHtcbi8qKioqKiovIFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRpZihob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xuLyoqKioqKi8gXHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fSk7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4vKioqKioqLyBcdFx0aWYoIWhvdEF2YWlsaWJsZUZpbGVzTWFwW2NodW5rSWRdIHx8ICFob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybjtcbi8qKioqKiovIFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IGZhbHNlO1xuLyoqKioqKi8gXHRcdGZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbi8qKioqKiovIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4vKioqKioqLyBcdFx0XHRcdGhvdFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdGlmKC0taG90V2FpdGluZ0ZpbGVzID09PSAwICYmIGhvdENodW5rc0xvYWRpbmcgPT09IDApIHtcbi8qKioqKiovIFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbi8qKioqKiovIFx0XHRpZighaG90QXZhaWxpYmxlRmlsZXNNYXBbY2h1bmtJZF0pIHtcbi8qKioqKiovIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4vKioqKioqLyBcdFx0fSBlbHNlIHtcbi8qKioqKiovIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbi8qKioqKiovIFx0XHRcdGhvdFdhaXRpbmdGaWxlcysrO1xuLyoqKioqKi8gXHRcdFx0aG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdFVwZGF0ZURvd25sb2FkZWQoKSB7XG4vKioqKioqLyBcdFx0aG90U2V0U3RhdHVzKFwicmVhZHlcIik7XG4vKioqKioqLyBcdFx0dmFyIGNhbGxiYWNrID0gaG90Q2FsbGJhY2s7XG4vKioqKioqLyBcdFx0aG90Q2FsbGJhY2sgPSBudWxsO1xuLyoqKioqKi8gXHRcdGlmKCFjYWxsYmFjaykgcmV0dXJuO1xuLyoqKioqKi8gXHRcdGlmKGhvdEFwcGx5T25VcGRhdGUpIHtcbi8qKioqKiovIFx0XHRcdGhvdEFwcGx5KGhvdEFwcGx5T25VcGRhdGUsIGNhbGxiYWNrKTtcbi8qKioqKiovIFx0XHR9IGVsc2Uge1xuLyoqKioqKi8gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuLyoqKioqKi8gXHRcdFx0Zm9yKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbi8qKioqKiovIFx0XHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2goK2lkKTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0Y2FsbGJhY2sobnVsbCwgb3V0ZGF0ZWRNb2R1bGVzKTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4vKioqKioqLyBcdFx0aWYoaG90U3RhdHVzICE9PSBcInJlYWR5XCIpIHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcbi8qKioqKiovIFx0XHRpZih0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKSB7XG4vKioqKioqLyBcdFx0XHRjYWxsYmFjayA9IG9wdGlvbnM7XG4vKioqKioqLyBcdFx0XHRvcHRpb25zID0ge307XG4vKioqKioqLyBcdFx0fSBlbHNlIGlmKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMgPT09IFwib2JqZWN0XCIpIHtcbi8qKioqKiovIFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oZXJyKSB7IGlmKGVycikgdGhyb3cgZXJyIH07XG4vKioqKioqLyBcdFx0fSBlbHNlIHtcbi8qKioqKiovIFx0XHRcdG9wdGlvbnMgPSB7fTtcbi8qKioqKiovIFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oZXJyKSB7IGlmKGVycikgdGhyb3cgZXJyIH07XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdFxuLyoqKioqKi8gXHRcdGZ1bmN0aW9uIGdldEFmZmVjdGVkU3R1ZmYobW9kdWxlKSB7XG4vKioqKioqLyBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW21vZHVsZV07XG4vKioqKioqLyBcdFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcbi8qKioqKiovIFx0XHRcdFxuLyoqKioqKi8gXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG4vKioqKioqLyBcdFx0XHR3aGlsZShxdWV1ZS5sZW5ndGggPiAwKSB7XG4vKioqKioqLyBcdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0XHRcdGlmKCFtb2R1bGUgfHwgbW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkKVxuLyoqKioqKi8gXHRcdFx0XHRcdGNvbnRpbnVlO1xuLyoqKioqKi8gXHRcdFx0XHRpZihtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRyZXR1cm4gbmV3IEVycm9yKFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgKyBtb2R1bGVJZCk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0aWYobW9kdWxlSWQgPT09IDApIHtcbi8qKioqKiovIFx0XHRcdFx0XHRyZXR1cm47XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XG4vKioqKioqLyBcdFx0XHRcdFx0dmFyIHBhcmVudCA9IGluc3RhbGxlZE1vZHVsZXNbcGFyZW50SWRdO1xuLyoqKioqKi8gXHRcdFx0XHRcdGlmKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0cmV0dXJuIG5ldyBFcnJvcihcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArIG1vZHVsZUlkICsgXCIgaW4gXCIgKyBwYXJlbnRJZCk7XG4vKioqKioqLyBcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRcdGlmKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSA+PSAwKSBjb250aW51ZTtcbi8qKioqKiovIFx0XHRcdFx0XHRpZihwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuLyoqKioqKi8gXHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuLyoqKioqKi8gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcbi8qKioqKiovIFx0XHRcdFx0XHRxdWV1ZS5wdXNoKHBhcmVudElkKTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gW291dGRhdGVkTW9kdWxlcywgb3V0ZGF0ZWREZXBlbmRlbmNpZXNdO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgaXRlbSA9IGJbaV07XG4vKioqKioqLyBcdFx0XHRcdGlmKGEuaW5kZXhPZihpdGVtKSA8IDApXG4vKioqKioqLyBcdFx0XHRcdFx0YS5wdXNoKGl0ZW0pO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcbi8qKioqKiovIFx0XHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG4vKioqKioqLyBcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG4vKioqKioqLyBcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuLyoqKioqKi8gXHRcdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG4vKioqKioqLyBcdFx0Zm9yKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbi8qKioqKiovIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSAraWQ7XG4vKioqKioqLyBcdFx0XHRcdHZhciByZXN1bHQgPSBnZXRBZmZlY3RlZFN0dWZmKG1vZHVsZUlkKTtcbi8qKioqKiovIFx0XHRcdFx0aWYoIXJlc3VsdCkge1xuLyoqKioqKi8gXHRcdFx0XHRcdGlmKG9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcbi8qKioqKiovIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuLyoqKioqKi8gXHRcdFx0XHRcdGhvdFNldFN0YXR1cyhcImFib3J0XCIpO1xuLyoqKioqKi8gXHRcdFx0XHRcdHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoXCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiKSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0aWYocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcbi8qKioqKiovIFx0XHRcdFx0XHRyZXR1cm4gY2FsbGJhY2socmVzdWx0KTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IGhvdFVwZGF0ZVttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0WzBdKTtcbi8qKioqKiovIFx0XHRcdFx0Zm9yKHZhciBtb2R1bGVJZCBpbiByZXN1bHRbMV0pIHtcbi8qKioqKiovIFx0XHRcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVzdWx0WzFdLCBtb2R1bGVJZCkpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLCByZXN1bHRbMV1bbW9kdWxlSWRdKTtcbi8qKioqKiovIFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cbi8qKioqKiovIFx0XHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG4vKioqKioqLyBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IG91dGRhdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuLyoqKioqKi8gXHRcdFx0dmFyIG1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2ldO1xuLyoqKioqKi8gXHRcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gJiYgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWQpXG4vKioqKioqLyBcdFx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcbi8qKioqKiovIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0XHRcdGVycm9ySGFuZGxlcjogaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcbi8qKioqKiovIFx0XHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2Vcbi8qKioqKiovIFx0XHRob3RTZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuLyoqKioqKi8gXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuLyoqKioqKi8gXHRcdHdoaWxlKHF1ZXVlLmxlbmd0aCA+IDApIHtcbi8qKioqKiovIFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuLyoqKioqKi8gXHRcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdFx0aWYoIW1vZHVsZSkgY29udGludWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdFx0dmFyIGRhdGEgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcbi8qKioqKiovIFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG4vKioqKioqLyBcdFx0XHRcdHZhciBjYiA9IGRpc3Bvc2VIYW5kbGVyc1tqXVxuLyoqKioqKi8gXHRcdFx0XHRjYihkYXRhKTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXSA9IGRhdGE7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcbi8qKioqKiovIFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG4vKioqKioqLyBcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cbi8qKioqKiovIFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbi8qKioqKiovIFx0XHRcdFx0dmFyIGNoaWxkID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuLyoqKioqKi8gXHRcdFx0XHRpZighY2hpbGQpIGNvbnRpbnVlO1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgaWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcbi8qKioqKiovIFx0XHRcdFx0aWYoaWR4ID49IDApIHtcbi8qKioqKiovIFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuLyoqKioqKi8gXHRcdFx0XHRcdGlmKGNoaWxkLnBhcmVudHMubGVuZ3RoID09PSAwICYmIGNoaWxkLmhvdCAmJiBjaGlsZC5ob3QuX2Rpc3Bvc2VIYW5kbGVycyAmJiBjaGlsZC5ob3QuX2Rpc3Bvc2VIYW5kbGVycy5sZW5ndGggPiAwKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHQvLyBDaGlsZCBoYXMgZGlzcG9zZSBoYW5kbGVycyBhbmQgbm8gbW9yZSByZWZlcmVuY2VzLCBkaXNwb3NlIGl0IHRvb1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0cXVldWUucHVzaChjaGlsZC5pZCk7XG4vKioqKioqLyBcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuLyoqKioqKi8gXHRcdGZvcih2YXIgbW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbi8qKioqKiovIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7XG4vKioqKioqLyBcdFx0XHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHRcdFx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcbi8qKioqKiovIFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuLyoqKioqKi8gXHRcdFx0XHRcdHZhciBpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcbi8qKioqKiovIFx0XHRcdFx0XHRpZihpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBOb3QgaW4gXCJhcHBseVwiIHBoYXNlXG4vKioqKioqLyBcdFx0aG90U2V0U3RhdHVzKFwiYXBwbHlcIik7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdGhvdEN1cnJlbnRIYXNoID0gaG90VXBkYXRlTmV3SGFzaDtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXG4vKioqKioqLyBcdFx0Zm9yKHZhciBtb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG4vKioqKioqLyBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXBwbGllZFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG4vKioqKioqLyBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuLyoqKioqKi8gXHRcdHZhciBlcnJvciA9IG51bGw7XG4vKioqKioqLyBcdFx0Zm9yKHZhciBtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuLyoqKioqKi8gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcbi8qKioqKiovIFx0XHRcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcbi8qKioqKiovIFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXTtcbi8qKioqKiovIFx0XHRcdFx0XHR2YXIgY2IgPSBtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcbi8qKioqKiovIFx0XHRcdFx0XHRpZihjYWxsYmFja3MuaW5kZXhPZihjYikgPj0gMCkgY29udGludWU7XG4vKioqKioqLyBcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goY2IpO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbi8qKioqKiovIFx0XHRcdFx0XHR2YXIgY2IgPSBjYWxsYmFja3NbaV07XG4vKioqKioqLyBcdFx0XHRcdFx0dHJ5IHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGNiKG91dGRhdGVkRGVwZW5kZW5jaWVzKTtcbi8qKioqKiovIFx0XHRcdFx0XHR9IGNhdGNoKGVycikge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYoIWVycm9yKVxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRlcnJvciA9IGVycjtcbi8qKioqKiovIFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG4vKioqKioqLyBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuLyoqKioqKi8gXHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbaV07XG4vKioqKioqLyBcdFx0XHR2YXIgbW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcbi8qKioqKiovIFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHRcdHRyeSB7XG4vKioqKioqLyBcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuLyoqKioqKi8gXHRcdFx0fSBjYXRjaChlcnIpIHtcbi8qKioqKiovIFx0XHRcdFx0aWYodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbi8qKioqKiovIFx0XHRcdFx0XHR0cnkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyKTtcbi8qKioqKiovIFx0XHRcdFx0XHR9IGNhdGNoKGVycikge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYoIWVycm9yKVxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRlcnJvciA9IGVycjtcbi8qKioqKiovIFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdH0gZWxzZSBpZighZXJyb3IpXG4vKioqKioqLyBcdFx0XHRcdFx0ZXJyb3IgPSBlcnI7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuLyoqKioqKi8gXHRcdGlmKGVycm9yKSB7XG4vKioqKioqLyBcdFx0XHRob3RTZXRTdGF0dXMoXCJmYWlsXCIpO1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4vKioqKioqLyBcdFx0Y2FsbGJhY2sobnVsbCwgb3V0ZGF0ZWRNb2R1bGVzKTtcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGhvdDogaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSxcbi8qKioqKiovIFx0XHRcdHBhcmVudHM6IGhvdEN1cnJlbnRQYXJlbnRzLFxuLyoqKioqKi8gXHRcdFx0Y2hpbGRyZW46IFtdXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkpO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9idWlsZFwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX2hhc2hfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhvdEN1cnJlbnRIYXNoOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBob3RDcmVhdGVSZXF1aXJlKDApKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0X193ZWJwYWNrX3JlcXVpcmVfXygxODUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE4OCk7XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDYpO1xuXG5cbi8qKiovIH0sXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblx0XG5cdHZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblx0XG5cdHByb2Nlc3MubmV4dFRpY2sgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIGNhblNldEltbWVkaWF0ZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG5cdCAgICAmJiB3aW5kb3cuc2V0SW1tZWRpYXRlO1xuXHQgICAgdmFyIGNhbk11dGF0aW9uT2JzZXJ2ZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuXHQgICAgJiYgd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXI7XG5cdCAgICB2YXIgY2FuUG9zdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG5cdCAgICAmJiB3aW5kb3cucG9zdE1lc3NhZ2UgJiYgd2luZG93LmFkZEV2ZW50TGlzdGVuZXJcblx0ICAgIDtcblx0XG5cdCAgICBpZiAoY2FuU2V0SW1tZWRpYXRlKSB7XG5cdCAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmKSB7IHJldHVybiB3aW5kb3cuc2V0SW1tZWRpYXRlKGYpIH07XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIHF1ZXVlID0gW107XG5cdFxuXHQgICAgaWYgKGNhbk11dGF0aW9uT2JzZXJ2ZXIpIHtcblx0ICAgICAgICB2YXIgaGlkZGVuRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0ICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBxdWV1ZUxpc3QgPSBxdWV1ZS5zbGljZSgpO1xuXHQgICAgICAgICAgICBxdWV1ZS5sZW5ndGggPSAwO1xuXHQgICAgICAgICAgICBxdWV1ZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcblx0ICAgICAgICAgICAgICAgIGZuKCk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGhpZGRlbkRpdiwgeyBhdHRyaWJ1dGVzOiB0cnVlIH0pO1xuXHRcblx0ICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcblx0ICAgICAgICAgICAgaWYgKCFxdWV1ZS5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgICAgIGhpZGRlbkRpdi5zZXRBdHRyaWJ1dGUoJ3llcycsICdubycpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHF1ZXVlLnB1c2goZm4pO1xuXHQgICAgICAgIH07XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKGNhblBvc3QpIHtcblx0ICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZ1bmN0aW9uIChldikge1xuXHQgICAgICAgICAgICB2YXIgc291cmNlID0gZXYuc291cmNlO1xuXHQgICAgICAgICAgICBpZiAoKHNvdXJjZSA9PT0gd2luZG93IHx8IHNvdXJjZSA9PT0gbnVsbCkgJiYgZXYuZGF0YSA9PT0gJ3Byb2Nlc3MtdGljaycpIHtcblx0ICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIGZuKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LCB0cnVlKTtcblx0XG5cdCAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG5cdCAgICAgICAgICAgIHF1ZXVlLnB1c2goZm4pO1xuXHQgICAgICAgICAgICB3aW5kb3cucG9zdE1lc3NhZ2UoJ3Byb2Nlc3MtdGljaycsICcqJyk7XG5cdCAgICAgICAgfTtcblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcblx0ICAgICAgICBzZXRUaW1lb3V0KGZuLCAwKTtcblx0ICAgIH07XG5cdH0pKCk7XG5cdFxuXHRwcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xuXHRwcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xuXHRwcm9jZXNzLmVudiA9IHt9O1xuXHRwcm9jZXNzLmFyZ3YgPSBbXTtcblx0XG5cdGZ1bmN0aW9uIG5vb3AoKSB7fVxuXHRcblx0cHJvY2Vzcy5vbiA9IG5vb3A7XG5cdHByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xuXHRwcm9jZXNzLm9uY2UgPSBub29wO1xuXHRwcm9jZXNzLm9mZiA9IG5vb3A7XG5cdHByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xuXHRwcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5cdHByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cdFxuXHRwcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xuXHR9O1xuXHRcblx0Ly8gVE9ETyhzaHR5bG1hbilcblx0cHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcblx0cHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcblx0ICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG5cdH07XG5cblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBpbnZhcmlhbnRcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qKlxuXHQgKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG5cdCAqXG5cdCAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG5cdCAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuXHQgKiBleHBlY3RpbmcuXG5cdCAqXG5cdCAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG5cdCAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cblx0ICovXG5cdFxuXHR2YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcblx0ICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgaWYgKCFjb25kaXRpb24pIHtcblx0ICAgIHZhciBlcnJvcjtcblx0ICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICBlcnJvciA9IG5ldyBFcnJvcihcblx0ICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG5cdCAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuXHQgICAgICApO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG5cdCAgICAgIHZhciBhcmdJbmRleCA9IDA7XG5cdCAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuXHQgICAgICAgICdJbnZhcmlhbnQgVmlvbGF0aW9uOiAnICtcblx0ICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuXHQgICAgICApO1xuXHQgICAgfVxuXHRcblx0ICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcblx0ICAgIHRocm93IGVycm9yO1xuXHQgIH1cblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgT2JqZWN0LmFzc2lnblxuXHQgKi9cblx0XG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1vYmplY3QuYXNzaWduXG5cdFxuXHRmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2VzKSB7XG5cdCAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG5cdCAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIHRhcmdldCBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQnKTtcblx0ICB9XG5cdFxuXHQgIHZhciB0byA9IE9iamVjdCh0YXJnZXQpO1xuXHQgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cdFxuXHQgIGZvciAodmFyIG5leHRJbmRleCA9IDE7IG5leHRJbmRleCA8IGFyZ3VtZW50cy5sZW5ndGg7IG5leHRJbmRleCsrKSB7XG5cdCAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3VtZW50c1tuZXh0SW5kZXhdO1xuXHQgICAgaWYgKG5leHRTb3VyY2UgPT0gbnVsbCkge1xuXHQgICAgICBjb250aW51ZTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgZnJvbSA9IE9iamVjdChuZXh0U291cmNlKTtcblx0XG5cdCAgICAvLyBXZSBkb24ndCBjdXJyZW50bHkgc3VwcG9ydCBhY2Nlc3NvcnMgbm9yIHByb3hpZXMuIFRoZXJlZm9yZSB0aGlzXG5cdCAgICAvLyBjb3B5IGNhbm5vdCB0aHJvdy4gSWYgd2UgZXZlciBzdXBwb3J0ZWQgdGhpcyB0aGVuIHdlIG11c3QgaGFuZGxlXG5cdCAgICAvLyBleGNlcHRpb25zIGFuZCBzaWRlLWVmZmVjdHMuIFdlIGRvbid0IHN1cHBvcnQgc3ltYm9scyBzbyB0aGV5IHdvbid0XG5cdCAgICAvLyBiZSB0cmFuc2ZlcnJlZC5cblx0XG5cdCAgICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHQgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdCAgICAgICAgdG9ba2V5XSA9IGZyb21ba2V5XTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHRvO1xuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBhc3NpZ247XG5cblxuLyoqKi8gfSxcbi8qIDQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFbGVtZW50XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgUmVhY3RDb250ZXh0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NSk7XG5cdHZhciBSZWFjdEN1cnJlbnRPd25lciA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXHRcblx0dmFyIHdhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXHRcblx0dmFyIFJFU0VSVkVEX1BST1BTID0ge1xuXHQgIGtleTogdHJ1ZSxcblx0ICByZWY6IHRydWVcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBXYXJuIGZvciBtdXRhdGlvbnMuXG5cdCAqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBAcGFyYW0ge29iamVjdH0gb2JqZWN0XG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcblx0ICovXG5cdGZ1bmN0aW9uIGRlZmluZVdhcm5pbmdQcm9wZXJ0eShvYmplY3QsIGtleSkge1xuXHQgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuXHRcblx0ICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG5cdCAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXHRcblx0ICAgIGdldDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIGlmICghdGhpcy5fc3RvcmUpIHtcblx0ICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gdGhpcy5fc3RvcmVba2V5XTtcblx0ICAgIH0sXG5cdFxuXHQgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcblx0ICAgICAgICBmYWxzZSxcblx0ICAgICAgICAnRG9uXFwndCBzZXQgdGhlICcgKyBrZXkgKyAnIHByb3BlcnR5IG9mIHRoZSBjb21wb25lbnQuICcgK1xuXHQgICAgICAgICdNdXRhdGUgdGhlIGV4aXN0aW5nIHByb3BzIG9iamVjdCBpbnN0ZWFkLidcblx0ICAgICAgKSA6IG51bGwpO1xuXHQgICAgICB0aGlzLl9zdG9yZVtrZXldID0gdmFsdWU7XG5cdCAgICB9XG5cdFxuXHQgIH0pO1xuXHR9XG5cdFxuXHQvKipcblx0ICogVGhpcyBpcyB1cGRhdGVkIHRvIHRydWUgaWYgdGhlIG1lbWJyYW5lIGlzIHN1Y2Nlc3NmdWxseSBjcmVhdGVkLlxuXHQgKi9cblx0dmFyIHVzZU11dGF0aW9uTWVtYnJhbmUgPSBmYWxzZTtcblx0XG5cdC8qKlxuXHQgKiBXYXJuIGZvciBtdXRhdGlvbnMuXG5cdCAqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuXHQgKi9cblx0ZnVuY3Rpb24gZGVmaW5lTXV0YXRpb25NZW1icmFuZShwcm90b3R5cGUpIHtcblx0ICB0cnkge1xuXHQgICAgdmFyIHBzZXVkb0Zyb3plblByb3BlcnRpZXMgPSB7XG5cdCAgICAgIHByb3BzOiB0cnVlXG5cdCAgICB9O1xuXHQgICAgZm9yICh2YXIga2V5IGluIHBzZXVkb0Zyb3plblByb3BlcnRpZXMpIHtcblx0ICAgICAgZGVmaW5lV2FybmluZ1Byb3BlcnR5KHByb3RvdHlwZSwga2V5KTtcblx0ICAgIH1cblx0ICAgIHVzZU11dGF0aW9uTWVtYnJhbmUgPSB0cnVlO1xuXHQgIH0gY2F0Y2ggKHgpIHtcblx0ICAgIC8vIElFIHdpbGwgZmFpbCBvbiBkZWZpbmVQcm9wZXJ0eVxuXHQgIH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIEJhc2UgY29uc3RydWN0b3IgZm9yIGFsbCBSZWFjdCBlbGVtZW50cy4gVGhpcyBpcyBvbmx5IHVzZWQgdG8gbWFrZSB0aGlzXG5cdCAqIHdvcmsgd2l0aCBhIGR5bmFtaWMgaW5zdGFuY2VvZiBjaGVjay4gTm90aGluZyBzaG91bGQgbGl2ZSBvbiB0aGlzIHByb3RvdHlwZS5cblx0ICpcblx0ICogQHBhcmFtIHsqfSB0eXBlXG5cdCAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gcmVmXG5cdCAqIEBwYXJhbSB7Kn0ga2V5XG5cdCAqIEBwYXJhbSB7Kn0gcHJvcHNcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHR2YXIgUmVhY3RFbGVtZW50ID0gZnVuY3Rpb24odHlwZSwga2V5LCByZWYsIG93bmVyLCBjb250ZXh0LCBwcm9wcykge1xuXHQgIC8vIEJ1aWx0LWluIHByb3BlcnRpZXMgdGhhdCBiZWxvbmcgb24gdGhlIGVsZW1lbnRcblx0ICB0aGlzLnR5cGUgPSB0eXBlO1xuXHQgIHRoaXMua2V5ID0ga2V5O1xuXHQgIHRoaXMucmVmID0gcmVmO1xuXHRcblx0ICAvLyBSZWNvcmQgdGhlIGNvbXBvbmVudCByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgdGhpcyBlbGVtZW50LlxuXHQgIHRoaXMuX293bmVyID0gb3duZXI7XG5cdFxuXHQgIC8vIFRPRE86IERlcHJlY2F0ZSB3aXRoQ29udGV4dCwgYW5kIHRoZW4gdGhlIGNvbnRleHQgYmVjb21lcyBhY2Nlc3NpYmxlXG5cdCAgLy8gdGhyb3VnaCB0aGUgb3duZXIuXG5cdCAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG5cdFxuXHQgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgIC8vIFRoZSB2YWxpZGF0aW9uIGZsYWcgYW5kIHByb3BzIGFyZSBjdXJyZW50bHkgbXV0YXRpdmUuIFdlIHB1dCB0aGVtIG9uXG5cdCAgICAvLyBhbiBleHRlcm5hbCBiYWNraW5nIHN0b3JlIHNvIHRoYXQgd2UgY2FuIGZyZWV6ZSB0aGUgd2hvbGUgb2JqZWN0LlxuXHQgICAgLy8gVGhpcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCBhIFdlYWtNYXAgb25jZSB0aGV5IGFyZSBpbXBsZW1lbnRlZCBpblxuXHQgICAgLy8gY29tbW9ubHkgdXNlZCBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMuXG5cdCAgICB0aGlzLl9zdG9yZSA9IHsgdmFsaWRhdGVkOiBmYWxzZSwgcHJvcHM6IHByb3BzIH07XG5cdFxuXHQgICAgLy8gV2UncmUgbm90IGFsbG93ZWQgdG8gc2V0IHByb3BzIGRpcmVjdGx5IG9uIHRoZSBvYmplY3Qgc28gd2UgZWFybHlcblx0ICAgIC8vIHJldHVybiBhbmQgcmVseSBvbiB0aGUgcHJvdG90eXBlIG1lbWJyYW5lIHRvIGZvcndhcmQgdG8gdGhlIGJhY2tpbmdcblx0ICAgIC8vIHN0b3JlLlxuXHQgICAgaWYgKHVzZU11dGF0aW9uTWVtYnJhbmUpIHtcblx0ICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgdGhpcy5wcm9wcyA9IHByb3BzO1xuXHR9O1xuXHRcblx0Ly8gV2UgaW50ZW50aW9uYWxseSBkb24ndCBleHBvc2UgdGhlIGZ1bmN0aW9uIG9uIHRoZSBjb25zdHJ1Y3RvciBwcm9wZXJ0eS5cblx0Ly8gUmVhY3RFbGVtZW50IHNob3VsZCBiZSBpbmRpc3Rpbmd1aXNoYWJsZSBmcm9tIGEgcGxhaW4gb2JqZWN0LlxuXHRSZWFjdEVsZW1lbnQucHJvdG90eXBlID0ge1xuXHQgIF9pc1JlYWN0RWxlbWVudDogdHJ1ZVxuXHR9O1xuXHRcblx0aWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuXHQgIGRlZmluZU11dGF0aW9uTWVtYnJhbmUoUmVhY3RFbGVtZW50LnByb3RvdHlwZSk7XG5cdH1cblx0XG5cdFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24odHlwZSwgY29uZmlnLCBjaGlsZHJlbikge1xuXHQgIHZhciBwcm9wTmFtZTtcblx0XG5cdCAgLy8gUmVzZXJ2ZWQgbmFtZXMgYXJlIGV4dHJhY3RlZFxuXHQgIHZhciBwcm9wcyA9IHt9O1xuXHRcblx0ICB2YXIga2V5ID0gbnVsbDtcblx0ICB2YXIgcmVmID0gbnVsbDtcblx0XG5cdCAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG5cdCAgICByZWYgPSBjb25maWcucmVmID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLnJlZjtcblx0ICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG5cdCAgICAgICAgY29uZmlnLmtleSAhPT0gbnVsbCxcblx0ICAgICAgICAnY3JlYXRlRWxlbWVudCguLi4pOiBFbmNvdW50ZXJlZCBjb21wb25lbnQgd2l0aCBhIGBrZXlgIG9mIG51bGwuIEluICcgK1xuXHQgICAgICAgICdhIGZ1dHVyZSB2ZXJzaW9uLCB0aGlzIHdpbGwgYmUgdHJlYXRlZCBhcyBlcXVpdmFsZW50IHRvIHRoZSBzdHJpbmcgJyArXG5cdCAgICAgICAgJ1xcJ251bGxcXCc7IGluc3RlYWQsIHByb3ZpZGUgYW4gZXhwbGljaXQga2V5IG9yIHVzZSB1bmRlZmluZWQuJ1xuXHQgICAgICApIDogbnVsbCk7XG5cdCAgICB9XG5cdCAgICAvLyBUT0RPOiBDaGFuZ2UgdGhpcyBiYWNrIHRvIGBjb25maWcua2V5ID09PSB1bmRlZmluZWRgXG5cdCAgICBrZXkgPSBjb25maWcua2V5ID09IG51bGwgPyBudWxsIDogJycgKyBjb25maWcua2V5O1xuXHQgICAgLy8gUmVtYWluaW5nIHByb3BlcnRpZXMgYXJlIGFkZGVkIHRvIGEgbmV3IHByb3BzIG9iamVjdFxuXHQgICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcblx0ICAgICAgaWYgKGNvbmZpZy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgJiZcblx0ICAgICAgICAgICFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcblx0ICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICAvLyBDaGlsZHJlbiBjYW4gYmUgbW9yZSB0aGFuIG9uZSBhcmd1bWVudCwgYW5kIHRob3NlIGFyZSB0cmFuc2ZlcnJlZCBvbnRvXG5cdCAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG5cdCAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG5cdCAgaWYgKGNoaWxkcmVuTGVuZ3RoID09PSAxKSB7XG5cdCAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuXHQgIH0gZWxzZSBpZiAoY2hpbGRyZW5MZW5ndGggPiAxKSB7XG5cdCAgICB2YXIgY2hpbGRBcnJheSA9IEFycmF5KGNoaWxkcmVuTGVuZ3RoKTtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuXHQgICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcblx0ICAgIH1cblx0ICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcblx0ICB9XG5cdFxuXHQgIC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wc1xuXHQgIGlmICh0eXBlICYmIHR5cGUuZGVmYXVsdFByb3BzKSB7XG5cdCAgICB2YXIgZGVmYXVsdFByb3BzID0gdHlwZS5kZWZhdWx0UHJvcHM7XG5cdCAgICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuXHQgICAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gbmV3IFJlYWN0RWxlbWVudChcblx0ICAgIHR5cGUsXG5cdCAgICBrZXksXG5cdCAgICByZWYsXG5cdCAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LFxuXHQgICAgUmVhY3RDb250ZXh0LmN1cnJlbnQsXG5cdCAgICBwcm9wc1xuXHQgICk7XG5cdH07XG5cdFxuXHRSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSA9IGZ1bmN0aW9uKHR5cGUpIHtcblx0ICB2YXIgZmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50LmJpbmQobnVsbCwgdHlwZSk7XG5cdCAgLy8gRXhwb3NlIHRoZSB0eXBlIG9uIHRoZSBmYWN0b3J5IGFuZCB0aGUgcHJvdG90eXBlIHNvIHRoYXQgaXQgY2FuIGJlXG5cdCAgLy8gZWFzaWx5IGFjY2Vzc2VkIG9uIGVsZW1lbnRzLiBFLmcuIDxGb28gLz4udHlwZSA9PT0gRm9vLnR5cGUuXG5cdCAgLy8gVGhpcyBzaG91bGQgbm90IGJlIG5hbWVkIGBjb25zdHJ1Y3RvcmAgc2luY2UgdGhpcyBtYXkgbm90IGJlIHRoZSBmdW5jdGlvblxuXHQgIC8vIHRoYXQgY3JlYXRlZCB0aGUgZWxlbWVudCwgYW5kIGl0IG1heSBub3QgZXZlbiBiZSBhIGNvbnN0cnVjdG9yLlxuXHQgIGZhY3RvcnkudHlwZSA9IHR5cGU7XG5cdCAgcmV0dXJuIGZhY3Rvcnk7XG5cdH07XG5cdFxuXHRSZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlUHJvcHMgPSBmdW5jdGlvbihvbGRFbGVtZW50LCBuZXdQcm9wcykge1xuXHQgIHZhciBuZXdFbGVtZW50ID0gbmV3IFJlYWN0RWxlbWVudChcblx0ICAgIG9sZEVsZW1lbnQudHlwZSxcblx0ICAgIG9sZEVsZW1lbnQua2V5LFxuXHQgICAgb2xkRWxlbWVudC5yZWYsXG5cdCAgICBvbGRFbGVtZW50Ll9vd25lcixcblx0ICAgIG9sZEVsZW1lbnQuX2NvbnRleHQsXG5cdCAgICBuZXdQcm9wc1xuXHQgICk7XG5cdFxuXHQgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgIC8vIElmIHRoZSBrZXkgb24gdGhlIG9yaWdpbmFsIGlzIHZhbGlkLCB0aGVuIHRoZSBjbG9uZSBpcyB2YWxpZFxuXHQgICAgbmV3RWxlbWVudC5fc3RvcmUudmFsaWRhdGVkID0gb2xkRWxlbWVudC5fc3RvcmUudmFsaWRhdGVkO1xuXHQgIH1cblx0ICByZXR1cm4gbmV3RWxlbWVudDtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvYmplY3RgIGlzIGEgdmFsaWQgY29tcG9uZW50LlxuXHQgKiBAZmluYWxcblx0ICovXG5cdFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuXHQgIC8vIFJlYWN0VGVzdFV0aWxzIGlzIG9mdGVuIHVzZWQgb3V0c2lkZSBvZiBiZWZvcmVFYWNoIHdoZXJlIGFzIFJlYWN0IGlzXG5cdCAgLy8gd2l0aGluIGl0LiBUaGlzIGxlYWRzIHRvIHR3byBkaWZmZXJlbnQgaW5zdGFuY2VzIG9mIFJlYWN0IG9uIHRoZSBzYW1lXG5cdCAgLy8gcGFnZS4gVG8gaWRlbnRpZnkgYSBlbGVtZW50IGZyb20gYSBkaWZmZXJlbnQgUmVhY3QgaW5zdGFuY2Ugd2UgdXNlXG5cdCAgLy8gYSBmbGFnIGluc3RlYWQgb2YgYW4gaW5zdGFuY2VvZiBjaGVjay5cblx0ICB2YXIgaXNFbGVtZW50ID0gISEob2JqZWN0ICYmIG9iamVjdC5faXNSZWFjdEVsZW1lbnQpO1xuXHQgIC8vIGlmIChpc0VsZW1lbnQgJiYgIShvYmplY3QgaW5zdGFuY2VvZiBSZWFjdEVsZW1lbnQpKSB7XG5cdCAgLy8gVGhpcyBpcyBhbiBpbmRpY2F0b3IgdGhhdCB5b3UncmUgdXNpbmcgbXVsdGlwbGUgdmVyc2lvbnMgb2YgUmVhY3QgYXQgdGhlXG5cdCAgLy8gc2FtZSB0aW1lLiBUaGlzIHdpbGwgc2NyZXcgd2l0aCBvd25lcnNoaXAgYW5kIHN0dWZmLiBGaXggaXQsIHBsZWFzZS5cblx0ICAvLyBUT0RPOiBXZSBjb3VsZCBwb3NzaWJseSB3YXJuIGhlcmUuXG5cdCAgLy8gfVxuXHQgIHJldHVybiBpc0VsZW1lbnQ7XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RWxlbWVudDtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgRXhlY3V0aW9uRW52aXJvbm1lbnRcblx0ICovXG5cdFxuXHQvKmpzbGludCBldmlsOiB0cnVlICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBjYW5Vc2VET00gPSAhIShcblx0ICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuXHQgIHdpbmRvdy5kb2N1bWVudCAmJlxuXHQgIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50XG5cdCk7XG5cdFxuXHQvKipcblx0ICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuXHQgKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG5cdCAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuXHQgKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG5cdCAqL1xuXHR2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cdFxuXHQgIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXHRcblx0ICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblx0XG5cdCAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6XG5cdCAgICBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblx0XG5cdCAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cdFxuXHQgIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cdFxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcblxuXG4vKioqLyB9LFxuLyogNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSB3YXJuaW5nXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgZW1wdHlGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXHRcblx0LyoqXG5cdCAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cblx0ICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuXHQgKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuXHQgKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cblx0ICovXG5cdFxuXHR2YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cdFxuXHRpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0ICkge2ZvciAodmFyIGFyZ3M9W10sJF9fMD0yLCRfXzE9YXJndW1lbnRzLmxlbmd0aDskX18wPCRfXzE7JF9fMCsrKSBhcmdzLnB1c2goYXJndW1lbnRzWyRfXzBdKTtcblx0ICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICB0aHJvdyBuZXcgRXJyb3IoXG5cdCAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuXHQgICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuXHQgICAgICApO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmICghY29uZGl0aW9uKSB7XG5cdCAgICAgIHZhciBhcmdJbmRleCA9IDA7XG5cdCAgICAgIGNvbnNvbGUud2FybignV2FybmluZzogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpICB7cmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107fSkpO1xuXHQgICAgfVxuXHQgIH07XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gd2FybmluZztcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE1vdW50XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgRE9NUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcblx0dmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpO1xuXHR2YXIgUmVhY3RDdXJyZW50T3duZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblx0dmFyIFJlYWN0RWxlbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdHZhciBSZWFjdExlZ2FjeUVsZW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblx0dmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cdHZhciBSZWFjdFBlcmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcblx0XG5cdHZhciBjb250YWluc05vZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3KTtcblx0dmFyIGRlcHJlY2F0ZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KTtcblx0dmFyIGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lciA9IF9fd2VicGFja19yZXF1aXJlX18oODEpO1xuXHR2YXIgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpO1xuXHR2YXIgaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Nyk7XG5cdHZhciB3YXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdHZhciBjcmVhdGVFbGVtZW50ID0gUmVhY3RMZWdhY3lFbGVtZW50LndyYXBDcmVhdGVFbGVtZW50KFxuXHQgIFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50XG5cdCk7XG5cdFxuXHR2YXIgU0VQQVJBVE9SID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuU0VQQVJBVE9SO1xuXHRcblx0dmFyIEFUVFJfTkFNRSA9IERPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FO1xuXHR2YXIgbm9kZUNhY2hlID0ge307XG5cdFxuXHR2YXIgRUxFTUVOVF9OT0RFX1RZUEUgPSAxO1xuXHR2YXIgRE9DX05PREVfVFlQRSA9IDk7XG5cdFxuXHQvKiogTWFwcGluZyBmcm9tIHJlYWN0Um9vdElEIHRvIFJlYWN0IGNvbXBvbmVudCBpbnN0YW5jZS4gKi9cblx0dmFyIGluc3RhbmNlc0J5UmVhY3RSb290SUQgPSB7fTtcblx0XG5cdC8qKiBNYXBwaW5nIGZyb20gcmVhY3RSb290SUQgdG8gYGNvbnRhaW5lcmAgbm9kZXMuICovXG5cdHZhciBjb250YWluZXJzQnlSZWFjdFJvb3RJRCA9IHt9O1xuXHRcblx0aWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuXHQgIC8qKiBfX0RFVl9fLW9ubHkgbWFwcGluZyBmcm9tIHJlYWN0Um9vdElEIHRvIHJvb3QgZWxlbWVudHMuICovXG5cdCAgdmFyIHJvb3RFbGVtZW50c0J5UmVhY3RSb290SUQgPSB7fTtcblx0fVxuXHRcblx0Ly8gVXNlZCB0byBzdG9yZSBicmVhZHRoLWZpcnN0IHNlYXJjaCBzdGF0ZSBpbiBmaW5kQ29tcG9uZW50Um9vdC5cblx0dmFyIGZpbmRDb21wb25lbnRSb290UmV1c2FibGVBcnJheSA9IFtdO1xuXHRcblx0LyoqXG5cdCAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRoYXQgbWF5IGNvbnRhaW4gYSBSZWFjdCBjb21wb25lbnQuXG5cdCAqIEByZXR1cm4gez9zdHJpbmd9IEEgXCJyZWFjdFJvb3RcIiBJRCwgaWYgYSBSZWFjdCBjb21wb25lbnQgaXMgcmVuZGVyZWQuXG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRSZWFjdFJvb3RJRChjb250YWluZXIpIHtcblx0ICB2YXIgcm9vdEVsZW1lbnQgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcblx0ICByZXR1cm4gcm9vdEVsZW1lbnQgJiYgUmVhY3RNb3VudC5nZXRJRChyb290RWxlbWVudCk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBBY2Nlc3Npbmcgbm9kZVtBVFRSX05BTUVdIG9yIGNhbGxpbmcgZ2V0QXR0cmlidXRlKEFUVFJfTkFNRSkgb24gYSBmb3JtXG5cdCAqIGVsZW1lbnQgY2FuIHJldHVybiBpdHMgY29udHJvbCB3aG9zZSBuYW1lIG9yIElEIGVxdWFscyBBVFRSX05BTUUuIEFsbFxuXHQgKiBET00gbm9kZXMgc3VwcG9ydCBgZ2V0QXR0cmlidXRlTm9kZWAgYnV0IHRoaXMgY2FuIGFsc28gZ2V0IGNhbGxlZCBvblxuXHQgKiBvdGhlciBvYmplY3RzIHNvIGp1c3QgcmV0dXJuICcnIGlmIHdlJ3JlIGdpdmVuIHNvbWV0aGluZyBvdGhlciB0aGFuIGFcblx0ICogRE9NIG5vZGUgKHN1Y2ggYXMgd2luZG93KS5cblx0ICpcblx0ICogQHBhcmFtIHs/RE9NRWxlbWVudHxET01XaW5kb3d8RE9NRG9jdW1lbnR8RE9NVGV4dE5vZGV9IG5vZGUgRE9NIG5vZGUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gSUQgb2YgdGhlIHN1cHBsaWVkIGBkb21Ob2RlYC5cblx0ICovXG5cdGZ1bmN0aW9uIGdldElEKG5vZGUpIHtcblx0ICB2YXIgaWQgPSBpbnRlcm5hbEdldElEKG5vZGUpO1xuXHQgIGlmIChpZCkge1xuXHQgICAgaWYgKG5vZGVDYWNoZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcblx0ICAgICAgdmFyIGNhY2hlZCA9IG5vZGVDYWNoZVtpZF07XG5cdCAgICAgIGlmIChjYWNoZWQgIT09IG5vZGUpIHtcblx0ICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICAgICAgIWlzVmFsaWQoY2FjaGVkLCBpZCksXG5cdCAgICAgICAgICAnUmVhY3RNb3VudDogVHdvIHZhbGlkIGJ1dCB1bmVxdWFsIG5vZGVzIHdpdGggdGhlIHNhbWUgYCVzYDogJXMnLFxuXHQgICAgICAgICAgQVRUUl9OQU1FLCBpZFxuXHQgICAgICAgICkgOiBpbnZhcmlhbnQoIWlzVmFsaWQoY2FjaGVkLCBpZCkpKTtcblx0XG5cdCAgICAgICAgbm9kZUNhY2hlW2lkXSA9IG5vZGU7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIG5vZGVDYWNoZVtpZF0gPSBub2RlO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIGlkO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBpbnRlcm5hbEdldElEKG5vZGUpIHtcblx0ICAvLyBJZiBub2RlIGlzIHNvbWV0aGluZyBsaWtlIGEgd2luZG93LCBkb2N1bWVudCwgb3IgdGV4dCBub2RlLCBub25lIG9mXG5cdCAgLy8gd2hpY2ggc3VwcG9ydCBhdHRyaWJ1dGVzIG9yIGEgLmdldEF0dHJpYnV0ZSBtZXRob2QsIGdyYWNlZnVsbHkgcmV0dXJuXG5cdCAgLy8gdGhlIGVtcHR5IHN0cmluZywgYXMgaWYgdGhlIGF0dHJpYnV0ZSB3ZXJlIG1pc3NpbmcuXG5cdCAgcmV0dXJuIG5vZGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoQVRUUl9OQU1FKSB8fCAnJztcblx0fVxuXHRcblx0LyoqXG5cdCAqIFNldHMgdGhlIFJlYWN0LXNwZWNpZmljIElEIG9mIHRoZSBnaXZlbiBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgVGhlIERPTSBub2RlIHdob3NlIElEIHdpbGwgYmUgc2V0LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIHZhbHVlIG9mIHRoZSBJRCBhdHRyaWJ1dGUuXG5cdCAqL1xuXHRmdW5jdGlvbiBzZXRJRChub2RlLCBpZCkge1xuXHQgIHZhciBvbGRJRCA9IGludGVybmFsR2V0SUQobm9kZSk7XG5cdCAgaWYgKG9sZElEICE9PSBpZCkge1xuXHQgICAgZGVsZXRlIG5vZGVDYWNoZVtvbGRJRF07XG5cdCAgfVxuXHQgIG5vZGUuc2V0QXR0cmlidXRlKEFUVFJfTkFNRSwgaWQpO1xuXHQgIG5vZGVDYWNoZVtpZF0gPSBub2RlO1xuXHR9XG5cdFxuXHQvKipcblx0ICogRmluZHMgdGhlIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgUmVhY3QtZ2VuZXJhdGVkIERPTSBJRC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IGlkIEEgUmVhY3QtZ2VuZXJhdGVkIERPTSBJRC5cblx0ICogQHJldHVybiB7RE9NRWxlbWVudH0gRE9NIG5vZGUgd2l0aCB0aGUgc3VwcGxlZCBgaWRgLlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdGZ1bmN0aW9uIGdldE5vZGUoaWQpIHtcblx0ICBpZiAoIW5vZGVDYWNoZS5oYXNPd25Qcm9wZXJ0eShpZCkgfHwgIWlzVmFsaWQobm9kZUNhY2hlW2lkXSwgaWQpKSB7XG5cdCAgICBub2RlQ2FjaGVbaWRdID0gUmVhY3RNb3VudC5maW5kUmVhY3ROb2RlQnlJRChpZCk7XG5cdCAgfVxuXHQgIHJldHVybiBub2RlQ2FjaGVbaWRdO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQSBub2RlIGlzIFwidmFsaWRcIiBpZiBpdCBpcyBjb250YWluZWQgYnkgYSBjdXJyZW50bHkgbW91bnRlZCBjb250YWluZXIuXG5cdCAqXG5cdCAqIFRoaXMgbWVhbnMgdGhhdCB0aGUgbm9kZSBkb2VzIG5vdCBoYXZlIHRvIGJlIGNvbnRhaW5lZCBieSBhIGRvY3VtZW50IGluXG5cdCAqIG9yZGVyIHRvIGJlIGNvbnNpZGVyZWQgdmFsaWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P0RPTUVsZW1lbnR9IG5vZGUgVGhlIGNhbmRpZGF0ZSBET00gbm9kZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBleHBlY3RlZCBJRCBvZiB0aGUgbm9kZS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgbm9kZSBpcyBjb250YWluZWQgYnkgYSBtb3VudGVkIGNvbnRhaW5lci5cblx0ICovXG5cdGZ1bmN0aW9uIGlzVmFsaWQobm9kZSwgaWQpIHtcblx0ICBpZiAobm9kZSkge1xuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgaW50ZXJuYWxHZXRJRChub2RlKSA9PT0gaWQsXG5cdCAgICAgICdSZWFjdE1vdW50OiBVbmV4cGVjdGVkIG1vZGlmaWNhdGlvbiBvZiBgJXNgJyxcblx0ICAgICAgQVRUUl9OQU1FXG5cdCAgICApIDogaW52YXJpYW50KGludGVybmFsR2V0SUQobm9kZSkgPT09IGlkKSk7XG5cdFxuXHQgICAgdmFyIGNvbnRhaW5lciA9IFJlYWN0TW91bnQuZmluZFJlYWN0Q29udGFpbmVyRm9ySUQoaWQpO1xuXHQgICAgaWYgKGNvbnRhaW5lciAmJiBjb250YWluc05vZGUoY29udGFpbmVyLCBub2RlKSkge1xuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIENhdXNlcyB0aGUgY2FjaGUgdG8gZm9yZ2V0IGFib3V0IG9uZSBSZWFjdC1zcGVjaWZpYyBJRC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBJRCB0byBmb3JnZXQuXG5cdCAqL1xuXHRmdW5jdGlvbiBwdXJnZUlEKGlkKSB7XG5cdCAgZGVsZXRlIG5vZGVDYWNoZVtpZF07XG5cdH1cblx0XG5cdHZhciBkZWVwZXN0Tm9kZVNvRmFyID0gbnVsbDtcblx0ZnVuY3Rpb24gZmluZERlZXBlc3RDYWNoZWRBbmNlc3RvckltcGwoYW5jZXN0b3JJRCkge1xuXHQgIHZhciBhbmNlc3RvciA9IG5vZGVDYWNoZVthbmNlc3RvcklEXTtcblx0ICBpZiAoYW5jZXN0b3IgJiYgaXNWYWxpZChhbmNlc3RvciwgYW5jZXN0b3JJRCkpIHtcblx0ICAgIGRlZXBlc3ROb2RlU29GYXIgPSBhbmNlc3Rvcjtcblx0ICB9IGVsc2Uge1xuXHQgICAgLy8gVGhpcyBub2RlIGlzbid0IHBvcHVsYXRlZCBpbiB0aGUgY2FjaGUsIHNvIHByZXN1bWFibHkgbm9uZSBvZiBpdHNcblx0ICAgIC8vIGRlc2NlbmRhbnRzIGFyZS4gQnJlYWsgb3V0IG9mIHRoZSBsb29wLlxuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIFJldHVybiB0aGUgZGVlcGVzdCBjYWNoZWQgbm9kZSB3aG9zZSBJRCBpcyBhIHByZWZpeCBvZiBgdGFyZ2V0SURgLlxuXHQgKi9cblx0ZnVuY3Rpb24gZmluZERlZXBlc3RDYWNoZWRBbmNlc3Rvcih0YXJnZXRJRCkge1xuXHQgIGRlZXBlc3ROb2RlU29GYXIgPSBudWxsO1xuXHQgIFJlYWN0SW5zdGFuY2VIYW5kbGVzLnRyYXZlcnNlQW5jZXN0b3JzKFxuXHQgICAgdGFyZ2V0SUQsXG5cdCAgICBmaW5kRGVlcGVzdENhY2hlZEFuY2VzdG9ySW1wbFxuXHQgICk7XG5cdFxuXHQgIHZhciBmb3VuZE5vZGUgPSBkZWVwZXN0Tm9kZVNvRmFyO1xuXHQgIGRlZXBlc3ROb2RlU29GYXIgPSBudWxsO1xuXHQgIHJldHVybiBmb3VuZE5vZGU7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBNb3VudGluZyBpcyB0aGUgcHJvY2VzcyBvZiBpbml0aWFsaXppbmcgYSBSZWFjdCBjb21wb25lbnQgYnkgY3JlYXRpbmdzIGl0c1xuXHQgKiByZXByZXNlbnRhdGl2ZSBET00gZWxlbWVudHMgYW5kIGluc2VydGluZyB0aGVtIGludG8gYSBzdXBwbGllZCBgY29udGFpbmVyYC5cblx0ICogQW55IHByaW9yIGNvbnRlbnQgaW5zaWRlIGBjb250YWluZXJgIGlzIGRlc3Ryb3llZCBpbiB0aGUgcHJvY2Vzcy5cblx0ICpcblx0ICogICBSZWFjdE1vdW50LnJlbmRlcihcblx0ICogICAgIGNvbXBvbmVudCxcblx0ICogICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250YWluZXInKVxuXHQgKiAgICk7XG5cdCAqXG5cdCAqICAgPGRpdiBpZD1cImNvbnRhaW5lclwiPiAgICAgICAgICAgICAgICAgICA8LS0gU3VwcGxpZWQgYGNvbnRhaW5lcmAuXG5cdCAqICAgICA8ZGl2IGRhdGEtcmVhY3RpZD1cIi4zXCI+ICAgICAgICAgICAgICA8LS0gUmVuZGVyZWQgcmVhY3RSb290IG9mIFJlYWN0XG5cdCAqICAgICAgIC8vIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5cblx0ICogICAgIDwvZGl2PlxuXHQgKiAgIDwvZGl2PlxuXHQgKlxuXHQgKiBJbnNpZGUgb2YgYGNvbnRhaW5lcmAsIHRoZSBmaXJzdCBlbGVtZW50IHJlbmRlcmVkIGlzIHRoZSBcInJlYWN0Um9vdFwiLlxuXHQgKi9cblx0dmFyIFJlYWN0TW91bnQgPSB7XG5cdCAgLyoqIEV4cG9zZWQgZm9yIGRlYnVnZ2luZyBwdXJwb3NlcyAqKi9cblx0ICBfaW5zdGFuY2VzQnlSZWFjdFJvb3RJRDogaW5zdGFuY2VzQnlSZWFjdFJvb3RJRCxcblx0XG5cdCAgLyoqXG5cdCAgICogVGhpcyBpcyBhIGhvb2sgcHJvdmlkZWQgdG8gc3VwcG9ydCByZW5kZXJpbmcgUmVhY3QgY29tcG9uZW50cyB3aGlsZVxuXHQgICAqIGVuc3VyaW5nIHRoYXQgdGhlIGFwcGFyZW50IHNjcm9sbCBwb3NpdGlvbiBvZiBpdHMgYGNvbnRhaW5lcmAgZG9lcyBub3Rcblx0ICAgKiBjaGFuZ2UuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBUaGUgYGNvbnRhaW5lcmAgYmVpbmcgcmVuZGVyZWQgaW50by5cblx0ICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSByZW5kZXJDYWxsYmFjayBUaGlzIG11c3QgYmUgY2FsbGVkIG9uY2UgdG8gZG8gdGhlIHJlbmRlci5cblx0ICAgKi9cblx0ICBzY3JvbGxNb25pdG9yOiBmdW5jdGlvbihjb250YWluZXIsIHJlbmRlckNhbGxiYWNrKSB7XG5cdCAgICByZW5kZXJDYWxsYmFjaygpO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIFRha2UgYSBjb21wb25lbnQgdGhhdCdzIGFscmVhZHkgbW91bnRlZCBpbnRvIHRoZSBET00gYW5kIHJlcGxhY2UgaXRzIHByb3BzXG5cdCAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gcHJldkNvbXBvbmVudCBjb21wb25lbnQgaW5zdGFuY2UgYWxyZWFkeSBpbiB0aGUgRE9NXG5cdCAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gbmV4dENvbXBvbmVudCBjb21wb25lbnQgaW5zdGFuY2UgdG8gcmVuZGVyXG5cdCAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvXG5cdCAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRyaWdnZXJlZCBvbiBjb21wbGV0aW9uXG5cdCAgICovXG5cdCAgX3VwZGF0ZVJvb3RDb21wb25lbnQ6IGZ1bmN0aW9uKFxuXHQgICAgICBwcmV2Q29tcG9uZW50LFxuXHQgICAgICBuZXh0Q29tcG9uZW50LFxuXHQgICAgICBjb250YWluZXIsXG5cdCAgICAgIGNhbGxiYWNrKSB7XG5cdCAgICB2YXIgbmV4dFByb3BzID0gbmV4dENvbXBvbmVudC5wcm9wcztcblx0ICAgIFJlYWN0TW91bnQuc2Nyb2xsTW9uaXRvcihjb250YWluZXIsIGZ1bmN0aW9uKCkge1xuXHQgICAgICBwcmV2Q29tcG9uZW50LnJlcGxhY2VQcm9wcyhuZXh0UHJvcHMsIGNhbGxiYWNrKTtcblx0ICAgIH0pO1xuXHRcblx0ICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgLy8gUmVjb3JkIHRoZSByb290IGVsZW1lbnQgaW4gY2FzZSBpdCBsYXRlciBnZXRzIHRyYW5zcGxhbnRlZC5cblx0ICAgICAgcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtnZXRSZWFjdFJvb3RJRChjb250YWluZXIpXSA9XG5cdCAgICAgICAgZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG5cdCAgICB9XG5cdFxuXHQgICAgcmV0dXJuIHByZXZDb21wb25lbnQ7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogUmVnaXN0ZXIgYSBjb21wb25lbnQgaW50byB0aGUgaW5zdGFuY2UgbWFwIGFuZCBzdGFydHMgc2Nyb2xsIHZhbHVlXG5cdCAgICogbW9uaXRvcmluZ1xuXHQgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IG5leHRDb21wb25lbnQgY29tcG9uZW50IGluc3RhbmNlIHRvIHJlbmRlclxuXHQgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIGNvbnRhaW5lciB0byByZW5kZXIgaW50b1xuXHQgICAqIEByZXR1cm4ge3N0cmluZ30gcmVhY3RSb290IElEIHByZWZpeFxuXHQgICAqL1xuXHQgIF9yZWdpc3RlckNvbXBvbmVudDogZnVuY3Rpb24obmV4dENvbXBvbmVudCwgY29udGFpbmVyKSB7XG5cdCAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICBjb250YWluZXIgJiYgKFxuXHQgICAgICAgIGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHxcblx0ICAgICAgICBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEVcblx0ICAgICAgKSxcblx0ICAgICAgJ19yZWdpc3RlckNvbXBvbmVudCguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50Lidcblx0ICAgICkgOiBpbnZhcmlhbnQoY29udGFpbmVyICYmIChcblx0ICAgICAgY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fFxuXHQgICAgICBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEVcblx0ICAgICkpKTtcblx0XG5cdCAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuZW5zdXJlU2Nyb2xsVmFsdWVNb25pdG9yaW5nKCk7XG5cdFxuXHQgICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RNb3VudC5yZWdpc3RlckNvbnRhaW5lcihjb250YWluZXIpO1xuXHQgICAgaW5zdGFuY2VzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF0gPSBuZXh0Q29tcG9uZW50O1xuXHQgICAgcmV0dXJuIHJlYWN0Um9vdElEO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIFJlbmRlciBhIG5ldyBjb21wb25lbnQgaW50byB0aGUgRE9NLlxuXHQgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IG5leHRDb21wb25lbnQgY29tcG9uZW50IGluc3RhbmNlIHRvIHJlbmRlclxuXHQgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIGNvbnRhaW5lciB0byByZW5kZXIgaW50b1xuXHQgICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmV1c2VNYXJrdXAgaWYgd2Ugc2hvdWxkIHNraXAgdGhlIG1hcmt1cCBpbnNlcnRpb25cblx0ICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gbmV4dENvbXBvbmVudFxuXHQgICAqL1xuXHQgIF9yZW5kZXJOZXdSb290Q29tcG9uZW50OiBSZWFjdFBlcmYubWVhc3VyZShcblx0ICAgICdSZWFjdE1vdW50Jyxcblx0ICAgICdfcmVuZGVyTmV3Um9vdENvbXBvbmVudCcsXG5cdCAgICBmdW5jdGlvbihcblx0ICAgICAgICBuZXh0Q29tcG9uZW50LFxuXHQgICAgICAgIGNvbnRhaW5lcixcblx0ICAgICAgICBzaG91bGRSZXVzZU1hcmt1cCkge1xuXHQgICAgICAvLyBWYXJpb3VzIHBhcnRzIG9mIG91ciBjb2RlIChzdWNoIGFzIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50J3Ncblx0ICAgICAgLy8gX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCkgYXNzdW1lIHRoYXQgY2FsbHMgdG8gcmVuZGVyIGFyZW4ndCBuZXN0ZWQ7XG5cdCAgICAgIC8vIHZlcmlmeSB0aGF0IHRoYXQncyB0aGUgY2FzZS5cblx0ICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG5cdCAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLFxuXHQgICAgICAgICdfcmVuZGVyTmV3Um9vdENvbXBvbmVudCgpOiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uICcgK1xuXHQgICAgICAgICdvZiBwcm9wcyBhbmQgc3RhdGU7IHRyaWdnZXJpbmcgbmVzdGVkIGNvbXBvbmVudCB1cGRhdGVzIGZyb20gJyArXG5cdCAgICAgICAgJ3JlbmRlciBpcyBub3QgYWxsb3dlZC4gSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluICcgK1xuXHQgICAgICAgICdjb21wb25lbnREaWRVcGRhdGUuJ1xuXHQgICAgICApIDogbnVsbCk7XG5cdFxuXHQgICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KG5leHRDb21wb25lbnQsIG51bGwpO1xuXHQgICAgICB2YXIgcmVhY3RSb290SUQgPSBSZWFjdE1vdW50Ll9yZWdpc3RlckNvbXBvbmVudChcblx0ICAgICAgICBjb21wb25lbnRJbnN0YW5jZSxcblx0ICAgICAgICBjb250YWluZXJcblx0ICAgICAgKTtcblx0ICAgICAgY29tcG9uZW50SW5zdGFuY2UubW91bnRDb21wb25lbnRJbnRvTm9kZShcblx0ICAgICAgICByZWFjdFJvb3RJRCxcblx0ICAgICAgICBjb250YWluZXIsXG5cdCAgICAgICAgc2hvdWxkUmV1c2VNYXJrdXBcblx0ICAgICAgKTtcblx0XG5cdCAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgICAvLyBSZWNvcmQgdGhlIHJvb3QgZWxlbWVudCBpbiBjYXNlIGl0IGxhdGVyIGdldHMgdHJhbnNwbGFudGVkLlxuXHQgICAgICAgIHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID1cblx0ICAgICAgICAgIGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gY29tcG9uZW50SW5zdGFuY2U7XG5cdCAgICB9XG5cdCAgKSxcblx0XG5cdCAgLyoqXG5cdCAgICogUmVuZGVycyBhIFJlYWN0IGNvbXBvbmVudCBpbnRvIHRoZSBET00gaW4gdGhlIHN1cHBsaWVkIGBjb250YWluZXJgLlxuXHQgICAqXG5cdCAgICogSWYgdGhlIFJlYWN0IGNvbXBvbmVudCB3YXMgcHJldmlvdXNseSByZW5kZXJlZCBpbnRvIGBjb250YWluZXJgLCB0aGlzIHdpbGxcblx0ICAgKiBwZXJmb3JtIGFuIHVwZGF0ZSBvbiBpdCBhbmQgb25seSBtdXRhdGUgdGhlIERPTSBhcyBuZWNlc3NhcnkgdG8gcmVmbGVjdCB0aGVcblx0ICAgKiBsYXRlc3QgUmVhY3QgY29tcG9uZW50LlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRFbGVtZW50IENvbXBvbmVudCBlbGVtZW50IHRvIHJlbmRlci5cblx0ICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byByZW5kZXIgaW50by5cblx0ICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24gdHJpZ2dlcmVkIG9uIGNvbXBsZXRpb25cblx0ICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gQ29tcG9uZW50IGluc3RhbmNlIHJlbmRlcmVkIGluIGBjb250YWluZXJgLlxuXHQgICAqL1xuXHQgIHJlbmRlcjogZnVuY3Rpb24obmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChuZXh0RWxlbWVudCksXG5cdCAgICAgICdyZW5kZXJDb21wb25lbnQoKTogSW52YWxpZCBjb21wb25lbnQgZWxlbWVudC4lcycsXG5cdCAgICAgIChcblx0ICAgICAgICB0eXBlb2YgbmV4dEVsZW1lbnQgPT09ICdzdHJpbmcnID9cblx0ICAgICAgICAgICcgSW5zdGVhZCBvZiBwYXNzaW5nIGFuIGVsZW1lbnQgc3RyaW5nLCBtYWtlIHN1cmUgdG8gaW5zdGFudGlhdGUgJyArXG5cdCAgICAgICAgICAnaXQgYnkgcGFzc2luZyBpdCB0byBSZWFjdC5jcmVhdGVFbGVtZW50LicgOlxuXHQgICAgICAgIFJlYWN0TGVnYWN5RWxlbWVudC5pc1ZhbGlkRmFjdG9yeShuZXh0RWxlbWVudCkgP1xuXHQgICAgICAgICAgJyBJbnN0ZWFkIG9mIHBhc3NpbmcgYSBjb21wb25lbnQgY2xhc3MsIG1ha2Ugc3VyZSB0byBpbnN0YW50aWF0ZSAnICtcblx0ICAgICAgICAgICdpdCBieSBwYXNzaW5nIGl0IHRvIFJlYWN0LmNyZWF0ZUVsZW1lbnQuJyA6XG5cdCAgICAgICAgLy8gQ2hlY2sgaWYgaXQgcXVhY2tzIGxpa2UgYSBlbGVtZW50XG5cdCAgICAgICAgdHlwZW9mIG5leHRFbGVtZW50LnByb3BzICE9PSBcInVuZGVmaW5lZFwiID9cblx0ICAgICAgICAgICcgVGhpcyBtYXkgYmUgY2F1c2VkIGJ5IHVuaW50ZW50aW9uYWxseSBsb2FkaW5nIHR3byBpbmRlcGVuZGVudCAnICtcblx0ICAgICAgICAgICdjb3BpZXMgb2YgUmVhY3QuJyA6XG5cdCAgICAgICAgICAnJ1xuXHQgICAgICApXG5cdCAgICApIDogaW52YXJpYW50KFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChuZXh0RWxlbWVudCkpKTtcblx0XG5cdCAgICB2YXIgcHJldkNvbXBvbmVudCA9IGluc3RhbmNlc0J5UmVhY3RSb290SURbZ2V0UmVhY3RSb290SUQoY29udGFpbmVyKV07XG5cdFxuXHQgICAgaWYgKHByZXZDb21wb25lbnQpIHtcblx0ICAgICAgdmFyIHByZXZFbGVtZW50ID0gcHJldkNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQ7XG5cdCAgICAgIGlmIChzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpKSB7XG5cdCAgICAgICAgcmV0dXJuIFJlYWN0TW91bnQuX3VwZGF0ZVJvb3RDb21wb25lbnQoXG5cdCAgICAgICAgICBwcmV2Q29tcG9uZW50LFxuXHQgICAgICAgICAgbmV4dEVsZW1lbnQsXG5cdCAgICAgICAgICBjb250YWluZXIsXG5cdCAgICAgICAgICBjYWxsYmFja1xuXHQgICAgICAgICk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgUmVhY3RNb3VudC51bm1vdW50Q29tcG9uZW50QXROb2RlKGNvbnRhaW5lcik7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICB2YXIgcmVhY3RSb290RWxlbWVudCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuXHQgICAgdmFyIGNvbnRhaW5lckhhc1JlYWN0TWFya3VwID1cblx0ICAgICAgcmVhY3RSb290RWxlbWVudCAmJiBSZWFjdE1vdW50LmlzUmVuZGVyZWRCeVJlYWN0KHJlYWN0Um9vdEVsZW1lbnQpO1xuXHRcblx0ICAgIHZhciBzaG91bGRSZXVzZU1hcmt1cCA9IGNvbnRhaW5lckhhc1JlYWN0TWFya3VwICYmICFwcmV2Q29tcG9uZW50O1xuXHRcblx0ICAgIHZhciBjb21wb25lbnQgPSBSZWFjdE1vdW50Ll9yZW5kZXJOZXdSb290Q29tcG9uZW50KFxuXHQgICAgICBuZXh0RWxlbWVudCxcblx0ICAgICAgY29udGFpbmVyLFxuXHQgICAgICBzaG91bGRSZXVzZU1hcmt1cFxuXHQgICAgKTtcblx0ICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrLmNhbGwoY29tcG9uZW50KTtcblx0ICAgIHJldHVybiBjb21wb25lbnQ7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQ29uc3RydWN0cyBhIGNvbXBvbmVudCBpbnN0YW5jZSBvZiBgY29uc3RydWN0b3JgIHdpdGggYGluaXRpYWxQcm9wc2AgYW5kXG5cdCAgICogcmVuZGVycyBpdCBpbnRvIHRoZSBzdXBwbGllZCBgY29udGFpbmVyYC5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yIFJlYWN0IGNvbXBvbmVudCBjb25zdHJ1Y3Rvci5cblx0ICAgKiBAcGFyYW0gez9vYmplY3R9IHByb3BzIEluaXRpYWwgcHJvcHMgb2YgdGhlIGNvbXBvbmVudCBpbnN0YW5jZS5cblx0ICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byByZW5kZXIgaW50by5cblx0ICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gQ29tcG9uZW50IGluc3RhbmNlIHJlbmRlcmVkIGluIGBjb250YWluZXJgLlxuXHQgICAqL1xuXHQgIGNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudDogZnVuY3Rpb24oY29uc3RydWN0b3IsIHByb3BzLCBjb250YWluZXIpIHtcblx0ICAgIHZhciBlbGVtZW50ID0gY3JlYXRlRWxlbWVudChjb25zdHJ1Y3RvciwgcHJvcHMpO1xuXHQgICAgcmV0dXJuIFJlYWN0TW91bnQucmVuZGVyKGVsZW1lbnQsIGNvbnRhaW5lcik7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQ29uc3RydWN0cyBhIGNvbXBvbmVudCBpbnN0YW5jZSBvZiBgY29uc3RydWN0b3JgIHdpdGggYGluaXRpYWxQcm9wc2AgYW5kXG5cdCAgICogcmVuZGVycyBpdCBpbnRvIGEgY29udGFpbmVyIG5vZGUgaWRlbnRpZmllZCBieSBzdXBwbGllZCBgaWRgLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcG9uZW50Q29uc3RydWN0b3IgUmVhY3QgY29tcG9uZW50IGNvbnN0cnVjdG9yXG5cdCAgICogQHBhcmFtIHs/b2JqZWN0fSBwcm9wcyBJbml0aWFsIHByb3BzIG9mIHRoZSBjb21wb25lbnQgaW5zdGFuY2UuXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudCB0byByZW5kZXIgaW50by5cblx0ICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gQ29tcG9uZW50IGluc3RhbmNlIHJlbmRlcmVkIGluIHRoZSBjb250YWluZXIgbm9kZS5cblx0ICAgKi9cblx0ICBjb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnRCeUlEOiBmdW5jdGlvbihjb25zdHJ1Y3RvciwgcHJvcHMsIGlkKSB7XG5cdCAgICB2YXIgZG9tTm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgIGRvbU5vZGUsXG5cdCAgICAgICdUcmllZCB0byBnZXQgZWxlbWVudCB3aXRoIGlkIG9mIFwiJXNcIiBidXQgaXQgaXMgbm90IHByZXNlbnQgb24gdGhlIHBhZ2UuJyxcblx0ICAgICAgaWRcblx0ICAgICkgOiBpbnZhcmlhbnQoZG9tTm9kZSkpO1xuXHQgICAgcmV0dXJuIFJlYWN0TW91bnQuY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50KGNvbnN0cnVjdG9yLCBwcm9wcywgZG9tTm9kZSk7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogUmVnaXN0ZXJzIGEgY29udGFpbmVyIG5vZGUgaW50byB3aGljaCBSZWFjdCBjb21wb25lbnRzIHdpbGwgYmUgcmVuZGVyZWQuXG5cdCAgICogVGhpcyBhbHNvIGNyZWF0ZXMgdGhlIFwicmVhY3RSb290XCIgSUQgdGhhdCB3aWxsIGJlIGFzc2lnbmVkIHRvIHRoZSBlbGVtZW50XG5cdCAgICogcmVuZGVyZWQgd2l0aGluLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdG8gcmVnaXN0ZXIgYXMgYSBjb250YWluZXIuXG5cdCAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgXCJyZWFjdFJvb3RcIiBJRCBvZiBlbGVtZW50cyByZW5kZXJlZCB3aXRoaW4uXG5cdCAgICovXG5cdCAgcmVnaXN0ZXJDb250YWluZXI6IGZ1bmN0aW9uKGNvbnRhaW5lcikge1xuXHQgICAgdmFyIHJlYWN0Um9vdElEID0gZ2V0UmVhY3RSb290SUQoY29udGFpbmVyKTtcblx0ICAgIGlmIChyZWFjdFJvb3RJRCkge1xuXHQgICAgICAvLyBJZiBvbmUgZXhpc3RzLCBtYWtlIHN1cmUgaXQgaXMgYSB2YWxpZCBcInJlYWN0Um9vdFwiIElELlxuXHQgICAgICByZWFjdFJvb3RJRCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmdldFJlYWN0Um9vdElERnJvbU5vZGVJRChyZWFjdFJvb3RJRCk7XG5cdCAgICB9XG5cdCAgICBpZiAoIXJlYWN0Um9vdElEKSB7XG5cdCAgICAgIC8vIE5vIHZhbGlkIFwicmVhY3RSb290XCIgSUQgZm91bmQsIGNyZWF0ZSBvbmUuXG5cdCAgICAgIHJlYWN0Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RSb290SUQoKTtcblx0ICAgIH1cblx0ICAgIGNvbnRhaW5lcnNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSA9IGNvbnRhaW5lcjtcblx0ICAgIHJldHVybiByZWFjdFJvb3RJRDtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBVbm1vdW50cyBhbmQgZGVzdHJveXMgdGhlIFJlYWN0IGNvbXBvbmVudCByZW5kZXJlZCBpbiB0aGUgYGNvbnRhaW5lcmAuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCBjb250YWluaW5nIGEgUmVhY3QgY29tcG9uZW50LlxuXHQgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYSBjb21wb25lbnQgd2FzIGZvdW5kIGluIGFuZCB1bm1vdW50ZWQgZnJvbVxuXHQgICAqICAgICAgICAgICAgICAgICAgIGBjb250YWluZXJgXG5cdCAgICovXG5cdCAgdW5tb3VudENvbXBvbmVudEF0Tm9kZTogZnVuY3Rpb24oY29udGFpbmVyKSB7XG5cdCAgICAvLyBWYXJpb3VzIHBhcnRzIG9mIG91ciBjb2RlIChzdWNoIGFzIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50J3Ncblx0ICAgIC8vIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQpIGFzc3VtZSB0aGF0IGNhbGxzIHRvIHJlbmRlciBhcmVuJ3QgbmVzdGVkO1xuXHQgICAgLy8gdmVyaWZ5IHRoYXQgdGhhdCdzIHRoZSBjYXNlLiAoU3RyaWN0bHkgc3BlYWtpbmcsIHVubW91bnRpbmcgd29uJ3QgY2F1c2UgYVxuXHQgICAgLy8gcmVuZGVyIGJ1dCB3ZSBzdGlsbCBkb24ndCBleHBlY3QgdG8gYmUgaW4gYSByZW5kZXIgY2FsbCBoZXJlLilcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuXHQgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwsXG5cdCAgICAgICd1bm1vdW50Q29tcG9uZW50QXROb2RlKCk6IFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgJyArXG5cdCAgICAgICdwcm9wcyBhbmQgc3RhdGU7IHRyaWdnZXJpbmcgbmVzdGVkIGNvbXBvbmVudCB1cGRhdGVzIGZyb20gcmVuZGVyIGlzICcgK1xuXHQgICAgICAnbm90IGFsbG93ZWQuIElmIG5lY2Vzc2FyeSwgdHJpZ2dlciBuZXN0ZWQgdXBkYXRlcyBpbiAnICtcblx0ICAgICAgJ2NvbXBvbmVudERpZFVwZGF0ZS4nXG5cdCAgICApIDogbnVsbCk7XG5cdFxuXHQgICAgdmFyIHJlYWN0Um9vdElEID0gZ2V0UmVhY3RSb290SUQoY29udGFpbmVyKTtcblx0ICAgIHZhciBjb21wb25lbnQgPSBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcblx0ICAgIGlmICghY29tcG9uZW50KSB7XG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblx0ICAgIFJlYWN0TW91bnQudW5tb3VudENvbXBvbmVudEZyb21Ob2RlKGNvbXBvbmVudCwgY29udGFpbmVyKTtcblx0ICAgIGRlbGV0ZSBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcblx0ICAgIGRlbGV0ZSBjb250YWluZXJzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF07XG5cdCAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICAgIGRlbGV0ZSByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIFVubW91bnRzIGEgY29tcG9uZW50IGFuZCByZW1vdmVzIGl0IGZyb20gdGhlIERPTS5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGluc3RhbmNlIFJlYWN0IGNvbXBvbmVudCBpbnN0YW5jZS5cblx0ICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byB1bm1vdW50IGZyb20uXG5cdCAgICogQGZpbmFsXG5cdCAgICogQGludGVybmFsXG5cdCAgICogQHNlZSB7UmVhY3RNb3VudC51bm1vdW50Q29tcG9uZW50QXROb2RlfVxuXHQgICAqL1xuXHQgIHVubW91bnRDb21wb25lbnRGcm9tTm9kZTogZnVuY3Rpb24oaW5zdGFuY2UsIGNvbnRhaW5lcikge1xuXHQgICAgaW5zdGFuY2UudW5tb3VudENvbXBvbmVudCgpO1xuXHRcblx0ICAgIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUpIHtcblx0ICAgICAgY29udGFpbmVyID0gY29udGFpbmVyLmRvY3VtZW50RWxlbWVudDtcblx0ICAgIH1cblx0XG5cdCAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9lbXB0eWluZy1hLW5vZGVcblx0ICAgIHdoaWxlIChjb250YWluZXIubGFzdENoaWxkKSB7XG5cdCAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIubGFzdENoaWxkKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBGaW5kcyB0aGUgY29udGFpbmVyIERPTSBlbGVtZW50IHRoYXQgY29udGFpbnMgUmVhY3QgY29tcG9uZW50IHRvIHdoaWNoIHRoZVxuXHQgICAqIHN1cHBsaWVkIERPTSBgaWRgIGJlbG9uZ3MuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIGFuIGVsZW1lbnQgcmVuZGVyZWQgYnkgYSBSZWFjdCBjb21wb25lbnQuXG5cdCAgICogQHJldHVybiB7P0RPTUVsZW1lbnR9IERPTSBlbGVtZW50IHRoYXQgY29udGFpbnMgdGhlIGBpZGAuXG5cdCAgICovXG5cdCAgZmluZFJlYWN0Q29udGFpbmVyRm9ySUQ6IGZ1bmN0aW9uKGlkKSB7XG5cdCAgICB2YXIgcmVhY3RSb290SUQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5nZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQoaWQpO1xuXHQgICAgdmFyIGNvbnRhaW5lciA9IGNvbnRhaW5lcnNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcblx0XG5cdCAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICAgIHZhciByb290RWxlbWVudCA9IHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuXHQgICAgICBpZiAocm9vdEVsZW1lbnQgJiYgcm9vdEVsZW1lbnQucGFyZW50Tm9kZSAhPT0gY29udGFpbmVyKSB7XG5cdCAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgICAgIC8vIENhbGwgaW50ZXJuYWxHZXRJRCBoZXJlIGJlY2F1c2UgZ2V0SUQgY2FsbHMgaXNWYWxpZCB3aGljaCBjYWxsc1xuXHQgICAgICAgICAgLy8gZmluZFJlYWN0Q29udGFpbmVyRm9ySUQgKHRoaXMgZnVuY3Rpb24pLlxuXHQgICAgICAgICAgaW50ZXJuYWxHZXRJRChyb290RWxlbWVudCkgPT09IHJlYWN0Um9vdElELFxuXHQgICAgICAgICAgJ1JlYWN0TW91bnQ6IFJvb3QgZWxlbWVudCBJRCBkaWZmZXJlZCBmcm9tIHJlYWN0Um9vdElELidcblx0ICAgICAgICApIDogaW52YXJpYW50KC8vIENhbGwgaW50ZXJuYWxHZXRJRCBoZXJlIGJlY2F1c2UgZ2V0SUQgY2FsbHMgaXNWYWxpZCB3aGljaCBjYWxsc1xuXHQgICAgICAgIC8vIGZpbmRSZWFjdENvbnRhaW5lckZvcklEICh0aGlzIGZ1bmN0aW9uKS5cblx0ICAgICAgICBpbnRlcm5hbEdldElEKHJvb3RFbGVtZW50KSA9PT0gcmVhY3RSb290SUQpKTtcblx0XG5cdCAgICAgICAgdmFyIGNvbnRhaW5lckNoaWxkID0gY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG5cdCAgICAgICAgaWYgKGNvbnRhaW5lckNoaWxkICYmXG5cdCAgICAgICAgICAgIHJlYWN0Um9vdElEID09PSBpbnRlcm5hbEdldElEKGNvbnRhaW5lckNoaWxkKSkge1xuXHQgICAgICAgICAgLy8gSWYgdGhlIGNvbnRhaW5lciBoYXMgYSBuZXcgY2hpbGQgd2l0aCB0aGUgc2FtZSBJRCBhcyB0aGUgb2xkXG5cdCAgICAgICAgICAvLyByb290IGVsZW1lbnQsIHRoZW4gcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF0gaXNcblx0ICAgICAgICAgIC8vIGp1c3Qgc3RhbGUgYW5kIG5lZWRzIHRvIGJlIHVwZGF0ZWQuIFRoZSBjYXNlIHRoYXQgZGVzZXJ2ZXMgYVxuXHQgICAgICAgICAgLy8gd2FybmluZyBpcyB3aGVuIHRoZSBjb250YWluZXIgaXMgZW1wdHkuXG5cdCAgICAgICAgICByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSA9IGNvbnRhaW5lckNoaWxkO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBjb25zb2xlLndhcm4oXG5cdCAgICAgICAgICAgICdSZWFjdE1vdW50OiBSb290IGVsZW1lbnQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIGl0cyBvcmlnaW5hbCAnICtcblx0ICAgICAgICAgICAgJ2NvbnRhaW5lci4gTmV3IGNvbnRhaW5lcjonLCByb290RWxlbWVudC5wYXJlbnROb2RlXG5cdCAgICAgICAgICApO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIHJldHVybiBjb250YWluZXI7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogRmluZHMgYW4gZWxlbWVudCByZW5kZXJlZCBieSBSZWFjdCB3aXRoIHRoZSBzdXBwbGllZCBJRC5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiBhIERPTSBub2RlIGluIHRoZSBSZWFjdCBjb21wb25lbnQuXG5cdCAgICogQHJldHVybiB7RE9NRWxlbWVudH0gUm9vdCBET00gbm9kZSBvZiB0aGUgUmVhY3QgY29tcG9uZW50LlxuXHQgICAqL1xuXHQgIGZpbmRSZWFjdE5vZGVCeUlEOiBmdW5jdGlvbihpZCkge1xuXHQgICAgdmFyIHJlYWN0Um9vdCA9IFJlYWN0TW91bnQuZmluZFJlYWN0Q29udGFpbmVyRm9ySUQoaWQpO1xuXHQgICAgcmV0dXJuIFJlYWN0TW91bnQuZmluZENvbXBvbmVudFJvb3QocmVhY3RSb290LCBpZCk7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogVHJ1ZSBpZiB0aGUgc3VwcGxpZWQgYG5vZGVgIGlzIHJlbmRlcmVkIGJ5IFJlYWN0LlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHsqfSBub2RlIERPTSBFbGVtZW50IHRvIGNoZWNrLlxuXHQgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIERPTSBFbGVtZW50IGFwcGVhcnMgdG8gYmUgcmVuZGVyZWQgYnkgUmVhY3QuXG5cdCAgICogQGludGVybmFsXG5cdCAgICovXG5cdCAgaXNSZW5kZXJlZEJ5UmVhY3Q6IGZ1bmN0aW9uKG5vZGUpIHtcblx0ICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSAxKSB7XG5cdCAgICAgIC8vIE5vdCBhIERPTUVsZW1lbnQsIHRoZXJlZm9yZSBub3QgYSBSZWFjdCBjb21wb25lbnRcblx0ICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXHQgICAgdmFyIGlkID0gUmVhY3RNb3VudC5nZXRJRChub2RlKTtcblx0ICAgIHJldHVybiBpZCA/IGlkLmNoYXJBdCgwKSA9PT0gU0VQQVJBVE9SIDogZmFsc2U7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogVHJhdmVyc2VzIHVwIHRoZSBhbmNlc3RvcnMgb2YgdGhlIHN1cHBsaWVkIG5vZGUgdG8gZmluZCBhIG5vZGUgdGhhdCBpcyBhXG5cdCAgICogRE9NIHJlcHJlc2VudGF0aW9uIG9mIGEgUmVhY3QgY29tcG9uZW50LlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHsqfSBub2RlXG5cdCAgICogQHJldHVybiB7P0RPTUV2ZW50VGFyZ2V0fVxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIGdldEZpcnN0UmVhY3RET006IGZ1bmN0aW9uKG5vZGUpIHtcblx0ICAgIHZhciBjdXJyZW50ID0gbm9kZTtcblx0ICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnQucGFyZW50Tm9kZSAhPT0gY3VycmVudCkge1xuXHQgICAgICBpZiAoUmVhY3RNb3VudC5pc1JlbmRlcmVkQnlSZWFjdChjdXJyZW50KSkge1xuXHQgICAgICAgIHJldHVybiBjdXJyZW50O1xuXHQgICAgICB9XG5cdCAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudE5vZGU7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbnVsbDtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBGaW5kcyBhIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgYHRhcmdldElEYCBpbnNpZGUgb2YgdGhlIHN1cHBsaWVkXG5cdCAgICogYGFuY2VzdG9yTm9kZWAuICBFeHBsb2l0cyB0aGUgSUQgbmFtaW5nIHNjaGVtZSB0byBwZXJmb3JtIHRoZSBzZWFyY2hcblx0ICAgKiBxdWlja2x5LlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gYW5jZXN0b3JOb2RlIFNlYXJjaCBmcm9tIHRoaXMgcm9vdC5cblx0ICAgKiBAcGFyYXJtIHtzdHJpbmd9IHRhcmdldElEIElEIG9mIHRoZSBET00gcmVwcmVzZW50YXRpb24gb2YgdGhlIGNvbXBvbmVudC5cblx0ICAgKiBAcmV0dXJuIHtET01FdmVudFRhcmdldH0gRE9NIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgYHRhcmdldElEYC5cblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKi9cblx0ICBmaW5kQ29tcG9uZW50Um9vdDogZnVuY3Rpb24oYW5jZXN0b3JOb2RlLCB0YXJnZXRJRCkge1xuXHQgICAgdmFyIGZpcnN0Q2hpbGRyZW4gPSBmaW5kQ29tcG9uZW50Um9vdFJldXNhYmxlQXJyYXk7XG5cdCAgICB2YXIgY2hpbGRJbmRleCA9IDA7XG5cdFxuXHQgICAgdmFyIGRlZXBlc3RBbmNlc3RvciA9IGZpbmREZWVwZXN0Q2FjaGVkQW5jZXN0b3IodGFyZ2V0SUQpIHx8IGFuY2VzdG9yTm9kZTtcblx0XG5cdCAgICBmaXJzdENoaWxkcmVuWzBdID0gZGVlcGVzdEFuY2VzdG9yLmZpcnN0Q2hpbGQ7XG5cdCAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IDE7XG5cdFxuXHQgICAgd2hpbGUgKGNoaWxkSW5kZXggPCBmaXJzdENoaWxkcmVuLmxlbmd0aCkge1xuXHQgICAgICB2YXIgY2hpbGQgPSBmaXJzdENoaWxkcmVuW2NoaWxkSW5kZXgrK107XG5cdCAgICAgIHZhciB0YXJnZXRDaGlsZDtcblx0XG5cdCAgICAgIHdoaWxlIChjaGlsZCkge1xuXHQgICAgICAgIHZhciBjaGlsZElEID0gUmVhY3RNb3VudC5nZXRJRChjaGlsZCk7XG5cdCAgICAgICAgaWYgKGNoaWxkSUQpIHtcblx0ICAgICAgICAgIC8vIEV2ZW4gaWYgd2UgZmluZCB0aGUgbm9kZSB3ZSdyZSBsb29raW5nIGZvciwgd2UgZmluaXNoIGxvb3Bpbmdcblx0ICAgICAgICAgIC8vIHRocm91Z2ggaXRzIHNpYmxpbmdzIHRvIGVuc3VyZSB0aGV5J3JlIGNhY2hlZCBzbyB0aGF0IHdlIGRvbid0IGhhdmVcblx0ICAgICAgICAgIC8vIHRvIHJldmlzaXQgdGhpcyBub2RlIGFnYWluLiBPdGhlcndpc2UsIHdlIG1ha2Ugbl4yIGNhbGxzIHRvIGdldElEXG5cdCAgICAgICAgICAvLyB3aGVuIHZpc2l0aW5nIHRoZSBtYW55IGNoaWxkcmVuIG9mIGEgc2luZ2xlIG5vZGUgaW4gb3JkZXIuXG5cdFxuXHQgICAgICAgICAgaWYgKHRhcmdldElEID09PSBjaGlsZElEKSB7XG5cdCAgICAgICAgICAgIHRhcmdldENoaWxkID0gY2hpbGQ7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKFJlYWN0SW5zdGFuY2VIYW5kbGVzLmlzQW5jZXN0b3JJRE9mKGNoaWxkSUQsIHRhcmdldElEKSkge1xuXHQgICAgICAgICAgICAvLyBJZiB3ZSBmaW5kIGEgY2hpbGQgd2hvc2UgSUQgaXMgYW4gYW5jZXN0b3Igb2YgdGhlIGdpdmVuIElELFxuXHQgICAgICAgICAgICAvLyB0aGVuIHdlIGNhbiBiZSBzdXJlIHRoYXQgd2Ugb25seSB3YW50IHRvIHNlYXJjaCB0aGUgc3VidHJlZVxuXHQgICAgICAgICAgICAvLyByb290ZWQgYXQgdGhpcyBjaGlsZCwgc28gd2UgY2FuIHRocm93IG91dCB0aGUgcmVzdCBvZiB0aGVcblx0ICAgICAgICAgICAgLy8gc2VhcmNoIHN0YXRlLlxuXHQgICAgICAgICAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IGNoaWxkSW5kZXggPSAwO1xuXHQgICAgICAgICAgICBmaXJzdENoaWxkcmVuLnB1c2goY2hpbGQuZmlyc3RDaGlsZCk7XG5cdCAgICAgICAgICB9XG5cdFxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAvLyBJZiB0aGlzIGNoaWxkIGhhZCBubyBJRCwgdGhlbiB0aGVyZSdzIGEgY2hhbmNlIHRoYXQgaXQgd2FzXG5cdCAgICAgICAgICAvLyBpbmplY3RlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBicm93c2VyLCBhcyB3aGVuIGEgYDx0YWJsZT5gXG5cdCAgICAgICAgICAvLyBlbGVtZW50IHNwcm91dHMgYW4gZXh0cmEgYDx0Ym9keT5gIGNoaWxkIGFzIGEgc2lkZSBlZmZlY3Qgb2Zcblx0ICAgICAgICAgIC8vIGAuaW5uZXJIVE1MYCBwYXJzaW5nLiBPcHRpbWlzdGljYWxseSBjb250aW51ZSBkb3duIHRoaXNcblx0ICAgICAgICAgIC8vIGJyYW5jaCwgYnV0IG5vdCBiZWZvcmUgZXhhbWluaW5nIHRoZSBvdGhlciBzaWJsaW5ncy5cblx0ICAgICAgICAgIGZpcnN0Q2hpbGRyZW4ucHVzaChjaGlsZC5maXJzdENoaWxkKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICh0YXJnZXRDaGlsZCkge1xuXHQgICAgICAgIC8vIEVtcHR5aW5nIGZpcnN0Q2hpbGRyZW4vZmluZENvbXBvbmVudFJvb3RSZXVzYWJsZUFycmF5IGlzXG5cdCAgICAgICAgLy8gbm90IG5lY2Vzc2FyeSBmb3IgY29ycmVjdG5lc3MsIGJ1dCBpdCBoZWxwcyB0aGUgR0MgcmVjbGFpbVxuXHQgICAgICAgIC8vIGFueSBub2RlcyB0aGF0IHdlcmUgbGVmdCBhdCB0aGUgZW5kIG9mIHRoZSBzZWFyY2guXG5cdCAgICAgICAgZmlyc3RDaGlsZHJlbi5sZW5ndGggPSAwO1xuXHRcblx0ICAgICAgICByZXR1cm4gdGFyZ2V0Q2hpbGQ7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IDA7XG5cdFxuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgZmFsc2UsXG5cdCAgICAgICdmaW5kQ29tcG9uZW50Um9vdCguLi4sICVzKTogVW5hYmxlIHRvIGZpbmQgZWxlbWVudC4gVGhpcyBwcm9iYWJseSAnICtcblx0ICAgICAgJ21lYW5zIHRoZSBET00gd2FzIHVuZXhwZWN0ZWRseSBtdXRhdGVkIChlLmcuLCBieSB0aGUgYnJvd3NlciksICcgK1xuXHQgICAgICAndXN1YWxseSBkdWUgdG8gZm9yZ2V0dGluZyBhIDx0Ym9keT4gd2hlbiB1c2luZyB0YWJsZXMsIG5lc3RpbmcgdGFncyAnICtcblx0ICAgICAgJ2xpa2UgPGZvcm0+LCA8cD4sIG9yIDxhPiwgb3IgdXNpbmcgbm9uLVNWRyBlbGVtZW50cyBpbiBhbiA8c3ZnPiAnICtcblx0ICAgICAgJ3BhcmVudC4gJyArXG5cdCAgICAgICdUcnkgaW5zcGVjdGluZyB0aGUgY2hpbGQgbm9kZXMgb2YgdGhlIGVsZW1lbnQgd2l0aCBSZWFjdCBJRCBgJXNgLicsXG5cdCAgICAgIHRhcmdldElELFxuXHQgICAgICBSZWFjdE1vdW50LmdldElEKGFuY2VzdG9yTm9kZSlcblx0ICAgICkgOiBpbnZhcmlhbnQoZmFsc2UpKTtcblx0ICB9LFxuXHRcblx0XG5cdCAgLyoqXG5cdCAgICogUmVhY3QgSUQgdXRpbGl0aWVzLlxuXHQgICAqL1xuXHRcblx0ICBnZXRSZWFjdFJvb3RJRDogZ2V0UmVhY3RSb290SUQsXG5cdFxuXHQgIGdldElEOiBnZXRJRCxcblx0XG5cdCAgc2V0SUQ6IHNldElELFxuXHRcblx0ICBnZXROb2RlOiBnZXROb2RlLFxuXHRcblx0ICBwdXJnZUlEOiBwdXJnZUlEXG5cdH07XG5cdFxuXHQvLyBEZXByZWNhdGlvbnMgKHJlbW92ZSBmb3IgMC4xMylcblx0UmVhY3RNb3VudC5yZW5kZXJDb21wb25lbnQgPSBkZXByZWNhdGVkKFxuXHQgICdSZWFjdE1vdW50Jyxcblx0ICAncmVuZGVyQ29tcG9uZW50Jyxcblx0ICAncmVuZGVyJyxcblx0ICB0aGlzLFxuXHQgIFJlYWN0TW91bnQucmVuZGVyXG5cdCk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0TW91bnQ7XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiA4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIEV2ZW50Q29uc3RhbnRzXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIga2V5TWlycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cdFxuXHR2YXIgUHJvcGFnYXRpb25QaGFzZXMgPSBrZXlNaXJyb3Ioe2J1YmJsZWQ6IG51bGwsIGNhcHR1cmVkOiBudWxsfSk7XG5cdFxuXHQvKipcblx0ICogVHlwZXMgb2YgcmF3IHNpZ25hbHMgZnJvbSB0aGUgYnJvd3NlciBjYXVnaHQgYXQgdGhlIHRvcCBsZXZlbC5cblx0ICovXG5cdHZhciB0b3BMZXZlbFR5cGVzID0ga2V5TWlycm9yKHtcblx0ICB0b3BCbHVyOiBudWxsLFxuXHQgIHRvcENoYW5nZTogbnVsbCxcblx0ICB0b3BDbGljazogbnVsbCxcblx0ICB0b3BDb21wb3NpdGlvbkVuZDogbnVsbCxcblx0ICB0b3BDb21wb3NpdGlvblN0YXJ0OiBudWxsLFxuXHQgIHRvcENvbXBvc2l0aW9uVXBkYXRlOiBudWxsLFxuXHQgIHRvcENvbnRleHRNZW51OiBudWxsLFxuXHQgIHRvcENvcHk6IG51bGwsXG5cdCAgdG9wQ3V0OiBudWxsLFxuXHQgIHRvcERvdWJsZUNsaWNrOiBudWxsLFxuXHQgIHRvcERyYWc6IG51bGwsXG5cdCAgdG9wRHJhZ0VuZDogbnVsbCxcblx0ICB0b3BEcmFnRW50ZXI6IG51bGwsXG5cdCAgdG9wRHJhZ0V4aXQ6IG51bGwsXG5cdCAgdG9wRHJhZ0xlYXZlOiBudWxsLFxuXHQgIHRvcERyYWdPdmVyOiBudWxsLFxuXHQgIHRvcERyYWdTdGFydDogbnVsbCxcblx0ICB0b3BEcm9wOiBudWxsLFxuXHQgIHRvcEVycm9yOiBudWxsLFxuXHQgIHRvcEZvY3VzOiBudWxsLFxuXHQgIHRvcElucHV0OiBudWxsLFxuXHQgIHRvcEtleURvd246IG51bGwsXG5cdCAgdG9wS2V5UHJlc3M6IG51bGwsXG5cdCAgdG9wS2V5VXA6IG51bGwsXG5cdCAgdG9wTG9hZDogbnVsbCxcblx0ICB0b3BNb3VzZURvd246IG51bGwsXG5cdCAgdG9wTW91c2VNb3ZlOiBudWxsLFxuXHQgIHRvcE1vdXNlT3V0OiBudWxsLFxuXHQgIHRvcE1vdXNlT3ZlcjogbnVsbCxcblx0ICB0b3BNb3VzZVVwOiBudWxsLFxuXHQgIHRvcFBhc3RlOiBudWxsLFxuXHQgIHRvcFJlc2V0OiBudWxsLFxuXHQgIHRvcFNjcm9sbDogbnVsbCxcblx0ICB0b3BTZWxlY3Rpb25DaGFuZ2U6IG51bGwsXG5cdCAgdG9wU3VibWl0OiBudWxsLFxuXHQgIHRvcFRleHRJbnB1dDogbnVsbCxcblx0ICB0b3BUb3VjaENhbmNlbDogbnVsbCxcblx0ICB0b3BUb3VjaEVuZDogbnVsbCxcblx0ICB0b3BUb3VjaE1vdmU6IG51bGwsXG5cdCAgdG9wVG91Y2hTdGFydDogbnVsbCxcblx0ICB0b3BXaGVlbDogbnVsbFxuXHR9KTtcblx0XG5cdHZhciBFdmVudENvbnN0YW50cyA9IHtcblx0ICB0b3BMZXZlbFR5cGVzOiB0b3BMZXZlbFR5cGVzLFxuXHQgIFByb3BhZ2F0aW9uUGhhc2VzOiBQcm9wYWdhdGlvblBoYXNlc1xuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBFdmVudENvbnN0YW50cztcblxuXG4vKioqLyB9LFxuLyogOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgUmVhY3RDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcblx0dmFyIFJlYWN0Q29udGV4dCA9IF9fd2VicGFja19yZXF1aXJlX18oNDUpO1xuXHR2YXIgUmVhY3RDdXJyZW50T3duZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblx0dmFyIFJlYWN0RWxlbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdHZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2KTtcblx0dmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTtcblx0dmFyIFJlYWN0RXJyb3JVdGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMTQyKTtcblx0dmFyIFJlYWN0TGVnYWN5RWxlbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpO1xuXHR2YXIgUmVhY3RPd25lciA9IF9fd2VicGFja19yZXF1aXJlX18oNjkpO1xuXHR2YXIgUmVhY3RQZXJmID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdHZhciBSZWFjdFByb3BUcmFuc2ZlcmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDYpO1xuXHR2YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oNzEpO1xuXHR2YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwKTtcblx0dmFyIFJlYWN0VXBkYXRlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHRcblx0dmFyIGFzc2lnbiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdHZhciBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNyk7XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIga2V5TWlycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cdHZhciBrZXlPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXHR2YXIgbW9uaXRvckNvZGVVc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KTtcblx0dmFyIG1hcE9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oODQpO1xuXHR2YXIgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU3KTtcblx0dmFyIHdhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXHRcblx0dmFyIE1JWElOU19LRVkgPSBrZXlPZih7bWl4aW5zOiBudWxsfSk7XG5cdFxuXHQvKipcblx0ICogUG9saWNpZXMgdGhhdCBkZXNjcmliZSBtZXRob2RzIGluIGBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEludGVyZmFjZWAuXG5cdCAqL1xuXHR2YXIgU3BlY1BvbGljeSA9IGtleU1pcnJvcih7XG5cdCAgLyoqXG5cdCAgICogVGhlc2UgbWV0aG9kcyBtYXkgYmUgZGVmaW5lZCBvbmx5IG9uY2UgYnkgdGhlIGNsYXNzIHNwZWNpZmljYXRpb24gb3IgbWl4aW4uXG5cdCAgICovXG5cdCAgREVGSU5FX09OQ0U6IG51bGwsXG5cdCAgLyoqXG5cdCAgICogVGhlc2UgbWV0aG9kcyBtYXkgYmUgZGVmaW5lZCBieSBib3RoIHRoZSBjbGFzcyBzcGVjaWZpY2F0aW9uIGFuZCBtaXhpbnMuXG5cdCAgICogU3Vic2VxdWVudCBkZWZpbml0aW9ucyB3aWxsIGJlIGNoYWluZWQuIFRoZXNlIG1ldGhvZHMgbXVzdCByZXR1cm4gdm9pZC5cblx0ICAgKi9cblx0ICBERUZJTkVfTUFOWTogbnVsbCxcblx0ICAvKipcblx0ICAgKiBUaGVzZSBtZXRob2RzIGFyZSBvdmVycmlkaW5nIHRoZSBiYXNlIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50IGNsYXNzLlxuXHQgICAqL1xuXHQgIE9WRVJSSURFX0JBU0U6IG51bGwsXG5cdCAgLyoqXG5cdCAgICogVGhlc2UgbWV0aG9kcyBhcmUgc2ltaWxhciB0byBERUZJTkVfTUFOWSwgZXhjZXB0IHdlIGFzc3VtZSB0aGV5IHJldHVyblxuXHQgICAqIG9iamVjdHMuIFdlIHRyeSB0byBtZXJnZSB0aGUga2V5cyBvZiB0aGUgcmV0dXJuIHZhbHVlcyBvZiBhbGwgdGhlIG1peGVkIGluXG5cdCAgICogZnVuY3Rpb25zLiBJZiB0aGVyZSBpcyBhIGtleSBjb25mbGljdCB3ZSB0aHJvdy5cblx0ICAgKi9cblx0ICBERUZJTkVfTUFOWV9NRVJHRUQ6IG51bGxcblx0fSk7XG5cdFxuXHRcblx0dmFyIGluamVjdGVkTWl4aW5zID0gW107XG5cdFxuXHQvKipcblx0ICogQ29tcG9zaXRlIGNvbXBvbmVudHMgYXJlIGhpZ2hlci1sZXZlbCBjb21wb25lbnRzIHRoYXQgY29tcG9zZSBvdGhlciBjb21wb3NpdGVcblx0ICogb3IgbmF0aXZlIGNvbXBvbmVudHMuXG5cdCAqXG5cdCAqIFRvIGNyZWF0ZSBhIG5ldyB0eXBlIG9mIGBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudGAsIHBhc3MgYSBzcGVjaWZpY2F0aW9uIG9mXG5cdCAqIHlvdXIgbmV3IGNsYXNzIHRvIGBSZWFjdC5jcmVhdGVDbGFzc2AuIFRoZSBvbmx5IHJlcXVpcmVtZW50IG9mIHlvdXIgY2xhc3Ncblx0ICogc3BlY2lmaWNhdGlvbiBpcyB0aGF0IHlvdSBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuXG5cdCAqXG5cdCAqICAgdmFyIE15Q29tcG9uZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHQgKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcblx0ICogICAgICAgcmV0dXJuIDxkaXY+SGVsbG8gV29ybGQ8L2Rpdj47XG5cdCAqICAgICB9XG5cdCAqICAgfSk7XG5cdCAqXG5cdCAqIFRoZSBjbGFzcyBzcGVjaWZpY2F0aW9uIHN1cHBvcnRzIGEgc3BlY2lmaWMgcHJvdG9jb2wgb2YgbWV0aG9kcyB0aGF0IGhhdmVcblx0ICogc3BlY2lhbCBtZWFuaW5nIChlLmcuIGByZW5kZXJgKS4gU2VlIGBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEludGVyZmFjZWAgZm9yXG5cdCAqIG1vcmUgdGhlIGNvbXByZWhlbnNpdmUgcHJvdG9jb2wuIEFueSBvdGhlciBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIGluIHRoZVxuXHQgKiBjbGFzcyBzcGVjaWZpY2F0aW9uIHdpbGwgYXZhaWxhYmxlIG9uIHRoZSBwcm90b3R5cGUuXG5cdCAqXG5cdCAqIEBpbnRlcmZhY2UgUmVhY3RDb21wb3NpdGVDb21wb25lbnRJbnRlcmZhY2Vcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHR2YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnRJbnRlcmZhY2UgPSB7XG5cdFxuXHQgIC8qKlxuXHQgICAqIEFuIGFycmF5IG9mIE1peGluIG9iamVjdHMgdG8gaW5jbHVkZSB3aGVuIGRlZmluaW5nIHlvdXIgY29tcG9uZW50LlxuXHQgICAqXG5cdCAgICogQHR5cGUge2FycmF5fVxuXHQgICAqIEBvcHRpb25hbFxuXHQgICAqL1xuXHQgIG1peGluczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblx0XG5cdCAgLyoqXG5cdCAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyBhbmQgbWV0aG9kcyB0aGF0IHNob3VsZCBiZSBkZWZpbmVkIG9uXG5cdCAgICogdGhlIGNvbXBvbmVudCdzIGNvbnN0cnVjdG9yIGluc3RlYWQgb2YgaXRzIHByb3RvdHlwZSAoc3RhdGljIG1ldGhvZHMpLlxuXHQgICAqXG5cdCAgICogQHR5cGUge29iamVjdH1cblx0ICAgKiBAb3B0aW9uYWxcblx0ICAgKi9cblx0ICBzdGF0aWNzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXHRcblx0ICAvKipcblx0ICAgKiBEZWZpbml0aW9uIG9mIHByb3AgdHlwZXMgZm9yIHRoaXMgY29tcG9uZW50LlxuXHQgICAqXG5cdCAgICogQHR5cGUge29iamVjdH1cblx0ICAgKiBAb3B0aW9uYWxcblx0ICAgKi9cblx0ICBwcm9wVHlwZXM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cdFxuXHQgIC8qKlxuXHQgICAqIERlZmluaXRpb24gb2YgY29udGV4dCB0eXBlcyBmb3IgdGhpcyBjb21wb25lbnQuXG5cdCAgICpcblx0ICAgKiBAdHlwZSB7b2JqZWN0fVxuXHQgICAqIEBvcHRpb25hbFxuXHQgICAqL1xuXHQgIGNvbnRleHRUeXBlczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblx0XG5cdCAgLyoqXG5cdCAgICogRGVmaW5pdGlvbiBvZiBjb250ZXh0IHR5cGVzIHRoaXMgY29tcG9uZW50IHNldHMgZm9yIGl0cyBjaGlsZHJlbi5cblx0ICAgKlxuXHQgICAqIEB0eXBlIHtvYmplY3R9XG5cdCAgICogQG9wdGlvbmFsXG5cdCAgICovXG5cdCAgY2hpbGRDb250ZXh0VHlwZXM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cdFxuXHQgIC8vID09PT0gRGVmaW5pdGlvbiBtZXRob2RzID09PT1cblx0XG5cdCAgLyoqXG5cdCAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZC4gVmFsdWVzIGluIHRoZSBtYXBwaW5nIHdpbGwgYmUgc2V0IG9uXG5cdCAgICogYHRoaXMucHJvcHNgIGlmIHRoYXQgcHJvcCBpcyBub3Qgc3BlY2lmaWVkIChpLmUuIHVzaW5nIGFuIGBpbmAgY2hlY2spLlxuXHQgICAqXG5cdCAgICogVGhpcyBtZXRob2QgaXMgaW52b2tlZCBiZWZvcmUgYGdldEluaXRpYWxTdGF0ZWAgYW5kIHRoZXJlZm9yZSBjYW5ub3QgcmVseVxuXHQgICAqIG9uIGB0aGlzLnN0YXRlYCBvciB1c2UgYHRoaXMuc2V0U3RhdGVgLlxuXHQgICAqXG5cdCAgICogQHJldHVybiB7b2JqZWN0fVxuXHQgICAqIEBvcHRpb25hbFxuXHQgICAqL1xuXHQgIGdldERlZmF1bHRQcm9wczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG5cdFxuXHQgIC8qKlxuXHQgICAqIEludm9rZWQgb25jZSBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgYmUgdXNlZFxuXHQgICAqIGFzIHRoZSBpbml0aWFsIHZhbHVlIG9mIGB0aGlzLnN0YXRlYC5cblx0ICAgKlxuXHQgICAqICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcblx0ICAgKiAgICAgcmV0dXJuIHtcblx0ICAgKiAgICAgICBpc09uOiBmYWxzZSxcblx0ICAgKiAgICAgICBmb29CYXo6IG5ldyBCYXpGb28oKVxuXHQgICAqICAgICB9XG5cdCAgICogICB9XG5cdCAgICpcblx0ICAgKiBAcmV0dXJuIHtvYmplY3R9XG5cdCAgICogQG9wdGlvbmFsXG5cdCAgICovXG5cdCAgZ2V0SW5pdGlhbFN0YXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCxcblx0XG5cdCAgLyoqXG5cdCAgICogQHJldHVybiB7b2JqZWN0fVxuXHQgICAqIEBvcHRpb25hbFxuXHQgICAqL1xuXHQgIGdldENoaWxkQ29udGV4dDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG5cdFxuXHQgIC8qKlxuXHQgICAqIFVzZXMgcHJvcHMgZnJvbSBgdGhpcy5wcm9wc2AgYW5kIHN0YXRlIGZyb20gYHRoaXMuc3RhdGVgIHRvIHJlbmRlciB0aGVcblx0ICAgKiBzdHJ1Y3R1cmUgb2YgdGhlIGNvbXBvbmVudC5cblx0ICAgKlxuXHQgICAqIE5vIGd1YXJhbnRlZXMgYXJlIG1hZGUgYWJvdXQgd2hlbiBvciBob3cgb2Z0ZW4gdGhpcyBtZXRob2QgaXMgaW52b2tlZCwgc29cblx0ICAgKiBpdCBtdXN0IG5vdCBoYXZlIHNpZGUgZWZmZWN0cy5cblx0ICAgKlxuXHQgICAqICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcblx0ICAgKiAgICAgdmFyIG5hbWUgPSB0aGlzLnByb3BzLm5hbWU7XG5cdCAgICogICAgIHJldHVybiA8ZGl2PkhlbGxvLCB7bmFtZX0hPC9kaXY+O1xuXHQgICAqICAgfVxuXHQgICAqXG5cdCAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9XG5cdCAgICogQG5vc2lkZWVmZmVjdHNcblx0ICAgKiBAcmVxdWlyZWRcblx0ICAgKi9cblx0ICByZW5kZXI6IFNwZWNQb2xpY3kuREVGSU5FX09OQ0UsXG5cdFxuXHRcblx0XG5cdCAgLy8gPT09PSBEZWxlZ2F0ZSBtZXRob2RzID09PT1cblx0XG5cdCAgLyoqXG5cdCAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgaW5pdGlhbGx5IGNyZWF0ZWQgYW5kIGFib3V0IHRvIGJlIG1vdW50ZWQuXG5cdCAgICogVGhpcyBtYXkgaGF2ZSBzaWRlIGVmZmVjdHMsIGJ1dCBhbnkgZXh0ZXJuYWwgc3Vic2NyaXB0aW9ucyBvciBkYXRhIGNyZWF0ZWRcblx0ICAgKiBieSB0aGlzIG1ldGhvZCBtdXN0IGJlIGNsZWFuZWQgdXAgaW4gYGNvbXBvbmVudFdpbGxVbm1vdW50YC5cblx0ICAgKlxuXHQgICAqIEBvcHRpb25hbFxuXHQgICAqL1xuXHQgIGNvbXBvbmVudFdpbGxNb3VudDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblx0XG5cdCAgLyoqXG5cdCAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gbW91bnRlZCBhbmQgaGFzIGEgRE9NIHJlcHJlc2VudGF0aW9uLlxuXHQgICAqIEhvd2V2ZXIsIHRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IHRoZSBET00gbm9kZSBpcyBpbiB0aGUgZG9jdW1lbnQuXG5cdCAgICpcblx0ICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBvcGVyYXRlIG9uIHRoZSBET00gd2hlbiB0aGUgY29tcG9uZW50IGhhc1xuXHQgICAqIGJlZW4gbW91bnRlZCAoaW5pdGlhbGl6ZWQgYW5kIHJlbmRlcmVkKSBmb3IgdGhlIGZpcnN0IHRpbWUuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHJvb3ROb2RlIERPTSBlbGVtZW50IHJlcHJlc2VudGluZyB0aGUgY29tcG9uZW50LlxuXHQgICAqIEBvcHRpb25hbFxuXHQgICAqL1xuXHQgIGNvbXBvbmVudERpZE1vdW50OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXHRcblx0ICAvKipcblx0ICAgKiBJbnZva2VkIGJlZm9yZSB0aGUgY29tcG9uZW50IHJlY2VpdmVzIG5ldyBwcm9wcy5cblx0ICAgKlxuXHQgICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHJlYWN0IHRvIGEgcHJvcCB0cmFuc2l0aW9uIGJ5IHVwZGF0aW5nIHRoZVxuXHQgICAqIHN0YXRlIHVzaW5nIGB0aGlzLnNldFN0YXRlYC4gQ3VycmVudCBwcm9wcyBhcmUgYWNjZXNzZWQgdmlhIGB0aGlzLnByb3BzYC5cblx0ICAgKlxuXHQgICAqICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0Q29udGV4dCkge1xuXHQgICAqICAgICB0aGlzLnNldFN0YXRlKHtcblx0ICAgKiAgICAgICBsaWtlc0luY3JlYXNpbmc6IG5leHRQcm9wcy5saWtlQ291bnQgPiB0aGlzLnByb3BzLmxpa2VDb3VudFxuXHQgICAqICAgICB9KTtcblx0ICAgKiAgIH1cblx0ICAgKlxuXHQgICAqIE5PVEU6IFRoZXJlIGlzIG5vIGVxdWl2YWxlbnQgYGNvbXBvbmVudFdpbGxSZWNlaXZlU3RhdGVgLiBBbiBpbmNvbWluZyBwcm9wXG5cdCAgICogdHJhbnNpdGlvbiBtYXkgY2F1c2UgYSBzdGF0ZSBjaGFuZ2UsIGJ1dCB0aGUgb3Bwb3NpdGUgaXMgbm90IHRydWUuIElmIHlvdVxuXHQgICAqIG5lZWQgaXQsIHlvdSBhcmUgcHJvYmFibHkgbG9va2luZyBmb3IgYGNvbXBvbmVudFdpbGxVcGRhdGVgLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuXHQgICAqIEBvcHRpb25hbFxuXHQgICAqL1xuXHQgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cdFxuXHQgIC8qKlxuXHQgICAqIEludm9rZWQgd2hpbGUgZGVjaWRpbmcgaWYgdGhlIGNvbXBvbmVudCBzaG91bGQgYmUgdXBkYXRlZCBhcyBhIHJlc3VsdCBvZlxuXHQgICAqIHJlY2VpdmluZyBuZXcgcHJvcHMsIHN0YXRlIGFuZC9vciBjb250ZXh0LlxuXHQgICAqXG5cdCAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gYHJldHVybiBmYWxzZWAgd2hlbiB5b3UncmUgY2VydGFpbiB0aGF0IHRoZVxuXHQgICAqIHRyYW5zaXRpb24gdG8gdGhlIG5ldyBwcm9wcy9zdGF0ZS9jb250ZXh0IHdpbGwgbm90IHJlcXVpcmUgYSBjb21wb25lbnRcblx0ICAgKiB1cGRhdGUuXG5cdCAgICpcblx0ICAgKiAgIHNob3VsZENvbXBvbmVudFVwZGF0ZTogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KSB7XG5cdCAgICogICAgIHJldHVybiAhZXF1YWwobmV4dFByb3BzLCB0aGlzLnByb3BzKSB8fFxuXHQgICAqICAgICAgICFlcXVhbChuZXh0U3RhdGUsIHRoaXMuc3RhdGUpIHx8XG5cdCAgICogICAgICAgIWVxdWFsKG5leHRDb250ZXh0LCB0aGlzLmNvbnRleHQpO1xuXHQgICAqICAgfVxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuXHQgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlXG5cdCAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0Q29udGV4dFxuXHQgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNvbXBvbmVudCBzaG91bGQgdXBkYXRlLlxuXHQgICAqIEBvcHRpb25hbFxuXHQgICAqL1xuXHQgIHNob3VsZENvbXBvbmVudFVwZGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfT05DRSxcblx0XG5cdCAgLyoqXG5cdCAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYWJvdXQgdG8gdXBkYXRlIGR1ZSB0byBhIHRyYW5zaXRpb24gZnJvbVxuXHQgICAqIGB0aGlzLnByb3BzYCwgYHRoaXMuc3RhdGVgIGFuZCBgdGhpcy5jb250ZXh0YCB0byBgbmV4dFByb3BzYCwgYG5leHRTdGF0ZWBcblx0ICAgKiBhbmQgYG5leHRDb250ZXh0YC5cblx0ICAgKlxuXHQgICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHBlcmZvcm0gcHJlcGFyYXRpb24gYmVmb3JlIGFuIHVwZGF0ZSBvY2N1cnMuXG5cdCAgICpcblx0ICAgKiBOT1RFOiBZb3UgKipjYW5ub3QqKiB1c2UgYHRoaXMuc2V0U3RhdGUoKWAgaW4gdGhpcyBtZXRob2QuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG5cdCAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0U3RhdGVcblx0ICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDb250ZXh0XG5cdCAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuXHQgICAqIEBvcHRpb25hbFxuXHQgICAqL1xuXHQgIGNvbXBvbmVudFdpbGxVcGRhdGU6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cdFxuXHQgIC8qKlxuXHQgICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50J3MgRE9NIHJlcHJlc2VudGF0aW9uIGhhcyBiZWVuIHVwZGF0ZWQuXG5cdCAgICpcblx0ICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBvcGVyYXRlIG9uIHRoZSBET00gd2hlbiB0aGUgY29tcG9uZW50IGhhc1xuXHQgICAqIGJlZW4gdXBkYXRlZC5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2UHJvcHNcblx0ICAgKiBAcGFyYW0gez9vYmplY3R9IHByZXZTdGF0ZVxuXHQgICAqIEBwYXJhbSB7P29iamVjdH0gcHJldkNvbnRleHRcblx0ICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHJvb3ROb2RlIERPTSBlbGVtZW50IHJlcHJlc2VudGluZyB0aGUgY29tcG9uZW50LlxuXHQgICAqIEBvcHRpb25hbFxuXHQgICAqL1xuXHQgIGNvbXBvbmVudERpZFVwZGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblx0XG5cdCAgLyoqXG5cdCAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYWJvdXQgdG8gYmUgcmVtb3ZlZCBmcm9tIGl0cyBwYXJlbnQgYW5kIGhhdmVcblx0ICAgKiBpdHMgRE9NIHJlcHJlc2VudGF0aW9uIGRlc3Ryb3llZC5cblx0ICAgKlxuXHQgICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGRlYWxsb2NhdGUgYW55IGV4dGVybmFsIHJlc291cmNlcy5cblx0ICAgKlxuXHQgICAqIE5PVEU6IFRoZXJlIGlzIG5vIGBjb21wb25lbnREaWRVbm1vdW50YCBzaW5jZSB5b3VyIGNvbXBvbmVudCB3aWxsIGhhdmUgYmVlblxuXHQgICAqIGRlc3Ryb3llZCBieSB0aGF0IHBvaW50LlxuXHQgICAqXG5cdCAgICogQG9wdGlvbmFsXG5cdCAgICovXG5cdCAgY29tcG9uZW50V2lsbFVubW91bnQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cdFxuXHRcblx0XG5cdCAgLy8gPT09PSBBZHZhbmNlZCBtZXRob2RzID09PT1cblx0XG5cdCAgLyoqXG5cdCAgICogVXBkYXRlcyB0aGUgY29tcG9uZW50J3MgY3VycmVudGx5IG1vdW50ZWQgRE9NIHJlcHJlc2VudGF0aW9uLlxuXHQgICAqXG5cdCAgICogQnkgZGVmYXVsdCwgdGhpcyBpbXBsZW1lbnRzIFJlYWN0J3MgcmVuZGVyaW5nIGFuZCByZWNvbmNpbGlhdGlvbiBhbGdvcml0aG0uXG5cdCAgICogU29waGlzdGljYXRlZCBjbGllbnRzIG1heSB3aXNoIHRvIG92ZXJyaWRlIHRoaXMuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG5cdCAgICogQGludGVybmFsXG5cdCAgICogQG92ZXJyaWRhYmxlXG5cdCAgICovXG5cdCAgdXBkYXRlQ29tcG9uZW50OiBTcGVjUG9saWN5Lk9WRVJSSURFX0JBU0Vcblx0XG5cdH07XG5cdFxuXHQvKipcblx0ICogTWFwcGluZyBmcm9tIGNsYXNzIHNwZWNpZmljYXRpb24ga2V5cyB0byBzcGVjaWFsIHByb2Nlc3NpbmcgZnVuY3Rpb25zLlxuXHQgKlxuXHQgKiBBbHRob3VnaCB0aGVzZSBhcmUgZGVjbGFyZWQgbGlrZSBpbnN0YW5jZSBwcm9wZXJ0aWVzIGluIHRoZSBzcGVjaWZpY2F0aW9uXG5cdCAqIHdoZW4gZGVmaW5pbmcgY2xhc3NlcyB1c2luZyBgUmVhY3QuY3JlYXRlQ2xhc3NgLCB0aGV5IGFyZSBhY3R1YWxseSBzdGF0aWNcblx0ICogYW5kIGFyZSBhY2Nlc3NpYmxlIG9uIHRoZSBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIHRoZSBwcm90b3R5cGUuIERlc3BpdGVcblx0ICogYmVpbmcgc3RhdGljLCB0aGV5IG11c3QgYmUgZGVmaW5lZCBvdXRzaWRlIG9mIHRoZSBcInN0YXRpY3NcIiBrZXkgdW5kZXJcblx0ICogd2hpY2ggYWxsIG90aGVyIHN0YXRpYyBtZXRob2RzIGFyZSBkZWZpbmVkLlxuXHQgKi9cblx0dmFyIFJFU0VSVkVEX1NQRUNfS0VZUyA9IHtcblx0ICBkaXNwbGF5TmFtZTogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGRpc3BsYXlOYW1lKSB7XG5cdCAgICBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXHQgIH0sXG5cdCAgbWl4aW5zOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgbWl4aW5zKSB7XG5cdCAgICBpZiAobWl4aW5zKSB7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWl4aW5zLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIG1peGluc1tpXSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LFxuXHQgIGNoaWxkQ29udGV4dFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMpIHtcblx0ICAgIHZhbGlkYXRlVHlwZURlZihcblx0ICAgICAgQ29uc3RydWN0b3IsXG5cdCAgICAgIGNoaWxkQ29udGV4dFR5cGVzLFxuXHQgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25zLmNoaWxkQ29udGV4dFxuXHQgICAgKTtcblx0ICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzID0gYXNzaWduKFxuXHQgICAgICB7fSxcblx0ICAgICAgQ29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMsXG5cdCAgICAgIGNoaWxkQ29udGV4dFR5cGVzXG5cdCAgICApO1xuXHQgIH0sXG5cdCAgY29udGV4dFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgY29udGV4dFR5cGVzKSB7XG5cdCAgICB2YWxpZGF0ZVR5cGVEZWYoXG5cdCAgICAgIENvbnN0cnVjdG9yLFxuXHQgICAgICBjb250ZXh0VHlwZXMsXG5cdCAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY29udGV4dFxuXHQgICAgKTtcblx0ICAgIENvbnN0cnVjdG9yLmNvbnRleHRUeXBlcyA9IGFzc2lnbihcblx0ICAgICAge30sXG5cdCAgICAgIENvbnN0cnVjdG9yLmNvbnRleHRUeXBlcyxcblx0ICAgICAgY29udGV4dFR5cGVzXG5cdCAgICApO1xuXHQgIH0sXG5cdCAgLyoqXG5cdCAgICogU3BlY2lhbCBjYXNlIGdldERlZmF1bHRQcm9wcyB3aGljaCBzaG91bGQgbW92ZSBpbnRvIHN0YXRpY3MgYnV0IHJlcXVpcmVzXG5cdCAgICogYXV0b21hdGljIG1lcmdpbmcuXG5cdCAgICovXG5cdCAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgZ2V0RGVmYXVsdFByb3BzKSB7XG5cdCAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG5cdCAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyA9IGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKFxuXHQgICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyxcblx0ICAgICAgICBnZXREZWZhdWx0UHJvcHNcblx0ICAgICAgKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyA9IGdldERlZmF1bHRQcm9wcztcblx0ICAgIH1cblx0ICB9LFxuXHQgIHByb3BUeXBlczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIHByb3BUeXBlcykge1xuXHQgICAgdmFsaWRhdGVUeXBlRGVmKFxuXHQgICAgICBDb25zdHJ1Y3Rvcixcblx0ICAgICAgcHJvcFR5cGVzLFxuXHQgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3Bcblx0ICAgICk7XG5cdCAgICBDb25zdHJ1Y3Rvci5wcm9wVHlwZXMgPSBhc3NpZ24oXG5cdCAgICAgIHt9LFxuXHQgICAgICBDb25zdHJ1Y3Rvci5wcm9wVHlwZXMsXG5cdCAgICAgIHByb3BUeXBlc1xuXHQgICAgKTtcblx0ICB9LFxuXHQgIHN0YXRpY3M6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG5cdCAgICBtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3RhdGljcyk7XG5cdCAgfVxuXHR9O1xuXHRcblx0ZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGNvbXBvbmVudCkge1xuXHQgIHZhciBvd25lciA9IGNvbXBvbmVudC5fb3duZXIgfHwgbnVsbDtcblx0ICBpZiAob3duZXIgJiYgb3duZXIuY29uc3RydWN0b3IgJiYgb3duZXIuY29uc3RydWN0b3IuZGlzcGxheU5hbWUpIHtcblx0ICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgb3duZXIuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgK1xuXHQgICAgICAnYC4nO1xuXHQgIH1cblx0ICByZXR1cm4gJyc7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgdHlwZURlZiwgbG9jYXRpb24pIHtcblx0ICBmb3IgKHZhciBwcm9wTmFtZSBpbiB0eXBlRGVmKSB7XG5cdCAgICBpZiAodHlwZURlZi5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcblx0ICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgICB0eXBlb2YgdHlwZURlZltwcm9wTmFtZV0gPT0gJ2Z1bmN0aW9uJyxcblx0ICAgICAgICAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSAnICtcblx0ICAgICAgICAnUmVhY3QuUHJvcFR5cGVzLicsXG5cdCAgICAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50Jyxcblx0ICAgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sXG5cdCAgICAgICAgcHJvcE5hbWVcblx0ICAgICAgKSA6IGludmFyaWFudCh0eXBlb2YgdHlwZURlZltwcm9wTmFtZV0gPT0gJ2Z1bmN0aW9uJykpO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gdmFsaWRhdGVNZXRob2RPdmVycmlkZShwcm90bywgbmFtZSkge1xuXHQgIHZhciBzcGVjUG9saWN5ID0gUmVhY3RDb21wb3NpdGVDb21wb25lbnRJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkobmFtZSkgP1xuXHQgICAgUmVhY3RDb21wb3NpdGVDb21wb25lbnRJbnRlcmZhY2VbbmFtZV0gOlxuXHQgICAgbnVsbDtcblx0XG5cdCAgLy8gRGlzYWxsb3cgb3ZlcnJpZGluZyBvZiBiYXNlIGNsYXNzIG1ldGhvZHMgdW5sZXNzIGV4cGxpY2l0bHkgYWxsb3dlZC5cblx0ICBpZiAoUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5PVkVSUklERV9CQVNFLFxuXHQgICAgICAnUmVhY3RDb21wb3NpdGVDb21wb25lbnRJbnRlcmZhY2U6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBvdmVycmlkZSAnICtcblx0ICAgICAgJ2Alc2AgZnJvbSB5b3VyIGNsYXNzIHNwZWNpZmljYXRpb24uIEVuc3VyZSB0aGF0IHlvdXIgbWV0aG9kIG5hbWVzICcgK1xuXHQgICAgICAnZG8gbm90IG92ZXJsYXAgd2l0aCBSZWFjdCBtZXRob2RzLicsXG5cdCAgICAgIG5hbWVcblx0ICAgICkgOiBpbnZhcmlhbnQoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5PVkVSUklERV9CQVNFKSk7XG5cdCAgfVxuXHRcblx0ICAvLyBEaXNhbGxvdyBkZWZpbmluZyBtZXRob2RzIG1vcmUgdGhhbiBvbmNlIHVubGVzcyBleHBsaWNpdGx5IGFsbG93ZWQuXG5cdCAgaWYgKHByb3RvLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG5cdCAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZIHx8XG5cdCAgICAgIHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VELFxuXHQgICAgICAnUmVhY3RDb21wb3NpdGVDb21wb25lbnRJbnRlcmZhY2U6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgJyArXG5cdCAgICAgICdgJXNgIG9uIHlvdXIgY29tcG9uZW50IG1vcmUgdGhhbiBvbmNlLiBUaGlzIGNvbmZsaWN0IG1heSBiZSBkdWUgJyArXG5cdCAgICAgICd0byBhIG1peGluLicsXG5cdCAgICAgIG5hbWVcblx0ICAgICkgOiBpbnZhcmlhbnQoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWSB8fFxuXHQgICAgc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQpKTtcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHZhbGlkYXRlTGlmZUN5Y2xlT25SZXBsYWNlU3RhdGUoaW5zdGFuY2UpIHtcblx0ICB2YXIgY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgPSBpbnN0YW5jZS5fY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGU7XG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgIGluc3RhbmNlLmlzTW91bnRlZCgpIHx8XG5cdCAgICAgIGNvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlID09PSBDb21wb3NpdGVMaWZlQ3ljbGUuTU9VTlRJTkcsXG5cdCAgICAncmVwbGFjZVN0YXRlKC4uLik6IENhbiBvbmx5IHVwZGF0ZSBhIG1vdW50ZWQgb3IgbW91bnRpbmcgY29tcG9uZW50Lidcblx0ICApIDogaW52YXJpYW50KGluc3RhbmNlLmlzTW91bnRlZCgpIHx8XG5cdCAgICBjb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9PT0gQ29tcG9zaXRlTGlmZUN5Y2xlLk1PVU5USU5HKSk7XG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCxcblx0ICAgICdyZXBsYWNlU3RhdGUoLi4uKTogQ2Fubm90IHVwZGF0ZSBkdXJpbmcgYW4gZXhpc3Rpbmcgc3RhdGUgdHJhbnNpdGlvbiAnICtcblx0ICAgICcoc3VjaCBhcyB3aXRoaW4gYHJlbmRlcmApLiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uICcgK1xuXHQgICAgJ29mIHByb3BzIGFuZCBzdGF0ZS4nXG5cdCAgKSA6IGludmFyaWFudChSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwpKTtcblx0ICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KGNvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlICE9PSBDb21wb3NpdGVMaWZlQ3ljbGUuVU5NT1VOVElORyxcblx0ICAgICdyZXBsYWNlU3RhdGUoLi4uKTogQ2Fubm90IHVwZGF0ZSB3aGlsZSB1bm1vdW50aW5nIGNvbXBvbmVudC4gVGhpcyAnICtcblx0ICAgICd1c3VhbGx5IG1lYW5zIHlvdSBjYWxsZWQgc2V0U3RhdGUoKSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50Lidcblx0ICApIDogaW52YXJpYW50KGNvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlICE9PSBDb21wb3NpdGVMaWZlQ3ljbGUuVU5NT1VOVElORykpO1xuXHR9XG5cdFxuXHQvKipcblx0ICogTWl4aW4gaGVscGVyIHdoaWNoIGhhbmRsZXMgcG9saWN5IHZhbGlkYXRpb24gYW5kIHJlc2VydmVkXG5cdCAqIHNwZWNpZmljYXRpb24ga2V5cyB3aGVuIGJ1aWxkaW5nIGBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudGAgY2xhc3NzZXMuXG5cdCAqL1xuXHRmdW5jdGlvbiBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3BlYykge1xuXHQgIGlmICghc3BlYykge1xuXHQgICAgcmV0dXJuO1xuXHQgIH1cblx0XG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICFSZWFjdExlZ2FjeUVsZW1lbnQuaXNWYWxpZEZhY3Rvcnkoc3BlYyksXG5cdCAgICAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQ6IFlvdVxcJ3JlIGF0dGVtcHRpbmcgdG8gJyArXG5cdCAgICAndXNlIGEgY29tcG9uZW50IGNsYXNzIGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgcmVndWxhciBvYmplY3QuJ1xuXHQgICkgOiBpbnZhcmlhbnQoIVJlYWN0TGVnYWN5RWxlbWVudC5pc1ZhbGlkRmFjdG9yeShzcGVjKSkpO1xuXHQgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHNwZWMpLFxuXHQgICAgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50OiBZb3VcXCdyZSBhdHRlbXB0aW5nIHRvICcgK1xuXHQgICAgJ3VzZSBhIGNvbXBvbmVudCBhcyBhIG1peGluLiBJbnN0ZWFkLCBqdXN0IHVzZSBhIHJlZ3VsYXIgb2JqZWN0Lidcblx0ICApIDogaW52YXJpYW50KCFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoc3BlYykpKTtcblx0XG5cdCAgdmFyIHByb3RvID0gQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXHRcblx0ICAvLyBCeSBoYW5kbGluZyBtaXhpbnMgYmVmb3JlIGFueSBvdGhlciBwcm9wZXJ0aWVzLCB3ZSBlbnN1cmUgdGhlIHNhbWVcblx0ICAvLyBjaGFpbmluZyBvcmRlciBpcyBhcHBsaWVkIHRvIG1ldGhvZHMgd2l0aCBERUZJTkVfTUFOWSBwb2xpY3ksIHdoZXRoZXJcblx0ICAvLyBtaXhpbnMgYXJlIGxpc3RlZCBiZWZvcmUgb3IgYWZ0ZXIgdGhlc2UgbWV0aG9kcyBpbiB0aGUgc3BlYy5cblx0ICBpZiAoc3BlYy5oYXNPd25Qcm9wZXJ0eShNSVhJTlNfS0VZKSkge1xuXHQgICAgUkVTRVJWRURfU1BFQ19LRVlTLm1peGlucyhDb25zdHJ1Y3Rvciwgc3BlYy5taXhpbnMpO1xuXHQgIH1cblx0XG5cdCAgZm9yICh2YXIgbmFtZSBpbiBzcGVjKSB7XG5cdCAgICBpZiAoIXNwZWMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcblx0ICAgICAgY29udGludWU7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKG5hbWUgPT09IE1JWElOU19LRVkpIHtcblx0ICAgICAgLy8gV2UgaGF2ZSBhbHJlYWR5IGhhbmRsZWQgbWl4aW5zIGluIGEgc3BlY2lhbCBjYXNlIGFib3ZlXG5cdCAgICAgIGNvbnRpbnVlO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBwcm9wZXJ0eSA9IHNwZWNbbmFtZV07XG5cdCAgICB2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlKHByb3RvLCBuYW1lKTtcblx0XG5cdCAgICBpZiAoUkVTRVJWRURfU1BFQ19LRVlTLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG5cdCAgICAgIFJFU0VSVkVEX1NQRUNfS0VZU1tuYW1lXShDb25zdHJ1Y3RvciwgcHJvcGVydHkpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gU2V0dXAgbWV0aG9kcyBvbiBwcm90b3R5cGU6XG5cdCAgICAgIC8vIFRoZSBmb2xsb3dpbmcgbWVtYmVyIG1ldGhvZHMgc2hvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGJvdW5kOlxuXHQgICAgICAvLyAxLiBFeHBlY3RlZCBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCBtZXRob2RzIChpbiB0aGUgXCJpbnRlcmZhY2VcIikuXG5cdCAgICAgIC8vIDIuIE92ZXJyaWRkZW4gbWV0aG9kcyAodGhhdCB3ZXJlIG1peGVkIGluKS5cblx0ICAgICAgdmFyIGlzQ29tcG9zaXRlQ29tcG9uZW50TWV0aG9kID1cblx0ICAgICAgICBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcblx0ICAgICAgdmFyIGlzQWxyZWFkeURlZmluZWQgPSBwcm90by5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcblx0ICAgICAgdmFyIG1hcmtlZERvbnRCaW5kID0gcHJvcGVydHkgJiYgcHJvcGVydHkuX19yZWFjdERvbnRCaW5kO1xuXHQgICAgICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJztcblx0ICAgICAgdmFyIHNob3VsZEF1dG9CaW5kID1cblx0ICAgICAgICBpc0Z1bmN0aW9uICYmXG5cdCAgICAgICAgIWlzQ29tcG9zaXRlQ29tcG9uZW50TWV0aG9kICYmXG5cdCAgICAgICAgIWlzQWxyZWFkeURlZmluZWQgJiZcblx0ICAgICAgICAhbWFya2VkRG9udEJpbmQ7XG5cdFxuXHQgICAgICBpZiAoc2hvdWxkQXV0b0JpbmQpIHtcblx0ICAgICAgICBpZiAoIXByb3RvLl9fcmVhY3RBdXRvQmluZE1hcCkge1xuXHQgICAgICAgICAgcHJvdG8uX19yZWFjdEF1dG9CaW5kTWFwID0ge307XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHByb3RvLl9fcmVhY3RBdXRvQmluZE1hcFtuYW1lXSA9IHByb3BlcnR5O1xuXHQgICAgICAgIHByb3RvW25hbWVdID0gcHJvcGVydHk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgaWYgKGlzQWxyZWFkeURlZmluZWQpIHtcblx0ICAgICAgICAgIHZhciBzcGVjUG9saWN5ID0gUmVhY3RDb21wb3NpdGVDb21wb25lbnRJbnRlcmZhY2VbbmFtZV07XG5cdFxuXHQgICAgICAgICAgLy8gVGhlc2UgY2FzZXMgc2hvdWxkIGFscmVhZHkgYmUgY2F1Z2h0IGJ5IHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGVcblx0ICAgICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgICAgICAgIGlzQ29tcG9zaXRlQ29tcG9uZW50TWV0aG9kICYmIChcblx0ICAgICAgICAgICAgICBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCB8fFxuXHQgICAgICAgICAgICAgIHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllcblx0ICAgICAgICAgICAgKSxcblx0ICAgICAgICAgICAgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50OiBVbmV4cGVjdGVkIHNwZWMgcG9saWN5ICVzIGZvciBrZXkgJXMgJyArXG5cdCAgICAgICAgICAgICd3aGVuIG1peGluZyBpbiBjb21wb25lbnQgc3BlY3MuJyxcblx0ICAgICAgICAgICAgc3BlY1BvbGljeSxcblx0ICAgICAgICAgICAgbmFtZVxuXHQgICAgICAgICAgKSA6IGludmFyaWFudChpc0NvbXBvc2l0ZUNvbXBvbmVudE1ldGhvZCAmJiAoXG5cdCAgICAgICAgICAgIHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VEIHx8XG5cdCAgICAgICAgICAgIHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllcblx0ICAgICAgICAgICkpKTtcblx0XG5cdCAgICAgICAgICAvLyBGb3IgbWV0aG9kcyB3aGljaCBhcmUgZGVmaW5lZCBtb3JlIHRoYW4gb25jZSwgY2FsbCB0aGUgZXhpc3Rpbmdcblx0ICAgICAgICAgIC8vIG1ldGhvZHMgYmVmb3JlIGNhbGxpbmcgdGhlIG5ldyBwcm9wZXJ0eSwgbWVyZ2luZyBpZiBhcHByb3ByaWF0ZS5cblx0ICAgICAgICAgIGlmIChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCkge1xuXHQgICAgICAgICAgICBwcm90b1tuYW1lXSA9IGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKHByb3RvW25hbWVdLCBwcm9wZXJ0eSk7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkpIHtcblx0ICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ocHJvdG9bbmFtZV0sIHByb3BlcnR5KTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcblx0ICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgICAgICAgLy8gQWRkIHZlcmJvc2UgZGlzcGxheU5hbWUgdG8gdGhlIGZ1bmN0aW9uLCB3aGljaCBoZWxwcyB3aGVuIGxvb2tpbmdcblx0ICAgICAgICAgICAgLy8gYXQgcHJvZmlsaW5nIHRvb2xzLlxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnZnVuY3Rpb24nICYmIHNwZWMuZGlzcGxheU5hbWUpIHtcblx0ICAgICAgICAgICAgICBwcm90b1tuYW1lXS5kaXNwbGF5TmFtZSA9IHNwZWMuZGlzcGxheU5hbWUgKyAnXycgKyBuYW1lO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3RhdGljcykge1xuXHQgIGlmICghc3RhdGljcykge1xuXHQgICAgcmV0dXJuO1xuXHQgIH1cblx0ICBmb3IgKHZhciBuYW1lIGluIHN0YXRpY3MpIHtcblx0ICAgIHZhciBwcm9wZXJ0eSA9IHN0YXRpY3NbbmFtZV07XG5cdCAgICBpZiAoIXN0YXRpY3MuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcblx0ICAgICAgY29udGludWU7XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIGlzUmVzZXJ2ZWQgPSBuYW1lIGluIFJFU0VSVkVEX1NQRUNfS0VZUztcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgICFpc1Jlc2VydmVkLFxuXHQgICAgICAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQ6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgYSByZXNlcnZlZCAnICtcblx0ICAgICAgJ3Byb3BlcnR5LCBgJXNgLCB0aGF0IHNob3VsZG5cXCd0IGJlIG9uIHRoZSBcInN0YXRpY3NcIiBrZXkuIERlZmluZSBpdCAnICtcblx0ICAgICAgJ2FzIGFuIGluc3RhbmNlIHByb3BlcnR5IGluc3RlYWQ7IGl0IHdpbGwgc3RpbGwgYmUgYWNjZXNzaWJsZSBvbiB0aGUgJyArXG5cdCAgICAgICdjb25zdHJ1Y3Rvci4nLFxuXHQgICAgICBuYW1lXG5cdCAgICApIDogaW52YXJpYW50KCFpc1Jlc2VydmVkKSk7XG5cdFxuXHQgICAgdmFyIGlzSW5oZXJpdGVkID0gbmFtZSBpbiBDb25zdHJ1Y3Rvcjtcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgICFpc0luaGVyaXRlZCxcblx0ICAgICAgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50OiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lICcgK1xuXHQgICAgICAnYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgJyArXG5cdCAgICAgICdkdWUgdG8gYSBtaXhpbi4nLFxuXHQgICAgICBuYW1lXG5cdCAgICApIDogaW52YXJpYW50KCFpc0luaGVyaXRlZCkpO1xuXHQgICAgQ29uc3RydWN0b3JbbmFtZV0gPSBwcm9wZXJ0eTtcblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBNZXJnZSB0d28gb2JqZWN0cywgYnV0IHRocm93IGlmIGJvdGggY29udGFpbiB0aGUgc2FtZSBrZXkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBvbmUgVGhlIGZpcnN0IG9iamVjdCwgd2hpY2ggaXMgbXV0YXRlZC5cblx0ICogQHBhcmFtIHtvYmplY3R9IHR3byBUaGUgc2Vjb25kIG9iamVjdFxuXHQgKiBAcmV0dXJuIHtvYmplY3R9IG9uZSBhZnRlciBpdCBoYXMgYmVlbiBtdXRhdGVkIHRvIGNvbnRhaW4gZXZlcnl0aGluZyBpbiB0d28uXG5cdCAqL1xuXHRmdW5jdGlvbiBtZXJnZU9iamVjdHNXaXRoTm9EdXBsaWNhdGVLZXlzKG9uZSwgdHdvKSB7XG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgIG9uZSAmJiB0d28gJiYgdHlwZW9mIG9uZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHR3byA9PT0gJ29iamVjdCcsXG5cdCAgICAnbWVyZ2VPYmplY3RzV2l0aE5vRHVwbGljYXRlS2V5cygpOiBDYW5ub3QgbWVyZ2Ugbm9uLW9iamVjdHMnXG5cdCAgKSA6IGludmFyaWFudChvbmUgJiYgdHdvICYmIHR5cGVvZiBvbmUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0d28gPT09ICdvYmplY3QnKSk7XG5cdFxuXHQgIG1hcE9iamVjdCh0d28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgIG9uZVtrZXldID09PSB1bmRlZmluZWQsXG5cdCAgICAgICdtZXJnZU9iamVjdHNXaXRoTm9EdXBsaWNhdGVLZXlzKCk6ICcgK1xuXHQgICAgICAnVHJpZWQgdG8gbWVyZ2UgdHdvIG9iamVjdHMgd2l0aCB0aGUgc2FtZSBrZXk6IGAlc2AuIFRoaXMgY29uZmxpY3QgJyArXG5cdCAgICAgICdtYXkgYmUgZHVlIHRvIGEgbWl4aW47IGluIHBhcnRpY3VsYXIsIHRoaXMgbWF5IGJlIGNhdXNlZCBieSB0d28gJyArXG5cdCAgICAgICdnZXRJbml0aWFsU3RhdGUoKSBvciBnZXREZWZhdWx0UHJvcHMoKSBtZXRob2RzIHJldHVybmluZyBvYmplY3RzICcgK1xuXHQgICAgICAnd2l0aCBjbGFzaGluZyBrZXlzLicsXG5cdCAgICAgIGtleVxuXHQgICAgKSA6IGludmFyaWFudChvbmVba2V5XSA9PT0gdW5kZWZpbmVkKSk7XG5cdCAgICBvbmVba2V5XSA9IHZhbHVlO1xuXHQgIH0pO1xuXHQgIHJldHVybiBvbmU7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHR3byBmdW5jdGlvbnMgYW5kIG1lcmdlcyB0aGVpciByZXR1cm4gdmFsdWVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbmUgRnVuY3Rpb24gdG8gaW52b2tlIGZpcnN0LlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0d28gRnVuY3Rpb24gdG8gaW52b2tlIHNlY29uZC5cblx0ICogQHJldHVybiB7ZnVuY3Rpb259IEZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgdHdvIGFyZ3VtZW50IGZ1bmN0aW9ucy5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKG9uZSwgdHdvKSB7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZFJlc3VsdCgpIHtcblx0ICAgIHZhciBhID0gb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICB2YXIgYiA9IHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgaWYgKGEgPT0gbnVsbCkge1xuXHQgICAgICByZXR1cm4gYjtcblx0ICAgIH0gZWxzZSBpZiAoYiA9PSBudWxsKSB7XG5cdCAgICAgIHJldHVybiBhO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG1lcmdlT2JqZWN0c1dpdGhOb0R1cGxpY2F0ZUtleXMoYSwgYik7XG5cdCAgfTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdHdvIGZ1bmN0aW9ucyBhbmQgaWdub3JlcyB0aGVpciByZXR1cm4gdmFsZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uZSBGdW5jdGlvbiB0byBpbnZva2UgZmlyc3QuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IHR3byBGdW5jdGlvbiB0byBpbnZva2Ugc2Vjb25kLlxuXHQgKiBAcmV0dXJuIHtmdW5jdGlvbn0gRnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSB0d28gYXJndW1lbnQgZnVuY3Rpb25zLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKG9uZSwgdHdvKSB7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpIHtcblx0ICAgIG9uZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgdHdvLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgfTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIGBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudGAgbWFpbnRhaW5zIGFuIGF1eGlsaWFyeSBsaWZlIGN5Y2xlIHN0YXRlIGluXG5cdCAqIGB0aGlzLl9jb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZWAgKHdoaWNoIGNhbiBiZSBudWxsKS5cblx0ICpcblx0ICogVGhpcyBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgbGlmZSBjeWNsZSBzdGF0ZSBtYWludGFpbmVkIGJ5IGBSZWFjdENvbXBvbmVudGAgaW5cblx0ICogYHRoaXMuX2xpZmVDeWNsZVN0YXRlYC4gVGhlIGZvbGxvd2luZyBkaWFncmFtIHNob3dzIGhvdyB0aGUgc3RhdGVzIG92ZXJsYXAgaW5cblx0ICogdGltZS4gVGhlcmUgYXJlIHRpbWVzIHdoZW4gdGhlIENvbXBvc2l0ZUxpZmVDeWNsZSBpcyBudWxsIC0gYXQgdGhvc2UgdGltZXMgaXRcblx0ICogaXMgb25seSBtZWFuaW5nZnVsIHRvIGxvb2sgYXQgQ29tcG9uZW50TGlmZUN5Y2xlIGFsb25lLlxuXHQgKlxuXHQgKiBUb3AgUm93OiBSZWFjdENvbXBvbmVudC5Db21wb25lbnRMaWZlQ3ljbGVcblx0ICogTG93IFJvdzogUmVhY3RDb21wb25lbnQuQ29tcG9zaXRlTGlmZUN5Y2xlXG5cdCAqXG5cdCAqICstLS0tLS0tKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLStcblx0ICogfCAgVU4gICB8ICAgICAgICAgICAgIE1PVU5URUQgICAgICAgICAgICAgfCAgIFVOICAgfFxuXHQgKiB8TU9VTlRFRHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1PVU5URUR8XG5cdCAqICstLS0tLS0tKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLStcblx0ICogfCAgICAgICBeLS0tLS0tLS0rICAgKy0tLS0tLS0rICAgKy0tLS0tLS0tXiAgICAgICAgfFxuXHQgKiB8ICAgICAgIHwgICAgICAgIHwgICB8ICAgICAgIHwgICB8ICAgICAgICB8ICAgICAgICB8XG5cdCAqIHwgICAgMC0tfE1PVU5USU5HfC0wLXxSRUNFSVZFfC0wLXwgICBVTiAgIHwtLS0+MCAgIHxcblx0ICogfCAgICAgICB8ICAgICAgICB8ICAgfFBST1BTICB8ICAgfE1PVU5USU5HfCAgICAgICAgfFxuXHQgKiB8ICAgICAgIHwgICAgICAgIHwgICB8ICAgICAgIHwgICB8ICAgICAgICB8ICAgICAgICB8XG5cdCAqIHwgICAgICAgfCAgICAgICAgfCAgIHwgICAgICAgfCAgIHwgICAgICAgIHwgICAgICAgIHxcblx0ICogfCAgICAgICArLS0tLS0tLS0rICAgKy0tLS0tLS0rICAgKy0tLS0tLS0tKyAgICAgICAgfFxuXHQgKiB8ICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICB8XG5cdCAqICstLS0tLS0tKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLStcblx0ICovXG5cdHZhciBDb21wb3NpdGVMaWZlQ3ljbGUgPSBrZXlNaXJyb3Ioe1xuXHQgIC8qKlxuXHQgICAqIENvbXBvbmVudHMgaW4gdGhlIHByb2Nlc3Mgb2YgYmVpbmcgbW91bnRlZCByZXNwb25kIHRvIHN0YXRlIGNoYW5nZXNcblx0ICAgKiBkaWZmZXJlbnRseS5cblx0ICAgKi9cblx0ICBNT1VOVElORzogbnVsbCxcblx0ICAvKipcblx0ICAgKiBDb21wb25lbnRzIGluIHRoZSBwcm9jZXNzIG9mIGJlaW5nIHVubW91bnRlZCBhcmUgZ3VhcmRlZCBhZ2FpbnN0IHN0YXRlXG5cdCAgICogY2hhbmdlcy5cblx0ICAgKi9cblx0ICBVTk1PVU5USU5HOiBudWxsLFxuXHQgIC8qKlxuXHQgICAqIENvbXBvbmVudHMgdGhhdCBhcmUgbW91bnRlZCBhbmQgcmVjZWl2aW5nIG5ldyBwcm9wcyByZXNwb25kIHRvIHN0YXRlXG5cdCAgICogY2hhbmdlcyBkaWZmZXJlbnRseS5cblx0ICAgKi9cblx0ICBSRUNFSVZJTkdfUFJPUFM6IG51bGxcblx0fSk7XG5cdFxuXHQvKipcblx0ICogQGxlbmRzIHtSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5wcm90b3R5cGV9XG5cdCAqL1xuXHR2YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpbiA9IHtcblx0XG5cdCAgLyoqXG5cdCAgICogQmFzZSBjb25zdHJ1Y3RvciBmb3IgYWxsIGNvbXBvc2l0ZSBjb21wb25lbnQuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuXHQgICAqIEBmaW5hbFxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIGNvbnN0cnVjdDogZnVuY3Rpb24oZWxlbWVudCkge1xuXHQgICAgLy8gQ2hpbGRyZW4gY2FuIGJlIGVpdGhlciBhbiBhcnJheSBvciBtb3JlIHRoYW4gb25lIGFyZ3VtZW50XG5cdCAgICBSZWFjdENvbXBvbmVudC5NaXhpbi5jb25zdHJ1Y3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgIFJlYWN0T3duZXIuTWl4aW4uY29uc3RydWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFxuXHQgICAgdGhpcy5zdGF0ZSA9IG51bGw7XG5cdCAgICB0aGlzLl9wZW5kaW5nU3RhdGUgPSBudWxsO1xuXHRcblx0ICAgIC8vIFRoaXMgaXMgdGhlIHB1YmxpYyBwb3N0LXByb2Nlc3NlZCBjb250ZXh0LiBUaGUgcmVhbCBjb250ZXh0IGFuZCBwZW5kaW5nXG5cdCAgICAvLyBjb250ZXh0IGxpdmVzIG9uIHRoZSBlbGVtZW50LlxuXHQgICAgdGhpcy5jb250ZXh0ID0gbnVsbDtcblx0XG5cdCAgICB0aGlzLl9jb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9IG51bGw7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IHRoaXMgY29tcG9zaXRlIGNvbXBvbmVudCBpcyBtb3VudGVkLlxuXHQgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgbW91bnRlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQgICAqIEBwcm90ZWN0ZWRcblx0ICAgKiBAZmluYWxcblx0ICAgKi9cblx0ICBpc01vdW50ZWQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIFJlYWN0Q29tcG9uZW50Lk1peGluLmlzTW91bnRlZC5jYWxsKHRoaXMpICYmXG5cdCAgICAgIHRoaXMuX2NvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlICE9PSBDb21wb3NpdGVMaWZlQ3ljbGUuTU9VTlRJTkc7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogSW5pdGlhbGl6ZXMgdGhlIGNvbXBvbmVudCwgcmVuZGVycyBtYXJrdXAsIGFuZCByZWdpc3RlcnMgZXZlbnQgbGlzdGVuZXJzLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBET00gSUQgb2YgdGhlIHJvb3Qgbm9kZS5cblx0ICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cblx0ICAgKiBAcGFyYW0ge251bWJlcn0gbW91bnREZXB0aCBudW1iZXIgb2YgY29tcG9uZW50cyBpbiB0aGUgb3duZXIgaGllcmFyY2h5XG5cdCAgICogQHJldHVybiB7P3N0cmluZ30gUmVuZGVyZWQgbWFya3VwIHRvIGJlIGluc2VydGVkIGludG8gdGhlIERPTS5cblx0ICAgKiBAZmluYWxcblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKi9cblx0ICBtb3VudENvbXBvbmVudDogUmVhY3RQZXJmLm1lYXN1cmUoXG5cdCAgICAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnLFxuXHQgICAgJ21vdW50Q29tcG9uZW50Jyxcblx0ICAgIGZ1bmN0aW9uKHJvb3RJRCwgdHJhbnNhY3Rpb24sIG1vdW50RGVwdGgpIHtcblx0ICAgICAgUmVhY3RDb21wb25lbnQuTWl4aW4ubW91bnRDb21wb25lbnQuY2FsbChcblx0ICAgICAgICB0aGlzLFxuXHQgICAgICAgIHJvb3RJRCxcblx0ICAgICAgICB0cmFuc2FjdGlvbixcblx0ICAgICAgICBtb3VudERlcHRoXG5cdCAgICAgICk7XG5cdCAgICAgIHRoaXMuX2NvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlID0gQ29tcG9zaXRlTGlmZUN5Y2xlLk1PVU5USU5HO1xuXHRcblx0ICAgICAgaWYgKHRoaXMuX19yZWFjdEF1dG9CaW5kTWFwKSB7XG5cdCAgICAgICAgdGhpcy5fYmluZEF1dG9CaW5kTWV0aG9kcygpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLl9wcm9jZXNzQ29udGV4dCh0aGlzLl9jdXJyZW50RWxlbWVudC5fY29udGV4dCk7XG5cdCAgICAgIHRoaXMucHJvcHMgPSB0aGlzLl9wcm9jZXNzUHJvcHModGhpcy5wcm9wcyk7XG5cdFxuXHQgICAgICB0aGlzLnN0YXRlID0gdGhpcy5nZXRJbml0aWFsU3RhdGUgPyB0aGlzLmdldEluaXRpYWxTdGF0ZSgpIDogbnVsbDtcblx0ICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgICB0eXBlb2YgdGhpcy5zdGF0ZSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkodGhpcy5zdGF0ZSksXG5cdCAgICAgICAgJyVzLmdldEluaXRpYWxTdGF0ZSgpOiBtdXN0IHJldHVybiBhbiBvYmplY3Qgb3IgbnVsbCcsXG5cdCAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnXG5cdCAgICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIHRoaXMuc3RhdGUgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHRoaXMuc3RhdGUpKSk7XG5cdFxuXHQgICAgICB0aGlzLl9wZW5kaW5nU3RhdGUgPSBudWxsO1xuXHQgICAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSBmYWxzZTtcblx0XG5cdCAgICAgIGlmICh0aGlzLmNvbXBvbmVudFdpbGxNb3VudCkge1xuXHQgICAgICAgIHRoaXMuY29tcG9uZW50V2lsbE1vdW50KCk7XG5cdCAgICAgICAgLy8gV2hlbiBtb3VudGluZywgY2FsbHMgdG8gYHNldFN0YXRlYCBieSBgY29tcG9uZW50V2lsbE1vdW50YCB3aWxsIHNldFxuXHQgICAgICAgIC8vIGB0aGlzLl9wZW5kaW5nU3RhdGVgIHdpdGhvdXQgdHJpZ2dlcmluZyBhIHJlLXJlbmRlci5cblx0ICAgICAgICBpZiAodGhpcy5fcGVuZGluZ1N0YXRlKSB7XG5cdCAgICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5fcGVuZGluZ1N0YXRlO1xuXHQgICAgICAgICAgdGhpcy5fcGVuZGluZ1N0YXRlID0gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChcblx0ICAgICAgICB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQoKSxcblx0ICAgICAgICB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlIC8vIFRoZSB3cmFwcGluZyB0eXBlXG5cdCAgICAgICk7XG5cdFxuXHQgICAgICAvLyBEb25lIHdpdGggbW91bnRpbmcsIGBzZXRTdGF0ZWAgd2lsbCBub3cgdHJpZ2dlciBVSSBjaGFuZ2VzLlxuXHQgICAgICB0aGlzLl9jb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9IG51bGw7XG5cdCAgICAgIHZhciBtYXJrdXAgPSB0aGlzLl9yZW5kZXJlZENvbXBvbmVudC5tb3VudENvbXBvbmVudChcblx0ICAgICAgICByb290SUQsXG5cdCAgICAgICAgdHJhbnNhY3Rpb24sXG5cdCAgICAgICAgbW91bnREZXB0aCArIDFcblx0ICAgICAgKTtcblx0ICAgICAgaWYgKHRoaXMuY29tcG9uZW50RGlkTW91bnQpIHtcblx0ICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHRoaXMuY29tcG9uZW50RGlkTW91bnQsIHRoaXMpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBtYXJrdXA7XG5cdCAgICB9XG5cdCAgKSxcblx0XG5cdCAgLyoqXG5cdCAgICogUmVsZWFzZXMgYW55IHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgYG1vdW50Q29tcG9uZW50YC5cblx0ICAgKlxuXHQgICAqIEBmaW5hbFxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5fY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgPSBDb21wb3NpdGVMaWZlQ3ljbGUuVU5NT1VOVElORztcblx0ICAgIGlmICh0aGlzLmNvbXBvbmVudFdpbGxVbm1vdW50KSB7XG5cdCAgICAgIHRoaXMuY29tcG9uZW50V2lsbFVubW91bnQoKTtcblx0ICAgIH1cblx0ICAgIHRoaXMuX2NvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlID0gbnVsbDtcblx0XG5cdCAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudC51bm1vdW50Q29tcG9uZW50KCk7XG5cdCAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IG51bGw7XG5cdFxuXHQgICAgUmVhY3RDb21wb25lbnQuTWl4aW4udW5tb3VudENvbXBvbmVudC5jYWxsKHRoaXMpO1xuXHRcblx0ICAgIC8vIFNvbWUgZXhpc3RpbmcgY29tcG9uZW50cyByZWx5IG9uIHRoaXMucHJvcHMgZXZlbiBhZnRlciB0aGV5J3ZlIGJlZW5cblx0ICAgIC8vIGRlc3Ryb3llZCAoaW4gZXZlbnQgaGFuZGxlcnMpLlxuXHQgICAgLy8gVE9ETzogdGhpcy5wcm9wcyA9IG51bGw7XG5cdCAgICAvLyBUT0RPOiB0aGlzLnN0YXRlID0gbnVsbDtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBzdGF0ZS4gQWx3YXlzIHVzZSB0aGlzIG9yIGByZXBsYWNlU3RhdGVgIHRvIG11dGF0ZVxuXHQgICAqIHN0YXRlLiBZb3Ugc2hvdWxkIHRyZWF0IGB0aGlzLnN0YXRlYCBhcyBpbW11dGFibGUuXG5cdCAgICpcblx0ICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuXHQgICAqIGFjY2Vzc2luZyBgdGhpcy5zdGF0ZWAgYWZ0ZXIgY2FsbGluZyB0aGlzIG1ldGhvZCBtYXkgcmV0dXJuIHRoZSBvbGQgdmFsdWUuXG5cdCAgICpcblx0ICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBjYWxscyB0byBgc2V0U3RhdGVgIHdpbGwgcnVuIHN5bmNocm9ub3VzbHksXG5cdCAgICogYXMgdGhleSBtYXkgZXZlbnR1YWxseSBiZSBiYXRjaGVkIHRvZ2V0aGVyLiAgWW91IGNhbiBwcm92aWRlIGFuIG9wdGlvbmFsXG5cdCAgICogY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGNhbGwgdG8gc2V0U3RhdGUgaXMgYWN0dWFsbHlcblx0ICAgKiBjb21wbGV0ZWQuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBzdGF0ZS5cblx0ICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG5cdCAgICogQGZpbmFsXG5cdCAgICogQHByb3RlY3RlZFxuXHQgICAqL1xuXHQgIHNldFN0YXRlOiBmdW5jdGlvbihwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrKSB7XG5cdCAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICB0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnb2JqZWN0JyB8fCBwYXJ0aWFsU3RhdGUgPT0gbnVsbCxcblx0ICAgICAgJ3NldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlLidcblx0ICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgfHwgcGFydGlhbFN0YXRlID09IG51bGwpKTtcblx0ICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpe1xuXHQgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcblx0ICAgICAgICBwYXJ0aWFsU3RhdGUgIT0gbnVsbCxcblx0ICAgICAgICAnc2V0U3RhdGUoLi4uKTogWW91IHBhc3NlZCBhbiB1bmRlZmluZWQgb3IgbnVsbCBzdGF0ZSBvYmplY3Q7ICcgK1xuXHQgICAgICAgICdpbnN0ZWFkLCB1c2UgZm9yY2VVcGRhdGUoKS4nXG5cdCAgICAgICkgOiBudWxsKTtcblx0ICAgIH1cblx0ICAgIC8vIE1lcmdlIHdpdGggYF9wZW5kaW5nU3RhdGVgIGlmIGl0IGV4aXN0cywgb3RoZXJ3aXNlIHdpdGggZXhpc3Rpbmcgc3RhdGUuXG5cdCAgICB0aGlzLnJlcGxhY2VTdGF0ZShcblx0ICAgICAgYXNzaWduKHt9LCB0aGlzLl9wZW5kaW5nU3RhdGUgfHwgdGhpcy5zdGF0ZSwgcGFydGlhbFN0YXRlKSxcblx0ICAgICAgY2FsbGJhY2tcblx0ICAgICk7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogUmVwbGFjZXMgYWxsIG9mIHRoZSBzdGF0ZS4gQWx3YXlzIHVzZSB0aGlzIG9yIGBzZXRTdGF0ZWAgdG8gbXV0YXRlIHN0YXRlLlxuXHQgICAqIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cblx0ICAgKlxuXHQgICAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG5cdCAgICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wbGV0ZVN0YXRlIE5leHQgc3RhdGUuXG5cdCAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBzdGF0ZSBpcyB1cGRhdGVkLlxuXHQgICAqIEBmaW5hbFxuXHQgICAqIEBwcm90ZWN0ZWRcblx0ICAgKi9cblx0ICByZXBsYWNlU3RhdGU6IGZ1bmN0aW9uKGNvbXBsZXRlU3RhdGUsIGNhbGxiYWNrKSB7XG5cdCAgICB2YWxpZGF0ZUxpZmVDeWNsZU9uUmVwbGFjZVN0YXRlKHRoaXMpO1xuXHQgICAgdGhpcy5fcGVuZGluZ1N0YXRlID0gY29tcGxldGVTdGF0ZTtcblx0ICAgIGlmICh0aGlzLl9jb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSAhPT0gQ29tcG9zaXRlTGlmZUN5Y2xlLk1PVU5USU5HKSB7XG5cdCAgICAgIC8vIElmIHdlJ3JlIGluIGEgY29tcG9uZW50V2lsbE1vdW50IGhhbmRsZXIsIGRvbid0IGVucXVldWUgYSByZXJlbmRlclxuXHQgICAgICAvLyBiZWNhdXNlIFJlYWN0VXBkYXRlcyBhc3N1bWVzIHdlJ3JlIGluIGEgYnJvd3NlciBjb250ZXh0ICh3aGljaCBpcyB3cm9uZ1xuXHQgICAgICAvLyBmb3Igc2VydmVyIHJlbmRlcmluZykgYW5kIHdlJ3JlIGFib3V0IHRvIGRvIGEgcmVuZGVyIGFueXdheS5cblx0ICAgICAgLy8gVE9ETzogVGhlIGNhbGxiYWNrIGhlcmUgaXMgaWdub3JlZCB3aGVuIHNldFN0YXRlIGlzIGNhbGxlZCBmcm9tXG5cdCAgICAgIC8vIGNvbXBvbmVudFdpbGxNb3VudC4gRWl0aGVyIGZpeCBpdCBvciBkaXNhbGxvdyBkb2luZyBzbyBjb21wbGV0ZWx5IGluXG5cdCAgICAgIC8vIGZhdm9yIG9mIGdldEluaXRpYWxTdGF0ZS5cblx0ICAgICAgUmVhY3RVcGRhdGVzLmVucXVldWVVcGRhdGUodGhpcywgY2FsbGJhY2spO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIEZpbHRlcnMgdGhlIGNvbnRleHQgb2JqZWN0IHRvIG9ubHkgY29udGFpbiBrZXlzIHNwZWNpZmllZCBpblxuXHQgICAqIGBjb250ZXh0VHlwZXNgLCBhbmQgYXNzZXJ0cyB0aGF0IHRoZXkgYXJlIHZhbGlkLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcblx0ICAgKiBAcmV0dXJuIHs/b2JqZWN0fVxuXHQgICAqIEBwcml2YXRlXG5cdCAgICovXG5cdCAgX3Byb2Nlc3NDb250ZXh0OiBmdW5jdGlvbihjb250ZXh0KSB7XG5cdCAgICB2YXIgbWFza2VkQ29udGV4dCA9IG51bGw7XG5cdCAgICB2YXIgY29udGV4dFR5cGVzID0gdGhpcy5jb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXM7XG5cdCAgICBpZiAoY29udGV4dFR5cGVzKSB7XG5cdCAgICAgIG1hc2tlZENvbnRleHQgPSB7fTtcblx0ICAgICAgZm9yICh2YXIgY29udGV4dE5hbWUgaW4gY29udGV4dFR5cGVzKSB7XG5cdCAgICAgICAgbWFza2VkQ29udGV4dFtjb250ZXh0TmFtZV0gPSBjb250ZXh0W2NvbnRleHROYW1lXTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICAgICAgdGhpcy5fY2hlY2tQcm9wVHlwZXMoXG5cdCAgICAgICAgICBjb250ZXh0VHlwZXMsXG5cdCAgICAgICAgICBtYXNrZWRDb250ZXh0LFxuXHQgICAgICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jb250ZXh0XG5cdCAgICAgICAgKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIG1hc2tlZENvbnRleHQ7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtIHtvYmplY3R9IGN1cnJlbnRDb250ZXh0XG5cdCAgICogQHJldHVybiB7b2JqZWN0fVxuXHQgICAqIEBwcml2YXRlXG5cdCAgICovXG5cdCAgX3Byb2Nlc3NDaGlsZENvbnRleHQ6IGZ1bmN0aW9uKGN1cnJlbnRDb250ZXh0KSB7XG5cdCAgICB2YXIgY2hpbGRDb250ZXh0ID0gdGhpcy5nZXRDaGlsZENvbnRleHQgJiYgdGhpcy5nZXRDaGlsZENvbnRleHQoKTtcblx0ICAgIHZhciBkaXNwbGF5TmFtZSA9IHRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50Jztcblx0ICAgIGlmIChjaGlsZENvbnRleHQpIHtcblx0ICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgICB0eXBlb2YgdGhpcy5jb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyA9PT0gJ29iamVjdCcsXG5cdCAgICAgICAgJyVzLmdldENoaWxkQ29udGV4dCgpOiBjaGlsZENvbnRleHRUeXBlcyBtdXN0IGJlIGRlZmluZWQgaW4gb3JkZXIgdG8gJyArXG5cdCAgICAgICAgJ3VzZSBnZXRDaGlsZENvbnRleHQoKS4nLFxuXHQgICAgICAgIGRpc3BsYXlOYW1lXG5cdCAgICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIHRoaXMuY29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMgPT09ICdvYmplY3QnKSk7XG5cdCAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgICB0aGlzLl9jaGVja1Byb3BUeXBlcyhcblx0ICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMsXG5cdCAgICAgICAgICBjaGlsZENvbnRleHQsXG5cdCAgICAgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25zLmNoaWxkQ29udGV4dFxuXHQgICAgICAgICk7XG5cdCAgICAgIH1cblx0ICAgICAgZm9yICh2YXIgbmFtZSBpbiBjaGlsZENvbnRleHQpIHtcblx0ICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICAgICAgbmFtZSBpbiB0aGlzLmNvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLFxuXHQgICAgICAgICAgJyVzLmdldENoaWxkQ29udGV4dCgpOiBrZXkgXCIlc1wiIGlzIG5vdCBkZWZpbmVkIGluIGNoaWxkQ29udGV4dFR5cGVzLicsXG5cdCAgICAgICAgICBkaXNwbGF5TmFtZSxcblx0ICAgICAgICAgIG5hbWVcblx0ICAgICAgICApIDogaW52YXJpYW50KG5hbWUgaW4gdGhpcy5jb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcykpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBhc3NpZ24oe30sIGN1cnJlbnRDb250ZXh0LCBjaGlsZENvbnRleHQpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGN1cnJlbnRDb250ZXh0O1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIFByb2Nlc3NlcyBwcm9wcyBieSBzZXR0aW5nIGRlZmF1bHQgdmFsdWVzIGZvciB1bnNwZWNpZmllZCBwcm9wcyBhbmRcblx0ICAgKiBhc3NlcnRpbmcgdGhhdCB0aGUgcHJvcHMgYXJlIHZhbGlkLiBEb2VzIG5vdCBtdXRhdGUgaXRzIGFyZ3VtZW50OyByZXR1cm5zXG5cdCAgICogYSBuZXcgcHJvcHMgb2JqZWN0IHdpdGggZGVmYXVsdHMgbWVyZ2VkIGluLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtvYmplY3R9IG5ld1Byb3BzXG5cdCAgICogQHJldHVybiB7b2JqZWN0fVxuXHQgICAqIEBwcml2YXRlXG5cdCAgICovXG5cdCAgX3Byb2Nlc3NQcm9wczogZnVuY3Rpb24obmV3UHJvcHMpIHtcblx0ICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgdmFyIHByb3BUeXBlcyA9IHRoaXMuY29uc3RydWN0b3IucHJvcFR5cGVzO1xuXHQgICAgICBpZiAocHJvcFR5cGVzKSB7XG5cdCAgICAgICAgdGhpcy5fY2hlY2tQcm9wVHlwZXMocHJvcFR5cGVzLCBuZXdQcm9wcywgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5wcm9wKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5ld1Byb3BzO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIEFzc2VydCB0aGF0IHRoZSBwcm9wcyBhcmUgdmFsaWRcblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wVHlwZXMgTWFwIG9mIHByb3AgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcblx0ICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gZS5nLiBcInByb3BcIiwgXCJjb250ZXh0XCIsIFwiY2hpbGQgY29udGV4dFwiXG5cdCAgICogQHByaXZhdGVcblx0ICAgKi9cblx0ICBfY2hlY2tQcm9wVHlwZXM6IGZ1bmN0aW9uKHByb3BUeXBlcywgcHJvcHMsIGxvY2F0aW9uKSB7XG5cdCAgICAvLyBUT0RPOiBTdG9wIHZhbGlkYXRpbmcgcHJvcCB0eXBlcyBoZXJlIGFuZCBvbmx5IHVzZSB0aGUgZWxlbWVudFxuXHQgICAgLy8gdmFsaWRhdGlvbi5cblx0ICAgIHZhciBjb21wb25lbnROYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZTtcblx0ICAgIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BUeXBlcykge1xuXHQgICAgICBpZiAocHJvcFR5cGVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuXHQgICAgICAgIHZhciBlcnJvciA9XG5cdCAgICAgICAgICBwcm9wVHlwZXNbcHJvcE5hbWVdKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuXHQgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdCAgICAgICAgICAvLyBXZSBtYXkgd2FudCB0byBleHRlbmQgdGhpcyBsb2dpYyBmb3Igc2ltaWxhciBlcnJvcnMgaW5cblx0ICAgICAgICAgIC8vIHJlbmRlckNvbXBvbmVudCBjYWxscywgc28gSSdtIGFic3RyYWN0aW5nIGl0IGF3YXkgaW50b1xuXHQgICAgICAgICAgLy8gYSBmdW5jdGlvbiB0byBtaW5pbWl6ZSByZWZhY3RvcmluZyBpbiB0aGUgZnV0dXJlXG5cdCAgICAgICAgICB2YXIgYWRkZW5kdW0gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0odGhpcyk7XG5cdCAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhmYWxzZSwgZXJyb3IubWVzc2FnZSArIGFkZGVuZHVtKSA6IG51bGwpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIElmIGFueSBvZiBgX3BlbmRpbmdFbGVtZW50YCwgYF9wZW5kaW5nU3RhdGVgLCBvciBgX3BlbmRpbmdGb3JjZVVwZGF0ZWBcblx0ICAgKiBpcyBzZXQsIHVwZGF0ZSB0aGUgY29tcG9uZW50LlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeTogZnVuY3Rpb24odHJhbnNhY3Rpb24pIHtcblx0ICAgIHZhciBjb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9IHRoaXMuX2NvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlO1xuXHQgICAgLy8gRG8gbm90IHRyaWdnZXIgYSBzdGF0ZSB0cmFuc2l0aW9uIGlmIHdlIGFyZSBpbiB0aGUgbWlkZGxlIG9mIG1vdW50aW5nIG9yXG5cdCAgICAvLyByZWNlaXZpbmcgcHJvcHMgYmVjYXVzZSBib3RoIG9mIHRob3NlIHdpbGwgYWxyZWFkeSBiZSBkb2luZyB0aGlzLlxuXHQgICAgaWYgKGNvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlID09PSBDb21wb3NpdGVMaWZlQ3ljbGUuTU9VTlRJTkcgfHxcblx0ICAgICAgICBjb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9PT0gQ29tcG9zaXRlTGlmZUN5Y2xlLlJFQ0VJVklOR19QUk9QUykge1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKHRoaXMuX3BlbmRpbmdFbGVtZW50ID09IG51bGwgJiZcblx0ICAgICAgICB0aGlzLl9wZW5kaW5nU3RhdGUgPT0gbnVsbCAmJlxuXHQgICAgICAgICF0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUpIHtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBuZXh0Q29udGV4dCA9IHRoaXMuY29udGV4dDtcblx0ICAgIHZhciBuZXh0UHJvcHMgPSB0aGlzLnByb3BzO1xuXHQgICAgdmFyIG5leHRFbGVtZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQ7XG5cdCAgICBpZiAodGhpcy5fcGVuZGluZ0VsZW1lbnQgIT0gbnVsbCkge1xuXHQgICAgICBuZXh0RWxlbWVudCA9IHRoaXMuX3BlbmRpbmdFbGVtZW50O1xuXHQgICAgICBuZXh0Q29udGV4dCA9IHRoaXMuX3Byb2Nlc3NDb250ZXh0KG5leHRFbGVtZW50Ll9jb250ZXh0KTtcblx0ICAgICAgbmV4dFByb3BzID0gdGhpcy5fcHJvY2Vzc1Byb3BzKG5leHRFbGVtZW50LnByb3BzKTtcblx0ICAgICAgdGhpcy5fcGVuZGluZ0VsZW1lbnQgPSBudWxsO1xuXHRcblx0ICAgICAgdGhpcy5fY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgPSBDb21wb3NpdGVMaWZlQ3ljbGUuUkVDRUlWSU5HX1BST1BTO1xuXHQgICAgICBpZiAodGhpcy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKSB7XG5cdCAgICAgICAgdGhpcy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgdGhpcy5fY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgPSBudWxsO1xuXHRcblx0ICAgIHZhciBuZXh0U3RhdGUgPSB0aGlzLl9wZW5kaW5nU3RhdGUgfHwgdGhpcy5zdGF0ZTtcblx0ICAgIHRoaXMuX3BlbmRpbmdTdGF0ZSA9IG51bGw7XG5cdFxuXHQgICAgdmFyIHNob3VsZFVwZGF0ZSA9XG5cdCAgICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSB8fFxuXHQgICAgICAhdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGUgfHxcblx0ICAgICAgdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KTtcblx0XG5cdCAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICAgIGlmICh0eXBlb2Ygc2hvdWxkVXBkYXRlID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdCAgICAgICAgY29uc29sZS53YXJuKFxuXHQgICAgICAgICAgKHRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgK1xuXHQgICAgICAgICAgJy5zaG91bGRDb21wb25lbnRVcGRhdGUoKTogUmV0dXJuZWQgdW5kZWZpbmVkIGluc3RlYWQgb2YgYSAnICtcblx0ICAgICAgICAgICdib29sZWFuIHZhbHVlLiBNYWtlIHN1cmUgdG8gcmV0dXJuIHRydWUgb3IgZmFsc2UuJ1xuXHQgICAgICAgICk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG5cdCAgICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuXHQgICAgICAvLyBXaWxsIHNldCBgdGhpcy5wcm9wc2AsIGB0aGlzLnN0YXRlYCBhbmQgYHRoaXMuY29udGV4dGAuXG5cdCAgICAgIHRoaXMuX3BlcmZvcm1Db21wb25lbnRVcGRhdGUoXG5cdCAgICAgICAgbmV4dEVsZW1lbnQsXG5cdCAgICAgICAgbmV4dFByb3BzLFxuXHQgICAgICAgIG5leHRTdGF0ZSxcblx0ICAgICAgICBuZXh0Q29udGV4dCxcblx0ICAgICAgICB0cmFuc2FjdGlvblxuXHQgICAgICApO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gSWYgaXQncyBkZXRlcm1pbmVkIHRoYXQgYSBjb21wb25lbnQgc2hvdWxkIG5vdCB1cGRhdGUsIHdlIHN0aWxsIHdhbnRcblx0ICAgICAgLy8gdG8gc2V0IHByb3BzIGFuZCBzdGF0ZS5cblx0ICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBuZXh0RWxlbWVudDtcblx0ICAgICAgdGhpcy5wcm9wcyA9IG5leHRQcm9wcztcblx0ICAgICAgdGhpcy5zdGF0ZSA9IG5leHRTdGF0ZTtcblx0ICAgICAgdGhpcy5jb250ZXh0ID0gbmV4dENvbnRleHQ7XG5cdFxuXHQgICAgICAvLyBPd25lciBjYW5ub3QgY2hhbmdlIGJlY2F1c2Ugc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgZG9lc24ndCBhbGxvd1xuXHQgICAgICAvLyBpdC4gVE9ETzogUmVtb3ZlIHRoaXMuX293bmVyIGNvbXBsZXRlbHkuXG5cdCAgICAgIHRoaXMuX293bmVyID0gbmV4dEVsZW1lbnQuX293bmVyO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIE1lcmdlcyBuZXcgcHJvcHMgYW5kIHN0YXRlLCBub3RpZmllcyBkZWxlZ2F0ZSBtZXRob2RzIG9mIHVwZGF0ZSBhbmRcblx0ICAgKiBwZXJmb3JtcyB1cGRhdGUuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgTmV4dCBlbGVtZW50XG5cdCAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wcyBOZXh0IHB1YmxpYyBvYmplY3QgdG8gc2V0IGFzIHByb3BlcnRpZXMuXG5cdCAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0U3RhdGUgTmV4dCBvYmplY3QgdG8gc2V0IGFzIHN0YXRlLlxuXHQgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENvbnRleHQgTmV4dCBwdWJsaWMgb2JqZWN0IHRvIHNldCBhcyBjb250ZXh0LlxuXHQgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cblx0ICAgKiBAcHJpdmF0ZVxuXHQgICAqL1xuXHQgIF9wZXJmb3JtQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbihcblx0ICAgIG5leHRFbGVtZW50LFxuXHQgICAgbmV4dFByb3BzLFxuXHQgICAgbmV4dFN0YXRlLFxuXHQgICAgbmV4dENvbnRleHQsXG5cdCAgICB0cmFuc2FjdGlvblxuXHQgICkge1xuXHQgICAgdmFyIHByZXZFbGVtZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQ7XG5cdCAgICB2YXIgcHJldlByb3BzID0gdGhpcy5wcm9wcztcblx0ICAgIHZhciBwcmV2U3RhdGUgPSB0aGlzLnN0YXRlO1xuXHQgICAgdmFyIHByZXZDb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXHRcblx0ICAgIGlmICh0aGlzLmNvbXBvbmVudFdpbGxVcGRhdGUpIHtcblx0ICAgICAgdGhpcy5jb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCk7XG5cdCAgICB9XG5cdFxuXHQgICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBuZXh0RWxlbWVudDtcblx0ICAgIHRoaXMucHJvcHMgPSBuZXh0UHJvcHM7XG5cdCAgICB0aGlzLnN0YXRlID0gbmV4dFN0YXRlO1xuXHQgICAgdGhpcy5jb250ZXh0ID0gbmV4dENvbnRleHQ7XG5cdFxuXHQgICAgLy8gT3duZXIgY2Fubm90IGNoYW5nZSBiZWNhdXNlIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50IGRvZXNuJ3QgYWxsb3dcblx0ICAgIC8vIGl0LiBUT0RPOiBSZW1vdmUgdGhpcy5fb3duZXIgY29tcGxldGVseS5cblx0ICAgIHRoaXMuX293bmVyID0gbmV4dEVsZW1lbnQuX293bmVyO1xuXHRcblx0ICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KFxuXHQgICAgICB0cmFuc2FjdGlvbixcblx0ICAgICAgcHJldkVsZW1lbnRcblx0ICAgICk7XG5cdFxuXHQgICAgaWYgKHRoaXMuY29tcG9uZW50RGlkVXBkYXRlKSB7XG5cdCAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoXG5cdCAgICAgICAgdGhpcy5jb21wb25lbnREaWRVcGRhdGUuYmluZCh0aGlzLCBwcmV2UHJvcHMsIHByZXZTdGF0ZSwgcHJldkNvbnRleHQpLFxuXHQgICAgICAgIHRoaXNcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbihuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24pIHtcblx0ICAgIGlmIChuZXh0RWxlbWVudCA9PT0gdGhpcy5fY3VycmVudEVsZW1lbnQgJiZcblx0ICAgICAgICBuZXh0RWxlbWVudC5fb3duZXIgIT0gbnVsbCkge1xuXHQgICAgICAvLyBTaW5jZSBlbGVtZW50cyBhcmUgaW1tdXRhYmxlIGFmdGVyIHRoZSBvd25lciBpcyByZW5kZXJlZCxcblx0ICAgICAgLy8gd2UgY2FuIGRvIGEgY2hlYXAgaWRlbnRpdHkgY29tcGFyZSBoZXJlIHRvIGRldGVybWluZSBpZiB0aGlzIGlzIGFcblx0ICAgICAgLy8gc3VwZXJmbHVvdXMgcmVjb25jaWxlLiBJdCdzIHBvc3NpYmxlIGZvciBzdGF0ZSB0byBiZSBtdXRhYmxlIGJ1dCBzdWNoXG5cdCAgICAgIC8vIGNoYW5nZSBzaG91bGQgdHJpZ2dlciBhbiB1cGRhdGUgb2YgdGhlIG93bmVyIHdoaWNoIHdvdWxkIHJlY3JlYXRlXG5cdCAgICAgIC8vIHRoZSBlbGVtZW50LiBXZSBleHBsaWNpdGx5IGNoZWNrIGZvciB0aGUgZXhpc3RlbmNlIG9mIGFuIG93bmVyIHNpbmNlXG5cdCAgICAgIC8vIGl0J3MgcG9zc2libGUgZm9yIGEgZWxlbWVudCBjcmVhdGVkIG91dHNpZGUgYSBjb21wb3NpdGUgdG8gYmVcblx0ICAgICAgLy8gZGVlcGx5IG11dGF0ZWQgYW5kIHJldXNlZC5cblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHRcblx0ICAgIFJlYWN0Q29tcG9uZW50Lk1peGluLnJlY2VpdmVDb21wb25lbnQuY2FsbChcblx0ICAgICAgdGhpcyxcblx0ICAgICAgbmV4dEVsZW1lbnQsXG5cdCAgICAgIHRyYW5zYWN0aW9uXG5cdCAgICApO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIFVwZGF0ZXMgdGhlIGNvbXBvbmVudCdzIGN1cnJlbnRseSBtb3VudGVkIERPTSByZXByZXNlbnRhdGlvbi5cblx0ICAgKlxuXHQgICAqIEJ5IGRlZmF1bHQsIHRoaXMgaW1wbGVtZW50cyBSZWFjdCdzIHJlbmRlcmluZyBhbmQgcmVjb25jaWxpYXRpb24gYWxnb3JpdGhtLlxuXHQgICAqIFNvcGhpc3RpY2F0ZWQgY2xpZW50cyBtYXkgd2lzaCB0byBvdmVycmlkZSB0aGlzLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuXHQgICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBwcmV2RWxlbWVudFxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqIEBvdmVycmlkYWJsZVxuXHQgICAqL1xuXHQgIHVwZGF0ZUNvbXBvbmVudDogUmVhY3RQZXJmLm1lYXN1cmUoXG5cdCAgICAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnLFxuXHQgICAgJ3VwZGF0ZUNvbXBvbmVudCcsXG5cdCAgICBmdW5jdGlvbih0cmFuc2FjdGlvbiwgcHJldlBhcmVudEVsZW1lbnQpIHtcblx0ICAgICAgUmVhY3RDb21wb25lbnQuTWl4aW4udXBkYXRlQ29tcG9uZW50LmNhbGwoXG5cdCAgICAgICAgdGhpcyxcblx0ICAgICAgICB0cmFuc2FjdGlvbixcblx0ICAgICAgICBwcmV2UGFyZW50RWxlbWVudFxuXHQgICAgICApO1xuXHRcblx0ICAgICAgdmFyIHByZXZDb21wb25lbnRJbnN0YW5jZSA9IHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50O1xuXHQgICAgICB2YXIgcHJldkVsZW1lbnQgPSBwcmV2Q29tcG9uZW50SW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50O1xuXHQgICAgICB2YXIgbmV4dEVsZW1lbnQgPSB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQoKTtcblx0ICAgICAgaWYgKHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcblx0ICAgICAgICBwcmV2Q29tcG9uZW50SW5zdGFuY2UucmVjZWl2ZUNvbXBvbmVudChuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIC8vIFRoZXNlIHR3byBJRHMgYXJlIGFjdHVhbGx5IHRoZSBzYW1lISBCdXQgbm90aGluZyBzaG91bGQgcmVseSBvbiB0aGF0LlxuXHQgICAgICAgIHZhciB0aGlzSUQgPSB0aGlzLl9yb290Tm9kZUlEO1xuXHQgICAgICAgIHZhciBwcmV2Q29tcG9uZW50SUQgPSBwcmV2Q29tcG9uZW50SW5zdGFuY2UuX3Jvb3ROb2RlSUQ7XG5cdCAgICAgICAgcHJldkNvbXBvbmVudEluc3RhbmNlLnVubW91bnRDb21wb25lbnQoKTtcblx0ICAgICAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoXG5cdCAgICAgICAgICBuZXh0RWxlbWVudCxcblx0ICAgICAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGVcblx0ICAgICAgICApO1xuXHQgICAgICAgIHZhciBuZXh0TWFya3VwID0gdGhpcy5fcmVuZGVyZWRDb21wb25lbnQubW91bnRDb21wb25lbnQoXG5cdCAgICAgICAgICB0aGlzSUQsXG5cdCAgICAgICAgICB0cmFuc2FjdGlvbixcblx0ICAgICAgICAgIHRoaXMuX21vdW50RGVwdGggKyAxXG5cdCAgICAgICAgKTtcblx0ICAgICAgICBSZWFjdENvbXBvbmVudC5CYWNrZW5kSURPcGVyYXRpb25zLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRChcblx0ICAgICAgICAgIHByZXZDb21wb25lbnRJRCxcblx0ICAgICAgICAgIG5leHRNYXJrdXBcblx0ICAgICAgICApO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgKSxcblx0XG5cdCAgLyoqXG5cdCAgICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuXHQgICAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuXHQgICAqXG5cdCAgICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuXHQgICAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuXHQgICAqXG5cdCAgICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZFVwZGF0ZUNvbXBvbmVudGAsIGJ1dCBpdCB3aWxsIGludm9rZVxuXHQgICAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHVwZGF0ZSBpcyBjb21wbGV0ZS5cblx0ICAgKiBAZmluYWxcblx0ICAgKiBAcHJvdGVjdGVkXG5cdCAgICovXG5cdCAgZm9yY2VVcGRhdGU6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdCAgICB2YXIgY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgPSB0aGlzLl9jb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZTtcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgIHRoaXMuaXNNb3VudGVkKCkgfHxcblx0ICAgICAgICBjb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9PT0gQ29tcG9zaXRlTGlmZUN5Y2xlLk1PVU5USU5HLFxuXHQgICAgICAnZm9yY2VVcGRhdGUoLi4uKTogQ2FuIG9ubHkgZm9yY2UgYW4gdXBkYXRlIG9uIG1vdW50ZWQgb3IgbW91bnRpbmcgJyArXG5cdCAgICAgICAgJ2NvbXBvbmVudHMuJ1xuXHQgICAgKSA6IGludmFyaWFudCh0aGlzLmlzTW91bnRlZCgpIHx8XG5cdCAgICAgIGNvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlID09PSBDb21wb3NpdGVMaWZlQ3ljbGUuTU9VTlRJTkcpKTtcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgIGNvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlICE9PSBDb21wb3NpdGVMaWZlQ3ljbGUuVU5NT1VOVElORyAmJlxuXHQgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwsXG5cdCAgICAgICdmb3JjZVVwZGF0ZSguLi4pOiBDYW5ub3QgZm9yY2UgYW4gdXBkYXRlIHdoaWxlIHVubW91bnRpbmcgY29tcG9uZW50ICcgK1xuXHQgICAgICAnb3Igd2l0aGluIGEgYHJlbmRlcmAgZnVuY3Rpb24uJ1xuXHQgICAgKSA6IGludmFyaWFudChjb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSAhPT0gQ29tcG9zaXRlTGlmZUN5Y2xlLlVOTU9VTlRJTkcgJiZcblx0ICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCkpO1xuXHQgICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gdHJ1ZTtcblx0ICAgIFJlYWN0VXBkYXRlcy5lbnF1ZXVlVXBkYXRlKHRoaXMsIGNhbGxiYWNrKTtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBAcHJpdmF0ZVxuXHQgICAqL1xuXHQgIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQ6IFJlYWN0UGVyZi5tZWFzdXJlKFxuXHQgICAgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50Jyxcblx0ICAgICdfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50Jyxcblx0ICAgIGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgcmVuZGVyZWRDb21wb25lbnQ7XG5cdCAgICAgIHZhciBwcmV2aW91c0NvbnRleHQgPSBSZWFjdENvbnRleHQuY3VycmVudDtcblx0ICAgICAgUmVhY3RDb250ZXh0LmN1cnJlbnQgPSB0aGlzLl9wcm9jZXNzQ2hpbGRDb250ZXh0KFxuXHQgICAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9jb250ZXh0XG5cdCAgICAgICk7XG5cdCAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSB0aGlzO1xuXHQgICAgICB0cnkge1xuXHQgICAgICAgIHJlbmRlcmVkQ29tcG9uZW50ID0gdGhpcy5yZW5kZXIoKTtcblx0ICAgICAgICBpZiAocmVuZGVyZWRDb21wb25lbnQgPT09IG51bGwgfHwgcmVuZGVyZWRDb21wb25lbnQgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICByZW5kZXJlZENvbXBvbmVudCA9IFJlYWN0RW1wdHlDb21wb25lbnQuZ2V0RW1wdHlDb21wb25lbnQoKTtcblx0ICAgICAgICAgIFJlYWN0RW1wdHlDb21wb25lbnQucmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQodGhpcy5fcm9vdE5vZGVJRCk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIFJlYWN0RW1wdHlDb21wb25lbnQuZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRCh0aGlzLl9yb290Tm9kZUlEKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgUmVhY3RDb250ZXh0LmN1cnJlbnQgPSBwcmV2aW91c0NvbnRleHQ7XG5cdCAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IG51bGw7XG5cdCAgICAgIH1cblx0ICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocmVuZGVyZWRDb21wb25lbnQpLFxuXHQgICAgICAgICclcy5yZW5kZXIoKTogQSB2YWxpZCBSZWFjdENvbXBvbmVudCBtdXN0IGJlIHJldHVybmVkLiBZb3UgbWF5IGhhdmUgJyArXG5cdCAgICAgICAgICAncmV0dXJuZWQgdW5kZWZpbmVkLCBhbiBhcnJheSBvciBzb21lIG90aGVyIGludmFsaWQgb2JqZWN0LicsXG5cdCAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnXG5cdCAgICAgICkgOiBpbnZhcmlhbnQoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHJlbmRlcmVkQ29tcG9uZW50KSkpO1xuXHQgICAgICByZXR1cm4gcmVuZGVyZWRDb21wb25lbnQ7XG5cdCAgICB9XG5cdCAgKSxcblx0XG5cdCAgLyoqXG5cdCAgICogQHByaXZhdGVcblx0ICAgKi9cblx0ICBfYmluZEF1dG9CaW5kTWV0aG9kczogZnVuY3Rpb24oKSB7XG5cdCAgICBmb3IgKHZhciBhdXRvQmluZEtleSBpbiB0aGlzLl9fcmVhY3RBdXRvQmluZE1hcCkge1xuXHQgICAgICBpZiAoIXRoaXMuX19yZWFjdEF1dG9CaW5kTWFwLmhhc093blByb3BlcnR5KGF1dG9CaW5kS2V5KSkge1xuXHQgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBtZXRob2QgPSB0aGlzLl9fcmVhY3RBdXRvQmluZE1hcFthdXRvQmluZEtleV07XG5cdCAgICAgIHRoaXNbYXV0b0JpbmRLZXldID0gdGhpcy5fYmluZEF1dG9CaW5kTWV0aG9kKFJlYWN0RXJyb3JVdGlscy5ndWFyZChcblx0ICAgICAgICBtZXRob2QsXG5cdCAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSArICcuJyArIGF1dG9CaW5kS2V5XG5cdCAgICAgICkpO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIEJpbmRzIGEgbWV0aG9kIHRvIHRoZSBjb21wb25lbnQuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXRob2QgTWV0aG9kIHRvIGJlIGJvdW5kLlxuXHQgICAqIEBwcml2YXRlXG5cdCAgICovXG5cdCAgX2JpbmRBdXRvQmluZE1ldGhvZDogZnVuY3Rpb24obWV0aG9kKSB7XG5cdCAgICB2YXIgY29tcG9uZW50ID0gdGhpcztcblx0ICAgIHZhciBib3VuZE1ldGhvZCA9IG1ldGhvZC5iaW5kKGNvbXBvbmVudCk7XG5cdCAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG5cdCAgICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZE1ldGhvZCA9IG1ldGhvZDtcblx0ICAgICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gbnVsbDtcblx0ICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWU7XG5cdCAgICAgIHZhciBfYmluZCA9IGJvdW5kTWV0aG9kLmJpbmQ7XG5cdCAgICAgIGJvdW5kTWV0aG9kLmJpbmQgPSBmdW5jdGlvbihuZXdUaGlzICkge2ZvciAodmFyIGFyZ3M9W10sJF9fMD0xLCRfXzE9YXJndW1lbnRzLmxlbmd0aDskX18wPCRfXzE7JF9fMCsrKSBhcmdzLnB1c2goYXJndW1lbnRzWyRfXzBdKTtcblx0ICAgICAgICAvLyBVc2VyIGlzIHRyeWluZyB0byBiaW5kKCkgYW4gYXV0b2JvdW5kIG1ldGhvZDsgd2UgZWZmZWN0aXZlbHkgd2lsbFxuXHQgICAgICAgIC8vIGlnbm9yZSB0aGUgdmFsdWUgb2YgXCJ0aGlzXCIgdGhhdCB0aGUgdXNlciBpcyB0cnlpbmcgdG8gdXNlLCBzb1xuXHQgICAgICAgIC8vIGxldCdzIHdhcm4uXG5cdCAgICAgICAgaWYgKG5ld1RoaXMgIT09IGNvbXBvbmVudCAmJiBuZXdUaGlzICE9PSBudWxsKSB7XG5cdCAgICAgICAgICBtb25pdG9yQ29kZVVzZSgncmVhY3RfYmluZF93YXJuaW5nJywgeyBjb21wb25lbnQ6IGNvbXBvbmVudE5hbWUgfSk7XG5cdCAgICAgICAgICBjb25zb2xlLndhcm4oXG5cdCAgICAgICAgICAgICdiaW5kKCk6IFJlYWN0IGNvbXBvbmVudCBtZXRob2RzIG1heSBvbmx5IGJlIGJvdW5kIHRvIHRoZSAnICtcblx0ICAgICAgICAgICAgJ2NvbXBvbmVudCBpbnN0YW5jZS4gU2VlICcgKyBjb21wb25lbnROYW1lXG5cdCAgICAgICAgICApO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoIWFyZ3MubGVuZ3RoKSB7XG5cdCAgICAgICAgICBtb25pdG9yQ29kZVVzZSgncmVhY3RfYmluZF93YXJuaW5nJywgeyBjb21wb25lbnQ6IGNvbXBvbmVudE5hbWUgfSk7XG5cdCAgICAgICAgICBjb25zb2xlLndhcm4oXG5cdCAgICAgICAgICAgICdiaW5kKCk6IFlvdSBhcmUgYmluZGluZyBhIGNvbXBvbmVudCBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC4gJyArXG5cdCAgICAgICAgICAgICdSZWFjdCBkb2VzIHRoaXMgZm9yIHlvdSBhdXRvbWF0aWNhbGx5IGluIGEgaGlnaC1wZXJmb3JtYW5jZSAnICtcblx0ICAgICAgICAgICAgJ3dheSwgc28geW91IGNhbiBzYWZlbHkgcmVtb3ZlIHRoaXMgY2FsbC4gU2VlICcgKyBjb21wb25lbnROYW1lXG5cdCAgICAgICAgICApO1xuXHQgICAgICAgICAgcmV0dXJuIGJvdW5kTWV0aG9kO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgcmVib3VuZE1ldGhvZCA9IF9iaW5kLmFwcGx5KGJvdW5kTWV0aG9kLCBhcmd1bWVudHMpO1xuXHQgICAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQ29udGV4dCA9IGNvbXBvbmVudDtcblx0ICAgICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZE1ldGhvZCA9IG1ldGhvZDtcblx0ICAgICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZEFyZ3VtZW50cyA9IGFyZ3M7XG5cdCAgICAgICAgcmV0dXJuIHJlYm91bmRNZXRob2Q7XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICByZXR1cm4gYm91bmRNZXRob2Q7XG5cdCAgfVxuXHR9O1xuXHRcblx0dmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50QmFzZSA9IGZ1bmN0aW9uKCkge307XG5cdGFzc2lnbihcblx0ICBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEJhc2UucHJvdG90eXBlLFxuXHQgIFJlYWN0Q29tcG9uZW50Lk1peGluLFxuXHQgIFJlYWN0T3duZXIuTWl4aW4sXG5cdCAgUmVhY3RQcm9wVHJhbnNmZXJlci5NaXhpbixcblx0ICBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudE1peGluXG5cdCk7XG5cdFxuXHQvKipcblx0ICogTW9kdWxlIGZvciBjcmVhdGluZyBjb21wb3NpdGUgY29tcG9uZW50cy5cblx0ICpcblx0ICogQGNsYXNzIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50XG5cdCAqIEBleHRlbmRzIFJlYWN0Q29tcG9uZW50XG5cdCAqIEBleHRlbmRzIFJlYWN0T3duZXJcblx0ICogQGV4dGVuZHMgUmVhY3RQcm9wVHJhbnNmZXJlclxuXHQgKi9cblx0dmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0ge1xuXHRcblx0ICBMaWZlQ3ljbGU6IENvbXBvc2l0ZUxpZmVDeWNsZSxcblx0XG5cdCAgQmFzZTogUmVhY3RDb21wb3NpdGVDb21wb25lbnRCYXNlLFxuXHRcblx0ICAvKipcblx0ICAgKiBDcmVhdGVzIGEgY29tcG9zaXRlIGNvbXBvbmVudCBjbGFzcyBnaXZlbiBhIGNsYXNzIHNwZWNpZmljYXRpb24uXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge29iamVjdH0gc3BlYyBDbGFzcyBzcGVjaWZpY2F0aW9uICh3aGljaCBtdXN0IGRlZmluZSBgcmVuZGVyYCkuXG5cdCAgICogQHJldHVybiB7ZnVuY3Rpb259IENvbXBvbmVudCBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cblx0ICAgKiBAcHVibGljXG5cdCAgICovXG5cdCAgY3JlYXRlQ2xhc3M6IGZ1bmN0aW9uKHNwZWMpIHtcblx0ICAgIHZhciBDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKHByb3BzKSB7XG5cdCAgICAgIC8vIFRoaXMgY29uc3RydWN0b3IgaXMgb3ZlcnJpZGRlbiBieSBtb2Nrcy4gVGhlIGFyZ3VtZW50IGlzIHVzZWRcblx0ICAgICAgLy8gYnkgbW9ja3MgdG8gYXNzZXJ0IG9uIHdoYXQgZ2V0cyBtb3VudGVkLiBUaGlzIHdpbGwgbGF0ZXIgYmUgdXNlZFxuXHQgICAgICAvLyBieSB0aGUgc3RhbmQtYWxvbmUgY2xhc3MgaW1wbGVtZW50YXRpb24uXG5cdCAgICB9O1xuXHQgICAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gbmV3IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50QmFzZSgpO1xuXHQgICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG5cdFxuXHQgICAgaW5qZWN0ZWRNaXhpbnMuZm9yRWFjaChcblx0ICAgICAgbWl4U3BlY0ludG9Db21wb25lbnQuYmluZChudWxsLCBDb25zdHJ1Y3Rvcilcblx0ICAgICk7XG5cdFxuXHQgICAgbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpO1xuXHRcblx0ICAgIC8vIEluaXRpYWxpemUgdGhlIGRlZmF1bHRQcm9wcyBwcm9wZXJ0eSBhZnRlciBhbGwgbWl4aW5zIGhhdmUgYmVlbiBtZXJnZWRcblx0ICAgIGlmIChDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMpIHtcblx0ICAgICAgQ29uc3RydWN0b3IuZGVmYXVsdFByb3BzID0gQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKCk7XG5cdCAgICB9XG5cdFxuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlLnJlbmRlcixcblx0ICAgICAgJ2NyZWF0ZUNsYXNzKC4uLik6IENsYXNzIHNwZWNpZmljYXRpb24gbXVzdCBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuJ1xuXHQgICAgKSA6IGludmFyaWFudChDb25zdHJ1Y3Rvci5wcm90b3R5cGUucmVuZGVyKSk7XG5cdFxuXHQgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuXHQgICAgICBpZiAoQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbXBvbmVudFNob3VsZFVwZGF0ZSkge1xuXHQgICAgICAgIG1vbml0b3JDb2RlVXNlKFxuXHQgICAgICAgICAgJ3JlYWN0X2NvbXBvbmVudF9zaG91bGRfdXBkYXRlX3dhcm5pbmcnLFxuXHQgICAgICAgICAgeyBjb21wb25lbnQ6IHNwZWMuZGlzcGxheU5hbWUgfVxuXHQgICAgICAgICk7XG5cdCAgICAgICAgY29uc29sZS53YXJuKFxuXHQgICAgICAgICAgKHNwZWMuZGlzcGxheU5hbWUgfHwgJ0EgY29tcG9uZW50JykgKyAnIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArXG5cdCAgICAgICAgICAnY29tcG9uZW50U2hvdWxkVXBkYXRlKCkuIERpZCB5b3UgbWVhbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKT8gJyArXG5cdCAgICAgICAgICAnVGhlIG5hbWUgaXMgcGhyYXNlZCBhcyBhIHF1ZXN0aW9uIGJlY2F1c2UgdGhlIGZ1bmN0aW9uIGlzICcgK1xuXHQgICAgICAgICAgJ2V4cGVjdGVkIHRvIHJldHVybiBhIHZhbHVlLidcblx0ICAgICAgICAgKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIC8vIFJlZHVjZSB0aW1lIHNwZW50IGRvaW5nIGxvb2t1cHMgYnkgc2V0dGluZyB0aGVzZSBvbiB0aGUgcHJvdG90eXBlLlxuXHQgICAgZm9yICh2YXIgbWV0aG9kTmFtZSBpbiBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEludGVyZmFjZSkge1xuXHQgICAgICBpZiAoIUNvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSkge1xuXHQgICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IG51bGw7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICAgIHJldHVybiBSZWFjdExlZ2FjeUVsZW1lbnQud3JhcEZhY3RvcnkoXG5cdCAgICAgICAgUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUZhY3RvcnkoQ29uc3RydWN0b3IpXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gUmVhY3RMZWdhY3lFbGVtZW50LndyYXBGYWN0b3J5KFxuXHQgICAgICBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeShDb25zdHJ1Y3Rvcilcblx0ICAgICk7XG5cdCAgfSxcblx0XG5cdCAgaW5qZWN0aW9uOiB7XG5cdCAgICBpbmplY3RNaXhpbjogZnVuY3Rpb24obWl4aW4pIHtcblx0ICAgICAgaW5qZWN0ZWRNaXhpbnMucHVzaChtaXhpbik7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudDtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDEwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBSZWFjdEVtcHR5Q29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7XG5cdHZhciBSZWFjdE1vdW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblx0XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0ge1xuXHQgIC8qKlxuXHQgICAqIFJldHVybnMgdGhlIERPTSBub2RlIHJlbmRlcmVkIGJ5IHRoaXMgY29tcG9uZW50LlxuXHQgICAqXG5cdCAgICogQHJldHVybiB7RE9NRWxlbWVudH0gVGhlIHJvb3Qgbm9kZSBvZiB0aGlzIGNvbXBvbmVudC5cblx0ICAgKiBAZmluYWxcblx0ICAgKiBAcHJvdGVjdGVkXG5cdCAgICovXG5cdCAgZ2V0RE9NTm9kZTogZnVuY3Rpb24oKSB7XG5cdCAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICB0aGlzLmlzTW91bnRlZCgpLFxuXHQgICAgICAnZ2V0RE9NTm9kZSgpOiBBIGNvbXBvbmVudCBtdXN0IGJlIG1vdW50ZWQgdG8gaGF2ZSBhIERPTSBub2RlLidcblx0ICAgICkgOiBpbnZhcmlhbnQodGhpcy5pc01vdW50ZWQoKSkpO1xuXHQgICAgaWYgKFJlYWN0RW1wdHlDb21wb25lbnQuaXNOdWxsQ29tcG9uZW50SUQodGhpcy5fcm9vdE5vZGVJRCkpIHtcblx0ICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gUmVhY3RNb3VudC5nZXROb2RlKHRoaXMuX3Jvb3ROb2RlSUQpO1xuXHQgIH1cblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW47XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiAxMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UGVyZlxuXHQgKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0LyoqXG5cdCAqIFJlYWN0UGVyZiBpcyBhIGdlbmVyYWwgQU9QIHN5c3RlbSBkZXNpZ25lZCB0byBtZWFzdXJlIHBlcmZvcm1hbmNlLiBUaGlzXG5cdCAqIG1vZHVsZSBvbmx5IGhhcyB0aGUgaG9va3M6IHNlZSBSZWFjdERlZmF1bHRQZXJmIGZvciB0aGUgYW5hbHlzaXMgdG9vbC5cblx0ICovXG5cdHZhciBSZWFjdFBlcmYgPSB7XG5cdCAgLyoqXG5cdCAgICogQm9vbGVhbiB0byBlbmFibGUvZGlzYWJsZSBtZWFzdXJlbWVudC4gU2V0IHRvIGZhbHNlIGJ5IGRlZmF1bHQgdG8gcHJldmVudFxuXHQgICAqIGFjY2lkZW50YWwgbG9nZ2luZyBhbmQgcGVyZiBsb3NzLlxuXHQgICAqL1xuXHQgIGVuYWJsZU1lYXN1cmU6IGZhbHNlLFxuXHRcblx0ICAvKipcblx0ICAgKiBIb2xkcyBvbnRvIHRoZSBtZWFzdXJlIGZ1bmN0aW9uIGluIHVzZS4gQnkgZGVmYXVsdCwgZG9uJ3QgbWVhc3VyZVxuXHQgICAqIGFueXRoaW5nLCBidXQgd2UnbGwgb3ZlcnJpZGUgdGhpcyBpZiB3ZSBpbmplY3QgYSBtZWFzdXJlIGZ1bmN0aW9uLlxuXHQgICAqL1xuXHQgIHN0b3JlZE1lYXN1cmU6IF9ub01lYXN1cmUsXG5cdFxuXHQgIC8qKlxuXHQgICAqIFVzZSB0aGlzIHRvIHdyYXAgbWV0aG9kcyB5b3Ugd2FudCB0byBtZWFzdXJlLiBaZXJvIG92ZXJoZWFkIGluIHByb2R1Y3Rpb24uXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gb2JqTmFtZVxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBmbk5hbWVcblx0ICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jXG5cdCAgICogQHJldHVybiB7ZnVuY3Rpb259XG5cdCAgICovXG5cdCAgbWVhc3VyZTogZnVuY3Rpb24ob2JqTmFtZSwgZm5OYW1lLCBmdW5jKSB7XG5cdCAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICAgIHZhciBtZWFzdXJlZEZ1bmMgPSBudWxsO1xuXHQgICAgICB2YXIgd3JhcHBlciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIGlmIChSZWFjdFBlcmYuZW5hYmxlTWVhc3VyZSkge1xuXHQgICAgICAgICAgaWYgKCFtZWFzdXJlZEZ1bmMpIHtcblx0ICAgICAgICAgICAgbWVhc3VyZWRGdW5jID0gUmVhY3RQZXJmLnN0b3JlZE1lYXN1cmUob2JqTmFtZSwgZm5OYW1lLCBmdW5jKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHJldHVybiBtZWFzdXJlZEZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgfTtcblx0ICAgICAgd3JhcHBlci5kaXNwbGF5TmFtZSA9IG9iak5hbWUgKyAnXycgKyBmbk5hbWU7XG5cdCAgICAgIHJldHVybiB3cmFwcGVyO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGZ1bmM7XG5cdCAgfSxcblx0XG5cdCAgaW5qZWN0aW9uOiB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1lYXN1cmVcblx0ICAgICAqL1xuXHQgICAgaW5qZWN0TWVhc3VyZTogZnVuY3Rpb24obWVhc3VyZSkge1xuXHQgICAgICBSZWFjdFBlcmYuc3RvcmVkTWVhc3VyZSA9IG1lYXN1cmU7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIFNpbXBseSBwYXNzZXMgdGhyb3VnaCB0aGUgbWVhc3VyZWQgZnVuY3Rpb24sIHdpdGhvdXQgbWVhc3VyaW5nIGl0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gb2JqTmFtZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZm5OYW1lXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmNcblx0ICogQHJldHVybiB7ZnVuY3Rpb259XG5cdCAqL1xuXHRmdW5jdGlvbiBfbm9NZWFzdXJlKG9iak5hbWUsIGZuTmFtZSwgZnVuYykge1xuXHQgIHJldHVybiBmdW5jO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0UGVyZjtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDEyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RVcGRhdGVzXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgQ2FsbGJhY2tRdWV1ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDIpO1xuXHR2YXIgUG9vbGVkQ2xhc3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblx0dmFyIFJlYWN0Q3VycmVudE93bmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cdHZhciBSZWFjdFBlcmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcblx0dmFyIFRyYW5zYWN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7XG5cdFxuXHR2YXIgYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0dmFyIGludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdHZhciB3YXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdHZhciBkaXJ0eUNvbXBvbmVudHMgPSBbXTtcblx0dmFyIGFzYXBDYWxsYmFja1F1ZXVlID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKTtcblx0dmFyIGFzYXBFbnF1ZXVlZCA9IGZhbHNlO1xuXHRcblx0dmFyIGJhdGNoaW5nU3RyYXRlZ3kgPSBudWxsO1xuXHRcblx0ZnVuY3Rpb24gZW5zdXJlSW5qZWN0ZWQoKSB7XG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uICYmIGJhdGNoaW5nU3RyYXRlZ3ksXG5cdCAgICAnUmVhY3RVcGRhdGVzOiBtdXN0IGluamVjdCBhIHJlY29uY2lsZSB0cmFuc2FjdGlvbiBjbGFzcyBhbmQgYmF0Y2hpbmcgJyArXG5cdCAgICAnc3RyYXRlZ3knXG5cdCAgKSA6IGludmFyaWFudChSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiAmJiBiYXRjaGluZ1N0cmF0ZWd5KSk7XG5cdH1cblx0XG5cdHZhciBORVNURURfVVBEQVRFUyA9IHtcblx0ICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gZGlydHlDb21wb25lbnRzLmxlbmd0aDtcblx0ICB9LFxuXHQgIGNsb3NlOiBmdW5jdGlvbigpIHtcblx0ICAgIGlmICh0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCAhPT0gZGlydHlDb21wb25lbnRzLmxlbmd0aCkge1xuXHQgICAgICAvLyBBZGRpdGlvbmFsIHVwZGF0ZXMgd2VyZSBlbnF1ZXVlZCBieSBjb21wb25lbnREaWRVcGRhdGUgaGFuZGxlcnMgb3Jcblx0ICAgICAgLy8gc2ltaWxhcjsgYmVmb3JlIG91ciBvd24gVVBEQVRFX1FVRVVFSU5HIHdyYXBwZXIgY2xvc2VzLCB3ZSB3YW50IHRvIHJ1blxuXHQgICAgICAvLyB0aGVzZSBuZXcgdXBkYXRlcyBzbyB0aGF0IGlmIEEncyBjb21wb25lbnREaWRVcGRhdGUgY2FsbHMgc2V0U3RhdGUgb25cblx0ICAgICAgLy8gQiwgQiB3aWxsIHVwZGF0ZSBiZWZvcmUgdGhlIGNhbGxiYWNrIEEncyB1cGRhdGVyIHByb3ZpZGVkIHdoZW4gY2FsbGluZ1xuXHQgICAgICAvLyBzZXRTdGF0ZS5cblx0ICAgICAgZGlydHlDb21wb25lbnRzLnNwbGljZSgwLCB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCk7XG5cdCAgICAgIGZsdXNoQmF0Y2hlZFVwZGF0ZXMoKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGRpcnR5Q29tcG9uZW50cy5sZW5ndGggPSAwO1xuXHQgICAgfVxuXHQgIH1cblx0fTtcblx0XG5cdHZhciBVUERBVEVfUVVFVUVJTkcgPSB7XG5cdCAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLmNhbGxiYWNrUXVldWUucmVzZXQoKTtcblx0ICB9LFxuXHQgIGNsb3NlOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMuY2FsbGJhY2tRdWV1ZS5ub3RpZnlBbGwoKTtcblx0ICB9XG5cdH07XG5cdFxuXHR2YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbTkVTVEVEX1VQREFURVMsIFVQREFURV9RVUVVRUlOR107XG5cdFxuXHRmdW5jdGlvbiBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uKCkge1xuXHQgIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcblx0ICB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCA9IG51bGw7XG5cdCAgdGhpcy5jYWxsYmFja1F1ZXVlID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKTtcblx0ICB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uID1cblx0ICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmdldFBvb2xlZCgpO1xuXHR9XG5cdFxuXHRhc3NpZ24oXG5cdCAgUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbi5wcm90b3R5cGUsXG5cdCAgVHJhbnNhY3Rpb24uTWl4aW4sIHtcblx0ICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcblx0ICB9LFxuXHRcblx0ICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gbnVsbDtcblx0ICAgIENhbGxiYWNrUXVldWUucmVsZWFzZSh0aGlzLmNhbGxiYWNrUXVldWUpO1xuXHQgICAgdGhpcy5jYWxsYmFja1F1ZXVlID0gbnVsbDtcblx0ICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLnJlbGVhc2UodGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbik7XG5cdCAgICB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uID0gbnVsbDtcblx0ICB9LFxuXHRcblx0ICBwZXJmb3JtOiBmdW5jdGlvbihtZXRob2QsIHNjb3BlLCBhKSB7XG5cdCAgICAvLyBFc3NlbnRpYWxseSBjYWxscyBgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbi5wZXJmb3JtKG1ldGhvZCwgc2NvcGUsIGEpYFxuXHQgICAgLy8gd2l0aCB0aGlzIHRyYW5zYWN0aW9uJ3Mgd3JhcHBlcnMgYXJvdW5kIGl0LlxuXHQgICAgcmV0dXJuIFRyYW5zYWN0aW9uLk1peGluLnBlcmZvcm0uY2FsbChcblx0ICAgICAgdGhpcyxcblx0ICAgICAgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbi5wZXJmb3JtLFxuXHQgICAgICB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uLFxuXHQgICAgICBtZXRob2QsXG5cdCAgICAgIHNjb3BlLFxuXHQgICAgICBhXG5cdCAgICApO1xuXHQgIH1cblx0fSk7XG5cdFxuXHRQb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbik7XG5cdFxuXHRmdW5jdGlvbiBiYXRjaGVkVXBkYXRlcyhjYWxsYmFjaywgYSwgYikge1xuXHQgIGVuc3VyZUluamVjdGVkKCk7XG5cdCAgYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyhjYWxsYmFjaywgYSwgYik7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBBcnJheSBjb21wYXJhdG9yIGZvciBSZWFjdENvbXBvbmVudHMgYnkgb3duZXIgZGVwdGhcblx0ICpcblx0ICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gYzEgZmlyc3QgY29tcG9uZW50IHlvdSdyZSBjb21wYXJpbmdcblx0ICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gYzIgc2Vjb25kIGNvbXBvbmVudCB5b3UncmUgY29tcGFyaW5nXG5cdCAqIEByZXR1cm4ge251bWJlcn0gUmV0dXJuIHZhbHVlIHVzYWJsZSBieSBBcnJheS5wcm90b3R5cGUuc29ydCgpLlxuXHQgKi9cblx0ZnVuY3Rpb24gbW91bnREZXB0aENvbXBhcmF0b3IoYzEsIGMyKSB7XG5cdCAgcmV0dXJuIGMxLl9tb3VudERlcHRoIC0gYzIuX21vdW50RGVwdGg7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHJ1bkJhdGNoZWRVcGRhdGVzKHRyYW5zYWN0aW9uKSB7XG5cdCAgdmFyIGxlbiA9IHRyYW5zYWN0aW9uLmRpcnR5Q29tcG9uZW50c0xlbmd0aDtcblx0ICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgbGVuID09PSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoLFxuXHQgICAgJ0V4cGVjdGVkIGZsdXNoIHRyYW5zYWN0aW9uXFwncyBzdG9yZWQgZGlydHktY29tcG9uZW50cyBsZW5ndGggKCVzKSB0byAnICtcblx0ICAgICdtYXRjaCBkaXJ0eS1jb21wb25lbnRzIGFycmF5IGxlbmd0aCAoJXMpLicsXG5cdCAgICBsZW4sXG5cdCAgICBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoXG5cdCAgKSA6IGludmFyaWFudChsZW4gPT09IGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpKTtcblx0XG5cdCAgLy8gU2luY2UgcmVjb25jaWxpbmcgYSBjb21wb25lbnQgaGlnaGVyIGluIHRoZSBvd25lciBoaWVyYXJjaHkgdXN1YWxseSAobm90XG5cdCAgLy8gYWx3YXlzIC0tIHNlZSBzaG91bGRDb21wb25lbnRVcGRhdGUoKSkgd2lsbCByZWNvbmNpbGUgY2hpbGRyZW4sIHJlY29uY2lsZVxuXHQgIC8vIHRoZW0gYmVmb3JlIHRoZWlyIGNoaWxkcmVuIGJ5IHNvcnRpbmcgdGhlIGFycmF5LlxuXHQgIGRpcnR5Q29tcG9uZW50cy5zb3J0KG1vdW50RGVwdGhDb21wYXJhdG9yKTtcblx0XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHQgICAgLy8gSWYgYSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGJlZm9yZSBwZW5kaW5nIGNoYW5nZXMgYXBwbHksIGlnbm9yZSB0aGVtXG5cdCAgICAvLyBUT0RPOiBRdWV1ZSB1bm1vdW50cyBpbiB0aGUgc2FtZSBsaXN0IHRvIGF2b2lkIHRoaXMgaGFwcGVuaW5nIGF0IGFsbFxuXHQgICAgdmFyIGNvbXBvbmVudCA9IGRpcnR5Q29tcG9uZW50c1tpXTtcblx0ICAgIGlmIChjb21wb25lbnQuaXNNb3VudGVkKCkpIHtcblx0ICAgICAgLy8gSWYgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5IGhhcHBlbnMgdG8gZW5xdWV1ZSBhbnkgbmV3IHVwZGF0ZXMsIHdlXG5cdCAgICAgIC8vIHNob3VsZG4ndCBleGVjdXRlIHRoZSBjYWxsYmFja3MgdW50aWwgdGhlIG5leHQgcmVuZGVyIGhhcHBlbnMsIHNvXG5cdCAgICAgIC8vIHN0YXNoIHRoZSBjYWxsYmFja3MgZmlyc3Rcblx0ICAgICAgdmFyIGNhbGxiYWNrcyA9IGNvbXBvbmVudC5fcGVuZGluZ0NhbGxiYWNrcztcblx0ICAgICAgY29tcG9uZW50Ll9wZW5kaW5nQ2FsbGJhY2tzID0gbnVsbDtcblx0ICAgICAgY29tcG9uZW50LnBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeSh0cmFuc2FjdGlvbi5yZWNvbmNpbGVUcmFuc2FjdGlvbik7XG5cdFxuXHQgICAgICBpZiAoY2FsbGJhY2tzKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjYWxsYmFja3MubGVuZ3RoOyBqKyspIHtcblx0ICAgICAgICAgIHRyYW5zYWN0aW9uLmNhbGxiYWNrUXVldWUuZW5xdWV1ZShcblx0ICAgICAgICAgICAgY2FsbGJhY2tzW2pdLFxuXHQgICAgICAgICAgICBjb21wb25lbnRcblx0ICAgICAgICAgICk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHR2YXIgZmx1c2hCYXRjaGVkVXBkYXRlcyA9IFJlYWN0UGVyZi5tZWFzdXJlKFxuXHQgICdSZWFjdFVwZGF0ZXMnLFxuXHQgICdmbHVzaEJhdGNoZWRVcGRhdGVzJyxcblx0ICBmdW5jdGlvbigpIHtcblx0ICAgIC8vIFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24ncyB3cmFwcGVycyB3aWxsIGNsZWFyIHRoZSBkaXJ0eUNvbXBvbmVudHNcblx0ICAgIC8vIGFycmF5IGFuZCBwZXJmb3JtIGFueSB1cGRhdGVzIGVucXVldWVkIGJ5IG1vdW50LXJlYWR5IGhhbmRsZXJzIChpLmUuLFxuXHQgICAgLy8gY29tcG9uZW50RGlkVXBkYXRlKSBidXQgd2UgbmVlZCB0byBjaGVjayBoZXJlIHRvbyBpbiBvcmRlciB0byBjYXRjaFxuXHQgICAgLy8gdXBkYXRlcyBlbnF1ZXVlZCBieSBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIGFzYXAgY2FsbHMuXG5cdCAgICB3aGlsZSAoZGlydHlDb21wb25lbnRzLmxlbmd0aCB8fCBhc2FwRW5xdWV1ZWQpIHtcblx0ICAgICAgaWYgKGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpIHtcblx0ICAgICAgICB2YXIgdHJhbnNhY3Rpb24gPSBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLmdldFBvb2xlZCgpO1xuXHQgICAgICAgIHRyYW5zYWN0aW9uLnBlcmZvcm0ocnVuQmF0Y2hlZFVwZGF0ZXMsIG51bGwsIHRyYW5zYWN0aW9uKTtcblx0ICAgICAgICBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoYXNhcEVucXVldWVkKSB7XG5cdCAgICAgICAgYXNhcEVucXVldWVkID0gZmFsc2U7XG5cdCAgICAgICAgdmFyIHF1ZXVlID0gYXNhcENhbGxiYWNrUXVldWU7XG5cdCAgICAgICAgYXNhcENhbGxiYWNrUXVldWUgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpO1xuXHQgICAgICAgIHF1ZXVlLm5vdGlmeUFsbCgpO1xuXHQgICAgICAgIENhbGxiYWNrUXVldWUucmVsZWFzZShxdWV1ZSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdCk7XG5cdFxuXHQvKipcblx0ICogTWFyayBhIGNvbXBvbmVudCBhcyBuZWVkaW5nIGEgcmVyZW5kZXIsIGFkZGluZyBhbiBvcHRpb25hbCBjYWxsYmFjayB0byBhXG5cdCAqIGxpc3Qgb2YgZnVuY3Rpb25zIHdoaWNoIHdpbGwgYmUgZXhlY3V0ZWQgb25jZSB0aGUgcmVyZW5kZXIgb2NjdXJzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZW5xdWV1ZVVwZGF0ZShjb21wb25lbnQsIGNhbGxiYWNrKSB7XG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICFjYWxsYmFjayB8fCB0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIixcblx0ICAgICdlbnF1ZXVlVXBkYXRlKC4uLik6IFlvdSBjYWxsZWQgYHNldFByb3BzYCwgYHJlcGxhY2VQcm9wc2AsICcgK1xuXHQgICAgJ2BzZXRTdGF0ZWAsIGByZXBsYWNlU3RhdGVgLCBvciBgZm9yY2VVcGRhdGVgIHdpdGggYSBjYWxsYmFjayB0aGF0ICcgK1xuXHQgICAgJ2lzblxcJ3QgY2FsbGFibGUuJ1xuXHQgICkgOiBpbnZhcmlhbnQoIWNhbGxiYWNrIHx8IHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSk7XG5cdCAgZW5zdXJlSW5qZWN0ZWQoKTtcblx0XG5cdCAgLy8gVmFyaW91cyBwYXJ0cyBvZiBvdXIgY29kZSAoc3VjaCBhcyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdzXG5cdCAgLy8gX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCkgYXNzdW1lIHRoYXQgY2FsbHMgdG8gcmVuZGVyIGFyZW4ndCBuZXN0ZWQ7XG5cdCAgLy8gdmVyaWZ5IHRoYXQgdGhhdCdzIHRoZSBjYXNlLiAoVGhpcyBpcyBjYWxsZWQgYnkgZWFjaCB0b3AtbGV2ZWwgdXBkYXRlXG5cdCAgLy8gZnVuY3Rpb24sIGxpa2Ugc2V0UHJvcHMsIHNldFN0YXRlLCBmb3JjZVVwZGF0ZSwgZXRjLjsgY3JlYXRpb24gYW5kXG5cdCAgLy8gZGVzdHJ1Y3Rpb24gb2YgdG9wLWxldmVsIGNvbXBvbmVudHMgaXMgZ3VhcmRlZCBpbiBSZWFjdE1vdW50Lilcblx0ICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcblx0ICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCxcblx0ICAgICdlbnF1ZXVlVXBkYXRlKCk6IFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgJyArXG5cdCAgICAnYW5kIHN0YXRlOyB0cmlnZ2VyaW5nIG5lc3RlZCBjb21wb25lbnQgdXBkYXRlcyBmcm9tIHJlbmRlciBpcyBub3QgJyArXG5cdCAgICAnYWxsb3dlZC4gSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluICcgK1xuXHQgICAgJ2NvbXBvbmVudERpZFVwZGF0ZS4nXG5cdCAgKSA6IG51bGwpO1xuXHRcblx0ICBpZiAoIWJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMpIHtcblx0ICAgIGJhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMoZW5xdWV1ZVVwZGF0ZSwgY29tcG9uZW50LCBjYWxsYmFjayk7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHRcblx0ICBkaXJ0eUNvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuXHRcblx0ICBpZiAoY2FsbGJhY2spIHtcblx0ICAgIGlmIChjb21wb25lbnQuX3BlbmRpbmdDYWxsYmFja3MpIHtcblx0ICAgICAgY29tcG9uZW50Ll9wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgY29tcG9uZW50Ll9wZW5kaW5nQ2FsbGJhY2tzID0gW2NhbGxiYWNrXTtcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBFbnF1ZXVlIGEgY2FsbGJhY2sgdG8gYmUgcnVuIGF0IHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgYmF0Y2hpbmcgY3ljbGUuIFRocm93c1xuXHQgKiBpZiBubyB1cGRhdGVzIGFyZSBjdXJyZW50bHkgYmVpbmcgcGVyZm9ybWVkLlxuXHQgKi9cblx0ZnVuY3Rpb24gYXNhcChjYWxsYmFjaywgY29udGV4dCkge1xuXHQgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICBiYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzLFxuXHQgICAgJ1JlYWN0VXBkYXRlcy5hc2FwOiBDYW5cXCd0IGVucXVldWUgYW4gYXNhcCBjYWxsYmFjayBpbiBhIGNvbnRleHQgd2hlcmUnICtcblx0ICAgICd1cGRhdGVzIGFyZSBub3QgYmVpbmcgYmF0Y2hlZC4nXG5cdCAgKSA6IGludmFyaWFudChiYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzKSk7XG5cdCAgYXNhcENhbGxiYWNrUXVldWUuZW5xdWV1ZShjYWxsYmFjaywgY29udGV4dCk7XG5cdCAgYXNhcEVucXVldWVkID0gdHJ1ZTtcblx0fVxuXHRcblx0dmFyIFJlYWN0VXBkYXRlc0luamVjdGlvbiA9IHtcblx0ICBpbmplY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjogZnVuY3Rpb24oUmVjb25jaWxlVHJhbnNhY3Rpb24pIHtcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgIFJlY29uY2lsZVRyYW5zYWN0aW9uLFxuXHQgICAgICAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYSByZWNvbmNpbGUgdHJhbnNhY3Rpb24gY2xhc3MnXG5cdCAgICApIDogaW52YXJpYW50KFJlY29uY2lsZVRyYW5zYWN0aW9uKSk7XG5cdCAgICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiA9IFJlY29uY2lsZVRyYW5zYWN0aW9uO1xuXHQgIH0sXG5cdFxuXHQgIGluamVjdEJhdGNoaW5nU3RyYXRlZ3k6IGZ1bmN0aW9uKF9iYXRjaGluZ1N0cmF0ZWd5KSB7XG5cdCAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICBfYmF0Y2hpbmdTdHJhdGVneSxcblx0ICAgICAgJ1JlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGEgYmF0Y2hpbmcgc3RyYXRlZ3knXG5cdCAgICApIDogaW52YXJpYW50KF9iYXRjaGluZ1N0cmF0ZWd5KSk7XG5cdCAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICB0eXBlb2YgX2JhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMgPT09ICdmdW5jdGlvbicsXG5cdCAgICAgICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIGJhdGNoZWRVcGRhdGVzKCkgZnVuY3Rpb24nXG5cdCAgICApIDogaW52YXJpYW50KHR5cGVvZiBfYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyA9PT0gJ2Z1bmN0aW9uJykpO1xuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgdHlwZW9mIF9iYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID09PSAnYm9vbGVhbicsXG5cdCAgICAgICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhbiBpc0JhdGNoaW5nVXBkYXRlcyBib29sZWFuIGF0dHJpYnV0ZSdcblx0ICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIF9iYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID09PSAnYm9vbGVhbicpKTtcblx0ICAgIGJhdGNoaW5nU3RyYXRlZ3kgPSBfYmF0Y2hpbmdTdHJhdGVneTtcblx0ICB9XG5cdH07XG5cdFxuXHR2YXIgUmVhY3RVcGRhdGVzID0ge1xuXHQgIC8qKlxuXHQgICAqIFJlYWN0IHJlZmVyZW5jZXMgYFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb25gIHVzaW5nIHRoaXMgcHJvcGVydHkgaW4gb3JkZXJcblx0ICAgKiB0byBhbGxvdyBkZXBlbmRlbmN5IGluamVjdGlvbi5cblx0ICAgKlxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb246IG51bGwsXG5cdFxuXHQgIGJhdGNoZWRVcGRhdGVzOiBiYXRjaGVkVXBkYXRlcyxcblx0ICBlbnF1ZXVlVXBkYXRlOiBlbnF1ZXVlVXBkYXRlLFxuXHQgIGZsdXNoQmF0Y2hlZFVwZGF0ZXM6IGZsdXNoQmF0Y2hlZFVwZGF0ZXMsXG5cdCAgaW5qZWN0aW9uOiBSZWFjdFVwZGF0ZXNJbmplY3Rpb24sXG5cdCAgYXNhcDogYXNhcFxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdFVwZGF0ZXM7XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiAxMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBlbXB0eUZ1bmN0aW9uXG5cdCAqL1xuXHRcblx0ZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGFyZztcblx0ICB9O1xuXHR9XG5cdFxuXHQvKipcblx0ICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcblx0ICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcblx0ICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cblx0ICovXG5cdGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuXHRcblx0ZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuXHRlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5cdGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5cdGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5cdGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9O1xuXHRlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbihhcmcpIHsgcmV0dXJuIGFyZzsgfTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjtcblxuXG4vKioqLyB9LFxuLyogMTQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUga2V5T2Zcblx0ICovXG5cdFxuXHQvKipcblx0ICogQWxsb3dzIGV4dHJhY3Rpb24gb2YgYSBtaW5pZmllZCBrZXkuIExldCdzIHRoZSBidWlsZCBzeXN0ZW0gbWluaWZ5IGtleXNcblx0ICogd2l0aG91dCBsb29zaW5nIHRoZSBhYmlsaXR5IHRvIGR5bmFtaWNhbGx5IHVzZSBrZXkgc3RyaW5ncyBhcyB2YWx1ZXNcblx0ICogdGhlbXNlbHZlcy4gUGFzcyBpbiBhbiBvYmplY3Qgd2l0aCBhIHNpbmdsZSBrZXkvdmFsIHBhaXIgYW5kIGl0IHdpbGwgcmV0dXJuXG5cdCAqIHlvdSB0aGUgc3RyaW5nIGtleSBvZiB0aGF0IHNpbmdsZSByZWNvcmQuIFN1cHBvc2UgeW91IHdhbnQgdG8gZ3JhYiB0aGVcblx0ICogdmFsdWUgZm9yIGEga2V5ICdjbGFzc05hbWUnIGluc2lkZSBvZiBhbiBvYmplY3QuIEtleS92YWwgbWluaWZpY2F0aW9uIG1heVxuXHQgKiBoYXZlIGFsaWFzZWQgdGhhdCBrZXkgdG8gYmUgJ3hhMTInLiBrZXlPZih7Y2xhc3NOYW1lOiBudWxsfSkgd2lsbCByZXR1cm5cblx0ICogJ3hhMTInIGluIHRoYXQgY2FzZS4gUmVzb2x2ZSBrZXlzIHlvdSB3YW50IHRvIHVzZSBvbmNlIGF0IHN0YXJ0dXAgdGltZSwgdGhlblxuXHQgKiByZXVzZSB0aG9zZSByZXNvbHV0aW9ucy5cblx0ICovXG5cdHZhciBrZXlPZiA9IGZ1bmN0aW9uKG9uZUtleU9iaikge1xuXHQgIHZhciBrZXk7XG5cdCAgZm9yIChrZXkgaW4gb25lS2V5T2JqKSB7XG5cdCAgICBpZiAoIW9uZUtleU9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdCAgICAgIGNvbnRpbnVlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGtleTtcblx0ICB9XG5cdCAgcmV0dXJuIG51bGw7XG5cdH07XG5cdFxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBrZXlPZjtcblxuXG4vKioqLyB9LFxuLyogMTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBQb29sZWRDbGFzc1xuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIGludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHQvKipcblx0ICogU3RhdGljIHBvb2xlcnMuIFNldmVyYWwgY3VzdG9tIHZlcnNpb25zIGZvciBlYWNoIHBvdGVudGlhbCBudW1iZXIgb2Zcblx0ICogYXJndW1lbnRzLiBBIGNvbXBsZXRlbHkgZ2VuZXJpYyBwb29sZXIgaXMgZWFzeSB0byBpbXBsZW1lbnQsIGJ1dCB3b3VsZFxuXHQgKiByZXF1aXJlIGFjY2Vzc2luZyB0aGUgYGFyZ3VtZW50c2Agb2JqZWN0LiBJbiBlYWNoIG9mIHRoZXNlLCBgdGhpc2AgcmVmZXJzIHRvXG5cdCAqIHRoZSBDbGFzcyBpdHNlbGYsIG5vdCBhbiBpbnN0YW5jZS4gSWYgYW55IG90aGVycyBhcmUgbmVlZGVkLCBzaW1wbHkgYWRkIHRoZW1cblx0ICogaGVyZSwgb3IgaW4gdGhlaXIgb3duIGZpbGVzLlxuXHQgKi9cblx0dmFyIG9uZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oY29weUZpZWxkc0Zyb20pIHtcblx0ICB2YXIgS2xhc3MgPSB0aGlzO1xuXHQgIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG5cdCAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG5cdCAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBjb3B5RmllbGRzRnJvbSk7XG5cdCAgICByZXR1cm4gaW5zdGFuY2U7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiBuZXcgS2xhc3MoY29weUZpZWxkc0Zyb20pO1xuXHQgIH1cblx0fTtcblx0XG5cdHZhciB0d29Bcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMikge1xuXHQgIHZhciBLbGFzcyA9IHRoaXM7XG5cdCAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcblx0ICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcblx0ICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMik7XG5cdCAgICByZXR1cm4gaW5zdGFuY2U7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyKTtcblx0ICB9XG5cdH07XG5cdFxuXHR2YXIgdGhyZWVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMiwgYTMpIHtcblx0ICB2YXIgS2xhc3MgPSB0aGlzO1xuXHQgIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG5cdCAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG5cdCAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzKTtcblx0ICAgIHJldHVybiBpbnN0YW5jZTtcblx0ICB9IGVsc2Uge1xuXHQgICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzKTtcblx0ICB9XG5cdH07XG5cdFxuXHR2YXIgZml2ZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oYTEsIGEyLCBhMywgYTQsIGE1KSB7XG5cdCAgdmFyIEtsYXNzID0gdGhpcztcblx0ICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuXHQgICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuXHQgICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyLCBhMywgYTQsIGE1KTtcblx0ICAgIHJldHVybiBpbnN0YW5jZTtcblx0ICB9IGVsc2Uge1xuXHQgICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzLCBhNCwgYTUpO1xuXHQgIH1cblx0fTtcblx0XG5cdHZhciBzdGFuZGFyZFJlbGVhc2VyID0gZnVuY3Rpb24oaW5zdGFuY2UpIHtcblx0ICB2YXIgS2xhc3MgPSB0aGlzO1xuXHQgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICBpbnN0YW5jZSBpbnN0YW5jZW9mIEtsYXNzLFxuXHQgICAgJ1RyeWluZyB0byByZWxlYXNlIGFuIGluc3RhbmNlIGludG8gYSBwb29sIG9mIGEgZGlmZmVyZW50IHR5cGUuJ1xuXHQgICkgOiBpbnZhcmlhbnQoaW5zdGFuY2UgaW5zdGFuY2VvZiBLbGFzcykpO1xuXHQgIGlmIChpbnN0YW5jZS5kZXN0cnVjdG9yKSB7XG5cdCAgICBpbnN0YW5jZS5kZXN0cnVjdG9yKCk7XG5cdCAgfVxuXHQgIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoIDwgS2xhc3MucG9vbFNpemUpIHtcblx0ICAgIEtsYXNzLmluc3RhbmNlUG9vbC5wdXNoKGluc3RhbmNlKTtcblx0ICB9XG5cdH07XG5cdFxuXHR2YXIgREVGQVVMVF9QT09MX1NJWkUgPSAxMDtcblx0dmFyIERFRkFVTFRfUE9PTEVSID0gb25lQXJndW1lbnRQb29sZXI7XG5cdFxuXHQvKipcblx0ICogQXVnbWVudHMgYENvcHlDb25zdHJ1Y3RvcmAgdG8gYmUgYSBwb29sYWJsZSBjbGFzcywgYXVnbWVudGluZyBvbmx5IHRoZSBjbGFzc1xuXHQgKiBpdHNlbGYgKHN0YXRpY2FsbHkpIG5vdCBhZGRpbmcgYW55IHByb3RvdHlwaWNhbCBmaWVsZHMuIEFueSBDb3B5Q29uc3RydWN0b3Jcblx0ICogeW91IGdpdmUgdGhpcyBtYXkgaGF2ZSBhIGBwb29sU2l6ZWAgcHJvcGVydHksIGFuZCB3aWxsIGxvb2sgZm9yIGFcblx0ICogcHJvdG90eXBpY2FsIGBkZXN0cnVjdG9yYCBvbiBpbnN0YW5jZXMgKG9wdGlvbmFsKS5cblx0ICpcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gQ29weUNvbnN0cnVjdG9yIENvbnN0cnVjdG9yIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVzZXQuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IHBvb2xlciBDdXN0b21pemFibGUgcG9vbGVyLlxuXHQgKi9cblx0dmFyIGFkZFBvb2xpbmdUbyA9IGZ1bmN0aW9uKENvcHlDb25zdHJ1Y3RvciwgcG9vbGVyKSB7XG5cdCAgdmFyIE5ld0tsYXNzID0gQ29weUNvbnN0cnVjdG9yO1xuXHQgIE5ld0tsYXNzLmluc3RhbmNlUG9vbCA9IFtdO1xuXHQgIE5ld0tsYXNzLmdldFBvb2xlZCA9IHBvb2xlciB8fCBERUZBVUxUX1BPT0xFUjtcblx0ICBpZiAoIU5ld0tsYXNzLnBvb2xTaXplKSB7XG5cdCAgICBOZXdLbGFzcy5wb29sU2l6ZSA9IERFRkFVTFRfUE9PTF9TSVpFO1xuXHQgIH1cblx0ICBOZXdLbGFzcy5yZWxlYXNlID0gc3RhbmRhcmRSZWxlYXNlcjtcblx0ICByZXR1cm4gTmV3S2xhc3M7XG5cdH07XG5cdFxuXHR2YXIgUG9vbGVkQ2xhc3MgPSB7XG5cdCAgYWRkUG9vbGluZ1RvOiBhZGRQb29saW5nVG8sXG5cdCAgb25lQXJndW1lbnRQb29sZXI6IG9uZUFyZ3VtZW50UG9vbGVyLFxuXHQgIHR3b0FyZ3VtZW50UG9vbGVyOiB0d29Bcmd1bWVudFBvb2xlcixcblx0ICB0aHJlZUFyZ3VtZW50UG9vbGVyOiB0aHJlZUFyZ3VtZW50UG9vbGVyLFxuXHQgIGZpdmVBcmd1bWVudFBvb2xlcjogZml2ZUFyZ3VtZW50UG9vbGVyXG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFBvb2xlZENsYXNzO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogMTYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVxuXHQgKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIFJlYWN0RWxlbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdHZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2KTtcblx0dmFyIFJlYWN0TGVnYWN5RWxlbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpO1xuXHRcblx0dmFyIG1hcE9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oODQpO1xuXHRcblx0LyoqXG5cdCAqIENyZWF0ZSBhIGZhY3RvcnkgdGhhdCBjcmVhdGVzIEhUTUwgdGFnIGVsZW1lbnRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRhZyBuYW1lIChlLmcuIGBkaXZgKS5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGNyZWF0ZURPTUZhY3RvcnkodGFnKSB7XG5cdCAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuXHQgICAgcmV0dXJuIFJlYWN0TGVnYWN5RWxlbWVudC5tYXJrTm9uTGVnYWN5RmFjdG9yeShcblx0ICAgICAgUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUZhY3RvcnkodGFnKVxuXHQgICAgKTtcblx0ICB9XG5cdCAgcmV0dXJuIFJlYWN0TGVnYWN5RWxlbWVudC5tYXJrTm9uTGVnYWN5RmFjdG9yeShcblx0ICAgIFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KHRhZylcblx0ICApO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQ3JlYXRlcyBhIG1hcHBpbmcgZnJvbSBzdXBwb3J0ZWQgSFRNTCB0YWdzIHRvIGBSZWFjdERPTUNvbXBvbmVudGAgY2xhc3Nlcy5cblx0ICogVGhpcyBpcyBhbHNvIGFjY2Vzc2libGUgdmlhIGBSZWFjdC5ET01gLlxuXHQgKlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHR2YXIgUmVhY3RET00gPSBtYXBPYmplY3Qoe1xuXHQgIGE6ICdhJyxcblx0ICBhYmJyOiAnYWJicicsXG5cdCAgYWRkcmVzczogJ2FkZHJlc3MnLFxuXHQgIGFyZWE6ICdhcmVhJyxcblx0ICBhcnRpY2xlOiAnYXJ0aWNsZScsXG5cdCAgYXNpZGU6ICdhc2lkZScsXG5cdCAgYXVkaW86ICdhdWRpbycsXG5cdCAgYjogJ2InLFxuXHQgIGJhc2U6ICdiYXNlJyxcblx0ICBiZGk6ICdiZGknLFxuXHQgIGJkbzogJ2JkbycsXG5cdCAgYmlnOiAnYmlnJyxcblx0ICBibG9ja3F1b3RlOiAnYmxvY2txdW90ZScsXG5cdCAgYm9keTogJ2JvZHknLFxuXHQgIGJyOiAnYnInLFxuXHQgIGJ1dHRvbjogJ2J1dHRvbicsXG5cdCAgY2FudmFzOiAnY2FudmFzJyxcblx0ICBjYXB0aW9uOiAnY2FwdGlvbicsXG5cdCAgY2l0ZTogJ2NpdGUnLFxuXHQgIGNvZGU6ICdjb2RlJyxcblx0ICBjb2w6ICdjb2wnLFxuXHQgIGNvbGdyb3VwOiAnY29sZ3JvdXAnLFxuXHQgIGRhdGE6ICdkYXRhJyxcblx0ICBkYXRhbGlzdDogJ2RhdGFsaXN0Jyxcblx0ICBkZDogJ2RkJyxcblx0ICBkZWw6ICdkZWwnLFxuXHQgIGRldGFpbHM6ICdkZXRhaWxzJyxcblx0ICBkZm46ICdkZm4nLFxuXHQgIGRpYWxvZzogJ2RpYWxvZycsXG5cdCAgZGl2OiAnZGl2Jyxcblx0ICBkbDogJ2RsJyxcblx0ICBkdDogJ2R0Jyxcblx0ICBlbTogJ2VtJyxcblx0ICBlbWJlZDogJ2VtYmVkJyxcblx0ICBmaWVsZHNldDogJ2ZpZWxkc2V0Jyxcblx0ICBmaWdjYXB0aW9uOiAnZmlnY2FwdGlvbicsXG5cdCAgZmlndXJlOiAnZmlndXJlJyxcblx0ICBmb290ZXI6ICdmb290ZXInLFxuXHQgIGZvcm06ICdmb3JtJyxcblx0ICBoMTogJ2gxJyxcblx0ICBoMjogJ2gyJyxcblx0ICBoMzogJ2gzJyxcblx0ICBoNDogJ2g0Jyxcblx0ICBoNTogJ2g1Jyxcblx0ICBoNjogJ2g2Jyxcblx0ICBoZWFkOiAnaGVhZCcsXG5cdCAgaGVhZGVyOiAnaGVhZGVyJyxcblx0ICBocjogJ2hyJyxcblx0ICBodG1sOiAnaHRtbCcsXG5cdCAgaTogJ2knLFxuXHQgIGlmcmFtZTogJ2lmcmFtZScsXG5cdCAgaW1nOiAnaW1nJyxcblx0ICBpbnB1dDogJ2lucHV0Jyxcblx0ICBpbnM6ICdpbnMnLFxuXHQgIGtiZDogJ2tiZCcsXG5cdCAga2V5Z2VuOiAna2V5Z2VuJyxcblx0ICBsYWJlbDogJ2xhYmVsJyxcblx0ICBsZWdlbmQ6ICdsZWdlbmQnLFxuXHQgIGxpOiAnbGknLFxuXHQgIGxpbms6ICdsaW5rJyxcblx0ICBtYWluOiAnbWFpbicsXG5cdCAgbWFwOiAnbWFwJyxcblx0ICBtYXJrOiAnbWFyaycsXG5cdCAgbWVudTogJ21lbnUnLFxuXHQgIG1lbnVpdGVtOiAnbWVudWl0ZW0nLFxuXHQgIG1ldGE6ICdtZXRhJyxcblx0ICBtZXRlcjogJ21ldGVyJyxcblx0ICBuYXY6ICduYXYnLFxuXHQgIG5vc2NyaXB0OiAnbm9zY3JpcHQnLFxuXHQgIG9iamVjdDogJ29iamVjdCcsXG5cdCAgb2w6ICdvbCcsXG5cdCAgb3B0Z3JvdXA6ICdvcHRncm91cCcsXG5cdCAgb3B0aW9uOiAnb3B0aW9uJyxcblx0ICBvdXRwdXQ6ICdvdXRwdXQnLFxuXHQgIHA6ICdwJyxcblx0ICBwYXJhbTogJ3BhcmFtJyxcblx0ICBwaWN0dXJlOiAncGljdHVyZScsXG5cdCAgcHJlOiAncHJlJyxcblx0ICBwcm9ncmVzczogJ3Byb2dyZXNzJyxcblx0ICBxOiAncScsXG5cdCAgcnA6ICdycCcsXG5cdCAgcnQ6ICdydCcsXG5cdCAgcnVieTogJ3J1YnknLFxuXHQgIHM6ICdzJyxcblx0ICBzYW1wOiAnc2FtcCcsXG5cdCAgc2NyaXB0OiAnc2NyaXB0Jyxcblx0ICBzZWN0aW9uOiAnc2VjdGlvbicsXG5cdCAgc2VsZWN0OiAnc2VsZWN0Jyxcblx0ICBzbWFsbDogJ3NtYWxsJyxcblx0ICBzb3VyY2U6ICdzb3VyY2UnLFxuXHQgIHNwYW46ICdzcGFuJyxcblx0ICBzdHJvbmc6ICdzdHJvbmcnLFxuXHQgIHN0eWxlOiAnc3R5bGUnLFxuXHQgIHN1YjogJ3N1YicsXG5cdCAgc3VtbWFyeTogJ3N1bW1hcnknLFxuXHQgIHN1cDogJ3N1cCcsXG5cdCAgdGFibGU6ICd0YWJsZScsXG5cdCAgdGJvZHk6ICd0Ym9keScsXG5cdCAgdGQ6ICd0ZCcsXG5cdCAgdGV4dGFyZWE6ICd0ZXh0YXJlYScsXG5cdCAgdGZvb3Q6ICd0Zm9vdCcsXG5cdCAgdGg6ICd0aCcsXG5cdCAgdGhlYWQ6ICd0aGVhZCcsXG5cdCAgdGltZTogJ3RpbWUnLFxuXHQgIHRpdGxlOiAndGl0bGUnLFxuXHQgIHRyOiAndHInLFxuXHQgIHRyYWNrOiAndHJhY2snLFxuXHQgIHU6ICd1Jyxcblx0ICB1bDogJ3VsJyxcblx0ICAndmFyJzogJ3ZhcicsXG5cdCAgdmlkZW86ICd2aWRlbycsXG5cdCAgd2JyOiAnd2JyJyxcblx0XG5cdCAgLy8gU1ZHXG5cdCAgY2lyY2xlOiAnY2lyY2xlJyxcblx0ICBkZWZzOiAnZGVmcycsXG5cdCAgZWxsaXBzZTogJ2VsbGlwc2UnLFxuXHQgIGc6ICdnJyxcblx0ICBsaW5lOiAnbGluZScsXG5cdCAgbGluZWFyR3JhZGllbnQ6ICdsaW5lYXJHcmFkaWVudCcsXG5cdCAgbWFzazogJ21hc2snLFxuXHQgIHBhdGg6ICdwYXRoJyxcblx0ICBwYXR0ZXJuOiAncGF0dGVybicsXG5cdCAgcG9seWdvbjogJ3BvbHlnb24nLFxuXHQgIHBvbHlsaW5lOiAncG9seWxpbmUnLFxuXHQgIHJhZGlhbEdyYWRpZW50OiAncmFkaWFsR3JhZGllbnQnLFxuXHQgIHJlY3Q6ICdyZWN0Jyxcblx0ICBzdG9wOiAnc3RvcCcsXG5cdCAgc3ZnOiAnc3ZnJyxcblx0ICB0ZXh0OiAndGV4dCcsXG5cdCAgdHNwYW46ICd0c3Bhbidcblx0XG5cdH0sIGNyZWF0ZURPTUZhY3RvcnkpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTTtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDE3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgRE9NUHJvcGVydHlcblx0ICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcblx0ICovXG5cdFxuXHQvKmpzbGludCBiaXR3aXNlOiB0cnVlICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0ZnVuY3Rpb24gY2hlY2tNYXNrKHZhbHVlLCBiaXRtYXNrKSB7XG5cdCAgcmV0dXJuICh2YWx1ZSAmIGJpdG1hc2spID09PSBiaXRtYXNrO1xuXHR9XG5cdFxuXHR2YXIgRE9NUHJvcGVydHlJbmplY3Rpb24gPSB7XG5cdCAgLyoqXG5cdCAgICogTWFwcGluZyBmcm9tIG5vcm1hbGl6ZWQsIGNhbWVsY2FzZWQgcHJvcGVydHkgbmFtZXMgdG8gYSBjb25maWd1cmF0aW9uIHRoYXRcblx0ICAgKiBzcGVjaWZpZXMgaG93IHRoZSBhc3NvY2lhdGVkIERPTSBwcm9wZXJ0eSBzaG91bGQgYmUgYWNjZXNzZWQgb3IgcmVuZGVyZWQuXG5cdCAgICovXG5cdCAgTVVTVF9VU0VfQVRUUklCVVRFOiAweDEsXG5cdCAgTVVTVF9VU0VfUFJPUEVSVFk6IDB4Mixcblx0ICBIQVNfU0lERV9FRkZFQ1RTOiAweDQsXG5cdCAgSEFTX0JPT0xFQU5fVkFMVUU6IDB4OCxcblx0ICBIQVNfTlVNRVJJQ19WQUxVRTogMHgxMCxcblx0ICBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRTogMHgyMCB8IDB4MTAsXG5cdCAgSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRTogMHg0MCxcblx0XG5cdCAgLyoqXG5cdCAgICogSW5qZWN0IHNvbWUgc3BlY2lhbGl6ZWQga25vd2xlZGdlIGFib3V0IHRoZSBET00uIFRoaXMgdGFrZXMgYSBjb25maWcgb2JqZWN0XG5cdCAgICogd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG5cdCAgICpcblx0ICAgKiBpc0N1c3RvbUF0dHJpYnV0ZTogZnVuY3Rpb24gdGhhdCBnaXZlbiBhbiBhdHRyaWJ1dGUgbmFtZSB3aWxsIHJldHVybiB0cnVlXG5cdCAgICogaWYgaXQgY2FuIGJlIGluc2VydGVkIGludG8gdGhlIERPTSB2ZXJiYXRpbS4gVXNlZnVsIGZvciBkYXRhLSogb3IgYXJpYS0qXG5cdCAgICogYXR0cmlidXRlcyB3aGVyZSBpdCdzIGltcG9zc2libGUgdG8gZW51bWVyYXRlIGFsbCBvZiB0aGUgcG9zc2libGVcblx0ICAgKiBhdHRyaWJ1dGUgbmFtZXMsXG5cdCAgICpcblx0ICAgKiBQcm9wZXJ0aWVzOiBvYmplY3QgbWFwcGluZyBET00gcHJvcGVydHkgbmFtZSB0byBvbmUgb2YgdGhlXG5cdCAgICogRE9NUHJvcGVydHlJbmplY3Rpb24gY29uc3RhbnRzIG9yIG51bGwuIElmIHlvdXIgYXR0cmlidXRlIGlzbid0IGluIGhlcmUsXG5cdCAgICogaXQgd29uJ3QgZ2V0IHdyaXR0ZW4gdG8gdGhlIERPTS5cblx0ICAgKlxuXHQgICAqIERPTUF0dHJpYnV0ZU5hbWVzOiBvYmplY3QgbWFwcGluZyBSZWFjdCBhdHRyaWJ1dGUgbmFtZSB0byB0aGUgRE9NXG5cdCAgICogYXR0cmlidXRlIG5hbWUuIEF0dHJpYnV0ZSBuYW1lcyBub3Qgc3BlY2lmaWVkIHVzZSB0aGUgKipsb3dlcmNhc2UqKlxuXHQgICAqIG5vcm1hbGl6ZWQgbmFtZS5cblx0ICAgKlxuXHQgICAqIERPTVByb3BlcnR5TmFtZXM6IHNpbWlsYXIgdG8gRE9NQXR0cmlidXRlTmFtZXMgYnV0IGZvciBET00gcHJvcGVydGllcy5cblx0ICAgKiBQcm9wZXJ0eSBuYW1lcyBub3Qgc3BlY2lmaWVkIHVzZSB0aGUgbm9ybWFsaXplZCBuYW1lLlxuXHQgICAqXG5cdCAgICogRE9NTXV0YXRpb25NZXRob2RzOiBQcm9wZXJ0aWVzIHRoYXQgcmVxdWlyZSBzcGVjaWFsIG11dGF0aW9uIG1ldGhvZHMuIElmXG5cdCAgICogYHZhbHVlYCBpcyB1bmRlZmluZWQsIHRoZSBtdXRhdGlvbiBtZXRob2Qgc2hvdWxkIHVuc2V0IHRoZSBwcm9wZXJ0eS5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7b2JqZWN0fSBkb21Qcm9wZXJ0eUNvbmZpZyB0aGUgY29uZmlnIGFzIGRlc2NyaWJlZCBhYm92ZS5cblx0ICAgKi9cblx0ICBpbmplY3RET01Qcm9wZXJ0eUNvbmZpZzogZnVuY3Rpb24oZG9tUHJvcGVydHlDb25maWcpIHtcblx0ICAgIHZhciBQcm9wZXJ0aWVzID0gZG9tUHJvcGVydHlDb25maWcuUHJvcGVydGllcyB8fCB7fTtcblx0ICAgIHZhciBET01BdHRyaWJ1dGVOYW1lcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTUF0dHJpYnV0ZU5hbWVzIHx8IHt9O1xuXHQgICAgdmFyIERPTVByb3BlcnR5TmFtZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5ET01Qcm9wZXJ0eU5hbWVzIHx8IHt9O1xuXHQgICAgdmFyIERPTU11dGF0aW9uTWV0aG9kcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTU11dGF0aW9uTWV0aG9kcyB8fCB7fTtcblx0XG5cdCAgICBpZiAoZG9tUHJvcGVydHlDb25maWcuaXNDdXN0b21BdHRyaWJ1dGUpIHtcblx0ICAgICAgRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zLnB1c2goXG5cdCAgICAgICAgZG9tUHJvcGVydHlDb25maWcuaXNDdXN0b21BdHRyaWJ1dGVcblx0ICAgICAgKTtcblx0ICAgIH1cblx0XG5cdCAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBQcm9wZXJ0aWVzKSB7XG5cdCAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgICAgIURPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KHByb3BOYW1lKSxcblx0ICAgICAgICAnaW5qZWN0RE9NUHJvcGVydHlDb25maWcoLi4uKTogWW91XFwncmUgdHJ5aW5nIHRvIGluamVjdCBET00gcHJvcGVydHkgJyArXG5cdCAgICAgICAgJ1xcJyVzXFwnIHdoaWNoIGhhcyBhbHJlYWR5IGJlZW4gaW5qZWN0ZWQuIFlvdSBtYXkgYmUgYWNjaWRlbnRhbGx5ICcgK1xuXHQgICAgICAgICdpbmplY3RpbmcgdGhlIHNhbWUgRE9NIHByb3BlcnR5IGNvbmZpZyB0d2ljZSwgb3IgeW91IG1heSBiZSAnICtcblx0ICAgICAgICAnaW5qZWN0aW5nIHR3byBjb25maWdzIHRoYXQgaGF2ZSBjb25mbGljdGluZyBwcm9wZXJ0eSBuYW1lcy4nLFxuXHQgICAgICAgIHByb3BOYW1lXG5cdCAgICAgICkgOiBpbnZhcmlhbnQoIURPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkpO1xuXHRcblx0ICAgICAgRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWVbcHJvcE5hbWVdID0gdHJ1ZTtcblx0XG5cdCAgICAgIHZhciBsb3dlckNhc2VkID0gcHJvcE5hbWUudG9Mb3dlckNhc2UoKTtcblx0ICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbbG93ZXJDYXNlZF0gPSBwcm9wTmFtZTtcblx0XG5cdCAgICAgIGlmIChET01BdHRyaWJ1dGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcblx0ICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IERPTUF0dHJpYnV0ZU5hbWVzW3Byb3BOYW1lXTtcblx0ICAgICAgICBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVthdHRyaWJ1dGVOYW1lXSA9IHByb3BOYW1lO1xuXHQgICAgICAgIERPTVByb3BlcnR5LmdldEF0dHJpYnV0ZU5hbWVbcHJvcE5hbWVdID0gYXR0cmlidXRlTmFtZTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBET01Qcm9wZXJ0eS5nZXRBdHRyaWJ1dGVOYW1lW3Byb3BOYW1lXSA9IGxvd2VyQ2FzZWQ7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIERPTVByb3BlcnR5LmdldFByb3BlcnR5TmFtZVtwcm9wTmFtZV0gPVxuXHQgICAgICAgIERPTVByb3BlcnR5TmFtZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpID9cblx0ICAgICAgICAgIERPTVByb3BlcnR5TmFtZXNbcHJvcE5hbWVdIDpcblx0ICAgICAgICAgIHByb3BOYW1lO1xuXHRcblx0ICAgICAgaWYgKERPTU11dGF0aW9uTWV0aG9kcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcblx0ICAgICAgICBET01Qcm9wZXJ0eS5nZXRNdXRhdGlvbk1ldGhvZFtwcm9wTmFtZV0gPSBET01NdXRhdGlvbk1ldGhvZHNbcHJvcE5hbWVdO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIERPTVByb3BlcnR5LmdldE11dGF0aW9uTWV0aG9kW3Byb3BOYW1lXSA9IG51bGw7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBwcm9wQ29uZmlnID0gUHJvcGVydGllc1twcm9wTmFtZV07XG5cdCAgICAgIERPTVByb3BlcnR5Lm11c3RVc2VBdHRyaWJ1dGVbcHJvcE5hbWVdID1cblx0ICAgICAgICBjaGVja01hc2socHJvcENvbmZpZywgRE9NUHJvcGVydHlJbmplY3Rpb24uTVVTVF9VU0VfQVRUUklCVVRFKTtcblx0ICAgICAgRE9NUHJvcGVydHkubXVzdFVzZVByb3BlcnR5W3Byb3BOYW1lXSA9XG5cdCAgICAgICAgY2hlY2tNYXNrKHByb3BDb25maWcsIERPTVByb3BlcnR5SW5qZWN0aW9uLk1VU1RfVVNFX1BST1BFUlRZKTtcblx0ICAgICAgRE9NUHJvcGVydHkuaGFzU2lkZUVmZmVjdHNbcHJvcE5hbWVdID1cblx0ICAgICAgICBjaGVja01hc2socHJvcENvbmZpZywgRE9NUHJvcGVydHlJbmplY3Rpb24uSEFTX1NJREVfRUZGRUNUUyk7XG5cdCAgICAgIERPTVByb3BlcnR5Lmhhc0Jvb2xlYW5WYWx1ZVtwcm9wTmFtZV0gPVxuXHQgICAgICAgIGNoZWNrTWFzayhwcm9wQ29uZmlnLCBET01Qcm9wZXJ0eUluamVjdGlvbi5IQVNfQk9PTEVBTl9WQUxVRSk7XG5cdCAgICAgIERPTVByb3BlcnR5Lmhhc051bWVyaWNWYWx1ZVtwcm9wTmFtZV0gPVxuXHQgICAgICAgIGNoZWNrTWFzayhwcm9wQ29uZmlnLCBET01Qcm9wZXJ0eUluamVjdGlvbi5IQVNfTlVNRVJJQ19WQUxVRSk7XG5cdCAgICAgIERPTVByb3BlcnR5Lmhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlW3Byb3BOYW1lXSA9XG5cdCAgICAgICAgY2hlY2tNYXNrKHByb3BDb25maWcsIERPTVByb3BlcnR5SW5qZWN0aW9uLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFKTtcblx0ICAgICAgRE9NUHJvcGVydHkuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZVtwcm9wTmFtZV0gPVxuXHQgICAgICAgIGNoZWNrTWFzayhwcm9wQ29uZmlnLCBET01Qcm9wZXJ0eUluamVjdGlvbi5IQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFKTtcblx0XG5cdCAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgICAgIURPTVByb3BlcnR5Lm11c3RVc2VBdHRyaWJ1dGVbcHJvcE5hbWVdIHx8XG5cdCAgICAgICAgICAhRE9NUHJvcGVydHkubXVzdFVzZVByb3BlcnR5W3Byb3BOYW1lXSxcblx0ICAgICAgICAnRE9NUHJvcGVydHk6IENhbm5vdCByZXF1aXJlIHVzaW5nIGJvdGggYXR0cmlidXRlIGFuZCBwcm9wZXJ0eTogJXMnLFxuXHQgICAgICAgIHByb3BOYW1lXG5cdCAgICAgICkgOiBpbnZhcmlhbnQoIURPTVByb3BlcnR5Lm11c3RVc2VBdHRyaWJ1dGVbcHJvcE5hbWVdIHx8XG5cdCAgICAgICAgIURPTVByb3BlcnR5Lm11c3RVc2VQcm9wZXJ0eVtwcm9wTmFtZV0pKTtcblx0ICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgICBET01Qcm9wZXJ0eS5tdXN0VXNlUHJvcGVydHlbcHJvcE5hbWVdIHx8XG5cdCAgICAgICAgICAhRE9NUHJvcGVydHkuaGFzU2lkZUVmZmVjdHNbcHJvcE5hbWVdLFxuXHQgICAgICAgICdET01Qcm9wZXJ0eTogUHJvcGVydGllcyB0aGF0IGhhdmUgc2lkZSBlZmZlY3RzIG11c3QgdXNlIHByb3BlcnR5OiAlcycsXG5cdCAgICAgICAgcHJvcE5hbWVcblx0ICAgICAgKSA6IGludmFyaWFudChET01Qcm9wZXJ0eS5tdXN0VXNlUHJvcGVydHlbcHJvcE5hbWVdIHx8XG5cdCAgICAgICAgIURPTVByb3BlcnR5Lmhhc1NpZGVFZmZlY3RzW3Byb3BOYW1lXSkpO1xuXHQgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICAgICEhRE9NUHJvcGVydHkuaGFzQm9vbGVhblZhbHVlW3Byb3BOYW1lXSArXG5cdCAgICAgICAgICAhIURPTVByb3BlcnR5Lmhhc051bWVyaWNWYWx1ZVtwcm9wTmFtZV0gK1xuXHQgICAgICAgICAgISFET01Qcm9wZXJ0eS5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlW3Byb3BOYW1lXSA8PSAxLFxuXHQgICAgICAgICdET01Qcm9wZXJ0eTogVmFsdWUgY2FuIGJlIG9uZSBvZiBib29sZWFuLCBvdmVybG9hZGVkIGJvb2xlYW4sIG9yICcgK1xuXHQgICAgICAgICdudW1lcmljIHZhbHVlLCBidXQgbm90IGEgY29tYmluYXRpb246ICVzJyxcblx0ICAgICAgICBwcm9wTmFtZVxuXHQgICAgICApIDogaW52YXJpYW50KCEhRE9NUHJvcGVydHkuaGFzQm9vbGVhblZhbHVlW3Byb3BOYW1lXSArXG5cdCAgICAgICAgISFET01Qcm9wZXJ0eS5oYXNOdW1lcmljVmFsdWVbcHJvcE5hbWVdICtcblx0ICAgICAgICAhIURPTVByb3BlcnR5Lmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWVbcHJvcE5hbWVdIDw9IDEpKTtcblx0ICAgIH1cblx0ICB9XG5cdH07XG5cdHZhciBkZWZhdWx0VmFsdWVDYWNoZSA9IHt9O1xuXHRcblx0LyoqXG5cdCAqIERPTVByb3BlcnR5IGV4cG9ydHMgbG9va3VwIG9iamVjdHMgdGhhdCBjYW4gYmUgdXNlZCBsaWtlIGZ1bmN0aW9uczpcblx0ICpcblx0ICogICA+IERPTVByb3BlcnR5LmlzVmFsaWRbJ2lkJ11cblx0ICogICB0cnVlXG5cdCAqICAgPiBET01Qcm9wZXJ0eS5pc1ZhbGlkWydmb29iYXInXVxuXHQgKiAgIHVuZGVmaW5lZFxuXHQgKlxuXHQgKiBBbHRob3VnaCB0aGlzIG1heSBiZSBjb25mdXNpbmcsIGl0IHBlcmZvcm1zIGJldHRlciBpbiBnZW5lcmFsLlxuXHQgKlxuXHQgKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2tleS1leGlzdHNcblx0ICogQHNlZSBodHRwOi8vanNwZXJmLmNvbS9rZXktbWlzc2luZ1xuXHQgKi9cblx0dmFyIERPTVByb3BlcnR5ID0ge1xuXHRcblx0ICBJRF9BVFRSSUJVVEVfTkFNRTogJ2RhdGEtcmVhY3RpZCcsXG5cdFxuXHQgIC8qKlxuXHQgICAqIENoZWNrcyB3aGV0aGVyIGEgcHJvcGVydHkgbmFtZSBpcyBhIHN0YW5kYXJkIHByb3BlcnR5LlxuXHQgICAqIEB0eXBlIHtPYmplY3R9XG5cdCAgICovXG5cdCAgaXNTdGFuZGFyZE5hbWU6IHt9LFxuXHRcblx0ICAvKipcblx0ICAgKiBNYXBwaW5nIGZyb20gbG93ZXJjYXNlIHByb3BlcnR5IG5hbWVzIHRvIHRoZSBwcm9wZXJseSBjYXNlZCB2ZXJzaW9uLCB1c2VkXG5cdCAgICogdG8gd2FybiBpbiB0aGUgY2FzZSBvZiBtaXNzaW5nIHByb3BlcnRpZXMuXG5cdCAgICogQHR5cGUge09iamVjdH1cblx0ICAgKi9cblx0ICBnZXRQb3NzaWJsZVN0YW5kYXJkTmFtZToge30sXG5cdFxuXHQgIC8qKlxuXHQgICAqIE1hcHBpbmcgZnJvbSBub3JtYWxpemVkIG5hbWVzIHRvIGF0dHJpYnV0ZSBuYW1lcyB0aGF0IGRpZmZlci4gQXR0cmlidXRlXG5cdCAgICogbmFtZXMgYXJlIHVzZWQgd2hlbiByZW5kZXJpbmcgbWFya3VwIG9yIHdpdGggYCpBdHRyaWJ1dGUoKWAuXG5cdCAgICogQHR5cGUge09iamVjdH1cblx0ICAgKi9cblx0ICBnZXRBdHRyaWJ1dGVOYW1lOiB7fSxcblx0XG5cdCAgLyoqXG5cdCAgICogTWFwcGluZyBmcm9tIG5vcm1hbGl6ZWQgbmFtZXMgdG8gcHJvcGVydGllcyBvbiBET00gbm9kZSBpbnN0YW5jZXMuXG5cdCAgICogKFRoaXMgaW5jbHVkZXMgcHJvcGVydGllcyB0aGF0IG11dGF0ZSBkdWUgdG8gZXh0ZXJuYWwgZmFjdG9ycy4pXG5cdCAgICogQHR5cGUge09iamVjdH1cblx0ICAgKi9cblx0ICBnZXRQcm9wZXJ0eU5hbWU6IHt9LFxuXHRcblx0ICAvKipcblx0ICAgKiBNYXBwaW5nIGZyb20gbm9ybWFsaXplZCBuYW1lcyB0byBtdXRhdGlvbiBtZXRob2RzLiBUaGlzIHdpbGwgb25seSBleGlzdCBpZlxuXHQgICAqIG11dGF0aW9uIGNhbm5vdCBiZSBzZXQgc2ltcGx5IGJ5IHRoZSBwcm9wZXJ0eSBvciBgc2V0QXR0cmlidXRlKClgLlxuXHQgICAqIEB0eXBlIHtPYmplY3R9XG5cdCAgICovXG5cdCAgZ2V0TXV0YXRpb25NZXRob2Q6IHt9LFxuXHRcblx0ICAvKipcblx0ICAgKiBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIGFjY2Vzc2VkIGFuZCBtdXRhdGVkIGFzIGFuIG9iamVjdCBwcm9wZXJ0eS5cblx0ICAgKiBAdHlwZSB7T2JqZWN0fVxuXHQgICAqL1xuXHQgIG11c3RVc2VBdHRyaWJ1dGU6IHt9LFxuXHRcblx0ICAvKipcblx0ICAgKiBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIGFjY2Vzc2VkIGFuZCBtdXRhdGVkIHVzaW5nIGAqQXR0cmlidXRlKClgLlxuXHQgICAqIChUaGlzIGluY2x1ZGVzIGFueXRoaW5nIHRoYXQgZmFpbHMgYDxwcm9wTmFtZT4gaW4gPGVsZW1lbnQ+YC4pXG5cdCAgICogQHR5cGUge09iamVjdH1cblx0ICAgKi9cblx0ICBtdXN0VXNlUHJvcGVydHk6IHt9LFxuXHRcblx0ICAvKipcblx0ICAgKiBXaGV0aGVyIG9yIG5vdCBzZXR0aW5nIGEgdmFsdWUgY2F1c2VzIHNpZGUgZWZmZWN0cyBzdWNoIGFzIHRyaWdnZXJpbmdcblx0ICAgKiByZXNvdXJjZXMgdG8gYmUgbG9hZGVkIG9yIHRleHQgc2VsZWN0aW9uIGNoYW5nZXMuIFdlIG11c3QgZW5zdXJlIHRoYXRcblx0ICAgKiB0aGUgdmFsdWUgaXMgb25seSBzZXQgaWYgaXQgaGFzIGNoYW5nZWQuXG5cdCAgICogQHR5cGUge09iamVjdH1cblx0ICAgKi9cblx0ICBoYXNTaWRlRWZmZWN0czoge30sXG5cdFxuXHQgIC8qKlxuXHQgICAqIFdoZXRoZXIgdGhlIHByb3BlcnR5IHNob3VsZCBiZSByZW1vdmVkIHdoZW4gc2V0IHRvIGEgZmFsc2V5IHZhbHVlLlxuXHQgICAqIEB0eXBlIHtPYmplY3R9XG5cdCAgICovXG5cdCAgaGFzQm9vbGVhblZhbHVlOiB7fSxcblx0XG5cdCAgLyoqXG5cdCAgICogV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBudW1lcmljIG9yIHBhcnNlIGFzIGFcblx0ICAgKiBudW1lcmljIGFuZCBzaG91bGQgYmUgcmVtb3ZlZCB3aGVuIHNldCB0byBhIGZhbHNleSB2YWx1ZS5cblx0ICAgKiBAdHlwZSB7T2JqZWN0fVxuXHQgICAqL1xuXHQgIGhhc051bWVyaWNWYWx1ZToge30sXG5cdFxuXHQgIC8qKlxuXHQgICAqIFdoZXRoZXIgdGhlIHByb3BlcnR5IG11c3QgYmUgcG9zaXRpdmUgbnVtZXJpYyBvciBwYXJzZSBhcyBhIHBvc2l0aXZlXG5cdCAgICogbnVtZXJpYyBhbmQgc2hvdWxkIGJlIHJlbW92ZWQgd2hlbiBzZXQgdG8gYSBmYWxzZXkgdmFsdWUuXG5cdCAgICogQHR5cGUge09iamVjdH1cblx0ICAgKi9cblx0ICBoYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZToge30sXG5cdFxuXHQgIC8qKlxuXHQgICAqIFdoZXRoZXIgdGhlIHByb3BlcnR5IGNhbiBiZSB1c2VkIGFzIGEgZmxhZyBhcyB3ZWxsIGFzIHdpdGggYSB2YWx1ZS4gUmVtb3ZlZFxuXHQgICAqIHdoZW4gc3RyaWN0bHkgZXF1YWwgdG8gZmFsc2U7IHByZXNlbnQgd2l0aG91dCBhIHZhbHVlIHdoZW4gc3RyaWN0bHkgZXF1YWxcblx0ICAgKiB0byB0cnVlOyBwcmVzZW50IHdpdGggYSB2YWx1ZSBvdGhlcndpc2UuXG5cdCAgICogQHR5cGUge09iamVjdH1cblx0ICAgKi9cblx0ICBoYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlOiB7fSxcblx0XG5cdCAgLyoqXG5cdCAgICogQWxsIG9mIHRoZSBpc0N1c3RvbUF0dHJpYnV0ZSgpIGZ1bmN0aW9ucyB0aGF0IGhhdmUgYmVlbiBpbmplY3RlZC5cblx0ICAgKi9cblx0ICBfaXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnM6IFtdLFxuXHRcblx0ICAvKipcblx0ICAgKiBDaGVja3Mgd2hldGhlciBhIHByb3BlcnR5IG5hbWUgaXMgYSBjdXN0b20gYXR0cmlidXRlLlxuXHQgICAqIEBtZXRob2Rcblx0ICAgKi9cblx0ICBpc0N1c3RvbUF0dHJpYnV0ZTogZnVuY3Rpb24oYXR0cmlidXRlTmFtZSkge1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBET01Qcm9wZXJ0eS5faXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgdmFyIGlzQ3VzdG9tQXR0cmlidXRlRm4gPSBET01Qcm9wZXJ0eS5faXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnNbaV07XG5cdCAgICAgIGlmIChpc0N1c3RvbUF0dHJpYnV0ZUZuKGF0dHJpYnV0ZU5hbWUpKSB7XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBmYWxzZTtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBSZXR1cm5zIHRoZSBkZWZhdWx0IHByb3BlcnR5IHZhbHVlIGZvciBhIERPTSBwcm9wZXJ0eSAoaS5lLiwgbm90IGFuXG5cdCAgICogYXR0cmlidXRlKS4gTW9zdCBkZWZhdWx0IHZhbHVlcyBhcmUgJycgb3IgZmFsc2UsIGJ1dCBub3QgYWxsLiBXb3JzZSB5ZXQsXG5cdCAgICogc29tZSAoaW4gcGFydGljdWxhciwgYHR5cGVgKSB2YXJ5IGRlcGVuZGluZyBvbiB0aGUgdHlwZSBvZiBlbGVtZW50LlxuXHQgICAqXG5cdCAgICogVE9ETzogSXMgaXQgYmV0dGVyIHRvIGdyYWIgYWxsIHRoZSBwb3NzaWJsZSBwcm9wZXJ0aWVzIHdoZW4gY3JlYXRpbmcgYW5cblx0ICAgKiBlbGVtZW50IHRvIGF2b2lkIGhhdmluZyB0byBjcmVhdGUgdGhlIHNhbWUgZWxlbWVudCB0d2ljZT9cblx0ICAgKi9cblx0ICBnZXREZWZhdWx0VmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24obm9kZU5hbWUsIHByb3ApIHtcblx0ICAgIHZhciBub2RlRGVmYXVsdHMgPSBkZWZhdWx0VmFsdWVDYWNoZVtub2RlTmFtZV07XG5cdCAgICB2YXIgdGVzdEVsZW1lbnQ7XG5cdCAgICBpZiAoIW5vZGVEZWZhdWx0cykge1xuXHQgICAgICBkZWZhdWx0VmFsdWVDYWNoZVtub2RlTmFtZV0gPSBub2RlRGVmYXVsdHMgPSB7fTtcblx0ICAgIH1cblx0ICAgIGlmICghKHByb3AgaW4gbm9kZURlZmF1bHRzKSkge1xuXHQgICAgICB0ZXN0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobm9kZU5hbWUpO1xuXHQgICAgICBub2RlRGVmYXVsdHNbcHJvcF0gPSB0ZXN0RWxlbWVudFtwcm9wXTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBub2RlRGVmYXVsdHNbcHJvcF07XG5cdCAgfSxcblx0XG5cdCAgaW5qZWN0aW9uOiBET01Qcm9wZXJ0eUluamVjdGlvblxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBET01Qcm9wZXJ0eTtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDE4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q3VycmVudE93bmVyXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKipcblx0ICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG5cdCAqXG5cdCAqIFRoZSBjdXJyZW50IG93bmVyIGlzIHRoZSBjb21wb25lbnQgd2hvIHNob3VsZCBvd24gYW55IGNvbXBvbmVudHMgdGhhdCBhcmVcblx0ICogY3VycmVudGx5IGJlaW5nIGNvbnN0cnVjdGVkLlxuXHQgKlxuXHQgKiBUaGUgZGVwdGggaW5kaWNhdGUgaG93IG1hbnkgY29tcG9zaXRlIGNvbXBvbmVudHMgYXJlIGFib3ZlIHRoaXMgcmVuZGVyIGxldmVsLlxuXHQgKi9cblx0dmFyIFJlYWN0Q3VycmVudE93bmVyID0ge1xuXHRcblx0ICAvKipcblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKiBAdHlwZSB7UmVhY3RDb21wb25lbnR9XG5cdCAgICovXG5cdCAgY3VycmVudDogbnVsbFxuXHRcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3RDdXJyZW50T3duZXI7XG5cblxuLyoqKi8gfSxcbi8qIDE5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0V2ZW50XG5cdCAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgUG9vbGVkQ2xhc3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblx0XG5cdHZhciBhc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgZW1wdHlGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXHR2YXIgZ2V0RXZlbnRUYXJnZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU0KTtcblx0XG5cdC8qKlxuXHQgKiBAaW50ZXJmYWNlIEV2ZW50XG5cdCAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuXHQgKi9cblx0dmFyIEV2ZW50SW50ZXJmYWNlID0ge1xuXHQgIHR5cGU6IG51bGwsXG5cdCAgdGFyZ2V0OiBnZXRFdmVudFRhcmdldCxcblx0ICAvLyBjdXJyZW50VGFyZ2V0IGlzIHNldCB3aGVuIGRpc3BhdGNoaW5nOyBubyB1c2UgaW4gY29weWluZyBpdCBoZXJlXG5cdCAgY3VycmVudFRhcmdldDogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwsXG5cdCAgZXZlbnRQaGFzZTogbnVsbCxcblx0ICBidWJibGVzOiBudWxsLFxuXHQgIGNhbmNlbGFibGU6IG51bGwsXG5cdCAgdGltZVN0YW1wOiBmdW5jdGlvbihldmVudCkge1xuXHQgICAgcmV0dXJuIGV2ZW50LnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXHQgIH0sXG5cdCAgZGVmYXVsdFByZXZlbnRlZDogbnVsbCxcblx0ICBpc1RydXN0ZWQ6IG51bGxcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBTeW50aGV0aWMgZXZlbnRzIGFyZSBkaXNwYXRjaGVkIGJ5IGV2ZW50IHBsdWdpbnMsIHR5cGljYWxseSBpbiByZXNwb25zZSB0byBhXG5cdCAqIHRvcC1sZXZlbCBldmVudCBkZWxlZ2F0aW9uIGhhbmRsZXIuXG5cdCAqXG5cdCAqIFRoZXNlIHN5c3RlbXMgc2hvdWxkIGdlbmVyYWxseSB1c2UgcG9vbGluZyB0byByZWR1Y2UgdGhlIGZyZXF1ZW5jeSBvZiBnYXJiYWdlXG5cdCAqIGNvbGxlY3Rpb24uIFRoZSBzeXN0ZW0gc2hvdWxkIGNoZWNrIGBpc1BlcnNpc3RlbnRgIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZVxuXHQgKiBldmVudCBzaG91bGQgYmUgcmVsZWFzZWQgaW50byB0aGUgcG9vbCBhZnRlciBiZWluZyBkaXNwYXRjaGVkLiBVc2VycyB0aGF0XG5cdCAqIG5lZWQgYSBwZXJzaXN0ZWQgZXZlbnQgc2hvdWxkIGludm9rZSBgcGVyc2lzdGAuXG5cdCAqXG5cdCAqIFN5bnRoZXRpYyBldmVudHMgKGFuZCBzdWJjbGFzc2VzKSBpbXBsZW1lbnQgdGhlIERPTSBMZXZlbCAzIEV2ZW50cyBBUEkgYnlcblx0ICogbm9ybWFsaXppbmcgYnJvd3NlciBxdWlya3MuIFN1YmNsYXNzZXMgZG8gbm90IG5lY2Vzc2FyaWx5IGhhdmUgdG8gaW1wbGVtZW50IGFcblx0ICogRE9NIGludGVyZmFjZTsgY3VzdG9tIGFwcGxpY2F0aW9uLXNwZWNpZmljIGV2ZW50cyBjYW4gYWxzbyBzdWJjbGFzcyB0aGlzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cblx0ICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuXHQgKi9cblx0ZnVuY3Rpb24gU3ludGhldGljRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuXHQgIHRoaXMuZGlzcGF0Y2hDb25maWcgPSBkaXNwYXRjaENvbmZpZztcblx0ICB0aGlzLmRpc3BhdGNoTWFya2VyID0gZGlzcGF0Y2hNYXJrZXI7XG5cdCAgdGhpcy5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuXHRcblx0ICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG5cdCAgZm9yICh2YXIgcHJvcE5hbWUgaW4gSW50ZXJmYWNlKSB7XG5cdCAgICBpZiAoIUludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcblx0ICAgICAgY29udGludWU7XG5cdCAgICB9XG5cdCAgICB2YXIgbm9ybWFsaXplID0gSW50ZXJmYWNlW3Byb3BOYW1lXTtcblx0ICAgIGlmIChub3JtYWxpemUpIHtcblx0ICAgICAgdGhpc1twcm9wTmFtZV0gPSBub3JtYWxpemUobmF0aXZlRXZlbnQpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdGhpc1twcm9wTmFtZV0gPSBuYXRpdmVFdmVudFtwcm9wTmFtZV07XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICB2YXIgZGVmYXVsdFByZXZlbnRlZCA9IG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgIT0gbnVsbCA/XG5cdCAgICBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkIDpcblx0ICAgIG5hdGl2ZUV2ZW50LnJldHVyblZhbHVlID09PSBmYWxzZTtcblx0ICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xuXHQgICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcblx0ICB9IGVsc2Uge1xuXHQgICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2U7XG5cdCAgfVxuXHQgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2U7XG5cdH1cblx0XG5cdGFzc2lnbihTeW50aGV0aWNFdmVudC5wcm90b3R5cGUsIHtcblx0XG5cdCAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcblx0ICAgIHZhciBldmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG5cdCAgICBldmVudC5wcmV2ZW50RGVmYXVsdCA/IGV2ZW50LnByZXZlbnREZWZhdWx0KCkgOiBldmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuXHQgICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcblx0ICB9LFxuXHRcblx0ICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIGV2ZW50ID0gdGhpcy5uYXRpdmVFdmVudDtcblx0ICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA/IGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpIDogZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcblx0ICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBXZSByZWxlYXNlIGFsbCBkaXNwYXRjaGVkIGBTeW50aGV0aWNFdmVudGBzIGFmdGVyIGVhY2ggZXZlbnQgbG9vcCwgYWRkaW5nXG5cdCAgICogdGhlbSBiYWNrIGludG8gdGhlIHBvb2wuIFRoaXMgYWxsb3dzIGEgd2F5IHRvIGhvbGQgb250byBhIHJlZmVyZW5jZSB0aGF0XG5cdCAgICogd29uJ3QgYmUgYWRkZWQgYmFjayBpbnRvIHRoZSBwb29sLlxuXHQgICAqL1xuXHQgIHBlcnNpc3Q6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5pc1BlcnNpc3RlbnQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBDaGVja3MgaWYgdGhpcyBldmVudCBzaG91bGQgYmUgcmVsZWFzZWQgYmFjayBpbnRvIHRoZSBwb29sLlxuXHQgICAqXG5cdCAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGlzIHNob3VsZCBub3QgYmUgcmVsZWFzZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0ICAgKi9cblx0ICBpc1BlcnNpc3RlbnQ6IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSxcblx0XG5cdCAgLyoqXG5cdCAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgYGRlc3RydWN0b3JgIG9uIGVhY2ggaW5zdGFuY2UgaXQgcmVsZWFzZXMuXG5cdCAgICovXG5cdCAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG5cdCAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBJbnRlcmZhY2UpIHtcblx0ICAgICAgdGhpc1twcm9wTmFtZV0gPSBudWxsO1xuXHQgICAgfVxuXHQgICAgdGhpcy5kaXNwYXRjaENvbmZpZyA9IG51bGw7XG5cdCAgICB0aGlzLmRpc3BhdGNoTWFya2VyID0gbnVsbDtcblx0ICAgIHRoaXMubmF0aXZlRXZlbnQgPSBudWxsO1xuXHQgIH1cblx0XG5cdH0pO1xuXHRcblx0U3ludGhldGljRXZlbnQuSW50ZXJmYWNlID0gRXZlbnRJbnRlcmZhY2U7XG5cdFxuXHQvKipcblx0ICogSGVscGVyIHRvIHJlZHVjZSBib2lsZXJwbGF0ZSB3aGVuIGNyZWF0aW5nIHN1YmNsYXNzZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IENsYXNzXG5cdCAqIEBwYXJhbSB7P29iamVjdH0gSW50ZXJmYWNlXG5cdCAqL1xuXHRTeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MgPSBmdW5jdGlvbihDbGFzcywgSW50ZXJmYWNlKSB7XG5cdCAgdmFyIFN1cGVyID0gdGhpcztcblx0XG5cdCAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcblx0ICBhc3NpZ24ocHJvdG90eXBlLCBDbGFzcy5wcm90b3R5cGUpO1xuXHQgIENsYXNzLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcblx0ICBDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDbGFzcztcblx0XG5cdCAgQ2xhc3MuSW50ZXJmYWNlID0gYXNzaWduKHt9LCBTdXBlci5JbnRlcmZhY2UsIEludGVyZmFjZSk7XG5cdCAgQ2xhc3MuYXVnbWVudENsYXNzID0gU3VwZXIuYXVnbWVudENsYXNzO1xuXHRcblx0ICBQb29sZWRDbGFzcy5hZGRQb29saW5nVG8oQ2xhc3MsIFBvb2xlZENsYXNzLnRocmVlQXJndW1lbnRQb29sZXIpO1xuXHR9O1xuXHRcblx0UG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFN5bnRoZXRpY0V2ZW50LCBQb29sZWRDbGFzcy50aHJlZUFyZ3VtZW50UG9vbGVyKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gU3ludGhldGljRXZlbnQ7XG5cblxuLyoqKi8gfSxcbi8qIDIwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgRE9NUHJvcGVydHlPcGVyYXRpb25zXG5cdCAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgRE9NUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcblx0XG5cdHZhciBlc2NhcGVUZXh0Rm9yQnJvd3NlciA9IF9fd2VicGFja19yZXF1aXJlX18oNTApO1xuXHR2YXIgbWVtb2l6ZVN0cmluZ09ubHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1KTtcblx0dmFyIHdhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXHRcblx0ZnVuY3Rpb24gc2hvdWxkSWdub3JlVmFsdWUobmFtZSwgdmFsdWUpIHtcblx0ICByZXR1cm4gdmFsdWUgPT0gbnVsbCB8fFxuXHQgICAgKERPTVByb3BlcnR5Lmhhc0Jvb2xlYW5WYWx1ZVtuYW1lXSAmJiAhdmFsdWUpIHx8XG5cdCAgICAoRE9NUHJvcGVydHkuaGFzTnVtZXJpY1ZhbHVlW25hbWVdICYmIGlzTmFOKHZhbHVlKSkgfHxcblx0ICAgIChET01Qcm9wZXJ0eS5oYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZVtuYW1lXSAmJiAodmFsdWUgPCAxKSkgfHxcblx0ICAgIChET01Qcm9wZXJ0eS5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlW25hbWVdICYmIHZhbHVlID09PSBmYWxzZSk7XG5cdH1cblx0XG5cdHZhciBwcm9jZXNzQXR0cmlidXRlTmFtZUFuZFByZWZpeCA9IG1lbW9pemVTdHJpbmdPbmx5KGZ1bmN0aW9uKG5hbWUpIHtcblx0ICByZXR1cm4gZXNjYXBlVGV4dEZvckJyb3dzZXIobmFtZSkgKyAnPVwiJztcblx0fSk7XG5cdFxuXHRpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgdmFyIHJlYWN0UHJvcHMgPSB7XG5cdCAgICBjaGlsZHJlbjogdHJ1ZSxcblx0ICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB0cnVlLFxuXHQgICAga2V5OiB0cnVlLFxuXHQgICAgcmVmOiB0cnVlXG5cdCAgfTtcblx0ICB2YXIgd2FybmVkUHJvcGVydGllcyA9IHt9O1xuXHRcblx0ICB2YXIgd2FyblVua25vd25Qcm9wZXJ0eSA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0ICAgIGlmIChyZWFjdFByb3BzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHJlYWN0UHJvcHNbbmFtZV0gfHxcblx0ICAgICAgICB3YXJuZWRQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFByb3BlcnRpZXNbbmFtZV0pIHtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHRcblx0ICAgIHdhcm5lZFByb3BlcnRpZXNbbmFtZV0gPSB0cnVlO1xuXHQgICAgdmFyIGxvd2VyQ2FzZWROYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcblx0ICAgIC8vIGRhdGEtKiBhdHRyaWJ1dGVzIHNob3VsZCBiZSBsb3dlcmNhc2U7IHN1Z2dlc3QgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdCAgICB2YXIgc3RhbmRhcmROYW1lID0gKFxuXHQgICAgICBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShsb3dlckNhc2VkTmFtZSkgP1xuXHQgICAgICAgIGxvd2VyQ2FzZWROYW1lIDpcblx0ICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWUuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpID9cblx0ICAgICAgICBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVtsb3dlckNhc2VkTmFtZV0gOlxuXHQgICAgICAgIG51bGxcblx0ICAgICk7XG5cdFxuXHQgICAgLy8gRm9yIG5vdywgb25seSB3YXJuIHdoZW4gd2UgaGF2ZSBhIHN1Z2dlc3RlZCBjb3JyZWN0aW9uLiBUaGlzIHByZXZlbnRzXG5cdCAgICAvLyBsb2dnaW5nIHRvbyBtdWNoIHdoZW4gdXNpbmcgdHJhbnNmZXJQcm9wc1RvLlxuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG5cdCAgICAgIHN0YW5kYXJkTmFtZSA9PSBudWxsLFxuXHQgICAgICAnVW5rbm93biBET00gcHJvcGVydHkgJyArIG5hbWUgKyAnLiBEaWQgeW91IG1lYW4gJyArIHN0YW5kYXJkTmFtZSArICc/J1xuXHQgICAgKSA6IG51bGwpO1xuXHRcblx0ICB9O1xuXHR9XG5cdFxuXHQvKipcblx0ICogT3BlcmF0aW9ucyBmb3IgZGVhbGluZyB3aXRoIERPTSBwcm9wZXJ0aWVzLlxuXHQgKi9cblx0dmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHtcblx0XG5cdCAgLyoqXG5cdCAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIHRoZSBJRCBwcm9wZXJ0eS5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBVbmVzY2FwZWQgSUQuXG5cdCAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgc3RyaW5nLlxuXHQgICAqL1xuXHQgIGNyZWF0ZU1hcmt1cEZvcklEOiBmdW5jdGlvbihpZCkge1xuXHQgICAgcmV0dXJuIHByb2Nlc3NBdHRyaWJ1dGVOYW1lQW5kUHJlZml4KERPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FKSArXG5cdCAgICAgIGVzY2FwZVRleHRGb3JCcm93c2VyKGlkKSArICdcIic7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIGEgcHJvcGVydHkuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuXHQgICAqIEBwYXJhbSB7Kn0gdmFsdWVcblx0ICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBNYXJrdXAgc3RyaW5nLCBvciBudWxsIGlmIHRoZSBwcm9wZXJ0eSB3YXMgaW52YWxpZC5cblx0ICAgKi9cblx0ICBjcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eTogZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcblx0ICAgIGlmIChET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxuXHQgICAgICAgIERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lW25hbWVdKSB7XG5cdCAgICAgIGlmIChzaG91bGRJZ25vcmVWYWx1ZShuYW1lLCB2YWx1ZSkpIHtcblx0ICAgICAgICByZXR1cm4gJyc7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBET01Qcm9wZXJ0eS5nZXRBdHRyaWJ1dGVOYW1lW25hbWVdO1xuXHQgICAgICBpZiAoRE9NUHJvcGVydHkuaGFzQm9vbGVhblZhbHVlW25hbWVdIHx8XG5cdCAgICAgICAgICAoRE9NUHJvcGVydHkuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZVtuYW1lXSAmJiB2YWx1ZSA9PT0gdHJ1ZSkpIHtcblx0ICAgICAgICByZXR1cm4gZXNjYXBlVGV4dEZvckJyb3dzZXIoYXR0cmlidXRlTmFtZSk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHByb2Nlc3NBdHRyaWJ1dGVOYW1lQW5kUHJlZml4KGF0dHJpYnV0ZU5hbWUpICtcblx0ICAgICAgICBlc2NhcGVUZXh0Rm9yQnJvd3Nlcih2YWx1ZSkgKyAnXCInO1xuXHQgICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuXHQgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuXHQgICAgICAgIHJldHVybiAnJztcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gcHJvY2Vzc0F0dHJpYnV0ZU5hbWVBbmRQcmVmaXgobmFtZSkgK1xuXHQgICAgICAgIGVzY2FwZVRleHRGb3JCcm93c2VyKHZhbHVlKSArICdcIic7XG5cdCAgICB9IGVsc2UgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuXHQgICAgICB3YXJuVW5rbm93blByb3BlcnR5KG5hbWUpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG51bGw7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogU2V0cyB0aGUgdmFsdWUgZm9yIGEgcHJvcGVydHkgb24gYSBub2RlLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcblx0ICAgKiBAcGFyYW0geyp9IHZhbHVlXG5cdCAgICovXG5cdCAgc2V0VmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24obm9kZSwgbmFtZSwgdmFsdWUpIHtcblx0ICAgIGlmIChET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxuXHQgICAgICAgIERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lW25hbWVdKSB7XG5cdCAgICAgIHZhciBtdXRhdGlvbk1ldGhvZCA9IERPTVByb3BlcnR5LmdldE11dGF0aW9uTWV0aG9kW25hbWVdO1xuXHQgICAgICBpZiAobXV0YXRpb25NZXRob2QpIHtcblx0ICAgICAgICBtdXRhdGlvbk1ldGhvZChub2RlLCB2YWx1ZSk7XG5cdCAgICAgIH0gZWxzZSBpZiAoc2hvdWxkSWdub3JlVmFsdWUobmFtZSwgdmFsdWUpKSB7XG5cdCAgICAgICAgdGhpcy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUpO1xuXHQgICAgICB9IGVsc2UgaWYgKERPTVByb3BlcnR5Lm11c3RVc2VBdHRyaWJ1dGVbbmFtZV0pIHtcblx0ICAgICAgICAvLyBgc2V0QXR0cmlidXRlYCB3aXRoIG9iamVjdHMgYmVjb21lcyBvbmx5IGBbb2JqZWN0XWAgaW4gSUU4LzksXG5cdCAgICAgICAgLy8gKCcnICsgdmFsdWUpIG1ha2VzIGl0IG91dHB1dCB0aGUgY29ycmVjdCB0b1N0cmluZygpLXZhbHVlLlxuXHQgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKERPTVByb3BlcnR5LmdldEF0dHJpYnV0ZU5hbWVbbmFtZV0sICcnICsgdmFsdWUpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHZhciBwcm9wTmFtZSA9IERPTVByb3BlcnR5LmdldFByb3BlcnR5TmFtZVtuYW1lXTtcblx0ICAgICAgICAvLyBNdXN0IGV4cGxpY2l0bHkgY2FzdCB2YWx1ZXMgZm9yIEhBU19TSURFX0VGRkVDVFMtcHJvcGVydGllcyB0byB0aGVcblx0ICAgICAgICAvLyBwcm9wZXJ0eSB0eXBlIGJlZm9yZSBjb21wYXJpbmc7IG9ubHkgYHZhbHVlYCBkb2VzIGFuZCBpcyBzdHJpbmcuXG5cdCAgICAgICAgaWYgKCFET01Qcm9wZXJ0eS5oYXNTaWRlRWZmZWN0c1tuYW1lXSB8fFxuXHQgICAgICAgICAgICAoJycgKyBub2RlW3Byb3BOYW1lXSkgIT09ICgnJyArIHZhbHVlKSkge1xuXHQgICAgICAgICAgLy8gQ29udHJhcnkgdG8gYHNldEF0dHJpYnV0ZWAsIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBwcm9wZXJseVxuXHQgICAgICAgICAgLy8gYHRvU3RyaW5nYGVkIGJ5IElFOC85LlxuXHQgICAgICAgICAgbm9kZVtwcm9wTmFtZV0gPSB2YWx1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSkpIHtcblx0ICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcblx0ICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCAnJyArIHZhbHVlKTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgd2FyblVua25vd25Qcm9wZXJ0eShuYW1lKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBEZWxldGVzIHRoZSB2YWx1ZSBmb3IgYSBwcm9wZXJ0eSBvbiBhIG5vZGUuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuXHQgICAqL1xuXHQgIGRlbGV0ZVZhbHVlRm9yUHJvcGVydHk6IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcblx0ICAgIGlmIChET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxuXHQgICAgICAgIERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lW25hbWVdKSB7XG5cdCAgICAgIHZhciBtdXRhdGlvbk1ldGhvZCA9IERPTVByb3BlcnR5LmdldE11dGF0aW9uTWV0aG9kW25hbWVdO1xuXHQgICAgICBpZiAobXV0YXRpb25NZXRob2QpIHtcblx0ICAgICAgICBtdXRhdGlvbk1ldGhvZChub2RlLCB1bmRlZmluZWQpO1xuXHQgICAgICB9IGVsc2UgaWYgKERPTVByb3BlcnR5Lm11c3RVc2VBdHRyaWJ1dGVbbmFtZV0pIHtcblx0ICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShET01Qcm9wZXJ0eS5nZXRBdHRyaWJ1dGVOYW1lW25hbWVdKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB2YXIgcHJvcE5hbWUgPSBET01Qcm9wZXJ0eS5nZXRQcm9wZXJ0eU5hbWVbbmFtZV07XG5cdCAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IERPTVByb3BlcnR5LmdldERlZmF1bHRWYWx1ZUZvclByb3BlcnR5KFxuXHQgICAgICAgICAgbm9kZS5ub2RlTmFtZSxcblx0ICAgICAgICAgIHByb3BOYW1lXG5cdCAgICAgICAgKTtcblx0ICAgICAgICBpZiAoIURPTVByb3BlcnR5Lmhhc1NpZGVFZmZlY3RzW25hbWVdIHx8XG5cdCAgICAgICAgICAgICgnJyArIG5vZGVbcHJvcE5hbWVdKSAhPT0gZGVmYXVsdFZhbHVlKSB7XG5cdCAgICAgICAgICBub2RlW3Byb3BOYW1lXSA9IGRlZmF1bHRWYWx1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSkpIHtcblx0ICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG5cdCAgICB9IGVsc2UgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuXHQgICAgICB3YXJuVW5rbm93blByb3BlcnR5KG5hbWUpO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IERPTVByb3BlcnR5T3BlcmF0aW9ucztcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDIxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQcm9wYWdhdG9yc1xuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIEV2ZW50Q29uc3RhbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIEV2ZW50UGx1Z2luSHViID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cdFxuXHR2YXIgYWNjdW11bGF0ZUludG8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KTtcblx0dmFyIGZvckVhY2hBY2N1bXVsYXRlZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTEpO1xuXHRcblx0dmFyIFByb3BhZ2F0aW9uUGhhc2VzID0gRXZlbnRDb25zdGFudHMuUHJvcGFnYXRpb25QaGFzZXM7XG5cdHZhciBnZXRMaXN0ZW5lciA9IEV2ZW50UGx1Z2luSHViLmdldExpc3RlbmVyO1xuXHRcblx0LyoqXG5cdCAqIFNvbWUgZXZlbnQgdHlwZXMgaGF2ZSBhIG5vdGlvbiBvZiBkaWZmZXJlbnQgcmVnaXN0cmF0aW9uIG5hbWVzIGZvciBkaWZmZXJlbnRcblx0ICogXCJwaGFzZXNcIiBvZiBwcm9wYWdhdGlvbi4gVGhpcyBmaW5kcyBsaXN0ZW5lcnMgYnkgYSBnaXZlbiBwaGFzZS5cblx0ICovXG5cdGZ1bmN0aW9uIGxpc3RlbmVyQXRQaGFzZShpZCwgZXZlbnQsIHByb3BhZ2F0aW9uUGhhc2UpIHtcblx0ICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9XG5cdCAgICBldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1twcm9wYWdhdGlvblBoYXNlXTtcblx0ICByZXR1cm4gZ2V0TGlzdGVuZXIoaWQsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuXHR9XG5cdFxuXHQvKipcblx0ICogVGFncyBhIGBTeW50aGV0aWNFdmVudGAgd2l0aCBkaXNwYXRjaGVkIGxpc3RlbmVycy4gQ3JlYXRpbmcgdGhpcyBmdW5jdGlvblxuXHQgKiBoZXJlLCBhbGxvd3MgdXMgdG8gbm90IGhhdmUgdG8gYmluZCBvciBjcmVhdGUgZnVuY3Rpb25zIGZvciBlYWNoIGV2ZW50LlxuXHQgKiBNdXRhdGluZyB0aGUgZXZlbnQncyBtZW1iZXJzIGFsbG93cyB1cyB0byBub3QgaGF2ZSB0byBjcmVhdGUgYSB3cmFwcGluZ1xuXHQgKiBcImRpc3BhdGNoXCIgb2JqZWN0IHRoYXQgcGFpcnMgdGhlIGV2ZW50IHdpdGggdGhlIGxpc3RlbmVyLlxuXHQgKi9cblx0ZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcyhkb21JRCwgdXB3YXJkcywgZXZlbnQpIHtcblx0ICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICBpZiAoIWRvbUlEKSB7XG5cdCAgICAgIHRocm93IG5ldyBFcnJvcignRGlzcGF0Y2hpbmcgaWQgbXVzdCBub3QgYmUgbnVsbCcpO1xuXHQgICAgfVxuXHQgIH1cblx0ICB2YXIgcGhhc2UgPSB1cHdhcmRzID8gUHJvcGFnYXRpb25QaGFzZXMuYnViYmxlZCA6IFByb3BhZ2F0aW9uUGhhc2VzLmNhcHR1cmVkO1xuXHQgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyQXRQaGFzZShkb21JRCwgZXZlbnQsIHBoYXNlKTtcblx0ICBpZiAobGlzdGVuZXIpIHtcblx0ICAgIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9XG5cdCAgICAgIGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycywgbGlzdGVuZXIpO1xuXHQgICAgZXZlbnQuX2Rpc3BhdGNoSURzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoSURzLCBkb21JRCk7XG5cdCAgfVxuXHR9XG5cdFxuXHQvKipcblx0ICogQ29sbGVjdCBkaXNwYXRjaGVzIChtdXN0IGJlIGVudGlyZWx5IGNvbGxlY3RlZCBiZWZvcmUgZGlzcGF0Y2hpbmcgLSBzZWUgdW5pdFxuXHQgKiB0ZXN0cykuIExhemlseSBhbGxvY2F0ZSB0aGUgYXJyYXkgdG8gY29uc2VydmUgbWVtb3J5LiAgV2UgbXVzdCBsb29wIHRocm91Z2hcblx0ICogZWFjaCBldmVudCBhbmQgcGVyZm9ybSB0aGUgdHJhdmVyc2FsIGZvciBlYWNoIG9uZS4gV2UgY2FuIG5vdCBwZXJmb3JtIGFcblx0ICogc2luZ2xlIHRyYXZlcnNhbCBmb3IgdGhlIGVudGlyZSBjb2xsZWN0aW9uIG9mIGV2ZW50cyBiZWNhdXNlIGVhY2ggZXZlbnQgbWF5XG5cdCAqIGhhdmUgYSBkaWZmZXJlbnQgdGFyZ2V0LlxuXHQgKi9cblx0ZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZShldmVudCkge1xuXHQgIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuXHQgICAgRXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmdldEluc3RhbmNlSGFuZGxlKCkudHJhdmVyc2VUd29QaGFzZShcblx0ICAgICAgZXZlbnQuZGlzcGF0Y2hNYXJrZXIsXG5cdCAgICAgIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMsXG5cdCAgICAgIGV2ZW50XG5cdCAgICApO1xuXHQgIH1cblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBBY2N1bXVsYXRlcyB3aXRob3V0IHJlZ2FyZCB0byBkaXJlY3Rpb24sIGRvZXMgbm90IGxvb2sgZm9yIHBoYXNlZFxuXHQgKiByZWdpc3RyYXRpb24gbmFtZXMuIFNhbWUgYXMgYGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlYCBidXQgd2l0aG91dFxuXHQgKiByZXF1aXJpbmcgdGhhdCB0aGUgYGRpc3BhdGNoTWFya2VyYCBiZSB0aGUgc2FtZSBhcyB0aGUgZGlzcGF0Y2hlZCBJRC5cblx0ICovXG5cdGZ1bmN0aW9uIGFjY3VtdWxhdGVEaXNwYXRjaGVzKGlkLCBpZ25vcmVkRGlyZWN0aW9uLCBldmVudCkge1xuXHQgIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG5cdCAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWU7XG5cdCAgICB2YXIgbGlzdGVuZXIgPSBnZXRMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSk7XG5cdCAgICBpZiAobGlzdGVuZXIpIHtcblx0ICAgICAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID1cblx0ICAgICAgICBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcblx0ICAgICAgZXZlbnQuX2Rpc3BhdGNoSURzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoSURzLCBpZCk7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHQvKipcblx0ICogQWNjdW11bGF0ZXMgZGlzcGF0Y2hlcyBvbiBhbiBgU3ludGhldGljRXZlbnRgLCBidXQgb25seSBmb3IgdGhlXG5cdCAqIGBkaXNwYXRjaE1hcmtlcmAuXG5cdCAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50XG5cdCAqL1xuXHRmdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZShldmVudCkge1xuXHQgIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG5cdCAgICBhY2N1bXVsYXRlRGlzcGF0Y2hlcyhldmVudC5kaXNwYXRjaE1hcmtlciwgbnVsbCwgZXZlbnQpO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudHMpIHtcblx0ICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzKGxlYXZlLCBlbnRlciwgZnJvbUlELCB0b0lEKSB7XG5cdCAgRXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmdldEluc3RhbmNlSGFuZGxlKCkudHJhdmVyc2VFbnRlckxlYXZlKFxuXHQgICAgZnJvbUlELFxuXHQgICAgdG9JRCxcblx0ICAgIGFjY3VtdWxhdGVEaXNwYXRjaGVzLFxuXHQgICAgbGVhdmUsXG5cdCAgICBlbnRlclxuXHQgICk7XG5cdH1cblx0XG5cdFxuXHRmdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyhldmVudHMpIHtcblx0ICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZSk7XG5cdH1cblx0XG5cdFxuXHRcblx0LyoqXG5cdCAqIEEgc21hbGwgc2V0IG9mIHByb3BhZ2F0aW9uIHBhdHRlcm5zLCBlYWNoIG9mIHdoaWNoIHdpbGwgYWNjZXB0IGEgc21hbGwgYW1vdW50XG5cdCAqIG9mIGluZm9ybWF0aW9uLCBhbmQgZ2VuZXJhdGUgYSBzZXQgb2YgXCJkaXNwYXRjaCByZWFkeSBldmVudCBvYmplY3RzXCIgLSB3aGljaFxuXHQgKiBhcmUgc2V0cyBvZiBldmVudHMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBhbm5vdGF0ZWQgd2l0aCBhIHNldCBvZiBkaXNwYXRjaGVkXG5cdCAqIGxpc3RlbmVyIGZ1bmN0aW9ucy9pZHMuIFRoZSBBUEkgaXMgZGVzaWduZWQgdGhpcyB3YXkgdG8gZGlzY291cmFnZSB0aGVzZVxuXHQgKiBwcm9wYWdhdGlvbiBzdHJhdGVnaWVzIGZyb20gYWN0dWFsbHkgZXhlY3V0aW5nIHRoZSBkaXNwYXRjaGVzLCBzaW5jZSB3ZVxuXHQgKiBhbHdheXMgd2FudCB0byBjb2xsZWN0IHRoZSBlbnRpcmUgc2V0IG9mIGRpc3BhdGNoZXMgYmVmb3JlIGV4ZWN1dGluZyBldmVudCBhXG5cdCAqIHNpbmdsZSBvbmUuXG5cdCAqXG5cdCAqIEBjb25zdHJ1Y3RvciBFdmVudFByb3BhZ2F0b3JzXG5cdCAqL1xuXHR2YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHtcblx0ICBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzOiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzLFxuXHQgIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyxcblx0ICBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6IGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlc1xuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBFdmVudFByb3BhZ2F0b3JzO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogMjIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXG5cdCAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgRXZlbnRDb25zdGFudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgRXZlbnRQbHVnaW5IdWIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KTtcblx0dmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYyKTtcblx0dmFyIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0Myk7XG5cdHZhciBWaWV3cG9ydE1ldHJpY3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2KTtcblx0XG5cdHZhciBhc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgaXNFdmVudFN1cHBvcnRlZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTYpO1xuXHRcblx0LyoqXG5cdCAqIFN1bW1hcnkgb2YgYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgZXZlbnQgaGFuZGxpbmc6XG5cdCAqXG5cdCAqICAtIFRvcC1sZXZlbCBkZWxlZ2F0aW9uIGlzIHVzZWQgdG8gdHJhcCBtb3N0IG5hdGl2ZSBicm93c2VyIGV2ZW50cy4gVGhpc1xuXHQgKiAgICBtYXkgb25seSBvY2N1ciBpbiB0aGUgbWFpbiB0aHJlYWQgYW5kIGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZlxuXHQgKiAgICBSZWFjdEV2ZW50TGlzdGVuZXIsIHdoaWNoIGlzIGluamVjdGVkIGFuZCBjYW4gdGhlcmVmb3JlIHN1cHBvcnQgcGx1Z2dhYmxlXG5cdCAqICAgIGV2ZW50IHNvdXJjZXMuIFRoaXMgaXMgdGhlIG9ubHkgd29yayB0aGF0IG9jY3VycyBpbiB0aGUgbWFpbiB0aHJlYWQuXG5cdCAqXG5cdCAqICAtIFdlIG5vcm1hbGl6ZSBhbmQgZGUtZHVwbGljYXRlIGV2ZW50cyB0byBhY2NvdW50IGZvciBicm93c2VyIHF1aXJrcy4gVGhpc1xuXHQgKiAgICBtYXkgYmUgZG9uZSBpbiB0aGUgd29ya2VyIHRocmVhZC5cblx0ICpcblx0ICogIC0gRm9yd2FyZCB0aGVzZSBuYXRpdmUgZXZlbnRzICh3aXRoIHRoZSBhc3NvY2lhdGVkIHRvcC1sZXZlbCB0eXBlIHVzZWQgdG9cblx0ICogICAgdHJhcCBpdCkgdG8gYEV2ZW50UGx1Z2luSHViYCwgd2hpY2ggaW4gdHVybiB3aWxsIGFzayBwbHVnaW5zIGlmIHRoZXkgd2FudFxuXHQgKiAgICB0byBleHRyYWN0IGFueSBzeW50aGV0aWMgZXZlbnRzLlxuXHQgKlxuXHQgKiAgLSBUaGUgYEV2ZW50UGx1Z2luSHViYCB3aWxsIHRoZW4gcHJvY2VzcyBlYWNoIGV2ZW50IGJ5IGFubm90YXRpbmcgdGhlbSB3aXRoXG5cdCAqICAgIFwiZGlzcGF0Y2hlc1wiLCBhIHNlcXVlbmNlIG9mIGxpc3RlbmVycyBhbmQgSURzIHRoYXQgY2FyZSBhYm91dCB0aGF0IGV2ZW50LlxuXHQgKlxuXHQgKiAgLSBUaGUgYEV2ZW50UGx1Z2luSHViYCB0aGVuIGRpc3BhdGNoZXMgdGhlIGV2ZW50cy5cblx0ICpcblx0ICogT3ZlcnZpZXcgb2YgUmVhY3QgYW5kIHRoZSBldmVudCBzeXN0ZW06XG5cdCAqXG5cdCAqICstLS0tLS0tLS0tLS0rICAgIC5cblx0ICogfCAgICBET00gICAgIHwgICAgLlxuXHQgKiArLS0tLS0tLS0tLS0tKyAgICAuXG5cdCAqICAgICAgIHwgICAgICAgICAgIC5cblx0ICogICAgICAgdiAgICAgICAgICAgLlxuXHQgKiArLS0tLS0tLS0tLS0tKyAgICAuXG5cdCAqIHwgUmVhY3RFdmVudCB8ICAgIC5cblx0ICogfCAgTGlzdGVuZXIgIHwgICAgLlxuXHQgKiArLS0tLS0tLS0tLS0tKyAgICAuICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLStcblx0ICogICAgICAgfCAgICAgICAgICAgLiAgICAgICAgICAgICAgICstLS0tLS0tLSt8U2ltcGxlRXZlbnR8XG5cdCAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICB8ICAgICAgICAgfFBsdWdpbiAgICAgfFxuXHQgKiArLS0tLS18LS0tLS0tKyAgICAuICAgICAgICAgICAgICAgdiAgICAgICAgICstLS0tLS0tLS0tLStcblx0ICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuXHQgKiB8ICAgICArLS0tLS0tLS0tLS0uLS0tPnxFdmVudFBsdWdpbkh1YnwgICAgICAgICAgICAgICAgICAgIHwgICAgRXZlbnQgICB8XG5cdCAqIHwgICAgICAgICAgICB8ICAgIC4gICAgfCAgICAgICAgICAgICAgfCAgICAgKy0tLS0tLS0tLS0tKyAgfCBQcm9wYWdhdG9yc3xcblx0ICogfCBSZWFjdEV2ZW50IHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICB8VGFwRXZlbnQgICB8ICB8LS0tLS0tLS0tLS0tfFxuXHQgKiB8ICBFbWl0dGVyICAgfCAgICAuICAgIHwgICAgICAgICAgICAgIHw8LS0tK3xQbHVnaW4gICAgIHwgIHxvdGhlciBwbHVnaW58XG5cdCAqIHwgICAgICAgICAgICB8ICAgIC4gICAgfCAgICAgICAgICAgICAgfCAgICAgKy0tLS0tLS0tLS0tKyAgfCAgdXRpbGl0aWVzIHxcblx0ICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58ICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuXHQgKiB8ICAgICB8ICAgICAgfCAgICAuICAgICstLS0tLS0tLS0tLS0tLStcblx0ICogKy0tLS0tfC0tLS0tLSsgICAgLiAgICAgICAgICAgICAgICBeICAgICAgICArLS0tLS0tLS0tLS0rXG5cdCAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICAgfCAgICAgICAgfEVudGVyL0xlYXZlfFxuXHQgKiAgICAgICArICAgICAgICAgICAuICAgICAgICAgICAgICAgICstLS0tLS0tK3xQbHVnaW4gICAgIHxcblx0ICogKy0tLS0tLS0tLS0tLS0rICAgLiAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0rXG5cdCAqIHwgYXBwbGljYXRpb24gfCAgIC5cblx0ICogfC0tLS0tLS0tLS0tLS18ICAgLlxuXHQgKiB8ICAgICAgICAgICAgIHwgICAuXG5cdCAqIHwgICAgICAgICAgICAgfCAgIC5cblx0ICogKy0tLS0tLS0tLS0tLS0rICAgLlxuXHQgKiAgICAgICAgICAgICAgICAgICAuXG5cdCAqICAgIFJlYWN0IENvcmUgICAgIC4gIEdlbmVyYWwgUHVycG9zZSBFdmVudCBQbHVnaW4gU3lzdGVtXG5cdCAqL1xuXHRcblx0dmFyIGFscmVhZHlMaXN0ZW5pbmdUbyA9IHt9O1xuXHR2YXIgaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUgPSBmYWxzZTtcblx0dmFyIHJlYWN0VG9wTGlzdGVuZXJzQ291bnRlciA9IDA7XG5cdFxuXHQvLyBGb3IgZXZlbnRzIGxpa2UgJ3N1Ym1pdCcgd2hpY2ggZG9uJ3QgY29uc2lzdGVudGx5IGJ1YmJsZSAod2hpY2ggd2UgdHJhcCBhdCBhXG5cdC8vIGxvd2VyIG5vZGUgdGhhbiBgZG9jdW1lbnRgKSwgYmluZGluZyBhdCBgZG9jdW1lbnRgIHdvdWxkIGNhdXNlIGR1cGxpY2F0ZVxuXHQvLyBldmVudHMgc28gd2UgZG9uJ3QgaW5jbHVkZSB0aGVtIGhlcmVcblx0dmFyIHRvcEV2ZW50TWFwcGluZyA9IHtcblx0ICB0b3BCbHVyOiAnYmx1cicsXG5cdCAgdG9wQ2hhbmdlOiAnY2hhbmdlJyxcblx0ICB0b3BDbGljazogJ2NsaWNrJyxcblx0ICB0b3BDb21wb3NpdGlvbkVuZDogJ2NvbXBvc2l0aW9uZW5kJyxcblx0ICB0b3BDb21wb3NpdGlvblN0YXJ0OiAnY29tcG9zaXRpb25zdGFydCcsXG5cdCAgdG9wQ29tcG9zaXRpb25VcGRhdGU6ICdjb21wb3NpdGlvbnVwZGF0ZScsXG5cdCAgdG9wQ29udGV4dE1lbnU6ICdjb250ZXh0bWVudScsXG5cdCAgdG9wQ29weTogJ2NvcHknLFxuXHQgIHRvcEN1dDogJ2N1dCcsXG5cdCAgdG9wRG91YmxlQ2xpY2s6ICdkYmxjbGljaycsXG5cdCAgdG9wRHJhZzogJ2RyYWcnLFxuXHQgIHRvcERyYWdFbmQ6ICdkcmFnZW5kJyxcblx0ICB0b3BEcmFnRW50ZXI6ICdkcmFnZW50ZXInLFxuXHQgIHRvcERyYWdFeGl0OiAnZHJhZ2V4aXQnLFxuXHQgIHRvcERyYWdMZWF2ZTogJ2RyYWdsZWF2ZScsXG5cdCAgdG9wRHJhZ092ZXI6ICdkcmFnb3ZlcicsXG5cdCAgdG9wRHJhZ1N0YXJ0OiAnZHJhZ3N0YXJ0Jyxcblx0ICB0b3BEcm9wOiAnZHJvcCcsXG5cdCAgdG9wRm9jdXM6ICdmb2N1cycsXG5cdCAgdG9wSW5wdXQ6ICdpbnB1dCcsXG5cdCAgdG9wS2V5RG93bjogJ2tleWRvd24nLFxuXHQgIHRvcEtleVByZXNzOiAna2V5cHJlc3MnLFxuXHQgIHRvcEtleVVwOiAna2V5dXAnLFxuXHQgIHRvcE1vdXNlRG93bjogJ21vdXNlZG93bicsXG5cdCAgdG9wTW91c2VNb3ZlOiAnbW91c2Vtb3ZlJyxcblx0ICB0b3BNb3VzZU91dDogJ21vdXNlb3V0Jyxcblx0ICB0b3BNb3VzZU92ZXI6ICdtb3VzZW92ZXInLFxuXHQgIHRvcE1vdXNlVXA6ICdtb3VzZXVwJyxcblx0ICB0b3BQYXN0ZTogJ3Bhc3RlJyxcblx0ICB0b3BTY3JvbGw6ICdzY3JvbGwnLFxuXHQgIHRvcFNlbGVjdGlvbkNoYW5nZTogJ3NlbGVjdGlvbmNoYW5nZScsXG5cdCAgdG9wVGV4dElucHV0OiAndGV4dElucHV0Jyxcblx0ICB0b3BUb3VjaENhbmNlbDogJ3RvdWNoY2FuY2VsJyxcblx0ICB0b3BUb3VjaEVuZDogJ3RvdWNoZW5kJyxcblx0ICB0b3BUb3VjaE1vdmU6ICd0b3VjaG1vdmUnLFxuXHQgIHRvcFRvdWNoU3RhcnQ6ICd0b3VjaHN0YXJ0Jyxcblx0ICB0b3BXaGVlbDogJ3doZWVsJ1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIFRvIGVuc3VyZSBubyBjb25mbGljdHMgd2l0aCBvdGhlciBwb3RlbnRpYWwgUmVhY3QgaW5zdGFuY2VzIG9uIHRoZSBwYWdlXG5cdCAqL1xuXHR2YXIgdG9wTGlzdGVuZXJzSURLZXkgPSBcIl9yZWFjdExpc3RlbmVyc0lEXCIgKyBTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG5cdFxuXHRmdW5jdGlvbiBnZXRMaXN0ZW5pbmdGb3JEb2N1bWVudChtb3VudEF0KSB7XG5cdCAgLy8gSW4gSUU4LCBgbW91bnRBdGAgaXMgYSBob3N0IG9iamVjdCBhbmQgZG9lc24ndCBoYXZlIGBoYXNPd25Qcm9wZXJ0eWBcblx0ICAvLyBkaXJlY3RseS5cblx0ICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3VudEF0LCB0b3BMaXN0ZW5lcnNJREtleSkpIHtcblx0ICAgIG1vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldID0gcmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyKys7XG5cdCAgICBhbHJlYWR5TGlzdGVuaW5nVG9bbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV1dID0ge307XG5cdCAgfVxuXHQgIHJldHVybiBhbHJlYWR5TGlzdGVuaW5nVG9bbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV1dO1xuXHR9XG5cdFxuXHQvKipcblx0ICogYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgaXMgdXNlZCB0byBhdHRhY2ggdG9wLWxldmVsIGV2ZW50IGxpc3RlbmVycy4gRm9yXG5cdCAqIGV4YW1wbGU6XG5cdCAqXG5cdCAqICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnB1dExpc3RlbmVyKCdteUlEJywgJ29uQ2xpY2snLCBteUZ1bmN0aW9uKTtcblx0ICpcblx0ICogVGhpcyB3b3VsZCBhbGxvY2F0ZSBhIFwicmVnaXN0cmF0aW9uXCIgb2YgYCgnb25DbGljaycsIG15RnVuY3Rpb24pYCBvbiAnbXlJRCcuXG5cdCAqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0dmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IGFzc2lnbih7fSwgUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiwge1xuXHRcblx0ICAvKipcblx0ICAgKiBJbmplY3RhYmxlIGV2ZW50IGJhY2tlbmRcblx0ICAgKi9cblx0ICBSZWFjdEV2ZW50TGlzdGVuZXI6IG51bGwsXG5cdFxuXHQgIGluamVjdGlvbjoge1xuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW0ge29iamVjdH0gUmVhY3RFdmVudExpc3RlbmVyXG5cdCAgICAgKi9cblx0ICAgIGluamVjdFJlYWN0RXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oUmVhY3RFdmVudExpc3RlbmVyKSB7XG5cdCAgICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5zZXRIYW5kbGVUb3BMZXZlbChcblx0ICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuaGFuZGxlVG9wTGV2ZWxcblx0ICAgICAgKTtcblx0ICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lciA9IFJlYWN0RXZlbnRMaXN0ZW5lcjtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBTZXRzIHdoZXRoZXIgb3Igbm90IGFueSBjcmVhdGVkIGNhbGxiYWNrcyBzaG91bGQgYmUgZW5hYmxlZC5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCBUcnVlIGlmIGNhbGxiYWNrcyBzaG91bGQgYmUgZW5hYmxlZC5cblx0ICAgKi9cblx0ICBzZXRFbmFibGVkOiBmdW5jdGlvbihlbmFibGVkKSB7XG5cdCAgICBpZiAoUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lcikge1xuXHQgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnNldEVuYWJsZWQoZW5hYmxlZCk7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBjYWxsYmFja3MgYXJlIGVuYWJsZWQuXG5cdCAgICovXG5cdCAgaXNFbmFibGVkOiBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiAhIShcblx0ICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lciAmJlxuXHQgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLmlzRW5hYmxlZCgpXG5cdCAgICApO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIFdlIGxpc3RlbiBmb3IgYnViYmxlZCB0b3VjaCBldmVudHMgb24gdGhlIGRvY3VtZW50IG9iamVjdC5cblx0ICAgKlxuXHQgICAqIEZpcmVmb3ggdjguMDEgKGFuZCBwb3NzaWJseSBvdGhlcnMpIGV4aGliaXRlZCBzdHJhbmdlIGJlaGF2aW9yIHdoZW5cblx0ICAgKiBtb3VudGluZyBgb25tb3VzZW1vdmVgIGV2ZW50cyBhdCBzb21lIG5vZGUgdGhhdCB3YXMgbm90IHRoZSBkb2N1bWVudFxuXHQgICAqIGVsZW1lbnQuIFRoZSBzeW1wdG9tcyB3ZXJlIHRoYXQgaWYgeW91ciBtb3VzZSBpcyBub3QgbW92aW5nIG92ZXIgc29tZXRoaW5nXG5cdCAgICogY29udGFpbmVkIHdpdGhpbiB0aGF0IG1vdW50IHBvaW50IChmb3IgZXhhbXBsZSBvbiB0aGUgYmFja2dyb3VuZCkgdGhlXG5cdCAgICogdG9wLWxldmVsIGxpc3RlbmVycyBmb3IgYG9ubW91c2Vtb3ZlYCB3b24ndCBiZSBjYWxsZWQuIEhvd2V2ZXIsIGlmIHlvdVxuXHQgICAqIHJlZ2lzdGVyIHRoZSBgbW91c2Vtb3ZlYCBvbiB0aGUgZG9jdW1lbnQgb2JqZWN0LCB0aGVuIGl0IHdpbGwgb2YgY291cnNlXG5cdCAgICogY2F0Y2ggYWxsIGBtb3VzZW1vdmVgcy4gVGhpcyBhbG9uZyB3aXRoIGlPUyBxdWlya3MsIGp1c3RpZmllcyByZXN0cmljdGluZ1xuXHQgICAqIHRvcC1sZXZlbCBsaXN0ZW5lcnMgdG8gdGhlIGRvY3VtZW50IG9iamVjdCBvbmx5LCBhdCBsZWFzdCBmb3IgdGhlc2Vcblx0ICAgKiBtb3ZlbWVudCB0eXBlcyBvZiBldmVudHMgYW5kIHBvc3NpYmx5IGFsbCBldmVudHMuXG5cdCAgICpcblx0ICAgKiBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDEwLzA5L2NsaWNrX2V2ZW50X2RlbC5odG1sXG5cdCAgICpcblx0ICAgKiBBbHNvLCBga2V5dXBgL2BrZXlwcmVzc2AvYGtleWRvd25gIGRvIG5vdCBidWJibGUgdG8gdGhlIHdpbmRvdyBvbiBJRSwgYnV0XG5cdCAgICogdGhleSBidWJibGUgdG8gZG9jdW1lbnQuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaXN0cmF0aW9uTmFtZSBOYW1lIG9mIGxpc3RlbmVyIChlLmcuIGBvbkNsaWNrYCkuXG5cdCAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRlbnREb2N1bWVudEhhbmRsZSBEb2N1bWVudCB3aGljaCBvd25zIHRoZSBjb250YWluZXJcblx0ICAgKi9cblx0ICBsaXN0ZW5UbzogZnVuY3Rpb24ocmVnaXN0cmF0aW9uTmFtZSwgY29udGVudERvY3VtZW50SGFuZGxlKSB7XG5cdCAgICB2YXIgbW91bnRBdCA9IGNvbnRlbnREb2N1bWVudEhhbmRsZTtcblx0ICAgIHZhciBpc0xpc3RlbmluZyA9IGdldExpc3RlbmluZ0ZvckRvY3VtZW50KG1vdW50QXQpO1xuXHQgICAgdmFyIGRlcGVuZGVuY2llcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkuXG5cdCAgICAgIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV07XG5cdFxuXHQgICAgdmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXHQgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBkZXBlbmRlbmNpZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdCAgICAgIHZhciBkZXBlbmRlbmN5ID0gZGVwZW5kZW5jaWVzW2ldO1xuXHQgICAgICBpZiAoIShcblx0ICAgICAgICAgICAgaXNMaXN0ZW5pbmcuaGFzT3duUHJvcGVydHkoZGVwZW5kZW5jeSkgJiZcblx0ICAgICAgICAgICAgaXNMaXN0ZW5pbmdbZGVwZW5kZW5jeV1cblx0ICAgICAgICAgICkpIHtcblx0ICAgICAgICBpZiAoZGVwZW5kZW5jeSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BXaGVlbCkge1xuXHQgICAgICAgICAgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ3doZWVsJykpIHtcblx0ICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuXHQgICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wV2hlZWwsXG5cdCAgICAgICAgICAgICAgJ3doZWVsJyxcblx0ICAgICAgICAgICAgICBtb3VudEF0XG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ21vdXNld2hlZWwnKSkge1xuXHQgICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG5cdCAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BXaGVlbCxcblx0ICAgICAgICAgICAgICAnbW91c2V3aGVlbCcsXG5cdCAgICAgICAgICAgICAgbW91bnRBdFxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgLy8gRmlyZWZveCBuZWVkcyB0byBjYXB0dXJlIGEgZGlmZmVyZW50IG1vdXNlIHNjcm9sbCBldmVudC5cblx0ICAgICAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2RvbS9ldmVudHMvdGVzdHMvc2Nyb2xsLmh0bWxcblx0ICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuXHQgICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wV2hlZWwsXG5cdCAgICAgICAgICAgICAgJ0RPTU1vdXNlU2Nyb2xsJyxcblx0ICAgICAgICAgICAgICBtb3VudEF0XG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmIChkZXBlbmRlbmN5ID09PSB0b3BMZXZlbFR5cGVzLnRvcFNjcm9sbCkge1xuXHRcblx0ICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdzY3JvbGwnLCB0cnVlKSkge1xuXHQgICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KFxuXHQgICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wU2Nyb2xsLFxuXHQgICAgICAgICAgICAgICdzY3JvbGwnLFxuXHQgICAgICAgICAgICAgIG1vdW50QXRcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcblx0ICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcFNjcm9sbCxcblx0ICAgICAgICAgICAgICAnc2Nyb2xsJyxcblx0ICAgICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLldJTkRPV19IQU5ETEVcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2UgaWYgKGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wRm9jdXMgfHxcblx0ICAgICAgICAgICAgZGVwZW5kZW5jeSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BCbHVyKSB7XG5cdFxuXHQgICAgICAgICAgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ2ZvY3VzJywgdHJ1ZSkpIHtcblx0ICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudChcblx0ICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzLFxuXHQgICAgICAgICAgICAgICdmb2N1cycsXG5cdCAgICAgICAgICAgICAgbW91bnRBdFxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KFxuXHQgICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wQmx1cixcblx0ICAgICAgICAgICAgICAnYmx1cicsXG5cdCAgICAgICAgICAgICAgbW91bnRBdFxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdmb2N1c2luJykpIHtcblx0ICAgICAgICAgICAgLy8gSUUgaGFzIGBmb2N1c2luYCBhbmQgYGZvY3Vzb3V0YCBldmVudHMgd2hpY2ggYnViYmxlLlxuXHQgICAgICAgICAgICAvLyBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDA4LzA0L2RlbGVnYXRpbmdfdGhlLmh0bWxcblx0ICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuXHQgICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wRm9jdXMsXG5cdCAgICAgICAgICAgICAgJ2ZvY3VzaW4nLFxuXHQgICAgICAgICAgICAgIG1vdW50QXRcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuXHQgICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wQmx1cixcblx0ICAgICAgICAgICAgICAnZm9jdXNvdXQnLFxuXHQgICAgICAgICAgICAgIG1vdW50QXRcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAvLyB0byBtYWtlIHN1cmUgYmx1ciBhbmQgZm9jdXMgZXZlbnQgbGlzdGVuZXJzIGFyZSBvbmx5IGF0dGFjaGVkIG9uY2Vcblx0ICAgICAgICAgIGlzTGlzdGVuaW5nW3RvcExldmVsVHlwZXMudG9wQmx1cl0gPSB0cnVlO1xuXHQgICAgICAgICAgaXNMaXN0ZW5pbmdbdG9wTGV2ZWxUeXBlcy50b3BGb2N1c10gPSB0cnVlO1xuXHQgICAgICAgIH0gZWxzZSBpZiAodG9wRXZlbnRNYXBwaW5nLmhhc093blByb3BlcnR5KGRlcGVuZGVuY3kpKSB7XG5cdCAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG5cdCAgICAgICAgICAgIGRlcGVuZGVuY3ksXG5cdCAgICAgICAgICAgIHRvcEV2ZW50TWFwcGluZ1tkZXBlbmRlbmN5XSxcblx0ICAgICAgICAgICAgbW91bnRBdFxuXHQgICAgICAgICAgKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlzTGlzdGVuaW5nW2RlcGVuZGVuY3ldID0gdHJ1ZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIHRyYXBCdWJibGVkRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcblx0ICAgIHJldHVybiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG5cdCAgICAgIHRvcExldmVsVHlwZSxcblx0ICAgICAgaGFuZGxlckJhc2VOYW1lLFxuXHQgICAgICBoYW5kbGVcblx0ICAgICk7XG5cdCAgfSxcblx0XG5cdCAgdHJhcENhcHR1cmVkRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcblx0ICAgIHJldHVybiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KFxuXHQgICAgICB0b3BMZXZlbFR5cGUsXG5cdCAgICAgIGhhbmRsZXJCYXNlTmFtZSxcblx0ICAgICAgaGFuZGxlXG5cdCAgICApO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIExpc3RlbnMgdG8gd2luZG93IHNjcm9sbCBhbmQgcmVzaXplIGV2ZW50cy4gV2UgY2FjaGUgc2Nyb2xsIHZhbHVlcyBzbyB0aGF0XG5cdCAgICogYXBwbGljYXRpb24gY29kZSBjYW4gYWNjZXNzIHRoZW0gd2l0aG91dCB0cmlnZ2VyaW5nIHJlZmxvd3MuXG5cdCAgICpcblx0ICAgKiBOT1RFOiBTY3JvbGwgZXZlbnRzIGRvIG5vdCBidWJibGUuXG5cdCAgICpcblx0ICAgKiBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvZG9tL2V2ZW50cy9zY3JvbGwuaHRtbFxuXHQgICAqL1xuXHQgIGVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZzogZnVuY3Rpb24oKXtcblx0ICAgIGlmICghaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUpIHtcblx0ICAgICAgdmFyIHJlZnJlc2ggPSBWaWV3cG9ydE1ldHJpY3MucmVmcmVzaFNjcm9sbFZhbHVlcztcblx0ICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5tb25pdG9yU2Nyb2xsVmFsdWUocmVmcmVzaCk7XG5cdCAgICAgIGlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlID0gdHJ1ZTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6IEV2ZW50UGx1Z2luSHViLmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyxcblx0XG5cdCAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6IEV2ZW50UGx1Z2luSHViLnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLFxuXHRcblx0ICBwdXRMaXN0ZW5lcjogRXZlbnRQbHVnaW5IdWIucHV0TGlzdGVuZXIsXG5cdFxuXHQgIGdldExpc3RlbmVyOiBFdmVudFBsdWdpbkh1Yi5nZXRMaXN0ZW5lcixcblx0XG5cdCAgZGVsZXRlTGlzdGVuZXI6IEV2ZW50UGx1Z2luSHViLmRlbGV0ZUxpc3RlbmVyLFxuXHRcblx0ICBkZWxldGVBbGxMaXN0ZW5lcnM6IEV2ZW50UGx1Z2luSHViLmRlbGV0ZUFsbExpc3RlbmVyc1xuXHRcblx0fSk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcjtcblxuXG4vKioqLyB9LFxuLyogMjMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvbmVudFxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIFJlYWN0RWxlbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdHZhciBSZWFjdE93bmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OSk7XG5cdHZhciBSZWFjdFVwZGF0ZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0XG5cdHZhciBhc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIGtleU1pcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xuXHRcblx0LyoqXG5cdCAqIEV2ZXJ5IFJlYWN0IGNvbXBvbmVudCBpcyBpbiBvbmUgb2YgdGhlc2UgbGlmZSBjeWNsZXMuXG5cdCAqL1xuXHR2YXIgQ29tcG9uZW50TGlmZUN5Y2xlID0ga2V5TWlycm9yKHtcblx0ICAvKipcblx0ICAgKiBNb3VudGVkIGNvbXBvbmVudHMgaGF2ZSBhIERPTSBub2RlIHJlcHJlc2VudGF0aW9uIGFuZCBhcmUgY2FwYWJsZSBvZlxuXHQgICAqIHJlY2VpdmluZyBuZXcgcHJvcHMuXG5cdCAgICovXG5cdCAgTU9VTlRFRDogbnVsbCxcblx0ICAvKipcblx0ICAgKiBVbm1vdW50ZWQgY29tcG9uZW50cyBhcmUgaW5hY3RpdmUgYW5kIGNhbm5vdCByZWNlaXZlIG5ldyBwcm9wcy5cblx0ICAgKi9cblx0ICBVTk1PVU5URUQ6IG51bGxcblx0fSk7XG5cdFxuXHR2YXIgaW5qZWN0ZWQgPSBmYWxzZTtcblx0XG5cdC8qKlxuXHQgKiBPcHRpb25hbGx5IGluamVjdGFibGUgZW52aXJvbm1lbnQgZGVwZW5kZW50IGNsZWFudXAgaG9vay4gKHNlcnZlciB2cy5cblx0ICogYnJvd3NlciBldGMpLiBFeGFtcGxlOiBBIGJyb3dzZXIgc3lzdGVtIGNhY2hlcyBET00gbm9kZXMgYmFzZWQgb24gY29tcG9uZW50XG5cdCAqIElEIGFuZCBtdXN0IHJlbW92ZSB0aGF0IGNhY2hlIGVudHJ5IHdoZW4gdGhpcyBpbnN0YW5jZSBpcyB1bm1vdW50ZWQuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHR2YXIgdW5tb3VudElERnJvbUVudmlyb25tZW50ID0gbnVsbDtcblx0XG5cdC8qKlxuXHQgKiBUaGUgXCJpbWFnZVwiIG9mIGEgY29tcG9uZW50IHRyZWUsIGlzIHRoZSBwbGF0Zm9ybSBzcGVjaWZpYyAodHlwaWNhbGx5XG5cdCAqIHNlcmlhbGl6ZWQpIGRhdGEgdGhhdCByZXByZXNlbnRzIGEgdHJlZSBvZiBsb3dlciBsZXZlbCBVSSBidWlsZGluZyBibG9ja3MuXG5cdCAqIE9uIHRoZSB3ZWIsIHRoaXMgXCJpbWFnZVwiIGlzIEhUTUwgbWFya3VwIHdoaWNoIGRlc2NyaWJlcyBhIGNvbnN0cnVjdGlvbiBvZlxuXHQgKiBsb3cgbGV2ZWwgYGRpdmAgYW5kIGBzcGFuYCBub2Rlcy4gT3RoZXIgcGxhdGZvcm1zIG1heSBoYXZlIGRpZmZlcmVudFxuXHQgKiBlbmNvZGluZyBvZiB0aGlzIFwiaW1hZ2VcIi4gVGhpcyBtdXN0IGJlIGluamVjdGVkLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0dmFyIG1vdW50SW1hZ2VJbnRvTm9kZSA9IG51bGw7XG5cdFxuXHQvKipcblx0ICogQ29tcG9uZW50cyBhcmUgdGhlIGJhc2ljIHVuaXRzIG9mIGNvbXBvc2l0aW9uIGluIFJlYWN0LlxuXHQgKlxuXHQgKiBFdmVyeSBjb21wb25lbnQgYWNjZXB0cyBhIHNldCBvZiBrZXllZCBpbnB1dCBwYXJhbWV0ZXJzIGtub3duIGFzIFwicHJvcHNcIiB0aGF0XG5cdCAqIGFyZSBpbml0aWFsaXplZCBieSB0aGUgY29uc3RydWN0b3IuIE9uY2UgYSBjb21wb25lbnQgaXMgbW91bnRlZCwgdGhlIHByb3BzXG5cdCAqIGNhbiBiZSBtdXRhdGVkIHVzaW5nIGBzZXRQcm9wc2Agb3IgYHJlcGxhY2VQcm9wc2AuXG5cdCAqXG5cdCAqIEV2ZXJ5IGNvbXBvbmVudCBpcyBjYXBhYmxlIG9mIHRoZSBmb2xsb3dpbmcgb3BlcmF0aW9uczpcblx0ICpcblx0ICogICBgbW91bnRDb21wb25lbnRgXG5cdCAqICAgICBJbml0aWFsaXplcyB0aGUgY29tcG9uZW50LCByZW5kZXJzIG1hcmt1cCwgYW5kIHJlZ2lzdGVycyBldmVudCBsaXN0ZW5lcnMuXG5cdCAqXG5cdCAqICAgYHJlY2VpdmVDb21wb25lbnRgXG5cdCAqICAgICBVcGRhdGVzIHRoZSByZW5kZXJlZCBET00gbm9kZXMgdG8gbWF0Y2ggdGhlIGdpdmVuIGNvbXBvbmVudC5cblx0ICpcblx0ICogICBgdW5tb3VudENvbXBvbmVudGBcblx0ICogICAgIFJlbGVhc2VzIGFueSByZXNvdXJjZXMgYWxsb2NhdGVkIGJ5IHRoaXMgY29tcG9uZW50LlxuXHQgKlxuXHQgKiBDb21wb25lbnRzIGNhbiBhbHNvIGJlIFwib3duZWRcIiBieSBvdGhlciBjb21wb25lbnRzLiBCZWluZyBvd25lZCBieSBhbm90aGVyXG5cdCAqIGNvbXBvbmVudCBtZWFucyBiZWluZyBjb25zdHJ1Y3RlZCBieSB0aGF0IGNvbXBvbmVudC4gVGhpcyBpcyBkaWZmZXJlbnQgZnJvbVxuXHQgKiBiZWluZyB0aGUgY2hpbGQgb2YgYSBjb21wb25lbnQsIHdoaWNoIG1lYW5zIGhhdmluZyBhIERPTSByZXByZXNlbnRhdGlvbiB0aGF0XG5cdCAqIGlzIGEgY2hpbGQgb2YgdGhlIERPTSByZXByZXNlbnRhdGlvbiBvZiB0aGF0IGNvbXBvbmVudC5cblx0ICpcblx0ICogQGNsYXNzIFJlYWN0Q29tcG9uZW50XG5cdCAqL1xuXHR2YXIgUmVhY3RDb21wb25lbnQgPSB7XG5cdFxuXHQgIGluamVjdGlvbjoge1xuXHQgICAgaW5qZWN0RW52aXJvbm1lbnQ6IGZ1bmN0aW9uKFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQpIHtcblx0ICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgICAhaW5qZWN0ZWQsXG5cdCAgICAgICAgJ1JlYWN0Q29tcG9uZW50OiBpbmplY3RFbnZpcm9ubWVudCgpIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlLidcblx0ICAgICAgKSA6IGludmFyaWFudCghaW5qZWN0ZWQpKTtcblx0ICAgICAgbW91bnRJbWFnZUludG9Ob2RlID0gUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5tb3VudEltYWdlSW50b05vZGU7XG5cdCAgICAgIHVubW91bnRJREZyb21FbnZpcm9ubWVudCA9XG5cdCAgICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC51bm1vdW50SURGcm9tRW52aXJvbm1lbnQ7XG5cdCAgICAgIFJlYWN0Q29tcG9uZW50LkJhY2tlbmRJRE9wZXJhdGlvbnMgPVxuXHQgICAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQuQmFja2VuZElET3BlcmF0aW9ucztcblx0ICAgICAgaW5qZWN0ZWQgPSB0cnVlO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIExpZmVDeWNsZTogQ29tcG9uZW50TGlmZUN5Y2xlLFxuXHRcblx0ICAvKipcblx0ICAgKiBJbmplY3RlZCBtb2R1bGUgdGhhdCBwcm92aWRlcyBhYmlsaXR5IHRvIG11dGF0ZSBpbmRpdmlkdWFsIHByb3BlcnRpZXMuXG5cdCAgICogSW5qZWN0ZWQgaW50byB0aGUgYmFzZSBjbGFzcyBiZWNhdXNlIG1hbnkgZGlmZmVyZW50IHN1YmNsYXNzZXMgbmVlZCBhY2Nlc3Ncblx0ICAgKiB0byB0aGlzLlxuXHQgICAqXG5cdCAgICogQGludGVybmFsXG5cdCAgICovXG5cdCAgQmFja2VuZElET3BlcmF0aW9uczogbnVsbCxcblx0XG5cdCAgLyoqXG5cdCAgICogQmFzZSBmdW5jdGlvbmFsaXR5IGZvciBldmVyeSBSZWFjdENvbXBvbmVudCBjb25zdHJ1Y3Rvci4gTWl4ZWQgaW50byB0aGVcblx0ICAgKiBgUmVhY3RDb21wb25lbnRgIHByb3RvdHlwZSwgYnV0IGV4cG9zZWQgc3RhdGljYWxseSBmb3IgZWFzeSBhY2Nlc3MuXG5cdCAgICpcblx0ICAgKiBAbGVuZHMge1JlYWN0Q29tcG9uZW50LnByb3RvdHlwZX1cblx0ICAgKi9cblx0ICBNaXhpbjoge1xuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IHRoaXMgY29tcG9uZW50IGlzIG1vdW50ZWQuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtb3VudGVkLCBmYWxzZSBvdGhlcndpc2UuXG5cdCAgICAgKiBAZmluYWxcblx0ICAgICAqIEBwcm90ZWN0ZWRcblx0ICAgICAqL1xuXHQgICAgaXNNb3VudGVkOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX2xpZmVDeWNsZVN0YXRlID09PSBDb21wb25lbnRMaWZlQ3ljbGUuTU9VTlRFRDtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBwcm9wcy5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFByb3BzIFN1YnNldCBvZiB0aGUgbmV4dCBwcm9wcy5cblx0ICAgICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgcHJvcHMgYXJlIHVwZGF0ZWQuXG5cdCAgICAgKiBAZmluYWxcblx0ICAgICAqIEBwdWJsaWNcblx0ICAgICAqL1xuXHQgICAgc2V0UHJvcHM6IGZ1bmN0aW9uKHBhcnRpYWxQcm9wcywgY2FsbGJhY2spIHtcblx0ICAgICAgLy8gTWVyZ2Ugd2l0aCB0aGUgcGVuZGluZyBlbGVtZW50IGlmIGl0IGV4aXN0cywgb3RoZXJ3aXNlIHdpdGggZXhpc3Rpbmdcblx0ICAgICAgLy8gZWxlbWVudCBwcm9wcy5cblx0ICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLl9wZW5kaW5nRWxlbWVudCB8fCB0aGlzLl9jdXJyZW50RWxlbWVudDtcblx0ICAgICAgdGhpcy5yZXBsYWNlUHJvcHMoXG5cdCAgICAgICAgYXNzaWduKHt9LCBlbGVtZW50LnByb3BzLCBwYXJ0aWFsUHJvcHMpLFxuXHQgICAgICAgIGNhbGxiYWNrXG5cdCAgICAgICk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogUmVwbGFjZXMgYWxsIG9mIHRoZSBwcm9wcy5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgTmV3IHByb3BzLlxuXHQgICAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBwcm9wcyBhcmUgdXBkYXRlZC5cblx0ICAgICAqIEBmaW5hbFxuXHQgICAgICogQHB1YmxpY1xuXHQgICAgICovXG5cdCAgICByZXBsYWNlUHJvcHM6IGZ1bmN0aW9uKHByb3BzLCBjYWxsYmFjaykge1xuXHQgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICAgIHRoaXMuaXNNb3VudGVkKCksXG5cdCAgICAgICAgJ3JlcGxhY2VQcm9wcyguLi4pOiBDYW4gb25seSB1cGRhdGUgYSBtb3VudGVkIGNvbXBvbmVudC4nXG5cdCAgICAgICkgOiBpbnZhcmlhbnQodGhpcy5pc01vdW50ZWQoKSkpO1xuXHQgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICAgIHRoaXMuX21vdW50RGVwdGggPT09IDAsXG5cdCAgICAgICAgJ3JlcGxhY2VQcm9wcyguLi4pOiBZb3UgY2FsbGVkIGBzZXRQcm9wc2Agb3IgYHJlcGxhY2VQcm9wc2Agb24gYSAnICtcblx0ICAgICAgICAnY29tcG9uZW50IHdpdGggYSBwYXJlbnQuIFRoaXMgaXMgYW4gYW50aS1wYXR0ZXJuIHNpbmNlIHByb3BzIHdpbGwgJyArXG5cdCAgICAgICAgJ2dldCByZWFjdGl2ZWx5IHVwZGF0ZWQgd2hlbiByZW5kZXJlZC4gSW5zdGVhZCwgY2hhbmdlIHRoZSBvd25lclxcJ3MgJyArXG5cdCAgICAgICAgJ2ByZW5kZXJgIG1ldGhvZCB0byBwYXNzIHRoZSBjb3JyZWN0IHZhbHVlIGFzIHByb3BzIHRvIHRoZSBjb21wb25lbnQgJyArXG5cdCAgICAgICAgJ3doZXJlIGl0IGlzIGNyZWF0ZWQuJ1xuXHQgICAgICApIDogaW52YXJpYW50KHRoaXMuX21vdW50RGVwdGggPT09IDApKTtcblx0ICAgICAgLy8gVGhpcyBpcyBhIGRlb3B0aW1pemVkIHBhdGguIFdlIG9wdGltaXplIGZvciBhbHdheXMgaGF2aW5nIGEgZWxlbWVudC5cblx0ICAgICAgLy8gVGhpcyBjcmVhdGVzIGFuIGV4dHJhIGludGVybmFsIGVsZW1lbnQuXG5cdCAgICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzKFxuXHQgICAgICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50IHx8IHRoaXMuX2N1cnJlbnRFbGVtZW50LFxuXHQgICAgICAgIHByb3BzXG5cdCAgICAgICk7XG5cdCAgICAgIFJlYWN0VXBkYXRlcy5lbnF1ZXVlVXBkYXRlKHRoaXMsIGNhbGxiYWNrKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBTY2hlZHVsZSBhIHBhcnRpYWwgdXBkYXRlIHRvIHRoZSBwcm9wcy4gT25seSB1c2VkIGZvciBpbnRlcm5hbCB0ZXN0aW5nLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJ0aWFsUHJvcHMgU3Vic2V0IG9mIHRoZSBuZXh0IHByb3BzLlxuXHQgICAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBwcm9wcyBhcmUgdXBkYXRlZC5cblx0ICAgICAqIEBmaW5hbFxuXHQgICAgICogQGludGVybmFsXG5cdCAgICAgKi9cblx0ICAgIF9zZXRQcm9wc0ludGVybmFsOiBmdW5jdGlvbihwYXJ0aWFsUHJvcHMsIGNhbGxiYWNrKSB7XG5cdCAgICAgIC8vIFRoaXMgaXMgYSBkZW9wdGltaXplZCBwYXRoLiBXZSBvcHRpbWl6ZSBmb3IgYWx3YXlzIGhhdmluZyBhIGVsZW1lbnQuXG5cdCAgICAgIC8vIFRoaXMgY3JlYXRlcyBhbiBleHRyYSBpbnRlcm5hbCBlbGVtZW50LlxuXHQgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuX3BlbmRpbmdFbGVtZW50IHx8IHRoaXMuX2N1cnJlbnRFbGVtZW50O1xuXHQgICAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VQcm9wcyhcblx0ICAgICAgICBlbGVtZW50LFxuXHQgICAgICAgIGFzc2lnbih7fSwgZWxlbWVudC5wcm9wcywgcGFydGlhbFByb3BzKVxuXHQgICAgICApO1xuXHQgICAgICBSZWFjdFVwZGF0ZXMuZW5xdWV1ZVVwZGF0ZSh0aGlzLCBjYWxsYmFjayk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQmFzZSBjb25zdHJ1Y3RvciBmb3IgYWxsIFJlYWN0IGNvbXBvbmVudHMuXG5cdCAgICAgKlxuXHQgICAgICogU3ViY2xhc3NlcyB0aGF0IG92ZXJyaWRlIHRoaXMgbWV0aG9kIHNob3VsZCBtYWtlIHN1cmUgdG8gaW52b2tlXG5cdCAgICAgKiBgUmVhY3RDb21wb25lbnQuTWl4aW4uY29uc3RydWN0LmNhbGwodGhpcywgLi4uKWAuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcblx0ICAgICAqIEBpbnRlcm5hbFxuXHQgICAgICovXG5cdCAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0ICAgICAgLy8gVGhpcyBpcyB0aGUgcHVibGljIGV4cG9zZWQgcHJvcHMgb2JqZWN0IGFmdGVyIGl0IGhhcyBiZWVuIHByb2Nlc3NlZFxuXHQgICAgICAvLyB3aXRoIGRlZmF1bHQgcHJvcHMuIFRoZSBlbGVtZW50J3MgcHJvcHMgcmVwcmVzZW50cyB0aGUgdHJ1ZSBpbnRlcm5hbFxuXHQgICAgICAvLyBzdGF0ZSBvZiB0aGUgcHJvcHMuXG5cdCAgICAgIHRoaXMucHJvcHMgPSBlbGVtZW50LnByb3BzO1xuXHQgICAgICAvLyBSZWNvcmQgdGhlIGNvbXBvbmVudCByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgdGhpcyBjb21wb25lbnQuXG5cdCAgICAgIC8vIFRoaXMgaXMgYWNjZXNzaWJsZSB0aHJvdWdoIHRoZSBlbGVtZW50IGJ1dCB3ZSBtYWludGFpbiBhbiBleHRyYVxuXHQgICAgICAvLyBmaWVsZCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIGRldnRvb2xzIGFuZCBhcyBhIHdheSB0byBtYWtlIGFuXG5cdCAgICAgIC8vIGluY3JlbWVudGFsIHVwZGF0ZS4gVE9ETzogQ29uc2lkZXIgZGVwcmVjYXRpbmcgdGhpcyBmaWVsZC5cblx0ICAgICAgdGhpcy5fb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcblx0XG5cdCAgICAgIC8vIEFsbCBjb21wb25lbnRzIHN0YXJ0IHVubW91bnRlZC5cblx0ICAgICAgdGhpcy5fbGlmZUN5Y2xlU3RhdGUgPSBDb21wb25lbnRMaWZlQ3ljbGUuVU5NT1VOVEVEO1xuXHRcblx0ICAgICAgLy8gU2VlIFJlYWN0VXBkYXRlcy5cblx0ICAgICAgdGhpcy5fcGVuZGluZ0NhbGxiYWNrcyA9IG51bGw7XG5cdFxuXHQgICAgICAvLyBXZSBrZWVwIHRoZSBvbGQgZWxlbWVudCBhbmQgYSByZWZlcmVuY2UgdG8gdGhlIHBlbmRpbmcgZWxlbWVudFxuXHQgICAgICAvLyB0byB0cmFjayB1cGRhdGVzLlxuXHQgICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IGVsZW1lbnQ7XG5cdCAgICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gbnVsbDtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBJbml0aWFsaXplcyB0aGUgY29tcG9uZW50LCByZW5kZXJzIG1hcmt1cCwgYW5kIHJlZ2lzdGVycyBldmVudCBsaXN0ZW5lcnMuXG5cdCAgICAgKlxuXHQgICAgICogTk9URTogVGhpcyBkb2VzIG5vdCBpbnNlcnQgYW55IG5vZGVzIGludG8gdGhlIERPTS5cblx0ICAgICAqXG5cdCAgICAgKiBTdWJjbGFzc2VzIHRoYXQgb3ZlcnJpZGUgdGhpcyBtZXRob2Qgc2hvdWxkIG1ha2Ugc3VyZSB0byBpbnZva2Vcblx0ICAgICAqIGBSZWFjdENvbXBvbmVudC5NaXhpbi5tb3VudENvbXBvbmVudC5jYWxsKHRoaXMsIC4uLilgLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG5cdCAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtb3VudERlcHRoIG51bWJlciBvZiBjb21wb25lbnRzIGluIHRoZSBvd25lciBoaWVyYXJjaHkuXG5cdCAgICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBSZW5kZXJlZCBtYXJrdXAgdG8gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NLlxuXHQgICAgICogQGludGVybmFsXG5cdCAgICAgKi9cblx0ICAgIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbihyb290SUQsIHRyYW5zYWN0aW9uLCBtb3VudERlcHRoKSB7XG5cdCAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgICAgIXRoaXMuaXNNb3VudGVkKCksXG5cdCAgICAgICAgJ21vdW50Q29tcG9uZW50KCVzLCAuLi4pOiBDYW4gb25seSBtb3VudCBhbiB1bm1vdW50ZWQgY29tcG9uZW50LiAnICtcblx0ICAgICAgICAnTWFrZSBzdXJlIHRvIGF2b2lkIHN0b3JpbmcgY29tcG9uZW50cyBiZXR3ZWVuIHJlbmRlcnMgb3IgcmV1c2luZyBhICcgK1xuXHQgICAgICAgICdzaW5nbGUgY29tcG9uZW50IGluc3RhbmNlIGluIG11bHRpcGxlIHBsYWNlcy4nLFxuXHQgICAgICAgIHJvb3RJRFxuXHQgICAgICApIDogaW52YXJpYW50KCF0aGlzLmlzTW91bnRlZCgpKSk7XG5cdCAgICAgIHZhciByZWYgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5yZWY7XG5cdCAgICAgIGlmIChyZWYgIT0gbnVsbCkge1xuXHQgICAgICAgIHZhciBvd25lciA9IHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcblx0ICAgICAgICBSZWFjdE93bmVyLmFkZENvbXBvbmVudEFzUmVmVG8odGhpcywgcmVmLCBvd25lcik7XG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy5fcm9vdE5vZGVJRCA9IHJvb3RJRDtcblx0ICAgICAgdGhpcy5fbGlmZUN5Y2xlU3RhdGUgPSBDb21wb25lbnRMaWZlQ3ljbGUuTU9VTlRFRDtcblx0ICAgICAgdGhpcy5fbW91bnREZXB0aCA9IG1vdW50RGVwdGg7XG5cdCAgICAgIC8vIEVmZmVjdGl2ZWx5OiByZXR1cm4gJyc7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogUmVsZWFzZXMgYW55IHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgYG1vdW50Q29tcG9uZW50YC5cblx0ICAgICAqXG5cdCAgICAgKiBOT1RFOiBUaGlzIGRvZXMgbm90IHJlbW92ZSBhbnkgbm9kZXMgZnJvbSB0aGUgRE9NLlxuXHQgICAgICpcblx0ICAgICAqIFN1YmNsYXNzZXMgdGhhdCBvdmVycmlkZSB0aGlzIG1ldGhvZCBzaG91bGQgbWFrZSBzdXJlIHRvIGludm9rZVxuXHQgICAgICogYFJlYWN0Q29tcG9uZW50Lk1peGluLnVubW91bnRDb21wb25lbnQuY2FsbCh0aGlzKWAuXG5cdCAgICAgKlxuXHQgICAgICogQGludGVybmFsXG5cdCAgICAgKi9cblx0ICAgIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICAgIHRoaXMuaXNNb3VudGVkKCksXG5cdCAgICAgICAgJ3VubW91bnRDb21wb25lbnQoKTogQ2FuIG9ubHkgdW5tb3VudCBhIG1vdW50ZWQgY29tcG9uZW50Lidcblx0ICAgICAgKSA6IGludmFyaWFudCh0aGlzLmlzTW91bnRlZCgpKSk7XG5cdCAgICAgIHZhciByZWYgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5yZWY7XG5cdCAgICAgIGlmIChyZWYgIT0gbnVsbCkge1xuXHQgICAgICAgIFJlYWN0T3duZXIucmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tKHRoaXMsIHJlZiwgdGhpcy5fb3duZXIpO1xuXHQgICAgICB9XG5cdCAgICAgIHVubW91bnRJREZyb21FbnZpcm9ubWVudCh0aGlzLl9yb290Tm9kZUlEKTtcblx0ICAgICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG5cdCAgICAgIHRoaXMuX2xpZmVDeWNsZVN0YXRlID0gQ29tcG9uZW50TGlmZUN5Y2xlLlVOTU9VTlRFRDtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBHaXZlbiBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNvbXBvbmVudCwgdXBkYXRlcyB0aGUgcmVuZGVyZWQgRE9NIG5vZGVzXG5cdCAgICAgKiBhcyBpZiB0aGF0IGluc3RhbmNlIHdhcyByZW5kZXJlZCBpbnN0ZWFkLlxuXHQgICAgICpcblx0ICAgICAqIFN1YmNsYXNzZXMgdGhhdCBvdmVycmlkZSB0aGlzIG1ldGhvZCBzaG91bGQgbWFrZSBzdXJlIHRvIGludm9rZVxuXHQgICAgICogYFJlYWN0Q29tcG9uZW50Lk1peGluLnJlY2VpdmVDb21wb25lbnQuY2FsbCh0aGlzLCAuLi4pYC5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dENvbXBvbmVudCBOZXh0IHNldCBvZiBwcm9wZXJ0aWVzLlxuXHQgICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuXHQgICAgICogQGludGVybmFsXG5cdCAgICAgKi9cblx0ICAgIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbikge1xuXHQgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICAgIHRoaXMuaXNNb3VudGVkKCksXG5cdCAgICAgICAgJ3JlY2VpdmVDb21wb25lbnQoLi4uKTogQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRlZCBjb21wb25lbnQuJ1xuXHQgICAgICApIDogaW52YXJpYW50KHRoaXMuaXNNb3VudGVkKCkpKTtcblx0ICAgICAgdGhpcy5fcGVuZGluZ0VsZW1lbnQgPSBuZXh0RWxlbWVudDtcblx0ICAgICAgdGhpcy5wZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkodHJhbnNhY3Rpb24pO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIElmIGBfcGVuZGluZ0VsZW1lbnRgIGlzIHNldCwgdXBkYXRlIHRoZSBjb21wb25lbnQuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuXHQgICAgICogQGludGVybmFsXG5cdCAgICAgKi9cblx0ICAgIHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeTogZnVuY3Rpb24odHJhbnNhY3Rpb24pIHtcblx0ICAgICAgaWYgKHRoaXMuX3BlbmRpbmdFbGVtZW50ID09IG51bGwpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHByZXZFbGVtZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQ7XG5cdCAgICAgIHZhciBuZXh0RWxlbWVudCA9IHRoaXMuX3BlbmRpbmdFbGVtZW50O1xuXHQgICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRFbGVtZW50O1xuXHQgICAgICB0aGlzLnByb3BzID0gbmV4dEVsZW1lbnQucHJvcHM7XG5cdCAgICAgIHRoaXMuX293bmVyID0gbmV4dEVsZW1lbnQuX293bmVyO1xuXHQgICAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IG51bGw7XG5cdCAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KHRyYW5zYWN0aW9uLCBwcmV2RWxlbWVudCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogVXBkYXRlcyB0aGUgY29tcG9uZW50J3MgY3VycmVudGx5IG1vdW50ZWQgcmVwcmVzZW50YXRpb24uXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuXHQgICAgICogQHBhcmFtIHtvYmplY3R9IHByZXZFbGVtZW50XG5cdCAgICAgKiBAaW50ZXJuYWxcblx0ICAgICAqL1xuXHQgICAgdXBkYXRlQ29tcG9uZW50OiBmdW5jdGlvbih0cmFuc2FjdGlvbiwgcHJldkVsZW1lbnQpIHtcblx0ICAgICAgdmFyIG5leHRFbGVtZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQ7XG5cdFxuXHQgICAgICAvLyBJZiBlaXRoZXIgdGhlIG93bmVyIG9yIGEgYHJlZmAgaGFzIGNoYW5nZWQsIG1ha2Ugc3VyZSB0aGUgbmV3ZXN0IG93bmVyXG5cdCAgICAgIC8vIGhhcyBzdG9yZWQgYSByZWZlcmVuY2UgdG8gYHRoaXNgLCBhbmQgdGhlIHByZXZpb3VzIG93bmVyIChpZiBkaWZmZXJlbnQpXG5cdCAgICAgIC8vIGhhcyBmb3Jnb3R0ZW4gdGhlIHJlZmVyZW5jZSB0byBgdGhpc2AuIFdlIHVzZSB0aGUgZWxlbWVudCBpbnN0ZWFkXG5cdCAgICAgIC8vIG9mIHRoZSBwdWJsaWMgdGhpcy5wcm9wcyBiZWNhdXNlIHRoZSBwb3N0IHByb2Nlc3NpbmcgY2Fubm90IGRldGVybWluZVxuXHQgICAgICAvLyBhIHJlZi4gVGhlIHJlZiBjb25jZXB0dWFsbHkgbGl2ZXMgb24gdGhlIGVsZW1lbnQuXG5cdFxuXHQgICAgICAvLyBUT0RPOiBTaG91bGQgdGhpcyBldmVuIGJlIHBvc3NpYmxlPyBUaGUgb3duZXIgY2Fubm90IGNoYW5nZSBiZWNhdXNlXG5cdCAgICAgIC8vIGl0J3MgZm9yYmlkZGVuIGJ5IHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50LiBUaGUgcmVmIGNhbiBjaGFuZ2Vcblx0ICAgICAgLy8gaWYgeW91IHN3YXAgdGhlIGtleXMgb2YgYnV0IG5vdCB0aGUgcmVmcy4gUmVjb25zaWRlciB3aGVyZSB0aGlzIGNoZWNrXG5cdCAgICAgIC8vIGlzIG1hZGUuIEl0IHByb2JhYmx5IGJlbG9uZ3Mgd2hlcmUgdGhlIGtleSBjaGVja2luZyBhbmRcblx0ICAgICAgLy8gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCBpcyBkb25lLlxuXHRcblx0ICAgICAgaWYgKG5leHRFbGVtZW50Ll9vd25lciAhPT0gcHJldkVsZW1lbnQuX293bmVyIHx8XG5cdCAgICAgICAgICBuZXh0RWxlbWVudC5yZWYgIT09IHByZXZFbGVtZW50LnJlZikge1xuXHQgICAgICAgIGlmIChwcmV2RWxlbWVudC5yZWYgIT0gbnVsbCkge1xuXHQgICAgICAgICAgUmVhY3RPd25lci5yZW1vdmVDb21wb25lbnRBc1JlZkZyb20oXG5cdCAgICAgICAgICAgIHRoaXMsIHByZXZFbGVtZW50LnJlZiwgcHJldkVsZW1lbnQuX293bmVyXG5cdCAgICAgICAgICApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBDb3JyZWN0LCBldmVuIGlmIHRoZSBvd25lciBpcyB0aGUgc2FtZSwgYW5kIG9ubHkgdGhlIHJlZiBoYXMgY2hhbmdlZC5cblx0ICAgICAgICBpZiAobmV4dEVsZW1lbnQucmVmICE9IG51bGwpIHtcblx0ICAgICAgICAgIFJlYWN0T3duZXIuYWRkQ29tcG9uZW50QXNSZWZUbyhcblx0ICAgICAgICAgICAgdGhpcyxcblx0ICAgICAgICAgICAgbmV4dEVsZW1lbnQucmVmLFxuXHQgICAgICAgICAgICBuZXh0RWxlbWVudC5fb3duZXJcblx0ICAgICAgICAgICk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogTW91bnRzIHRoaXMgY29tcG9uZW50IGFuZCBpbnNlcnRzIGl0IGludG8gdGhlIERPTS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIERPTSBJRCBvZiB0aGUgcm9vdCBub2RlLlxuXHQgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdG8gbW91bnQgaW50by5cblx0ICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmV1c2VNYXJrdXAgSWYgdHJ1ZSwgZG8gbm90IGluc2VydCBtYXJrdXBcblx0ICAgICAqIEBmaW5hbFxuXHQgICAgICogQGludGVybmFsXG5cdCAgICAgKiBAc2VlIHtSZWFjdE1vdW50LnJlbmRlcn1cblx0ICAgICAqL1xuXHQgICAgbW91bnRDb21wb25lbnRJbnRvTm9kZTogZnVuY3Rpb24ocm9vdElELCBjb250YWluZXIsIHNob3VsZFJldXNlTWFya3VwKSB7XG5cdCAgICAgIHZhciB0cmFuc2FjdGlvbiA9IFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmdldFBvb2xlZCgpO1xuXHQgICAgICB0cmFuc2FjdGlvbi5wZXJmb3JtKFxuXHQgICAgICAgIHRoaXMuX21vdW50Q29tcG9uZW50SW50b05vZGUsXG5cdCAgICAgICAgdGhpcyxcblx0ICAgICAgICByb290SUQsXG5cdCAgICAgICAgY29udGFpbmVyLFxuXHQgICAgICAgIHRyYW5zYWN0aW9uLFxuXHQgICAgICAgIHNob3VsZFJldXNlTWFya3VwXG5cdCAgICAgICk7XG5cdCAgICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG5cdCAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byBtb3VudCBpbnRvLlxuXHQgICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuXHQgICAgICogQHBhcmFtIHtib29sZWFufSBzaG91bGRSZXVzZU1hcmt1cCBJZiB0cnVlLCBkbyBub3QgaW5zZXJ0IG1hcmt1cFxuXHQgICAgICogQGZpbmFsXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfbW91bnRDb21wb25lbnRJbnRvTm9kZTogZnVuY3Rpb24oXG5cdCAgICAgICAgcm9vdElELFxuXHQgICAgICAgIGNvbnRhaW5lcixcblx0ICAgICAgICB0cmFuc2FjdGlvbixcblx0ICAgICAgICBzaG91bGRSZXVzZU1hcmt1cCkge1xuXHQgICAgICB2YXIgbWFya3VwID0gdGhpcy5tb3VudENvbXBvbmVudChyb290SUQsIHRyYW5zYWN0aW9uLCAwKTtcblx0ICAgICAgbW91bnRJbWFnZUludG9Ob2RlKG1hcmt1cCwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQ2hlY2tzIGlmIHRoaXMgY29tcG9uZW50IGlzIG93bmVkIGJ5IHRoZSBzdXBwbGllZCBgb3duZXJgIGNvbXBvbmVudC5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBvd25lciBDb21wb25lbnQgdG8gY2hlY2suXG5cdCAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvd25lcnNgIG93bnMgdGhpcyBjb21wb25lbnQuXG5cdCAgICAgKiBAZmluYWxcblx0ICAgICAqIEBpbnRlcm5hbFxuXHQgICAgICovXG5cdCAgICBpc093bmVkQnk6IGZ1bmN0aW9uKG93bmVyKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9vd25lciA9PT0gb3duZXI7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogR2V0cyBhbm90aGVyIGNvbXBvbmVudCwgdGhhdCBzaGFyZXMgdGhlIHNhbWUgb3duZXIgYXMgdGhpcyBvbmUsIGJ5IHJlZi5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIG9mIGEgc2libGluZyBDb21wb25lbnQuXG5cdCAgICAgKiBAcmV0dXJuIHs/UmVhY3RDb21wb25lbnR9IHRoZSBhY3R1YWwgc2libGluZyBDb21wb25lbnQuXG5cdCAgICAgKiBAZmluYWxcblx0ICAgICAqIEBpbnRlcm5hbFxuXHQgICAgICovXG5cdCAgICBnZXRTaWJsaW5nQnlSZWY6IGZ1bmN0aW9uKHJlZikge1xuXHQgICAgICB2YXIgb3duZXIgPSB0aGlzLl9vd25lcjtcblx0ICAgICAgaWYgKCFvd25lciB8fCAhb3duZXIucmVmcykge1xuXHQgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBvd25lci5yZWZzW3JlZl07XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudDtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDI0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJbnN0YW5jZUhhbmRsZXNcblx0ICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBSZWFjdFJvb3RJbmRleCA9IF9fd2VicGFja19yZXF1aXJlX18oNzQpO1xuXHRcblx0dmFyIGludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgU0VQQVJBVE9SID0gJy4nO1xuXHR2YXIgU0VQQVJBVE9SX0xFTkdUSCA9IFNFUEFSQVRPUi5sZW5ndGg7XG5cdFxuXHQvKipcblx0ICogTWF4aW11bSBkZXB0aCBvZiB0cmF2ZXJzYWxzIGJlZm9yZSB3ZSBjb25zaWRlciB0aGUgcG9zc2liaWxpdHkgb2YgYSBiYWQgSUQuXG5cdCAqL1xuXHR2YXIgTUFYX1RSRUVfREVQVEggPSAxMDA7XG5cdFxuXHQvKipcblx0ICogQ3JlYXRlcyBhIERPTSBJRCBwcmVmaXggdG8gdXNlIHdoZW4gbW91bnRpbmcgUmVhY3QgY29tcG9uZW50cy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEEgdW5pcXVlIGludGVnZXJcblx0ICogQHJldHVybiB7c3RyaW5nfSBSZWFjdCByb290IElELlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdGZ1bmN0aW9uIGdldFJlYWN0Um9vdElEU3RyaW5nKGluZGV4KSB7XG5cdCAgcmV0dXJuIFNFUEFSQVRPUiArIGluZGV4LnRvU3RyaW5nKDM2KTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIENoZWNrcyBpZiBhIGNoYXJhY3RlciBpbiB0aGUgc3VwcGxpZWQgSUQgaXMgYSBzZXBhcmF0b3Igb3IgdGhlIGVuZC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IGlkIEEgUmVhY3QgRE9NIElELlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggb2YgdGhlIGNoYXJhY3RlciB0byBjaGVjay5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY2hhcmFjdGVyIGlzIGEgc2VwYXJhdG9yIG9yIGVuZCBvZiB0aGUgSUQuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBpc0JvdW5kYXJ5KGlkLCBpbmRleCkge1xuXHQgIHJldHVybiBpZC5jaGFyQXQoaW5kZXgpID09PSBTRVBBUkFUT1IgfHwgaW5kZXggPT09IGlkLmxlbmd0aDtcblx0fVxuXHRcblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGUgc3VwcGxpZWQgc3RyaW5nIGlzIGEgdmFsaWQgUmVhY3QgRE9NIElELlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaWQgQSBSZWFjdCBET00gSUQsIG1heWJlLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBzdHJpbmcgaXMgYSB2YWxpZCBSZWFjdCBET00gSUQuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBpc1ZhbGlkSUQoaWQpIHtcblx0ICByZXR1cm4gaWQgPT09ICcnIHx8IChcblx0ICAgIGlkLmNoYXJBdCgwKSA9PT0gU0VQQVJBVE9SICYmIGlkLmNoYXJBdChpZC5sZW5ndGggLSAxKSAhPT0gU0VQQVJBVE9SXG5cdCAgKTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGUgZmlyc3QgSUQgaXMgYW4gYW5jZXN0b3Igb2Ygb3IgZXF1YWwgdG8gdGhlIHNlY29uZCBJRC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IGFuY2VzdG9ySURcblx0ICogQHBhcmFtIHtzdHJpbmd9IGRlc2NlbmRhbnRJRFxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBhbmNlc3RvcklEYCBpcyBhbiBhbmNlc3RvciBvZiBgZGVzY2VuZGFudElEYC5cblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRmdW5jdGlvbiBpc0FuY2VzdG9ySURPZihhbmNlc3RvcklELCBkZXNjZW5kYW50SUQpIHtcblx0ICByZXR1cm4gKFxuXHQgICAgZGVzY2VuZGFudElELmluZGV4T2YoYW5jZXN0b3JJRCkgPT09IDAgJiZcblx0ICAgIGlzQm91bmRhcnkoZGVzY2VuZGFudElELCBhbmNlc3RvcklELmxlbmd0aClcblx0ICApO1xuXHR9XG5cdFxuXHQvKipcblx0ICogR2V0cyB0aGUgcGFyZW50IElEIG9mIHRoZSBzdXBwbGllZCBSZWFjdCBET00gSUQsIGBpZGAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiBhIGNvbXBvbmVudC5cblx0ICogQHJldHVybiB7c3RyaW5nfSBJRCBvZiB0aGUgcGFyZW50LCBvciBhbiBlbXB0eSBzdHJpbmcuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRQYXJlbnRJRChpZCkge1xuXHQgIHJldHVybiBpZCA/IGlkLnN1YnN0cigwLCBpZC5sYXN0SW5kZXhPZihTRVBBUkFUT1IpKSA6ICcnO1xuXHR9XG5cdFxuXHQvKipcblx0ICogR2V0cyB0aGUgbmV4dCBET00gSUQgb24gdGhlIHRyZWUgcGF0aCBmcm9tIHRoZSBzdXBwbGllZCBgYW5jZXN0b3JJRGAgdG8gdGhlXG5cdCAqIHN1cHBsaWVkIGBkZXN0aW5hdGlvbklEYC4gSWYgdGhleSBhcmUgZXF1YWwsIHRoZSBJRCBpcyByZXR1cm5lZC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IGFuY2VzdG9ySUQgSUQgb2YgYW4gYW5jZXN0b3Igbm9kZSBvZiBgZGVzdGluYXRpb25JRGAuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBkZXN0aW5hdGlvbklEIElEIG9mIHRoZSBkZXN0aW5hdGlvbiBub2RlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IE5leHQgSUQgb24gdGhlIHBhdGggZnJvbSBgYW5jZXN0b3JJRGAgdG8gYGRlc3RpbmF0aW9uSURgLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0TmV4dERlc2NlbmRhbnRJRChhbmNlc3RvcklELCBkZXN0aW5hdGlvbklEKSB7XG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgIGlzVmFsaWRJRChhbmNlc3RvcklEKSAmJiBpc1ZhbGlkSUQoZGVzdGluYXRpb25JRCksXG5cdCAgICAnZ2V0TmV4dERlc2NlbmRhbnRJRCglcywgJXMpOiBSZWNlaXZlZCBhbiBpbnZhbGlkIFJlYWN0IERPTSBJRC4nLFxuXHQgICAgYW5jZXN0b3JJRCxcblx0ICAgIGRlc3RpbmF0aW9uSURcblx0ICApIDogaW52YXJpYW50KGlzVmFsaWRJRChhbmNlc3RvcklEKSAmJiBpc1ZhbGlkSUQoZGVzdGluYXRpb25JRCkpKTtcblx0ICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgaXNBbmNlc3RvcklET2YoYW5jZXN0b3JJRCwgZGVzdGluYXRpb25JRCksXG5cdCAgICAnZ2V0TmV4dERlc2NlbmRhbnRJRCguLi4pOiBSZWFjdCBoYXMgbWFkZSBhbiBpbnZhbGlkIGFzc3VtcHRpb24gYWJvdXQgJyArXG5cdCAgICAndGhlIERPTSBoaWVyYXJjaHkuIEV4cGVjdGVkIGAlc2AgdG8gYmUgYW4gYW5jZXN0b3Igb2YgYCVzYC4nLFxuXHQgICAgYW5jZXN0b3JJRCxcblx0ICAgIGRlc3RpbmF0aW9uSURcblx0ICApIDogaW52YXJpYW50KGlzQW5jZXN0b3JJRE9mKGFuY2VzdG9ySUQsIGRlc3RpbmF0aW9uSUQpKSk7XG5cdCAgaWYgKGFuY2VzdG9ySUQgPT09IGRlc3RpbmF0aW9uSUQpIHtcblx0ICAgIHJldHVybiBhbmNlc3RvcklEO1xuXHQgIH1cblx0ICAvLyBTa2lwIG92ZXIgdGhlIGFuY2VzdG9yIGFuZCB0aGUgaW1tZWRpYXRlIHNlcGFyYXRvci4gVHJhdmVyc2UgdW50aWwgd2UgaGl0XG5cdCAgLy8gYW5vdGhlciBzZXBhcmF0b3Igb3Igd2UgcmVhY2ggdGhlIGVuZCBvZiBgZGVzdGluYXRpb25JRGAuXG5cdCAgdmFyIHN0YXJ0ID0gYW5jZXN0b3JJRC5sZW5ndGggKyBTRVBBUkFUT1JfTEVOR1RIO1xuXHQgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGRlc3RpbmF0aW9uSUQubGVuZ3RoOyBpKyspIHtcblx0ICAgIGlmIChpc0JvdW5kYXJ5KGRlc3RpbmF0aW9uSUQsIGkpKSB7XG5cdCAgICAgIGJyZWFrO1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gZGVzdGluYXRpb25JRC5zdWJzdHIoMCwgaSk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBuZWFyZXN0IGNvbW1vbiBhbmNlc3RvciBJRCBvZiB0d28gSURzLlxuXHQgKlxuXHQgKiBVc2luZyB0aGlzIElEIHNjaGVtZSwgdGhlIG5lYXJlc3QgY29tbW9uIGFuY2VzdG9yIElEIGlzIHRoZSBsb25nZXN0IGNvbW1vblxuXHQgKiBwcmVmaXggb2YgdGhlIHR3byBJRHMgdGhhdCBpbW1lZGlhdGVseSBwcmVjZWRlZCBhIFwibWFya2VyXCIgaW4gYm90aCBzdHJpbmdzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gb25lSURcblx0ICogQHBhcmFtIHtzdHJpbmd9IHR3b0lEXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gTmVhcmVzdCBjb21tb24gYW5jZXN0b3IgSUQsIG9yIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm9uZS5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGdldEZpcnN0Q29tbW9uQW5jZXN0b3JJRChvbmVJRCwgdHdvSUQpIHtcblx0ICB2YXIgbWluTGVuZ3RoID0gTWF0aC5taW4ob25lSUQubGVuZ3RoLCB0d29JRC5sZW5ndGgpO1xuXHQgIGlmIChtaW5MZW5ndGggPT09IDApIHtcblx0ICAgIHJldHVybiAnJztcblx0ICB9XG5cdCAgdmFyIGxhc3RDb21tb25NYXJrZXJJbmRleCA9IDA7XG5cdCAgLy8gVXNlIGA8PWAgdG8gdHJhdmVyc2UgdW50aWwgdGhlIFwiRU9MXCIgb2YgdGhlIHNob3J0ZXIgc3RyaW5nLlxuXHQgIGZvciAodmFyIGkgPSAwOyBpIDw9IG1pbkxlbmd0aDsgaSsrKSB7XG5cdCAgICBpZiAoaXNCb3VuZGFyeShvbmVJRCwgaSkgJiYgaXNCb3VuZGFyeSh0d29JRCwgaSkpIHtcblx0ICAgICAgbGFzdENvbW1vbk1hcmtlckluZGV4ID0gaTtcblx0ICAgIH0gZWxzZSBpZiAob25lSUQuY2hhckF0KGkpICE9PSB0d29JRC5jaGFyQXQoaSkpIHtcblx0ICAgICAgYnJlYWs7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHZhciBsb25nZXN0Q29tbW9uSUQgPSBvbmVJRC5zdWJzdHIoMCwgbGFzdENvbW1vbk1hcmtlckluZGV4KTtcblx0ICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgaXNWYWxpZElEKGxvbmdlc3RDb21tb25JRCksXG5cdCAgICAnZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEKCVzLCAlcyk6IEV4cGVjdGVkIGEgdmFsaWQgUmVhY3QgRE9NIElEOiAlcycsXG5cdCAgICBvbmVJRCxcblx0ICAgIHR3b0lELFxuXHQgICAgbG9uZ2VzdENvbW1vbklEXG5cdCAgKSA6IGludmFyaWFudChpc1ZhbGlkSUQobG9uZ2VzdENvbW1vbklEKSkpO1xuXHQgIHJldHVybiBsb25nZXN0Q29tbW9uSUQ7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBUcmF2ZXJzZXMgdGhlIHBhcmVudCBwYXRoIGJldHdlZW4gdHdvIElEcyAoZWl0aGVyIHVwIG9yIGRvd24pLiBUaGUgSURzIG11c3Rcblx0ICogbm90IGJlIHRoZSBzYW1lLCBhbmQgdGhlcmUgbXVzdCBleGlzdCBhIHBhcmVudCBwYXRoIGJldHdlZW4gdGhlbS4gSWYgdGhlXG5cdCAqIGNhbGxiYWNrIHJldHVybnMgYGZhbHNlYCwgdHJhdmVyc2FsIGlzIHN0b3BwZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gc3RhcnQgSUQgYXQgd2hpY2ggdG8gc3RhcnQgdHJhdmVyc2FsLlxuXHQgKiBAcGFyYW0gez9zdHJpbmd9IHN0b3AgSUQgYXQgd2hpY2ggdG8gZW5kIHRyYXZlcnNhbC5cblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gY2IgQ2FsbGJhY2sgdG8gaW52b2tlIGVhY2ggSUQgd2l0aC5cblx0ICogQHBhcmFtIHs/Ym9vbGVhbn0gc2tpcEZpcnN0IFdoZXRoZXIgb3Igbm90IHRvIHNraXAgdGhlIGZpcnN0IG5vZGUuXG5cdCAqIEBwYXJhbSB7P2Jvb2xlYW59IHNraXBMYXN0IFdoZXRoZXIgb3Igbm90IHRvIHNraXAgdGhlIGxhc3Qgbm9kZS5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIHRyYXZlcnNlUGFyZW50UGF0aChzdGFydCwgc3RvcCwgY2IsIGFyZywgc2tpcEZpcnN0LCBza2lwTGFzdCkge1xuXHQgIHN0YXJ0ID0gc3RhcnQgfHwgJyc7XG5cdCAgc3RvcCA9IHN0b3AgfHwgJyc7XG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgIHN0YXJ0ICE9PSBzdG9wLFxuXHQgICAgJ3RyYXZlcnNlUGFyZW50UGF0aCguLi4pOiBDYW5ub3QgdHJhdmVyc2UgZnJvbSBhbmQgdG8gdGhlIHNhbWUgSUQsIGAlc2AuJyxcblx0ICAgIHN0YXJ0XG5cdCAgKSA6IGludmFyaWFudChzdGFydCAhPT0gc3RvcCkpO1xuXHQgIHZhciB0cmF2ZXJzZVVwID0gaXNBbmNlc3RvcklET2Yoc3RvcCwgc3RhcnQpO1xuXHQgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICB0cmF2ZXJzZVVwIHx8IGlzQW5jZXN0b3JJRE9mKHN0YXJ0LCBzdG9wKSxcblx0ICAgICd0cmF2ZXJzZVBhcmVudFBhdGgoJXMsICVzLCAuLi4pOiBDYW5ub3QgdHJhdmVyc2UgZnJvbSB0d28gSURzIHRoYXQgZG8gJyArXG5cdCAgICAnbm90IGhhdmUgYSBwYXJlbnQgcGF0aC4nLFxuXHQgICAgc3RhcnQsXG5cdCAgICBzdG9wXG5cdCAgKSA6IGludmFyaWFudCh0cmF2ZXJzZVVwIHx8IGlzQW5jZXN0b3JJRE9mKHN0YXJ0LCBzdG9wKSkpO1xuXHQgIC8vIFRyYXZlcnNlIGZyb20gYHN0YXJ0YCB0byBgc3RvcGAgb25lIGRlcHRoIGF0IGEgdGltZS5cblx0ICB2YXIgZGVwdGggPSAwO1xuXHQgIHZhciB0cmF2ZXJzZSA9IHRyYXZlcnNlVXAgPyBnZXRQYXJlbnRJRCA6IGdldE5leHREZXNjZW5kYW50SUQ7XG5cdCAgZm9yICh2YXIgaWQgPSBzdGFydDsgLyogdW50aWwgYnJlYWsgKi87IGlkID0gdHJhdmVyc2UoaWQsIHN0b3ApKSB7XG5cdCAgICB2YXIgcmV0O1xuXHQgICAgaWYgKCghc2tpcEZpcnN0IHx8IGlkICE9PSBzdGFydCkgJiYgKCFza2lwTGFzdCB8fCBpZCAhPT0gc3RvcCkpIHtcblx0ICAgICAgcmV0ID0gY2IoaWQsIHRyYXZlcnNlVXAsIGFyZyk7XG5cdCAgICB9XG5cdCAgICBpZiAocmV0ID09PSBmYWxzZSB8fCBpZCA9PT0gc3RvcCkge1xuXHQgICAgICAvLyBPbmx5IGJyZWFrIC8vYWZ0ZXIvLyB2aXNpdGluZyBgc3RvcGAuXG5cdCAgICAgIGJyZWFrO1xuXHQgICAgfVxuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgZGVwdGgrKyA8IE1BWF9UUkVFX0RFUFRILFxuXHQgICAgICAndHJhdmVyc2VQYXJlbnRQYXRoKCVzLCAlcywgLi4uKTogRGV0ZWN0ZWQgYW4gaW5maW5pdGUgbG9vcCB3aGlsZSAnICtcblx0ICAgICAgJ3RyYXZlcnNpbmcgdGhlIFJlYWN0IERPTSBJRCB0cmVlLiBUaGlzIG1heSBiZSBkdWUgdG8gbWFsZm9ybWVkIElEczogJXMnLFxuXHQgICAgICBzdGFydCwgc3RvcFxuXHQgICAgKSA6IGludmFyaWFudChkZXB0aCsrIDwgTUFYX1RSRUVfREVQVEgpKTtcblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBNYW5hZ2VzIHRoZSBJRHMgYXNzaWduZWQgdG8gRE9NIHJlcHJlc2VudGF0aW9ucyBvZiBSZWFjdCBjb21wb25lbnRzLiBUaGlzXG5cdCAqIHVzZXMgYSBzcGVjaWZpYyBzY2hlbWUgaW4gb3JkZXIgdG8gdHJhdmVyc2UgdGhlIERPTSBlZmZpY2llbnRseSAoZS5nLiBpblxuXHQgKiBvcmRlciB0byBzaW11bGF0ZSBldmVudHMpLlxuXHQgKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdHZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHtcblx0XG5cdCAgLyoqXG5cdCAgICogQ29uc3RydWN0cyBhIFJlYWN0IHJvb3QgSURcblx0ICAgKiBAcmV0dXJuIHtzdHJpbmd9IEEgUmVhY3Qgcm9vdCBJRC5cblx0ICAgKi9cblx0ICBjcmVhdGVSZWFjdFJvb3RJRDogZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gZ2V0UmVhY3RSb290SURTdHJpbmcoUmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXgoKSk7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQ29uc3RydWN0cyBhIFJlYWN0IElEIGJ5IGpvaW5pbmcgYSByb290IElEIHdpdGggYSBuYW1lLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBSb290IElEIG9mIGEgcGFyZW50IGNvbXBvbmVudC5cblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBIGNvbXBvbmVudCdzIG5hbWUgKGFzIGZsYXR0ZW5lZCBjaGlsZHJlbikuXG5cdCAgICogQHJldHVybiB7c3RyaW5nfSBBIFJlYWN0IElELlxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIGNyZWF0ZVJlYWN0SUQ6IGZ1bmN0aW9uKHJvb3RJRCwgbmFtZSkge1xuXHQgICAgcmV0dXJuIHJvb3RJRCArIG5hbWU7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogR2V0cyB0aGUgRE9NIElEIG9mIHRoZSBSZWFjdCBjb21wb25lbnQgdGhhdCBpcyB0aGUgcm9vdCBvZiB0aGUgdHJlZSB0aGF0XG5cdCAgICogY29udGFpbnMgdGhlIFJlYWN0IGNvbXBvbmVudCB3aXRoIHRoZSBzdXBwbGllZCBET00gSUQuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgRE9NIElEIG9mIGEgUmVhY3QgY29tcG9uZW50LlxuXHQgICAqIEByZXR1cm4gez9zdHJpbmd9IERPTSBJRCBvZiB0aGUgUmVhY3QgY29tcG9uZW50IHRoYXQgaXMgdGhlIHJvb3QuXG5cdCAgICogQGludGVybmFsXG5cdCAgICovXG5cdCAgZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEOiBmdW5jdGlvbihpZCkge1xuXHQgICAgaWYgKGlkICYmIGlkLmNoYXJBdCgwKSA9PT0gU0VQQVJBVE9SICYmIGlkLmxlbmd0aCA+IDEpIHtcblx0ICAgICAgdmFyIGluZGV4ID0gaWQuaW5kZXhPZihTRVBBUkFUT1IsIDEpO1xuXHQgICAgICByZXR1cm4gaW5kZXggPiAtMSA/IGlkLnN1YnN0cigwLCBpbmRleCkgOiBpZDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBudWxsO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIFRyYXZlcnNlcyB0aGUgSUQgaGllcmFyY2h5IGFuZCBpbnZva2VzIHRoZSBzdXBwbGllZCBgY2JgIG9uIGFueSBJRHMgdGhhdFxuXHQgICAqIHNob3VsZCB3b3VsZCByZWNlaXZlIGEgYG1vdXNlRW50ZXJgIG9yIGBtb3VzZUxlYXZlYCBldmVudC5cblx0ICAgKlxuXHQgICAqIE5PVEU6IERvZXMgbm90IGludm9rZSB0aGUgY2FsbGJhY2sgb24gdGhlIG5lYXJlc3QgY29tbW9uIGFuY2VzdG9yIGJlY2F1c2Vcblx0ICAgKiBub3RoaW5nIFwiZW50ZXJlZFwiIG9yIFwibGVmdFwiIHRoYXQgZWxlbWVudC5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBsZWF2ZUlEIElEIGJlaW5nIGxlZnQuXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IGVudGVySUQgSUQgYmVpbmcgZW50ZXJlZC5cblx0ICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiBDYWxsYmFjayB0byBpbnZva2Ugb24gZWFjaCBlbnRlcmVkL2xlZnQgSUQuXG5cdCAgICogQHBhcmFtIHsqfSB1cEFyZyBBcmd1bWVudCB0byBpbnZva2UgdGhlIGNhbGxiYWNrIHdpdGggb24gbGVmdCBJRHMuXG5cdCAgICogQHBhcmFtIHsqfSBkb3duQXJnIEFyZ3VtZW50IHRvIGludm9rZSB0aGUgY2FsbGJhY2sgd2l0aCBvbiBlbnRlcmVkIElEcy5cblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKi9cblx0ICB0cmF2ZXJzZUVudGVyTGVhdmU6IGZ1bmN0aW9uKGxlYXZlSUQsIGVudGVySUQsIGNiLCB1cEFyZywgZG93bkFyZykge1xuXHQgICAgdmFyIGFuY2VzdG9ySUQgPSBnZXRGaXJzdENvbW1vbkFuY2VzdG9ySUQobGVhdmVJRCwgZW50ZXJJRCk7XG5cdCAgICBpZiAoYW5jZXN0b3JJRCAhPT0gbGVhdmVJRCkge1xuXHQgICAgICB0cmF2ZXJzZVBhcmVudFBhdGgobGVhdmVJRCwgYW5jZXN0b3JJRCwgY2IsIHVwQXJnLCBmYWxzZSwgdHJ1ZSk7XG5cdCAgICB9XG5cdCAgICBpZiAoYW5jZXN0b3JJRCAhPT0gZW50ZXJJRCkge1xuXHQgICAgICB0cmF2ZXJzZVBhcmVudFBhdGgoYW5jZXN0b3JJRCwgZW50ZXJJRCwgY2IsIGRvd25BcmcsIHRydWUsIGZhbHNlKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBTaW11bGF0ZXMgdGhlIHRyYXZlcnNhbCBvZiBhIHR3by1waGFzZSwgY2FwdHVyZS9idWJibGUgZXZlbnQgZGlzcGF0Y2guXG5cdCAgICpcblx0ICAgKiBOT1RFOiBUaGlzIHRyYXZlcnNhbCBoYXBwZW5zIG9uIElEcyB3aXRob3V0IHRvdWNoaW5nIHRoZSBET00uXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0SUQgSUQgb2YgdGhlIHRhcmdldCBub2RlLlxuXHQgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIHRvIGludm9rZS5cblx0ICAgKiBAcGFyYW0geyp9IGFyZyBBcmd1bWVudCB0byBpbnZva2UgdGhlIGNhbGxiYWNrIHdpdGguXG5cdCAgICogQGludGVybmFsXG5cdCAgICovXG5cdCAgdHJhdmVyc2VUd29QaGFzZTogZnVuY3Rpb24odGFyZ2V0SUQsIGNiLCBhcmcpIHtcblx0ICAgIGlmICh0YXJnZXRJRCkge1xuXHQgICAgICB0cmF2ZXJzZVBhcmVudFBhdGgoJycsIHRhcmdldElELCBjYiwgYXJnLCB0cnVlLCBmYWxzZSk7XG5cdCAgICAgIHRyYXZlcnNlUGFyZW50UGF0aCh0YXJnZXRJRCwgJycsIGNiLCBhcmcsIGZhbHNlLCB0cnVlKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBUcmF2ZXJzZSBhIG5vZGUgSUQsIGNhbGxpbmcgdGhlIHN1cHBsaWVkIGBjYmAgZm9yIGVhY2ggYW5jZXN0b3IgSUQuIEZvclxuXHQgICAqIGV4YW1wbGUsIHBhc3NpbmcgYC4wLiRyb3ctMC4xYCB3b3VsZCByZXN1bHQgaW4gYGNiYCBnZXR0aW5nIGNhbGxlZFxuXHQgICAqIHdpdGggYC4wYCwgYC4wLiRyb3ctMGAsIGFuZCBgLjAuJHJvdy0wLjFgLlxuXHQgICAqXG5cdCAgICogTk9URTogVGhpcyB0cmF2ZXJzYWwgaGFwcGVucyBvbiBJRHMgd2l0aG91dCB0b3VjaGluZyB0aGUgRE9NLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldElEIElEIG9mIHRoZSB0YXJnZXQgbm9kZS5cblx0ICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiBDYWxsYmFjayB0byBpbnZva2UuXG5cdCAgICogQHBhcmFtIHsqfSBhcmcgQXJndW1lbnQgdG8gaW52b2tlIHRoZSBjYWxsYmFjayB3aXRoLlxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIHRyYXZlcnNlQW5jZXN0b3JzOiBmdW5jdGlvbih0YXJnZXRJRCwgY2IsIGFyZykge1xuXHQgICAgdHJhdmVyc2VQYXJlbnRQYXRoKCcnLCB0YXJnZXRJRCwgY2IsIGFyZywgdHJ1ZSwgZmFsc2UpO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIEV4cG9zZWQgZm9yIHVuaXQgdGVzdGluZy5cblx0ICAgKiBAcHJpdmF0ZVxuXHQgICAqL1xuXHQgIF9nZXRGaXJzdENvbW1vbkFuY2VzdG9ySUQ6IGdldEZpcnN0Q29tbW9uQW5jZXN0b3JJRCxcblx0XG5cdCAgLyoqXG5cdCAgICogRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLlxuXHQgICAqIEBwcml2YXRlXG5cdCAgICovXG5cdCAgX2dldE5leHREZXNjZW5kYW50SUQ6IGdldE5leHREZXNjZW5kYW50SUQsXG5cdFxuXHQgIGlzQW5jZXN0b3JJRE9mOiBpc0FuY2VzdG9ySURPZixcblx0XG5cdCAgU0VQQVJBVE9SOiBTRVBBUkFUT1Jcblx0XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogMjUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBrZXlNaXJyb3Jcblx0ICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYW4gZW51bWVyYXRpb24gd2l0aCBrZXlzIGVxdWFsIHRvIHRoZWlyIHZhbHVlLlxuXHQgKlxuXHQgKiBGb3IgZXhhbXBsZTpcblx0ICpcblx0ICogICB2YXIgQ09MT1JTID0ga2V5TWlycm9yKHtibHVlOiBudWxsLCByZWQ6IG51bGx9KTtcblx0ICogICB2YXIgbXlDb2xvciA9IENPTE9SUy5ibHVlO1xuXHQgKiAgIHZhciBpc0NvbG9yVmFsaWQgPSAhIUNPTE9SU1tteUNvbG9yXTtcblx0ICpcblx0ICogVGhlIGxhc3QgbGluZSBjb3VsZCBub3QgYmUgcGVyZm9ybWVkIGlmIHRoZSB2YWx1ZXMgb2YgdGhlIGdlbmVyYXRlZCBlbnVtIHdlcmVcblx0ICogbm90IGVxdWFsIHRvIHRoZWlyIGtleXMuXG5cdCAqXG5cdCAqICAgSW5wdXQ6ICB7a2V5MTogdmFsMSwga2V5MjogdmFsMn1cblx0ICogICBPdXRwdXQ6IHtrZXkxOiBrZXkxLCBrZXkyOiBrZXkyfVxuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gb2JqXG5cdCAqIEByZXR1cm4ge29iamVjdH1cblx0ICovXG5cdHZhciBrZXlNaXJyb3IgPSBmdW5jdGlvbihvYmopIHtcblx0ICB2YXIgcmV0ID0ge307XG5cdCAgdmFyIGtleTtcblx0ICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgb2JqIGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KG9iaiksXG5cdCAgICAna2V5TWlycm9yKC4uLik6IEFyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0Lidcblx0ICApIDogaW52YXJpYW50KG9iaiBpbnN0YW5jZW9mIE9iamVjdCAmJiAhQXJyYXkuaXNBcnJheShvYmopKSk7XG5cdCAgZm9yIChrZXkgaW4gb2JqKSB7XG5cdCAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdCAgICAgIGNvbnRpbnVlO1xuXHQgICAgfVxuXHQgICAgcmV0W2tleV0gPSBrZXk7XG5cdCAgfVxuXHQgIHJldHVybiByZXQ7XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGtleU1pcnJvcjtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDI2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQbHVnaW5IdWJcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBFdmVudFBsdWdpblJlZ2lzdHJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Mik7XG5cdHZhciBFdmVudFBsdWdpblV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Myk7XG5cdFxuXHR2YXIgYWNjdW11bGF0ZUludG8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KTtcblx0dmFyIGZvckVhY2hBY2N1bXVsYXRlZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTEpO1xuXHR2YXIgaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdC8qKlxuXHQgKiBJbnRlcm5hbCBzdG9yZSBmb3IgZXZlbnQgbGlzdGVuZXJzXG5cdCAqL1xuXHR2YXIgbGlzdGVuZXJCYW5rID0ge307XG5cdFxuXHQvKipcblx0ICogSW50ZXJuYWwgcXVldWUgb2YgZXZlbnRzIHRoYXQgaGF2ZSBhY2N1bXVsYXRlZCB0aGVpciBkaXNwYXRjaGVzIGFuZCBhcmVcblx0ICogd2FpdGluZyB0byBoYXZlIHRoZWlyIGRpc3BhdGNoZXMgZXhlY3V0ZWQuXG5cdCAqL1xuXHR2YXIgZXZlbnRRdWV1ZSA9IG51bGw7XG5cdFxuXHQvKipcblx0ICogRGlzcGF0Y2hlcyBhbiBldmVudCBhbmQgcmVsZWFzZXMgaXQgYmFjayBpbnRvIHRoZSBwb29sLCB1bmxlc3MgcGVyc2lzdGVudC5cblx0ICpcblx0ICogQHBhcmFtIHs/b2JqZWN0fSBldmVudCBTeW50aGV0aWMgZXZlbnQgdG8gYmUgZGlzcGF0Y2hlZC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdHZhciBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UgPSBmdW5jdGlvbihldmVudCkge1xuXHQgIGlmIChldmVudCkge1xuXHQgICAgdmFyIGV4ZWN1dGVEaXNwYXRjaCA9IEV2ZW50UGx1Z2luVXRpbHMuZXhlY3V0ZURpc3BhdGNoO1xuXHQgICAgLy8gUGx1Z2lucyBjYW4gcHJvdmlkZSBjdXN0b20gYmVoYXZpb3Igd2hlbiBkaXNwYXRjaGluZyBldmVudHMuXG5cdCAgICB2YXIgUGx1Z2luTW9kdWxlID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5nZXRQbHVnaW5Nb2R1bGVGb3JFdmVudChldmVudCk7XG5cdCAgICBpZiAoUGx1Z2luTW9kdWxlICYmIFBsdWdpbk1vZHVsZS5leGVjdXRlRGlzcGF0Y2gpIHtcblx0ICAgICAgZXhlY3V0ZURpc3BhdGNoID0gUGx1Z2luTW9kdWxlLmV4ZWN1dGVEaXNwYXRjaDtcblx0ICAgIH1cblx0ICAgIEV2ZW50UGx1Z2luVXRpbHMuZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyKGV2ZW50LCBleGVjdXRlRGlzcGF0Y2gpO1xuXHRcblx0ICAgIGlmICghZXZlbnQuaXNQZXJzaXN0ZW50KCkpIHtcblx0ICAgICAgZXZlbnQuY29uc3RydWN0b3IucmVsZWFzZShldmVudCk7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIC0gYEluc3RhbmNlSGFuZGxlYDogW3JlcXVpcmVkXSBNb2R1bGUgdGhhdCBwZXJmb3JtcyBsb2dpY2FsIHRyYXZlcnNhbHMgb2YgRE9NXG5cdCAqICAgaGllcmFyY2h5IGdpdmVuIGlkcyBvZiB0aGUgbG9naWNhbCBET00gZWxlbWVudHMgaW52b2x2ZWQuXG5cdCAqL1xuXHR2YXIgSW5zdGFuY2VIYW5kbGUgPSBudWxsO1xuXHRcblx0ZnVuY3Rpb24gdmFsaWRhdGVJbnN0YW5jZUhhbmRsZSgpIHtcblx0ICB2YXIgaW52YWxpZCA9ICFJbnN0YW5jZUhhbmRsZXx8XG5cdCAgICAhSW5zdGFuY2VIYW5kbGUudHJhdmVyc2VUd29QaGFzZSB8fFxuXHQgICAgIUluc3RhbmNlSGFuZGxlLnRyYXZlcnNlRW50ZXJMZWF2ZTtcblx0ICBpZiAoaW52YWxpZCkge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKCdJbnN0YW5jZUhhbmRsZSBub3QgaW5qZWN0ZWQgYmVmb3JlIHVzZSEnKTtcblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBUaGlzIGlzIGEgdW5pZmllZCBpbnRlcmZhY2UgZm9yIGV2ZW50IHBsdWdpbnMgdG8gYmUgaW5zdGFsbGVkIGFuZCBjb25maWd1cmVkLlxuXHQgKlxuXHQgKiBFdmVudCBwbHVnaW5zIGNhbiBpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuXHQgKlxuXHQgKiAgIGBleHRyYWN0RXZlbnRzYCB7ZnVuY3Rpb24oc3RyaW5nLCBET01FdmVudFRhcmdldCwgc3RyaW5nLCBvYmplY3QpOiAqfVxuXHQgKiAgICAgUmVxdWlyZWQuIFdoZW4gYSB0b3AtbGV2ZWwgZXZlbnQgaXMgZmlyZWQsIHRoaXMgbWV0aG9kIGlzIGV4cGVjdGVkIHRvXG5cdCAqICAgICBleHRyYWN0IHN5bnRoZXRpYyBldmVudHMgdGhhdCB3aWxsIGluIHR1cm4gYmUgcXVldWVkIGFuZCBkaXNwYXRjaGVkLlxuXHQgKlxuXHQgKiAgIGBldmVudFR5cGVzYCB7b2JqZWN0fVxuXHQgKiAgICAgT3B0aW9uYWwsIHBsdWdpbnMgdGhhdCBmaXJlIGV2ZW50cyBtdXN0IHB1Ymxpc2ggYSBtYXBwaW5nIG9mIHJlZ2lzdHJhdGlvblxuXHQgKiAgICAgbmFtZXMgdGhhdCBhcmUgdXNlZCB0byByZWdpc3RlciBsaXN0ZW5lcnMuIFZhbHVlcyBvZiB0aGlzIG1hcHBpbmcgbXVzdFxuXHQgKiAgICAgYmUgb2JqZWN0cyB0aGF0IGNvbnRhaW4gYHJlZ2lzdHJhdGlvbk5hbWVgIG9yIGBwaGFzZWRSZWdpc3RyYXRpb25OYW1lc2AuXG5cdCAqXG5cdCAqICAgYGV4ZWN1dGVEaXNwYXRjaGAge2Z1bmN0aW9uKG9iamVjdCwgZnVuY3Rpb24sIHN0cmluZyl9XG5cdCAqICAgICBPcHRpb25hbCwgYWxsb3dzIHBsdWdpbnMgdG8gb3ZlcnJpZGUgaG93IGFuIGV2ZW50IGdldHMgZGlzcGF0Y2hlZC4gQnlcblx0ICogICAgIGRlZmF1bHQsIHRoZSBsaXN0ZW5lciBpcyBzaW1wbHkgaW52b2tlZC5cblx0ICpcblx0ICogRWFjaCBwbHVnaW4gdGhhdCBpcyBpbmplY3RlZCBpbnRvIGBFdmVudHNQbHVnaW5IdWJgIGlzIGltbWVkaWF0ZWx5IG9wZXJhYmxlLlxuXHQgKlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHR2YXIgRXZlbnRQbHVnaW5IdWIgPSB7XG5cdFxuXHQgIC8qKlxuXHQgICAqIE1ldGhvZHMgZm9yIGluamVjdGluZyBkZXBlbmRlbmNpZXMuXG5cdCAgICovXG5cdCAgaW5qZWN0aW9uOiB7XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW0ge29iamVjdH0gSW5qZWN0ZWRNb3VudFxuXHQgICAgICogQHB1YmxpY1xuXHQgICAgICovXG5cdCAgICBpbmplY3RNb3VudDogRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24uaW5qZWN0TW91bnQsXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW0ge29iamVjdH0gSW5qZWN0ZWRJbnN0YW5jZUhhbmRsZVxuXHQgICAgICogQHB1YmxpY1xuXHQgICAgICovXG5cdCAgICBpbmplY3RJbnN0YW5jZUhhbmRsZTogZnVuY3Rpb24oSW5qZWN0ZWRJbnN0YW5jZUhhbmRsZSkge1xuXHQgICAgICBJbnN0YW5jZUhhbmRsZSA9IEluamVjdGVkSW5zdGFuY2VIYW5kbGU7XG5cdCAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgICB2YWxpZGF0ZUluc3RhbmNlSGFuZGxlKCk7XG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdFxuXHQgICAgZ2V0SW5zdGFuY2VIYW5kbGU6IGZ1bmN0aW9uKCkge1xuXHQgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICAgICAgdmFsaWRhdGVJbnN0YW5jZUhhbmRsZSgpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBJbnN0YW5jZUhhbmRsZTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW0ge2FycmF5fSBJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXJcblx0ICAgICAqIEBwdWJsaWNcblx0ICAgICAqL1xuXHQgICAgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjogRXZlbnRQbHVnaW5SZWdpc3RyeS5pbmplY3RFdmVudFBsdWdpbk9yZGVyLFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHtvYmplY3R9IGluamVjdGVkTmFtZXNUb1BsdWdpbnMgTWFwIGZyb20gbmFtZXMgdG8gcGx1Z2luIG1vZHVsZXMuXG5cdCAgICAgKi9cblx0ICAgIGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTogRXZlbnRQbHVnaW5SZWdpc3RyeS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWVcblx0XG5cdCAgfSxcblx0XG5cdCAgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOiBFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyxcblx0XG5cdCAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMsXG5cdFxuXHQgIC8qKlxuXHQgICAqIFN0b3JlcyBgbGlzdGVuZXJgIGF0IGBsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV1baWRdYC4gSXMgaWRlbXBvdGVudC5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgRE9NIGVsZW1lbnQuXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuXHQgICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBsaXN0ZW5lciBUaGUgY2FsbGJhY2sgdG8gc3RvcmUuXG5cdCAgICovXG5cdCAgcHV0TGlzdGVuZXI6IGZ1bmN0aW9uKGlkLCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lcikge1xuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgIWxpc3RlbmVyIHx8IHR5cGVvZiBsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJyxcblx0ICAgICAgJ0V4cGVjdGVkICVzIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24sIGluc3RlYWQgZ290IHR5cGUgJXMnLFxuXHQgICAgICByZWdpc3RyYXRpb25OYW1lLCB0eXBlb2YgbGlzdGVuZXJcblx0ICAgICkgOiBpbnZhcmlhbnQoIWxpc3RlbmVyIHx8IHR5cGVvZiBsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykpO1xuXHRcblx0ICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9XG5cdCAgICAgIGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXSB8fCAobGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdID0ge30pO1xuXHQgICAgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWVbaWRdID0gbGlzdGVuZXI7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudC5cblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaXN0cmF0aW9uTmFtZSBOYW1lIG9mIGxpc3RlbmVyIChlLmcuIGBvbkNsaWNrYCkuXG5cdCAgICogQHJldHVybiB7P2Z1bmN0aW9ufSBUaGUgc3RvcmVkIGNhbGxiYWNrLlxuXHQgICAqL1xuXHQgIGdldExpc3RlbmVyOiBmdW5jdGlvbihpZCwgcmVnaXN0cmF0aW9uTmFtZSkge1xuXHQgICAgdmFyIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lID0gbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdO1xuXHQgICAgcmV0dXJuIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lICYmIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lW2lkXTtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBEZWxldGVzIGEgbGlzdGVuZXIgZnJvbSB0aGUgcmVnaXN0cmF0aW9uIGJhbmsuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIERPTSBlbGVtZW50LlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cblx0ICAgKi9cblx0ICBkZWxldGVMaXN0ZW5lcjogZnVuY3Rpb24oaWQsIHJlZ2lzdHJhdGlvbk5hbWUpIHtcblx0ICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9IGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXTtcblx0ICAgIGlmIChiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSkge1xuXHQgICAgICBkZWxldGUgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWVbaWRdO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIERlbGV0ZXMgYWxsIGxpc3RlbmVycyBmb3IgdGhlIERPTSBlbGVtZW50IHdpdGggdGhlIHN1cHBsaWVkIElELlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudC5cblx0ICAgKi9cblx0ICBkZWxldGVBbGxMaXN0ZW5lcnM6IGZ1bmN0aW9uKGlkKSB7XG5cdCAgICBmb3IgKHZhciByZWdpc3RyYXRpb25OYW1lIGluIGxpc3RlbmVyQmFuaykge1xuXHQgICAgICBkZWxldGUgbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdW2lkXTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBBbGxvd3MgcmVnaXN0ZXJlZCBwbHVnaW5zIGFuIG9wcG9ydHVuaXR5IHRvIGV4dHJhY3QgZXZlbnRzIGZyb20gdG9wLWxldmVsXG5cdCAgICogbmF0aXZlIGJyb3dzZXIgZXZlbnRzLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuXHQgICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuXHQgICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cblx0ICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKi9cblx0ICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcblx0ICAgICAgdG9wTGV2ZWxUeXBlLFxuXHQgICAgICB0b3BMZXZlbFRhcmdldCxcblx0ICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcblx0ICAgICAgbmF0aXZlRXZlbnQpIHtcblx0ICAgIHZhciBldmVudHM7XG5cdCAgICB2YXIgcGx1Z2lucyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2lucztcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsID0gcGx1Z2lucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgICAgLy8gTm90IGV2ZXJ5IHBsdWdpbiBpbiB0aGUgb3JkZXJpbmcgbWF5IGJlIGxvYWRlZCBhdCBydW50aW1lLlxuXHQgICAgICB2YXIgcG9zc2libGVQbHVnaW4gPSBwbHVnaW5zW2ldO1xuXHQgICAgICBpZiAocG9zc2libGVQbHVnaW4pIHtcblx0ICAgICAgICB2YXIgZXh0cmFjdGVkRXZlbnRzID0gcG9zc2libGVQbHVnaW4uZXh0cmFjdEV2ZW50cyhcblx0ICAgICAgICAgIHRvcExldmVsVHlwZSxcblx0ICAgICAgICAgIHRvcExldmVsVGFyZ2V0LFxuXHQgICAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcblx0ICAgICAgICAgIG5hdGl2ZUV2ZW50XG5cdCAgICAgICAgKTtcblx0ICAgICAgICBpZiAoZXh0cmFjdGVkRXZlbnRzKSB7XG5cdCAgICAgICAgICBldmVudHMgPSBhY2N1bXVsYXRlSW50byhldmVudHMsIGV4dHJhY3RlZEV2ZW50cyk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZXZlbnRzO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIEVucXVldWVzIGEgc3ludGhldGljIGV2ZW50IHRoYXQgc2hvdWxkIGJlIGRpc3BhdGNoZWQgd2hlblxuXHQgICAqIGBwcm9jZXNzRXZlbnRRdWV1ZWAgaXMgaW52b2tlZC5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7Kn0gZXZlbnRzIEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIGVucXVldWVFdmVudHM6IGZ1bmN0aW9uKGV2ZW50cykge1xuXHQgICAgaWYgKGV2ZW50cykge1xuXHQgICAgICBldmVudFF1ZXVlID0gYWNjdW11bGF0ZUludG8oZXZlbnRRdWV1ZSwgZXZlbnRzKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBEaXNwYXRjaGVzIGFsbCBzeW50aGV0aWMgZXZlbnRzIG9uIHRoZSBldmVudCBxdWV1ZS5cblx0ICAgKlxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIHByb2Nlc3NFdmVudFF1ZXVlOiBmdW5jdGlvbigpIHtcblx0ICAgIC8vIFNldCBgZXZlbnRRdWV1ZWAgdG8gbnVsbCBiZWZvcmUgcHJvY2Vzc2luZyBpdCBzbyB0aGF0IHdlIGNhbiB0ZWxsIGlmIG1vcmVcblx0ICAgIC8vIGV2ZW50cyBnZXQgZW5xdWV1ZWQgd2hpbGUgcHJvY2Vzc2luZy5cblx0ICAgIHZhciBwcm9jZXNzaW5nRXZlbnRRdWV1ZSA9IGV2ZW50UXVldWU7XG5cdCAgICBldmVudFF1ZXVlID0gbnVsbDtcblx0ICAgIGZvckVhY2hBY2N1bXVsYXRlZChwcm9jZXNzaW5nRXZlbnRRdWV1ZSwgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlKTtcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgICFldmVudFF1ZXVlLFxuXHQgICAgICAncHJvY2Vzc0V2ZW50UXVldWUoKTogQWRkaXRpb25hbCBldmVudHMgd2VyZSBlbnF1ZXVlZCB3aGlsZSBwcm9jZXNzaW5nICcgK1xuXHQgICAgICAnYW4gZXZlbnQgcXVldWUuIFN1cHBvcnQgZm9yIHRoaXMgaGFzIG5vdCB5ZXQgYmVlbiBpbXBsZW1lbnRlZC4nXG5cdCAgICApIDogaW52YXJpYW50KCFldmVudFF1ZXVlKSk7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogVGhlc2UgYXJlIG5lZWRlZCBmb3IgdGVzdHMgb25seS4gRG8gbm90IHVzZSFcblx0ICAgKi9cblx0ICBfX3B1cmdlOiBmdW5jdGlvbigpIHtcblx0ICAgIGxpc3RlbmVyQmFuayA9IHt9O1xuXHQgIH0sXG5cdFxuXHQgIF9fZ2V0TGlzdGVuZXJCYW5rOiBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBsaXN0ZW5lckJhbms7XG5cdCAgfVxuXHRcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5IdWI7XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiAyNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBSZWFjdExlZ2FjeUVsZW1lbnRcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBSZWFjdEN1cnJlbnRPd25lciA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXHRcblx0dmFyIGludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdHZhciBtb25pdG9yQ29kZVVzZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzgpO1xuXHR2YXIgd2FybmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdFxuXHR2YXIgbGVnYWN5RmFjdG9yeUxvZ3MgPSB7fTtcblx0ZnVuY3Rpb24gd2FybkZvckxlZ2FjeUZhY3RvcnlDYWxsKCkge1xuXHQgIGlmICghUmVhY3RMZWdhY3lFbGVtZW50RmFjdG9yeS5faXNMZWdhY3lDYWxsV2FybmluZ0VuYWJsZWQpIHtcblx0ICAgIHJldHVybjtcblx0ICB9XG5cdCAgdmFyIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcblx0ICB2YXIgbmFtZSA9IG93bmVyICYmIG93bmVyLmNvbnN0cnVjdG9yID8gb3duZXIuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgOiAnJztcblx0ICBpZiAoIW5hbWUpIHtcblx0ICAgIG5hbWUgPSAnU29tZXRoaW5nJztcblx0ICB9XG5cdCAgaWYgKGxlZ2FjeUZhY3RvcnlMb2dzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIGxlZ2FjeUZhY3RvcnlMb2dzW25hbWVdID0gdHJ1ZTtcblx0ICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcblx0ICAgIGZhbHNlLFxuXHQgICAgbmFtZSArICcgaXMgY2FsbGluZyBhIFJlYWN0IGNvbXBvbmVudCBkaXJlY3RseS4gJyArXG5cdCAgICAnVXNlIGEgZmFjdG9yeSBvciBKU1ggaW5zdGVhZC4gU2VlOiBodHRwOi8vZmIubWUvcmVhY3QtbGVnYWN5ZmFjdG9yeSdcblx0ICApIDogbnVsbCk7XG5cdCAgbW9uaXRvckNvZGVVc2UoJ3JlYWN0X2xlZ2FjeV9mYWN0b3J5X2NhbGwnLCB7IHZlcnNpb246IDMsIG5hbWU6IG5hbWUgfSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHdhcm5Gb3JQbGFpbkZ1bmN0aW9uVHlwZSh0eXBlKSB7XG5cdCAgdmFyIGlzUmVhY3RDbGFzcyA9XG5cdCAgICB0eXBlLnByb3RvdHlwZSAmJlxuXHQgICAgdHlwZW9mIHR5cGUucHJvdG90eXBlLm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmXG5cdCAgICB0eXBlb2YgdHlwZS5wcm90b3R5cGUucmVjZWl2ZUNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJztcblx0ICBpZiAoaXNSZWFjdENsYXNzKSB7XG5cdCAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcblx0ICAgICAgZmFsc2UsXG5cdCAgICAgICdEaWQgbm90IGV4cGVjdCB0byBnZXQgYSBSZWFjdCBjbGFzcyBoZXJlLiBVc2UgYENvbXBvbmVudGAgaW5zdGVhZCAnICtcblx0ICAgICAgJ29mIGBDb21wb25lbnQudHlwZWAgb3IgYHRoaXMuY29uc3RydWN0b3JgLidcblx0ICAgICkgOiBudWxsKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgaWYgKCF0eXBlLl9yZWFjdFdhcm5lZEZvclRoaXNUeXBlKSB7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgdHlwZS5fcmVhY3RXYXJuZWRGb3JUaGlzVHlwZSA9IHRydWU7XG5cdCAgICAgIH0gY2F0Y2ggKHgpIHtcblx0ICAgICAgICAvLyBqdXN0IGluY2FzZSB0aGlzIGlzIGEgZnJvemVuIG9iamVjdCBvciBzb21lIHNwZWNpYWwgb2JqZWN0XG5cdCAgICAgIH1cblx0ICAgICAgbW9uaXRvckNvZGVVc2UoXG5cdCAgICAgICAgJ3JlYWN0X25vbl9jb21wb25lbnRfaW5fanN4Jyxcblx0ICAgICAgICB7IHZlcnNpb246IDMsIG5hbWU6IHR5cGUubmFtZSB9XG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcblx0ICAgICAgZmFsc2UsXG5cdCAgICAgICdUaGlzIEpTWCB1c2VzIGEgcGxhaW4gZnVuY3Rpb24uIE9ubHkgUmVhY3QgY29tcG9uZW50cyBhcmUgJyArXG5cdCAgICAgICd2YWxpZCBpbiBSZWFjdFxcJ3MgSlNYIHRyYW5zZm9ybS4nXG5cdCAgICApIDogbnVsbCk7XG5cdCAgfVxuXHR9XG5cdFxuXHRmdW5jdGlvbiB3YXJuRm9yTm9uTGVnYWN5RmFjdG9yeSh0eXBlKSB7XG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG5cdCAgICBmYWxzZSxcblx0ICAgICdEbyBub3QgcGFzcyBSZWFjdC5ET00uJyArIHR5cGUudHlwZSArICcgdG8gSlNYIG9yIGNyZWF0ZUZhY3RvcnkuICcgK1xuXHQgICAgJ1VzZSB0aGUgc3RyaW5nIFwiJyArIHR5cGUudHlwZSArICdcIiBpbnN0ZWFkLidcblx0ICApIDogbnVsbCk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBUcmFuc2ZlciBzdGF0aWMgcHJvcGVydGllcyBmcm9tIHRoZSBzb3VyY2UgdG8gdGhlIHRhcmdldC4gRnVuY3Rpb25zIGFyZVxuXHQgKiByZWJvdW5kIHRvIGhhdmUgdGhpcyByZWZsZWN0IHRoZSBvcmlnaW5hbCBzb3VyY2UuXG5cdCAqL1xuXHRmdW5jdGlvbiBwcm94eVN0YXRpY01ldGhvZHModGFyZ2V0LCBzb3VyY2UpIHtcblx0ICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgcmV0dXJuO1xuXHQgIH1cblx0ICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG5cdCAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0ICAgICAgdmFyIHZhbHVlID0gc291cmNlW2tleV07XG5cdCAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICB2YXIgYm91bmQgPSB2YWx1ZS5iaW5kKHNvdXJjZSk7XG5cdCAgICAgICAgLy8gQ29weSBhbnkgcHJvcGVydGllcyBkZWZpbmVkIG9uIHRoZSBmdW5jdGlvbiwgc3VjaCBhcyBgaXNSZXF1aXJlZGAgb25cblx0ICAgICAgICAvLyBhIFByb3BUeXBlcyB2YWxpZGF0b3IuXG5cdCAgICAgICAgZm9yICh2YXIgayBpbiB2YWx1ZSkge1xuXHQgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KGspKSB7XG5cdCAgICAgICAgICAgIGJvdW5kW2tdID0gdmFsdWVba107XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRhcmdldFtrZXldID0gYm91bmQ7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0Ly8gV2UgdXNlIGFuIG9iamVjdCBpbnN0ZWFkIG9mIGEgYm9vbGVhbiBiZWNhdXNlIGJvb2xlYW5zIGFyZSBpZ25vcmVkIGJ5IG91clxuXHQvLyBtb2NraW5nIGxpYnJhcmllcyB3aGVuIHRoZXNlIGZhY3RvcmllcyBnZXRzIG1vY2tlZC5cblx0dmFyIExFR0FDWV9NQVJLRVIgPSB7fTtcblx0dmFyIE5PTl9MRUdBQ1lfTUFSS0VSID0ge307XG5cdFxuXHR2YXIgUmVhY3RMZWdhY3lFbGVtZW50RmFjdG9yeSA9IHt9O1xuXHRcblx0UmVhY3RMZWdhY3lFbGVtZW50RmFjdG9yeS53cmFwQ3JlYXRlRmFjdG9yeSA9IGZ1bmN0aW9uKGNyZWF0ZUZhY3RvcnkpIHtcblx0ICB2YXIgbGVnYWN5Q3JlYXRlRmFjdG9yeSA9IGZ1bmN0aW9uKHR5cGUpIHtcblx0ICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAvLyBOb24tZnVuY3Rpb24gdHlwZXMgY2Fubm90IGJlIGxlZ2FjeSBmYWN0b3JpZXNcblx0ICAgICAgcmV0dXJuIGNyZWF0ZUZhY3RvcnkodHlwZSk7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKHR5cGUuaXNSZWFjdE5vbkxlZ2FjeUZhY3RvcnkpIHtcblx0ICAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBhIGZhY3RvcnkgY3JlYXRlZCBieSBSZWFjdERPTSB3ZSB1bndyYXAgaXQgdG8gZ2V0IHRvXG5cdCAgICAgIC8vIHRoZSB1bmRlcmx5aW5nIHN0cmluZyB0eXBlLiBJdCBzaG91bGRuJ3QgaGF2ZSBiZWVuIHBhc3NlZCBoZXJlIHNvIHdlXG5cdCAgICAgIC8vIHdhcm4uXG5cdCAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgICB3YXJuRm9yTm9uTGVnYWN5RmFjdG9yeSh0eXBlKTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gY3JlYXRlRmFjdG9yeSh0eXBlLnR5cGUpO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmICh0eXBlLmlzUmVhY3RMZWdhY3lGYWN0b3J5KSB7XG5cdCAgICAgIC8vIFRoaXMgaXMgcHJvYmFibHkgYSBsZWdhY3kgZmFjdG9yeSBjcmVhdGVkIGJ5IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50LlxuXHQgICAgICAvLyBXZSB1bndyYXAgaXQgdG8gZ2V0IHRvIHRoZSB1bmRlcmx5aW5nIGNsYXNzLlxuXHQgICAgICByZXR1cm4gY3JlYXRlRmFjdG9yeSh0eXBlLnR5cGUpO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgd2FybkZvclBsYWluRnVuY3Rpb25UeXBlKHR5cGUpO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIFVubGVzcyBpdCdzIGEgbGVnYWN5IGZhY3RvcnksIHRoZW4gdGhpcyBpcyBwcm9iYWJseSBhIHBsYWluIGZ1bmN0aW9uLFxuXHQgICAgLy8gdGhhdCBpcyBleHBlY3RpbmcgdG8gYmUgaW52b2tlZCBieSBKU1guIFdlIGNhbiBqdXN0IHJldHVybiBpdCBhcyBpcy5cblx0ICAgIHJldHVybiB0eXBlO1xuXHQgIH07XG5cdCAgcmV0dXJuIGxlZ2FjeUNyZWF0ZUZhY3Rvcnk7XG5cdH07XG5cdFxuXHRSZWFjdExlZ2FjeUVsZW1lbnRGYWN0b3J5LndyYXBDcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24oY3JlYXRlRWxlbWVudCkge1xuXHQgIHZhciBsZWdhY3lDcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24odHlwZSwgcHJvcHMsIGNoaWxkcmVuKSB7XG5cdCAgICBpZiAodHlwZW9mIHR5cGUgIT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgLy8gTm9uLWZ1bmN0aW9uIHR5cGVzIGNhbm5vdCBiZSBsZWdhY3kgZmFjdG9yaWVzXG5cdCAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIGFyZ3M7XG5cdFxuXHQgICAgaWYgKHR5cGUuaXNSZWFjdE5vbkxlZ2FjeUZhY3RvcnkpIHtcblx0ICAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBhIGZhY3RvcnkgY3JlYXRlZCBieSBSZWFjdERPTSB3ZSB1bndyYXAgaXQgdG8gZ2V0IHRvXG5cdCAgICAgIC8vIHRoZSB1bmRlcmx5aW5nIHN0cmluZyB0eXBlLiBJdCBzaG91bGRuJ3QgaGF2ZSBiZWVuIHBhc3NlZCBoZXJlIHNvIHdlXG5cdCAgICAgIC8vIHdhcm4uXG5cdCAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgICB3YXJuRm9yTm9uTGVnYWN5RmFjdG9yeSh0eXBlKTtcblx0ICAgICAgfVxuXHQgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblx0ICAgICAgYXJnc1swXSA9IHR5cGUudHlwZTtcblx0ICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQuYXBwbHkodGhpcywgYXJncyk7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKHR5cGUuaXNSZWFjdExlZ2FjeUZhY3RvcnkpIHtcblx0ICAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBhIGxlZ2FjeSBmYWN0b3J5IGNyZWF0ZWQgYnkgUmVhY3RDb21wb3NpdGVDb21wb25lbnQuXG5cdCAgICAgIC8vIFdlIHVud3JhcCBpdCB0byBnZXQgdG8gdGhlIHVuZGVybHlpbmcgY2xhc3MuXG5cdCAgICAgIGlmICh0eXBlLl9pc01vY2tGdW5jdGlvbikge1xuXHQgICAgICAgIC8vIElmIHRoaXMgaXMgYSBtb2NrIGZ1bmN0aW9uLCBwZW9wbGUgd2lsbCBleHBlY3QgaXQgdG8gYmUgY2FsbGVkLiBXZVxuXHQgICAgICAgIC8vIHdpbGwgYWN0dWFsbHkgY2FsbCB0aGUgb3JpZ2luYWwgbW9jayBmYWN0b3J5IGZ1bmN0aW9uIGluc3RlYWQuIFRoaXNcblx0ICAgICAgICAvLyBmdXR1cmUgcHJvb2ZzIHVuaXQgdGVzdGluZyB0aGF0IGFzc3VtZSB0aGF0IHRoZXNlIGFyZSBjbGFzc2VzLlxuXHQgICAgICAgIHR5cGUudHlwZS5fbW9ja2VkUmVhY3RDbGFzc0NvbnN0cnVjdG9yID0gdHlwZTtcblx0ICAgICAgfVxuXHQgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblx0ICAgICAgYXJnc1swXSA9IHR5cGUudHlwZTtcblx0ICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQuYXBwbHkodGhpcywgYXJncyk7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuXHQgICAgICB3YXJuRm9yUGxhaW5GdW5jdGlvblR5cGUodHlwZSk7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gVGhpcyBpcyBiZWluZyBjYWxsZWQgd2l0aCBhIHBsYWluIGZ1bmN0aW9uIHdlIHNob3VsZCBpbnZva2UgaXRcblx0ICAgIC8vIGltbWVkaWF0ZWx5IGFzIGlmIHRoaXMgd2FzIHVzZWQgd2l0aCBsZWdhY3kgSlNYLlxuXHQgICAgcmV0dXJuIHR5cGUuYXBwbHkobnVsbCwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG5cdCAgfTtcblx0ICByZXR1cm4gbGVnYWN5Q3JlYXRlRWxlbWVudDtcblx0fTtcblx0XG5cdFJlYWN0TGVnYWN5RWxlbWVudEZhY3Rvcnkud3JhcEZhY3RvcnkgPSBmdW5jdGlvbihmYWN0b3J5KSB7XG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgIHR5cGVvZiBmYWN0b3J5ID09PSAnZnVuY3Rpb24nLFxuXHQgICAgJ1RoaXMgaXMgc3VwcG9zZSB0byBhY2NlcHQgYSBlbGVtZW50IGZhY3RvcnknXG5cdCAgKSA6IGludmFyaWFudCh0eXBlb2YgZmFjdG9yeSA9PT0gJ2Z1bmN0aW9uJykpO1xuXHQgIHZhciBsZWdhY3lFbGVtZW50RmFjdG9yeSA9IGZ1bmN0aW9uKGNvbmZpZywgY2hpbGRyZW4pIHtcblx0ICAgIC8vIFRoaXMgZmFjdG9yeSBzaG91bGQgbm90IGJlIGNhbGxlZCB3aGVuIEpTWCBpcyB1c2VkLiBVc2UgSlNYIGluc3RlYWQuXG5cdCAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICAgIHdhcm5Gb3JMZWdhY3lGYWN0b3J5Q2FsbCgpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGZhY3RvcnkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICB9O1xuXHQgIHByb3h5U3RhdGljTWV0aG9kcyhsZWdhY3lFbGVtZW50RmFjdG9yeSwgZmFjdG9yeS50eXBlKTtcblx0ICBsZWdhY3lFbGVtZW50RmFjdG9yeS5pc1JlYWN0TGVnYWN5RmFjdG9yeSA9IExFR0FDWV9NQVJLRVI7XG5cdCAgbGVnYWN5RWxlbWVudEZhY3RvcnkudHlwZSA9IGZhY3RvcnkudHlwZTtcblx0ICByZXR1cm4gbGVnYWN5RWxlbWVudEZhY3Rvcnk7XG5cdH07XG5cdFxuXHQvLyBUaGlzIGlzIHVzZWQgdG8gbWFyayBhIGZhY3RvcnkgdGhhdCB3aWxsIHJlbWFpbi4gRS5nLiB3ZSdyZSBhbGxvd2VkIHRvIGNhbGxcblx0Ly8gaXQgYXMgYSBmdW5jdGlvbi4gSG93ZXZlciwgeW91J3JlIG5vdCBzdXBwb3NlIHRvIHBhc3MgaXQgdG8gY3JlYXRlRWxlbWVudFxuXHQvLyBvciBjcmVhdGVGYWN0b3J5LCBzbyBpdCB3aWxsIHdhcm4geW91IGlmIHlvdSBkby5cblx0UmVhY3RMZWdhY3lFbGVtZW50RmFjdG9yeS5tYXJrTm9uTGVnYWN5RmFjdG9yeSA9IGZ1bmN0aW9uKGZhY3RvcnkpIHtcblx0ICBmYWN0b3J5LmlzUmVhY3ROb25MZWdhY3lGYWN0b3J5ID0gTk9OX0xFR0FDWV9NQVJLRVI7XG5cdCAgcmV0dXJuIGZhY3Rvcnk7XG5cdH07XG5cdFxuXHQvLyBDaGVja3MgaWYgYSBmYWN0b3J5IGZ1bmN0aW9uIGlzIGFjdHVhbGx5IGEgbGVnYWN5IGZhY3RvcnkgcHJldGVuZGluZyB0b1xuXHQvLyBiZSBhIGNsYXNzLlxuXHRSZWFjdExlZ2FjeUVsZW1lbnRGYWN0b3J5LmlzVmFsaWRGYWN0b3J5ID0gZnVuY3Rpb24oZmFjdG9yeSkge1xuXHQgIC8vIFRPRE86IFRoaXMgd2lsbCBiZSByZW1vdmVkIGFuZCBtb3ZlZCBpbnRvIGEgY2xhc3MgdmFsaWRhdG9yIG9yIHNvbWV0aGluZy5cblx0ICByZXR1cm4gdHlwZW9mIGZhY3RvcnkgPT09ICdmdW5jdGlvbicgJiZcblx0ICAgIGZhY3RvcnkuaXNSZWFjdExlZ2FjeUZhY3RvcnkgPT09IExFR0FDWV9NQVJLRVI7XG5cdH07XG5cdFxuXHRSZWFjdExlZ2FjeUVsZW1lbnRGYWN0b3J5LmlzVmFsaWRDbGFzcyA9IGZ1bmN0aW9uKGZhY3RvcnkpIHtcblx0ICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcblx0ICAgICAgZmFsc2UsXG5cdCAgICAgICdpc1ZhbGlkQ2xhc3MgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuICcgK1xuXHQgICAgICAnVXNlIGEgbW9yZSBzcGVjaWZpYyB2YWxpZGF0b3IgaW5zdGVhZC4nXG5cdCAgICApIDogbnVsbCk7XG5cdCAgfVxuXHQgIHJldHVybiBSZWFjdExlZ2FjeUVsZW1lbnRGYWN0b3J5LmlzVmFsaWRGYWN0b3J5KGZhY3RvcnkpO1xuXHR9O1xuXHRcblx0UmVhY3RMZWdhY3lFbGVtZW50RmFjdG9yeS5faXNMZWdhY3lDYWxsV2FybmluZ0VuYWJsZWQgPSB0cnVlO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdExlZ2FjeUVsZW1lbnRGYWN0b3J5O1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogMjggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljVUlFdmVudFxuXHQgKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIFN5bnRoZXRpY0V2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cdFxuXHR2YXIgZ2V0RXZlbnRUYXJnZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU0KTtcblx0XG5cdC8qKlxuXHQgKiBAaW50ZXJmYWNlIFVJRXZlbnRcblx0ICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG5cdCAqL1xuXHR2YXIgVUlFdmVudEludGVyZmFjZSA9IHtcblx0ICB2aWV3OiBmdW5jdGlvbihldmVudCkge1xuXHQgICAgaWYgKGV2ZW50LnZpZXcpIHtcblx0ICAgICAgcmV0dXJuIGV2ZW50LnZpZXc7XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIHRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGV2ZW50KTtcblx0ICAgIGlmICh0YXJnZXQgIT0gbnVsbCAmJiB0YXJnZXQud2luZG93ID09PSB0YXJnZXQpIHtcblx0ICAgICAgLy8gdGFyZ2V0IGlzIGEgd2luZG93IG9iamVjdFxuXHQgICAgICByZXR1cm4gdGFyZ2V0O1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBkb2MgPSB0YXJnZXQub3duZXJEb2N1bWVudDtcblx0ICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IGBvd25lckRvY3VtZW50YCBpcyBzb21ldGltZXMgdW5kZWZpbmVkIGluIElFOC5cblx0ICAgIGlmIChkb2MpIHtcblx0ICAgICAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIHdpbmRvdztcblx0ICAgIH1cblx0ICB9LFxuXHQgIGRldGFpbDogZnVuY3Rpb24oZXZlbnQpIHtcblx0ICAgIHJldHVybiBldmVudC5kZXRhaWwgfHwgMDtcblx0ICB9XG5cdH07XG5cdFxuXHQvKipcblx0ICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cblx0ICogQGV4dGVuZHMge1N5bnRoZXRpY0V2ZW50fVxuXHQgKi9cblx0ZnVuY3Rpb24gU3ludGhldGljVUlFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG5cdCAgU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcblx0fVxuXHRcblx0U3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY1VJRXZlbnQsIFVJRXZlbnRJbnRlcmZhY2UpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNVSUV2ZW50O1xuXG5cbi8qKiovIH0sXG4vKiAyOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0XHRpZighbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdFx0bW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0XHR9XG5cdFx0cmV0dXJuIG1vZHVsZTtcblx0fVxuXG5cbi8qKiovIH0sXG4vKiAzMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIGdldFJvb3RJbnN0YW5jZXNGcm9tUmVhY3RNb3VudCA9IF9fd2VicGFja19yZXF1aXJlX18oMTAzKTtcblx0XG5cdHZhciBpbmplY3RlZFByb3ZpZGVyID0gbnVsbCxcblx0ICAgIGRpZFdhcm4gPSBmYWxzZTtcblx0XG5cdGZ1bmN0aW9uIHdhcm5PbmNlKCkge1xuXHQgIGlmICghZGlkV2Fybikge1xuXHQgICAgY29uc29sZS53YXJuKFxuXHQgICAgICAnSXQgYXBwZWFycyB0aGF0IFJlYWN0IEhvdCBMb2FkZXIgaXNuXFwndCBjb25maWd1cmVkIGNvcnJlY3RseS4gJyArXG5cdCAgICAgICdJZiB5b3VcXCdyZSB1c2luZyBOUE0sIG1ha2Ugc3VyZSB5b3VyIGRlcGVuZGVuY2llcyBkb25cXCd0IGRyYWcgZHVwbGljYXRlIFJlYWN0IGRpc3RyaWJ1dGlvbnMgaW50byB0aGVpciBub2RlX21vZHVsZXMgYW5kIHRoYXQgcmVxdWlyZShcInJlYWN0XCIpIGNvcnJlc3BvbmRzIHRvIHRoZSBSZWFjdCBpbnN0YW5jZSB5b3UgcmVuZGVyIHlvdXIgYXBwIHdpdGguJyxcblx0ICAgICAgJ0lmIHlvdVxcJ3JlIHVzaW5nIGEgcHJlY29tcGlsZWQgdmVyc2lvbiBvZiBSZWFjdCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9nYWVhcm9uL3JlYWN0LWhvdC1sb2FkZXIvdHJlZS9tYXN0ZXIvZG9jcyN1c2FnZS13aXRoLWV4dGVybmFsLXJlYWN0IGZvciBpbnRlZ3JhdGlvbiBpbnN0cnVjdGlvbnMuJ1xuXHQgICAgKTtcblx0ICB9XG5cdFxuXHQgIGRpZFdhcm4gPSB0cnVlO1xuXHR9XG5cdFxuXHR2YXIgUm9vdEluc3RhbmNlUHJvdmlkZXIgPSB7XG5cdCAgaW5qZWN0aW9uOiB7XG5cdCAgICBpbmplY3RQcm92aWRlcjogZnVuY3Rpb24gKHByb3ZpZGVyKSB7XG5cdCAgICAgIGluamVjdGVkUHJvdmlkZXIgPSBwcm92aWRlcjtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICBnZXRSb290SW5zdGFuY2VzOiBmdW5jdGlvbiAoUmVhY3RNb3VudCkge1xuXHQgICAgaWYgKGluamVjdGVkUHJvdmlkZXIpIHtcblx0ICAgICAgcmV0dXJuIGluamVjdGVkUHJvdmlkZXIuZ2V0Um9vdEluc3RhbmNlcygpO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBpbnN0YW5jZXMgPSBSZWFjdE1vdW50ICYmIGdldFJvb3RJbnN0YW5jZXNGcm9tUmVhY3RNb3VudChSZWFjdE1vdW50KSB8fCBbXTtcblx0ICAgIGlmICghT2JqZWN0LmtleXMoaW5zdGFuY2VzKS5sZW5ndGgpIHtcblx0ICAgICAgd2Fybk9uY2UoKTtcblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gaW5zdGFuY2VzO1xuXHQgIH1cblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUm9vdEluc3RhbmNlUHJvdmlkZXI7XG5cbi8qKiovIH0sXG4vKiAzMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIGlzUmVhY3RDbGFzc2lzaCA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpLFxuXHQgICAgaXNSZWFjdEVsZW1lbnRpc2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwOCk7XG5cdFxuXHRmdW5jdGlvbiBtYWtlRXhwb3J0c0hvdChtKSB7XG5cdCAgaWYgKGlzUmVhY3RFbGVtZW50aXNoKG0uZXhwb3J0cykpIHtcblx0ICAgIHJldHVybiBmYWxzZTtcblx0ICB9XG5cdFxuXHQgIHZhciBmcmVzaEV4cG9ydHMgPSBtLmV4cG9ydHMsXG5cdCAgICAgIGZvdW5kUmVhY3RDbGFzc2VzID0gZmFsc2U7XG5cdFxuXHQgIGlmIChpc1JlYWN0Q2xhc3Npc2gobS5leHBvcnRzKSkge1xuXHQgICAgbS5leHBvcnRzID0gbS5tYWtlSG90KG0uZXhwb3J0cywgJ19fTU9EVUxFX0VYUE9SVFMnKTtcblx0ICAgIGZvdW5kUmVhY3RDbGFzc2VzID0gdHJ1ZTtcblx0ICB9XG5cdFxuXHQgIGZvciAodmFyIGtleSBpbiBtLmV4cG9ydHMpIHtcblx0ICAgIGlmIChmcmVzaEV4cG9ydHMuaGFzT3duUHJvcGVydHkoa2V5KSAmJlxuXHQgICAgICAgIGlzUmVhY3RDbGFzc2lzaChmcmVzaEV4cG9ydHNba2V5XSkpIHtcblx0ICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobS5leHBvcnRzLCBrZXkpLndyaXRhYmxlKSB7XG5cdCAgICAgICAgbS5leHBvcnRzW2tleV0gPSBtLm1ha2VIb3QoZnJlc2hFeHBvcnRzW2tleV0sICdfX01PRFVMRV9FWFBPUlRTXycgKyBrZXkpO1xuXHQgICAgICAgIGZvdW5kUmVhY3RDbGFzc2VzID0gdHJ1ZTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBjb25zb2xlLndhcm4oXCJDYW4ndCBtYWtlIGNsYXNzIFwiICsga2V5ICsgXCIgaG90IHJlbG9hZGFibGUgZHVlIHRvIGJlaW5nIHJlYWQtb25seS4gWW91IGNhbiBleGNsdWRlIGZpbGVzIG9yIGRpcmVjdG9yaWVzIChmb3IgZXhhbXBsZSwgL25vZGVfbW9kdWxlcy8pIHVzaW5nICdleGNsdWRlJyBvcHRpb24gaW4gbG9hZGVyIGNvbmZpZ3VyYXRpb24uXCIpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gZm91bmRSZWFjdENsYXNzZXM7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gbWFrZUV4cG9ydHNIb3Q7XG5cblxuLyoqKi8gfSxcbi8qIDMyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEyKTtcblxuLyoqKi8gfSxcbi8qIDMzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIEF1dG9Gb2N1c01peGluXG5cdCAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgZm9jdXNOb2RlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OCk7XG5cdFxuXHR2YXIgQXV0b0ZvY3VzTWl4aW4gPSB7XG5cdCAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgaWYgKHRoaXMucHJvcHMuYXV0b0ZvY3VzKSB7XG5cdCAgICAgIGZvY3VzTm9kZSh0aGlzLmdldERPTU5vZGUoKSk7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBBdXRvRm9jdXNNaXhpbjtcblxuXG4vKioqLyB9LFxuLyogMzQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFbXB0eUNvbXBvbmVudFxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIFJlYWN0RWxlbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHR2YXIgaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciBjb21wb25lbnQ7XG5cdC8vIFRoaXMgcmVnaXN0cnkga2VlcHMgdHJhY2sgb2YgdGhlIFJlYWN0IElEcyBvZiB0aGUgY29tcG9uZW50cyB0aGF0IHJlbmRlcmVkIHRvXG5cdC8vIGBudWxsYCAoaW4gcmVhbGl0eSBhIHBsYWNlaG9sZGVyIHN1Y2ggYXMgYG5vc2NyaXB0YClcblx0dmFyIG51bGxDb21wb25lbnRJZHNSZWdpc3RyeSA9IHt9O1xuXHRcblx0dmFyIFJlYWN0RW1wdHlDb21wb25lbnRJbmplY3Rpb24gPSB7XG5cdCAgaW5qZWN0RW1wdHlDb21wb25lbnQ6IGZ1bmN0aW9uKGVtcHR5Q29tcG9uZW50KSB7XG5cdCAgICBjb21wb25lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeShlbXB0eUNvbXBvbmVudCk7XG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnQgVGhlIGluamVjdGVkIGVtcHR5IGNvbXBvbmVudC5cblx0ICovXG5cdGZ1bmN0aW9uIGdldEVtcHR5Q29tcG9uZW50KCkge1xuXHQgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICBjb21wb25lbnQsXG5cdCAgICAnVHJ5aW5nIHRvIHJldHVybiBudWxsIGZyb20gYSByZW5kZXIsIGJ1dCBubyBudWxsIHBsYWNlaG9sZGVyIGNvbXBvbmVudCAnICtcblx0ICAgICd3YXMgaW5qZWN0ZWQuJ1xuXHQgICkgOiBpbnZhcmlhbnQoY29tcG9uZW50KSk7XG5cdCAgcmV0dXJuIGNvbXBvbmVudCgpO1xuXHR9XG5cdFxuXHQvKipcblx0ICogTWFyayB0aGUgY29tcG9uZW50IGFzIGhhdmluZyByZW5kZXJlZCB0byBudWxsLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaWQgQ29tcG9uZW50J3MgYF9yb290Tm9kZUlEYC5cblx0ICovXG5cdGZ1bmN0aW9uIHJlZ2lzdGVyTnVsbENvbXBvbmVudElEKGlkKSB7XG5cdCAgbnVsbENvbXBvbmVudElkc1JlZ2lzdHJ5W2lkXSA9IHRydWU7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBVbm1hcmsgdGhlIGNvbXBvbmVudCBhcyBoYXZpbmcgcmVuZGVyZWQgdG8gbnVsbDogaXQgcmVuZGVycyB0byBzb21ldGhpbmcgbm93LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaWQgQ29tcG9uZW50J3MgYF9yb290Tm9kZUlEYC5cblx0ICovXG5cdGZ1bmN0aW9uIGRlcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQoaWQpIHtcblx0ICBkZWxldGUgbnVsbENvbXBvbmVudElkc1JlZ2lzdHJ5W2lkXTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBpZCBDb21wb25lbnQncyBgX3Jvb3ROb2RlSURgLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBjb21wb25lbnQgaXMgcmVuZGVyZWQgdG8gbnVsbC5cblx0ICovXG5cdGZ1bmN0aW9uIGlzTnVsbENvbXBvbmVudElEKGlkKSB7XG5cdCAgcmV0dXJuIG51bGxDb21wb25lbnRJZHNSZWdpc3RyeVtpZF07XG5cdH1cblx0XG5cdHZhciBSZWFjdEVtcHR5Q29tcG9uZW50ID0ge1xuXHQgIGRlcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQ6IGRlcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQsXG5cdCAgZ2V0RW1wdHlDb21wb25lbnQ6IGdldEVtcHR5Q29tcG9uZW50LFxuXHQgIGluamVjdGlvbjogUmVhY3RFbXB0eUNvbXBvbmVudEluamVjdGlvbixcblx0ICBpc051bGxDb21wb25lbnRJRDogaXNOdWxsQ29tcG9uZW50SUQsXG5cdCAgcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQ6IHJlZ2lzdGVyTnVsbENvbXBvbmVudElEXG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RW1wdHlDb21wb25lbnQ7XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiAzNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNNb3VzZUV2ZW50XG5cdCAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgU3ludGhldGljVUlFdmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpO1xuXHR2YXIgVmlld3BvcnRNZXRyaWNzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Nik7XG5cdFxuXHR2YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Myk7XG5cdFxuXHQvKipcblx0ICogQGludGVyZmFjZSBNb3VzZUV2ZW50XG5cdCAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuXHQgKi9cblx0dmFyIE1vdXNlRXZlbnRJbnRlcmZhY2UgPSB7XG5cdCAgc2NyZWVuWDogbnVsbCxcblx0ICBzY3JlZW5ZOiBudWxsLFxuXHQgIGNsaWVudFg6IG51bGwsXG5cdCAgY2xpZW50WTogbnVsbCxcblx0ICBjdHJsS2V5OiBudWxsLFxuXHQgIHNoaWZ0S2V5OiBudWxsLFxuXHQgIGFsdEtleTogbnVsbCxcblx0ICBtZXRhS2V5OiBudWxsLFxuXHQgIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcblx0ICBidXR0b246IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdCAgICAvLyBXZWJraXQsIEZpcmVmb3gsIElFOStcblx0ICAgIC8vIHdoaWNoOiAgMSAyIDNcblx0ICAgIC8vIGJ1dHRvbjogMCAxIDIgKHN0YW5kYXJkKVxuXHQgICAgdmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblx0ICAgIGlmICgnd2hpY2gnIGluIGV2ZW50KSB7XG5cdCAgICAgIHJldHVybiBidXR0b247XG5cdCAgICB9XG5cdCAgICAvLyBJRTw5XG5cdCAgICAvLyB3aGljaDogIHVuZGVmaW5lZFxuXHQgICAgLy8gYnV0dG9uOiAwIDAgMFxuXHQgICAgLy8gYnV0dG9uOiAxIDQgMiAob25tb3VzZXVwKVxuXHQgICAgcmV0dXJuIGJ1dHRvbiA9PT0gMiA/IDIgOiBidXR0b24gPT09IDQgPyAxIDogMDtcblx0ICB9LFxuXHQgIGJ1dHRvbnM6IG51bGwsXG5cdCAgcmVsYXRlZFRhcmdldDogZnVuY3Rpb24oZXZlbnQpIHtcblx0ICAgIHJldHVybiBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IChcblx0ICAgICAgZXZlbnQuZnJvbUVsZW1lbnQgPT09IGV2ZW50LnNyY0VsZW1lbnQgP1xuXHQgICAgICAgIGV2ZW50LnRvRWxlbWVudCA6XG5cdCAgICAgICAgZXZlbnQuZnJvbUVsZW1lbnRcblx0ICAgICk7XG5cdCAgfSxcblx0ICAvLyBcIlByb3ByaWV0YXJ5XCIgSW50ZXJmYWNlLlxuXHQgIHBhZ2VYOiBmdW5jdGlvbihldmVudCkge1xuXHQgICAgcmV0dXJuICdwYWdlWCcgaW4gZXZlbnQgP1xuXHQgICAgICBldmVudC5wYWdlWCA6XG5cdCAgICAgIGV2ZW50LmNsaWVudFggKyBWaWV3cG9ydE1ldHJpY3MuY3VycmVudFNjcm9sbExlZnQ7XG5cdCAgfSxcblx0ICBwYWdlWTogZnVuY3Rpb24oZXZlbnQpIHtcblx0ICAgIHJldHVybiAncGFnZVknIGluIGV2ZW50ID9cblx0ICAgICAgZXZlbnQucGFnZVkgOlxuXHQgICAgICBldmVudC5jbGllbnRZICsgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxUb3A7XG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuXHQgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG5cdCAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuXHQgKi9cblx0ZnVuY3Rpb24gU3ludGhldGljTW91c2VFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG5cdCAgU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xuXHR9XG5cdFxuXHRTeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNNb3VzZUV2ZW50LCBNb3VzZUV2ZW50SW50ZXJmYWNlKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gU3ludGhldGljTW91c2VFdmVudDtcblxuXG4vKioqLyB9LFxuLyogMzYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBUcmFuc2FjdGlvblxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIGludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHQvKipcblx0ICogYFRyYW5zYWN0aW9uYCBjcmVhdGVzIGEgYmxhY2sgYm94IHRoYXQgaXMgYWJsZSB0byB3cmFwIGFueSBtZXRob2Qgc3VjaCB0aGF0XG5cdCAqIGNlcnRhaW4gaW52YXJpYW50cyBhcmUgbWFpbnRhaW5lZCBiZWZvcmUgYW5kIGFmdGVyIHRoZSBtZXRob2QgaXMgaW52b2tlZFxuXHQgKiAoRXZlbiBpZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIHdoaWxlIGludm9raW5nIHRoZSB3cmFwcGVkIG1ldGhvZCkuIFdob2V2ZXJcblx0ICogaW5zdGFudGlhdGVzIGEgdHJhbnNhY3Rpb24gY2FuIHByb3ZpZGUgZW5mb3JjZXJzIG9mIHRoZSBpbnZhcmlhbnRzIGF0XG5cdCAqIGNyZWF0aW9uIHRpbWUuIFRoZSBgVHJhbnNhY3Rpb25gIGNsYXNzIGl0c2VsZiB3aWxsIHN1cHBseSBvbmUgYWRkaXRpb25hbFxuXHQgKiBhdXRvbWF0aWMgaW52YXJpYW50IGZvciB5b3UgLSB0aGUgaW52YXJpYW50IHRoYXQgYW55IHRyYW5zYWN0aW9uIGluc3RhbmNlXG5cdCAqIHNob3VsZCBub3QgYmUgcnVuIHdoaWxlIGl0IGlzIGFscmVhZHkgYmVpbmcgcnVuLiBZb3Ugd291bGQgdHlwaWNhbGx5IGNyZWF0ZSBhXG5cdCAqIHNpbmdsZSBpbnN0YW5jZSBvZiBhIGBUcmFuc2FjdGlvbmAgZm9yIHJldXNlIG11bHRpcGxlIHRpbWVzLCB0aGF0IHBvdGVudGlhbGx5XG5cdCAqIGlzIHVzZWQgdG8gd3JhcCBzZXZlcmFsIGRpZmZlcmVudCBtZXRob2RzLiBXcmFwcGVycyBhcmUgZXh0cmVtZWx5IHNpbXBsZSAtXG5cdCAqIHRoZXkgb25seSByZXF1aXJlIGltcGxlbWVudGluZyB0d28gbWV0aG9kcy5cblx0ICpcblx0ICogPHByZT5cblx0ICogICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXJzIChpbmplY3RlZCBhdCBjcmVhdGlvbiB0aW1lKVxuXHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAgICAgICAgK1xuXHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgfFxuXHQgKiAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tK1xuXHQgKiAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgdiAgICAgICAgfCAgICAgICAgICAgICAgfFxuXHQgKiAgICAgICAgICAgICAgICAgICAgfCAgICAgICstLS0tLS0tLS0tLS0tLS0rICAgfCAgICAgICAgICAgICAgfFxuXHQgKiAgICAgICAgICAgICAgICAgICAgfCAgICstLXwgICAgd3JhcHBlcjEgICB8LS0tfC0tLS0rICAgICAgICAgfFxuXHQgKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICstLS0tLS0tLS0tLS0tLS0rICAgdiAgICB8ICAgICAgICAgfFxuXHQgKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgICAgICAgKy0tLS0tLS0tLS0tLS0rICB8ICAgICAgICAgfFxuXHQgKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgICstLS0tfCAgIHdyYXBwZXIyICB8LS0tLS0tLS0rICAgfFxuXHQgKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgIHwgICAgKy0tLS0tLS0tLS0tLS0rICB8ICAgICB8ICAgfFxuXHQgKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgIHwgICAgICAgICAgICAgICAgICAgICB8ICAgICB8ICAgfFxuXHQgKiAgICAgICAgICAgICAgICAgICAgfCAgIHYgICAgIHYgICAgICAgICAgICAgICAgICAgICB2ICAgICB2ICAgfCB3cmFwcGVyXG5cdCAqICAgICAgICAgICAgICAgICAgICB8ICstLS0rICstLS0rICAgKy0tLS0tLS0tLSsgICArLS0tKyArLS0tKyB8IGludmFyaWFudHNcblx0ICogcGVyZm9ybShhbnlNZXRob2QpIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHwgbWFpbnRhaW5lZFxuXHQgKiArLS0tLS0tLS0tLS0tLS0tLS0+fC18LS0tfC18LS0tfC0tPnxhbnlNZXRob2R8LS0tfC0tLXwtfC0tLXwtfC0tLS0tLS0tPlxuXHQgKiAgICAgICAgICAgICAgICAgICAgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfFxuXHQgKiAgICAgICAgICAgICAgICAgICAgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfFxuXHQgKiAgICAgICAgICAgICAgICAgICAgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfFxuXHQgKiAgICAgICAgICAgICAgICAgICAgfCArLS0tKyArLS0tKyAgICstLS0tLS0tLS0rICAgKy0tLSsgKy0tLSsgfFxuXHQgKiAgICAgICAgICAgICAgICAgICAgfCAgaW5pdGlhbGl6ZSAgICAgICAgICAgICAgICAgICAgY2xvc2UgICAgfFxuXHQgKiAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xuXHQgKiA8L3ByZT5cblx0ICpcblx0ICogVXNlIGNhc2VzOlxuXHQgKiAtIFByZXNlcnZpbmcgdGhlIGlucHV0IHNlbGVjdGlvbiByYW5nZXMgYmVmb3JlL2FmdGVyIHJlY29uY2lsaWF0aW9uLlxuXHQgKiAgIFJlc3RvcmluZyBzZWxlY3Rpb24gZXZlbiBpbiB0aGUgZXZlbnQgb2YgYW4gdW5leHBlY3RlZCBlcnJvci5cblx0ICogLSBEZWFjdGl2YXRpbmcgZXZlbnRzIHdoaWxlIHJlYXJyYW5naW5nIHRoZSBET00sIHByZXZlbnRpbmcgYmx1cnMvZm9jdXNlcyxcblx0ICogICB3aGlsZSBndWFyYW50ZWVpbmcgdGhhdCBhZnRlcndhcmRzLCB0aGUgZXZlbnQgc3lzdGVtIGlzIHJlYWN0aXZhdGVkLlxuXHQgKiAtIEZsdXNoaW5nIGEgcXVldWUgb2YgY29sbGVjdGVkIERPTSBtdXRhdGlvbnMgdG8gdGhlIG1haW4gVUkgdGhyZWFkIGFmdGVyIGFcblx0ICogICByZWNvbmNpbGlhdGlvbiB0YWtlcyBwbGFjZSBpbiBhIHdvcmtlciB0aHJlYWQuXG5cdCAqIC0gSW52b2tpbmcgYW55IGNvbGxlY3RlZCBgY29tcG9uZW50RGlkVXBkYXRlYCBjYWxsYmFja3MgYWZ0ZXIgcmVuZGVyaW5nIG5ld1xuXHQgKiAgIGNvbnRlbnQuXG5cdCAqIC0gKEZ1dHVyZSB1c2UgY2FzZSk6IFdyYXBwaW5nIHBhcnRpY3VsYXIgZmx1c2hlcyBvZiB0aGUgYFJlYWN0V29ya2VyYCBxdWV1ZVxuXHQgKiAgIHRvIHByZXNlcnZlIHRoZSBgc2Nyb2xsVG9wYCAoYW4gYXV0b21hdGljIHNjcm9sbCBhd2FyZSBET00pLlxuXHQgKiAtIChGdXR1cmUgdXNlIGNhc2UpOiBMYXlvdXQgY2FsY3VsYXRpb25zIGJlZm9yZSBhbmQgYWZ0ZXIgRE9NIHVwYXRlcy5cblx0ICpcblx0ICogVHJhbnNhY3Rpb25hbCBwbHVnaW4gQVBJOlxuXHQgKiAtIEEgbW9kdWxlIHRoYXQgaGFzIGFuIGBpbml0aWFsaXplYCBtZXRob2QgdGhhdCByZXR1cm5zIGFueSBwcmVjb21wdXRhdGlvbi5cblx0ICogLSBhbmQgYSBgY2xvc2VgIG1ldGhvZCB0aGF0IGFjY2VwdHMgdGhlIHByZWNvbXB1dGF0aW9uLiBgY2xvc2VgIGlzIGludm9rZWRcblx0ICogICB3aGVuIHRoZSB3cmFwcGVkIHByb2Nlc3MgaXMgY29tcGxldGVkLCBvciBoYXMgZmFpbGVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5PFRyYW5zYWN0aW9uYWxXcmFwcGVyPn0gdHJhbnNhY3Rpb25XcmFwcGVyIFdyYXBwZXIgbW9kdWxlc1xuXHQgKiB0aGF0IGltcGxlbWVudCBgaW5pdGlhbGl6ZWAgYW5kIGBjbG9zZWAuXG5cdCAqIEByZXR1cm4ge1RyYW5zYWN0aW9ufSBTaW5nbGUgdHJhbnNhY3Rpb24gZm9yIHJldXNlIGluIHRocmVhZC5cblx0ICpcblx0ICogQGNsYXNzIFRyYW5zYWN0aW9uXG5cdCAqL1xuXHR2YXIgTWl4aW4gPSB7XG5cdCAgLyoqXG5cdCAgICogU2V0cyB1cCB0aGlzIGluc3RhbmNlIHNvIHRoYXQgaXQgaXMgcHJlcGFyZWQgZm9yIGNvbGxlY3RpbmcgbWV0cmljcy4gRG9lc1xuXHQgICAqIHNvIHN1Y2ggdGhhdCB0aGlzIHNldHVwIG1ldGhvZCBtYXkgYmUgdXNlZCBvbiBhbiBpbnN0YW5jZSB0aGF0IGlzIGFscmVhZHlcblx0ICAgKiBpbml0aWFsaXplZCwgaW4gYSB3YXkgdGhhdCBkb2VzIG5vdCBjb25zdW1lIGFkZGl0aW9uYWwgbWVtb3J5IHVwb24gcmV1c2UuXG5cdCAgICogVGhhdCBjYW4gYmUgdXNlZnVsIGlmIHlvdSBkZWNpZGUgdG8gbWFrZSB5b3VyIHN1YmNsYXNzIG9mIHRoaXMgbWl4aW4gYVxuXHQgICAqIFwiUG9vbGVkQ2xhc3NcIi5cblx0ICAgKi9cblx0ICByZWluaXRpYWxpemVUcmFuc2FjdGlvbjogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLmdldFRyYW5zYWN0aW9uV3JhcHBlcnMoKTtcblx0ICAgIGlmICghdGhpcy53cmFwcGVySW5pdERhdGEpIHtcblx0ICAgICAgdGhpcy53cmFwcGVySW5pdERhdGEgPSBbXTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRoaXMud3JhcHBlckluaXREYXRhLmxlbmd0aCA9IDA7XG5cdCAgICB9XG5cdCAgICB0aGlzLl9pc0luVHJhbnNhY3Rpb24gPSBmYWxzZTtcblx0ICB9LFxuXHRcblx0ICBfaXNJblRyYW5zYWN0aW9uOiBmYWxzZSxcblx0XG5cdCAgLyoqXG5cdCAgICogQGFic3RyYWN0XG5cdCAgICogQHJldHVybiB7QXJyYXk8VHJhbnNhY3Rpb25XcmFwcGVyPn0gQXJyYXkgb2YgdHJhbnNhY3Rpb24gd3JhcHBlcnMuXG5cdCAgICovXG5cdCAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogbnVsbCxcblx0XG5cdCAgaXNJblRyYW5zYWN0aW9uOiBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiAhIXRoaXMuX2lzSW5UcmFuc2FjdGlvbjtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBFeGVjdXRlcyB0aGUgZnVuY3Rpb24gd2l0aGluIGEgc2FmZXR5IHdpbmRvdy4gVXNlIHRoaXMgZm9yIHRoZSB0b3AgbGV2ZWxcblx0ICAgKiBtZXRob2RzIHRoYXQgcmVzdWx0IGluIGxhcmdlIGFtb3VudHMgb2YgY29tcHV0YXRpb24vbXV0YXRpb25zIHRoYXQgd291bGRcblx0ICAgKiBuZWVkIHRvIGJlIHNhZmV0eSBjaGVja2VkLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWV0aG9kIE1lbWJlciBvZiBzY29wZSB0byBjYWxsLlxuXHQgICAqIEBwYXJhbSB7T2JqZWN0fSBzY29wZSBTY29wZSB0byBpbnZva2UgZnJvbS5cblx0ICAgKiBAcGFyYW0ge09iamVjdD89fSBhcmdzLi4uIEFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBtZXRob2QgKG9wdGlvbmFsKS5cblx0ICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlbHBzIHByZXZlbnQgbmVlZCB0byBiaW5kIGluIG1hbnkgY2FzZXMuXG5cdCAgICogQHJldHVybiBSZXR1cm4gdmFsdWUgZnJvbSBgbWV0aG9kYC5cblx0ICAgKi9cblx0ICBwZXJmb3JtOiBmdW5jdGlvbihtZXRob2QsIHNjb3BlLCBhLCBiLCBjLCBkLCBlLCBmKSB7XG5cdCAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICAhdGhpcy5pc0luVHJhbnNhY3Rpb24oKSxcblx0ICAgICAgJ1RyYW5zYWN0aW9uLnBlcmZvcm0oLi4uKTogQ2Fubm90IGluaXRpYWxpemUgYSB0cmFuc2FjdGlvbiB3aGVuIHRoZXJlICcgK1xuXHQgICAgICAnaXMgYWxyZWFkeSBhbiBvdXRzdGFuZGluZyB0cmFuc2FjdGlvbi4nXG5cdCAgICApIDogaW52YXJpYW50KCF0aGlzLmlzSW5UcmFuc2FjdGlvbigpKSk7XG5cdCAgICB2YXIgZXJyb3JUaHJvd247XG5cdCAgICB2YXIgcmV0O1xuXHQgICAgdHJ5IHtcblx0ICAgICAgdGhpcy5faXNJblRyYW5zYWN0aW9uID0gdHJ1ZTtcblx0ICAgICAgLy8gQ2F0Y2hpbmcgZXJyb3JzIG1ha2VzIGRlYnVnZ2luZyBtb3JlIGRpZmZpY3VsdCwgc28gd2Ugc3RhcnQgd2l0aFxuXHQgICAgICAvLyBlcnJvclRocm93biBzZXQgdG8gdHJ1ZSBiZWZvcmUgc2V0dGluZyBpdCB0byBmYWxzZSBhZnRlciBjYWxsaW5nXG5cdCAgICAgIC8vIGNsb3NlIC0tIGlmIGl0J3Mgc3RpbGwgc2V0IHRvIHRydWUgaW4gdGhlIGZpbmFsbHkgYmxvY2ssIGl0IG1lYW5zXG5cdCAgICAgIC8vIG9uZSBvZiB0aGVzZSBjYWxscyB0aHJldy5cblx0ICAgICAgZXJyb3JUaHJvd24gPSB0cnVlO1xuXHQgICAgICB0aGlzLmluaXRpYWxpemVBbGwoMCk7XG5cdCAgICAgIHJldCA9IG1ldGhvZC5jYWxsKHNjb3BlLCBhLCBiLCBjLCBkLCBlLCBmKTtcblx0ICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcblx0ICAgIH0gZmluYWxseSB7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG5cdCAgICAgICAgICAvLyBJZiBgbWV0aG9kYCB0aHJvd3MsIHByZWZlciB0byBzaG93IHRoYXQgc3RhY2sgdHJhY2Ugb3ZlciBhbnkgdGhyb3duXG5cdCAgICAgICAgICAvLyBieSBpbnZva2luZyBgY2xvc2VBbGxgLlxuXHQgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgdGhpcy5jbG9zZUFsbCgwKTtcblx0ICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAvLyBTaW5jZSBgbWV0aG9kYCBkaWRuJ3QgdGhyb3csIHdlIGRvbid0IHdhbnQgdG8gc2lsZW5jZSB0aGUgZXhjZXB0aW9uXG5cdCAgICAgICAgICAvLyBoZXJlLlxuXHQgICAgICAgICAgdGhpcy5jbG9zZUFsbCgwKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgdGhpcy5faXNJblRyYW5zYWN0aW9uID0gZmFsc2U7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiByZXQ7XG5cdCAgfSxcblx0XG5cdCAgaW5pdGlhbGl6ZUFsbDogZnVuY3Rpb24oc3RhcnRJbmRleCkge1xuXHQgICAgdmFyIHRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnM7XG5cdCAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRyYW5zYWN0aW9uV3JhcHBlcnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgdmFyIHdyYXBwZXIgPSB0cmFuc2FjdGlvbldyYXBwZXJzW2ldO1xuXHQgICAgICB0cnkge1xuXHQgICAgICAgIC8vIENhdGNoaW5nIGVycm9ycyBtYWtlcyBkZWJ1Z2dpbmcgbW9yZSBkaWZmaWN1bHQsIHNvIHdlIHN0YXJ0IHdpdGggdGhlXG5cdCAgICAgICAgLy8gT0JTRVJWRURfRVJST1Igc3RhdGUgYmVmb3JlIG92ZXJ3cml0aW5nIGl0IHdpdGggdGhlIHJlYWwgcmV0dXJuIHZhbHVlXG5cdCAgICAgICAgLy8gb2YgaW5pdGlhbGl6ZSAtLSBpZiBpdCdzIHN0aWxsIHNldCB0byBPQlNFUlZFRF9FUlJPUiBpbiB0aGUgZmluYWxseVxuXHQgICAgICAgIC8vIGJsb2NrLCBpdCBtZWFucyB3cmFwcGVyLmluaXRpYWxpemUgdGhyZXcuXG5cdCAgICAgICAgdGhpcy53cmFwcGVySW5pdERhdGFbaV0gPSBUcmFuc2FjdGlvbi5PQlNFUlZFRF9FUlJPUjtcblx0ICAgICAgICB0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9IHdyYXBwZXIuaW5pdGlhbGl6ZSA/XG5cdCAgICAgICAgICB3cmFwcGVyLmluaXRpYWxpemUuY2FsbCh0aGlzKSA6XG5cdCAgICAgICAgICBudWxsO1xuXHQgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgIGlmICh0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9PT0gVHJhbnNhY3Rpb24uT0JTRVJWRURfRVJST1IpIHtcblx0ICAgICAgICAgIC8vIFRoZSBpbml0aWFsaXplciBmb3Igd3JhcHBlciBpIHRocmV3IGFuIGVycm9yOyBpbml0aWFsaXplIHRoZVxuXHQgICAgICAgICAgLy8gcmVtYWluaW5nIHdyYXBwZXJzIGJ1dCBzaWxlbmNlIGFueSBleGNlcHRpb25zIGZyb20gdGhlbSB0byBlbnN1cmVcblx0ICAgICAgICAgIC8vIHRoYXQgdGhlIGZpcnN0IGVycm9yIGlzIHRoZSBvbmUgdG8gYnViYmxlIHVwLlxuXHQgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplQWxsKGkgKyAxKTtcblx0ICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIEludm9rZXMgZWFjaCBvZiBgdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzLmNsb3NlW2ldYCBmdW5jdGlvbnMsIHBhc3NpbmcgaW50b1xuXHQgICAqIHRoZW0gdGhlIHJlc3BlY3RpdmUgcmV0dXJuIHZhbHVlcyBvZiBgdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzLmluaXRbaV1gXG5cdCAgICogKGBjbG9zZWBycyB0aGF0IGNvcnJlc3BvbmQgdG8gaW5pdGlhbGl6ZXJzIHRoYXQgZmFpbGVkIHdpbGwgbm90IGJlXG5cdCAgICogaW52b2tlZCkuXG5cdCAgICovXG5cdCAgY2xvc2VBbGw6IGZ1bmN0aW9uKHN0YXJ0SW5kZXgpIHtcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgIHRoaXMuaXNJblRyYW5zYWN0aW9uKCksXG5cdCAgICAgICdUcmFuc2FjdGlvbi5jbG9zZUFsbCgpOiBDYW5ub3QgY2xvc2UgdHJhbnNhY3Rpb24gd2hlbiBub25lIGFyZSBvcGVuLidcblx0ICAgICkgOiBpbnZhcmlhbnQodGhpcy5pc0luVHJhbnNhY3Rpb24oKSkpO1xuXHQgICAgdmFyIHRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnM7XG5cdCAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRyYW5zYWN0aW9uV3JhcHBlcnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgdmFyIHdyYXBwZXIgPSB0cmFuc2FjdGlvbldyYXBwZXJzW2ldO1xuXHQgICAgICB2YXIgaW5pdERhdGEgPSB0aGlzLndyYXBwZXJJbml0RGF0YVtpXTtcblx0ICAgICAgdmFyIGVycm9yVGhyb3duO1xuXHQgICAgICB0cnkge1xuXHQgICAgICAgIC8vIENhdGNoaW5nIGVycm9ycyBtYWtlcyBkZWJ1Z2dpbmcgbW9yZSBkaWZmaWN1bHQsIHNvIHdlIHN0YXJ0IHdpdGhcblx0ICAgICAgICAvLyBlcnJvclRocm93biBzZXQgdG8gdHJ1ZSBiZWZvcmUgc2V0dGluZyBpdCB0byBmYWxzZSBhZnRlciBjYWxsaW5nXG5cdCAgICAgICAgLy8gY2xvc2UgLS0gaWYgaXQncyBzdGlsbCBzZXQgdG8gdHJ1ZSBpbiB0aGUgZmluYWxseSBibG9jaywgaXQgbWVhbnNcblx0ICAgICAgICAvLyB3cmFwcGVyLmNsb3NlIHRocmV3LlxuXHQgICAgICAgIGVycm9yVGhyb3duID0gdHJ1ZTtcblx0ICAgICAgICBpZiAoaW5pdERhdGEgIT09IFRyYW5zYWN0aW9uLk9CU0VSVkVEX0VSUk9SKSB7XG5cdCAgICAgICAgICB3cmFwcGVyLmNsb3NlICYmIHdyYXBwZXIuY2xvc2UuY2FsbCh0aGlzLCBpbml0RGF0YSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVycm9yVGhyb3duID0gZmFsc2U7XG5cdCAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG5cdCAgICAgICAgICAvLyBUaGUgY2xvc2VyIGZvciB3cmFwcGVyIGkgdGhyZXcgYW4gZXJyb3I7IGNsb3NlIHRoZSByZW1haW5pbmdcblx0ICAgICAgICAgIC8vIHdyYXBwZXJzIGJ1dCBzaWxlbmNlIGFueSBleGNlcHRpb25zIGZyb20gdGhlbSB0byBlbnN1cmUgdGhhdCB0aGVcblx0ICAgICAgICAgIC8vIGZpcnN0IGVycm9yIGlzIHRoZSBvbmUgdG8gYnViYmxlIHVwLlxuXHQgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgdGhpcy5jbG9zZUFsbChpICsgMSk7XG5cdCAgICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICB0aGlzLndyYXBwZXJJbml0RGF0YS5sZW5ndGggPSAwO1xuXHQgIH1cblx0fTtcblx0XG5cdHZhciBUcmFuc2FjdGlvbiA9IHtcblx0XG5cdCAgTWl4aW46IE1peGluLFxuXHRcblx0ICAvKipcblx0ICAgKiBUb2tlbiB0byBsb29rIGZvciB0byBkZXRlcm1pbmUgaWYgYW4gZXJyb3Igb2NjdXJlZC5cblx0ICAgKi9cblx0ICBPQlNFUlZFRF9FUlJPUjoge31cblx0XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFRyYW5zYWN0aW9uO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogMzcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XG5cdCAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgd2FybmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdFxuXHR2YXIgUmVhY3RFbGVtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0dmFyIFJlYWN0TGVnYWN5RWxlbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpO1xuXHR2YXIgUmVhY3ROYXRpdmVDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4KTtcblx0dmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTtcblx0XG5cdC8qKlxuXHQgKiBHaXZlbiBhbiBgZWxlbWVudGAgY3JlYXRlIGFuIGluc3RhbmNlIHRoYXQgd2lsbCBhY3R1YWxseSBiZSBtb3VudGVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuXHQgKiBAcGFyYW0geyp9IHBhcmVudENvbXBvc2l0ZVR5cGUgVGhlIGNvbXBvc2l0ZSB0eXBlIHRoYXQgcmVzb2x2ZWQgdGhpcy5cblx0ICogQHJldHVybiB7b2JqZWN0fSBBIG5ldyBpbnN0YW5jZSBvZiB0aGUgZWxlbWVudCdzIGNvbnN0cnVjdG9yLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRmdW5jdGlvbiBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGVsZW1lbnQsIHBhcmVudENvbXBvc2l0ZVR5cGUpIHtcblx0ICB2YXIgaW5zdGFuY2U7XG5cdFxuXHQgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuXHQgICAgICBlbGVtZW50ICYmICh0eXBlb2YgZWxlbWVudC50eXBlID09PSAnZnVuY3Rpb24nIHx8XG5cdCAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnKSxcblx0ICAgICAgJ09ubHkgZnVuY3Rpb25zIG9yIHN0cmluZ3MgY2FuIGJlIG1vdW50ZWQgYXMgUmVhY3QgY29tcG9uZW50cy4nXG5cdCAgICApIDogbnVsbCk7XG5cdFxuXHQgICAgLy8gUmVzb2x2ZSBtb2NrIGluc3RhbmNlc1xuXHQgICAgaWYgKGVsZW1lbnQudHlwZS5fbW9ja2VkUmVhY3RDbGFzc0NvbnN0cnVjdG9yKSB7XG5cdCAgICAgIC8vIElmIHRoaXMgaXMgYSBtb2NrZWQgY2xhc3MsIHdlIHRyZWF0IHRoZSBsZWdhY3kgZmFjdG9yeSBhcyBpZiBpdCB3YXMgdGhlXG5cdCAgICAgIC8vIGNsYXNzIGNvbnN0cnVjdG9yIGZvciBmdXR1cmUgcHJvb2ZpbmcgdW5pdCB0ZXN0cy4gQmVjYXVzZSB0aGlzIG1pZ2h0XG5cdCAgICAgIC8vIGJlIG1vY2tlZCBhcyBhIGxlZ2FjeSBmYWN0b3J5LCB3ZSBpZ25vcmUgYW55IHdhcm5pbmdzIHRyaWdnZXJkIGJ5XG5cdCAgICAgIC8vIHRoaXMgdGVtcG9yYXJ5IGhhY2suXG5cdCAgICAgIFJlYWN0TGVnYWN5RWxlbWVudC5faXNMZWdhY3lDYWxsV2FybmluZ0VuYWJsZWQgPSBmYWxzZTtcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICBpbnN0YW5jZSA9IG5ldyBlbGVtZW50LnR5cGUuX21vY2tlZFJlYWN0Q2xhc3NDb25zdHJ1Y3Rvcihcblx0ICAgICAgICAgIGVsZW1lbnQucHJvcHNcblx0ICAgICAgICApO1xuXHQgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgIFJlYWN0TGVnYWN5RWxlbWVudC5faXNMZWdhY3lDYWxsV2FybmluZ0VuYWJsZWQgPSB0cnVlO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICAvLyBJZiB0aGUgbW9jayBpbXBsZW1lbnRhdGlvbiB3YXMgYSBsZWdhY3kgZmFjdG9yeSwgdGhlbiBpdCByZXR1cm5zIGFcblx0ICAgICAgLy8gZWxlbWVudC4gV2UgbmVlZCB0byB0dXJuIHRoaXMgaW50byBhIHJlYWwgY29tcG9uZW50IGluc3RhbmNlLlxuXHQgICAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGluc3RhbmNlKSkge1xuXHQgICAgICAgIGluc3RhbmNlID0gbmV3IGluc3RhbmNlLnR5cGUoaW5zdGFuY2UucHJvcHMpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgcmVuZGVyID0gaW5zdGFuY2UucmVuZGVyO1xuXHQgICAgICBpZiAoIXJlbmRlcikge1xuXHQgICAgICAgIC8vIEZvciBhdXRvLW1vY2tlZCBmYWN0b3JpZXMsIHRoZSBwcm90b3R5cGUgaXNuJ3Qgc2hpbW1lZCBhbmQgdGhlcmVmb3JlXG5cdCAgICAgICAgLy8gdGhlcmUgaXMgbm8gcmVuZGVyIGZ1bmN0aW9uIG9uIHRoZSBpbnN0YW5jZS4gV2UgcmVwbGFjZSB0aGUgd2hvbGVcblx0ICAgICAgICAvLyBjb21wb25lbnQgd2l0aCBhbiBlbXB0eSBjb21wb25lbnQgaW5zdGFuY2UgaW5zdGVhZC5cblx0ICAgICAgICBlbGVtZW50ID0gUmVhY3RFbXB0eUNvbXBvbmVudC5nZXRFbXB0eUNvbXBvbmVudCgpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGlmIChyZW5kZXIuX2lzTW9ja0Z1bmN0aW9uICYmICFyZW5kZXIuX2dldE1vY2tJbXBsZW1lbnRhdGlvbigpKSB7XG5cdCAgICAgICAgICAvLyBBdXRvLW1vY2tlZCBjb21wb25lbnRzIG1heSBoYXZlIGEgcHJvdG90eXBlIHdpdGggYSBtb2NrZWQgcmVuZGVyXG5cdCAgICAgICAgICAvLyBmdW5jdGlvbi4gRm9yIHRob3NlLCB3ZSdsbCBuZWVkIHRvIG1vY2sgdGhlIHJlc3VsdCBvZiB0aGUgcmVuZGVyXG5cdCAgICAgICAgICAvLyBzaW5jZSB3ZSBjb25zaWRlciB1bmRlZmluZWQgdG8gYmUgaW52YWxpZCByZXN1bHRzIGZyb20gcmVuZGVyLlxuXHQgICAgICAgICAgcmVuZGVyLm1vY2tJbXBsZW1lbnRhdGlvbihcblx0ICAgICAgICAgICAgUmVhY3RFbXB0eUNvbXBvbmVudC5nZXRFbXB0eUNvbXBvbmVudFxuXHQgICAgICAgICAgKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaW5zdGFuY2UuY29uc3RydWN0KGVsZW1lbnQpO1xuXHQgICAgICAgIHJldHVybiBpbnN0YW5jZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgLy8gU3BlY2lhbCBjYXNlIHN0cmluZyB2YWx1ZXNcblx0ICBpZiAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcblx0ICAgIGluc3RhbmNlID0gUmVhY3ROYXRpdmVDb21wb25lbnQuY3JlYXRlSW5zdGFuY2VGb3JUYWcoXG5cdCAgICAgIGVsZW1lbnQudHlwZSxcblx0ICAgICAgZWxlbWVudC5wcm9wcyxcblx0ICAgICAgcGFyZW50Q29tcG9zaXRlVHlwZVxuXHQgICAgKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgLy8gTm9ybWFsIGNhc2UgZm9yIG5vbi1tb2NrcyBhbmQgbm9uLXN0cmluZ3Ncblx0ICAgIGluc3RhbmNlID0gbmV3IGVsZW1lbnQudHlwZShlbGVtZW50LnByb3BzKTtcblx0ICB9XG5cdFxuXHQgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuXHQgICAgICB0eXBlb2YgaW5zdGFuY2UuY29uc3RydWN0ID09PSAnZnVuY3Rpb24nICYmXG5cdCAgICAgIHR5cGVvZiBpbnN0YW5jZS5tb3VudENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHQgICAgICB0eXBlb2YgaW5zdGFuY2UucmVjZWl2ZUNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyxcblx0ICAgICAgJ09ubHkgUmVhY3QgQ29tcG9uZW50cyBjYW4gYmUgbW91bnRlZC4nXG5cdCAgICApIDogbnVsbCk7XG5cdCAgfVxuXHRcblx0ICAvLyBUaGlzIGFjdHVhbGx5IHNldHMgdXAgdGhlIGludGVybmFsIGluc3RhbmNlLiBUaGlzIHdpbGwgYmVjb21lIGRlY291cGxlZFxuXHQgIC8vIGZyb20gdGhlIHB1YmxpYyBpbnN0YW5jZSBpbiBhIGZ1dHVyZSBkaWZmLlxuXHQgIGluc3RhbmNlLmNvbnN0cnVjdChlbGVtZW50KTtcblx0XG5cdCAgcmV0dXJuIGluc3RhbmNlO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQ7XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiAzOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBtb25pdG9yQ29kZVVzZVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIGludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHQvKipcblx0ICogUHJvdmlkZXMgb3Blbi1zb3VyY2UgY29tcGF0aWJsZSBpbnN0cnVtZW50YXRpb24gZm9yIG1vbml0b3JpbmcgY2VydGFpbiBBUElcblx0ICogdXNlcyBiZWZvcmUgd2UncmUgcmVhZHkgdG8gaXNzdWUgYSB3YXJuaW5nIG9yIHJlZmFjdG9yLiBJdCBhY2NlcHRzIGFuIGV2ZW50XG5cdCAqIG5hbWUgd2hpY2ggbWF5IG9ubHkgY29udGFpbiB0aGUgY2hhcmFjdGVycyBbYS16MC05X10gYW5kIGFuIG9wdGlvbmFsIGRhdGFcblx0ICogb2JqZWN0IHdpdGggZnVydGhlciBpbmZvcm1hdGlvbi5cblx0ICovXG5cdFxuXHRmdW5jdGlvbiBtb25pdG9yQ29kZVVzZShldmVudE5hbWUsIGRhdGEpIHtcblx0ICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgZXZlbnROYW1lICYmICEvW15hLXowLTlfXS8udGVzdChldmVudE5hbWUpLFxuXHQgICAgJ1lvdSBtdXN0IHByb3ZpZGUgYW4gZXZlbnROYW1lIHVzaW5nIG9ubHkgdGhlIGNoYXJhY3RlcnMgW2EtejAtOV9dJ1xuXHQgICkgOiBpbnZhcmlhbnQoZXZlbnROYW1lICYmICEvW15hLXowLTlfXS8udGVzdChldmVudE5hbWUpKSk7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gbW9uaXRvckNvZGVVc2U7XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiAzOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNik7XG5cblxuLyoqKi8gfSxcbi8qIDQwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg4KSgpO1xuXHRleHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJib2R5e2JhY2tncm91bmQtY29sb3I6I2ZlZmVmZTtjb2xvcjojMzMzfVwiLCBcIlwiXSk7XG5cbi8qKiovIH0sXG4vKiA0MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIFJlYWN0ICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzkpLFxuXHQgICAgZGVlcEVxdWFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDApO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBjb21wb25lbnQ7XG5cdG1vZHVsZS5leHBvcnRzLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHNob3VsZENvbXBvbmVudFVwZGF0ZTtcblx0bW9kdWxlLmV4cG9ydHMuaXNFcXVhbFN0YXRlICA9IGZ1bmN0aW9uIGlzRXF1YWxTdGF0ZSAoKSB7IHJldHVybiBkZWVwRXF1YWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcblx0bW9kdWxlLmV4cG9ydHMuaXNFcXVhbEN1cnNvciA9IGZ1bmN0aW9uIGlzRXF1YWxDdXJzb3IgKGEsIGIpIHsgcmV0dXJuIHVuQ3Vyc29yKGEpID09PSB1bkN1cnNvcihiKTsgfTtcblx0bW9kdWxlLmV4cG9ydHMuaXNDdXJzb3IgPSBpc0N1cnNvcjtcblx0XG5cdHZhciBkZWJ1Zztcblx0bW9kdWxlLmV4cG9ydHMuZGVidWcgPSBmdW5jdGlvbiAocGF0dGVybikge1xuXHQgIHZhciByZWdleCA9IG5ldyBSZWdFeHAocGF0dGVybiB8fCAnLionKTtcblx0ICBkZWJ1ZyA9IGZ1bmN0aW9uIChzdHIpIHtcblx0ICAgIHZhciBrZXkgPSB0aGlzLl9jdXJyZW50RWxlbWVudCAmJiB0aGlzLl9jdXJyZW50RWxlbWVudC5rZXkgPyAnIGtleT0nICsgdGhpcy5fY3VycmVudEVsZW1lbnQua2V5IDogJyc7XG5cdCAgICB2YXIgbmFtZSA9IHRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWU7XG5cdCAgICB2YXIgdGFnID0gbmFtZSArIGtleTtcblx0ICAgIGlmICgoa2V5IHx8IG5hbWUpICYmIHJlZ2V4LnRlc3QodGFnKSkgY29uc29sZS5kZWJ1ZygnPCcgKyB0YWcgKyAnPjogJyArIHN0cik7XG5cdCAgfTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gY29tcG9uZW50IChkaXNwbGF5TmFtZSwgbWl4aW5zLCByZW5kZXIpIHtcblx0ICB2YXIgb3B0aW9ucyA9IGNyZWF0ZURlZmF1bHRBcmd1bWVudHMoZGlzcGxheU5hbWUsIG1peGlucywgcmVuZGVyKTtcblx0ICB2YXIgbWV0aG9kU3RhdGljcyA9IHBpY2tTdGF0aWNNaXhpbnMob3B0aW9ucy5taXhpbnMpO1xuXHRcblx0ICB2YXIgY29tcG9uZW50T2JqZWN0ID0ge1xuXHQgICAgZGlzcGxheU5hbWU6IG9wdGlvbnMuZGlzcGxheU5hbWUsXG5cdCAgICBtaXhpbnM6IG9wdGlvbnMubWl4aW5zLFxuXHQgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuXHQgICAgICBpZiAoZGVidWcpIGRlYnVnLmNhbGwodGhpcywgJ3JlbmRlcicpO1xuXHQgICAgICByZXR1cm4gb3B0aW9ucy5yZW5kZXIuY2FsbCh0aGlzLCB0aGlzLnByb3BzLCB0aGlzLnByb3BzLnN0YXRpY3MpO1xuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIGlmIChtZXRob2RTdGF0aWNzKSB7XG5cdCAgICBjb21wb25lbnRPYmplY3Quc3RhdGljcyA9IG1ldGhvZFN0YXRpY3M7XG5cdCAgICByZW1vdmVPbGRTdGF0aWNNZXRob2RzKG9wdGlvbnMubWl4aW5zKTtcblx0ICB9XG5cdFxuXHQgIHZhciBDb21wb25lbnQgPSBSZWFjdC5jcmVhdGVDbGFzcyhjb21wb25lbnRPYmplY3QpO1xuXHRcblx0ICB2YXIgY3JlYXRlID0gZnVuY3Rpb24gKGtleSwgcHJvcHMpIHtcblx0ICAgIHZhciBjaGlsZHJlbiA9IHRvQXJyYXkoYXJndW1lbnRzKS5maWx0ZXIoUmVhY3QuaXNWYWxpZEVsZW1lbnQpO1xuXHRcblx0ICAgIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuXHQgICAgICBwcm9wcyA9IGtleTtcblx0ICAgICAga2V5ICAgPSB2b2lkIDA7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKCFwcm9wcykge1xuXHQgICAgICBwcm9wcyA9IHsgfTtcblx0ICAgIH1cblx0XG5cdCAgICBpZiAoaXNDdXJzb3IocHJvcHMpKSB7XG5cdCAgICAgIHByb3BzID0geyBjdXJzb3I6IHByb3BzIH07XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKGtleSkge1xuXHQgICAgICBwcm9wcy5rZXkgPSBrZXk7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKCEhY2hpbGRyZW4ubGVuZ3RoKSB7XG5cdCAgICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG5cdCAgICB9XG5cdFxuXHQgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcyk7XG5cdCAgfTtcblx0XG5cdCAgY3JlYXRlLmpzeCA9IENvbXBvbmVudDtcblx0XG5cdCAgaWYgKG1ldGhvZFN0YXRpY3MpIHtcblx0ICAgIGNyZWF0ZSA9IGV4dGVuZChjcmVhdGUsIG1ldGhvZFN0YXRpY3MpO1xuXHQgIH1cblx0XG5cdCAgcmV0dXJuIGNyZWF0ZTtcblx0fTtcblx0XG5cdGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZSAobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcblx0ICB2YXIgaXNFcXVhbFN0YXRlICA9IG1vZHVsZS5leHBvcnRzLmlzRXF1YWxTdGF0ZTtcblx0XG5cdCAgdmFyIGlzTm90SWdub3JhYmxlID0gbm90KG9yKGlzU3RhdGljcywgaXNDaGlsZHJlbikpO1xuXHRcblx0ICB2YXIgbmV4dEN1cnNvcnMgICAgPSBmaWx0ZXJLZXlWYWx1ZShndWFyYW50ZWVPYmplY3QobmV4dFByb3BzKSwgaXNOb3RJZ25vcmFibGUpLFxuXHQgICAgICBjdXJyZW50Q3Vyc29ycyA9IGZpbHRlcktleVZhbHVlKGd1YXJhbnRlZU9iamVjdCh0aGlzLnByb3BzKSwgaXNOb3RJZ25vcmFibGUpO1xuXHRcblx0ICB2YXIgbmV4dEN1cnNvcnNLZXlzICAgID0gT2JqZWN0LmtleXMobmV4dEN1cnNvcnMpLFxuXHQgICAgICBjdXJyZW50Q3Vyc29yc0tleXMgPSBPYmplY3Qua2V5cyhjdXJyZW50Q3Vyc29ycyk7XG5cdFxuXHQgIGlmIChjdXJyZW50Q3Vyc29yc0tleXMubGVuZ3RoICE9PSBuZXh0Q3Vyc29yc0tleXMubGVuZ3RoKSB7XG5cdCAgICBpZiAoZGVidWcpIGRlYnVnLmNhbGwodGhpcywgJ3Nob3VsZENvbXBvbmVudFVwZGF0ZSA9PiB0cnVlIChudW1iZXIgb2YgY3Vyc29ycyBkaWZmZXIpJyk7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdFxuXHQgIGlmIChoYXNEaWZmZXJlbnRLZXlzKGN1cnJlbnRDdXJzb3JzS2V5cywgY3VycmVudEN1cnNvcnMsIG5leHRDdXJzb3JzKSkge1xuXHQgICAgaWYgKGRlYnVnKSBkZWJ1Zy5jYWxsKHRoaXMsICdzaG91bGRDb21wb25lbnRVcGRhdGUgPT4gdHJ1ZSAoY3Vyc29ycyBoYXZlIGRpZmZlcmVudCBrZXlzKScpO1xuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfVxuXHRcblx0ICBpZiAoaGFzQ2hhbmdlZEN1cnNvcnMoY3VycmVudEN1cnNvcnMsIG5leHRDdXJzb3JzKSkge1xuXHQgICAgaWYgKGRlYnVnKSBkZWJ1Zy5jYWxsKHRoaXMsICdzaG91bGRDb21wb25lbnRVcGRhdGUgPT4gdHJ1ZSAoY3Vyc29ycyBoYXZlIGNoYW5nZWQpJyk7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdFxuXHQgIGlmICghaXNFcXVhbFN0YXRlKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSkpIHtcblx0ICAgIGlmIChkZWJ1ZykgZGVidWcuY2FsbCh0aGlzLCAnc2hvdWxkQ29tcG9uZW50VXBkYXRlID0+IHRydWUgKHN0YXRlIGhhcyBjaGFuZ2VkKScpO1xuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfVxuXHRcblx0ICBpZiAoaGFzQ2hhbmdlZFByb3BlcnRpZXMoY3VycmVudEN1cnNvcnMsIG5leHRDdXJzb3JzKSkge1xuXHQgICAgaWYgKGRlYnVnKSBkZWJ1Zy5jYWxsKHRoaXMsICdzaG91bGRDb21wb25lbnRVcGRhdGUgPT4gdHJ1ZSAocHJvcGVydGllcyBoYXZlIGNoYW5nZWQpJyk7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdFxuXHQgIGlmIChkZWJ1ZykgZGVidWcuY2FsbCh0aGlzLCAnc2hvdWxkQ29tcG9uZW50VXBkYXRlID0+IGZhbHNlJyk7XG5cdFxuXHQgIHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ3VhcmFudGVlT2JqZWN0IChwcm9wKSB7XG5cdCAgaWYgKCFwcm9wKSB7XG5cdCAgICByZXR1cm4ge307XG5cdCAgfVxuXHRcblx0ICBpZiAoaXNDdXJzb3IocHJvcCkpIHtcblx0ICAgIHJldHVybiB7IF9kdW1teV9rZXk6IHByb3AgfTtcblx0ICB9XG5cdFxuXHQgIGlmICh0eXBlb2YgcHJvcCAhPT0gJ29iamVjdCcpIHtcblx0ICAgIHJldHVybiB7IF9kdW1teV9rZXk6IHByb3AgfTtcblx0ICB9XG5cdFxuXHQgIHJldHVybiBwcm9wO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBoYXNEaWZmZXJlbnRLZXlzIChjdXJyZW50Q3Vyc29yc0tleXMsIGN1cnJlbnRDdXJzb3JzLCBuZXh0Q3Vyc29ycykge1xuXHQgIHJldHVybiAhY3VycmVudEN1cnNvcnNLZXlzLmV2ZXJ5KGZ1bmN0aW9uIGV4aXN0c0luQm90aCAoa2V5KSB7XG5cdCAgICByZXR1cm4gdHlwZW9mIGN1cnJlbnRDdXJzb3JzW2tleV0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBuZXh0Q3Vyc29yc1trZXldICE9PSAndW5kZWZpbmVkJztcblx0ICB9KTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gaGFzQ2hhbmdlZEN1cnNvcnMgKGN1cnJlbnQsIG5leHQpIHtcblx0ICBjdXJyZW50ID0gZmlsdGVyS2V5VmFsdWUoY3VycmVudCwgaXNDdXJzb3IpO1xuXHQgIG5leHQgICAgPSBmaWx0ZXJLZXlWYWx1ZShuZXh0LCBpc0N1cnNvcik7XG5cdFxuXHQgIHZhciBpc0VxdWFsQ3Vyc29yID0gbW9kdWxlLmV4cG9ydHMuaXNFcXVhbEN1cnNvcjtcblx0XG5cdCAgZm9yICh2YXIga2V5IGluIGN1cnJlbnQpXG5cdCAgICBpZiAoIWlzRXF1YWxDdXJzb3IoY3VycmVudFtrZXldLCBuZXh0W2tleV0pKVxuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICByZXR1cm4gZmFsc2U7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGhhc0NoYW5nZWRQcm9wZXJ0aWVzIChjdXJyZW50LCBuZXh0KSB7XG5cdCAgY3VycmVudCA9IGZpbHRlcktleVZhbHVlKGN1cnJlbnQsIG5vdChpc0N1cnNvcikpO1xuXHQgIG5leHQgICAgPSBmaWx0ZXJLZXlWYWx1ZShuZXh0LCBub3QoaXNDdXJzb3IpKTtcblx0XG5cdCAgZm9yICh2YXIga2V5IGluIGN1cnJlbnQpXG5cdCAgICBpZiAoIWRlZXBFcXVhbChjdXJyZW50W2tleV0sIG5leHRba2V5XSkpXG5cdCAgICAgIHJldHVybiB0cnVlO1xuXHQgIHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gY3JlYXRlRGVmYXVsdEFyZ3VtZW50cyAoZGlzcGxheU5hbWUsIG1peGlucywgcmVuZGVyKSB7XG5cdFxuXHQgIC8vIChyZW5kZXIpXG5cdCAgaWYgKHR5cGVvZiBkaXNwbGF5TmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgcmVuZGVyICAgICAgPSBkaXNwbGF5TmFtZTtcblx0ICAgIG1peGlucyAgICAgID0gW107XG5cdCAgICBkaXNwbGF5TmFtZSA9IHZvaWQgMDtcblx0ICB9XG5cdFxuXHQgIC8vIChtaXhpbnMsIHJlbmRlcilcblx0ICBpZiAodHlwZW9mIGRpc3BsYXlOYW1lID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbWl4aW5zID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICByZW5kZXIgICAgICA9IG1peGlucztcblx0ICAgIG1peGlucyAgICAgID0gZGlzcGxheU5hbWU7XG5cdCAgICBkaXNwbGF5TmFtZSA9IHZvaWQgMDtcblx0ICB9XG5cdFxuXHQgIC8vIChkaXNwbGF5TmFtZSwgcmVuZGVyKVxuXHQgIGlmICh0eXBlb2YgZGlzcGxheU5hbWUgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBtaXhpbnMgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgIHJlbmRlciA9IG1peGlucztcblx0ICAgIG1peGlucyA9IFtdO1xuXHQgIH1cblx0XG5cdCAgLy8gRWxzZSAoZGlzcGxheU5hbWUsIG1peGlucywgcmVuZGVyKVxuXHRcblx0ICBpZiAoIUFycmF5LmlzQXJyYXkobWl4aW5zKSkge1xuXHQgICAgbWl4aW5zID0gW21peGluc107XG5cdCAgfVxuXHRcblx0ICBpZiAoIWhhc1Nob3VsZENvbXBvbmVudFVwZGF0ZShtaXhpbnMpKSB7XG5cdCAgICB2YXIgU2hvdWxkQ29tcG9uZW50VXBkYXRlID0ge1xuXHQgICAgICBzaG91bGRDb21wb25lbnRVcGRhdGU6IG1vZHVsZS5leHBvcnRzLnNob3VsZENvbXBvbmVudFVwZGF0ZVxuXHQgICAgfTtcblx0ICAgIG1peGlucyA9IFtTaG91bGRDb21wb25lbnRVcGRhdGVdLmNvbmNhdChtaXhpbnMpO1xuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHtcblx0ICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcblx0ICAgIG1peGluczogbWl4aW5zLFxuXHQgICAgcmVuZGVyOiByZW5kZXJcblx0ICB9O1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBwaWNrU3RhdGljTWl4aW5zIChtaXhpbnMpIHtcblx0ICB2YXIgZmlsdGVyZWQgPSBtaXhpbnMuZmlsdGVyKGZ1bmN0aW9uIChvYmopwqB7XG5cdCAgICByZXR1cm4gISFvYmouc3RhdGljcztcblx0ICB9KTtcblx0XG5cdCAgaWYgKCFmaWx0ZXJlZC5sZW5ndGgpIHtcblx0ICAgIHJldHVybiB2b2lkIDA7XG5cdCAgfVxuXHRcblx0ICB2YXIgc3RhdGljcyA9IHt9O1xuXHQgIGZpbHRlcmVkLmZvckVhY2goZnVuY3Rpb24gKG9iainCoHtcblx0ICAgIHN0YXRpY3MgPSBleHRlbmQoc3RhdGljcywgb2JqLnN0YXRpY3MpO1xuXHQgIH0pO1xuXHRcblx0ICByZXR1cm4gc3RhdGljcztcblx0fVxuXHRcblx0ZnVuY3Rpb24gcmVtb3ZlT2xkU3RhdGljTWV0aG9kcyAobWl4aW5zKSB7XG5cdCAgbWl4aW5zLmZpbHRlcihmdW5jdGlvbiAob2JqKcKge1xuXHQgICAgcmV0dXJuICEhb2JqLnN0YXRpY3M7XG5cdCAgfSkuZm9yRWFjaChmdW5jdGlvbiAob2JqKcKge1xuXHQgICAgZGVsZXRlIG9iai5zdGF0aWNzO1xuXHQgIH0pO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBleHRlbmQgKG9yaWdpbmFsLCBleHRlbnNpb24pIHtcblx0ICBmb3IgKGtleSBpbiBleHRlbnNpb24pIHtcblx0ICAgIGlmIChleHRlbnNpb24uaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhb3JpZ2luYWxba2V5XSkge1xuXHQgICAgICBvcmlnaW5hbFtrZXldID0gZXh0ZW5zaW9uW2tleV07XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBvcmlnaW5hbDtcblx0fVxuXHRcblx0ZnVuY3Rpb24gaGFzU2hvdWxkQ29tcG9uZW50VXBkYXRlIChtaXhpbnMpIHtcblx0ICByZXR1cm4gISFtaXhpbnMuZmlsdGVyKGZ1bmN0aW9uIChtaXhpbikge1xuXHQgICAgcmV0dXJuICEhbWl4aW4uc2hvdWxkQ29tcG9uZW50VXBkYXRlO1xuXHQgIH0pLmxlbmd0aDtcblx0fVxuXHRcblx0ZnVuY3Rpb24gaXNDdXJzb3IgKHBvdGVudGlhbCkge1xuXHQgIHJldHVybiBwb3RlbnRpYWwgJiZcblx0ICAgICgodHlwZW9mIHBvdGVudGlhbC5kZXJlZiA9PT0gJ2Z1bmN0aW9uJykgfHwgKHR5cGVvZiBwb3RlbnRpYWwuX19kZXJlZiA9PT0gJ2Z1bmN0aW9uJykpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiB1bkN1cnNvcihjdXJzb3IpIHtcblx0ICBpZiAoIWlzQ3Vyc29yKGN1cnNvcikpIHtcblx0ICAgIHJldHVybiBjdXJzb3I7XG5cdCAgfVxuXHRcblx0ICBpZiAodHlwZW9mIGN1cnNvci5kZXJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgcmV0dXJuIGN1cnNvci5kZXJlZigpO1xuXHQgIH1cblx0XG5cdCAgcmV0dXJuIGN1cnNvci5fX2RlcmVmKCk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGZpbHRlcktleVZhbHVlIChvYmplY3QsIHByZWRpY2F0ZSkge1xuXHQgIHZhciBrZXksIGZpbHRlcmVkID0ge307XG5cdCAgZm9yIChrZXkgaW4gb2JqZWN0KVxuXHQgICAgaWYgKHByZWRpY2F0ZShvYmplY3Rba2V5XSwga2V5KSlcblx0ICAgICAgZmlsdGVyZWRba2V5XSA9IG9iamVjdFtrZXldO1xuXHQgIHJldHVybiBmaWx0ZXJlZDtcblx0fVxuXHRcblx0ZnVuY3Rpb24gbm90IChmbikge1xuXHQgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICByZXR1cm4gIWZuLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuXHQgIH07XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlzU3RhdGljcyAodmFsLCBrZXkpIHtcblx0ICByZXR1cm4ga2V5ID09PSAnc3RhdGljcyc7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlzQ2hpbGRyZW4gKHZhbCwga2V5KSB7XG5cdCAgcmV0dXJuIGtleSA9PT0gJ2NoaWxkcmVuJztcblx0fVxuXHRcblx0ZnVuY3Rpb24gb3IgKGZuMSwgZm4yKSB7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgIHJldHVybiBmbjEuYXBwbHkobnVsbCwgYXJndW1lbnRzKSB8fCBmbjIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcblx0ICB9O1xuXHR9XG5cdFxuXHRmdW5jdGlvbiB0b0FycmF5IChhcmdzKSB7XG5cdCAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpO1xuXHR9XG5cblxuLyoqKi8gfSxcbi8qIDQyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgQ2FsbGJhY2tRdWV1ZVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIFBvb2xlZENsYXNzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cdFxuXHR2YXIgYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0dmFyIGludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHQvKipcblx0ICogQSBzcGVjaWFsaXplZCBwc2V1ZG8tZXZlbnQgbW9kdWxlIHRvIGhlbHAga2VlcCB0cmFjayBvZiBjb21wb25lbnRzIHdhaXRpbmcgdG9cblx0ICogYmUgbm90aWZpZWQgd2hlbiB0aGVpciBET00gcmVwcmVzZW50YXRpb25zIGFyZSBhdmFpbGFibGUgZm9yIHVzZS5cblx0ICpcblx0ICogVGhpcyBpbXBsZW1lbnRzIGBQb29sZWRDbGFzc2AsIHNvIHlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byBpbnN0YW50aWF0ZSB0aGlzLlxuXHQgKiBJbnN0ZWFkLCB1c2UgYENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKClgLlxuXHQgKlxuXHQgKiBAY2xhc3MgUmVhY3RNb3VudFJlYWR5XG5cdCAqIEBpbXBsZW1lbnRzIFBvb2xlZENsYXNzXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0ZnVuY3Rpb24gQ2FsbGJhY2tRdWV1ZSgpIHtcblx0ICB0aGlzLl9jYWxsYmFja3MgPSBudWxsO1xuXHQgIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcblx0fVxuXHRcblx0YXNzaWduKENhbGxiYWNrUXVldWUucHJvdG90eXBlLCB7XG5cdFxuXHQgIC8qKlxuXHQgICAqIEVucXVldWVzIGEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGBub3RpZnlBbGxgIGlzIGludm9rZWQuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBJbnZva2VkIHdoZW4gYG5vdGlmeUFsbGAgaXMgaW52b2tlZC5cblx0ICAgKiBAcGFyYW0gez9vYmplY3R9IGNvbnRleHQgQ29udGV4dCB0byBjYWxsIGBjYWxsYmFja2Agd2l0aC5cblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKi9cblx0ICBlbnF1ZXVlOiBmdW5jdGlvbihjYWxsYmFjaywgY29udGV4dCkge1xuXHQgICAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IFtdO1xuXHQgICAgdGhpcy5fY29udGV4dHMgPSB0aGlzLl9jb250ZXh0cyB8fCBbXTtcblx0ICAgIHRoaXMuX2NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcblx0ICAgIHRoaXMuX2NvbnRleHRzLnB1c2goY29udGV4dCk7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogSW52b2tlcyBhbGwgZW5xdWV1ZWQgY2FsbGJhY2tzIGFuZCBjbGVhcnMgdGhlIHF1ZXVlLiBUaGlzIGlzIGludm9rZWQgYWZ0ZXJcblx0ICAgKiB0aGUgRE9NIHJlcHJlc2VudGF0aW9uIG9mIGEgY29tcG9uZW50IGhhcyBiZWVuIGNyZWF0ZWQgb3IgdXBkYXRlZC5cblx0ICAgKlxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIG5vdGlmeUFsbDogZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzO1xuXHQgICAgdmFyIGNvbnRleHRzID0gdGhpcy5fY29udGV4dHM7XG5cdCAgICBpZiAoY2FsbGJhY2tzKSB7XG5cdCAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgICAgY2FsbGJhY2tzLmxlbmd0aCA9PT0gY29udGV4dHMubGVuZ3RoLFxuXHQgICAgICAgIFwiTWlzbWF0Y2hlZCBsaXN0IG9mIGNvbnRleHRzIGluIGNhbGxiYWNrIHF1ZXVlXCJcblx0ICAgICAgKSA6IGludmFyaWFudChjYWxsYmFja3MubGVuZ3RoID09PSBjb250ZXh0cy5sZW5ndGgpKTtcblx0ICAgICAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcblx0ICAgICAgdGhpcy5fY29udGV4dHMgPSBudWxsO1xuXHQgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgICAgICBjYWxsYmFja3NbaV0uY2FsbChjb250ZXh0c1tpXSk7XG5cdCAgICAgIH1cblx0ICAgICAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG5cdCAgICAgIGNvbnRleHRzLmxlbmd0aCA9IDA7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogUmVzZXRzIHRoZSBpbnRlcm5hbCBxdWV1ZS5cblx0ICAgKlxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIHJlc2V0OiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG5cdCAgICB0aGlzLl9jb250ZXh0cyA9IG51bGw7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgdGhpcy5cblx0ICAgKi9cblx0ICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMucmVzZXQoKTtcblx0ICB9XG5cdFxuXHR9KTtcblx0XG5cdFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhDYWxsYmFja1F1ZXVlKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gQ2FsbGJhY2tRdWV1ZTtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDQzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQbHVnaW5VdGlsc1xuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIEV2ZW50Q29uc3RhbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0LyoqXG5cdCAqIEluamVjdGVkIGRlcGVuZGVuY2llczpcblx0ICovXG5cdFxuXHQvKipcblx0ICogLSBgTW91bnRgOiBbcmVxdWlyZWRdIE1vZHVsZSB0aGF0IGNhbiBjb252ZXJ0IGJldHdlZW4gUmVhY3QgZG9tIElEcyBhbmRcblx0ICogICBhY3R1YWwgbm9kZSByZWZlcmVuY2VzLlxuXHQgKi9cblx0dmFyIGluamVjdGlvbiA9IHtcblx0ICBNb3VudDogbnVsbCxcblx0ICBpbmplY3RNb3VudDogZnVuY3Rpb24oSW5qZWN0ZWRNb3VudCkge1xuXHQgICAgaW5qZWN0aW9uLk1vdW50ID0gSW5qZWN0ZWRNb3VudDtcblx0ICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgICBJbmplY3RlZE1vdW50ICYmIEluamVjdGVkTW91bnQuZ2V0Tm9kZSxcblx0ICAgICAgICAnRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24uaW5qZWN0TW91bnQoLi4uKTogSW5qZWN0ZWQgTW91bnQgbW9kdWxlICcgK1xuXHQgICAgICAgICdpcyBtaXNzaW5nIGdldE5vZGUuJ1xuXHQgICAgICApIDogaW52YXJpYW50KEluamVjdGVkTW91bnQgJiYgSW5qZWN0ZWRNb3VudC5nZXROb2RlKSk7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXHRcblx0dmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXHRcblx0ZnVuY3Rpb24gaXNFbmRpc2godG9wTGV2ZWxUeXBlKSB7XG5cdCAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZVVwIHx8XG5cdCAgICAgICAgIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BUb3VjaEVuZCB8fFxuXHQgICAgICAgICB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wVG91Y2hDYW5jZWw7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlzTW92ZWlzaCh0b3BMZXZlbFR5cGUpIHtcblx0ICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlTW92ZSB8fFxuXHQgICAgICAgICB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wVG91Y2hNb3ZlO1xuXHR9XG5cdGZ1bmN0aW9uIGlzU3RhcnRpc2godG9wTGV2ZWxUeXBlKSB7XG5cdCAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd24gfHxcblx0ICAgICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoU3RhcnQ7XG5cdH1cblx0XG5cdFxuXHR2YXIgdmFsaWRhdGVFdmVudERpc3BhdGNoZXM7XG5cdGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdCAgICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG5cdCAgICB2YXIgZGlzcGF0Y2hJRHMgPSBldmVudC5fZGlzcGF0Y2hJRHM7XG5cdFxuXHQgICAgdmFyIGxpc3RlbmVyc0lzQXJyID0gQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycyk7XG5cdCAgICB2YXIgaWRzSXNBcnIgPSBBcnJheS5pc0FycmF5KGRpc3BhdGNoSURzKTtcblx0ICAgIHZhciBJRHNMZW4gPSBpZHNJc0FyciA/IGRpc3BhdGNoSURzLmxlbmd0aCA6IGRpc3BhdGNoSURzID8gMSA6IDA7XG5cdCAgICB2YXIgbGlzdGVuZXJzTGVuID0gbGlzdGVuZXJzSXNBcnIgP1xuXHQgICAgICBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGggOlxuXHQgICAgICBkaXNwYXRjaExpc3RlbmVycyA/IDEgOiAwO1xuXHRcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgIGlkc0lzQXJyID09PSBsaXN0ZW5lcnNJc0FyciAmJiBJRHNMZW4gPT09IGxpc3RlbmVyc0xlbixcblx0ICAgICAgJ0V2ZW50UGx1Z2luVXRpbHM6IEludmFsaWQgYGV2ZW50YC4nXG5cdCAgICApIDogaW52YXJpYW50KGlkc0lzQXJyID09PSBsaXN0ZW5lcnNJc0FyciAmJiBJRHNMZW4gPT09IGxpc3RlbmVyc0xlbikpO1xuXHQgIH07XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBJbnZva2VzIGBjYihldmVudCwgbGlzdGVuZXIsIGlkKWAuIEF2b2lkcyB1c2luZyBjYWxsIGlmIG5vIHNjb3BlIGlzXG5cdCAqIHByb3ZpZGVkLiBUaGUgYChsaXN0ZW5lcixpZClgIHBhaXIgZWZmZWN0aXZlbHkgZm9ybXMgdGhlIFwiZGlzcGF0Y2hcIiBidXQgYXJlXG5cdCAqIGtlcHQgc2VwYXJhdGUgdG8gY29uc2VydmUgbWVtb3J5LlxuXHQgKi9cblx0ZnVuY3Rpb24gZm9yRWFjaEV2ZW50RGlzcGF0Y2goZXZlbnQsIGNiKSB7XG5cdCAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuXHQgIHZhciBkaXNwYXRjaElEcyA9IGV2ZW50Ll9kaXNwYXRjaElEcztcblx0ICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG5cdCAgfVxuXHQgIGlmIChBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKSkge1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuXHQgICAgICBpZiAoZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICB9XG5cdCAgICAgIC8vIExpc3RlbmVycyBhbmQgSURzIGFyZSB0d28gcGFyYWxsZWwgYXJyYXlzIHRoYXQgYXJlIGFsd2F5cyBpbiBzeW5jLlxuXHQgICAgICBjYihldmVudCwgZGlzcGF0Y2hMaXN0ZW5lcnNbaV0sIGRpc3BhdGNoSURzW2ldKTtcblx0ICAgIH1cblx0ICB9IGVsc2UgaWYgKGRpc3BhdGNoTGlzdGVuZXJzKSB7XG5cdCAgICBjYihldmVudCwgZGlzcGF0Y2hMaXN0ZW5lcnMsIGRpc3BhdGNoSURzKTtcblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIFBsdWdpbk1vZHVsZS5leGVjdXRlRGlzcGF0Y2goKS5cblx0ICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gU3ludGhldGljRXZlbnQgdG8gaGFuZGxlXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IEFwcGxpY2F0aW9uLWxldmVsIGNhbGxiYWNrXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBkb21JRCBET00gaWQgdG8gcGFzcyB0byB0aGUgY2FsbGJhY2suXG5cdCAqL1xuXHRmdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIGxpc3RlbmVyLCBkb21JRCkge1xuXHQgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBpbmplY3Rpb24uTW91bnQuZ2V0Tm9kZShkb21JRCk7XG5cdCAgdmFyIHJldHVyblZhbHVlID0gbGlzdGVuZXIoZXZlbnQsIGRvbUlEKTtcblx0ICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcblx0ICByZXR1cm4gcmV0dXJuVmFsdWU7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBTdGFuZGFyZC9zaW1wbGUgaXRlcmF0aW9uIHRocm91Z2ggYW4gZXZlbnQncyBjb2xsZWN0ZWQgZGlzcGF0Y2hlcy5cblx0ICovXG5cdGZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcihldmVudCwgZXhlY3V0ZURpc3BhdGNoKSB7XG5cdCAgZm9yRWFjaEV2ZW50RGlzcGF0Y2goZXZlbnQsIGV4ZWN1dGVEaXNwYXRjaCk7XG5cdCAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gbnVsbDtcblx0ICBldmVudC5fZGlzcGF0Y2hJRHMgPSBudWxsO1xuXHR9XG5cdFxuXHQvKipcblx0ICogU3RhbmRhcmQvc2ltcGxlIGl0ZXJhdGlvbiB0aHJvdWdoIGFuIGV2ZW50J3MgY29sbGVjdGVkIGRpc3BhdGNoZXMsIGJ1dCBzdG9wc1xuXHQgKiBhdCB0aGUgZmlyc3QgZGlzcGF0Y2ggZXhlY3V0aW9uIHJldHVybmluZyB0cnVlLCBhbmQgcmV0dXJucyB0aGF0IGlkLlxuXHQgKlxuXHQgKiBAcmV0dXJuIGlkIG9mIHRoZSBmaXJzdCBkaXNwYXRjaCBleGVjdXRpb24gd2hvJ3MgbGlzdGVuZXIgcmV0dXJucyB0cnVlLCBvclxuXHQgKiBudWxsIGlmIG5vIGxpc3RlbmVyIHJldHVybmVkIHRydWUuXG5cdCAqL1xuXHRmdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbChldmVudCkge1xuXHQgIHZhciBkaXNwYXRjaExpc3RlbmVycyA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcblx0ICB2YXIgZGlzcGF0Y2hJRHMgPSBldmVudC5fZGlzcGF0Y2hJRHM7XG5cdCAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuXHQgICAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMoZXZlbnQpO1xuXHQgIH1cblx0ICBpZiAoQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycykpIHtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgaWYgKGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICAvLyBMaXN0ZW5lcnMgYW5kIElEcyBhcmUgdHdvIHBhcmFsbGVsIGFycmF5cyB0aGF0IGFyZSBhbHdheXMgaW4gc3luYy5cblx0ICAgICAgaWYgKGRpc3BhdGNoTGlzdGVuZXJzW2ldKGV2ZW50LCBkaXNwYXRjaElEc1tpXSkpIHtcblx0ICAgICAgICByZXR1cm4gZGlzcGF0Y2hJRHNbaV07XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9IGVsc2UgaWYgKGRpc3BhdGNoTGlzdGVuZXJzKSB7XG5cdCAgICBpZiAoZGlzcGF0Y2hMaXN0ZW5lcnMoZXZlbnQsIGRpc3BhdGNoSURzKSkge1xuXHQgICAgICByZXR1cm4gZGlzcGF0Y2hJRHM7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBudWxsO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQHNlZSBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbFxuXHQgKi9cblx0ZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZShldmVudCkge1xuXHQgIHZhciByZXQgPSBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbChldmVudCk7XG5cdCAgZXZlbnQuX2Rpc3BhdGNoSURzID0gbnVsbDtcblx0ICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBudWxsO1xuXHQgIHJldHVybiByZXQ7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBFeGVjdXRpb24gb2YgYSBcImRpcmVjdFwiIGRpc3BhdGNoIC0gdGhlcmUgbXVzdCBiZSBhdCBtb3N0IG9uZSBkaXNwYXRjaFxuXHQgKiBhY2N1bXVsYXRlZCBvbiB0aGUgZXZlbnQgb3IgaXQgaXMgY29uc2lkZXJlZCBhbiBlcnJvci4gSXQgZG9lc24ndCByZWFsbHkgbWFrZVxuXHQgKiBzZW5zZSBmb3IgYW4gZXZlbnQgd2l0aCBtdWx0aXBsZSBkaXNwYXRjaGVzIChidWJibGVkKSB0byBrZWVwIHRyYWNrIG9mIHRoZVxuXHQgKiByZXR1cm4gdmFsdWVzIGF0IGVhY2ggZGlzcGF0Y2ggZXhlY3V0aW9uLCBidXQgaXQgZG9lcyB0ZW5kIHRvIG1ha2Ugc2Vuc2Ugd2hlblxuXHQgKiBkZWFsaW5nIHdpdGggXCJkaXJlY3RcIiBkaXNwYXRjaGVzLlxuXHQgKlxuXHQgKiBAcmV0dXJuIFRoZSByZXR1cm4gdmFsdWUgb2YgZXhlY3V0aW5nIHRoZSBzaW5nbGUgZGlzcGF0Y2guXG5cdCAqL1xuXHRmdW5jdGlvbiBleGVjdXRlRGlyZWN0RGlzcGF0Y2goZXZlbnQpIHtcblx0ICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG5cdCAgfVxuXHQgIHZhciBkaXNwYXRjaExpc3RlbmVyID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuXHQgIHZhciBkaXNwYXRjaElEID0gZXZlbnQuX2Rpc3BhdGNoSURzO1xuXHQgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAhQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVyKSxcblx0ICAgICdleGVjdXRlRGlyZWN0RGlzcGF0Y2goLi4uKTogSW52YWxpZCBgZXZlbnRgLidcblx0ICApIDogaW52YXJpYW50KCFBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXIpKSk7XG5cdCAgdmFyIHJlcyA9IGRpc3BhdGNoTGlzdGVuZXIgP1xuXHQgICAgZGlzcGF0Y2hMaXN0ZW5lcihldmVudCwgZGlzcGF0Y2hJRCkgOlxuXHQgICAgbnVsbDtcblx0ICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBudWxsO1xuXHQgIGV2ZW50Ll9kaXNwYXRjaElEcyA9IG51bGw7XG5cdCAgcmV0dXJuIHJlcztcblx0fVxuXHRcblx0LyoqXG5cdCAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50XG5cdCAqIEByZXR1cm4ge2Jvb2x9IFRydWUgaWZmIG51bWJlciBvZiBkaXNwYXRjaGVzIGFjY3VtdWxhdGVkIGlzIGdyZWF0ZXIgdGhhbiAwLlxuXHQgKi9cblx0ZnVuY3Rpb24gaGFzRGlzcGF0Y2hlcyhldmVudCkge1xuXHQgIHJldHVybiAhIWV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcblx0fVxuXHRcblx0LyoqXG5cdCAqIEdlbmVyYWwgdXRpbGl0aWVzIHRoYXQgYXJlIHVzZWZ1bCBpbiBjcmVhdGluZyBjdXN0b20gRXZlbnQgUGx1Z2lucy5cblx0ICovXG5cdHZhciBFdmVudFBsdWdpblV0aWxzID0ge1xuXHQgIGlzRW5kaXNoOiBpc0VuZGlzaCxcblx0ICBpc01vdmVpc2g6IGlzTW92ZWlzaCxcblx0ICBpc1N0YXJ0aXNoOiBpc1N0YXJ0aXNoLFxuXHRcblx0ICBleGVjdXRlRGlyZWN0RGlzcGF0Y2g6IGV4ZWN1dGVEaXJlY3REaXNwYXRjaCxcblx0ICBleGVjdXRlRGlzcGF0Y2g6IGV4ZWN1dGVEaXNwYXRjaCxcblx0ICBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXI6IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcixcblx0ICBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlOiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlLFxuXHQgIGhhc0Rpc3BhdGNoZXM6IGhhc0Rpc3BhdGNoZXMsXG5cdCAgaW5qZWN0aW9uOiBpbmplY3Rpb24sXG5cdCAgdXNlVG91Y2hFdmVudHM6IGZhbHNlXG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IEV2ZW50UGx1Z2luVXRpbHM7XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiA0NCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIExpbmtlZFZhbHVlVXRpbHNcblx0ICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBSZWFjdFByb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oNzIpO1xuXHRcblx0dmFyIGludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgaGFzUmVhZE9ubHlWYWx1ZSA9IHtcblx0ICAnYnV0dG9uJzogdHJ1ZSxcblx0ICAnY2hlY2tib3gnOiB0cnVlLFxuXHQgICdpbWFnZSc6IHRydWUsXG5cdCAgJ2hpZGRlbic6IHRydWUsXG5cdCAgJ3JhZGlvJzogdHJ1ZSxcblx0ICAncmVzZXQnOiB0cnVlLFxuXHQgICdzdWJtaXQnOiB0cnVlXG5cdH07XG5cdFxuXHRmdW5jdGlvbiBfYXNzZXJ0U2luZ2xlTGluayhpbnB1dCkge1xuXHQgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICBpbnB1dC5wcm9wcy5jaGVja2VkTGluayA9PSBudWxsIHx8IGlucHV0LnByb3BzLnZhbHVlTGluayA9PSBudWxsLFxuXHQgICAgJ0Nhbm5vdCBwcm92aWRlIGEgY2hlY2tlZExpbmsgYW5kIGEgdmFsdWVMaW5rLiBJZiB5b3Ugd2FudCB0byB1c2UgJyArXG5cdCAgICAnY2hlY2tlZExpbmssIHlvdSBwcm9iYWJseSBkb25cXCd0IHdhbnQgdG8gdXNlIHZhbHVlTGluayBhbmQgdmljZSB2ZXJzYS4nXG5cdCAgKSA6IGludmFyaWFudChpbnB1dC5wcm9wcy5jaGVja2VkTGluayA9PSBudWxsIHx8IGlucHV0LnByb3BzLnZhbHVlTGluayA9PSBudWxsKSk7XG5cdH1cblx0ZnVuY3Rpb24gX2Fzc2VydFZhbHVlTGluayhpbnB1dCkge1xuXHQgIF9hc3NlcnRTaW5nbGVMaW5rKGlucHV0KTtcblx0ICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgaW5wdXQucHJvcHMudmFsdWUgPT0gbnVsbCAmJiBpbnB1dC5wcm9wcy5vbkNoYW5nZSA9PSBudWxsLFxuXHQgICAgJ0Nhbm5vdCBwcm92aWRlIGEgdmFsdWVMaW5rIGFuZCBhIHZhbHVlIG9yIG9uQ2hhbmdlIGV2ZW50LiBJZiB5b3Ugd2FudCAnICtcblx0ICAgICd0byB1c2UgdmFsdWUgb3Igb25DaGFuZ2UsIHlvdSBwcm9iYWJseSBkb25cXCd0IHdhbnQgdG8gdXNlIHZhbHVlTGluay4nXG5cdCAgKSA6IGludmFyaWFudChpbnB1dC5wcm9wcy52YWx1ZSA9PSBudWxsICYmIGlucHV0LnByb3BzLm9uQ2hhbmdlID09IG51bGwpKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gX2Fzc2VydENoZWNrZWRMaW5rKGlucHV0KSB7XG5cdCAgX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXQpO1xuXHQgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICBpbnB1dC5wcm9wcy5jaGVja2VkID09IG51bGwgJiYgaW5wdXQucHJvcHMub25DaGFuZ2UgPT0gbnVsbCxcblx0ICAgICdDYW5ub3QgcHJvdmlkZSBhIGNoZWNrZWRMaW5rIGFuZCBhIGNoZWNrZWQgcHJvcGVydHkgb3Igb25DaGFuZ2UgZXZlbnQuICcgK1xuXHQgICAgJ0lmIHlvdSB3YW50IHRvIHVzZSBjaGVja2VkIG9yIG9uQ2hhbmdlLCB5b3UgcHJvYmFibHkgZG9uXFwndCB3YW50IHRvICcgK1xuXHQgICAgJ3VzZSBjaGVja2VkTGluaydcblx0ICApIDogaW52YXJpYW50KGlucHV0LnByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBpbnB1dC5wcm9wcy5vbkNoYW5nZSA9PSBudWxsKSk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBlIGNoYW5nZSBldmVudCB0byBoYW5kbGVcblx0ICovXG5cdGZ1bmN0aW9uIF9oYW5kbGVMaW5rZWRWYWx1ZUNoYW5nZShlKSB7XG5cdCAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cblx0ICB0aGlzLnByb3BzLnZhbHVlTGluay5yZXF1ZXN0Q2hhbmdlKGUudGFyZ2V0LnZhbHVlKTtcblx0fVxuXHRcblx0LyoqXG5cdCAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBlIGNoYW5nZSBldmVudCB0byBoYW5kbGVcblx0ICAqL1xuXHRmdW5jdGlvbiBfaGFuZGxlTGlua2VkQ2hlY2tDaGFuZ2UoZSkge1xuXHQgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG5cdCAgdGhpcy5wcm9wcy5jaGVja2VkTGluay5yZXF1ZXN0Q2hhbmdlKGUudGFyZ2V0LmNoZWNrZWQpO1xuXHR9XG5cdFxuXHQvKipcblx0ICogUHJvdmlkZSBhIGxpbmtlZCBgdmFsdWVgIGF0dHJpYnV0ZSBmb3IgY29udHJvbGxlZCBmb3Jtcy4gWW91IHNob3VsZCBub3QgdXNlXG5cdCAqIHRoaXMgb3V0c2lkZSBvZiB0aGUgUmVhY3RET00gY29udHJvbGxlZCBmb3JtIGNvbXBvbmVudHMuXG5cdCAqL1xuXHR2YXIgTGlua2VkVmFsdWVVdGlscyA9IHtcblx0ICBNaXhpbjoge1xuXHQgICAgcHJvcFR5cGVzOiB7XG5cdCAgICAgIHZhbHVlOiBmdW5jdGlvbihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcblx0ICAgICAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fFxuXHQgICAgICAgICAgICBoYXNSZWFkT25seVZhbHVlW3Byb3BzLnR5cGVdIHx8XG5cdCAgICAgICAgICAgIHByb3BzLm9uQ2hhbmdlIHx8XG5cdCAgICAgICAgICAgIHByb3BzLnJlYWRPbmx5IHx8XG5cdCAgICAgICAgICAgIHByb3BzLmRpc2FibGVkKSB7XG5cdCAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG5cdCAgICAgICAgICAnWW91IHByb3ZpZGVkIGEgYHZhbHVlYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuICcgK1xuXHQgICAgICAgICAgJ2BvbkNoYW5nZWAgaGFuZGxlci4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gSWYgJyArXG5cdCAgICAgICAgICAndGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdFZhbHVlYC4gT3RoZXJ3aXNlLCAnICtcblx0ICAgICAgICAgICdzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC4nXG5cdCAgICAgICAgKTtcblx0ICAgICAgfSxcblx0ICAgICAgY2hlY2tlZDogZnVuY3Rpb24ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG5cdCAgICAgICAgaWYgKCFwcm9wc1twcm9wTmFtZV0gfHxcblx0ICAgICAgICAgICAgcHJvcHMub25DaGFuZ2UgfHxcblx0ICAgICAgICAgICAgcHJvcHMucmVhZE9ubHkgfHxcblx0ICAgICAgICAgICAgcHJvcHMuZGlzYWJsZWQpIHtcblx0ICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcblx0ICAgICAgICAgICdZb3UgcHJvdmlkZWQgYSBgY2hlY2tlZGAgcHJvcCB0byBhIGZvcm0gZmllbGQgd2l0aG91dCBhbiAnICtcblx0ICAgICAgICAgICdgb25DaGFuZ2VgIGhhbmRsZXIuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIElmICcgK1xuXHQgICAgICAgICAgJ3RoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYGRlZmF1bHRDaGVja2VkYC4gT3RoZXJ3aXNlLCAnICtcblx0ICAgICAgICAgICdzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC4nXG5cdCAgICAgICAgKTtcblx0ICAgICAgfSxcblx0ICAgICAgb25DaGFuZ2U6IFJlYWN0UHJvcFR5cGVzLmZ1bmNcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnB1dCBGb3JtIGNvbXBvbmVudFxuXHQgICAqIEByZXR1cm4geyp9IGN1cnJlbnQgdmFsdWUgb2YgdGhlIGlucHV0IGVpdGhlciBmcm9tIHZhbHVlIHByb3Agb3IgbGluay5cblx0ICAgKi9cblx0ICBnZXRWYWx1ZTogZnVuY3Rpb24oaW5wdXQpIHtcblx0ICAgIGlmIChpbnB1dC5wcm9wcy52YWx1ZUxpbmspIHtcblx0ICAgICAgX2Fzc2VydFZhbHVlTGluayhpbnB1dCk7XG5cdCAgICAgIHJldHVybiBpbnB1dC5wcm9wcy52YWx1ZUxpbmsudmFsdWU7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gaW5wdXQucHJvcHMudmFsdWU7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW5wdXQgRm9ybSBjb21wb25lbnRcblx0ICAgKiBAcmV0dXJuIHsqfSBjdXJyZW50IGNoZWNrZWQgc3RhdHVzIG9mIHRoZSBpbnB1dCBlaXRoZXIgZnJvbSBjaGVja2VkIHByb3Bcblx0ICAgKiAgICAgICAgICAgICBvciBsaW5rLlxuXHQgICAqL1xuXHQgIGdldENoZWNrZWQ6IGZ1bmN0aW9uKGlucHV0KSB7XG5cdCAgICBpZiAoaW5wdXQucHJvcHMuY2hlY2tlZExpbmspIHtcblx0ICAgICAgX2Fzc2VydENoZWNrZWRMaW5rKGlucHV0KTtcblx0ICAgICAgcmV0dXJuIGlucHV0LnByb3BzLmNoZWNrZWRMaW5rLnZhbHVlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGlucHV0LnByb3BzLmNoZWNrZWQ7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW5wdXQgRm9ybSBjb21wb25lbnRcblx0ICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gY2hhbmdlIGNhbGxiYWNrIGVpdGhlciBmcm9tIG9uQ2hhbmdlIHByb3Agb3IgbGluay5cblx0ICAgKi9cblx0ICBnZXRPbkNoYW5nZTogZnVuY3Rpb24oaW5wdXQpIHtcblx0ICAgIGlmIChpbnB1dC5wcm9wcy52YWx1ZUxpbmspIHtcblx0ICAgICAgX2Fzc2VydFZhbHVlTGluayhpbnB1dCk7XG5cdCAgICAgIHJldHVybiBfaGFuZGxlTGlua2VkVmFsdWVDaGFuZ2U7XG5cdCAgICB9IGVsc2UgaWYgKGlucHV0LnByb3BzLmNoZWNrZWRMaW5rKSB7XG5cdCAgICAgIF9hc3NlcnRDaGVja2VkTGluayhpbnB1dCk7XG5cdCAgICAgIHJldHVybiBfaGFuZGxlTGlua2VkQ2hlY2tDaGFuZ2U7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gaW5wdXQucHJvcHMub25DaGFuZ2U7XG5cdCAgfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBMaW5rZWRWYWx1ZVV0aWxzO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogNDUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDb250ZXh0XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdC8qKlxuXHQgKiBLZWVwcyB0cmFjayBvZiB0aGUgY3VycmVudCBjb250ZXh0LlxuXHQgKlxuXHQgKiBUaGUgY29udGV4dCBpcyBhdXRvbWF0aWNhbGx5IHBhc3NlZCBkb3duIHRoZSBjb21wb25lbnQgb3duZXJzaGlwIGhpZXJhcmNoeVxuXHQgKiBhbmQgaXMgYWNjZXNzaWJsZSB2aWEgYHRoaXMuY29udGV4dGAgb24gUmVhY3RDb21wb3NpdGVDb21wb25lbnRzLlxuXHQgKi9cblx0dmFyIFJlYWN0Q29udGV4dCA9IHtcblx0XG5cdCAgLyoqXG5cdCAgICogQGludGVybmFsXG5cdCAgICogQHR5cGUge29iamVjdH1cblx0ICAgKi9cblx0ICBjdXJyZW50OiB7fSxcblx0XG5cdCAgLyoqXG5cdCAgICogVGVtcG9yYXJpbHkgZXh0ZW5kcyB0aGUgY3VycmVudCBjb250ZXh0IHdoaWxlIGV4ZWN1dGluZyBzY29wZWRDYWxsYmFjay5cblx0ICAgKlxuXHQgICAqIEEgdHlwaWNhbCB1c2UgY2FzZSBtaWdodCBsb29rIGxpa2Vcblx0ICAgKlxuXHQgICAqICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuXHQgICAqICAgIHZhciBjaGlsZHJlbiA9IFJlYWN0Q29udGV4dC53aXRoQ29udGV4dCh7Zm9vOiAnZm9vJ30sICgpID0+IChcblx0ICAgKlxuXHQgICAqICAgICkpO1xuXHQgICAqICAgIHJldHVybiA8ZGl2PntjaGlsZHJlbn08L2Rpdj47XG5cdCAgICogIH1cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7b2JqZWN0fSBuZXdDb250ZXh0IE5ldyBjb250ZXh0IHRvIG1lcmdlIGludG8gdGhlIGV4aXN0aW5nIGNvbnRleHRcblx0ICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzY29wZWRDYWxsYmFjayBDYWxsYmFjayB0byBydW4gd2l0aCB0aGUgbmV3IGNvbnRleHRcblx0ICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudHxhcnJheTxSZWFjdENvbXBvbmVudD59XG5cdCAgICovXG5cdCAgd2l0aENvbnRleHQ6IGZ1bmN0aW9uKG5ld0NvbnRleHQsIHNjb3BlZENhbGxiYWNrKSB7XG5cdCAgICB2YXIgcmVzdWx0O1xuXHQgICAgdmFyIHByZXZpb3VzQ29udGV4dCA9IFJlYWN0Q29udGV4dC5jdXJyZW50O1xuXHQgICAgUmVhY3RDb250ZXh0LmN1cnJlbnQgPSBhc3NpZ24oe30sIHByZXZpb3VzQ29udGV4dCwgbmV3Q29udGV4dCk7XG5cdCAgICB0cnkge1xuXHQgICAgICByZXN1bHQgPSBzY29wZWRDYWxsYmFjaygpO1xuXHQgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgUmVhY3RDb250ZXh0LmN1cnJlbnQgPSBwcmV2aW91c0NvbnRleHQ7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcmVzdWx0O1xuXHQgIH1cblx0XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29udGV4dDtcblxuXG4vKioqLyB9LFxuLyogNDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFbGVtZW50VmFsaWRhdG9yXG5cdCAqL1xuXHRcblx0LyoqXG5cdCAqIFJlYWN0RWxlbWVudFZhbGlkYXRvciBwcm92aWRlcyBhIHdyYXBwZXIgYXJvdW5kIGEgZWxlbWVudCBmYWN0b3J5XG5cdCAqIHdoaWNoIHZhbGlkYXRlcyB0aGUgcHJvcHMgcGFzc2VkIHRvIHRoZSBlbGVtZW50LiBUaGlzIGlzIGludGVuZGVkIHRvIGJlXG5cdCAqIHVzZWQgb25seSBpbiBERVYgYW5kIGNvdWxkIGJlIHJlcGxhY2VkIGJ5IGEgc3RhdGljIHR5cGUgY2hlY2tlciBmb3IgbGFuZ3VhZ2VzXG5cdCAqIHRoYXQgc3VwcG9ydCBpdC5cblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBSZWFjdEVsZW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHR2YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oNzEpO1xuXHR2YXIgUmVhY3RDdXJyZW50T3duZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblx0XG5cdHZhciBtb25pdG9yQ29kZVVzZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzgpO1xuXHR2YXIgd2FybmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdFxuXHQvKipcblx0ICogV2FybiBpZiB0aGVyZSdzIG5vIGtleSBleHBsaWNpdGx5IHNldCBvbiBkeW5hbWljIGFycmF5cyBvZiBjaGlsZHJlbiBvclxuXHQgKiBvYmplY3Qga2V5cyBhcmUgbm90IHZhbGlkLiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIHRyYWNrIG9mIGNoaWxkcmVuIGJldHdlZW5cblx0ICogdXBkYXRlcy5cblx0ICovXG5cdHZhciBvd25lckhhc0tleVVzZVdhcm5pbmcgPSB7XG5cdCAgJ3JlYWN0X2tleV93YXJuaW5nJzoge30sXG5cdCAgJ3JlYWN0X251bWVyaWNfa2V5X3dhcm5pbmcnOiB7fVxuXHR9O1xuXHR2YXIgb3duZXJIYXNNb25pdG9yZWRPYmplY3RNYXAgPSB7fTtcblx0XG5cdHZhciBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcblx0XG5cdHZhciBOVU1FUklDX1BST1BFUlRZX1JFR0VYID0gL15cXGQrJC87XG5cdFxuXHQvKipcblx0ICogR2V0cyB0aGUgY3VycmVudCBvd25lcidzIGRpc3BsYXlOYW1lIGZvciB1c2UgaW4gd2FybmluZ3MuXG5cdCAqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBAcmV0dXJuIHs/c3RyaW5nfSBEaXNwbGF5IG5hbWUgb3IgdW5kZWZpbmVkXG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRDdXJyZW50T3duZXJEaXNwbGF5TmFtZSgpIHtcblx0ICB2YXIgY3VycmVudCA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG5cdCAgcmV0dXJuIGN1cnJlbnQgJiYgY3VycmVudC5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCB1bmRlZmluZWQ7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBXYXJuIGlmIHRoZSBjb21wb25lbnQgZG9lc24ndCBoYXZlIGFuIGV4cGxpY2l0IGtleSBhc3NpZ25lZCB0byBpdC5cblx0ICogVGhpcyBjb21wb25lbnQgaXMgaW4gYW4gYXJyYXkuIFRoZSBhcnJheSBjb3VsZCBncm93IGFuZCBzaHJpbmsgb3IgYmVcblx0ICogcmVvcmRlcmVkLiBBbGwgY2hpbGRyZW4gdGhhdCBoYXZlbid0IGFscmVhZHkgYmVlbiB2YWxpZGF0ZWQgYXJlIHJlcXVpcmVkIHRvXG5cdCAqIGhhdmUgYSBcImtleVwiIHByb3BlcnR5IGFzc2lnbmVkIHRvIGl0LlxuXHQgKlxuXHQgKiBAaW50ZXJuYWxcblx0ICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50IENvbXBvbmVudCB0aGF0IHJlcXVpcmVzIGEga2V5LlxuXHQgKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgY29tcG9uZW50J3MgcGFyZW50J3MgdHlwZS5cblx0ICovXG5cdGZ1bmN0aW9uIHZhbGlkYXRlRXhwbGljaXRLZXkoY29tcG9uZW50LCBwYXJlbnRUeXBlKSB7XG5cdCAgaWYgKGNvbXBvbmVudC5fc3RvcmUudmFsaWRhdGVkIHx8IGNvbXBvbmVudC5rZXkgIT0gbnVsbCkge1xuXHQgICAgcmV0dXJuO1xuXHQgIH1cblx0ICBjb21wb25lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG5cdFxuXHQgIHdhcm5BbmRNb25pdG9yRm9yS2V5VXNlKFxuXHQgICAgJ3JlYWN0X2tleV93YXJuaW5nJyxcblx0ICAgICdFYWNoIGNoaWxkIGluIGFuIGFycmF5IHNob3VsZCBoYXZlIGEgdW5pcXVlIFwia2V5XCIgcHJvcC4nLFxuXHQgICAgY29tcG9uZW50LFxuXHQgICAgcGFyZW50VHlwZVxuXHQgICk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBXYXJuIGlmIHRoZSBrZXkgaXMgYmVpbmcgZGVmaW5lZCBhcyBhbiBvYmplY3QgcHJvcGVydHkgYnV0IGhhcyBhbiBpbmNvcnJlY3Rcblx0ICogdmFsdWUuXG5cdCAqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBrZXkuXG5cdCAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdGhhdCByZXF1aXJlcyBhIGtleS5cblx0ICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGNvbXBvbmVudCdzIHBhcmVudCdzIHR5cGUuXG5cdCAqL1xuXHRmdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnR5S2V5KG5hbWUsIGNvbXBvbmVudCwgcGFyZW50VHlwZSkge1xuXHQgIGlmICghTlVNRVJJQ19QUk9QRVJUWV9SRUdFWC50ZXN0KG5hbWUpKSB7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIHdhcm5BbmRNb25pdG9yRm9yS2V5VXNlKFxuXHQgICAgJ3JlYWN0X251bWVyaWNfa2V5X3dhcm5pbmcnLFxuXHQgICAgJ0NoaWxkIG9iamVjdHMgc2hvdWxkIGhhdmUgbm9uLW51bWVyaWMga2V5cyBzbyBvcmRlcmluZyBpcyBwcmVzZXJ2ZWQuJyxcblx0ICAgIGNvbXBvbmVudCxcblx0ICAgIHBhcmVudFR5cGVcblx0ICApO1xuXHR9XG5cdFxuXHQvKipcblx0ICogU2hhcmVkIHdhcm5pbmcgYW5kIG1vbml0b3JpbmcgY29kZSBmb3IgdGhlIGtleSB3YXJuaW5ncy5cblx0ICpcblx0ICogQGludGVybmFsXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB3YXJuaW5nSUQgVGhlIGlkIHVzZWQgd2hlbiBsb2dnaW5nLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgYmFzZSB3YXJuaW5nIHRoYXQgZ2V0cyBvdXRwdXQuXG5cdCAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdGhhdCByZXF1aXJlcyBhIGtleS5cblx0ICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGNvbXBvbmVudCdzIHBhcmVudCdzIHR5cGUuXG5cdCAqL1xuXHRmdW5jdGlvbiB3YXJuQW5kTW9uaXRvckZvcktleVVzZSh3YXJuaW5nSUQsIG1lc3NhZ2UsIGNvbXBvbmVudCwgcGFyZW50VHlwZSkge1xuXHQgIHZhciBvd25lck5hbWUgPSBnZXRDdXJyZW50T3duZXJEaXNwbGF5TmFtZSgpO1xuXHQgIHZhciBwYXJlbnROYW1lID0gcGFyZW50VHlwZS5kaXNwbGF5TmFtZTtcblx0XG5cdCAgdmFyIHVzZU5hbWUgPSBvd25lck5hbWUgfHwgcGFyZW50TmFtZTtcblx0ICB2YXIgbWVtb2l6ZXIgPSBvd25lckhhc0tleVVzZVdhcm5pbmdbd2FybmluZ0lEXTtcblx0ICBpZiAobWVtb2l6ZXIuaGFzT3duUHJvcGVydHkodXNlTmFtZSkpIHtcblx0ICAgIHJldHVybjtcblx0ICB9XG5cdCAgbWVtb2l6ZXJbdXNlTmFtZV0gPSB0cnVlO1xuXHRcblx0ICBtZXNzYWdlICs9IG93bmVyTmFtZSA/XG5cdCAgICAoXCIgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgXCIgKyBvd25lck5hbWUgKyBcIi5cIikgOlxuXHQgICAgKFwiIENoZWNrIHRoZSByZW5kZXJDb21wb25lbnQgY2FsbCB1c2luZyA8XCIgKyBwYXJlbnROYW1lICsgXCI+LlwiKTtcblx0XG5cdCAgLy8gVXN1YWxseSB0aGUgY3VycmVudCBvd25lciBpcyB0aGUgb2ZmZW5kZXIsIGJ1dCBpZiBpdCBhY2NlcHRzIGNoaWxkcmVuIGFzIGFcblx0ICAvLyBwcm9wZXJ0eSwgaXQgbWF5IGJlIHRoZSBjcmVhdG9yIG9mIHRoZSBjaGlsZCB0aGF0J3MgcmVzcG9uc2libGUgZm9yXG5cdCAgLy8gYXNzaWduaW5nIGl0IGEga2V5LlxuXHQgIHZhciBjaGlsZE93bmVyTmFtZSA9IG51bGw7XG5cdCAgaWYgKGNvbXBvbmVudC5fb3duZXIgJiYgY29tcG9uZW50Ll9vd25lciAhPT0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuXHQgICAgLy8gTmFtZSBvZiB0aGUgY29tcG9uZW50IHRoYXQgb3JpZ2luYWxseSBjcmVhdGVkIHRoaXMgY2hpbGQuXG5cdCAgICBjaGlsZE93bmVyTmFtZSA9IGNvbXBvbmVudC5fb3duZXIuY29uc3RydWN0b3IuZGlzcGxheU5hbWU7XG5cdFxuXHQgICAgbWVzc2FnZSArPSAoXCIgSXQgd2FzIHBhc3NlZCBhIGNoaWxkIGZyb20gXCIgKyBjaGlsZE93bmVyTmFtZSArIFwiLlwiKTtcblx0ICB9XG5cdFxuXHQgIG1lc3NhZ2UgKz0gJyBTZWUgaHR0cDovL2ZiLm1lL3JlYWN0LXdhcm5pbmcta2V5cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nO1xuXHQgIG1vbml0b3JDb2RlVXNlKHdhcm5pbmdJRCwge1xuXHQgICAgY29tcG9uZW50OiB1c2VOYW1lLFxuXHQgICAgY29tcG9uZW50T3duZXI6IGNoaWxkT3duZXJOYW1lXG5cdCAgfSk7XG5cdCAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuXHR9XG5cdFxuXHQvKipcblx0ICogTG9nIHRoYXQgd2UncmUgdXNpbmcgYW4gb2JqZWN0IG1hcC4gV2UncmUgY29uc2lkZXJpbmcgZGVwcmVjYXRpbmcgdGhpc1xuXHQgKiBmZWF0dXJlIGFuZCByZXBsYWNlIGl0IHdpdGggcHJvcGVyIE1hcCBhbmQgSW1tdXRhYmxlTWFwIGRhdGEgc3RydWN0dXJlcy5cblx0ICpcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRmdW5jdGlvbiBtb25pdG9yVXNlT2ZPYmplY3RNYXAoKSB7XG5cdCAgdmFyIGN1cnJlbnROYW1lID0gZ2V0Q3VycmVudE93bmVyRGlzcGxheU5hbWUoKSB8fCAnJztcblx0ICBpZiAob3duZXJIYXNNb25pdG9yZWRPYmplY3RNYXAuaGFzT3duUHJvcGVydHkoY3VycmVudE5hbWUpKSB7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIG93bmVySGFzTW9uaXRvcmVkT2JqZWN0TWFwW2N1cnJlbnROYW1lXSA9IHRydWU7XG5cdCAgbW9uaXRvckNvZGVVc2UoJ3JlYWN0X29iamVjdF9tYXBfY2hpbGRyZW4nKTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIEVuc3VyZSB0aGF0IGV2ZXJ5IGNvbXBvbmVudCBlaXRoZXIgaXMgcGFzc2VkIGluIGEgc3RhdGljIGxvY2F0aW9uLCBpbiBhblxuXHQgKiBhcnJheSB3aXRoIGFuIGV4cGxpY2l0IGtleXMgcHJvcGVydHkgZGVmaW5lZCwgb3IgaW4gYW4gb2JqZWN0IGxpdGVyYWxcblx0ICogd2l0aCB2YWxpZCBrZXkgcHJvcGVydHkuXG5cdCAqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBAcGFyYW0geyp9IGNvbXBvbmVudCBTdGF0aWNhbGx5IHBhc3NlZCBjaGlsZCBvZiBhbnkgdHlwZS5cblx0ICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGNvbXBvbmVudCdzIHBhcmVudCdzIHR5cGUuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRmdW5jdGlvbiB2YWxpZGF0ZUNoaWxkS2V5cyhjb21wb25lbnQsIHBhcmVudFR5cGUpIHtcblx0ICBpZiAoQXJyYXkuaXNBcnJheShjb21wb25lbnQpKSB7XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBvbmVudC5sZW5ndGg7IGkrKykge1xuXHQgICAgICB2YXIgY2hpbGQgPSBjb21wb25lbnRbaV07XG5cdCAgICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG5cdCAgICAgICAgdmFsaWRhdGVFeHBsaWNpdEtleShjaGlsZCwgcGFyZW50VHlwZSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9IGVsc2UgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjb21wb25lbnQpKSB7XG5cdCAgICAvLyBUaGlzIGNvbXBvbmVudCB3YXMgcGFzc2VkIGluIGEgdmFsaWQgbG9jYXRpb24uXG5cdCAgICBjb21wb25lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG5cdCAgfSBlbHNlIGlmIChjb21wb25lbnQgJiYgdHlwZW9mIGNvbXBvbmVudCA9PT0gJ29iamVjdCcpIHtcblx0ICAgIG1vbml0b3JVc2VPZk9iamVjdE1hcCgpO1xuXHQgICAgZm9yICh2YXIgbmFtZSBpbiBjb21wb25lbnQpIHtcblx0ICAgICAgdmFsaWRhdGVQcm9wZXJ0eUtleShuYW1lLCBjb21wb25lbnRbbmFtZV0sIHBhcmVudFR5cGUpO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIEFzc2VydCB0aGF0IHRoZSBwcm9wcyBhcmUgdmFsaWRcblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudE5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50IGZvciBlcnJvciBtZXNzYWdlcy5cblx0ICogQHBhcmFtIHtvYmplY3R9IHByb3BUeXBlcyBNYXAgb2YgcHJvcCBuYW1lIHRvIGEgUmVhY3RQcm9wVHlwZVxuXHQgKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcblx0ICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXMoY29tcG9uZW50TmFtZSwgcHJvcFR5cGVzLCBwcm9wcywgbG9jYXRpb24pIHtcblx0ICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpIHtcblx0ICAgIGlmIChwcm9wVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG5cdCAgICAgIHZhciBlcnJvcjtcblx0ICAgICAgLy8gUHJvcCB0eXBlIHZhbGlkYXRpb24gbWF5IHRocm93LiBJbiBjYXNlIHRoZXkgZG8sIHdlIGRvbid0IHdhbnQgdG9cblx0ICAgICAgLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LlxuXHQgICAgICAvLyBBZnRlciB0aGVzZSBoYXZlIGJlZW4gY2xlYW5lZCB1cCwgd2UnbGwgbGV0IHRoZW0gdGhyb3cuXG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgZXJyb3IgPSBwcm9wVHlwZXNbcHJvcE5hbWVdKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuXHQgICAgICB9IGNhdGNoIChleCkge1xuXHQgICAgICAgIGVycm9yID0gZXg7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcblx0ICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcblx0ICAgICAgICAvLyBzYW1lIGVycm9yLlxuXHQgICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXSA9IHRydWU7XG5cdCAgICAgICAgLy8gVGhpcyB3aWxsIHNvb24gdXNlIHRoZSB3YXJuaW5nIG1vZHVsZVxuXHQgICAgICAgIG1vbml0b3JDb2RlVXNlKFxuXHQgICAgICAgICAgJ3JlYWN0X2ZhaWxlZF9kZXNjcmlwdG9yX3R5cGVfY2hlY2snLFxuXHQgICAgICAgICAgeyBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIH1cblx0ICAgICAgICApO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHR2YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0ge1xuXHRcblx0ICBjcmVhdGVFbGVtZW50OiBmdW5jdGlvbih0eXBlLCBwcm9wcywgY2hpbGRyZW4pIHtcblx0ICAgIC8vIFdlIHdhcm4gaW4gdGhpcyBjYXNlIGJ1dCBkb24ndCB0aHJvdy4gV2UgZXhwZWN0IHRoZSBlbGVtZW50IGNyZWF0aW9uIHRvXG5cdCAgICAvLyBzdWNjZWVkIGFuZCB0aGVyZSB3aWxsIGxpa2VseSBiZSBlcnJvcnMgaW4gcmVuZGVyLlxuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG5cdCAgICAgIHR5cGUgIT0gbnVsbCxcblx0ICAgICAgJ1JlYWN0LmNyZWF0ZUVsZW1lbnQ6IHR5cGUgc2hvdWxkIG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4gSXQgc2hvdWxkICcgK1xuXHQgICAgICAgICdiZSBhIHN0cmluZyAoZm9yIERPTSBlbGVtZW50cykgb3IgYSBSZWFjdENsYXNzIChmb3IgY29tcG9zaXRlICcgK1xuXHQgICAgICAgICdjb21wb25lbnRzKS4nXG5cdCAgICApIDogbnVsbCk7XG5cdFxuXHQgICAgdmFyIGVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcblx0ICAgIC8vIFRoZSByZXN1bHQgY2FuIGJlIG51bGxpc2ggaWYgYSBtb2NrIG9yIGEgY3VzdG9tIGZ1bmN0aW9uIGlzIHVzZWQuXG5cdCAgICAvLyBUT0RPOiBEcm9wIHRoaXMgd2hlbiB0aGVzZSBhcmUgbm8gbG9uZ2VyIGFsbG93ZWQgYXMgdGhlIHR5cGUgYXJndW1lbnQuXG5cdCAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG5cdCAgICAgIHJldHVybiBlbGVtZW50O1xuXHQgICAgfVxuXHRcblx0ICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGFyZ3VtZW50c1tpXSwgdHlwZSk7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKHR5cGUpIHtcblx0ICAgICAgdmFyIG5hbWUgPSB0eXBlLmRpc3BsYXlOYW1lO1xuXHQgICAgICBpZiAodHlwZS5wcm9wVHlwZXMpIHtcblx0ICAgICAgICBjaGVja1Byb3BUeXBlcyhcblx0ICAgICAgICAgIG5hbWUsXG5cdCAgICAgICAgICB0eXBlLnByb3BUeXBlcyxcblx0ICAgICAgICAgIGVsZW1lbnQucHJvcHMsXG5cdCAgICAgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3Bcblx0ICAgICAgICApO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh0eXBlLmNvbnRleHRUeXBlcykge1xuXHQgICAgICAgIGNoZWNrUHJvcFR5cGVzKFxuXHQgICAgICAgICAgbmFtZSxcblx0ICAgICAgICAgIHR5cGUuY29udGV4dFR5cGVzLFxuXHQgICAgICAgICAgZWxlbWVudC5fY29udGV4dCxcblx0ICAgICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY29udGV4dFxuXHQgICAgICAgICk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBlbGVtZW50O1xuXHQgIH0sXG5cdFxuXHQgIGNyZWF0ZUZhY3Rvcnk6IGZ1bmN0aW9uKHR5cGUpIHtcblx0ICAgIHZhciB2YWxpZGF0ZWRGYWN0b3J5ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUVsZW1lbnQuYmluZChcblx0ICAgICAgbnVsbCxcblx0ICAgICAgdHlwZVxuXHQgICAgKTtcblx0ICAgIHZhbGlkYXRlZEZhY3RvcnkudHlwZSA9IHR5cGU7XG5cdCAgICByZXR1cm4gdmFsaWRhdGVkRmFjdG9yeTtcblx0ICB9XG5cdFxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3I7XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiA0NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBSZWFjdElucHV0U2VsZWN0aW9uXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgUmVhY3RET01TZWxlY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzNik7XG5cdFxuXHR2YXIgY29udGFpbnNOb2RlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Nyk7XG5cdHZhciBmb2N1c05vZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4KTtcblx0dmFyIGdldEFjdGl2ZUVsZW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc5KTtcblx0XG5cdGZ1bmN0aW9uIGlzSW5Eb2N1bWVudChub2RlKSB7XG5cdCAgcmV0dXJuIGNvbnRhaW5zTm9kZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIG5vZGUpO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQFJlYWN0SW5wdXRTZWxlY3Rpb246IFJlYWN0IGlucHV0IHNlbGVjdGlvbiBtb2R1bGUuIEJhc2VkIG9uIFNlbGVjdGlvbi5qcyxcblx0ICogYnV0IG1vZGlmaWVkIHRvIGJlIHN1aXRhYmxlIGZvciByZWFjdCBhbmQgaGFzIGEgY291cGxlIG9mIGJ1ZyBmaXhlcyAoZG9lc24ndFxuXHQgKiBhc3N1bWUgYnV0dG9ucyBoYXZlIHJhbmdlIHNlbGVjdGlvbnMgYWxsb3dlZCkuXG5cdCAqIElucHV0IHNlbGVjdGlvbiBtb2R1bGUgZm9yIFJlYWN0LlxuXHQgKi9cblx0dmFyIFJlYWN0SW5wdXRTZWxlY3Rpb24gPSB7XG5cdFxuXHQgIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllczogZnVuY3Rpb24oZWxlbSkge1xuXHQgICAgcmV0dXJuIGVsZW0gJiYgKFxuXHQgICAgICAoZWxlbS5ub2RlTmFtZSA9PT0gJ0lOUFVUJyAmJiBlbGVtLnR5cGUgPT09ICd0ZXh0JykgfHxcblx0ICAgICAgZWxlbS5ub2RlTmFtZSA9PT0gJ1RFWFRBUkVBJyB8fFxuXHQgICAgICBlbGVtLmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnXG5cdCAgICApO1xuXHQgIH0sXG5cdFxuXHQgIGdldFNlbGVjdGlvbkluZm9ybWF0aW9uOiBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBmb2N1c2VkRWxlbSA9IGdldEFjdGl2ZUVsZW1lbnQoKTtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIGZvY3VzZWRFbGVtOiBmb2N1c2VkRWxlbSxcblx0ICAgICAgc2VsZWN0aW9uUmFuZ2U6XG5cdCAgICAgICAgICBSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhmb2N1c2VkRWxlbSkgP1xuXHQgICAgICAgICAgUmVhY3RJbnB1dFNlbGVjdGlvbi5nZXRTZWxlY3Rpb24oZm9jdXNlZEVsZW0pIDpcblx0ICAgICAgICAgIG51bGxcblx0ICAgIH07XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQHJlc3RvcmVTZWxlY3Rpb246IElmIGFueSBzZWxlY3Rpb24gaW5mb3JtYXRpb24gd2FzIHBvdGVudGlhbGx5IGxvc3QsXG5cdCAgICogcmVzdG9yZSBpdC4gVGhpcyBpcyB1c2VmdWwgd2hlbiBwZXJmb3JtaW5nIG9wZXJhdGlvbnMgdGhhdCBjb3VsZCByZW1vdmUgZG9tXG5cdCAgICogbm9kZXMgYW5kIHBsYWNlIHRoZW0gYmFjayBpbiwgcmVzdWx0aW5nIGluIGZvY3VzIGJlaW5nIGxvc3QuXG5cdCAgICovXG5cdCAgcmVzdG9yZVNlbGVjdGlvbjogZnVuY3Rpb24ocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbikge1xuXHQgICAgdmFyIGN1ckZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudCgpO1xuXHQgICAgdmFyIHByaW9yRm9jdXNlZEVsZW0gPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmZvY3VzZWRFbGVtO1xuXHQgICAgdmFyIHByaW9yU2VsZWN0aW9uUmFuZ2UgPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLnNlbGVjdGlvblJhbmdlO1xuXHQgICAgaWYgKGN1ckZvY3VzZWRFbGVtICE9PSBwcmlvckZvY3VzZWRFbGVtICYmXG5cdCAgICAgICAgaXNJbkRvY3VtZW50KHByaW9yRm9jdXNlZEVsZW0pKSB7XG5cdCAgICAgIGlmIChSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhwcmlvckZvY3VzZWRFbGVtKSkge1xuXHQgICAgICAgIFJlYWN0SW5wdXRTZWxlY3Rpb24uc2V0U2VsZWN0aW9uKFxuXHQgICAgICAgICAgcHJpb3JGb2N1c2VkRWxlbSxcblx0ICAgICAgICAgIHByaW9yU2VsZWN0aW9uUmFuZ2Vcblx0ICAgICAgICApO1xuXHQgICAgICB9XG5cdCAgICAgIGZvY3VzTm9kZShwcmlvckZvY3VzZWRFbGVtKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBAZ2V0U2VsZWN0aW9uOiBHZXRzIHRoZSBzZWxlY3Rpb24gYm91bmRzIG9mIGEgZm9jdXNlZCB0ZXh0YXJlYSwgaW5wdXQgb3Jcblx0ICAgKiBjb250ZW50RWRpdGFibGUgbm9kZS5cblx0ICAgKiAtQGlucHV0OiBMb29rIHVwIHNlbGVjdGlvbiBib3VuZHMgb2YgdGhpcyBpbnB1dFxuXHQgICAqIC1AcmV0dXJuIHtzdGFydDogc2VsZWN0aW9uU3RhcnQsIGVuZDogc2VsZWN0aW9uRW5kfVxuXHQgICAqL1xuXHQgIGdldFNlbGVjdGlvbjogZnVuY3Rpb24oaW5wdXQpIHtcblx0ICAgIHZhciBzZWxlY3Rpb247XG5cdFxuXHQgICAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gaW5wdXQpIHtcblx0ICAgICAgLy8gTW9kZXJuIGJyb3dzZXIgd2l0aCBpbnB1dCBvciB0ZXh0YXJlYS5cblx0ICAgICAgc2VsZWN0aW9uID0ge1xuXHQgICAgICAgIHN0YXJ0OiBpbnB1dC5zZWxlY3Rpb25TdGFydCxcblx0ICAgICAgICBlbmQ6IGlucHV0LnNlbGVjdGlvbkVuZFxuXHQgICAgICB9O1xuXHQgICAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24gJiYgaW5wdXQubm9kZU5hbWUgPT09ICdJTlBVVCcpIHtcblx0ICAgICAgLy8gSUU4IGlucHV0LlxuXHQgICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcblx0ICAgICAgLy8gVGhlcmUgY2FuIG9ubHkgYmUgb25lIHNlbGVjdGlvbiBwZXIgZG9jdW1lbnQgaW4gSUUsIHNvIGl0IG11c3Rcblx0ICAgICAgLy8gYmUgaW4gb3VyIGVsZW1lbnQuXG5cdCAgICAgIGlmIChyYW5nZS5wYXJlbnRFbGVtZW50KCkgPT09IGlucHV0KSB7XG5cdCAgICAgICAgc2VsZWN0aW9uID0ge1xuXHQgICAgICAgICAgc3RhcnQ6IC1yYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIC1pbnB1dC52YWx1ZS5sZW5ndGgpLFxuXHQgICAgICAgICAgZW5kOiAtcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgLWlucHV0LnZhbHVlLmxlbmd0aClcblx0ICAgICAgICB9O1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAvLyBDb250ZW50IGVkaXRhYmxlIG9yIG9sZCBJRSB0ZXh0YXJlYS5cblx0ICAgICAgc2VsZWN0aW9uID0gUmVhY3RET01TZWxlY3Rpb24uZ2V0T2Zmc2V0cyhpbnB1dCk7XG5cdCAgICB9XG5cdFxuXHQgICAgcmV0dXJuIHNlbGVjdGlvbiB8fCB7c3RhcnQ6IDAsIGVuZDogMH07XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQHNldFNlbGVjdGlvbjogU2V0cyB0aGUgc2VsZWN0aW9uIGJvdW5kcyBvZiBhIHRleHRhcmVhIG9yIGlucHV0IGFuZCBmb2N1c2VzXG5cdCAgICogdGhlIGlucHV0LlxuXHQgICAqIC1AaW5wdXQgICAgIFNldCBzZWxlY3Rpb24gYm91bmRzIG9mIHRoaXMgaW5wdXQgb3IgdGV4dGFyZWFcblx0ICAgKiAtQG9mZnNldHMgICBPYmplY3Qgb2Ygc2FtZSBmb3JtIHRoYXQgaXMgcmV0dXJuZWQgZnJvbSBnZXQqXG5cdCAgICovXG5cdCAgc2V0U2VsZWN0aW9uOiBmdW5jdGlvbihpbnB1dCwgb2Zmc2V0cykge1xuXHQgICAgdmFyIHN0YXJ0ID0gb2Zmc2V0cy5zdGFydDtcblx0ICAgIHZhciBlbmQgPSBvZmZzZXRzLmVuZDtcblx0ICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJykge1xuXHQgICAgICBlbmQgPSBzdGFydDtcblx0ICAgIH1cblx0XG5cdCAgICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuXHQgICAgICBpbnB1dC5zZWxlY3Rpb25TdGFydCA9IHN0YXJ0O1xuXHQgICAgICBpbnB1dC5zZWxlY3Rpb25FbmQgPSBNYXRoLm1pbihlbmQsIGlucHV0LnZhbHVlLmxlbmd0aCk7XG5cdCAgICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbiAmJiBpbnB1dC5ub2RlTmFtZSA9PT0gJ0lOUFVUJykge1xuXHQgICAgICB2YXIgcmFuZ2UgPSBpbnB1dC5jcmVhdGVUZXh0UmFuZ2UoKTtcblx0ICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG5cdCAgICAgIHJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgc3RhcnQpO1xuXHQgICAgICByYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCBlbmQgLSBzdGFydCk7XG5cdCAgICAgIHJhbmdlLnNlbGVjdCgpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgUmVhY3RET01TZWxlY3Rpb24uc2V0T2Zmc2V0cyhpbnB1dCwgb2Zmc2V0cyk7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdElucHV0U2VsZWN0aW9uO1xuXG5cbi8qKiovIH0sXG4vKiA0OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBhY2N1bXVsYXRlSW50b1xuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIGludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHQvKipcblx0ICpcblx0ICogQWNjdW11bGF0ZXMgaXRlbXMgdGhhdCBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCBpbnRvIHRoZSBmaXJzdCBvbmUuIFRoaXNcblx0ICogaXMgdXNlZCB0byBjb25zZXJ2ZSBtZW1vcnkgYnkgYXZvaWRpbmcgYXJyYXkgYWxsb2NhdGlvbnMsIGFuZCB0aHVzIHNhY3JpZmljZXNcblx0ICogQVBJIGNsZWFubmVzcy4gU2luY2UgYGN1cnJlbnRgIGNhbiBiZSBudWxsIGJlZm9yZSBiZWluZyBwYXNzZWQgaW4gYW5kIG5vdFxuXHQgKiBudWxsIGFmdGVyIHRoaXMgZnVuY3Rpb24sIG1ha2Ugc3VyZSB0byBhc3NpZ24gaXQgYmFjayB0byBgY3VycmVudGA6XG5cdCAqXG5cdCAqIGBhID0gYWNjdW11bGF0ZUludG8oYSwgYik7YFxuXHQgKlxuXHQgKiBUaGlzIEFQSSBzaG91bGQgYmUgc3BhcmluZ2x5IHVzZWQuIFRyeSBgYWNjdW11bGF0ZWAgZm9yIHNvbWV0aGluZyBjbGVhbmVyLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHsqfGFycmF5PCo+fSBBbiBhY2N1bXVsYXRpb24gb2YgaXRlbXMuXG5cdCAqL1xuXHRcblx0ZnVuY3Rpb24gYWNjdW11bGF0ZUludG8oY3VycmVudCwgbmV4dCkge1xuXHQgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICBuZXh0ICE9IG51bGwsXG5cdCAgICAnYWNjdW11bGF0ZUludG8oLi4uKTogQWNjdW11bGF0ZWQgaXRlbXMgbXVzdCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuJ1xuXHQgICkgOiBpbnZhcmlhbnQobmV4dCAhPSBudWxsKSk7XG5cdCAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuXHQgICAgcmV0dXJuIG5leHQ7XG5cdCAgfVxuXHRcblx0ICAvLyBCb3RoIGFyZSBub3QgZW1wdHkuIFdhcm5pbmc6IE5ldmVyIGNhbGwgeC5jb25jYXQoeSkgd2hlbiB5b3UgYXJlIG5vdFxuXHQgIC8vIGNlcnRhaW4gdGhhdCB4IGlzIGFuIEFycmF5ICh4IGNvdWxkIGJlIGEgc3RyaW5nIHdpdGggY29uY2F0IG1ldGhvZCkuXG5cdCAgdmFyIGN1cnJlbnRJc0FycmF5ID0gQXJyYXkuaXNBcnJheShjdXJyZW50KTtcblx0ICB2YXIgbmV4dElzQXJyYXkgPSBBcnJheS5pc0FycmF5KG5leHQpO1xuXHRcblx0ICBpZiAoY3VycmVudElzQXJyYXkgJiYgbmV4dElzQXJyYXkpIHtcblx0ICAgIGN1cnJlbnQucHVzaC5hcHBseShjdXJyZW50LCBuZXh0KTtcblx0ICAgIHJldHVybiBjdXJyZW50O1xuXHQgIH1cblx0XG5cdCAgaWYgKGN1cnJlbnRJc0FycmF5KSB7XG5cdCAgICBjdXJyZW50LnB1c2gobmV4dCk7XG5cdCAgICByZXR1cm4gY3VycmVudDtcblx0ICB9XG5cdFxuXHQgIGlmIChuZXh0SXNBcnJheSkge1xuXHQgICAgLy8gQSBiaXQgdG9vIGRhbmdlcm91cyB0byBtdXRhdGUgYG5leHRgLlxuXHQgICAgcmV0dXJuIFtjdXJyZW50XS5jb25jYXQobmV4dCk7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gW2N1cnJlbnQsIG5leHRdO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGFjY3VtdWxhdGVJbnRvO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogNDkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBkZXByZWNhdGVkXG5cdCAqL1xuXHRcblx0dmFyIGFzc2lnbiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdHZhciB3YXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdC8qKlxuXHQgKiBUaGlzIHdpbGwgbG9nIGEgc2luZ2xlIGRlcHJlY2F0aW9uIG5vdGljZSBwZXIgZnVuY3Rpb24gYW5kIGZvcndhcmQgdGhlIGNhbGxcblx0ICogb24gdG8gdGhlIG5ldyBBUEkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2UgVGhlIG5hbWVzcGFjZSBvZiB0aGUgY2FsbCwgZWcgJ1JlYWN0J1xuXHQgKiBAcGFyYW0ge3N0cmluZ30gb2xkTmFtZSBUaGUgb2xkIGZ1bmN0aW9uIG5hbWUsIGVnICdyZW5kZXJDb21wb25lbnQnXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuZXdOYW1lIFRoZSBuZXcgZnVuY3Rpb24gbmFtZSwgZWcgJ3JlbmRlcidcblx0ICogQHBhcmFtIHsqfSBjdHggVGhlIGNvbnRleHQgdGhpcyBmb3J3YXJkZWQgY2FsbCBzaG91bGQgcnVuIGluXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBmb3J3YXJkIG9uIHRvXG5cdCAqIEByZXR1cm4geyp9IFdpbGwgYmUgdGhlIHZhbHVlIGFzIHJldHVybmVkIGZyb20gYGZuYFxuXHQgKi9cblx0ZnVuY3Rpb24gZGVwcmVjYXRlZChuYW1lc3BhY2UsIG9sZE5hbWUsIG5ld05hbWUsIGN0eCwgZm4pIHtcblx0ICB2YXIgd2FybmVkID0gZmFsc2U7XG5cdCAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuXHQgICAgdmFyIG5ld0ZuID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuXHQgICAgICAgIHdhcm5lZCxcblx0ICAgICAgICAobmFtZXNwYWNlICsgXCIuXCIgKyBvbGROYW1lICsgXCIgd2lsbCBiZSBkZXByZWNhdGVkIGluIGEgZnV0dXJlIHZlcnNpb24uIFwiKSArXG5cdCAgICAgICAgKFwiVXNlIFwiICsgbmFtZXNwYWNlICsgXCIuXCIgKyBuZXdOYW1lICsgXCIgaW5zdGVhZC5cIilcblx0ICAgICAgKSA6IG51bGwpO1xuXHQgICAgICB3YXJuZWQgPSB0cnVlO1xuXHQgICAgICByZXR1cm4gZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpO1xuXHQgICAgfTtcblx0ICAgIG5ld0ZuLmRpc3BsYXlOYW1lID0gKG5hbWVzcGFjZSArIFwiX1wiICsgb2xkTmFtZSk7XG5cdCAgICAvLyBXZSBuZWVkIHRvIG1ha2Ugc3VyZSBhbGwgcHJvcGVydGllcyBvZiB0aGUgb3JpZ2luYWwgZm4gYXJlIGNvcGllZCBvdmVyLlxuXHQgICAgLy8gSW4gcGFydGljdWxhciwgdGhpcyBpcyBuZWVkZWQgdG8gc3VwcG9ydCBQcm9wVHlwZXNcblx0ICAgIHJldHVybiBhc3NpZ24obmV3Rm4sIGZuKTtcblx0ICB9XG5cdFxuXHQgIHJldHVybiBmbjtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGVkO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogNTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgZXNjYXBlVGV4dEZvckJyb3dzZXJcblx0ICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBFU0NBUEVfTE9PS1VQID0ge1xuXHQgIFwiJlwiOiBcIiZhbXA7XCIsXG5cdCAgXCI+XCI6IFwiJmd0O1wiLFxuXHQgIFwiPFwiOiBcIiZsdDtcIixcblx0ICBcIlxcXCJcIjogXCImcXVvdDtcIixcblx0ICBcIidcIjogXCImI3gyNztcIlxuXHR9O1xuXHRcblx0dmFyIEVTQ0FQRV9SRUdFWCA9IC9bJj48XCInXS9nO1xuXHRcblx0ZnVuY3Rpb24gZXNjYXBlcihtYXRjaCkge1xuXHQgIHJldHVybiBFU0NBUEVfTE9PS1VQW21hdGNoXTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIEVzY2FwZXMgdGV4dCB0byBwcmV2ZW50IHNjcmlwdGluZyBhdHRhY2tzLlxuXHQgKlxuXHQgKiBAcGFyYW0geyp9IHRleHQgVGV4dCB2YWx1ZSB0byBlc2NhcGUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBzdHJpbmcuXG5cdCAqL1xuXHRmdW5jdGlvbiBlc2NhcGVUZXh0Rm9yQnJvd3Nlcih0ZXh0KSB7XG5cdCAgcmV0dXJuICgnJyArIHRleHQpLnJlcGxhY2UoRVNDQVBFX1JFR0VYLCBlc2NhcGVyKTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBlc2NhcGVUZXh0Rm9yQnJvd3NlcjtcblxuXG4vKioqLyB9LFxuLyogNTEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgZm9yRWFjaEFjY3VtdWxhdGVkXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKipcblx0ICogQHBhcmFtIHthcnJheX0gYW4gXCJhY2N1bXVsYXRpb25cIiBvZiBpdGVtcyB3aGljaCBpcyBlaXRoZXIgYW4gQXJyYXkgb3Jcblx0ICogYSBzaW5nbGUgaXRlbS4gVXNlZnVsIHdoZW4gcGFpcmVkIHdpdGggdGhlIGBhY2N1bXVsYXRlYCBtb2R1bGUuIFRoaXMgaXMgYVxuXHQgKiBzaW1wbGUgdXRpbGl0eSB0aGF0IGFsbG93cyB1cyB0byByZWFzb24gYWJvdXQgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zLCBidXRcblx0ICogaGFuZGxpbmcgdGhlIGNhc2Ugd2hlbiB0aGVyZSBpcyBleGFjdGx5IG9uZSBpdGVtIChhbmQgd2UgZG8gbm90IG5lZWQgdG9cblx0ICogYWxsb2NhdGUgYW4gYXJyYXkpLlxuXHQgKi9cblx0dmFyIGZvckVhY2hBY2N1bXVsYXRlZCA9IGZ1bmN0aW9uKGFyciwgY2IsIHNjb3BlKSB7XG5cdCAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuXHQgICAgYXJyLmZvckVhY2goY2IsIHNjb3BlKTtcblx0ICB9IGVsc2UgaWYgKGFycikge1xuXHQgICAgY2IuY2FsbChzY29wZSwgYXJyKTtcblx0ICB9XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZvckVhY2hBY2N1bXVsYXRlZDtcblxuXG4vKioqLyB9LFxuLyogNTIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RXZlbnRDaGFyQ29kZVxuXHQgKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0LyoqXG5cdCAqIGBjaGFyQ29kZWAgcmVwcmVzZW50cyB0aGUgYWN0dWFsIFwiY2hhcmFjdGVyIGNvZGVcIiBhbmQgaXMgc2FmZSB0byB1c2Ugd2l0aFxuXHQgKiBgU3RyaW5nLmZyb21DaGFyQ29kZWAuIEFzIHN1Y2gsIG9ubHkga2V5cyB0aGF0IGNvcnJlc3BvbmQgdG8gcHJpbnRhYmxlXG5cdCAqIGNoYXJhY3RlcnMgcHJvZHVjZSBhIHZhbGlkIGBjaGFyQ29kZWAsIHRoZSBvbmx5IGV4Y2VwdGlvbiB0byB0aGlzIGlzIEVudGVyLlxuXHQgKiBUaGUgVGFiLWtleSBpcyBjb25zaWRlcmVkIG5vbi1wcmludGFibGUgYW5kIGRvZXMgbm90IGhhdmUgYSBgY2hhckNvZGVgLFxuXHQgKiBwcmVzdW1hYmx5IGJlY2F1c2UgaXQgZG9lcyBub3QgcHJvZHVjZSBhIHRhYi1jaGFyYWN0ZXIgaW4gYnJvd3NlcnMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cblx0ICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIGBjaGFyQ29kZWAgcHJvcGVydHkuXG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSB7XG5cdCAgdmFyIGNoYXJDb2RlO1xuXHQgIHZhciBrZXlDb2RlID0gbmF0aXZlRXZlbnQua2V5Q29kZTtcblx0XG5cdCAgaWYgKCdjaGFyQ29kZScgaW4gbmF0aXZlRXZlbnQpIHtcblx0ICAgIGNoYXJDb2RlID0gbmF0aXZlRXZlbnQuY2hhckNvZGU7XG5cdFxuXHQgICAgLy8gRkYgZG9lcyBub3Qgc2V0IGBjaGFyQ29kZWAgZm9yIHRoZSBFbnRlci1rZXksIGNoZWNrIGFnYWluc3QgYGtleUNvZGVgLlxuXHQgICAgaWYgKGNoYXJDb2RlID09PSAwICYmIGtleUNvZGUgPT09IDEzKSB7XG5cdCAgICAgIGNoYXJDb2RlID0gMTM7XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIC8vIElFOCBkb2VzIG5vdCBpbXBsZW1lbnQgYGNoYXJDb2RlYCwgYnV0IGBrZXlDb2RlYCBoYXMgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdCAgICBjaGFyQ29kZSA9IGtleUNvZGU7XG5cdCAgfVxuXHRcblx0ICAvLyBTb21lIG5vbi1wcmludGFibGUga2V5cyBhcmUgcmVwb3J0ZWQgaW4gYGNoYXJDb2RlYC9ga2V5Q29kZWAsIGRpc2NhcmQgdGhlbS5cblx0ICAvLyBNdXN0IG5vdCBkaXNjYXJkIHRoZSAobm9uLSlwcmludGFibGUgRW50ZXIta2V5LlxuXHQgIGlmIChjaGFyQ29kZSA+PSAzMiB8fCBjaGFyQ29kZSA9PT0gMTMpIHtcblx0ICAgIHJldHVybiBjaGFyQ29kZTtcblx0ICB9XG5cdFxuXHQgIHJldHVybiAwO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50Q2hhckNvZGU7XG5cblxuLyoqKi8gfSxcbi8qIDUzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxuXHQgKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0LyoqXG5cdCAqIFRyYW5zbGF0aW9uIGZyb20gbW9kaWZpZXIga2V5IHRvIHRoZSBhc3NvY2lhdGVkIHByb3BlcnR5IGluIHRoZSBldmVudC5cblx0ICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2tleXMtTW9kaWZpZXJzXG5cdCAqL1xuXHRcblx0dmFyIG1vZGlmaWVyS2V5VG9Qcm9wID0ge1xuXHQgICdBbHQnOiAnYWx0S2V5Jyxcblx0ICAnQ29udHJvbCc6ICdjdHJsS2V5Jyxcblx0ICAnTWV0YSc6ICdtZXRhS2V5Jyxcblx0ICAnU2hpZnQnOiAnc2hpZnRLZXknXG5cdH07XG5cdFxuXHQvLyBJRTggZG9lcyBub3QgaW1wbGVtZW50IGdldE1vZGlmaWVyU3RhdGUgc28gd2Ugc2ltcGx5IG1hcCBpdCB0byB0aGUgb25seVxuXHQvLyBtb2RpZmllciBrZXlzIGV4cG9zZWQgYnkgdGhlIGV2ZW50IGl0c2VsZiwgZG9lcyBub3Qgc3VwcG9ydCBMb2NrLWtleXMuXG5cdC8vIEN1cnJlbnRseSwgYWxsIG1ham9yIGJyb3dzZXJzIGV4Y2VwdCBDaHJvbWUgc2VlbXMgdG8gc3VwcG9ydCBMb2NrLWtleXMuXG5cdGZ1bmN0aW9uIG1vZGlmaWVyU3RhdGVHZXR0ZXIoa2V5QXJnKSB7XG5cdCAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cblx0ICB2YXIgc3ludGhldGljRXZlbnQgPSB0aGlzO1xuXHQgIHZhciBuYXRpdmVFdmVudCA9IHN5bnRoZXRpY0V2ZW50Lm5hdGl2ZUV2ZW50O1xuXHQgIGlmIChuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKSB7XG5cdCAgICByZXR1cm4gbmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZShrZXlBcmcpO1xuXHQgIH1cblx0ICB2YXIga2V5UHJvcCA9IG1vZGlmaWVyS2V5VG9Qcm9wW2tleUFyZ107XG5cdCAgcmV0dXJuIGtleVByb3AgPyAhIW5hdGl2ZUV2ZW50W2tleVByb3BdIDogZmFsc2U7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldEV2ZW50TW9kaWZpZXJTdGF0ZShuYXRpdmVFdmVudCkge1xuXHQgIHJldHVybiBtb2RpZmllclN0YXRlR2V0dGVyO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50TW9kaWZpZXJTdGF0ZTtcblxuXG4vKioqLyB9LFxuLyogNTQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RXZlbnRUYXJnZXRcblx0ICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qKlxuXHQgKiBHZXRzIHRoZSB0YXJnZXQgbm9kZSBmcm9tIGEgbmF0aXZlIGJyb3dzZXIgZXZlbnQgYnkgYWNjb3VudGluZyBmb3Jcblx0ICogaW5jb25zaXN0ZW5jaWVzIGluIGJyb3dzZXIgRE9NIEFQSXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cblx0ICogQHJldHVybiB7RE9NRXZlbnRUYXJnZXR9IFRhcmdldCBub2RlLlxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpIHtcblx0ICB2YXIgdGFyZ2V0ID0gbmF0aXZlRXZlbnQudGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnNyY0VsZW1lbnQgfHwgd2luZG93O1xuXHQgIC8vIFNhZmFyaSBtYXkgZmlyZSBldmVudHMgb24gdGV4dCBub2RlcyAoTm9kZS5URVhUX05PREUgaXMgMykuXG5cdCAgLy8gQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL2V2ZW50c19wcm9wZXJ0aWVzLmh0bWxcblx0ICByZXR1cm4gdGFyZ2V0Lm5vZGVUeXBlID09PSAzID8gdGFyZ2V0LnBhcmVudE5vZGUgOiB0YXJnZXQ7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZ2V0RXZlbnRUYXJnZXQ7XG5cblxuLyoqKi8gfSxcbi8qIDU1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIGdldFRleHRDb250ZW50QWNjZXNzb3Jcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFxuXHR2YXIgY29udGVudEtleSA9IG51bGw7XG5cdFxuXHQvKipcblx0ICogR2V0cyB0aGUga2V5IHVzZWQgdG8gYWNjZXNzIHRleHQgY29udGVudCBvbiBhIERPTSBub2RlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHs/c3RyaW5nfSBLZXkgdXNlZCB0byBhY2Nlc3MgdGV4dCBjb250ZW50LlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdGZ1bmN0aW9uIGdldFRleHRDb250ZW50QWNjZXNzb3IoKSB7XG5cdCAgaWYgKCFjb250ZW50S2V5ICYmIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuXHQgICAgLy8gUHJlZmVyIHRleHRDb250ZW50IHRvIGlubmVyVGV4dCBiZWNhdXNlIG1hbnkgYnJvd3NlcnMgc3VwcG9ydCBib3RoIGJ1dFxuXHQgICAgLy8gU1ZHIDx0ZXh0PiBlbGVtZW50cyBkb24ndCBzdXBwb3J0IGlubmVyVGV4dCBldmVuIHdoZW4gPGRpdj4gZG9lcy5cblx0ICAgIGNvbnRlbnRLZXkgPSAndGV4dENvbnRlbnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA/XG5cdCAgICAgICd0ZXh0Q29udGVudCcgOlxuXHQgICAgICAnaW5uZXJUZXh0Jztcblx0ICB9XG5cdCAgcmV0dXJuIGNvbnRlbnRLZXk7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcjtcblxuXG4vKioqLyB9LFxuLyogNTYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgaXNFdmVudFN1cHBvcnRlZFxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdHZhciB1c2VIYXNGZWF0dXJlO1xuXHRpZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG5cdCAgdXNlSGFzRmVhdHVyZSA9XG5cdCAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbiAmJlxuXHQgICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSAmJlxuXHQgICAgLy8gYWx3YXlzIHJldHVybnMgdHJ1ZSBpbiBuZXdlciBicm93c2VycyBhcyBwZXIgdGhlIHN0YW5kYXJkLlxuXHQgICAgLy8gQHNlZSBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWhhc2ZlYXR1cmVcblx0ICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJycsICcnKSAhPT0gdHJ1ZTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIENoZWNrcyBpZiBhbiBldmVudCBpcyBzdXBwb3J0ZWQgaW4gdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGVudmlyb25tZW50LlxuXHQgKlxuXHQgKiBOT1RFOiBUaGlzIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5IGZvciBub24tZ2VuZXJpYyBldmVudHMgc3VjaCBhcyBgY2hhbmdlYCxcblx0ICogYHJlc2V0YCwgYGxvYWRgLCBgZXJyb3JgLCBhbmQgYHNlbGVjdGAuXG5cdCAqXG5cdCAqIEJvcnJvd3MgZnJvbSBNb2Rlcm5penIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVTdWZmaXggRXZlbnQgbmFtZSwgZS5nLiBcImNsaWNrXCIuXG5cdCAqIEBwYXJhbSB7P2Jvb2xlYW59IGNhcHR1cmUgQ2hlY2sgaWYgdGhlIGNhcHR1cmUgcGhhc2UgaXMgc3VwcG9ydGVkLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCBpcyBzdXBwb3J0ZWQuXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBAbGljZW5zZSBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcblx0ICovXG5cdGZ1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoZXZlbnROYW1lU3VmZml4LCBjYXB0dXJlKSB7XG5cdCAgaWYgKCFFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gfHxcblx0ICAgICAgY2FwdHVyZSAmJiAhKCdhZGRFdmVudExpc3RlbmVyJyBpbiBkb2N1bWVudCkpIHtcblx0ICAgIHJldHVybiBmYWxzZTtcblx0ICB9XG5cdFxuXHQgIHZhciBldmVudE5hbWUgPSAnb24nICsgZXZlbnROYW1lU3VmZml4O1xuXHQgIHZhciBpc1N1cHBvcnRlZCA9IGV2ZW50TmFtZSBpbiBkb2N1bWVudDtcblx0XG5cdCAgaWYgKCFpc1N1cHBvcnRlZCkge1xuXHQgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcblx0ICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcblx0ICB9XG5cdFxuXHQgIGlmICghaXNTdXBwb3J0ZWQgJiYgdXNlSGFzRmVhdHVyZSAmJiBldmVudE5hbWVTdWZmaXggPT09ICd3aGVlbCcpIHtcblx0ICAgIC8vIFRoaXMgaXMgdGhlIG9ubHkgd2F5IHRvIHRlc3Qgc3VwcG9ydCBmb3IgdGhlIGB3aGVlbGAgZXZlbnQgaW4gSUU5Ky5cblx0ICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuXHQgIH1cblx0XG5cdCAgcmV0dXJuIGlzU3VwcG9ydGVkO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGlzRXZlbnRTdXBwb3J0ZWQ7XG5cblxuLyoqKi8gfSxcbi8qIDU3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XG5cdCAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKipcblx0ICogR2l2ZW4gYSBgcHJldkVsZW1lbnRgIGFuZCBgbmV4dEVsZW1lbnRgLCBkZXRlcm1pbmVzIGlmIHRoZSBleGlzdGluZ1xuXHQgKiBpbnN0YW5jZSBzaG91bGQgYmUgdXBkYXRlZCBhcyBvcHBvc2VkIHRvIGJlaW5nIGRlc3Ryb3llZCBvciByZXBsYWNlZCBieSBhIG5ld1xuXHQgKiBpbnN0YW5jZS4gQm90aCBhcmd1bWVudHMgYXJlIGVsZW1lbnRzLiBUaGlzIGVuc3VyZXMgdGhhdCB0aGlzIGxvZ2ljIGNhblxuXHQgKiBvcGVyYXRlIG9uIHN0YXRlbGVzcyB0cmVlcyB3aXRob3V0IGFueSBiYWNraW5nIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0gez9vYmplY3R9IHByZXZFbGVtZW50XG5cdCAqIEBwYXJhbSB7P29iamVjdH0gbmV4dEVsZW1lbnRcblx0ICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXhpc3RpbmcgaW5zdGFuY2Ugc2hvdWxkIGJlIHVwZGF0ZWQuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdGZ1bmN0aW9uIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkge1xuXHQgIGlmIChwcmV2RWxlbWVudCAmJiBuZXh0RWxlbWVudCAmJlxuXHQgICAgICBwcmV2RWxlbWVudC50eXBlID09PSBuZXh0RWxlbWVudC50eXBlICYmXG5cdCAgICAgIHByZXZFbGVtZW50LmtleSA9PT0gbmV4dEVsZW1lbnQua2V5ICYmXG5cdCAgICAgIHByZXZFbGVtZW50Ll9vd25lciA9PT0gbmV4dEVsZW1lbnQuX293bmVyKSB7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdCAgcmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50O1xuXG5cbi8qKiovIH0sXG4vKiA1OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqICBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiAgVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqICBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKi9cblx0KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0ICB0cnVlID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHQgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG5cdCAgZ2xvYmFsLkltbXV0YWJsZSA9IGZhY3RvcnkoKVxuXHR9KHRoaXMsIGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO3ZhciBTTElDRSQwID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXHRcblx0ICBmdW5jdGlvbiBjcmVhdGVDbGFzcyhjdG9yLCBzdXBlckNsYXNzKSB7XG5cdCAgICBpZiAoc3VwZXJDbGFzcykge1xuXHQgICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuXHQgICAgfVxuXHQgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yO1xuXHQgIH1cblx0XG5cdCAgLy8gVXNlZCBmb3Igc2V0dGluZyBwcm90b3R5cGUgbWV0aG9kcyB0aGF0IElFOCBjaG9rZXMgb24uXG5cdCAgdmFyIERFTEVURSA9ICdkZWxldGUnO1xuXHRcblx0ICAvLyBDb25zdGFudHMgZGVzY3JpYmluZyB0aGUgc2l6ZSBvZiB0cmllIG5vZGVzLlxuXHQgIHZhciBTSElGVCA9IDU7IC8vIFJlc3VsdGVkIGluIGJlc3QgcGVyZm9ybWFuY2UgYWZ0ZXIgX19fX19fP1xuXHQgIHZhciBTSVpFID0gMSA8PCBTSElGVDtcblx0ICB2YXIgTUFTSyA9IFNJWkUgLSAxO1xuXHRcblx0ICAvLyBBIGNvbnNpc3RlbnQgc2hhcmVkIHZhbHVlIHJlcHJlc2VudGluZyBcIm5vdCBzZXRcIiB3aGljaCBlcXVhbHMgbm90aGluZyBvdGhlclxuXHQgIC8vIHRoYW4gaXRzZWxmLCBhbmQgbm90aGluZyB0aGF0IGNvdWxkIGJlIHByb3ZpZGVkIGV4dGVybmFsbHkuXG5cdCAgdmFyIE5PVF9TRVQgPSB7fTtcblx0XG5cdCAgLy8gQm9vbGVhbiByZWZlcmVuY2VzLCBSb3VnaCBlcXVpdmFsZW50IG9mIGBib29sICZgLlxuXHQgIHZhciBDSEFOR0VfTEVOR1RIID0geyB2YWx1ZTogZmFsc2UgfTtcblx0ICB2YXIgRElEX0FMVEVSID0geyB2YWx1ZTogZmFsc2UgfTtcblx0XG5cdCAgZnVuY3Rpb24gTWFrZVJlZihyZWYpIHtcblx0ICAgIHJlZi52YWx1ZSA9IGZhbHNlO1xuXHQgICAgcmV0dXJuIHJlZjtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIFNldFJlZihyZWYpIHtcblx0ICAgIHJlZiAmJiAocmVmLnZhbHVlID0gdHJ1ZSk7XG5cdCAgfVxuXHRcblx0ICAvLyBBIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSB2YWx1ZSByZXByZXNlbnRpbmcgYW4gXCJvd25lclwiIGZvciB0cmFuc2llbnQgd3JpdGVzXG5cdCAgLy8gdG8gdHJpZXMuIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBvbmx5IGV2ZXIgZXF1YWwgaXRzZWxmLCBhbmQgd2lsbCBub3QgZXF1YWxcblx0ICAvLyB0aGUgcmV0dXJuIG9mIGFueSBzdWJzZXF1ZW50IGNhbGwgb2YgdGhpcyBmdW5jdGlvbi5cblx0ICBmdW5jdGlvbiBPd25lcklEKCkge31cblx0XG5cdCAgLy8gaHR0cDovL2pzcGVyZi5jb20vY29weS1hcnJheS1pbmxpbmVcblx0ICBmdW5jdGlvbiBhcnJDb3B5KGFyciwgb2Zmc2V0KSB7XG5cdCAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblx0ICAgIHZhciBsZW4gPSBNYXRoLm1heCgwLCBhcnIubGVuZ3RoIC0gb2Zmc2V0KTtcblx0ICAgIHZhciBuZXdBcnIgPSBuZXcgQXJyYXkobGVuKTtcblx0ICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBsZW47IGlpKyspIHtcblx0ICAgICAgbmV3QXJyW2lpXSA9IGFycltpaSArIG9mZnNldF07XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbmV3QXJyO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gZW5zdXJlU2l6ZShpdGVyKSB7XG5cdCAgICBpZiAoaXRlci5zaXplID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgaXRlci5zaXplID0gaXRlci5fX2l0ZXJhdGUocmV0dXJuVHJ1ZSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gaXRlci5zaXplO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gd3JhcEluZGV4KGl0ZXIsIGluZGV4KSB7XG5cdCAgICByZXR1cm4gaW5kZXggPj0gMCA/ICgraW5kZXgpIDogZW5zdXJlU2l6ZShpdGVyKSArICgraW5kZXgpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gd2hvbGVTbGljZShiZWdpbiwgZW5kLCBzaXplKSB7XG5cdCAgICByZXR1cm4gKGJlZ2luID09PSAwIHx8IChzaXplICE9PSB1bmRlZmluZWQgJiYgYmVnaW4gPD0gLXNpemUpKSAmJlxuXHQgICAgICAoZW5kID09PSB1bmRlZmluZWQgfHwgKHNpemUgIT09IHVuZGVmaW5lZCAmJiBlbmQgPj0gc2l6ZSkpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gcmVzb2x2ZUJlZ2luKGJlZ2luLCBzaXplKSB7XG5cdCAgICByZXR1cm4gcmVzb2x2ZUluZGV4KGJlZ2luLCBzaXplLCAwKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHJlc29sdmVFbmQoZW5kLCBzaXplKSB7XG5cdCAgICByZXR1cm4gcmVzb2x2ZUluZGV4KGVuZCwgc2l6ZSwgc2l6ZSk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiByZXNvbHZlSW5kZXgoaW5kZXgsIHNpemUsIGRlZmF1bHRJbmRleCkge1xuXHQgICAgcmV0dXJuIGluZGV4ID09PSB1bmRlZmluZWQgP1xuXHQgICAgICBkZWZhdWx0SW5kZXggOlxuXHQgICAgICBpbmRleCA8IDAgP1xuXHQgICAgICAgIE1hdGgubWF4KDAsIHNpemUgKyBpbmRleCkgOlxuXHQgICAgICAgIHNpemUgPT09IHVuZGVmaW5lZCA/XG5cdCAgICAgICAgICBpbmRleCA6XG5cdCAgICAgICAgICBNYXRoLm1pbihzaXplLCBpbmRleCk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBJdGVyYWJsZSh2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gaXNJdGVyYWJsZSh2YWx1ZSkgPyB2YWx1ZSA6IFNlcSh2YWx1ZSk7XG5cdCAgICB9XG5cdFxuXHRcblx0ICBjcmVhdGVDbGFzcyhLZXllZEl0ZXJhYmxlLCBJdGVyYWJsZSk7XG5cdCAgICBmdW5jdGlvbiBLZXllZEl0ZXJhYmxlKHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiBpc0tleWVkKHZhbHVlKSA/IHZhbHVlIDogS2V5ZWRTZXEodmFsdWUpO1xuXHQgICAgfVxuXHRcblx0XG5cdCAgY3JlYXRlQ2xhc3MoSW5kZXhlZEl0ZXJhYmxlLCBJdGVyYWJsZSk7XG5cdCAgICBmdW5jdGlvbiBJbmRleGVkSXRlcmFibGUodmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIGlzSW5kZXhlZCh2YWx1ZSkgPyB2YWx1ZSA6IEluZGV4ZWRTZXEodmFsdWUpO1xuXHQgICAgfVxuXHRcblx0XG5cdCAgY3JlYXRlQ2xhc3MoU2V0SXRlcmFibGUsIEl0ZXJhYmxlKTtcblx0ICAgIGZ1bmN0aW9uIFNldEl0ZXJhYmxlKHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiBpc0l0ZXJhYmxlKHZhbHVlKSAmJiAhaXNBc3NvY2lhdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IFNldFNlcSh2YWx1ZSk7XG5cdCAgICB9XG5cdFxuXHRcblx0XG5cdCAgZnVuY3Rpb24gaXNJdGVyYWJsZShtYXliZUl0ZXJhYmxlKSB7XG5cdCAgICByZXR1cm4gISEobWF5YmVJdGVyYWJsZSAmJiBtYXliZUl0ZXJhYmxlW0lTX0lURVJBQkxFX1NFTlRJTkVMXSk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBpc0tleWVkKG1heWJlS2V5ZWQpIHtcblx0ICAgIHJldHVybiAhIShtYXliZUtleWVkICYmIG1heWJlS2V5ZWRbSVNfS0VZRURfU0VOVElORUxdKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGlzSW5kZXhlZChtYXliZUluZGV4ZWQpIHtcblx0ICAgIHJldHVybiAhIShtYXliZUluZGV4ZWQgJiYgbWF5YmVJbmRleGVkW0lTX0lOREVYRURfU0VOVElORUxdKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGlzQXNzb2NpYXRpdmUobWF5YmVBc3NvY2lhdGl2ZSkge1xuXHQgICAgcmV0dXJuIGlzS2V5ZWQobWF5YmVBc3NvY2lhdGl2ZSkgfHwgaXNJbmRleGVkKG1heWJlQXNzb2NpYXRpdmUpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gaXNPcmRlcmVkKG1heWJlT3JkZXJlZCkge1xuXHQgICAgcmV0dXJuICEhKG1heWJlT3JkZXJlZCAmJiBtYXliZU9yZGVyZWRbSVNfT1JERVJFRF9TRU5USU5FTF0pO1xuXHQgIH1cblx0XG5cdCAgSXRlcmFibGUuaXNJdGVyYWJsZSA9IGlzSXRlcmFibGU7XG5cdCAgSXRlcmFibGUuaXNLZXllZCA9IGlzS2V5ZWQ7XG5cdCAgSXRlcmFibGUuaXNJbmRleGVkID0gaXNJbmRleGVkO1xuXHQgIEl0ZXJhYmxlLmlzQXNzb2NpYXRpdmUgPSBpc0Fzc29jaWF0aXZlO1xuXHQgIEl0ZXJhYmxlLmlzT3JkZXJlZCA9IGlzT3JkZXJlZDtcblx0XG5cdCAgSXRlcmFibGUuS2V5ZWQgPSBLZXllZEl0ZXJhYmxlO1xuXHQgIEl0ZXJhYmxlLkluZGV4ZWQgPSBJbmRleGVkSXRlcmFibGU7XG5cdCAgSXRlcmFibGUuU2V0ID0gU2V0SXRlcmFibGU7XG5cdFxuXHRcblx0ICB2YXIgSVNfSVRFUkFCTEVfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9JVEVSQUJMRV9fQEAnO1xuXHQgIHZhciBJU19LRVlFRF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0tFWUVEX19AQCc7XG5cdCAgdmFyIElTX0lOREVYRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9JTkRFWEVEX19AQCc7XG5cdCAgdmFyIElTX09SREVSRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9PUkRFUkVEX19AQCc7XG5cdFxuXHQgIC8qIGdsb2JhbCBTeW1ib2wgKi9cblx0XG5cdCAgdmFyIElURVJBVEVfS0VZUyA9IDA7XG5cdCAgdmFyIElURVJBVEVfVkFMVUVTID0gMTtcblx0ICB2YXIgSVRFUkFURV9FTlRSSUVTID0gMjtcblx0XG5cdCAgdmFyIFJFQUxfSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG5cdCAgdmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InO1xuXHRcblx0ICB2YXIgSVRFUkFUT1JfU1lNQk9MID0gUkVBTF9JVEVSQVRPUl9TWU1CT0wgfHwgRkFVWF9JVEVSQVRPUl9TWU1CT0w7XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBJdGVyYXRvcihuZXh0KSB7XG5cdCAgICAgIHRoaXMubmV4dCA9IG5leHQ7XG5cdCAgICB9XG5cdFxuXHQgICAgSXRlcmF0b3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiAnW0l0ZXJhdG9yXSc7XG5cdCAgICB9O1xuXHRcblx0XG5cdCAgSXRlcmF0b3IuS0VZUyA9IElURVJBVEVfS0VZUztcblx0ICBJdGVyYXRvci5WQUxVRVMgPSBJVEVSQVRFX1ZBTFVFUztcblx0ICBJdGVyYXRvci5FTlRSSUVTID0gSVRFUkFURV9FTlRSSUVTO1xuXHRcblx0ICBJdGVyYXRvci5wcm90b3R5cGUuaW5zcGVjdCA9XG5cdCAgSXRlcmF0b3IucHJvdG90eXBlLnRvU291cmNlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy50b1N0cmluZygpOyB9XG5cdCAgSXRlcmF0b3IucHJvdG90eXBlW0lURVJBVE9SX1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICByZXR1cm4gdGhpcztcblx0ICB9O1xuXHRcblx0XG5cdCAgZnVuY3Rpb24gaXRlcmF0b3JWYWx1ZSh0eXBlLCBrLCB2LCBpdGVyYXRvclJlc3VsdCkge1xuXHQgICAgdmFyIHZhbHVlID0gdHlwZSA9PT0gMCA/IGsgOiB0eXBlID09PSAxID8gdiA6IFtrLCB2XTtcblx0ICAgIGl0ZXJhdG9yUmVzdWx0ID8gKGl0ZXJhdG9yUmVzdWx0LnZhbHVlID0gdmFsdWUpIDogKGl0ZXJhdG9yUmVzdWx0ID0ge1xuXHQgICAgICB2YWx1ZTogdmFsdWUsIGRvbmU6IGZhbHNlXG5cdCAgICB9KTtcblx0ICAgIHJldHVybiBpdGVyYXRvclJlc3VsdDtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGl0ZXJhdG9yRG9uZSgpIHtcblx0ICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGhhc0l0ZXJhdG9yKG1heWJlSXRlcmFibGUpIHtcblx0ICAgIHJldHVybiAhIWdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBpc0l0ZXJhdG9yKG1heWJlSXRlcmF0b3IpIHtcblx0ICAgIHJldHVybiBtYXliZUl0ZXJhdG9yICYmIHR5cGVvZiBtYXliZUl0ZXJhdG9yLm5leHQgPT09ICdmdW5jdGlvbic7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBnZXRJdGVyYXRvcihpdGVyYWJsZSkge1xuXHQgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKGl0ZXJhYmxlKTtcblx0ICAgIHJldHVybiBpdGVyYXRvckZuICYmIGl0ZXJhdG9yRm4uY2FsbChpdGVyYWJsZSk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBnZXRJdGVyYXRvckZuKGl0ZXJhYmxlKSB7XG5cdCAgICB2YXIgaXRlcmF0b3JGbiA9IGl0ZXJhYmxlICYmIChcblx0ICAgICAgKFJFQUxfSVRFUkFUT1JfU1lNQk9MICYmIGl0ZXJhYmxlW1JFQUxfSVRFUkFUT1JfU1lNQk9MXSkgfHxcblx0ICAgICAgaXRlcmFibGVbRkFVWF9JVEVSQVRPUl9TWU1CT0xdXG5cdCAgICApO1xuXHQgICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgIHJldHVybiBpdGVyYXRvckZuO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcblx0ICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJztcblx0ICB9XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKFNlcSwgSXRlcmFibGUpO1xuXHQgICAgZnVuY3Rpb24gU2VxKHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlTZXF1ZW5jZSgpIDpcblx0ICAgICAgICBpc0l0ZXJhYmxlKHZhbHVlKSA/IHZhbHVlLnRvU2VxKCkgOiBzZXFGcm9tVmFsdWUodmFsdWUpO1xuXHQgICAgfVxuXHRcblx0ICAgIFNlcS5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcblx0ICAgICAgcmV0dXJuIFNlcShhcmd1bWVudHMpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTZXEucHJvdG90eXBlLnRvU2VxID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0XG5cdCAgICBTZXEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ1NlcSB7JywgJ30nKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU2VxLnByb3RvdHlwZS5jYWNoZVJlc3VsdCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICBpZiAoIXRoaXMuX2NhY2hlICYmIHRoaXMuX19pdGVyYXRlVW5jYWNoZWQpIHtcblx0ICAgICAgICB0aGlzLl9jYWNoZSA9IHRoaXMuZW50cnlTZXEoKS50b0FycmF5KCk7XG5cdCAgICAgICAgdGhpcy5zaXplID0gdGhpcy5fY2FjaGUubGVuZ3RoO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBhYnN0cmFjdCBfX2l0ZXJhdGVVbmNhY2hlZChmbiwgcmV2ZXJzZSlcblx0XG5cdCAgICBTZXEucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG5cdCAgICAgIHJldHVybiBzZXFJdGVyYXRlKHRoaXMsIGZuLCByZXZlcnNlLCB0cnVlKTtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gYWJzdHJhY3QgX19pdGVyYXRvclVuY2FjaGVkKHR5cGUsIHJldmVyc2UpXG5cdFxuXHQgICAgU2VxLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICByZXR1cm4gc2VxSXRlcmF0b3IodGhpcywgdHlwZSwgcmV2ZXJzZSwgdHJ1ZSk7XG5cdCAgICB9O1xuXHRcblx0XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKEtleWVkU2VxLCBTZXEpO1xuXHQgICAgZnVuY3Rpb24gS2V5ZWRTZXEodmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHQgICAgICAgIGVtcHR5U2VxdWVuY2UoKS50b0tleWVkU2VxKCkgOlxuXHQgICAgICAgIGlzSXRlcmFibGUodmFsdWUpID9cblx0ICAgICAgICAgIChpc0tleWVkKHZhbHVlKSA/IHZhbHVlLnRvU2VxKCkgOiB2YWx1ZS5mcm9tRW50cnlTZXEoKSkgOlxuXHQgICAgICAgICAga2V5ZWRTZXFGcm9tVmFsdWUodmFsdWUpO1xuXHQgICAgfVxuXHRcblx0ICAgIEtleWVkU2VxLm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuXHQgICAgICByZXR1cm4gS2V5ZWRTZXEoYXJndW1lbnRzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgS2V5ZWRTZXEucHJvdG90eXBlLnRvS2V5ZWRTZXEgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHRcblx0ICAgIEtleWVkU2VxLnByb3RvdHlwZS50b1NlcSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdFxuXHRcblx0XG5cdCAgY3JlYXRlQ2xhc3MoSW5kZXhlZFNlcSwgU2VxKTtcblx0ICAgIGZ1bmN0aW9uIEluZGV4ZWRTZXEodmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eVNlcXVlbmNlKCkgOlxuXHQgICAgICAgICFpc0l0ZXJhYmxlKHZhbHVlKSA/IGluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpIDpcblx0ICAgICAgICBpc0tleWVkKHZhbHVlKSA/IHZhbHVlLmVudHJ5U2VxKCkgOiB2YWx1ZS50b0luZGV4ZWRTZXEoKTtcblx0ICAgIH1cblx0XG5cdCAgICBJbmRleGVkU2VxLm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuXHQgICAgICByZXR1cm4gSW5kZXhlZFNlcShhcmd1bWVudHMpO1xuXHQgICAgfTtcblx0XG5cdCAgICBJbmRleGVkU2VxLnByb3RvdHlwZS50b0luZGV4ZWRTZXEgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHRcblx0ICAgIEluZGV4ZWRTZXEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ1NlcSBbJywgJ10nKTtcblx0ICAgIH07XG5cdFxuXHQgICAgSW5kZXhlZFNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcblx0ICAgICAgcmV0dXJuIHNlcUl0ZXJhdGUodGhpcywgZm4sIHJldmVyc2UsIGZhbHNlKTtcblx0ICAgIH07XG5cdFxuXHQgICAgSW5kZXhlZFNlcS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcblx0ICAgICAgcmV0dXJuIHNlcUl0ZXJhdG9yKHRoaXMsIHR5cGUsIHJldmVyc2UsIGZhbHNlKTtcblx0ICAgIH07XG5cdFxuXHRcblx0XG5cdCAgY3JlYXRlQ2xhc3MoU2V0U2VxLCBTZXEpO1xuXHQgICAgZnVuY3Rpb24gU2V0U2VxKHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiAoXG5cdCAgICAgICAgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5U2VxdWVuY2UoKSA6XG5cdCAgICAgICAgIWlzSXRlcmFibGUodmFsdWUpID8gaW5kZXhlZFNlcUZyb21WYWx1ZSh2YWx1ZSkgOlxuXHQgICAgICAgIGlzS2V5ZWQodmFsdWUpID8gdmFsdWUuZW50cnlTZXEoKSA6IHZhbHVlXG5cdCAgICAgICkudG9TZXRTZXEoKTtcblx0ICAgIH1cblx0XG5cdCAgICBTZXRTZXEub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG5cdCAgICAgIHJldHVybiBTZXRTZXEoYXJndW1lbnRzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU2V0U2VxLnByb3RvdHlwZS50b1NldFNlcSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdFxuXHRcblx0XG5cdCAgU2VxLmlzU2VxID0gaXNTZXE7XG5cdCAgU2VxLktleWVkID0gS2V5ZWRTZXE7XG5cdCAgU2VxLlNldCA9IFNldFNlcTtcblx0ICBTZXEuSW5kZXhlZCA9IEluZGV4ZWRTZXE7XG5cdFxuXHQgIHZhciBJU19TRVFfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9TRVFfX0BAJztcblx0XG5cdCAgU2VxLnByb3RvdHlwZVtJU19TRVFfU0VOVElORUxdID0gdHJ1ZTtcblx0XG5cdFxuXHRcblx0ICAvLyAjcHJhZ21hIFJvb3QgU2VxdWVuY2VzXG5cdFxuXHQgIGNyZWF0ZUNsYXNzKEFycmF5U2VxLCBJbmRleGVkU2VxKTtcblx0ICAgIGZ1bmN0aW9uIEFycmF5U2VxKGFycmF5KSB7XG5cdCAgICAgIHRoaXMuX2FycmF5ID0gYXJyYXk7XG5cdCAgICAgIHRoaXMuc2l6ZSA9IGFycmF5Lmxlbmd0aDtcblx0ICAgIH1cblx0XG5cdCAgICBBcnJheVNlcS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaW5kZXgsIG5vdFNldFZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmhhcyhpbmRleCkgPyB0aGlzLl9hcnJheVt3cmFwSW5kZXgodGhpcywgaW5kZXgpXSA6IG5vdFNldFZhbHVlO1xuXHQgICAgfTtcblx0XG5cdCAgICBBcnJheVNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcblx0ICAgICAgdmFyIGFycmF5ID0gdGhpcy5fYXJyYXk7XG5cdCAgICAgIHZhciBtYXhJbmRleCA9IGFycmF5Lmxlbmd0aCAtIDE7XG5cdCAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcblx0ICAgICAgICBpZiAoZm4oYXJyYXlbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV0sIGlpLCB0aGlzKSA9PT0gZmFsc2UpIHtcblx0ICAgICAgICAgIHJldHVybiBpaSArIDE7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBpaTtcblx0ICAgIH07XG5cdFxuXHQgICAgQXJyYXlTZXEucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG5cdCAgICAgIHZhciBhcnJheSA9IHRoaXMuX2FycmF5O1xuXHQgICAgICB2YXIgbWF4SW5kZXggPSBhcnJheS5sZW5ndGggLSAxO1xuXHQgICAgICB2YXIgaWkgPSAwO1xuXHQgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgXG5cdCAgICAgICAge3JldHVybiBpaSA+IG1heEluZGV4ID9cblx0ICAgICAgICAgIGl0ZXJhdG9yRG9uZSgpIDpcblx0ICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaWksIGFycmF5W3JldmVyc2UgPyBtYXhJbmRleCAtIGlpKysgOiBpaSsrXSl9XG5cdCAgICAgICk7XG5cdCAgICB9O1xuXHRcblx0XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKE9iamVjdFNlcSwgS2V5ZWRTZXEpO1xuXHQgICAgZnVuY3Rpb24gT2JqZWN0U2VxKG9iamVjdCkge1xuXHQgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cdCAgICAgIHRoaXMuX29iamVjdCA9IG9iamVjdDtcblx0ICAgICAgdGhpcy5fa2V5cyA9IGtleXM7XG5cdCAgICAgIHRoaXMuc2l6ZSA9IGtleXMubGVuZ3RoO1xuXHQgICAgfVxuXHRcblx0ICAgIE9iamVjdFNlcS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oa2V5LCBub3RTZXRWYWx1ZSkge1xuXHQgICAgICBpZiAobm90U2V0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5oYXMoa2V5KSkge1xuXHQgICAgICAgIHJldHVybiBub3RTZXRWYWx1ZTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gdGhpcy5fb2JqZWN0W2tleV07XG5cdCAgICB9O1xuXHRcblx0ICAgIE9iamVjdFNlcS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oa2V5KSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9vYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KTtcblx0ICAgIH07XG5cdFxuXHQgICAgT2JqZWN0U2VxLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuXHQgICAgICB2YXIgb2JqZWN0ID0gdGhpcy5fb2JqZWN0O1xuXHQgICAgICB2YXIga2V5cyA9IHRoaXMuX2tleXM7XG5cdCAgICAgIHZhciBtYXhJbmRleCA9IGtleXMubGVuZ3RoIC0gMTtcblx0ICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8PSBtYXhJbmRleDsgaWkrKykge1xuXHQgICAgICAgIHZhciBrZXkgPSBrZXlzW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldO1xuXHQgICAgICAgIGlmIChmbihvYmplY3Rba2V5XSwga2V5LCB0aGlzKSA9PT0gZmFsc2UpIHtcblx0ICAgICAgICAgIHJldHVybiBpaSArIDE7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBpaTtcblx0ICAgIH07XG5cdFxuXHQgICAgT2JqZWN0U2VxLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICB2YXIgb2JqZWN0ID0gdGhpcy5fb2JqZWN0O1xuXHQgICAgICB2YXIga2V5cyA9IHRoaXMuX2tleXM7XG5cdCAgICAgIHZhciBtYXhJbmRleCA9IGtleXMubGVuZ3RoIC0gMTtcblx0ICAgICAgdmFyIGlpID0gMDtcblx0ICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG5cdCAgICAgICAgdmFyIGtleSA9IGtleXNbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV07XG5cdCAgICAgICAgcmV0dXJuIGlpKysgPiBtYXhJbmRleCA/XG5cdCAgICAgICAgICBpdGVyYXRvckRvbmUoKSA6XG5cdCAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGtleSwgb2JqZWN0W2tleV0pO1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgIE9iamVjdFNlcS5wcm90b3R5cGVbSVNfT1JERVJFRF9TRU5USU5FTF0gPSB0cnVlO1xuXHRcblx0XG5cdCAgY3JlYXRlQ2xhc3MoSXRlcmFibGVTZXEsIEluZGV4ZWRTZXEpO1xuXHQgICAgZnVuY3Rpb24gSXRlcmFibGVTZXEoaXRlcmFibGUpIHtcblx0ICAgICAgdGhpcy5faXRlcmFibGUgPSBpdGVyYWJsZTtcblx0ICAgICAgdGhpcy5zaXplID0gaXRlcmFibGUubGVuZ3RoIHx8IGl0ZXJhYmxlLnNpemU7XG5cdCAgICB9XG5cdFxuXHQgICAgSXRlcmFibGVTZXEucHJvdG90eXBlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcblx0ICAgICAgaWYgKHJldmVyc2UpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGl0ZXJhYmxlID0gdGhpcy5faXRlcmFibGU7XG5cdCAgICAgIHZhciBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKGl0ZXJhYmxlKTtcblx0ICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuXHQgICAgICBpZiAoaXNJdGVyYXRvcihpdGVyYXRvcikpIHtcblx0ICAgICAgICB2YXIgc3RlcDtcblx0ICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG5cdCAgICAgICAgICBpZiAoZm4oc3RlcC52YWx1ZSwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuXHQgICAgfTtcblx0XG5cdCAgICBJdGVyYWJsZVNlcS5wcm90b3R5cGUuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICBpZiAocmV2ZXJzZSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgaXRlcmFibGUgPSB0aGlzLl9pdGVyYWJsZTtcblx0ICAgICAgdmFyIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUpO1xuXHQgICAgICBpZiAoIWlzSXRlcmF0b3IoaXRlcmF0b3IpKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihpdGVyYXRvckRvbmUpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG5cdCAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG5cdCAgICAgICAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgc3RlcC52YWx1ZSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdFxuXHRcblx0ICBjcmVhdGVDbGFzcyhJdGVyYXRvclNlcSwgSW5kZXhlZFNlcSk7XG5cdCAgICBmdW5jdGlvbiBJdGVyYXRvclNlcShpdGVyYXRvcikge1xuXHQgICAgICB0aGlzLl9pdGVyYXRvciA9IGl0ZXJhdG9yO1xuXHQgICAgICB0aGlzLl9pdGVyYXRvckNhY2hlID0gW107XG5cdCAgICB9XG5cdFxuXHQgICAgSXRlcmF0b3JTZXEucHJvdG90eXBlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcblx0ICAgICAgaWYgKHJldmVyc2UpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5faXRlcmF0b3I7XG5cdCAgICAgIHZhciBjYWNoZSA9IHRoaXMuX2l0ZXJhdG9yQ2FjaGU7XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgd2hpbGUgKGl0ZXJhdGlvbnMgPCBjYWNoZS5sZW5ndGgpIHtcblx0ICAgICAgICBpZiAoZm4oY2FjaGVbaXRlcmF0aW9uc10sIGl0ZXJhdGlvbnMrKywgdGhpcykgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICByZXR1cm4gaXRlcmF0aW9ucztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHN0ZXA7XG5cdCAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcblx0ICAgICAgICB2YXIgdmFsID0gc3RlcC52YWx1ZTtcblx0ICAgICAgICBjYWNoZVtpdGVyYXRpb25zXSA9IHZhbDtcblx0ICAgICAgICBpZiAoZm4odmFsLCBpdGVyYXRpb25zKyssIHRoaXMpID09PSBmYWxzZSkge1xuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuXHQgICAgfTtcblx0XG5cdCAgICBJdGVyYXRvclNlcS5wcm90b3R5cGUuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICBpZiAocmV2ZXJzZSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyYXRvcjtcblx0ICAgICAgdmFyIGNhY2hlID0gdGhpcy5faXRlcmF0b3JDYWNoZTtcblx0ICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuXHQgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcblx0ICAgICAgICBpZiAoaXRlcmF0aW9ucyA+PSBjYWNoZS5sZW5ndGgpIHtcblx0ICAgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuXHQgICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuXHQgICAgICAgICAgICByZXR1cm4gc3RlcDtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGNhY2hlW2l0ZXJhdGlvbnNdID0gc3RlcC52YWx1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucywgY2FjaGVbaXRlcmF0aW9ucysrXSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdFxuXHRcblx0XG5cdCAgLy8gIyBwcmFnbWEgSGVscGVyIGZ1bmN0aW9uc1xuXHRcblx0ICBmdW5jdGlvbiBpc1NlcShtYXliZVNlcSkge1xuXHQgICAgcmV0dXJuICEhKG1heWJlU2VxICYmIG1heWJlU2VxW0lTX1NFUV9TRU5USU5FTF0pO1xuXHQgIH1cblx0XG5cdCAgdmFyIEVNUFRZX1NFUTtcblx0XG5cdCAgZnVuY3Rpb24gZW1wdHlTZXF1ZW5jZSgpIHtcblx0ICAgIHJldHVybiBFTVBUWV9TRVEgfHwgKEVNUFRZX1NFUSA9IG5ldyBBcnJheVNlcShbXSkpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24ga2V5ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHtcblx0ICAgIHZhciBzZXEgPVxuXHQgICAgICBBcnJheS5pc0FycmF5KHZhbHVlKSA/IG5ldyBBcnJheVNlcSh2YWx1ZSkuZnJvbUVudHJ5U2VxKCkgOlxuXHQgICAgICBpc0l0ZXJhdG9yKHZhbHVlKSA/IG5ldyBJdGVyYXRvclNlcSh2YWx1ZSkuZnJvbUVudHJ5U2VxKCkgOlxuXHQgICAgICBoYXNJdGVyYXRvcih2YWx1ZSkgPyBuZXcgSXRlcmFibGVTZXEodmFsdWUpLmZyb21FbnRyeVNlcSgpIDpcblx0ICAgICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyA/IG5ldyBPYmplY3RTZXEodmFsdWUpIDpcblx0ICAgICAgdW5kZWZpbmVkO1xuXHQgICAgaWYgKCFzZXEpIHtcblx0ICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcblx0ICAgICAgICAnRXhwZWN0ZWQgQXJyYXkgb3IgaXRlcmFibGUgb2JqZWN0IG9mIFtrLCB2XSBlbnRyaWVzLCAnK1xuXHQgICAgICAgICdvciBrZXllZCBvYmplY3Q6ICcgKyB2YWx1ZVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHNlcTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHtcblx0ICAgIHZhciBzZXEgPSBtYXliZUluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpO1xuXHQgICAgaWYgKCFzZXEpIHtcblx0ICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcblx0ICAgICAgICAnRXhwZWN0ZWQgQXJyYXkgb3IgaXRlcmFibGUgb2JqZWN0IG9mIHZhbHVlczogJyArIHZhbHVlXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gc2VxO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gc2VxRnJvbVZhbHVlKHZhbHVlKSB7XG5cdCAgICB2YXIgc2VxID0gbWF5YmVJbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSB8fFxuXHQgICAgICAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBuZXcgT2JqZWN0U2VxKHZhbHVlKSk7XG5cdCAgICBpZiAoIXNlcSkge1xuXHQgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuXHQgICAgICAgICdFeHBlY3RlZCBBcnJheSBvciBpdGVyYWJsZSBvYmplY3Qgb2YgdmFsdWVzLCBvciBrZXllZCBvYmplY3Q6ICcgKyB2YWx1ZVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHNlcTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIG1heWJlSW5kZXhlZFNlcUZyb21WYWx1ZSh2YWx1ZSkge1xuXHQgICAgcmV0dXJuIChcblx0ICAgICAgaXNBcnJheUxpa2UodmFsdWUpID8gbmV3IEFycmF5U2VxKHZhbHVlKSA6XG5cdCAgICAgIGlzSXRlcmF0b3IodmFsdWUpID8gbmV3IEl0ZXJhdG9yU2VxKHZhbHVlKSA6XG5cdCAgICAgIGhhc0l0ZXJhdG9yKHZhbHVlKSA/IG5ldyBJdGVyYWJsZVNlcSh2YWx1ZSkgOlxuXHQgICAgICB1bmRlZmluZWRcblx0ICAgICk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBzZXFJdGVyYXRlKHNlcSwgZm4sIHJldmVyc2UsIHVzZUtleXMpIHtcblx0ICAgIHZhciBjYWNoZSA9IHNlcS5fY2FjaGU7XG5cdCAgICBpZiAoY2FjaGUpIHtcblx0ICAgICAgdmFyIG1heEluZGV4ID0gY2FjaGUubGVuZ3RoIC0gMTtcblx0ICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8PSBtYXhJbmRleDsgaWkrKykge1xuXHQgICAgICAgIHZhciBlbnRyeSA9IGNhY2hlW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldO1xuXHQgICAgICAgIGlmIChmbihlbnRyeVsxXSwgdXNlS2V5cyA/IGVudHJ5WzBdIDogaWksIHNlcSkgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICByZXR1cm4gaWkgKyAxO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gaWk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gc2VxLl9faXRlcmF0ZVVuY2FjaGVkKGZuLCByZXZlcnNlKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHNlcUl0ZXJhdG9yKHNlcSwgdHlwZSwgcmV2ZXJzZSwgdXNlS2V5cykge1xuXHQgICAgdmFyIGNhY2hlID0gc2VxLl9jYWNoZTtcblx0ICAgIGlmIChjYWNoZSkge1xuXHQgICAgICB2YXIgbWF4SW5kZXggPSBjYWNoZS5sZW5ndGggLSAxO1xuXHQgICAgICB2YXIgaWkgPSAwO1xuXHQgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcblx0ICAgICAgICB2YXIgZW50cnkgPSBjYWNoZVtyZXZlcnNlID8gbWF4SW5kZXggLSBpaSA6IGlpXTtcblx0ICAgICAgICByZXR1cm4gaWkrKyA+IG1heEluZGV4ID9cblx0ICAgICAgICAgIGl0ZXJhdG9yRG9uZSgpIDpcblx0ICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgdXNlS2V5cyA/IGVudHJ5WzBdIDogaWkgLSAxLCBlbnRyeVsxXSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHNlcS5fX2l0ZXJhdG9yVW5jYWNoZWQodHlwZSwgcmV2ZXJzZSk7XG5cdCAgfVxuXHRcblx0ICBjcmVhdGVDbGFzcyhDb2xsZWN0aW9uLCBJdGVyYWJsZSk7XG5cdCAgICBmdW5jdGlvbiBDb2xsZWN0aW9uKCkge1xuXHQgICAgICB0aHJvdyBUeXBlRXJyb3IoJ0Fic3RyYWN0Jyk7XG5cdCAgICB9XG5cdFxuXHRcblx0ICBjcmVhdGVDbGFzcyhLZXllZENvbGxlY3Rpb24sIENvbGxlY3Rpb24pO2Z1bmN0aW9uIEtleWVkQ29sbGVjdGlvbigpIHt9XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKEluZGV4ZWRDb2xsZWN0aW9uLCBDb2xsZWN0aW9uKTtmdW5jdGlvbiBJbmRleGVkQ29sbGVjdGlvbigpIHt9XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKFNldENvbGxlY3Rpb24sIENvbGxlY3Rpb24pO2Z1bmN0aW9uIFNldENvbGxlY3Rpb24oKSB7fVxuXHRcblx0XG5cdCAgQ29sbGVjdGlvbi5LZXllZCA9IEtleWVkQ29sbGVjdGlvbjtcblx0ICBDb2xsZWN0aW9uLkluZGV4ZWQgPSBJbmRleGVkQ29sbGVjdGlvbjtcblx0ICBDb2xsZWN0aW9uLlNldCA9IFNldENvbGxlY3Rpb247XG5cdFxuXHQgIC8qKlxuXHQgICAqIEFuIGV4dGVuc2lvbiBvZiB0aGUgXCJzYW1lLXZhbHVlXCIgYWxnb3JpdGhtIGFzIFtkZXNjcmliZWQgZm9yIHVzZSBieSBFUzYgTWFwXG5cdCAgICogYW5kIFNldF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWFwI0tleV9lcXVhbGl0eSlcblx0ICAgKlxuXHQgICAqIE5hTiBpcyBjb25zaWRlcmVkIHRoZSBzYW1lIGFzIE5hTiwgaG93ZXZlciAtMCBhbmQgMCBhcmUgY29uc2lkZXJlZCB0aGUgc2FtZVxuXHQgICAqIHZhbHVlLCB3aGljaCBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgYWxnb3JpdGhtIGRlc2NyaWJlZCBieVxuXHQgICAqIFtgT2JqZWN0LmlzYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzKS5cblx0ICAgKlxuXHQgICAqIFRoaXMgaXMgZXh0ZW5kZWQgZnVydGhlciB0byBhbGxvdyBPYmplY3RzIHRvIGRlc2NyaWJlIHRoZSB2YWx1ZXMgdGhleVxuXHQgICAqIHJlcHJlc2VudCwgYnkgd2F5IG9mIGB2YWx1ZU9mYCBvciBgZXF1YWxzYCAoYW5kIGBoYXNoQ29kZWApLlxuXHQgICAqXG5cdCAgICogTm90ZTogYmVjYXVzZSBvZiB0aGlzIGV4dGVuc2lvbiwgdGhlIGtleSBlcXVhbGl0eSBvZiBJbW11dGFibGUuTWFwIGFuZCB0aGVcblx0ICAgKiB2YWx1ZSBlcXVhbGl0eSBvZiBJbW11dGFibGUuU2V0IHdpbGwgZGlmZmVyIGZyb20gRVM2IE1hcCBhbmQgU2V0LlxuXHQgICAqXG5cdCAgICogIyMjIERlZmluaW5nIGN1c3RvbSB2YWx1ZXNcblx0ICAgKlxuXHQgICAqIFRoZSBlYXNpZXN0IHdheSB0byBkZXNjcmliZSB0aGUgdmFsdWUgYW4gb2JqZWN0IHJlcHJlc2VudHMgaXMgYnkgaW1wbGVtZW50aW5nXG5cdCAgICogYHZhbHVlT2ZgLiBGb3IgZXhhbXBsZSwgYERhdGVgIHJlcHJlc2VudHMgYSB2YWx1ZSBieSByZXR1cm5pbmcgYSB1bml4XG5cdCAgICogdGltZXN0YW1wIGZvciBgdmFsdWVPZmA6XG5cdCAgICpcblx0ICAgKiAgICAgdmFyIGRhdGUxID0gbmV3IERhdGUoMTIzNDU2Nzg5MDAwMCk7IC8vIEZyaSBGZWIgMTMgMjAwOSAuLi5cblx0ICAgKiAgICAgdmFyIGRhdGUyID0gbmV3IERhdGUoMTIzNDU2Nzg5MDAwMCk7XG5cdCAgICogICAgIGRhdGUxLnZhbHVlT2YoKTsgLy8gMTIzNDU2Nzg5MDAwMFxuXHQgICAqICAgICBhc3NlcnQoIGRhdGUxICE9PSBkYXRlMiApO1xuXHQgICAqICAgICBhc3NlcnQoIEltbXV0YWJsZS5pcyggZGF0ZTEsIGRhdGUyICkgKTtcblx0ICAgKlxuXHQgICAqIE5vdGU6IG92ZXJyaWRpbmcgYHZhbHVlT2ZgIG1heSBoYXZlIG90aGVyIGltcGxpY2F0aW9ucyBpZiB5b3UgdXNlIHRoaXMgb2JqZWN0XG5cdCAgICogd2hlcmUgSmF2YVNjcmlwdCBleHBlY3RzIGEgcHJpbWl0aXZlLCBzdWNoIGFzIGltcGxpY2l0IHN0cmluZyBjb2VyY2lvbi5cblx0ICAgKlxuXHQgICAqIEZvciBtb3JlIGNvbXBsZXggdHlwZXMsIGVzcGVjaWFsbHkgY29sbGVjdGlvbnMsIGltcGxlbWVudGluZyBgdmFsdWVPZmAgbWF5XG5cdCAgICogbm90IGJlIHBlcmZvcm1hbnQuIEFuIGFsdGVybmF0aXZlIGlzIHRvIGltcGxlbWVudCBgZXF1YWxzYCBhbmQgYGhhc2hDb2RlYC5cblx0ICAgKlxuXHQgICAqIGBlcXVhbHNgIHRha2VzIGFub3RoZXIgb2JqZWN0LCBwcmVzdW1hYmx5IG9mIHNpbWlsYXIgdHlwZSwgYW5kIHJldHVybnMgdHJ1ZVxuXHQgICAqIGlmIHRoZSBpdCBpcyBlcXVhbC4gRXF1YWxpdHkgaXMgc3ltbWV0cmljYWwsIHNvIHRoZSBzYW1lIHJlc3VsdCBzaG91bGQgYmVcblx0ICAgKiByZXR1cm5lZCBpZiB0aGlzIGFuZCB0aGUgYXJndW1lbnQgYXJlIGZsaXBwZWQuXG5cdCAgICpcblx0ICAgKiAgICAgYXNzZXJ0KCBhLmVxdWFscyhiKSA9PT0gYi5lcXVhbHMoYSkgKTtcblx0ICAgKlxuXHQgICAqIGBoYXNoQ29kZWAgcmV0dXJucyBhIDMyYml0IGludGVnZXIgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgb2JqZWN0IHdoaWNoIHdpbGxcblx0ICAgKiBiZSB1c2VkIHRvIGRldGVybWluZSBob3cgdG8gc3RvcmUgdGhlIHZhbHVlIG9iamVjdCBpbiBhIE1hcCBvciBTZXQuIFlvdSBtdXN0XG5cdCAgICogcHJvdmlkZSBib3RoIG9yIG5laXRoZXIgbWV0aG9kcywgb25lIG11c3Qgbm90IGV4aXN0IHdpdGhvdXQgdGhlIG90aGVyLlxuXHQgICAqXG5cdCAgICogQWxzbywgYW4gaW1wb3J0YW50IHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZXNlIG1ldGhvZHMgbXVzdCBiZSB1cGhlbGQ6IGlmIHR3b1xuXHQgICAqIHZhbHVlcyBhcmUgZXF1YWwsIHRoZXkgKm11c3QqIHJldHVybiB0aGUgc2FtZSBoYXNoQ29kZS4gSWYgdGhlIHZhbHVlcyBhcmUgbm90XG5cdCAgICogZXF1YWwsIHRoZXkgbWlnaHQgaGF2ZSB0aGUgc2FtZSBoYXNoQ29kZTsgdGhpcyBpcyBjYWxsZWQgYSBoYXNoIGNvbGxpc2lvbixcblx0ICAgKiBhbmQgd2hpbGUgdW5kZXNpcmFibGUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIGl0IGlzIGFjY2VwdGFibGUuXG5cdCAgICpcblx0ICAgKiAgICAgaWYgKGEuZXF1YWxzKGIpKSB7XG5cdCAgICogICAgICAgYXNzZXJ0KCBhLmhhc2hDb2RlKCkgPT09IGIuaGFzaENvZGUoKSApO1xuXHQgICAqICAgICB9XG5cdCAgICpcblx0ICAgKiBBbGwgSW1tdXRhYmxlIGNvbGxlY3Rpb25zIGltcGxlbWVudCBgZXF1YWxzYCBhbmQgYGhhc2hDb2RlYC5cblx0ICAgKlxuXHQgICAqL1xuXHQgIGZ1bmN0aW9uIGlzKHZhbHVlQSwgdmFsdWVCKSB7XG5cdCAgICBpZiAodmFsdWVBID09PSB2YWx1ZUIgfHwgKHZhbHVlQSAhPT0gdmFsdWVBICYmIHZhbHVlQiAhPT0gdmFsdWVCKSkge1xuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH1cblx0ICAgIGlmICghdmFsdWVBIHx8ICF2YWx1ZUIpIHtcblx0ICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXHQgICAgaWYgKHR5cGVvZiB2YWx1ZUEudmFsdWVPZiA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHQgICAgICAgIHR5cGVvZiB2YWx1ZUIudmFsdWVPZiA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICB2YWx1ZUEgPSB2YWx1ZUEudmFsdWVPZigpO1xuXHQgICAgICB2YWx1ZUIgPSB2YWx1ZUIudmFsdWVPZigpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZUEuZXF1YWxzID09PSAnZnVuY3Rpb24nICYmXG5cdCAgICAgIHR5cGVvZiB2YWx1ZUIuZXF1YWxzID09PSAnZnVuY3Rpb24nID9cblx0ICAgICAgICB2YWx1ZUEuZXF1YWxzKHZhbHVlQikgOlxuXHQgICAgICAgIHZhbHVlQSA9PT0gdmFsdWVCIHx8ICh2YWx1ZUEgIT09IHZhbHVlQSAmJiB2YWx1ZUIgIT09IHZhbHVlQik7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBmcm9tSlMoanNvbiwgY29udmVydGVyKSB7XG5cdCAgICByZXR1cm4gY29udmVydGVyID9cblx0ICAgICAgZnJvbUpTV2l0aChjb252ZXJ0ZXIsIGpzb24sICcnLCB7Jyc6IGpzb259KSA6XG5cdCAgICAgIGZyb21KU0RlZmF1bHQoanNvbik7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBmcm9tSlNXaXRoKGNvbnZlcnRlciwganNvbiwga2V5LCBwYXJlbnRKU09OKSB7XG5cdCAgICBpZiAoQXJyYXkuaXNBcnJheShqc29uKSkge1xuXHQgICAgICByZXR1cm4gY29udmVydGVyLmNhbGwocGFyZW50SlNPTiwga2V5LCBJbmRleGVkU2VxKGpzb24pLm1hcChmdW5jdGlvbih2LCBrKSAge3JldHVybiBmcm9tSlNXaXRoKGNvbnZlcnRlciwgdiwgaywganNvbil9KSk7XG5cdCAgICB9XG5cdCAgICBpZiAoaXNQbGFpbk9iaihqc29uKSkge1xuXHQgICAgICByZXR1cm4gY29udmVydGVyLmNhbGwocGFyZW50SlNPTiwga2V5LCBLZXllZFNlcShqc29uKS5tYXAoZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gZnJvbUpTV2l0aChjb252ZXJ0ZXIsIHYsIGssIGpzb24pfSkpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGpzb247XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBmcm9tSlNEZWZhdWx0KGpzb24pIHtcblx0ICAgIGlmIChBcnJheS5pc0FycmF5KGpzb24pKSB7XG5cdCAgICAgIHJldHVybiBJbmRleGVkU2VxKGpzb24pLm1hcChmcm9tSlNEZWZhdWx0KS50b0xpc3QoKTtcblx0ICAgIH1cblx0ICAgIGlmIChpc1BsYWluT2JqKGpzb24pKSB7XG5cdCAgICAgIHJldHVybiBLZXllZFNlcShqc29uKS5tYXAoZnJvbUpTRGVmYXVsdCkudG9NYXAoKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBqc29uO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gaXNQbGFpbk9iaih2YWx1ZSkge1xuXHQgICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG5cdCAgfVxuXHRcblx0ICB2YXIgTWF0aF9faW11bCA9XG5cdCAgICB0eXBlb2YgTWF0aC5pbXVsID09PSAnZnVuY3Rpb24nICYmIE1hdGguaW11bCgweGZmZmZmZmZmLCAyKSA9PT0gLTIgP1xuXHQgICAgTWF0aC5pbXVsIDpcblx0ICAgIGZ1bmN0aW9uIE1hdGhfX2ltdWwoYSwgYikge1xuXHQgICAgICBhID0gYSB8IDA7IC8vIGludFxuXHQgICAgICBiID0gYiB8IDA7IC8vIGludFxuXHQgICAgICB2YXIgYyA9IGEgJiAweGZmZmY7XG5cdCAgICAgIHZhciBkID0gYiAmIDB4ZmZmZjtcblx0ICAgICAgLy8gU2hpZnQgYnkgMCBmaXhlcyB0aGUgc2lnbiBvbiB0aGUgaGlnaCBwYXJ0LlxuXHQgICAgICByZXR1cm4gKGMgKiBkKSArICgoKChhID4+PiAxNikgKiBkICsgYyAqIChiID4+PiAxNikpIDw8IDE2KSA+Pj4gMCkgfCAwOyAvLyBpbnRcblx0ICAgIH07XG5cdFxuXHQgIC8vIHY4IGhhcyBhbiBvcHRpbWl6YXRpb24gZm9yIHN0b3JpbmcgMzEtYml0IHNpZ25lZCBudW1iZXJzLlxuXHQgIC8vIFZhbHVlcyB3aGljaCBoYXZlIGVpdGhlciAwMCBvciAxMSBhcyB0aGUgaGlnaCBvcmRlciBiaXRzIHF1YWxpZnkuXG5cdCAgLy8gVGhpcyBmdW5jdGlvbiBkcm9wcyB0aGUgaGlnaGVzdCBvcmRlciBiaXQgaW4gYSBzaWduZWQgbnVtYmVyLCBtYWludGFpbmluZ1xuXHQgIC8vIHRoZSBzaWduIGJpdC5cblx0ICBmdW5jdGlvbiBzbWkoaTMyKSB7XG5cdCAgICByZXR1cm4gKChpMzIgPj4+IDEpICYgMHg0MDAwMDAwMCkgfCAoaTMyICYgMHhCRkZGRkZGRik7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBoYXNoKG8pIHtcblx0ICAgIGlmIChvID09PSBmYWxzZSB8fCBvID09PSBudWxsIHx8IG8gPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICByZXR1cm4gMDtcblx0ICAgIH1cblx0ICAgIGlmICh0eXBlb2Ygby52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgIG8gPSBvLnZhbHVlT2YoKTtcblx0ICAgICAgaWYgKG8gPT09IGZhbHNlIHx8IG8gPT09IG51bGwgfHwgbyA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgcmV0dXJuIDA7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGlmIChvID09PSB0cnVlKSB7XG5cdCAgICAgIHJldHVybiAxO1xuXHQgICAgfVxuXHQgICAgdmFyIHR5cGUgPSB0eXBlb2Ygbztcblx0ICAgIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuXHQgICAgICB2YXIgaCA9IG8gfCAwO1xuXHQgICAgICBpZiAoaCAhPT0gbykge1xuXHQgICAgICAgIGggXj0gbyAqIDB4RkZGRkZGRkY7XG5cdCAgICAgIH1cblx0ICAgICAgd2hpbGUgKG8gPiAweEZGRkZGRkZGKSB7XG5cdCAgICAgICAgbyAvPSAweEZGRkZGRkZGO1xuXHQgICAgICAgIGggXj0gbztcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gc21pKGgpO1xuXHQgICAgfVxuXHQgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgIHJldHVybiBvLmxlbmd0aCA+IFNUUklOR19IQVNIX0NBQ0hFX01JTl9TVFJMRU4gPyBjYWNoZWRIYXNoU3RyaW5nKG8pIDogaGFzaFN0cmluZyhvKTtcblx0ICAgIH1cblx0ICAgIGlmICh0eXBlb2Ygby5oYXNoQ29kZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICByZXR1cm4gby5oYXNoQ29kZSgpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGhhc2hKU09iaihvKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGNhY2hlZEhhc2hTdHJpbmcoc3RyaW5nKSB7XG5cdCAgICB2YXIgaGFzaCA9IHN0cmluZ0hhc2hDYWNoZVtzdHJpbmddO1xuXHQgICAgaWYgKGhhc2ggPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICBoYXNoID0gaGFzaFN0cmluZyhzdHJpbmcpO1xuXHQgICAgICBpZiAoU1RSSU5HX0hBU0hfQ0FDSEVfU0laRSA9PT0gU1RSSU5HX0hBU0hfQ0FDSEVfTUFYX1NJWkUpIHtcblx0ICAgICAgICBTVFJJTkdfSEFTSF9DQUNIRV9TSVpFID0gMDtcblx0ICAgICAgICBzdHJpbmdIYXNoQ2FjaGUgPSB7fTtcblx0ICAgICAgfVxuXHQgICAgICBTVFJJTkdfSEFTSF9DQUNIRV9TSVpFKys7XG5cdCAgICAgIHN0cmluZ0hhc2hDYWNoZVtzdHJpbmddID0gaGFzaDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBoYXNoO1xuXHQgIH1cblx0XG5cdCAgLy8gaHR0cDovL2pzcGVyZi5jb20vaGFzaGluZy1zdHJpbmdzXG5cdCAgZnVuY3Rpb24gaGFzaFN0cmluZyhzdHJpbmcpIHtcblx0ICAgIC8vIFRoaXMgaXMgdGhlIGhhc2ggZnJvbSBKVk1cblx0ICAgIC8vIFRoZSBoYXNoIGNvZGUgZm9yIGEgc3RyaW5nIGlzIGNvbXB1dGVkIGFzXG5cdCAgICAvLyBzWzBdICogMzEgXiAobiAtIDEpICsgc1sxXSAqIDMxIF4gKG4gLSAyKSArIC4uLiArIHNbbiAtIDFdLFxuXHQgICAgLy8gd2hlcmUgc1tpXSBpcyB0aGUgaXRoIGNoYXJhY3RlciBvZiB0aGUgc3RyaW5nIGFuZCBuIGlzIHRoZSBsZW5ndGggb2Zcblx0ICAgIC8vIHRoZSBzdHJpbmcuIFdlIFwibW9kXCIgdGhlIHJlc3VsdCB0byBtYWtlIGl0IGJldHdlZW4gMCAoaW5jbHVzaXZlKSBhbmQgMl4zMVxuXHQgICAgLy8gKGV4Y2x1c2l2ZSkgYnkgZHJvcHBpbmcgaGlnaCBiaXRzLlxuXHQgICAgdmFyIGhhc2ggPSAwO1xuXHQgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHN0cmluZy5sZW5ndGg7IGlpKyspIHtcblx0ICAgICAgaGFzaCA9IDMxICogaGFzaCArIHN0cmluZy5jaGFyQ29kZUF0KGlpKSB8IDA7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gc21pKGhhc2gpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gaGFzaEpTT2JqKG9iaikge1xuXHQgICAgdmFyIGhhc2ggPSB3ZWFrTWFwICYmIHdlYWtNYXAuZ2V0KG9iaik7XG5cdCAgICBpZiAoaGFzaCkgcmV0dXJuIGhhc2g7XG5cdFxuXHQgICAgaGFzaCA9IG9ialtVSURfSEFTSF9LRVldO1xuXHQgICAgaWYgKGhhc2gpIHJldHVybiBoYXNoO1xuXHRcblx0ICAgIGlmICghY2FuRGVmaW5lUHJvcGVydHkpIHtcblx0ICAgICAgaGFzaCA9IG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZSAmJiBvYmoucHJvcGVydHlJc0VudW1lcmFibGVbVUlEX0hBU0hfS0VZXTtcblx0ICAgICAgaWYgKGhhc2gpIHJldHVybiBoYXNoO1xuXHRcblx0ICAgICAgaGFzaCA9IGdldElFTm9kZUhhc2gob2JqKTtcblx0ICAgICAgaWYgKGhhc2gpIHJldHVybiBoYXNoO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmIChPYmplY3QuaXNFeHRlbnNpYmxlICYmICFPYmplY3QuaXNFeHRlbnNpYmxlKG9iaikpIHtcblx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb24tZXh0ZW5zaWJsZSBvYmplY3RzIGFyZSBub3QgYWxsb3dlZCBhcyBrZXlzLicpO1xuXHQgICAgfVxuXHRcblx0ICAgIGhhc2ggPSArK29iakhhc2hVSUQ7XG5cdCAgICBpZiAob2JqSGFzaFVJRCAmIDB4NDAwMDAwMDApIHtcblx0ICAgICAgb2JqSGFzaFVJRCA9IDA7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKHdlYWtNYXApIHtcblx0ICAgICAgd2Vha01hcC5zZXQob2JqLCBoYXNoKTtcblx0ICAgIH0gZWxzZSBpZiAoY2FuRGVmaW5lUHJvcGVydHkpIHtcblx0ICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgVUlEX0hBU0hfS0VZLCB7XG5cdCAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcblx0ICAgICAgICAnY29uZmlndXJhYmxlJzogZmFsc2UsXG5cdCAgICAgICAgJ3dyaXRhYmxlJzogZmFsc2UsXG5cdCAgICAgICAgJ3ZhbHVlJzogaGFzaFxuXHQgICAgICB9KTtcblx0ICAgIH0gZWxzZSBpZiAob2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlICYmXG5cdCAgICAgICAgICAgICAgIG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZSA9PT0gb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSkge1xuXHQgICAgICAvLyBTaW5jZSB3ZSBjYW4ndCBkZWZpbmUgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSBvbiB0aGUgb2JqZWN0XG5cdCAgICAgIC8vIHdlJ2xsIGhpamFjayBvbmUgb2YgdGhlIGxlc3MtdXNlZCBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzIHRvXG5cdCAgICAgIC8vIHNhdmUgb3VyIGhhc2ggb24gaXQuIFNpbmNlIHRoaXMgaXMgYSBmdW5jdGlvbiBpdCB3aWxsIG5vdCBzaG93IHVwIGluXG5cdCAgICAgIC8vIGBKU09OLnN0cmluZ2lmeWAgd2hpY2ggaXMgd2hhdCB3ZSB3YW50LlxuXHQgICAgICBvYmoucHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgfTtcblx0ICAgICAgb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlW1VJRF9IQVNIX0tFWV0gPSBoYXNoO1xuXHQgICAgfSBlbHNlIGlmIChvYmoubm9kZVR5cGUpIHtcblx0ICAgICAgLy8gQXQgdGhpcyBwb2ludCB3ZSBjb3VsZG4ndCBnZXQgdGhlIElFIGB1bmlxdWVJRGAgdG8gdXNlIGFzIGEgaGFzaFxuXHQgICAgICAvLyBhbmQgd2UgY291bGRuJ3QgdXNlIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgdG8gZXhwbG9pdCB0aGVcblx0ICAgICAgLy8gZG9udEVudW0gYnVnIHNvIHdlIHNpbXBseSBhZGQgdGhlIGBVSURfSEFTSF9LRVlgIG9uIHRoZSBub2RlXG5cdCAgICAgIC8vIGl0c2VsZi5cblx0ICAgICAgb2JqW1VJRF9IQVNIX0tFWV0gPSBoYXNoO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gc2V0IGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgb24gb2JqZWN0LicpO1xuXHQgICAgfVxuXHRcblx0ICAgIHJldHVybiBoYXNoO1xuXHQgIH1cblx0XG5cdCAgLy8gVHJ1ZSBpZiBPYmplY3QuZGVmaW5lUHJvcGVydHkgd29ya3MgYXMgZXhwZWN0ZWQuIElFOCBmYWlscyB0aGlzIHRlc3QuXG5cdCAgdmFyIGNhbkRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAneCcsIHt9KTtcblx0ICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblx0ICB9KCkpO1xuXHRcblx0ICAvLyBJRSBoYXMgYSBgdW5pcXVlSURgIHByb3BlcnR5IG9uIERPTSBub2Rlcy4gV2UgY2FuIGNvbnN0cnVjdCB0aGUgaGFzaCBmcm9tIGl0XG5cdCAgLy8gYW5kIGF2b2lkIG1lbW9yeSBsZWFrcyBmcm9tIHRoZSBJRSBjbG9uZU5vZGUgYnVnLlxuXHQgIGZ1bmN0aW9uIGdldElFTm9kZUhhc2gobm9kZSkge1xuXHQgICAgaWYgKG5vZGUgJiYgbm9kZS5ub2RlVHlwZSA+IDApIHtcblx0ICAgICAgc3dpdGNoIChub2RlLm5vZGVUeXBlKSB7XG5cdCAgICAgICAgY2FzZSAxOiAvLyBFbGVtZW50XG5cdCAgICAgICAgICByZXR1cm4gbm9kZS51bmlxdWVJRDtcblx0ICAgICAgICBjYXNlIDk6IC8vIERvY3VtZW50XG5cdCAgICAgICAgICByZXR1cm4gbm9kZS5kb2N1bWVudEVsZW1lbnQgJiYgbm9kZS5kb2N1bWVudEVsZW1lbnQudW5pcXVlSUQ7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIC8vIElmIHBvc3NpYmxlLCB1c2UgYSBXZWFrTWFwLlxuXHQgIHZhciB3ZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgbmV3IFdlYWtNYXAoKTtcblx0XG5cdCAgdmFyIG9iakhhc2hVSUQgPSAwO1xuXHRcblx0ICB2YXIgVUlEX0hBU0hfS0VZID0gJ19faW1tdXRhYmxlaGFzaF9fJztcblx0ICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgVUlEX0hBU0hfS0VZID0gU3ltYm9sKFVJRF9IQVNIX0tFWSk7XG5cdCAgfVxuXHRcblx0ICB2YXIgU1RSSU5HX0hBU0hfQ0FDSEVfTUlOX1NUUkxFTiA9IDE2O1xuXHQgIHZhciBTVFJJTkdfSEFTSF9DQUNIRV9NQVhfU0laRSA9IDI1NTtcblx0ICB2YXIgU1RSSU5HX0hBU0hfQ0FDSEVfU0laRSA9IDA7XG5cdCAgdmFyIHN0cmluZ0hhc2hDYWNoZSA9IHt9O1xuXHRcblx0ICBmdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBlcnJvcikge1xuXHQgICAgaWYgKCFjb25kaXRpb24pIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBhc3NlcnROb3RJbmZpbml0ZShzaXplKSB7XG5cdCAgICBpbnZhcmlhbnQoXG5cdCAgICAgIHNpemUgIT09IEluZmluaXR5LFxuXHQgICAgICAnQ2Fubm90IHBlcmZvcm0gdGhpcyBhY3Rpb24gd2l0aCBhbiBpbmZpbml0ZSBzaXplLidcblx0ICAgICk7XG5cdCAgfVxuXHRcblx0ICBjcmVhdGVDbGFzcyhUb0tleWVkU2VxdWVuY2UsIEtleWVkU2VxKTtcblx0ICAgIGZ1bmN0aW9uIFRvS2V5ZWRTZXF1ZW5jZShpbmRleGVkLCB1c2VLZXlzKSB7XG5cdCAgICAgIHRoaXMuX2l0ZXIgPSBpbmRleGVkO1xuXHQgICAgICB0aGlzLl91c2VLZXlzID0gdXNlS2V5cztcblx0ICAgICAgdGhpcy5zaXplID0gaW5kZXhlZC5zaXplO1xuXHQgICAgfVxuXHRcblx0ICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oa2V5LCBub3RTZXRWYWx1ZSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5faXRlci5nZXQoa2V5LCBub3RTZXRWYWx1ZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oa2V5KSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9pdGVyLmhhcyhrZXkpO1xuXHQgICAgfTtcblx0XG5cdCAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLnZhbHVlU2VxID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9pdGVyLnZhbHVlU2VxKCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uKCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICB2YXIgcmV2ZXJzZWRTZXF1ZW5jZSA9IHJldmVyc2VGYWN0b3J5KHRoaXMsIHRydWUpO1xuXHQgICAgICBpZiAoIXRoaXMuX3VzZUtleXMpIHtcblx0ICAgICAgICByZXZlcnNlZFNlcXVlbmNlLnZhbHVlU2VxID0gZnVuY3Rpb24oKSAge3JldHVybiB0aGlzJDAuX2l0ZXIudG9TZXEoKS5yZXZlcnNlKCl9O1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiByZXZlcnNlZFNlcXVlbmNlO1xuXHQgICAgfTtcblx0XG5cdCAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uKG1hcHBlciwgY29udGV4dCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICB2YXIgbWFwcGVkU2VxdWVuY2UgPSBtYXBGYWN0b3J5KHRoaXMsIG1hcHBlciwgY29udGV4dCk7XG5cdCAgICAgIGlmICghdGhpcy5fdXNlS2V5cykge1xuXHQgICAgICAgIG1hcHBlZFNlcXVlbmNlLnZhbHVlU2VxID0gZnVuY3Rpb24oKSAge3JldHVybiB0aGlzJDAuX2l0ZXIudG9TZXEoKS5tYXAobWFwcGVyLCBjb250ZXh0KX07XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG1hcHBlZFNlcXVlbmNlO1xuXHQgICAgfTtcblx0XG5cdCAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG5cdCAgICAgIHZhciBpaTtcblx0ICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRlKFxuXHQgICAgICAgIHRoaXMuX3VzZUtleXMgP1xuXHQgICAgICAgICAgZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gZm4odiwgaywgdGhpcyQwKX0gOlxuXHQgICAgICAgICAgKChpaSA9IHJldmVyc2UgPyByZXNvbHZlU2l6ZSh0aGlzKSA6IDApLFxuXHQgICAgICAgICAgICBmdW5jdGlvbih2ICkge3JldHVybiBmbih2LCByZXZlcnNlID8gLS1paSA6IGlpKyssIHRoaXMkMCl9KSxcblx0ICAgICAgICByZXZlcnNlXG5cdCAgICAgICk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcblx0ICAgICAgaWYgKHRoaXMuX3VzZUtleXMpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5faXRlci5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXIuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUywgcmV2ZXJzZSk7XG5cdCAgICAgIHZhciBpaSA9IHJldmVyc2UgPyByZXNvbHZlU2l6ZSh0aGlzKSA6IDA7XG5cdCAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuXHQgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuXHQgICAgICAgIHJldHVybiBzdGVwLmRvbmUgPyBzdGVwIDpcblx0ICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgcmV2ZXJzZSA/IC0taWkgOiBpaSsrLCBzdGVwLnZhbHVlLCBzdGVwKTtcblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlW0lTX09SREVSRURfU0VOVElORUxdID0gdHJ1ZTtcblx0XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKFRvSW5kZXhlZFNlcXVlbmNlLCBJbmRleGVkU2VxKTtcblx0ICAgIGZ1bmN0aW9uIFRvSW5kZXhlZFNlcXVlbmNlKGl0ZXIpIHtcblx0ICAgICAgdGhpcy5faXRlciA9IGl0ZXI7XG5cdCAgICAgIHRoaXMuc2l6ZSA9IGl0ZXIuc2l6ZTtcblx0ICAgIH1cblx0XG5cdCAgICBUb0luZGV4ZWRTZXF1ZW5jZS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5faXRlci5jb250YWlucyh2YWx1ZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFRvSW5kZXhlZFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0ZShmdW5jdGlvbih2ICkge3JldHVybiBmbih2LCBpdGVyYXRpb25zKyssIHRoaXMkMCl9LCByZXZlcnNlKTtcblx0ICAgIH07XG5cdFxuXHQgICAgVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG5cdCAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXIuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUywgcmV2ZXJzZSk7XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG5cdCAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG5cdCAgICAgICAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOlxuXHQgICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHN0ZXAudmFsdWUsIHN0ZXApXG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdFxuXHRcblx0ICBjcmVhdGVDbGFzcyhUb1NldFNlcXVlbmNlLCBTZXRTZXEpO1xuXHQgICAgZnVuY3Rpb24gVG9TZXRTZXF1ZW5jZShpdGVyKSB7XG5cdCAgICAgIHRoaXMuX2l0ZXIgPSBpdGVyO1xuXHQgICAgICB0aGlzLnNpemUgPSBpdGVyLnNpemU7XG5cdCAgICB9XG5cdFxuXHQgICAgVG9TZXRTZXF1ZW5jZS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oa2V5KSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9pdGVyLmNvbnRhaW5zKGtleSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG5cdCAgICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0ZShmdW5jdGlvbih2ICkge3JldHVybiBmbih2LCB2LCB0aGlzJDApfSwgcmV2ZXJzZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG5cdCAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXIuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUywgcmV2ZXJzZSk7XG5cdCAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuXHQgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuXHQgICAgICAgIHJldHVybiBzdGVwLmRvbmUgPyBzdGVwIDpcblx0ICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgc3RlcC52YWx1ZSwgc3RlcC52YWx1ZSwgc3RlcCk7XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdFxuXHRcblx0ICBjcmVhdGVDbGFzcyhGcm9tRW50cmllc1NlcXVlbmNlLCBLZXllZFNlcSk7XG5cdCAgICBmdW5jdGlvbiBGcm9tRW50cmllc1NlcXVlbmNlKGVudHJpZXMpIHtcblx0ICAgICAgdGhpcy5faXRlciA9IGVudHJpZXM7XG5cdCAgICAgIHRoaXMuc2l6ZSA9IGVudHJpZXMuc2l6ZTtcblx0ICAgIH1cblx0XG5cdCAgICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZS5lbnRyeVNlcSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5faXRlci50b1NlcSgpO1xuXHQgICAgfTtcblx0XG5cdCAgICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICByZXR1cm4gdGhpcy5faXRlci5fX2l0ZXJhdGUoZnVuY3Rpb24oZW50cnkgKSB7XG5cdCAgICAgICAgLy8gQ2hlY2sgaWYgZW50cnkgZXhpc3RzIGZpcnN0IHNvIGFycmF5IGFjY2VzcyBkb2Vzbid0IHRocm93IGZvciBob2xlc1xuXHQgICAgICAgIC8vIGluIHRoZSBwYXJlbnQgaXRlcmF0aW9uLlxuXHQgICAgICAgIGlmIChlbnRyeSkge1xuXHQgICAgICAgICAgdmFsaWRhdGVFbnRyeShlbnRyeSk7XG5cdCAgICAgICAgICByZXR1cm4gZm4oZW50cnlbMV0sIGVudHJ5WzBdLCB0aGlzJDApO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSwgcmV2ZXJzZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIEZyb21FbnRyaWVzU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG5cdCAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXIuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUywgcmV2ZXJzZSk7XG5cdCAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuXHQgICAgICAgIHdoaWxlICh0cnVlKSB7XG5cdCAgICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcblx0ICAgICAgICAgIGlmIChzdGVwLmRvbmUpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuXHQgICAgICAgICAgLy8gQ2hlY2sgaWYgZW50cnkgZXhpc3RzIGZpcnN0IHNvIGFycmF5IGFjY2VzcyBkb2Vzbid0IHRocm93IGZvciBob2xlc1xuXHQgICAgICAgICAgLy8gaW4gdGhlIHBhcmVudCBpdGVyYXRpb24uXG5cdCAgICAgICAgICBpZiAoZW50cnkpIHtcblx0ICAgICAgICAgICAgdmFsaWRhdGVFbnRyeShlbnRyeSk7XG5cdCAgICAgICAgICAgIHJldHVybiB0eXBlID09PSBJVEVSQVRFX0VOVFJJRVMgPyBzdGVwIDpcblx0ICAgICAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGVudHJ5WzBdLCBlbnRyeVsxXSwgc3RlcCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHRcblx0ICBUb0luZGV4ZWRTZXF1ZW5jZS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPVxuXHQgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPVxuXHQgIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLmNhY2hlUmVzdWx0ID1cblx0ICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZS5jYWNoZVJlc3VsdCA9XG5cdCAgICBjYWNoZVJlc3VsdFRocm91Z2g7XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBmbGlwRmFjdG9yeShpdGVyYWJsZSkge1xuXHQgICAgdmFyIGZsaXBTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG5cdCAgICBmbGlwU2VxdWVuY2UuX2l0ZXIgPSBpdGVyYWJsZTtcblx0ICAgIGZsaXBTZXF1ZW5jZS5zaXplID0gaXRlcmFibGUuc2l6ZTtcblx0ICAgIGZsaXBTZXF1ZW5jZS5mbGlwID0gZnVuY3Rpb24oKSAge3JldHVybiBpdGVyYWJsZX07XG5cdCAgICBmbGlwU2VxdWVuY2UucmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIHJldmVyc2VkU2VxdWVuY2UgPSBpdGVyYWJsZS5yZXZlcnNlLmFwcGx5KHRoaXMpOyAvLyBzdXBlci5yZXZlcnNlKClcblx0ICAgICAgcmV2ZXJzZWRTZXF1ZW5jZS5mbGlwID0gZnVuY3Rpb24oKSAge3JldHVybiBpdGVyYWJsZS5yZXZlcnNlKCl9O1xuXHQgICAgICByZXR1cm4gcmV2ZXJzZWRTZXF1ZW5jZTtcblx0ICAgIH07XG5cdCAgICBmbGlwU2VxdWVuY2UuaGFzID0gZnVuY3Rpb24oa2V5ICkge3JldHVybiBpdGVyYWJsZS5jb250YWlucyhrZXkpfTtcblx0ICAgIGZsaXBTZXF1ZW5jZS5jb250YWlucyA9IGZ1bmN0aW9uKGtleSApIHtyZXR1cm4gaXRlcmFibGUuaGFzKGtleSl9O1xuXHQgICAgZmxpcFNlcXVlbmNlLmNhY2hlUmVzdWx0ID0gY2FjaGVSZXN1bHRUaHJvdWdoO1xuXHQgICAgZmxpcFNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG5cdCAgICAgIHJldHVybiBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gZm4oaywgdiwgdGhpcyQwKSAhPT0gZmFsc2V9LCByZXZlcnNlKTtcblx0ICAgIH1cblx0ICAgIGZsaXBTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG5cdCAgICAgIGlmICh0eXBlID09PSBJVEVSQVRFX0VOVFJJRVMpIHtcblx0ICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuXHQgICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuXHQgICAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG5cdCAgICAgICAgICBpZiAoIXN0ZXAuZG9uZSkge1xuXHQgICAgICAgICAgICB2YXIgayA9IHN0ZXAudmFsdWVbMF07XG5cdCAgICAgICAgICAgIHN0ZXAudmFsdWVbMF0gPSBzdGVwLnZhbHVlWzFdO1xuXHQgICAgICAgICAgICBzdGVwLnZhbHVlWzFdID0gaztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHJldHVybiBzdGVwO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBpdGVyYWJsZS5fX2l0ZXJhdG9yKFxuXHQgICAgICAgIHR5cGUgPT09IElURVJBVEVfVkFMVUVTID8gSVRFUkFURV9LRVlTIDogSVRFUkFURV9WQUxVRVMsXG5cdCAgICAgICAgcmV2ZXJzZVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGZsaXBTZXF1ZW5jZTtcblx0ICB9XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBtYXBGYWN0b3J5KGl0ZXJhYmxlLCBtYXBwZXIsIGNvbnRleHQpIHtcblx0ICAgIHZhciBtYXBwZWRTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG5cdCAgICBtYXBwZWRTZXF1ZW5jZS5zaXplID0gaXRlcmFibGUuc2l6ZTtcblx0ICAgIG1hcHBlZFNlcXVlbmNlLmhhcyA9IGZ1bmN0aW9uKGtleSApIHtyZXR1cm4gaXRlcmFibGUuaGFzKGtleSl9O1xuXHQgICAgbWFwcGVkU2VxdWVuY2UuZ2V0ID0gZnVuY3Rpb24oa2V5LCBub3RTZXRWYWx1ZSkgIHtcblx0ICAgICAgdmFyIHYgPSBpdGVyYWJsZS5nZXQoa2V5LCBOT1RfU0VUKTtcblx0ICAgICAgcmV0dXJuIHYgPT09IE5PVF9TRVQgP1xuXHQgICAgICAgIG5vdFNldFZhbHVlIDpcblx0ICAgICAgICBtYXBwZXIuY2FsbChjb250ZXh0LCB2LCBrZXksIGl0ZXJhYmxlKTtcblx0ICAgIH07XG5cdCAgICBtYXBwZWRTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICByZXR1cm4gaXRlcmFibGUuX19pdGVyYXRlKFxuXHQgICAgICAgIGZ1bmN0aW9uKHYsIGssIGMpICB7cmV0dXJuIGZuKG1hcHBlci5jYWxsKGNvbnRleHQsIHYsIGssIGMpLCBrLCB0aGlzJDApICE9PSBmYWxzZX0sXG5cdCAgICAgICAgcmV2ZXJzZVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgICAgbWFwcGVkU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24gKHR5cGUsIHJldmVyc2UpIHtcblx0ICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuXHQgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcblx0ICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcblx0ICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG5cdCAgICAgICAgICByZXR1cm4gc3RlcDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcblx0ICAgICAgICB2YXIga2V5ID0gZW50cnlbMF07XG5cdCAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUoXG5cdCAgICAgICAgICB0eXBlLFxuXHQgICAgICAgICAga2V5LFxuXHQgICAgICAgICAgbWFwcGVyLmNhbGwoY29udGV4dCwgZW50cnlbMV0sIGtleSwgaXRlcmFibGUpLFxuXHQgICAgICAgICAgc3RlcFxuXHQgICAgICAgICk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG1hcHBlZFNlcXVlbmNlO1xuXHQgIH1cblx0XG5cdFxuXHQgIGZ1bmN0aW9uIHJldmVyc2VGYWN0b3J5KGl0ZXJhYmxlLCB1c2VLZXlzKSB7XG5cdCAgICB2YXIgcmV2ZXJzZWRTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG5cdCAgICByZXZlcnNlZFNlcXVlbmNlLl9pdGVyID0gaXRlcmFibGU7XG5cdCAgICByZXZlcnNlZFNlcXVlbmNlLnNpemUgPSBpdGVyYWJsZS5zaXplO1xuXHQgICAgcmV2ZXJzZWRTZXF1ZW5jZS5yZXZlcnNlID0gZnVuY3Rpb24oKSAge3JldHVybiBpdGVyYWJsZX07XG5cdCAgICBpZiAoaXRlcmFibGUuZmxpcCkge1xuXHQgICAgICByZXZlcnNlZFNlcXVlbmNlLmZsaXAgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGZsaXBTZXF1ZW5jZSA9IGZsaXBGYWN0b3J5KGl0ZXJhYmxlKTtcblx0ICAgICAgICBmbGlwU2VxdWVuY2UucmV2ZXJzZSA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGUuZmxpcCgpfTtcblx0ICAgICAgICByZXR1cm4gZmxpcFNlcXVlbmNlO1xuXHQgICAgICB9O1xuXHQgICAgfVxuXHQgICAgcmV2ZXJzZWRTZXF1ZW5jZS5nZXQgPSBmdW5jdGlvbihrZXksIG5vdFNldFZhbHVlKSBcblx0ICAgICAge3JldHVybiBpdGVyYWJsZS5nZXQodXNlS2V5cyA/IGtleSA6IC0xIC0ga2V5LCBub3RTZXRWYWx1ZSl9O1xuXHQgICAgcmV2ZXJzZWRTZXF1ZW5jZS5oYXMgPSBmdW5jdGlvbihrZXkgKVxuXHQgICAgICB7cmV0dXJuIGl0ZXJhYmxlLmhhcyh1c2VLZXlzID8ga2V5IDogLTEgLSBrZXkpfTtcblx0ICAgIHJldmVyc2VkU2VxdWVuY2UuY29udGFpbnMgPSBmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gaXRlcmFibGUuY29udGFpbnModmFsdWUpfTtcblx0ICAgIHJldmVyc2VkU2VxdWVuY2UuY2FjaGVSZXN1bHQgPSBjYWNoZVJlc3VsdFRocm91Z2g7XG5cdCAgICByZXZlcnNlZFNlcXVlbmNlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICByZXR1cm4gaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIGZuKHYsIGssIHRoaXMkMCl9LCAhcmV2ZXJzZSk7XG5cdCAgICB9O1xuXHQgICAgcmV2ZXJzZWRTZXF1ZW5jZS5fX2l0ZXJhdG9yID1cblx0ICAgICAgZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkgIHtyZXR1cm4gaXRlcmFibGUuX19pdGVyYXRvcih0eXBlLCAhcmV2ZXJzZSl9O1xuXHQgICAgcmV0dXJuIHJldmVyc2VkU2VxdWVuY2U7XG5cdCAgfVxuXHRcblx0XG5cdCAgZnVuY3Rpb24gZmlsdGVyRmFjdG9yeShpdGVyYWJsZSwgcHJlZGljYXRlLCBjb250ZXh0LCB1c2VLZXlzKSB7XG5cdCAgICB2YXIgZmlsdGVyU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuXHQgICAgaWYgKHVzZUtleXMpIHtcblx0ICAgICAgZmlsdGVyU2VxdWVuY2UuaGFzID0gZnVuY3Rpb24oa2V5ICkge1xuXHQgICAgICAgIHZhciB2ID0gaXRlcmFibGUuZ2V0KGtleSwgTk9UX1NFVCk7XG5cdCAgICAgICAgcmV0dXJuIHYgIT09IE5PVF9TRVQgJiYgISFwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrZXksIGl0ZXJhYmxlKTtcblx0ICAgICAgfTtcblx0ICAgICAgZmlsdGVyU2VxdWVuY2UuZ2V0ID0gZnVuY3Rpb24oa2V5LCBub3RTZXRWYWx1ZSkgIHtcblx0ICAgICAgICB2YXIgdiA9IGl0ZXJhYmxlLmdldChrZXksIE5PVF9TRVQpO1xuXHQgICAgICAgIHJldHVybiB2ICE9PSBOT1RfU0VUICYmIHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGtleSwgaXRlcmFibGUpID9cblx0ICAgICAgICAgIHYgOiBub3RTZXRWYWx1ZTtcblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICAgIGZpbHRlclNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG5cdCAgICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIGMpKSB7XG5cdCAgICAgICAgICBpdGVyYXRpb25zKys7XG5cdCAgICAgICAgICByZXR1cm4gZm4odiwgdXNlS2V5cyA/IGsgOiBpdGVyYXRpb25zIC0gMSwgdGhpcyQwKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sIHJldmVyc2UpO1xuXHQgICAgICByZXR1cm4gaXRlcmF0aW9ucztcblx0ICAgIH07XG5cdCAgICBmaWx0ZXJTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbiAodHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG5cdCAgICAgICAgd2hpbGUgKHRydWUpIHtcblx0ICAgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuXHQgICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuXHQgICAgICAgICAgICByZXR1cm4gc3RlcDtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG5cdCAgICAgICAgICB2YXIga2V5ID0gZW50cnlbMF07XG5cdCAgICAgICAgICB2YXIgdmFsdWUgPSBlbnRyeVsxXTtcblx0ICAgICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2YWx1ZSwga2V5LCBpdGVyYWJsZSkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgdXNlS2V5cyA/IGtleSA6IGl0ZXJhdGlvbnMrKywgdmFsdWUsIHN0ZXApO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZmlsdGVyU2VxdWVuY2U7XG5cdCAgfVxuXHRcblx0XG5cdCAgZnVuY3Rpb24gY291bnRCeUZhY3RvcnkoaXRlcmFibGUsIGdyb3VwZXIsIGNvbnRleHQpIHtcblx0ICAgIHZhciBncm91cHMgPSBNYXAoKS5hc011dGFibGUoKTtcblx0ICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge1xuXHQgICAgICBncm91cHMudXBkYXRlKFxuXHQgICAgICAgIGdyb3VwZXIuY2FsbChjb250ZXh0LCB2LCBrLCBpdGVyYWJsZSksXG5cdCAgICAgICAgMCxcblx0ICAgICAgICBmdW5jdGlvbihhICkge3JldHVybiBhICsgMX1cblx0ICAgICAgKTtcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIGdyb3Vwcy5hc0ltbXV0YWJsZSgpO1xuXHQgIH1cblx0XG5cdFxuXHQgIGZ1bmN0aW9uIGdyb3VwQnlGYWN0b3J5KGl0ZXJhYmxlLCBncm91cGVyLCBjb250ZXh0KSB7XG5cdCAgICB2YXIgaXNLZXllZEl0ZXIgPSBpc0tleWVkKGl0ZXJhYmxlKTtcblx0ICAgIHZhciBncm91cHMgPSAoaXNPcmRlcmVkKGl0ZXJhYmxlKSA/IE9yZGVyZWRNYXAoKSA6IE1hcCgpKS5hc011dGFibGUoKTtcblx0ICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge1xuXHQgICAgICBncm91cHMudXBkYXRlKFxuXHQgICAgICAgIGdyb3VwZXIuY2FsbChjb250ZXh0LCB2LCBrLCBpdGVyYWJsZSksXG5cdCAgICAgICAgZnVuY3Rpb24oYSApIHtyZXR1cm4gKGEgPSBhIHx8IFtdLCBhLnB1c2goaXNLZXllZEl0ZXIgPyBbaywgdl0gOiB2KSwgYSl9XG5cdCAgICAgICk7XG5cdCAgICB9KTtcblx0ICAgIHZhciBjb2VyY2UgPSBpdGVyYWJsZUNsYXNzKGl0ZXJhYmxlKTtcblx0ICAgIHJldHVybiBncm91cHMubWFwKGZ1bmN0aW9uKGFyciApIHtyZXR1cm4gcmVpZnkoaXRlcmFibGUsIGNvZXJjZShhcnIpKX0pO1xuXHQgIH1cblx0XG5cdFxuXHQgIGZ1bmN0aW9uIHNsaWNlRmFjdG9yeShpdGVyYWJsZSwgYmVnaW4sIGVuZCwgdXNlS2V5cykge1xuXHQgICAgdmFyIG9yaWdpbmFsU2l6ZSA9IGl0ZXJhYmxlLnNpemU7XG5cdFxuXHQgICAgaWYgKHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgb3JpZ2luYWxTaXplKSkge1xuXHQgICAgICByZXR1cm4gaXRlcmFibGU7XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIHJlc29sdmVkQmVnaW4gPSByZXNvbHZlQmVnaW4oYmVnaW4sIG9yaWdpbmFsU2l6ZSk7XG5cdCAgICB2YXIgcmVzb2x2ZWRFbmQgPSByZXNvbHZlRW5kKGVuZCwgb3JpZ2luYWxTaXplKTtcblx0XG5cdCAgICAvLyBiZWdpbiBvciBlbmQgd2lsbCBiZSBOYU4gaWYgdGhleSB3ZXJlIHByb3ZpZGVkIGFzIG5lZ2F0aXZlIG51bWJlcnMgYW5kXG5cdCAgICAvLyB0aGlzIGl0ZXJhYmxlJ3Mgc2l6ZSBpcyB1bmtub3duLiBJbiB0aGF0IGNhc2UsIGNhY2hlIGZpcnN0IHNvIHRoZXJlIGlzXG5cdCAgICAvLyBhIGtub3duIHNpemUuXG5cdCAgICBpZiAocmVzb2x2ZWRCZWdpbiAhPT0gcmVzb2x2ZWRCZWdpbiB8fCByZXNvbHZlZEVuZCAhPT0gcmVzb2x2ZWRFbmQpIHtcblx0ICAgICAgcmV0dXJuIHNsaWNlRmFjdG9yeShpdGVyYWJsZS50b1NlcSgpLmNhY2hlUmVzdWx0KCksIGJlZ2luLCBlbmQsIHVzZUtleXMpO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBzbGljZVNpemUgPSByZXNvbHZlZEVuZCAtIHJlc29sdmVkQmVnaW47XG5cdCAgICBpZiAoc2xpY2VTaXplIDwgMCkge1xuXHQgICAgICBzbGljZVNpemUgPSAwO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBzbGljZVNlcSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG5cdFxuXHQgICAgc2xpY2VTZXEuc2l6ZSA9IHNsaWNlU2l6ZSA9PT0gMCA/IHNsaWNlU2l6ZSA6IGl0ZXJhYmxlLnNpemUgJiYgc2xpY2VTaXplIHx8IHVuZGVmaW5lZDtcblx0XG5cdCAgICBpZiAoIXVzZUtleXMgJiYgaXNTZXEoaXRlcmFibGUpICYmIHNsaWNlU2l6ZSA+PSAwKSB7XG5cdCAgICAgIHNsaWNlU2VxLmdldCA9IGZ1bmN0aW9uIChpbmRleCwgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgICBpbmRleCA9IHdyYXBJbmRleCh0aGlzLCBpbmRleCk7XG5cdCAgICAgICAgcmV0dXJuIGluZGV4ID49IDAgJiYgaW5kZXggPCBzbGljZVNpemUgP1xuXHQgICAgICAgICAgaXRlcmFibGUuZ2V0KGluZGV4ICsgcmVzb2x2ZWRCZWdpbiwgbm90U2V0VmFsdWUpIDpcblx0ICAgICAgICAgIG5vdFNldFZhbHVlO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgc2xpY2VTZXEuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICBpZiAoc2xpY2VTaXplID09PSAwKSB7XG5cdCAgICAgICAgcmV0dXJuIDA7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHJldmVyc2UpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHNraXBwZWQgPSAwO1xuXHQgICAgICB2YXIgaXNTa2lwcGluZyA9IHRydWU7XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7XG5cdCAgICAgICAgaWYgKCEoaXNTa2lwcGluZyAmJiAoaXNTa2lwcGluZyA9IHNraXBwZWQrKyA8IHJlc29sdmVkQmVnaW4pKSkge1xuXHQgICAgICAgICAgaXRlcmF0aW9ucysrO1xuXHQgICAgICAgICAgcmV0dXJuIGZuKHYsIHVzZUtleXMgPyBrIDogaXRlcmF0aW9ucyAtIDEsIHRoaXMkMCkgIT09IGZhbHNlICYmXG5cdCAgICAgICAgICAgICAgICAgaXRlcmF0aW9ucyAhPT0gc2xpY2VTaXplO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuXHQgICAgfTtcblx0XG5cdCAgICBzbGljZVNlcS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG5cdCAgICAgIGlmIChzbGljZVNpemUgJiYgcmV2ZXJzZSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcblx0ICAgICAgfVxuXHQgICAgICAvLyBEb24ndCBib3RoZXIgaW5zdGFudGlhdGluZyBwYXJlbnQgaXRlcmF0b3IgaWYgdGFraW5nIDAuXG5cdCAgICAgIHZhciBpdGVyYXRvciA9IHNsaWNlU2l6ZSAmJiBpdGVyYWJsZS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuXHQgICAgICB2YXIgc2tpcHBlZCA9IDA7XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG5cdCAgICAgICAgd2hpbGUgKHNraXBwZWQrKyAhPT0gcmVzb2x2ZWRCZWdpbikge1xuXHQgICAgICAgICAgaXRlcmF0b3IubmV4dCgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoKytpdGVyYXRpb25zID4gc2xpY2VTaXplKSB7XG5cdCAgICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuXHQgICAgICAgIGlmICh1c2VLZXlzIHx8IHR5cGUgPT09IElURVJBVEVfVkFMVUVTKSB7XG5cdCAgICAgICAgICByZXR1cm4gc3RlcDtcblx0ICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElURVJBVEVfS0VZUykge1xuXHQgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucyAtIDEsIHVuZGVmaW5lZCwgc3RlcCk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMgLSAxLCBzdGVwLnZhbHVlWzFdLCBzdGVwKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHRcblx0ICAgIHJldHVybiBzbGljZVNlcTtcblx0ICB9XG5cdFxuXHRcblx0ICBmdW5jdGlvbiB0YWtlV2hpbGVGYWN0b3J5KGl0ZXJhYmxlLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcblx0ICAgIHZhciB0YWtlU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuXHQgICAgdGFrZVNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcblx0ICAgICAgaWYgKHJldmVyc2UpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuXHQgICAgICBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaywgYykgXG5cdCAgICAgICAge3JldHVybiBwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSAmJiArK2l0ZXJhdGlvbnMgJiYgZm4odiwgaywgdGhpcyQwKX1cblx0ICAgICAgKTtcblx0ICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG5cdCAgICB9O1xuXHQgICAgdGFrZVNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcblx0ICAgICAgaWYgKHJldmVyc2UpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuXHQgICAgICB2YXIgaXRlcmF0aW5nID0gdHJ1ZTtcblx0ICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG5cdCAgICAgICAgaWYgKCFpdGVyYXRpbmcpIHtcblx0ICAgICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG5cdCAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuXHQgICAgICAgICAgcmV0dXJuIHN0ZXA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG5cdCAgICAgICAgdmFyIGsgPSBlbnRyeVswXTtcblx0ICAgICAgICB2YXIgdiA9IGVudHJ5WzFdO1xuXHQgICAgICAgIGlmICghcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgdGhpcyQwKSkge1xuXHQgICAgICAgICAgaXRlcmF0aW5nID0gZmFsc2U7XG5cdCAgICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0eXBlID09PSBJVEVSQVRFX0VOVFJJRVMgPyBzdGVwIDpcblx0ICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaywgdiwgc3RlcCk7XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiB0YWtlU2VxdWVuY2U7XG5cdCAgfVxuXHRcblx0XG5cdCAgZnVuY3Rpb24gc2tpcFdoaWxlRmFjdG9yeShpdGVyYWJsZSwgcHJlZGljYXRlLCBjb250ZXh0LCB1c2VLZXlzKSB7XG5cdCAgICB2YXIgc2tpcFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcblx0ICAgIHNraXBTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICBpZiAocmV2ZXJzZSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgaXNTa2lwcGluZyA9IHRydWU7XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG5cdCAgICAgICAgaWYgKCEoaXNTa2lwcGluZyAmJiAoaXNTa2lwcGluZyA9IHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIGMpKSkpIHtcblx0ICAgICAgICAgIGl0ZXJhdGlvbnMrKztcblx0ICAgICAgICAgIHJldHVybiBmbih2LCB1c2VLZXlzID8gayA6IGl0ZXJhdGlvbnMgLSAxLCB0aGlzJDApO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuXHQgICAgfTtcblx0ICAgIHNraXBTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG5cdCAgICAgIGlmIChyZXZlcnNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCByZXZlcnNlKTtcblx0ICAgICAgdmFyIHNraXBwaW5nID0gdHJ1ZTtcblx0ICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuXHQgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcblx0ICAgICAgICB2YXIgc3RlcCwgaywgdjtcblx0ICAgICAgICBkbyB7XG5cdCAgICAgICAgICBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuXHQgICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuXHQgICAgICAgICAgICBpZiAodXNlS2V5cyB8fCB0eXBlID09PSBJVEVSQVRFX1ZBTFVFUykge1xuXHQgICAgICAgICAgICAgIHJldHVybiBzdGVwO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElURVJBVEVfS0VZUykge1xuXHQgICAgICAgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgdW5kZWZpbmVkLCBzdGVwKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHN0ZXAudmFsdWVbMV0sIHN0ZXApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuXHQgICAgICAgICAgayA9IGVudHJ5WzBdO1xuXHQgICAgICAgICAgdiA9IGVudHJ5WzFdO1xuXHQgICAgICAgICAgc2tpcHBpbmcgJiYgKHNraXBwaW5nID0gcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgdGhpcyQwKSk7XG5cdCAgICAgICAgfSB3aGlsZSAoc2tpcHBpbmcpO1xuXHQgICAgICAgIHJldHVybiB0eXBlID09PSBJVEVSQVRFX0VOVFJJRVMgPyBzdGVwIDpcblx0ICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaywgdiwgc3RlcCk7XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBza2lwU2VxdWVuY2U7XG5cdCAgfVxuXHRcblx0XG5cdCAgZnVuY3Rpb24gY29uY2F0RmFjdG9yeShpdGVyYWJsZSwgdmFsdWVzKSB7XG5cdCAgICB2YXIgaXNLZXllZEl0ZXJhYmxlID0gaXNLZXllZChpdGVyYWJsZSk7XG5cdCAgICB2YXIgaXRlcnMgPSBbaXRlcmFibGVdLmNvbmNhdCh2YWx1ZXMpLm1hcChmdW5jdGlvbih2ICkge1xuXHQgICAgICBpZiAoIWlzSXRlcmFibGUodikpIHtcblx0ICAgICAgICB2ID0gaXNLZXllZEl0ZXJhYmxlID9cblx0ICAgICAgICAgIGtleWVkU2VxRnJvbVZhbHVlKHYpIDpcblx0ICAgICAgICAgIGluZGV4ZWRTZXFGcm9tVmFsdWUoQXJyYXkuaXNBcnJheSh2KSA/IHYgOiBbdl0pO1xuXHQgICAgICB9IGVsc2UgaWYgKGlzS2V5ZWRJdGVyYWJsZSkge1xuXHQgICAgICAgIHYgPSBLZXllZEl0ZXJhYmxlKHYpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiB2O1xuXHQgICAgfSkuZmlsdGVyKGZ1bmN0aW9uKHYgKSB7cmV0dXJuIHYuc2l6ZSAhPT0gMH0pO1xuXHRcblx0ICAgIGlmIChpdGVycy5sZW5ndGggPT09IDApIHtcblx0ICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmIChpdGVycy5sZW5ndGggPT09IDEpIHtcblx0ICAgICAgdmFyIHNpbmdsZXRvbiA9IGl0ZXJzWzBdO1xuXHQgICAgICBpZiAoc2luZ2xldG9uID09PSBpdGVyYWJsZSB8fFxuXHQgICAgICAgICAgaXNLZXllZEl0ZXJhYmxlICYmIGlzS2V5ZWQoc2luZ2xldG9uKSB8fFxuXHQgICAgICAgICAgaXNJbmRleGVkKGl0ZXJhYmxlKSAmJiBpc0luZGV4ZWQoc2luZ2xldG9uKSkge1xuXHQgICAgICAgIHJldHVybiBzaW5nbGV0b247XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICB2YXIgY29uY2F0U2VxID0gbmV3IEFycmF5U2VxKGl0ZXJzKTtcblx0ICAgIGlmIChpc0tleWVkSXRlcmFibGUpIHtcblx0ICAgICAgY29uY2F0U2VxID0gY29uY2F0U2VxLnRvS2V5ZWRTZXEoKTtcblx0ICAgIH0gZWxzZSBpZiAoIWlzSW5kZXhlZChpdGVyYWJsZSkpIHtcblx0ICAgICAgY29uY2F0U2VxID0gY29uY2F0U2VxLnRvU2V0U2VxKCk7XG5cdCAgICB9XG5cdCAgICBjb25jYXRTZXEgPSBjb25jYXRTZXEuZmxhdHRlbih0cnVlKTtcblx0ICAgIGNvbmNhdFNlcS5zaXplID0gaXRlcnMucmVkdWNlKFxuXHQgICAgICBmdW5jdGlvbihzdW0sIHNlcSkgIHtcblx0ICAgICAgICBpZiAoc3VtICE9PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgIHZhciBzaXplID0gc2VxLnNpemU7XG5cdCAgICAgICAgICBpZiAoc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBzdW0gKyBzaXplO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfSxcblx0ICAgICAgMFxuXHQgICAgKTtcblx0ICAgIHJldHVybiBjb25jYXRTZXE7XG5cdCAgfVxuXHRcblx0XG5cdCAgZnVuY3Rpb24gZmxhdHRlbkZhY3RvcnkoaXRlcmFibGUsIGRlcHRoLCB1c2VLZXlzKSB7XG5cdCAgICB2YXIgZmxhdFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcblx0ICAgIGZsYXRTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgdmFyIHN0b3BwZWQgPSBmYWxzZTtcblx0ICAgICAgZnVuY3Rpb24gZmxhdERlZXAoaXRlciwgY3VycmVudERlcHRoKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG5cdCAgICAgICAgaXRlci5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtcblx0ICAgICAgICAgIGlmICgoIWRlcHRoIHx8IGN1cnJlbnREZXB0aCA8IGRlcHRoKSAmJiBpc0l0ZXJhYmxlKHYpKSB7XG5cdCAgICAgICAgICAgIGZsYXREZWVwKHYsIGN1cnJlbnREZXB0aCArIDEpO1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChmbih2LCB1c2VLZXlzID8gayA6IGl0ZXJhdGlvbnMrKywgdGhpcyQwKSA9PT0gZmFsc2UpIHtcblx0ICAgICAgICAgICAgc3RvcHBlZCA9IHRydWU7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICByZXR1cm4gIXN0b3BwZWQ7XG5cdCAgICAgICAgfSwgcmV2ZXJzZSk7XG5cdCAgICAgIH1cblx0ICAgICAgZmxhdERlZXAoaXRlcmFibGUsIDApO1xuXHQgICAgICByZXR1cm4gaXRlcmF0aW9ucztcblx0ICAgIH1cblx0ICAgIGZsYXRTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG5cdCAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG5cdCAgICAgIHZhciBzdGFjayA9IFtdO1xuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuXHQgICAgICAgIHdoaWxlIChpdGVyYXRvcikge1xuXHQgICAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG5cdCAgICAgICAgICBpZiAoc3RlcC5kb25lICE9PSBmYWxzZSkge1xuXHQgICAgICAgICAgICBpdGVyYXRvciA9IHN0YWNrLnBvcCgpO1xuXHQgICAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHZhciB2ID0gc3RlcC52YWx1ZTtcblx0ICAgICAgICAgIGlmICh0eXBlID09PSBJVEVSQVRFX0VOVFJJRVMpIHtcblx0ICAgICAgICAgICAgdiA9IHZbMV07XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBpZiAoKCFkZXB0aCB8fCBzdGFjay5sZW5ndGggPCBkZXB0aCkgJiYgaXNJdGVyYWJsZSh2KSkge1xuXHQgICAgICAgICAgICBzdGFjay5wdXNoKGl0ZXJhdG9yKTtcblx0ICAgICAgICAgICAgaXRlcmF0b3IgPSB2Ll9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gdXNlS2V5cyA/IHN0ZXAgOiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgdiwgc3RlcCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZmxhdFNlcXVlbmNlO1xuXHQgIH1cblx0XG5cdFxuXHQgIGZ1bmN0aW9uIGZsYXRNYXBGYWN0b3J5KGl0ZXJhYmxlLCBtYXBwZXIsIGNvbnRleHQpIHtcblx0ICAgIHZhciBjb2VyY2UgPSBpdGVyYWJsZUNsYXNzKGl0ZXJhYmxlKTtcblx0ICAgIHJldHVybiBpdGVyYWJsZS50b1NlcSgpLm1hcChcblx0ICAgICAgZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gY29lcmNlKG1hcHBlci5jYWxsKGNvbnRleHQsIHYsIGssIGl0ZXJhYmxlKSl9XG5cdCAgICApLmZsYXR0ZW4odHJ1ZSk7XG5cdCAgfVxuXHRcblx0XG5cdCAgZnVuY3Rpb24gaW50ZXJwb3NlRmFjdG9yeShpdGVyYWJsZSwgc2VwYXJhdG9yKSB7XG5cdCAgICB2YXIgaW50ZXJwb3NlZFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcblx0ICAgIGludGVycG9zZWRTZXF1ZW5jZS5zaXplID0gaXRlcmFibGUuc2l6ZSAmJiBpdGVyYWJsZS5zaXplICogMiAtMTtcblx0ICAgIGludGVycG9zZWRTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspIFxuXHQgICAgICAgIHtyZXR1cm4gKCFpdGVyYXRpb25zIHx8IGZuKHNlcGFyYXRvciwgaXRlcmF0aW9ucysrLCB0aGlzJDApICE9PSBmYWxzZSkgJiZcblx0ICAgICAgICBmbih2LCBpdGVyYXRpb25zKyssIHRoaXMkMCkgIT09IGZhbHNlfSxcblx0ICAgICAgICByZXZlcnNlXG5cdCAgICAgICk7XG5cdCAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuXHQgICAgfTtcblx0ICAgIGludGVycG9zZWRTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG5cdCAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIHZhciBzdGVwO1xuXHQgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcblx0ICAgICAgICBpZiAoIXN0ZXAgfHwgaXRlcmF0aW9ucyAlIDIpIHtcblx0ICAgICAgICAgIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG5cdCAgICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBzdGVwO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gaXRlcmF0aW9ucyAlIDIgP1xuXHQgICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHNlcGFyYXRvcikgOlxuXHQgICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHN0ZXAudmFsdWUsIHN0ZXApO1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gaW50ZXJwb3NlZFNlcXVlbmNlO1xuXHQgIH1cblx0XG5cdFxuXHQgIGZ1bmN0aW9uIHNvcnRGYWN0b3J5KGl0ZXJhYmxlLCBjb21wYXJhdG9yLCBtYXBwZXIpIHtcblx0ICAgIGlmICghY29tcGFyYXRvcikge1xuXHQgICAgICBjb21wYXJhdG9yID0gZGVmYXVsdENvbXBhcmF0b3I7XG5cdCAgICB9XG5cdCAgICB2YXIgaXNLZXllZEl0ZXJhYmxlID0gaXNLZXllZChpdGVyYWJsZSk7XG5cdCAgICB2YXIgaW5kZXggPSAwO1xuXHQgICAgdmFyIGVudHJpZXMgPSBpdGVyYWJsZS50b1NlcSgpLm1hcChcblx0ICAgICAgZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gW2ssIHYsIGluZGV4KyssIG1hcHBlciA/IG1hcHBlcih2LCBrLCBpdGVyYWJsZSkgOiB2XX1cblx0ICAgICkudG9BcnJheSgpO1xuXHQgICAgZW50cmllcy5zb3J0KGZ1bmN0aW9uKGEsIGIpICB7cmV0dXJuIGNvbXBhcmF0b3IoYVszXSwgYlszXSkgfHwgYVsyXSAtIGJbMl19KS5mb3JFYWNoKFxuXHQgICAgICBpc0tleWVkSXRlcmFibGUgP1xuXHQgICAgICBmdW5jdGlvbih2LCBpKSAgeyBlbnRyaWVzW2ldLmxlbmd0aCA9IDI7IH0gOlxuXHQgICAgICBmdW5jdGlvbih2LCBpKSAgeyBlbnRyaWVzW2ldID0gdlsxXTsgfVxuXHQgICAgKTtcblx0ICAgIHJldHVybiBpc0tleWVkSXRlcmFibGUgPyBLZXllZFNlcShlbnRyaWVzKSA6XG5cdCAgICAgIGlzSW5kZXhlZChpdGVyYWJsZSkgPyBJbmRleGVkU2VxKGVudHJpZXMpIDpcblx0ICAgICAgU2V0U2VxKGVudHJpZXMpO1xuXHQgIH1cblx0XG5cdFxuXHQgIGZ1bmN0aW9uIG1heEZhY3RvcnkoaXRlcmFibGUsIGNvbXBhcmF0b3IsIG1hcHBlcikge1xuXHQgICAgaWYgKCFjb21wYXJhdG9yKSB7XG5cdCAgICAgIGNvbXBhcmF0b3IgPSBkZWZhdWx0Q29tcGFyYXRvcjtcblx0ICAgIH1cblx0ICAgIGlmIChtYXBwZXIpIHtcblx0ICAgICAgdmFyIGVudHJ5ID0gaXRlcmFibGUudG9TZXEoKVxuXHQgICAgICAgIC5tYXAoZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gW3YsIG1hcHBlcih2LCBrLCBpdGVyYWJsZSldfSlcblx0ICAgICAgICAucmVkdWNlKGZ1bmN0aW9uKGEsIGIpICB7cmV0dXJuIG1heENvbXBhcmUoY29tcGFyYXRvciwgYVsxXSwgYlsxXSkgPyBiIDogYX0pO1xuXHQgICAgICByZXR1cm4gZW50cnkgJiYgZW50cnlbMF07XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gaXRlcmFibGUucmVkdWNlKGZ1bmN0aW9uKGEsIGIpICB7cmV0dXJuIG1heENvbXBhcmUoY29tcGFyYXRvciwgYSwgYikgPyBiIDogYX0pO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gbWF4Q29tcGFyZShjb21wYXJhdG9yLCBhLCBiKSB7XG5cdCAgICB2YXIgY29tcCA9IGNvbXBhcmF0b3IoYiwgYSk7XG5cdCAgICAvLyBiIGlzIGNvbnNpZGVyZWQgdGhlIG5ldyBtYXggaWYgdGhlIGNvbXBhcmF0b3IgZGVjbGFyZXMgdGhlbSBlcXVhbCwgYnV0XG5cdCAgICAvLyB0aGV5IGFyZSBub3QgZXF1YWwgYW5kIGIgaXMgaW4gZmFjdCBhIG51bGxpc2ggdmFsdWUuXG5cdCAgICByZXR1cm4gKGNvbXAgPT09IDAgJiYgYiAhPT0gYSAmJiAoYiA9PT0gdW5kZWZpbmVkIHx8IGIgPT09IG51bGwgfHwgYiAhPT0gYikpIHx8IGNvbXAgPiAwO1xuXHQgIH1cblx0XG5cdFxuXHQgIGZ1bmN0aW9uIHppcFdpdGhGYWN0b3J5KGtleUl0ZXIsIHppcHBlciwgaXRlcnMpIHtcblx0ICAgIHZhciB6aXBTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShrZXlJdGVyKTtcblx0ICAgIHppcFNlcXVlbmNlLnNpemUgPSBuZXcgQXJyYXlTZXEoaXRlcnMpLm1hcChmdW5jdGlvbihpICkge3JldHVybiBpLnNpemV9KS5taW4oKTtcblx0ICAgIC8vIE5vdGU6IHRoaXMgYSBnZW5lcmljIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgX19pdGVyYXRlIGluIHRlcm1zIG9mXG5cdCAgICAvLyBfX2l0ZXJhdG9yIHdoaWNoIG1heSBiZSBtb3JlIGdlbmVyaWNhbGx5IHVzZWZ1bCBpbiB0aGUgZnV0dXJlLlxuXHQgICAgemlwU2VxdWVuY2UuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcblx0ICAgICAgLyogZ2VuZXJpYzpcblx0ICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG5cdCAgICAgIHZhciBzdGVwO1xuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcblx0ICAgICAgICBpdGVyYXRpb25zKys7XG5cdCAgICAgICAgaWYgKGZuKHN0ZXAudmFsdWVbMV0sIHN0ZXAudmFsdWVbMF0sIHRoaXMpID09PSBmYWxzZSkge1xuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuXHQgICAgICAqL1xuXHQgICAgICAvLyBpbmRleGVkOlxuXHQgICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuXHQgICAgICB2YXIgc3RlcDtcblx0ICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuXHQgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG5cdCAgICAgICAgaWYgKGZuKHN0ZXAudmFsdWUsIGl0ZXJhdGlvbnMrKywgdGhpcykgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG5cdCAgICB9O1xuXHQgICAgemlwU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICB2YXIgaXRlcmF0b3JzID0gaXRlcnMubWFwKGZ1bmN0aW9uKGkgKVxuXHQgICAgICAgIHtyZXR1cm4gKGkgPSBJdGVyYWJsZShpKSwgZ2V0SXRlcmF0b3IocmV2ZXJzZSA/IGkucmV2ZXJzZSgpIDogaSkpfVxuXHQgICAgICApO1xuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIHZhciBpc0RvbmUgPSBmYWxzZTtcblx0ICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG5cdCAgICAgICAgdmFyIHN0ZXBzO1xuXHQgICAgICAgIGlmICghaXNEb25lKSB7XG5cdCAgICAgICAgICBzdGVwcyA9IGl0ZXJhdG9ycy5tYXAoZnVuY3Rpb24oaSApIHtyZXR1cm4gaS5uZXh0KCl9KTtcblx0ICAgICAgICAgIGlzRG9uZSA9IHN0ZXBzLnNvbWUoZnVuY3Rpb24ocyApIHtyZXR1cm4gcy5kb25lfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChpc0RvbmUpIHtcblx0ICAgICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUoXG5cdCAgICAgICAgICB0eXBlLFxuXHQgICAgICAgICAgaXRlcmF0aW9ucysrLFxuXHQgICAgICAgICAgemlwcGVyLmFwcGx5KG51bGwsIHN0ZXBzLm1hcChmdW5jdGlvbihzICkge3JldHVybiBzLnZhbHVlfSkpXG5cdCAgICAgICAgKTtcblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIHppcFNlcXVlbmNlXG5cdCAgfVxuXHRcblx0XG5cdCAgLy8gI3ByYWdtYSBIZWxwZXIgRnVuY3Rpb25zXG5cdFxuXHQgIGZ1bmN0aW9uIHJlaWZ5KGl0ZXIsIHNlcSkge1xuXHQgICAgcmV0dXJuIGlzU2VxKGl0ZXIpID8gc2VxIDogaXRlci5jb25zdHJ1Y3RvcihzZXEpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gdmFsaWRhdGVFbnRyeShlbnRyeSkge1xuXHQgICAgaWYgKGVudHJ5ICE9PSBPYmplY3QoZW50cnkpKSB7XG5cdCAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFtLLCBWXSB0dXBsZTogJyArIGVudHJ5KTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHJlc29sdmVTaXplKGl0ZXIpIHtcblx0ICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG5cdCAgICByZXR1cm4gZW5zdXJlU2l6ZShpdGVyKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGl0ZXJhYmxlQ2xhc3MoaXRlcmFibGUpIHtcblx0ICAgIHJldHVybiBpc0tleWVkKGl0ZXJhYmxlKSA/IEtleWVkSXRlcmFibGUgOlxuXHQgICAgICBpc0luZGV4ZWQoaXRlcmFibGUpID8gSW5kZXhlZEl0ZXJhYmxlIDpcblx0ICAgICAgU2V0SXRlcmFibGU7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBtYWtlU2VxdWVuY2UoaXRlcmFibGUpIHtcblx0ICAgIHJldHVybiBPYmplY3QuY3JlYXRlKFxuXHQgICAgICAoXG5cdCAgICAgICAgaXNLZXllZChpdGVyYWJsZSkgPyBLZXllZFNlcSA6XG5cdCAgICAgICAgaXNJbmRleGVkKGl0ZXJhYmxlKSA/IEluZGV4ZWRTZXEgOlxuXHQgICAgICAgIFNldFNlcVxuXHQgICAgICApLnByb3RvdHlwZVxuXHQgICAgKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGNhY2hlUmVzdWx0VGhyb3VnaCgpIHtcblx0ICAgIGlmICh0aGlzLl9pdGVyLmNhY2hlUmVzdWx0KSB7XG5cdCAgICAgIHRoaXMuX2l0ZXIuY2FjaGVSZXN1bHQoKTtcblx0ICAgICAgdGhpcy5zaXplID0gdGhpcy5faXRlci5zaXplO1xuXHQgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiBTZXEucHJvdG90eXBlLmNhY2hlUmVzdWx0LmNhbGwodGhpcyk7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBkZWZhdWx0Q29tcGFyYXRvcihhLCBiKSB7XG5cdCAgICByZXR1cm4gYSA+IGIgPyAxIDogYSA8IGIgPyAtMSA6IDA7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBmb3JjZUl0ZXJhdG9yKGtleVBhdGgpIHtcblx0ICAgIHZhciBpdGVyID0gZ2V0SXRlcmF0b3Ioa2V5UGF0aCk7XG5cdCAgICBpZiAoIWl0ZXIpIHtcblx0ICAgICAgLy8gQXJyYXkgbWlnaHQgbm90IGJlIGl0ZXJhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQsIHNvIHdlIG5lZWQgYSBmYWxsYmFja1xuXHQgICAgICAvLyB0byBvdXIgd3JhcHBlZCB0eXBlLlxuXHQgICAgICBpZiAoIWlzQXJyYXlMaWtlKGtleVBhdGgpKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgaXRlcmFibGUgb3IgYXJyYXktbGlrZTogJyArIGtleVBhdGgpO1xuXHQgICAgICB9XG5cdCAgICAgIGl0ZXIgPSBnZXRJdGVyYXRvcihJdGVyYWJsZShrZXlQYXRoKSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gaXRlcjtcblx0ICB9XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKE1hcCwgS2V5ZWRDb2xsZWN0aW9uKTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIENvbnN0cnVjdGlvblxuXHRcblx0ICAgIGZ1bmN0aW9uIE1hcCh2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5TWFwKCkgOlxuXHQgICAgICAgIGlzTWFwKHZhbHVlKSA/IHZhbHVlIDpcblx0ICAgICAgICBlbXB0eU1hcCgpLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24obWFwICkge1xuXHQgICAgICAgICAgdmFyIGl0ZXIgPSBLZXllZEl0ZXJhYmxlKHZhbHVlKTtcblx0ICAgICAgICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG5cdCAgICAgICAgICBpdGVyLmZvckVhY2goZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gbWFwLnNldChrLCB2KX0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHRcblx0ICAgIE1hcC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnTWFwIHsnLCAnfScpO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXHRcblx0ICAgIE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaywgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX3Jvb3QgP1xuXHQgICAgICAgIHRoaXMuX3Jvb3QuZ2V0KDAsIHVuZGVmaW5lZCwgaywgbm90U2V0VmFsdWUpIDpcblx0ICAgICAgICBub3RTZXRWYWx1ZTtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblx0XG5cdCAgICBNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGssIHYpIHtcblx0ICAgICAgcmV0dXJuIHVwZGF0ZU1hcCh0aGlzLCBrLCB2KTtcblx0ICAgIH07XG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS5zZXRJbiA9IGZ1bmN0aW9uKGtleVBhdGgsIHYpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSW4oa2V5UGF0aCwgTk9UX1NFVCwgZnVuY3Rpb24oKSAge3JldHVybiB2fSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1hcC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oaykge1xuXHQgICAgICByZXR1cm4gdXBkYXRlTWFwKHRoaXMsIGssIE5PVF9TRVQpO1xuXHQgICAgfTtcblx0XG5cdCAgICBNYXAucHJvdG90eXBlLmRlbGV0ZUluID0gZnVuY3Rpb24oa2V5UGF0aCkge1xuXHQgICAgICByZXR1cm4gdGhpcy51cGRhdGVJbihrZXlQYXRoLCBmdW5jdGlvbigpICB7cmV0dXJuIE5PVF9TRVR9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihrLCBub3RTZXRWYWx1ZSwgdXBkYXRlcikge1xuXHQgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdCAgICAgICAgayh0aGlzKSA6XG5cdCAgICAgICAgdGhpcy51cGRhdGVJbihba10sIG5vdFNldFZhbHVlLCB1cGRhdGVyKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS51cGRhdGVJbiA9IGZ1bmN0aW9uKGtleVBhdGgsIG5vdFNldFZhbHVlLCB1cGRhdGVyKSB7XG5cdCAgICAgIGlmICghdXBkYXRlcikge1xuXHQgICAgICAgIHVwZGF0ZXIgPSBub3RTZXRWYWx1ZTtcblx0ICAgICAgICBub3RTZXRWYWx1ZSA9IHVuZGVmaW5lZDtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgdXBkYXRlZFZhbHVlID0gdXBkYXRlSW5EZWVwTWFwKFxuXHQgICAgICAgIHRoaXMsXG5cdCAgICAgICAgZm9yY2VJdGVyYXRvcihrZXlQYXRoKSxcblx0ICAgICAgICBub3RTZXRWYWx1ZSxcblx0ICAgICAgICB1cGRhdGVyXG5cdCAgICAgICk7XG5cdCAgICAgIHJldHVybiB1cGRhdGVkVmFsdWUgPT09IE5PVF9TRVQgPyB1bmRlZmluZWQgOiB1cGRhdGVkVmFsdWU7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuXHQgICAgICAgIHRoaXMuc2l6ZSA9IDA7XG5cdCAgICAgICAgdGhpcy5fcm9vdCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBlbXB0eU1hcCgpO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIENvbXBvc2l0aW9uXG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uKC8qLi4uaXRlcnMqLykge1xuXHQgICAgICByZXR1cm4gbWVyZ2VJbnRvTWFwV2l0aCh0aGlzLCB1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1hcC5wcm90b3R5cGUubWVyZ2VXaXRoID0gZnVuY3Rpb24obWVyZ2VyKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG5cdCAgICAgIHJldHVybiBtZXJnZUludG9NYXBXaXRoKHRoaXMsIG1lcmdlciwgaXRlcnMpO1xuXHQgICAgfTtcblx0XG5cdCAgICBNYXAucHJvdG90eXBlLm1lcmdlSW4gPSBmdW5jdGlvbihrZXlQYXRoKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG5cdCAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUluKGtleVBhdGgsIGVtcHR5TWFwKCksIGZ1bmN0aW9uKG0gKSB7cmV0dXJuIG0ubWVyZ2UuYXBwbHkobSwgaXRlcnMpfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1hcC5wcm90b3R5cGUubWVyZ2VEZWVwID0gZnVuY3Rpb24oLyouLi5pdGVycyovKSB7XG5cdCAgICAgIHJldHVybiBtZXJnZUludG9NYXBXaXRoKHRoaXMsIGRlZXBNZXJnZXIodW5kZWZpbmVkKSwgYXJndW1lbnRzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS5tZXJnZURlZXBXaXRoID0gZnVuY3Rpb24obWVyZ2VyKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG5cdCAgICAgIHJldHVybiBtZXJnZUludG9NYXBXaXRoKHRoaXMsIGRlZXBNZXJnZXIobWVyZ2VyKSwgaXRlcnMpO1xuXHQgICAgfTtcblx0XG5cdCAgICBNYXAucHJvdG90eXBlLm1lcmdlRGVlcEluID0gZnVuY3Rpb24oa2V5UGF0aCkge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuXHQgICAgICByZXR1cm4gdGhpcy51cGRhdGVJbihrZXlQYXRoLCBlbXB0eU1hcCgpLCBmdW5jdGlvbihtICkge3JldHVybiBtLm1lcmdlRGVlcC5hcHBseShtLCBpdGVycyl9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24oY29tcGFyYXRvcikge1xuXHQgICAgICAvLyBMYXRlIGJpbmRpbmdcblx0ICAgICAgcmV0dXJuIE9yZGVyZWRNYXAoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvcikpO1xuXHQgICAgfTtcblx0XG5cdCAgICBNYXAucHJvdG90eXBlLnNvcnRCeSA9IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuXHQgICAgICAvLyBMYXRlIGJpbmRpbmdcblx0ICAgICAgcmV0dXJuIE9yZGVyZWRNYXAoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvciwgbWFwcGVyKSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIEBwcmFnbWEgTXV0YWJpbGl0eVxuXHRcblx0ICAgIE1hcC5wcm90b3R5cGUud2l0aE11dGF0aW9ucyA9IGZ1bmN0aW9uKGZuKSB7XG5cdCAgICAgIHZhciBtdXRhYmxlID0gdGhpcy5hc011dGFibGUoKTtcblx0ICAgICAgZm4obXV0YWJsZSk7XG5cdCAgICAgIHJldHVybiBtdXRhYmxlLndhc0FsdGVyZWQoKSA/IG11dGFibGUuX19lbnN1cmVPd25lcih0aGlzLl9fb3duZXJJRCkgOiB0aGlzO1xuXHQgICAgfTtcblx0XG5cdCAgICBNYXAucHJvdG90eXBlLmFzTXV0YWJsZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fX293bmVySUQgPyB0aGlzIDogdGhpcy5fX2Vuc3VyZU93bmVyKG5ldyBPd25lcklEKCkpO1xuXHQgICAgfTtcblx0XG5cdCAgICBNYXAucHJvdG90eXBlLmFzSW1tdXRhYmxlID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9fZW5zdXJlT3duZXIoKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9fYWx0ZXJlZDtcblx0ICAgIH07XG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKHRoaXMsIHR5cGUsIHJldmVyc2UpO1xuXHQgICAgfTtcblx0XG5cdCAgICBNYXAucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgdGhpcy5fcm9vdCAmJiB0aGlzLl9yb290Lml0ZXJhdGUoZnVuY3Rpb24oZW50cnkgKSB7XG5cdCAgICAgICAgaXRlcmF0aW9ucysrO1xuXHQgICAgICAgIHJldHVybiBmbihlbnRyeVsxXSwgZW50cnlbMF0sIHRoaXMkMCk7XG5cdCAgICAgIH0sIHJldmVyc2UpO1xuXHQgICAgICByZXR1cm4gaXRlcmF0aW9ucztcblx0ICAgIH07XG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24ob3duZXJJRCkge1xuXHQgICAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICBpZiAoIW93bmVySUQpIHtcblx0ICAgICAgICB0aGlzLl9fb3duZXJJRCA9IG93bmVySUQ7XG5cdCAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSBmYWxzZTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gbWFrZU1hcCh0aGlzLnNpemUsIHRoaXMuX3Jvb3QsIG93bmVySUQsIHRoaXMuX19oYXNoKTtcblx0ICAgIH07XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBpc01hcChtYXliZU1hcCkge1xuXHQgICAgcmV0dXJuICEhKG1heWJlTWFwICYmIG1heWJlTWFwW0lTX01BUF9TRU5USU5FTF0pO1xuXHQgIH1cblx0XG5cdCAgTWFwLmlzTWFwID0gaXNNYXA7XG5cdFxuXHQgIHZhciBJU19NQVBfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9NQVBfX0BAJztcblx0XG5cdCAgdmFyIE1hcFByb3RvdHlwZSA9IE1hcC5wcm90b3R5cGU7XG5cdCAgTWFwUHJvdG90eXBlW0lTX01BUF9TRU5USU5FTF0gPSB0cnVlO1xuXHQgIE1hcFByb3RvdHlwZVtERUxFVEVdID0gTWFwUHJvdG90eXBlLnJlbW92ZTtcblx0ICBNYXBQcm90b3R5cGUucmVtb3ZlSW4gPSBNYXBQcm90b3R5cGUuZGVsZXRlSW47XG5cdFxuXHRcblx0ICAvLyAjcHJhZ21hIFRyaWUgTm9kZXNcblx0XG5cdFxuXHRcblx0ICAgIGZ1bmN0aW9uIEFycmF5TWFwTm9kZShvd25lcklELCBlbnRyaWVzKSB7XG5cdCAgICAgIHRoaXMub3duZXJJRCA9IG93bmVySUQ7XG5cdCAgICAgIHRoaXMuZW50cmllcyA9IGVudHJpZXM7XG5cdCAgICB9XG5cdFxuXHQgICAgQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuXHQgICAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcblx0ICAgICAgZm9yICh2YXIgaWkgPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWkgPCBsZW47IGlpKyspIHtcblx0ICAgICAgICBpZiAoaXMoa2V5LCBlbnRyaWVzW2lpXVswXSkpIHtcblx0ICAgICAgICAgIHJldHVybiBlbnRyaWVzW2lpXVsxXTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuXHQgICAgfTtcblx0XG5cdCAgICBBcnJheU1hcE5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuXHQgICAgICB2YXIgcmVtb3ZlZCA9IHZhbHVlID09PSBOT1RfU0VUO1xuXHRcblx0ICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXM7XG5cdCAgICAgIHZhciBpZHggPSAwO1xuXHQgICAgICBmb3IgKHZhciBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuXHQgICAgICAgIGlmIChpcyhrZXksIGVudHJpZXNbaWR4XVswXSkpIHtcblx0ICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICB2YXIgZXhpc3RzID0gaWR4IDwgbGVuO1xuXHRcblx0ICAgICAgaWYgKGV4aXN0cyA/IGVudHJpZXNbaWR4XVsxXSA9PT0gdmFsdWUgOiByZW1vdmVkKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIFNldFJlZihkaWRBbHRlcik7XG5cdCAgICAgIChyZW1vdmVkIHx8ICFleGlzdHMpICYmIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcblx0XG5cdCAgICAgIGlmIChyZW1vdmVkICYmIGVudHJpZXMubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgICAgcmV0dXJuOyAvLyB1bmRlZmluZWRcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKCFleGlzdHMgJiYgIXJlbW92ZWQgJiYgZW50cmllcy5sZW5ndGggPj0gTUFYX0FSUkFZX01BUF9TSVpFKSB7XG5cdCAgICAgICAgcmV0dXJuIGNyZWF0ZU5vZGVzKG93bmVySUQsIGVudHJpZXMsIGtleSwgdmFsdWUpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuXHQgICAgICB2YXIgbmV3RW50cmllcyA9IGlzRWRpdGFibGUgPyBlbnRyaWVzIDogYXJyQ29weShlbnRyaWVzKTtcblx0XG5cdCAgICAgIGlmIChleGlzdHMpIHtcblx0ICAgICAgICBpZiAocmVtb3ZlZCkge1xuXHQgICAgICAgICAgaWR4ID09PSBsZW4gLSAxID8gbmV3RW50cmllcy5wb3AoKSA6IChuZXdFbnRyaWVzW2lkeF0gPSBuZXdFbnRyaWVzLnBvcCgpKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgbmV3RW50cmllc1tpZHhdID0gW2tleSwgdmFsdWVdO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBuZXdFbnRyaWVzLnB1c2goW2tleSwgdmFsdWVdKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKGlzRWRpdGFibGUpIHtcblx0ICAgICAgICB0aGlzLmVudHJpZXMgPSBuZXdFbnRyaWVzO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gbmV3IEFycmF5TWFwTm9kZShvd25lcklELCBuZXdFbnRyaWVzKTtcblx0ICAgIH07XG5cdFxuXHRcblx0XG5cdFxuXHQgICAgZnVuY3Rpb24gQml0bWFwSW5kZXhlZE5vZGUob3duZXJJRCwgYml0bWFwLCBub2Rlcykge1xuXHQgICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuXHQgICAgICB0aGlzLmJpdG1hcCA9IGJpdG1hcDtcblx0ICAgICAgdGhpcy5ub2RlcyA9IG5vZGVzO1xuXHQgICAgfVxuXHRcblx0ICAgIEJpdG1hcEluZGV4ZWROb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuXHQgICAgICBpZiAoa2V5SGFzaCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAga2V5SGFzaCA9IGhhc2goa2V5KTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgYml0ID0gKDEgPDwgKChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLKSk7XG5cdCAgICAgIHZhciBiaXRtYXAgPSB0aGlzLmJpdG1hcDtcblx0ICAgICAgcmV0dXJuIChiaXRtYXAgJiBiaXQpID09PSAwID8gbm90U2V0VmFsdWUgOlxuXHQgICAgICAgIHRoaXMubm9kZXNbcG9wQ291bnQoYml0bWFwICYgKGJpdCAtIDEpKV0uZ2V0KHNoaWZ0ICsgU0hJRlQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpO1xuXHQgICAgfTtcblx0XG5cdCAgICBCaXRtYXBJbmRleGVkTm9kZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24ob3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKSB7XG5cdCAgICAgIGlmIChrZXlIYXNoID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBrZXlIYXNoRnJhZyA9IChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuXHQgICAgICB2YXIgYml0ID0gMSA8PCBrZXlIYXNoRnJhZztcblx0ICAgICAgdmFyIGJpdG1hcCA9IHRoaXMuYml0bWFwO1xuXHQgICAgICB2YXIgZXhpc3RzID0gKGJpdG1hcCAmIGJpdCkgIT09IDA7XG5cdFxuXHQgICAgICBpZiAoIWV4aXN0cyAmJiB2YWx1ZSA9PT0gTk9UX1NFVCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgaWR4ID0gcG9wQ291bnQoYml0bWFwICYgKGJpdCAtIDEpKTtcblx0ICAgICAgdmFyIG5vZGVzID0gdGhpcy5ub2Rlcztcblx0ICAgICAgdmFyIG5vZGUgPSBleGlzdHMgPyBub2Rlc1tpZHhdIDogdW5kZWZpbmVkO1xuXHQgICAgICB2YXIgbmV3Tm9kZSA9IHVwZGF0ZU5vZGUobm9kZSwgb3duZXJJRCwgc2hpZnQgKyBTSElGVCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpO1xuXHRcblx0ICAgICAgaWYgKG5ld05vZGUgPT09IG5vZGUpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKCFleGlzdHMgJiYgbmV3Tm9kZSAmJiBub2Rlcy5sZW5ndGggPj0gTUFYX0JJVE1BUF9JTkRFWEVEX1NJWkUpIHtcblx0ICAgICAgICByZXR1cm4gZXhwYW5kTm9kZXMob3duZXJJRCwgbm9kZXMsIGJpdG1hcCwga2V5SGFzaEZyYWcsIG5ld05vZGUpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoZXhpc3RzICYmICFuZXdOb2RlICYmIG5vZGVzLmxlbmd0aCA9PT0gMiAmJiBpc0xlYWZOb2RlKG5vZGVzW2lkeCBeIDFdKSkge1xuXHQgICAgICAgIHJldHVybiBub2Rlc1tpZHggXiAxXTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKGV4aXN0cyAmJiBuZXdOb2RlICYmIG5vZGVzLmxlbmd0aCA9PT0gMSAmJiBpc0xlYWZOb2RlKG5ld05vZGUpKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ld05vZGU7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBpc0VkaXRhYmxlID0gb3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQ7XG5cdCAgICAgIHZhciBuZXdCaXRtYXAgPSBleGlzdHMgPyBuZXdOb2RlID8gYml0bWFwIDogYml0bWFwIF4gYml0IDogYml0bWFwIHwgYml0O1xuXHQgICAgICB2YXIgbmV3Tm9kZXMgPSBleGlzdHMgPyBuZXdOb2RlID9cblx0ICAgICAgICBzZXRJbihub2RlcywgaWR4LCBuZXdOb2RlLCBpc0VkaXRhYmxlKSA6XG5cdCAgICAgICAgc3BsaWNlT3V0KG5vZGVzLCBpZHgsIGlzRWRpdGFibGUpIDpcblx0ICAgICAgICBzcGxpY2VJbihub2RlcywgaWR4LCBuZXdOb2RlLCBpc0VkaXRhYmxlKTtcblx0XG5cdCAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG5cdCAgICAgICAgdGhpcy5iaXRtYXAgPSBuZXdCaXRtYXA7XG5cdCAgICAgICAgdGhpcy5ub2RlcyA9IG5ld05vZGVzO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gbmV3IEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsIG5ld0JpdG1hcCwgbmV3Tm9kZXMpO1xuXHQgICAgfTtcblx0XG5cdFxuXHRcblx0XG5cdCAgICBmdW5jdGlvbiBIYXNoQXJyYXlNYXBOb2RlKG93bmVySUQsIGNvdW50LCBub2Rlcykge1xuXHQgICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuXHQgICAgICB0aGlzLmNvdW50ID0gY291bnQ7XG5cdCAgICAgIHRoaXMubm9kZXMgPSBub2Rlcztcblx0ICAgIH1cblx0XG5cdCAgICBIYXNoQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuXHQgICAgICBpZiAoa2V5SGFzaCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAga2V5SGFzaCA9IGhhc2goa2V5KTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgaWR4ID0gKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG5cdCAgICAgIHZhciBub2RlID0gdGhpcy5ub2Rlc1tpZHhdO1xuXHQgICAgICByZXR1cm4gbm9kZSA/IG5vZGUuZ2V0KHNoaWZ0ICsgU0hJRlQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIDogbm90U2V0VmFsdWU7XG5cdCAgICB9O1xuXHRcblx0ICAgIEhhc2hBcnJheU1hcE5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuXHQgICAgICBpZiAoa2V5SGFzaCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAga2V5SGFzaCA9IGhhc2goa2V5KTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgaWR4ID0gKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG5cdCAgICAgIHZhciByZW1vdmVkID0gdmFsdWUgPT09IE5PVF9TRVQ7XG5cdCAgICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XG5cdCAgICAgIHZhciBub2RlID0gbm9kZXNbaWR4XTtcblx0XG5cdCAgICAgIGlmIChyZW1vdmVkICYmICFub2RlKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBuZXdOb2RlID0gdXBkYXRlTm9kZShub2RlLCBvd25lcklELCBzaGlmdCArIFNISUZULCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcik7XG5cdCAgICAgIGlmIChuZXdOb2RlID09PSBub2RlKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBuZXdDb3VudCA9IHRoaXMuY291bnQ7XG5cdCAgICAgIGlmICghbm9kZSkge1xuXHQgICAgICAgIG5ld0NvdW50Kys7XG5cdCAgICAgIH0gZWxzZSBpZiAoIW5ld05vZGUpIHtcblx0ICAgICAgICBuZXdDb3VudC0tO1xuXHQgICAgICAgIGlmIChuZXdDb3VudCA8IE1JTl9IQVNIX0FSUkFZX01BUF9TSVpFKSB7XG5cdCAgICAgICAgICByZXR1cm4gcGFja05vZGVzKG93bmVySUQsIG5vZGVzLCBuZXdDb3VudCwgaWR4KTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBpc0VkaXRhYmxlID0gb3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQ7XG5cdCAgICAgIHZhciBuZXdOb2RlcyA9IHNldEluKG5vZGVzLCBpZHgsIG5ld05vZGUsIGlzRWRpdGFibGUpO1xuXHRcblx0ICAgICAgaWYgKGlzRWRpdGFibGUpIHtcblx0ICAgICAgICB0aGlzLmNvdW50ID0gbmV3Q291bnQ7XG5cdCAgICAgICAgdGhpcy5ub2RlcyA9IG5ld05vZGVzO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gbmV3IEhhc2hBcnJheU1hcE5vZGUob3duZXJJRCwgbmV3Q291bnQsIG5ld05vZGVzKTtcblx0ICAgIH07XG5cdFxuXHRcblx0XG5cdFxuXHQgICAgZnVuY3Rpb24gSGFzaENvbGxpc2lvbk5vZGUob3duZXJJRCwga2V5SGFzaCwgZW50cmllcykge1xuXHQgICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuXHQgICAgICB0aGlzLmtleUhhc2ggPSBrZXlIYXNoO1xuXHQgICAgICB0aGlzLmVudHJpZXMgPSBlbnRyaWVzO1xuXHQgICAgfVxuXHRcblx0ICAgIEhhc2hDb2xsaXNpb25Ob2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuXHQgICAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcblx0ICAgICAgZm9yICh2YXIgaWkgPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWkgPCBsZW47IGlpKyspIHtcblx0ICAgICAgICBpZiAoaXMoa2V5LCBlbnRyaWVzW2lpXVswXSkpIHtcblx0ICAgICAgICAgIHJldHVybiBlbnRyaWVzW2lpXVsxXTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuXHQgICAgfTtcblx0XG5cdCAgICBIYXNoQ29sbGlzaW9uTm9kZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24ob3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKSB7XG5cdCAgICAgIGlmIChrZXlIYXNoID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgcmVtb3ZlZCA9IHZhbHVlID09PSBOT1RfU0VUO1xuXHRcblx0ICAgICAgaWYgKGtleUhhc2ggIT09IHRoaXMua2V5SGFzaCkge1xuXHQgICAgICAgIGlmIChyZW1vdmVkKSB7XG5cdCAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9XG5cdCAgICAgICAgU2V0UmVmKGRpZEFsdGVyKTtcblx0ICAgICAgICBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG5cdCAgICAgICAgcmV0dXJuIG1lcmdlSW50b05vZGUodGhpcywgb3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIFtrZXksIHZhbHVlXSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuXHQgICAgICB2YXIgaWR4ID0gMDtcblx0ICAgICAgZm9yICh2YXIgbGVuID0gZW50cmllcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcblx0ICAgICAgICBpZiAoaXMoa2V5LCBlbnRyaWVzW2lkeF1bMF0pKSB7XG5cdCAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGV4aXN0cyA9IGlkeCA8IGxlbjtcblx0XG5cdCAgICAgIGlmIChleGlzdHMgPyBlbnRyaWVzW2lkeF1bMV0gPT09IHZhbHVlIDogcmVtb3ZlZCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuXHQgICAgICAocmVtb3ZlZCB8fCAhZXhpc3RzKSAmJiBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG5cdFxuXHQgICAgICBpZiAocmVtb3ZlZCAmJiBsZW4gPT09IDIpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IFZhbHVlTm9kZShvd25lcklELCB0aGlzLmtleUhhc2gsIGVudHJpZXNbaWR4IF4gMV0pO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuXHQgICAgICB2YXIgbmV3RW50cmllcyA9IGlzRWRpdGFibGUgPyBlbnRyaWVzIDogYXJyQ29weShlbnRyaWVzKTtcblx0XG5cdCAgICAgIGlmIChleGlzdHMpIHtcblx0ICAgICAgICBpZiAocmVtb3ZlZCkge1xuXHQgICAgICAgICAgaWR4ID09PSBsZW4gLSAxID8gbmV3RW50cmllcy5wb3AoKSA6IChuZXdFbnRyaWVzW2lkeF0gPSBuZXdFbnRyaWVzLnBvcCgpKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgbmV3RW50cmllc1tpZHhdID0gW2tleSwgdmFsdWVdO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBuZXdFbnRyaWVzLnB1c2goW2tleSwgdmFsdWVdKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKGlzRWRpdGFibGUpIHtcblx0ICAgICAgICB0aGlzLmVudHJpZXMgPSBuZXdFbnRyaWVzO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gbmV3IEhhc2hDb2xsaXNpb25Ob2RlKG93bmVySUQsIHRoaXMua2V5SGFzaCwgbmV3RW50cmllcyk7XG5cdCAgICB9O1xuXHRcblx0XG5cdFxuXHRcblx0ICAgIGZ1bmN0aW9uIFZhbHVlTm9kZShvd25lcklELCBrZXlIYXNoLCBlbnRyeSkge1xuXHQgICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuXHQgICAgICB0aGlzLmtleUhhc2ggPSBrZXlIYXNoO1xuXHQgICAgICB0aGlzLmVudHJ5ID0gZW50cnk7XG5cdCAgICB9XG5cdFxuXHQgICAgVmFsdWVOb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuXHQgICAgICByZXR1cm4gaXMoa2V5LCB0aGlzLmVudHJ5WzBdKSA/IHRoaXMuZW50cnlbMV0gOiBub3RTZXRWYWx1ZTtcblx0ICAgIH07XG5cdFxuXHQgICAgVmFsdWVOb2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcblx0ICAgICAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcblx0ICAgICAgdmFyIGtleU1hdGNoID0gaXMoa2V5LCB0aGlzLmVudHJ5WzBdKTtcblx0ICAgICAgaWYgKGtleU1hdGNoID8gdmFsdWUgPT09IHRoaXMuZW50cnlbMV0gOiByZW1vdmVkKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIFNldFJlZihkaWRBbHRlcik7XG5cdFxuXHQgICAgICBpZiAocmVtb3ZlZCkge1xuXHQgICAgICAgIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcblx0ICAgICAgICByZXR1cm47IC8vIHVuZGVmaW5lZFxuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoa2V5TWF0Y2gpIHtcblx0ICAgICAgICBpZiAob3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQpIHtcblx0ICAgICAgICAgIHRoaXMuZW50cnlbMV0gPSB2YWx1ZTtcblx0ICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbmV3IFZhbHVlTm9kZShvd25lcklELCB0aGlzLmtleUhhc2gsIFtrZXksIHZhbHVlXSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcblx0ICAgICAgcmV0dXJuIG1lcmdlSW50b05vZGUodGhpcywgb3duZXJJRCwgc2hpZnQsIGhhc2goa2V5KSwgW2tleSwgdmFsdWVdKTtcblx0ICAgIH07XG5cdFxuXHRcblx0XG5cdCAgLy8gI3ByYWdtYSBJdGVyYXRvcnNcblx0XG5cdCAgQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5pdGVyYXRlID1cblx0ICBIYXNoQ29sbGlzaW9uTm9kZS5wcm90b3R5cGUuaXRlcmF0ZSA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge1xuXHQgICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXM7XG5cdCAgICBmb3IgKHZhciBpaSA9IDAsIG1heEluZGV4ID0gZW50cmllcy5sZW5ndGggLSAxOyBpaSA8PSBtYXhJbmRleDsgaWkrKykge1xuXHQgICAgICBpZiAoZm4oZW50cmllc1tyZXZlcnNlID8gbWF4SW5kZXggLSBpaSA6IGlpXSkgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBCaXRtYXBJbmRleGVkTm9kZS5wcm90b3R5cGUuaXRlcmF0ZSA9XG5cdCAgSGFzaEFycmF5TWFwTm9kZS5wcm90b3R5cGUuaXRlcmF0ZSA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge1xuXHQgICAgdmFyIG5vZGVzID0gdGhpcy5ub2Rlcztcblx0ICAgIGZvciAodmFyIGlpID0gMCwgbWF4SW5kZXggPSBub2Rlcy5sZW5ndGggLSAxOyBpaSA8PSBtYXhJbmRleDsgaWkrKykge1xuXHQgICAgICB2YXIgbm9kZSA9IG5vZGVzW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldO1xuXHQgICAgICBpZiAobm9kZSAmJiBub2RlLml0ZXJhdGUoZm4sIHJldmVyc2UpID09PSBmYWxzZSkge1xuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgVmFsdWVOb2RlLnByb3RvdHlwZS5pdGVyYXRlID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7XG5cdCAgICByZXR1cm4gZm4odGhpcy5lbnRyeSk7XG5cdCAgfVxuXHRcblx0ICBjcmVhdGVDbGFzcyhNYXBJdGVyYXRvciwgSXRlcmF0b3IpO1xuXHRcblx0ICAgIGZ1bmN0aW9uIE1hcEl0ZXJhdG9yKG1hcCwgdHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICB0aGlzLl90eXBlID0gdHlwZTtcblx0ICAgICAgdGhpcy5fcmV2ZXJzZSA9IHJldmVyc2U7XG5cdCAgICAgIHRoaXMuX3N0YWNrID0gbWFwLl9yb290ICYmIG1hcEl0ZXJhdG9yRnJhbWUobWFwLl9yb290KTtcblx0ICAgIH1cblx0XG5cdCAgICBNYXBJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgdHlwZSA9IHRoaXMuX3R5cGU7XG5cdCAgICAgIHZhciBzdGFjayA9IHRoaXMuX3N0YWNrO1xuXHQgICAgICB3aGlsZSAoc3RhY2spIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHN0YWNrLm5vZGU7XG5cdCAgICAgICAgdmFyIGluZGV4ID0gc3RhY2suaW5kZXgrKztcblx0ICAgICAgICB2YXIgbWF4SW5kZXg7XG5cdCAgICAgICAgaWYgKG5vZGUuZW50cnkpIHtcblx0ICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuXHQgICAgICAgICAgICByZXR1cm4gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBub2RlLmVudHJ5KTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2UgaWYgKG5vZGUuZW50cmllcykge1xuXHQgICAgICAgICAgbWF4SW5kZXggPSBub2RlLmVudHJpZXMubGVuZ3RoIC0gMTtcblx0ICAgICAgICAgIGlmIChpbmRleCA8PSBtYXhJbmRleCkge1xuXHQgICAgICAgICAgICByZXR1cm4gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBub2RlLmVudHJpZXNbdGhpcy5fcmV2ZXJzZSA/IG1heEluZGV4IC0gaW5kZXggOiBpbmRleF0pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBtYXhJbmRleCA9IG5vZGUubm9kZXMubGVuZ3RoIC0gMTtcblx0ICAgICAgICAgIGlmIChpbmRleCA8PSBtYXhJbmRleCkge1xuXHQgICAgICAgICAgICB2YXIgc3ViTm9kZSA9IG5vZGUubm9kZXNbdGhpcy5fcmV2ZXJzZSA/IG1heEluZGV4IC0gaW5kZXggOiBpbmRleF07XG5cdCAgICAgICAgICAgIGlmIChzdWJOb2RlKSB7XG5cdCAgICAgICAgICAgICAgaWYgKHN1Yk5vZGUuZW50cnkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBtYXBJdGVyYXRvclZhbHVlKHR5cGUsIHN1Yk5vZGUuZW50cnkpO1xuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICBzdGFjayA9IHRoaXMuX3N0YWNrID0gbWFwSXRlcmF0b3JGcmFtZShzdWJOb2RlLCBzdGFjayk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHN0YWNrID0gdGhpcy5fc3RhY2sgPSB0aGlzLl9zdGFjay5fX3ByZXY7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuXHQgICAgfTtcblx0XG5cdFxuXHQgIGZ1bmN0aW9uIG1hcEl0ZXJhdG9yVmFsdWUodHlwZSwgZW50cnkpIHtcblx0ICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGVudHJ5WzBdLCBlbnRyeVsxXSk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBtYXBJdGVyYXRvckZyYW1lKG5vZGUsIHByZXYpIHtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIG5vZGU6IG5vZGUsXG5cdCAgICAgIGluZGV4OiAwLFxuXHQgICAgICBfX3ByZXY6IHByZXZcblx0ICAgIH07XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBtYWtlTWFwKHNpemUsIHJvb3QsIG93bmVySUQsIGhhc2gpIHtcblx0ICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKE1hcFByb3RvdHlwZSk7XG5cdCAgICBtYXAuc2l6ZSA9IHNpemU7XG5cdCAgICBtYXAuX3Jvb3QgPSByb290O1xuXHQgICAgbWFwLl9fb3duZXJJRCA9IG93bmVySUQ7XG5cdCAgICBtYXAuX19oYXNoID0gaGFzaDtcblx0ICAgIG1hcC5fX2FsdGVyZWQgPSBmYWxzZTtcblx0ICAgIHJldHVybiBtYXA7XG5cdCAgfVxuXHRcblx0ICB2YXIgRU1QVFlfTUFQO1xuXHQgIGZ1bmN0aW9uIGVtcHR5TWFwKCkge1xuXHQgICAgcmV0dXJuIEVNUFRZX01BUCB8fCAoRU1QVFlfTUFQID0gbWFrZU1hcCgwKSk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiB1cGRhdGVNYXAobWFwLCBrLCB2KSB7XG5cdCAgICB2YXIgbmV3Um9vdDtcblx0ICAgIHZhciBuZXdTaXplO1xuXHQgICAgaWYgKCFtYXAuX3Jvb3QpIHtcblx0ICAgICAgaWYgKHYgPT09IE5PVF9TRVQpIHtcblx0ICAgICAgICByZXR1cm4gbWFwO1xuXHQgICAgICB9XG5cdCAgICAgIG5ld1NpemUgPSAxO1xuXHQgICAgICBuZXdSb290ID0gbmV3IEFycmF5TWFwTm9kZShtYXAuX19vd25lcklELCBbW2ssIHZdXSk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB2YXIgZGlkQ2hhbmdlU2l6ZSA9IE1ha2VSZWYoQ0hBTkdFX0xFTkdUSCk7XG5cdCAgICAgIHZhciBkaWRBbHRlciA9IE1ha2VSZWYoRElEX0FMVEVSKTtcblx0ICAgICAgbmV3Um9vdCA9IHVwZGF0ZU5vZGUobWFwLl9yb290LCBtYXAuX19vd25lcklELCAwLCB1bmRlZmluZWQsIGssIHYsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKTtcblx0ICAgICAgaWYgKCFkaWRBbHRlci52YWx1ZSkge1xuXHQgICAgICAgIHJldHVybiBtYXA7XG5cdCAgICAgIH1cblx0ICAgICAgbmV3U2l6ZSA9IG1hcC5zaXplICsgKGRpZENoYW5nZVNpemUudmFsdWUgPyB2ID09PSBOT1RfU0VUID8gLTEgOiAxIDogMCk7XG5cdCAgICB9XG5cdCAgICBpZiAobWFwLl9fb3duZXJJRCkge1xuXHQgICAgICBtYXAuc2l6ZSA9IG5ld1NpemU7XG5cdCAgICAgIG1hcC5fcm9vdCA9IG5ld1Jvb3Q7XG5cdCAgICAgIG1hcC5fX2hhc2ggPSB1bmRlZmluZWQ7XG5cdCAgICAgIG1hcC5fX2FsdGVyZWQgPSB0cnVlO1xuXHQgICAgICByZXR1cm4gbWFwO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5ld1Jvb3QgPyBtYWtlTWFwKG5ld1NpemUsIG5ld1Jvb3QpIDogZW1wdHlNYXAoKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHVwZGF0ZU5vZGUobm9kZSwgb3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKSB7XG5cdCAgICBpZiAoIW5vZGUpIHtcblx0ICAgICAgaWYgKHZhbHVlID09PSBOT1RfU0VUKSB7XG5cdCAgICAgICAgcmV0dXJuIG5vZGU7XG5cdCAgICAgIH1cblx0ICAgICAgU2V0UmVmKGRpZEFsdGVyKTtcblx0ICAgICAgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuXHQgICAgICByZXR1cm4gbmV3IFZhbHVlTm9kZShvd25lcklELCBrZXlIYXNoLCBba2V5LCB2YWx1ZV0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5vZGUudXBkYXRlKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcik7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBpc0xlYWZOb2RlKG5vZGUpIHtcblx0ICAgIHJldHVybiBub2RlLmNvbnN0cnVjdG9yID09PSBWYWx1ZU5vZGUgfHwgbm9kZS5jb25zdHJ1Y3RvciA9PT0gSGFzaENvbGxpc2lvbk5vZGU7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBtZXJnZUludG9Ob2RlKG5vZGUsIG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBlbnRyeSkge1xuXHQgICAgaWYgKG5vZGUua2V5SGFzaCA9PT0ga2V5SGFzaCkge1xuXHQgICAgICByZXR1cm4gbmV3IEhhc2hDb2xsaXNpb25Ob2RlKG93bmVySUQsIGtleUhhc2gsIFtub2RlLmVudHJ5LCBlbnRyeV0pO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBpZHgxID0gKHNoaWZ0ID09PSAwID8gbm9kZS5rZXlIYXNoIDogbm9kZS5rZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuXHQgICAgdmFyIGlkeDIgPSAoc2hpZnQgPT09IDAgPyBrZXlIYXNoIDoga2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSztcblx0XG5cdCAgICB2YXIgbmV3Tm9kZTtcblx0ICAgIHZhciBub2RlcyA9IGlkeDEgPT09IGlkeDIgP1xuXHQgICAgICBbbWVyZ2VJbnRvTm9kZShub2RlLCBvd25lcklELCBzaGlmdCArIFNISUZULCBrZXlIYXNoLCBlbnRyeSldIDpcblx0ICAgICAgKChuZXdOb2RlID0gbmV3IFZhbHVlTm9kZShvd25lcklELCBrZXlIYXNoLCBlbnRyeSkpLCBpZHgxIDwgaWR4MiA/IFtub2RlLCBuZXdOb2RlXSA6IFtuZXdOb2RlLCBub2RlXSk7XG5cdFxuXHQgICAgcmV0dXJuIG5ldyBCaXRtYXBJbmRleGVkTm9kZShvd25lcklELCAoMSA8PCBpZHgxKSB8ICgxIDw8IGlkeDIpLCBub2Rlcyk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBjcmVhdGVOb2Rlcyhvd25lcklELCBlbnRyaWVzLCBrZXksIHZhbHVlKSB7XG5cdCAgICBpZiAoIW93bmVySUQpIHtcblx0ICAgICAgb3duZXJJRCA9IG5ldyBPd25lcklEKCk7XG5cdCAgICB9XG5cdCAgICB2YXIgbm9kZSA9IG5ldyBWYWx1ZU5vZGUob3duZXJJRCwgaGFzaChrZXkpLCBba2V5LCB2YWx1ZV0pO1xuXHQgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGVudHJpZXMubGVuZ3RoOyBpaSsrKSB7XG5cdCAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaWldO1xuXHQgICAgICBub2RlID0gbm9kZS51cGRhdGUob3duZXJJRCwgMCwgdW5kZWZpbmVkLCBlbnRyeVswXSwgZW50cnlbMV0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5vZGU7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBwYWNrTm9kZXMob3duZXJJRCwgbm9kZXMsIGNvdW50LCBleGNsdWRpbmcpIHtcblx0ICAgIHZhciBiaXRtYXAgPSAwO1xuXHQgICAgdmFyIHBhY2tlZElJID0gMDtcblx0ICAgIHZhciBwYWNrZWROb2RlcyA9IG5ldyBBcnJheShjb3VudCk7XG5cdCAgICBmb3IgKHZhciBpaSA9IDAsIGJpdCA9IDEsIGxlbiA9IG5vZGVzLmxlbmd0aDsgaWkgPCBsZW47IGlpKyssIGJpdCA8PD0gMSkge1xuXHQgICAgICB2YXIgbm9kZSA9IG5vZGVzW2lpXTtcblx0ICAgICAgaWYgKG5vZGUgIT09IHVuZGVmaW5lZCAmJiBpaSAhPT0gZXhjbHVkaW5nKSB7XG5cdCAgICAgICAgYml0bWFwIHw9IGJpdDtcblx0ICAgICAgICBwYWNrZWROb2Rlc1twYWNrZWRJSSsrXSA9IG5vZGU7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBuZXcgQml0bWFwSW5kZXhlZE5vZGUob3duZXJJRCwgYml0bWFwLCBwYWNrZWROb2Rlcyk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBleHBhbmROb2Rlcyhvd25lcklELCBub2RlcywgYml0bWFwLCBpbmNsdWRpbmcsIG5vZGUpIHtcblx0ICAgIHZhciBjb3VudCA9IDA7XG5cdCAgICB2YXIgZXhwYW5kZWROb2RlcyA9IG5ldyBBcnJheShTSVpFKTtcblx0ICAgIGZvciAodmFyIGlpID0gMDsgYml0bWFwICE9PSAwOyBpaSsrLCBiaXRtYXAgPj4+PSAxKSB7XG5cdCAgICAgIGV4cGFuZGVkTm9kZXNbaWldID0gYml0bWFwICYgMSA/IG5vZGVzW2NvdW50KytdIDogdW5kZWZpbmVkO1xuXHQgICAgfVxuXHQgICAgZXhwYW5kZWROb2Rlc1tpbmNsdWRpbmddID0gbm9kZTtcblx0ICAgIHJldHVybiBuZXcgSGFzaEFycmF5TWFwTm9kZShvd25lcklELCBjb3VudCArIDEsIGV4cGFuZGVkTm9kZXMpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gbWVyZ2VJbnRvTWFwV2l0aChtYXAsIG1lcmdlciwgaXRlcmFibGVzKSB7XG5cdCAgICB2YXIgaXRlcnMgPSBbXTtcblx0ICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBpdGVyYWJsZXMubGVuZ3RoOyBpaSsrKSB7XG5cdCAgICAgIHZhciB2YWx1ZSA9IGl0ZXJhYmxlc1tpaV07XG5cdCAgICAgIHZhciBpdGVyID0gS2V5ZWRJdGVyYWJsZSh2YWx1ZSk7XG5cdCAgICAgIGlmICghaXNJdGVyYWJsZSh2YWx1ZSkpIHtcblx0ICAgICAgICBpdGVyID0gaXRlci5tYXAoZnVuY3Rpb24odiApIHtyZXR1cm4gZnJvbUpTKHYpfSk7XG5cdCAgICAgIH1cblx0ICAgICAgaXRlcnMucHVzaChpdGVyKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBtZXJnZUludG9Db2xsZWN0aW9uV2l0aChtYXAsIG1lcmdlciwgaXRlcnMpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gZGVlcE1lcmdlcihtZXJnZXIpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbihleGlzdGluZywgdmFsdWUpIFxuXHQgICAgICB7cmV0dXJuIGV4aXN0aW5nICYmIGV4aXN0aW5nLm1lcmdlRGVlcFdpdGggJiYgaXNJdGVyYWJsZSh2YWx1ZSkgP1xuXHQgICAgICAgIGV4aXN0aW5nLm1lcmdlRGVlcFdpdGgobWVyZ2VyLCB2YWx1ZSkgOlxuXHQgICAgICAgIG1lcmdlciA/IG1lcmdlcihleGlzdGluZywgdmFsdWUpIDogdmFsdWV9O1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gbWVyZ2VJbnRvQ29sbGVjdGlvbldpdGgoY29sbGVjdGlvbiwgbWVyZ2VyLCBpdGVycykge1xuXHQgICAgaXRlcnMgPSBpdGVycy5maWx0ZXIoZnVuY3Rpb24oeCApIHtyZXR1cm4geC5zaXplICE9PSAwfSk7XG5cdCAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuXHQgICAgfVxuXHQgICAgaWYgKGNvbGxlY3Rpb24uc2l6ZSA9PT0gMCAmJiBpdGVycy5sZW5ndGggPT09IDEpIHtcblx0ICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uY29uc3RydWN0b3IoaXRlcnNbMF0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGNvbGxlY3Rpb24ud2l0aE11dGF0aW9ucyhmdW5jdGlvbihjb2xsZWN0aW9uICkge1xuXHQgICAgICB2YXIgbWVyZ2VJbnRvTWFwID0gbWVyZ2VyID9cblx0ICAgICAgICBmdW5jdGlvbih2YWx1ZSwga2V5KSAge1xuXHQgICAgICAgICAgY29sbGVjdGlvbi51cGRhdGUoa2V5LCBOT1RfU0VULCBmdW5jdGlvbihleGlzdGluZyApXG5cdCAgICAgICAgICAgIHtyZXR1cm4gZXhpc3RpbmcgPT09IE5PVF9TRVQgPyB2YWx1ZSA6IG1lcmdlcihleGlzdGluZywgdmFsdWUpfVxuXHQgICAgICAgICAgKTtcblx0ICAgICAgICB9IDpcblx0ICAgICAgICBmdW5jdGlvbih2YWx1ZSwga2V5KSAge1xuXHQgICAgICAgICAgY29sbGVjdGlvbi5zZXQoa2V5LCB2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaXRlcnMubGVuZ3RoOyBpaSsrKSB7XG5cdCAgICAgICAgaXRlcnNbaWldLmZvckVhY2gobWVyZ2VJbnRvTWFwKTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiB1cGRhdGVJbkRlZXBNYXAoZXhpc3RpbmcsIGtleVBhdGhJdGVyLCBub3RTZXRWYWx1ZSwgdXBkYXRlcikge1xuXHQgICAgdmFyIGlzTm90U2V0ID0gZXhpc3RpbmcgPT09IE5PVF9TRVQ7XG5cdCAgICB2YXIgc3RlcCA9IGtleVBhdGhJdGVyLm5leHQoKTtcblx0ICAgIGlmIChzdGVwLmRvbmUpIHtcblx0ICAgICAgdmFyIGV4aXN0aW5nVmFsdWUgPSBpc05vdFNldCA/IG5vdFNldFZhbHVlIDogZXhpc3Rpbmc7XG5cdCAgICAgIHZhciBuZXdWYWx1ZSA9IHVwZGF0ZXIoZXhpc3RpbmdWYWx1ZSk7XG5cdCAgICAgIHJldHVybiBuZXdWYWx1ZSA9PT0gZXhpc3RpbmdWYWx1ZSA/IGV4aXN0aW5nIDogbmV3VmFsdWU7XG5cdCAgICB9XG5cdCAgICBpbnZhcmlhbnQoXG5cdCAgICAgIGlzTm90U2V0IHx8IChleGlzdGluZyAmJiBleGlzdGluZy5zZXQpLFxuXHQgICAgICAnaW52YWxpZCBrZXlQYXRoJ1xuXHQgICAgKTtcblx0ICAgIHZhciBrZXkgPSBzdGVwLnZhbHVlO1xuXHQgICAgdmFyIG5leHRFeGlzdGluZyA9IGlzTm90U2V0ID8gTk9UX1NFVCA6IGV4aXN0aW5nLmdldChrZXksIE5PVF9TRVQpO1xuXHQgICAgdmFyIG5leHRVcGRhdGVkID0gdXBkYXRlSW5EZWVwTWFwKFxuXHQgICAgICBuZXh0RXhpc3RpbmcsXG5cdCAgICAgIGtleVBhdGhJdGVyLFxuXHQgICAgICBub3RTZXRWYWx1ZSxcblx0ICAgICAgdXBkYXRlclxuXHQgICAgKTtcblx0ICAgIHJldHVybiBuZXh0VXBkYXRlZCA9PT0gbmV4dEV4aXN0aW5nID8gZXhpc3RpbmcgOlxuXHQgICAgICBuZXh0VXBkYXRlZCA9PT0gTk9UX1NFVCA/IGV4aXN0aW5nLnJlbW92ZShrZXkpIDpcblx0ICAgICAgKGlzTm90U2V0ID8gZW1wdHlNYXAoKSA6IGV4aXN0aW5nKS5zZXQoa2V5LCBuZXh0VXBkYXRlZCk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBwb3BDb3VudCh4KSB7XG5cdCAgICB4ID0geCAtICgoeCA+PiAxKSAmIDB4NTU1NTU1NTUpO1xuXHQgICAgeCA9ICh4ICYgMHgzMzMzMzMzMykgKyAoKHggPj4gMikgJiAweDMzMzMzMzMzKTtcblx0ICAgIHggPSAoeCArICh4ID4+IDQpKSAmIDB4MGYwZjBmMGY7XG5cdCAgICB4ID0geCArICh4ID4+IDgpO1xuXHQgICAgeCA9IHggKyAoeCA+PiAxNik7XG5cdCAgICByZXR1cm4geCAmIDB4N2Y7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBzZXRJbihhcnJheSwgaWR4LCB2YWwsIGNhbkVkaXQpIHtcblx0ICAgIHZhciBuZXdBcnJheSA9IGNhbkVkaXQgPyBhcnJheSA6IGFyckNvcHkoYXJyYXkpO1xuXHQgICAgbmV3QXJyYXlbaWR4XSA9IHZhbDtcblx0ICAgIHJldHVybiBuZXdBcnJheTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHNwbGljZUluKGFycmF5LCBpZHgsIHZhbCwgY2FuRWRpdCkge1xuXHQgICAgdmFyIG5ld0xlbiA9IGFycmF5Lmxlbmd0aCArIDE7XG5cdCAgICBpZiAoY2FuRWRpdCAmJiBpZHggKyAxID09PSBuZXdMZW4pIHtcblx0ICAgICAgYXJyYXlbaWR4XSA9IHZhbDtcblx0ICAgICAgcmV0dXJuIGFycmF5O1xuXHQgICAgfVxuXHQgICAgdmFyIG5ld0FycmF5ID0gbmV3IEFycmF5KG5ld0xlbik7XG5cdCAgICB2YXIgYWZ0ZXIgPSAwO1xuXHQgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IG5ld0xlbjsgaWkrKykge1xuXHQgICAgICBpZiAoaWkgPT09IGlkeCkge1xuXHQgICAgICAgIG5ld0FycmF5W2lpXSA9IHZhbDtcblx0ICAgICAgICBhZnRlciA9IC0xO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIG5ld0FycmF5W2lpXSA9IGFycmF5W2lpICsgYWZ0ZXJdO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbmV3QXJyYXk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBzcGxpY2VPdXQoYXJyYXksIGlkeCwgY2FuRWRpdCkge1xuXHQgICAgdmFyIG5ld0xlbiA9IGFycmF5Lmxlbmd0aCAtIDE7XG5cdCAgICBpZiAoY2FuRWRpdCAmJiBpZHggPT09IG5ld0xlbikge1xuXHQgICAgICBhcnJheS5wb3AoKTtcblx0ICAgICAgcmV0dXJuIGFycmF5O1xuXHQgICAgfVxuXHQgICAgdmFyIG5ld0FycmF5ID0gbmV3IEFycmF5KG5ld0xlbik7XG5cdCAgICB2YXIgYWZ0ZXIgPSAwO1xuXHQgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IG5ld0xlbjsgaWkrKykge1xuXHQgICAgICBpZiAoaWkgPT09IGlkeCkge1xuXHQgICAgICAgIGFmdGVyID0gMTtcblx0ICAgICAgfVxuXHQgICAgICBuZXdBcnJheVtpaV0gPSBhcnJheVtpaSArIGFmdGVyXTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBuZXdBcnJheTtcblx0ICB9XG5cdFxuXHQgIHZhciBNQVhfQVJSQVlfTUFQX1NJWkUgPSBTSVpFIC8gNDtcblx0ICB2YXIgTUFYX0JJVE1BUF9JTkRFWEVEX1NJWkUgPSBTSVpFIC8gMjtcblx0ICB2YXIgTUlOX0hBU0hfQVJSQVlfTUFQX1NJWkUgPSBTSVpFIC8gNDtcblx0XG5cdCAgY3JlYXRlQ2xhc3MoTGlzdCwgSW5kZXhlZENvbGxlY3Rpb24pO1xuXHRcblx0ICAgIC8vIEBwcmFnbWEgQ29uc3RydWN0aW9uXG5cdFxuXHQgICAgZnVuY3Rpb24gTGlzdCh2YWx1ZSkge1xuXHQgICAgICB2YXIgZW1wdHkgPSBlbXB0eUxpc3QoKTtcblx0ICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICByZXR1cm4gZW1wdHk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGlzTGlzdCh2YWx1ZSkpIHtcblx0ICAgICAgICByZXR1cm4gdmFsdWU7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGl0ZXIgPSBJbmRleGVkSXRlcmFibGUodmFsdWUpO1xuXHQgICAgICB2YXIgc2l6ZSA9IGl0ZXIuc2l6ZTtcblx0ICAgICAgaWYgKHNpemUgPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gZW1wdHk7XG5cdCAgICAgIH1cblx0ICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoc2l6ZSk7XG5cdCAgICAgIGlmIChzaXplID4gMCAmJiBzaXplIDwgU0laRSkge1xuXHQgICAgICAgIHJldHVybiBtYWtlTGlzdCgwLCBzaXplLCBTSElGVCwgbnVsbCwgbmV3IFZOb2RlKGl0ZXIudG9BcnJheSgpKSk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGVtcHR5LndpdGhNdXRhdGlvbnMoZnVuY3Rpb24obGlzdCApIHtcblx0ICAgICAgICBsaXN0LnNldFNpemUoc2l6ZSk7XG5cdCAgICAgICAgaXRlci5mb3JFYWNoKGZ1bmN0aW9uKHYsIGkpICB7cmV0dXJuIGxpc3Quc2V0KGksIHYpfSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHRcblx0ICAgIExpc3Qub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG5cdCAgICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIExpc3QucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ0xpc3QgWycsICddJyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIEBwcmFnbWEgQWNjZXNzXG5cdFxuXHQgICAgTGlzdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaW5kZXgsIG5vdFNldFZhbHVlKSB7XG5cdCAgICAgIGluZGV4ID0gd3JhcEluZGV4KHRoaXMsIGluZGV4KTtcblx0ICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLnNpemUpIHtcblx0ICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG5cdCAgICAgIH1cblx0ICAgICAgaW5kZXggKz0gdGhpcy5fb3JpZ2luO1xuXHQgICAgICB2YXIgbm9kZSA9IGxpc3ROb2RlRm9yKHRoaXMsIGluZGV4KTtcblx0ICAgICAgcmV0dXJuIG5vZGUgJiYgbm9kZS5hcnJheVtpbmRleCAmIE1BU0tdO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXHRcblx0ICAgIExpc3QucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGluZGV4LCB2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gdXBkYXRlTGlzdCh0aGlzLCBpbmRleCwgdmFsdWUpO1xuXHQgICAgfTtcblx0XG5cdCAgICBMaXN0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihpbmRleCkge1xuXHQgICAgICByZXR1cm4gIXRoaXMuaGFzKGluZGV4KSA/IHRoaXMgOlxuXHQgICAgICAgIGluZGV4ID09PSAwID8gdGhpcy5zaGlmdCgpIDpcblx0ICAgICAgICBpbmRleCA9PT0gdGhpcy5zaXplIC0gMSA/IHRoaXMucG9wKCkgOlxuXHQgICAgICAgIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuXHQgICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuX29yaWdpbiA9IHRoaXMuX2NhcGFjaXR5ID0gMDtcblx0ICAgICAgICB0aGlzLl9sZXZlbCA9IFNISUZUO1xuXHQgICAgICAgIHRoaXMuX3Jvb3QgPSB0aGlzLl90YWlsID0gbnVsbDtcblx0ICAgICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcblx0ICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGVtcHR5TGlzdCgpO1xuXHQgICAgfTtcblx0XG5cdCAgICBMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuXHQgICAgICB2YXIgdmFsdWVzID0gYXJndW1lbnRzO1xuXHQgICAgICB2YXIgb2xkU2l6ZSA9IHRoaXMuc2l6ZTtcblx0ICAgICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbihsaXN0ICkge1xuXHQgICAgICAgIHNldExpc3RCb3VuZHMobGlzdCwgMCwgb2xkU2l6ZSArIHZhbHVlcy5sZW5ndGgpO1xuXHQgICAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCB2YWx1ZXMubGVuZ3RoOyBpaSsrKSB7XG5cdCAgICAgICAgICBsaXN0LnNldChvbGRTaXplICsgaWksIHZhbHVlc1tpaV0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIExpc3QucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gc2V0TGlzdEJvdW5kcyh0aGlzLCAwLCAtMSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIExpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG5cdCAgICAgIHZhciB2YWx1ZXMgPSBhcmd1bWVudHM7XG5cdCAgICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24obGlzdCApIHtcblx0ICAgICAgICBzZXRMaXN0Qm91bmRzKGxpc3QsIC12YWx1ZXMubGVuZ3RoKTtcblx0ICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgdmFsdWVzLmxlbmd0aDsgaWkrKykge1xuXHQgICAgICAgICAgbGlzdC5zZXQoaWksIHZhbHVlc1tpaV0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIExpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBzZXRMaXN0Qm91bmRzKHRoaXMsIDEpO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIENvbXBvc2l0aW9uXG5cdFxuXHQgICAgTGlzdC5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbigvKi4uLml0ZXJzKi8pIHtcblx0ICAgICAgcmV0dXJuIG1lcmdlSW50b0xpc3RXaXRoKHRoaXMsIHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTGlzdC5wcm90b3R5cGUubWVyZ2VXaXRoID0gZnVuY3Rpb24obWVyZ2VyKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG5cdCAgICAgIHJldHVybiBtZXJnZUludG9MaXN0V2l0aCh0aGlzLCBtZXJnZXIsIGl0ZXJzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTGlzdC5wcm90b3R5cGUubWVyZ2VEZWVwID0gZnVuY3Rpb24oLyouLi5pdGVycyovKSB7XG5cdCAgICAgIHJldHVybiBtZXJnZUludG9MaXN0V2l0aCh0aGlzLCBkZWVwTWVyZ2VyKHVuZGVmaW5lZCksIGFyZ3VtZW50cyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIExpc3QucHJvdG90eXBlLm1lcmdlRGVlcFdpdGggPSBmdW5jdGlvbihtZXJnZXIpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAxKTtcblx0ICAgICAgcmV0dXJuIG1lcmdlSW50b0xpc3RXaXRoKHRoaXMsIGRlZXBNZXJnZXIobWVyZ2VyKSwgaXRlcnMpO1xuXHQgICAgfTtcblx0XG5cdCAgICBMaXN0LnByb3RvdHlwZS5zZXRTaXplID0gZnVuY3Rpb24oc2l6ZSkge1xuXHQgICAgICByZXR1cm4gc2V0TGlzdEJvdW5kcyh0aGlzLCAwLCBzaXplKTtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gQHByYWdtYSBJdGVyYXRpb25cblx0XG5cdCAgICBMaXN0LnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcblx0ICAgICAgdmFyIHNpemUgPSB0aGlzLnNpemU7XG5cdCAgICAgIGlmICh3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIHNpemUpKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHNldExpc3RCb3VuZHMoXG5cdCAgICAgICAgdGhpcyxcblx0ICAgICAgICByZXNvbHZlQmVnaW4oYmVnaW4sIHNpemUpLFxuXHQgICAgICAgIHJlc29sdmVFbmQoZW5kLCBzaXplKVxuXHQgICAgICApO1xuXHQgICAgfTtcblx0XG5cdCAgICBMaXN0LnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICB2YXIgaW5kZXggPSAwO1xuXHQgICAgICB2YXIgdmFsdWVzID0gaXRlcmF0ZUxpc3QodGhpcywgcmV2ZXJzZSk7XG5cdCAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuXHQgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlcygpO1xuXHQgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gRE9ORSA/XG5cdCAgICAgICAgICBpdGVyYXRvckRvbmUoKSA6XG5cdCAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGluZGV4KyssIHZhbHVlKTtcblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIExpc3QucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG5cdCAgICAgIHZhciBpbmRleCA9IDA7XG5cdCAgICAgIHZhciB2YWx1ZXMgPSBpdGVyYXRlTGlzdCh0aGlzLCByZXZlcnNlKTtcblx0ICAgICAgdmFyIHZhbHVlO1xuXHQgICAgICB3aGlsZSAoKHZhbHVlID0gdmFsdWVzKCkpICE9PSBET05FKSB7XG5cdCAgICAgICAgaWYgKGZuKHZhbHVlLCBpbmRleCsrLCB0aGlzKSA9PT0gZmFsc2UpIHtcblx0ICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gaW5kZXg7XG5cdCAgICB9O1xuXHRcblx0ICAgIExpc3QucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbihvd25lcklEKSB7XG5cdCAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICghb3duZXJJRCkge1xuXHQgICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gbWFrZUxpc3QodGhpcy5fb3JpZ2luLCB0aGlzLl9jYXBhY2l0eSwgdGhpcy5fbGV2ZWwsIHRoaXMuX3Jvb3QsIHRoaXMuX3RhaWwsIG93bmVySUQsIHRoaXMuX19oYXNoKTtcblx0ICAgIH07XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBpc0xpc3QobWF5YmVMaXN0KSB7XG5cdCAgICByZXR1cm4gISEobWF5YmVMaXN0ICYmIG1heWJlTGlzdFtJU19MSVNUX1NFTlRJTkVMXSk7XG5cdCAgfVxuXHRcblx0ICBMaXN0LmlzTGlzdCA9IGlzTGlzdDtcblx0XG5cdCAgdmFyIElTX0xJU1RfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9MSVNUX19AQCc7XG5cdFxuXHQgIHZhciBMaXN0UHJvdG90eXBlID0gTGlzdC5wcm90b3R5cGU7XG5cdCAgTGlzdFByb3RvdHlwZVtJU19MSVNUX1NFTlRJTkVMXSA9IHRydWU7XG5cdCAgTGlzdFByb3RvdHlwZVtERUxFVEVdID0gTGlzdFByb3RvdHlwZS5yZW1vdmU7XG5cdCAgTGlzdFByb3RvdHlwZS5zZXRJbiA9IE1hcFByb3RvdHlwZS5zZXRJbjtcblx0ICBMaXN0UHJvdG90eXBlLmRlbGV0ZUluID1cblx0ICBMaXN0UHJvdG90eXBlLnJlbW92ZUluID0gTWFwUHJvdG90eXBlLnJlbW92ZUluO1xuXHQgIExpc3RQcm90b3R5cGUudXBkYXRlID0gTWFwUHJvdG90eXBlLnVwZGF0ZTtcblx0ICBMaXN0UHJvdG90eXBlLnVwZGF0ZUluID0gTWFwUHJvdG90eXBlLnVwZGF0ZUluO1xuXHQgIExpc3RQcm90b3R5cGUubWVyZ2VJbiA9IE1hcFByb3RvdHlwZS5tZXJnZUluO1xuXHQgIExpc3RQcm90b3R5cGUubWVyZ2VEZWVwSW4gPSBNYXBQcm90b3R5cGUubWVyZ2VEZWVwSW47XG5cdCAgTGlzdFByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gTWFwUHJvdG90eXBlLndpdGhNdXRhdGlvbnM7XG5cdCAgTGlzdFByb3RvdHlwZS5hc011dGFibGUgPSBNYXBQcm90b3R5cGUuYXNNdXRhYmxlO1xuXHQgIExpc3RQcm90b3R5cGUuYXNJbW11dGFibGUgPSBNYXBQcm90b3R5cGUuYXNJbW11dGFibGU7XG5cdCAgTGlzdFByb3RvdHlwZS53YXNBbHRlcmVkID0gTWFwUHJvdG90eXBlLndhc0FsdGVyZWQ7XG5cdFxuXHRcblx0XG5cdCAgICBmdW5jdGlvbiBWTm9kZShhcnJheSwgb3duZXJJRCkge1xuXHQgICAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG5cdCAgICAgIHRoaXMub3duZXJJRCA9IG93bmVySUQ7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gVE9ETzogc2VlbXMgbGlrZSB0aGVzZSBtZXRob2RzIGFyZSB2ZXJ5IHNpbWlsYXJcblx0XG5cdCAgICBWTm9kZS5wcm90b3R5cGUucmVtb3ZlQmVmb3JlID0gZnVuY3Rpb24ob3duZXJJRCwgbGV2ZWwsIGluZGV4KSB7XG5cdCAgICAgIGlmIChpbmRleCA9PT0gbGV2ZWwgPyAxIDw8IGxldmVsIDogMCB8fCB0aGlzLmFycmF5Lmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBvcmlnaW5JbmRleCA9IChpbmRleCA+Pj4gbGV2ZWwpICYgTUFTSztcblx0ICAgICAgaWYgKG9yaWdpbkluZGV4ID49IHRoaXMuYXJyYXkubGVuZ3RoKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBWTm9kZShbXSwgb3duZXJJRCk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHJlbW92aW5nRmlyc3QgPSBvcmlnaW5JbmRleCA9PT0gMDtcblx0ICAgICAgdmFyIG5ld0NoaWxkO1xuXHQgICAgICBpZiAobGV2ZWwgPiAwKSB7XG5cdCAgICAgICAgdmFyIG9sZENoaWxkID0gdGhpcy5hcnJheVtvcmlnaW5JbmRleF07XG5cdCAgICAgICAgbmV3Q2hpbGQgPSBvbGRDaGlsZCAmJiBvbGRDaGlsZC5yZW1vdmVCZWZvcmUob3duZXJJRCwgbGV2ZWwgLSBTSElGVCwgaW5kZXgpO1xuXHQgICAgICAgIGlmIChuZXdDaGlsZCA9PT0gb2xkQ2hpbGQgJiYgcmVtb3ZpbmdGaXJzdCkge1xuXHQgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGlmIChyZW1vdmluZ0ZpcnN0ICYmICFuZXdDaGlsZCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBlZGl0YWJsZSA9IGVkaXRhYmxlVk5vZGUodGhpcywgb3duZXJJRCk7XG5cdCAgICAgIGlmICghcmVtb3ZpbmdGaXJzdCkge1xuXHQgICAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBvcmlnaW5JbmRleDsgaWkrKykge1xuXHQgICAgICAgICAgZWRpdGFibGUuYXJyYXlbaWldID0gdW5kZWZpbmVkO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBpZiAobmV3Q2hpbGQpIHtcblx0ICAgICAgICBlZGl0YWJsZS5hcnJheVtvcmlnaW5JbmRleF0gPSBuZXdDaGlsZDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gZWRpdGFibGU7XG5cdCAgICB9O1xuXHRcblx0ICAgIFZOb2RlLnByb3RvdHlwZS5yZW1vdmVBZnRlciA9IGZ1bmN0aW9uKG93bmVySUQsIGxldmVsLCBpbmRleCkge1xuXHQgICAgICBpZiAoaW5kZXggPT09IGxldmVsID8gMSA8PCBsZXZlbCA6IDAgfHwgdGhpcy5hcnJheS5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICB2YXIgc2l6ZUluZGV4ID0gKChpbmRleCAtIDEpID4+PiBsZXZlbCkgJiBNQVNLO1xuXHQgICAgICBpZiAoc2l6ZUluZGV4ID49IHRoaXMuYXJyYXkubGVuZ3RoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHJlbW92aW5nTGFzdCA9IHNpemVJbmRleCA9PT0gdGhpcy5hcnJheS5sZW5ndGggLSAxO1xuXHQgICAgICB2YXIgbmV3Q2hpbGQ7XG5cdCAgICAgIGlmIChsZXZlbCA+IDApIHtcblx0ICAgICAgICB2YXIgb2xkQ2hpbGQgPSB0aGlzLmFycmF5W3NpemVJbmRleF07XG5cdCAgICAgICAgbmV3Q2hpbGQgPSBvbGRDaGlsZCAmJiBvbGRDaGlsZC5yZW1vdmVBZnRlcihvd25lcklELCBsZXZlbCAtIFNISUZULCBpbmRleCk7XG5cdCAgICAgICAgaWYgKG5ld0NoaWxkID09PSBvbGRDaGlsZCAmJiByZW1vdmluZ0xhc3QpIHtcblx0ICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBpZiAocmVtb3ZpbmdMYXN0ICYmICFuZXdDaGlsZCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBlZGl0YWJsZSA9IGVkaXRhYmxlVk5vZGUodGhpcywgb3duZXJJRCk7XG5cdCAgICAgIGlmICghcmVtb3ZpbmdMYXN0KSB7XG5cdCAgICAgICAgZWRpdGFibGUuYXJyYXkucG9wKCk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKG5ld0NoaWxkKSB7XG5cdCAgICAgICAgZWRpdGFibGUuYXJyYXlbc2l6ZUluZGV4XSA9IG5ld0NoaWxkO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBlZGl0YWJsZTtcblx0ICAgIH07XG5cdFxuXHRcblx0XG5cdCAgdmFyIERPTkUgPSB7fTtcblx0XG5cdCAgZnVuY3Rpb24gaXRlcmF0ZUxpc3QobGlzdCwgcmV2ZXJzZSkge1xuXHQgICAgdmFyIGxlZnQgPSBsaXN0Ll9vcmlnaW47XG5cdCAgICB2YXIgcmlnaHQgPSBsaXN0Ll9jYXBhY2l0eTtcblx0ICAgIHZhciB0YWlsUG9zID0gZ2V0VGFpbE9mZnNldChyaWdodCk7XG5cdCAgICB2YXIgdGFpbCA9IGxpc3QuX3RhaWw7XG5cdFxuXHQgICAgcmV0dXJuIGl0ZXJhdGVOb2RlT3JMZWFmKGxpc3QuX3Jvb3QsIGxpc3QuX2xldmVsLCAwKTtcblx0XG5cdCAgICBmdW5jdGlvbiBpdGVyYXRlTm9kZU9yTGVhZihub2RlLCBsZXZlbCwgb2Zmc2V0KSB7XG5cdCAgICAgIHJldHVybiBsZXZlbCA9PT0gMCA/XG5cdCAgICAgICAgaXRlcmF0ZUxlYWYobm9kZSwgb2Zmc2V0KSA6XG5cdCAgICAgICAgaXRlcmF0ZU5vZGUobm9kZSwgbGV2ZWwsIG9mZnNldCk7XG5cdCAgICB9XG5cdFxuXHQgICAgZnVuY3Rpb24gaXRlcmF0ZUxlYWYobm9kZSwgb2Zmc2V0KSB7XG5cdCAgICAgIHZhciBhcnJheSA9IG9mZnNldCA9PT0gdGFpbFBvcyA/IHRhaWwgJiYgdGFpbC5hcnJheSA6IG5vZGUgJiYgbm9kZS5hcnJheTtcblx0ICAgICAgdmFyIGZyb20gPSBvZmZzZXQgPiBsZWZ0ID8gMCA6IGxlZnQgLSBvZmZzZXQ7XG5cdCAgICAgIHZhciB0byA9IHJpZ2h0IC0gb2Zmc2V0O1xuXHQgICAgICBpZiAodG8gPiBTSVpFKSB7XG5cdCAgICAgICAgdG8gPSBTSVpFO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBmdW5jdGlvbigpICB7XG5cdCAgICAgICAgaWYgKGZyb20gPT09IHRvKSB7XG5cdCAgICAgICAgICByZXR1cm4gRE9ORTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIGlkeCA9IHJldmVyc2UgPyAtLXRvIDogZnJvbSsrO1xuXHQgICAgICAgIHJldHVybiBhcnJheSAmJiBhcnJheVtpZHhdO1xuXHQgICAgICB9O1xuXHQgICAgfVxuXHRcblx0ICAgIGZ1bmN0aW9uIGl0ZXJhdGVOb2RlKG5vZGUsIGxldmVsLCBvZmZzZXQpIHtcblx0ICAgICAgdmFyIHZhbHVlcztcblx0ICAgICAgdmFyIGFycmF5ID0gbm9kZSAmJiBub2RlLmFycmF5O1xuXHQgICAgICB2YXIgZnJvbSA9IG9mZnNldCA+IGxlZnQgPyAwIDogKGxlZnQgLSBvZmZzZXQpID4+IGxldmVsO1xuXHQgICAgICB2YXIgdG8gPSAoKHJpZ2h0IC0gb2Zmc2V0KSA+PiBsZXZlbCkgKyAxO1xuXHQgICAgICBpZiAodG8gPiBTSVpFKSB7XG5cdCAgICAgICAgdG8gPSBTSVpFO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBmdW5jdGlvbigpICB7XG5cdCAgICAgICAgZG8ge1xuXHQgICAgICAgICAgaWYgKHZhbHVlcykge1xuXHQgICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZXMoKTtcblx0ICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBET05FKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHZhbHVlcyA9IG51bGw7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBpZiAoZnJvbSA9PT0gdG8pIHtcblx0ICAgICAgICAgICAgcmV0dXJuIERPTkU7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICB2YXIgaWR4ID0gcmV2ZXJzZSA/IC0tdG8gOiBmcm9tKys7XG5cdCAgICAgICAgICB2YWx1ZXMgPSBpdGVyYXRlTm9kZU9yTGVhZihcblx0ICAgICAgICAgICAgYXJyYXkgJiYgYXJyYXlbaWR4XSwgbGV2ZWwgLSBTSElGVCwgb2Zmc2V0ICsgKGlkeCA8PCBsZXZlbClcblx0ICAgICAgICAgICk7XG5cdCAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBtYWtlTGlzdChvcmlnaW4sIGNhcGFjaXR5LCBsZXZlbCwgcm9vdCwgdGFpbCwgb3duZXJJRCwgaGFzaCkge1xuXHQgICAgdmFyIGxpc3QgPSBPYmplY3QuY3JlYXRlKExpc3RQcm90b3R5cGUpO1xuXHQgICAgbGlzdC5zaXplID0gY2FwYWNpdHkgLSBvcmlnaW47XG5cdCAgICBsaXN0Ll9vcmlnaW4gPSBvcmlnaW47XG5cdCAgICBsaXN0Ll9jYXBhY2l0eSA9IGNhcGFjaXR5O1xuXHQgICAgbGlzdC5fbGV2ZWwgPSBsZXZlbDtcblx0ICAgIGxpc3QuX3Jvb3QgPSByb290O1xuXHQgICAgbGlzdC5fdGFpbCA9IHRhaWw7XG5cdCAgICBsaXN0Ll9fb3duZXJJRCA9IG93bmVySUQ7XG5cdCAgICBsaXN0Ll9faGFzaCA9IGhhc2g7XG5cdCAgICBsaXN0Ll9fYWx0ZXJlZCA9IGZhbHNlO1xuXHQgICAgcmV0dXJuIGxpc3Q7XG5cdCAgfVxuXHRcblx0ICB2YXIgRU1QVFlfTElTVDtcblx0ICBmdW5jdGlvbiBlbXB0eUxpc3QoKSB7XG5cdCAgICByZXR1cm4gRU1QVFlfTElTVCB8fCAoRU1QVFlfTElTVCA9IG1ha2VMaXN0KDAsIDAsIFNISUZUKSk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiB1cGRhdGVMaXN0KGxpc3QsIGluZGV4LCB2YWx1ZSkge1xuXHQgICAgaW5kZXggPSB3cmFwSW5kZXgobGlzdCwgaW5kZXgpO1xuXHRcblx0ICAgIGlmIChpbmRleCA+PSBsaXN0LnNpemUgfHwgaW5kZXggPCAwKSB7XG5cdCAgICAgIHJldHVybiBsaXN0LndpdGhNdXRhdGlvbnMoZnVuY3Rpb24obGlzdCApIHtcblx0ICAgICAgICBpbmRleCA8IDAgP1xuXHQgICAgICAgICAgc2V0TGlzdEJvdW5kcyhsaXN0LCBpbmRleCkuc2V0KDAsIHZhbHVlKSA6XG5cdCAgICAgICAgICBzZXRMaXN0Qm91bmRzKGxpc3QsIDAsIGluZGV4ICsgMSkuc2V0KGluZGV4LCB2YWx1ZSlcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdFxuXHQgICAgaW5kZXggKz0gbGlzdC5fb3JpZ2luO1xuXHRcblx0ICAgIHZhciBuZXdUYWlsID0gbGlzdC5fdGFpbDtcblx0ICAgIHZhciBuZXdSb290ID0gbGlzdC5fcm9vdDtcblx0ICAgIHZhciBkaWRBbHRlciA9IE1ha2VSZWYoRElEX0FMVEVSKTtcblx0ICAgIGlmIChpbmRleCA+PSBnZXRUYWlsT2Zmc2V0KGxpc3QuX2NhcGFjaXR5KSkge1xuXHQgICAgICBuZXdUYWlsID0gdXBkYXRlVk5vZGUobmV3VGFpbCwgbGlzdC5fX293bmVySUQsIDAsIGluZGV4LCB2YWx1ZSwgZGlkQWx0ZXIpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgbmV3Um9vdCA9IHVwZGF0ZVZOb2RlKG5ld1Jvb3QsIGxpc3QuX19vd25lcklELCBsaXN0Ll9sZXZlbCwgaW5kZXgsIHZhbHVlLCBkaWRBbHRlcik7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKCFkaWRBbHRlci52YWx1ZSkge1xuXHQgICAgICByZXR1cm4gbGlzdDtcblx0ICAgIH1cblx0XG5cdCAgICBpZiAobGlzdC5fX293bmVySUQpIHtcblx0ICAgICAgbGlzdC5fcm9vdCA9IG5ld1Jvb3Q7XG5cdCAgICAgIGxpc3QuX3RhaWwgPSBuZXdUYWlsO1xuXHQgICAgICBsaXN0Ll9faGFzaCA9IHVuZGVmaW5lZDtcblx0ICAgICAgbGlzdC5fX2FsdGVyZWQgPSB0cnVlO1xuXHQgICAgICByZXR1cm4gbGlzdDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBtYWtlTGlzdChsaXN0Ll9vcmlnaW4sIGxpc3QuX2NhcGFjaXR5LCBsaXN0Ll9sZXZlbCwgbmV3Um9vdCwgbmV3VGFpbCk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiB1cGRhdGVWTm9kZShub2RlLCBvd25lcklELCBsZXZlbCwgaW5kZXgsIHZhbHVlLCBkaWRBbHRlcikge1xuXHQgICAgdmFyIGlkeCA9IChpbmRleCA+Pj4gbGV2ZWwpICYgTUFTSztcblx0ICAgIHZhciBub2RlSGFzID0gbm9kZSAmJiBpZHggPCBub2RlLmFycmF5Lmxlbmd0aDtcblx0ICAgIGlmICghbm9kZUhhcyAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgIHJldHVybiBub2RlO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBuZXdOb2RlO1xuXHRcblx0ICAgIGlmIChsZXZlbCA+IDApIHtcblx0ICAgICAgdmFyIGxvd2VyTm9kZSA9IG5vZGUgJiYgbm9kZS5hcnJheVtpZHhdO1xuXHQgICAgICB2YXIgbmV3TG93ZXJOb2RlID0gdXBkYXRlVk5vZGUobG93ZXJOb2RlLCBvd25lcklELCBsZXZlbCAtIFNISUZULCBpbmRleCwgdmFsdWUsIGRpZEFsdGVyKTtcblx0ICAgICAgaWYgKG5ld0xvd2VyTm9kZSA9PT0gbG93ZXJOb2RlKSB7XG5cdCAgICAgICAgcmV0dXJuIG5vZGU7XG5cdCAgICAgIH1cblx0ICAgICAgbmV3Tm9kZSA9IGVkaXRhYmxlVk5vZGUobm9kZSwgb3duZXJJRCk7XG5cdCAgICAgIG5ld05vZGUuYXJyYXlbaWR4XSA9IG5ld0xvd2VyTm9kZTtcblx0ICAgICAgcmV0dXJuIG5ld05vZGU7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKG5vZGVIYXMgJiYgbm9kZS5hcnJheVtpZHhdID09PSB2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gbm9kZTtcblx0ICAgIH1cblx0XG5cdCAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuXHRcblx0ICAgIG5ld05vZGUgPSBlZGl0YWJsZVZOb2RlKG5vZGUsIG93bmVySUQpO1xuXHQgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgaWR4ID09PSBuZXdOb2RlLmFycmF5Lmxlbmd0aCAtIDEpIHtcblx0ICAgICAgbmV3Tm9kZS5hcnJheS5wb3AoKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIG5ld05vZGUuYXJyYXlbaWR4XSA9IHZhbHVlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5ld05vZGU7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBlZGl0YWJsZVZOb2RlKG5vZGUsIG93bmVySUQpIHtcblx0ICAgIGlmIChvd25lcklEICYmIG5vZGUgJiYgb3duZXJJRCA9PT0gbm9kZS5vd25lcklEKSB7XG5cdCAgICAgIHJldHVybiBub2RlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5ldyBWTm9kZShub2RlID8gbm9kZS5hcnJheS5zbGljZSgpIDogW10sIG93bmVySUQpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gbGlzdE5vZGVGb3IobGlzdCwgcmF3SW5kZXgpIHtcblx0ICAgIGlmIChyYXdJbmRleCA+PSBnZXRUYWlsT2Zmc2V0KGxpc3QuX2NhcGFjaXR5KSkge1xuXHQgICAgICByZXR1cm4gbGlzdC5fdGFpbDtcblx0ICAgIH1cblx0ICAgIGlmIChyYXdJbmRleCA8IDEgPDwgKGxpc3QuX2xldmVsICsgU0hJRlQpKSB7XG5cdCAgICAgIHZhciBub2RlID0gbGlzdC5fcm9vdDtcblx0ICAgICAgdmFyIGxldmVsID0gbGlzdC5fbGV2ZWw7XG5cdCAgICAgIHdoaWxlIChub2RlICYmIGxldmVsID4gMCkge1xuXHQgICAgICAgIG5vZGUgPSBub2RlLmFycmF5WyhyYXdJbmRleCA+Pj4gbGV2ZWwpICYgTUFTS107XG5cdCAgICAgICAgbGV2ZWwgLT0gU0hJRlQ7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG5vZGU7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBzZXRMaXN0Qm91bmRzKGxpc3QsIGJlZ2luLCBlbmQpIHtcblx0ICAgIHZhciBvd25lciA9IGxpc3QuX19vd25lcklEIHx8IG5ldyBPd25lcklEKCk7XG5cdCAgICB2YXIgb2xkT3JpZ2luID0gbGlzdC5fb3JpZ2luO1xuXHQgICAgdmFyIG9sZENhcGFjaXR5ID0gbGlzdC5fY2FwYWNpdHk7XG5cdCAgICB2YXIgbmV3T3JpZ2luID0gb2xkT3JpZ2luICsgYmVnaW47XG5cdCAgICB2YXIgbmV3Q2FwYWNpdHkgPSBlbmQgPT09IHVuZGVmaW5lZCA/IG9sZENhcGFjaXR5IDogZW5kIDwgMCA/IG9sZENhcGFjaXR5ICsgZW5kIDogb2xkT3JpZ2luICsgZW5kO1xuXHQgICAgaWYgKG5ld09yaWdpbiA9PT0gb2xkT3JpZ2luICYmIG5ld0NhcGFjaXR5ID09PSBvbGRDYXBhY2l0eSkge1xuXHQgICAgICByZXR1cm4gbGlzdDtcblx0ICAgIH1cblx0XG5cdCAgICAvLyBJZiBpdCdzIGdvaW5nIHRvIGVuZCBhZnRlciBpdCBzdGFydHMsIGl0J3MgZW1wdHkuXG5cdCAgICBpZiAobmV3T3JpZ2luID49IG5ld0NhcGFjaXR5KSB7XG5cdCAgICAgIHJldHVybiBsaXN0LmNsZWFyKCk7XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIG5ld0xldmVsID0gbGlzdC5fbGV2ZWw7XG5cdCAgICB2YXIgbmV3Um9vdCA9IGxpc3QuX3Jvb3Q7XG5cdFxuXHQgICAgLy8gTmV3IG9yaWdpbiBtaWdodCByZXF1aXJlIGNyZWF0aW5nIGEgaGlnaGVyIHJvb3QuXG5cdCAgICB2YXIgb2Zmc2V0U2hpZnQgPSAwO1xuXHQgICAgd2hpbGUgKG5ld09yaWdpbiArIG9mZnNldFNoaWZ0IDwgMCkge1xuXHQgICAgICBuZXdSb290ID0gbmV3IFZOb2RlKG5ld1Jvb3QgJiYgbmV3Um9vdC5hcnJheS5sZW5ndGggPyBbdW5kZWZpbmVkLCBuZXdSb290XSA6IFtdLCBvd25lcik7XG5cdCAgICAgIG5ld0xldmVsICs9IFNISUZUO1xuXHQgICAgICBvZmZzZXRTaGlmdCArPSAxIDw8IG5ld0xldmVsO1xuXHQgICAgfVxuXHQgICAgaWYgKG9mZnNldFNoaWZ0KSB7XG5cdCAgICAgIG5ld09yaWdpbiArPSBvZmZzZXRTaGlmdDtcblx0ICAgICAgb2xkT3JpZ2luICs9IG9mZnNldFNoaWZ0O1xuXHQgICAgICBuZXdDYXBhY2l0eSArPSBvZmZzZXRTaGlmdDtcblx0ICAgICAgb2xkQ2FwYWNpdHkgKz0gb2Zmc2V0U2hpZnQ7XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIG9sZFRhaWxPZmZzZXQgPSBnZXRUYWlsT2Zmc2V0KG9sZENhcGFjaXR5KTtcblx0ICAgIHZhciBuZXdUYWlsT2Zmc2V0ID0gZ2V0VGFpbE9mZnNldChuZXdDYXBhY2l0eSk7XG5cdFxuXHQgICAgLy8gTmV3IHNpemUgbWlnaHQgcmVxdWlyZSBjcmVhdGluZyBhIGhpZ2hlciByb290LlxuXHQgICAgd2hpbGUgKG5ld1RhaWxPZmZzZXQgPj0gMSA8PCAobmV3TGV2ZWwgKyBTSElGVCkpIHtcblx0ICAgICAgbmV3Um9vdCA9IG5ldyBWTm9kZShuZXdSb290ICYmIG5ld1Jvb3QuYXJyYXkubGVuZ3RoID8gW25ld1Jvb3RdIDogW10sIG93bmVyKTtcblx0ICAgICAgbmV3TGV2ZWwgKz0gU0hJRlQ7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gTG9jYXRlIG9yIGNyZWF0ZSB0aGUgbmV3IHRhaWwuXG5cdCAgICB2YXIgb2xkVGFpbCA9IGxpc3QuX3RhaWw7XG5cdCAgICB2YXIgbmV3VGFpbCA9IG5ld1RhaWxPZmZzZXQgPCBvbGRUYWlsT2Zmc2V0ID9cblx0ICAgICAgbGlzdE5vZGVGb3IobGlzdCwgbmV3Q2FwYWNpdHkgLSAxKSA6XG5cdCAgICAgIG5ld1RhaWxPZmZzZXQgPiBvbGRUYWlsT2Zmc2V0ID8gbmV3IFZOb2RlKFtdLCBvd25lcikgOiBvbGRUYWlsO1xuXHRcblx0ICAgIC8vIE1lcmdlIFRhaWwgaW50byB0cmVlLlxuXHQgICAgaWYgKG9sZFRhaWwgJiYgbmV3VGFpbE9mZnNldCA+IG9sZFRhaWxPZmZzZXQgJiYgbmV3T3JpZ2luIDwgb2xkQ2FwYWNpdHkgJiYgb2xkVGFpbC5hcnJheS5sZW5ndGgpIHtcblx0ICAgICAgbmV3Um9vdCA9IGVkaXRhYmxlVk5vZGUobmV3Um9vdCwgb3duZXIpO1xuXHQgICAgICB2YXIgbm9kZSA9IG5ld1Jvb3Q7XG5cdCAgICAgIGZvciAodmFyIGxldmVsID0gbmV3TGV2ZWw7IGxldmVsID4gU0hJRlQ7IGxldmVsIC09IFNISUZUKSB7XG5cdCAgICAgICAgdmFyIGlkeCA9IChvbGRUYWlsT2Zmc2V0ID4+PiBsZXZlbCkgJiBNQVNLO1xuXHQgICAgICAgIG5vZGUgPSBub2RlLmFycmF5W2lkeF0gPSBlZGl0YWJsZVZOb2RlKG5vZGUuYXJyYXlbaWR4XSwgb3duZXIpO1xuXHQgICAgICB9XG5cdCAgICAgIG5vZGUuYXJyYXlbKG9sZFRhaWxPZmZzZXQgPj4+IFNISUZUKSAmIE1BU0tdID0gb2xkVGFpbDtcblx0ICAgIH1cblx0XG5cdCAgICAvLyBJZiB0aGUgc2l6ZSBoYXMgYmVlbiByZWR1Y2VkLCB0aGVyZSdzIGEgY2hhbmNlIHRoZSB0YWlsIG5lZWRzIHRvIGJlIHRyaW1tZWQuXG5cdCAgICBpZiAobmV3Q2FwYWNpdHkgPCBvbGRDYXBhY2l0eSkge1xuXHQgICAgICBuZXdUYWlsID0gbmV3VGFpbCAmJiBuZXdUYWlsLnJlbW92ZUFmdGVyKG93bmVyLCAwLCBuZXdDYXBhY2l0eSk7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gSWYgdGhlIG5ldyBvcmlnaW4gaXMgd2l0aGluIHRoZSB0YWlsLCB0aGVuIHdlIGRvIG5vdCBuZWVkIGEgcm9vdC5cblx0ICAgIGlmIChuZXdPcmlnaW4gPj0gbmV3VGFpbE9mZnNldCkge1xuXHQgICAgICBuZXdPcmlnaW4gLT0gbmV3VGFpbE9mZnNldDtcblx0ICAgICAgbmV3Q2FwYWNpdHkgLT0gbmV3VGFpbE9mZnNldDtcblx0ICAgICAgbmV3TGV2ZWwgPSBTSElGVDtcblx0ICAgICAgbmV3Um9vdCA9IG51bGw7XG5cdCAgICAgIG5ld1RhaWwgPSBuZXdUYWlsICYmIG5ld1RhaWwucmVtb3ZlQmVmb3JlKG93bmVyLCAwLCBuZXdPcmlnaW4pO1xuXHRcblx0ICAgIC8vIE90aGVyd2lzZSwgaWYgdGhlIHJvb3QgaGFzIGJlZW4gdHJpbW1lZCwgZ2FyYmFnZSBjb2xsZWN0LlxuXHQgICAgfSBlbHNlIGlmIChuZXdPcmlnaW4gPiBvbGRPcmlnaW4gfHwgbmV3VGFpbE9mZnNldCA8IG9sZFRhaWxPZmZzZXQpIHtcblx0ICAgICAgb2Zmc2V0U2hpZnQgPSAwO1xuXHRcblx0ICAgICAgLy8gSWRlbnRpZnkgdGhlIG5ldyB0b3Agcm9vdCBub2RlIG9mIHRoZSBzdWJ0cmVlIG9mIHRoZSBvbGQgcm9vdC5cblx0ICAgICAgd2hpbGUgKG5ld1Jvb3QpIHtcblx0ICAgICAgICB2YXIgYmVnaW5JbmRleCA9IChuZXdPcmlnaW4gPj4+IG5ld0xldmVsKSAmIE1BU0s7XG5cdCAgICAgICAgaWYgKGJlZ2luSW5kZXggIT09IChuZXdUYWlsT2Zmc2V0ID4+PiBuZXdMZXZlbCkgJiBNQVNLKSB7XG5cdCAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGJlZ2luSW5kZXgpIHtcblx0ICAgICAgICAgIG9mZnNldFNoaWZ0ICs9ICgxIDw8IG5ld0xldmVsKSAqIGJlZ2luSW5kZXg7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIG5ld0xldmVsIC09IFNISUZUO1xuXHQgICAgICAgIG5ld1Jvb3QgPSBuZXdSb290LmFycmF5W2JlZ2luSW5kZXhdO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICAvLyBUcmltIHRoZSBuZXcgc2lkZXMgb2YgdGhlIG5ldyByb290LlxuXHQgICAgICBpZiAobmV3Um9vdCAmJiBuZXdPcmlnaW4gPiBvbGRPcmlnaW4pIHtcblx0ICAgICAgICBuZXdSb290ID0gbmV3Um9vdC5yZW1vdmVCZWZvcmUob3duZXIsIG5ld0xldmVsLCBuZXdPcmlnaW4gLSBvZmZzZXRTaGlmdCk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKG5ld1Jvb3QgJiYgbmV3VGFpbE9mZnNldCA8IG9sZFRhaWxPZmZzZXQpIHtcblx0ICAgICAgICBuZXdSb290ID0gbmV3Um9vdC5yZW1vdmVBZnRlcihvd25lciwgbmV3TGV2ZWwsIG5ld1RhaWxPZmZzZXQgLSBvZmZzZXRTaGlmdCk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKG9mZnNldFNoaWZ0KSB7XG5cdCAgICAgICAgbmV3T3JpZ2luIC09IG9mZnNldFNoaWZ0O1xuXHQgICAgICAgIG5ld0NhcGFjaXR5IC09IG9mZnNldFNoaWZ0O1xuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKGxpc3QuX19vd25lcklEKSB7XG5cdCAgICAgIGxpc3Quc2l6ZSA9IG5ld0NhcGFjaXR5IC0gbmV3T3JpZ2luO1xuXHQgICAgICBsaXN0Ll9vcmlnaW4gPSBuZXdPcmlnaW47XG5cdCAgICAgIGxpc3QuX2NhcGFjaXR5ID0gbmV3Q2FwYWNpdHk7XG5cdCAgICAgIGxpc3QuX2xldmVsID0gbmV3TGV2ZWw7XG5cdCAgICAgIGxpc3QuX3Jvb3QgPSBuZXdSb290O1xuXHQgICAgICBsaXN0Ll90YWlsID0gbmV3VGFpbDtcblx0ICAgICAgbGlzdC5fX2hhc2ggPSB1bmRlZmluZWQ7XG5cdCAgICAgIGxpc3QuX19hbHRlcmVkID0gdHJ1ZTtcblx0ICAgICAgcmV0dXJuIGxpc3Q7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbWFrZUxpc3QobmV3T3JpZ2luLCBuZXdDYXBhY2l0eSwgbmV3TGV2ZWwsIG5ld1Jvb3QsIG5ld1RhaWwpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gbWVyZ2VJbnRvTGlzdFdpdGgobGlzdCwgbWVyZ2VyLCBpdGVyYWJsZXMpIHtcblx0ICAgIHZhciBpdGVycyA9IFtdO1xuXHQgICAgdmFyIG1heFNpemUgPSAwO1xuXHQgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGl0ZXJhYmxlcy5sZW5ndGg7IGlpKyspIHtcblx0ICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVzW2lpXTtcblx0ICAgICAgdmFyIGl0ZXIgPSBJbmRleGVkSXRlcmFibGUodmFsdWUpO1xuXHQgICAgICBpZiAoaXRlci5zaXplID4gbWF4U2l6ZSkge1xuXHQgICAgICAgIG1heFNpemUgPSBpdGVyLnNpemU7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKCFpc0l0ZXJhYmxlKHZhbHVlKSkge1xuXHQgICAgICAgIGl0ZXIgPSBpdGVyLm1hcChmdW5jdGlvbih2ICkge3JldHVybiBmcm9tSlModil9KTtcblx0ICAgICAgfVxuXHQgICAgICBpdGVycy5wdXNoKGl0ZXIpO1xuXHQgICAgfVxuXHQgICAgaWYgKG1heFNpemUgPiBsaXN0LnNpemUpIHtcblx0ICAgICAgbGlzdCA9IGxpc3Quc2V0U2l6ZShtYXhTaXplKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBtZXJnZUludG9Db2xsZWN0aW9uV2l0aChsaXN0LCBtZXJnZXIsIGl0ZXJzKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGdldFRhaWxPZmZzZXQoc2l6ZSkge1xuXHQgICAgcmV0dXJuIHNpemUgPCBTSVpFID8gMCA6ICgoKHNpemUgLSAxKSA+Pj4gU0hJRlQpIDw8IFNISUZUKTtcblx0ICB9XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKE9yZGVyZWRNYXAsIE1hcCk7XG5cdFxuXHQgICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblx0XG5cdCAgICBmdW5jdGlvbiBPcmRlcmVkTWFwKHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlPcmRlcmVkTWFwKCkgOlxuXHQgICAgICAgIGlzT3JkZXJlZE1hcCh2YWx1ZSkgPyB2YWx1ZSA6XG5cdCAgICAgICAgZW1wdHlPcmRlcmVkTWFwKCkud2l0aE11dGF0aW9ucyhmdW5jdGlvbihtYXAgKSB7XG5cdCAgICAgICAgICB2YXIgaXRlciA9IEtleWVkSXRlcmFibGUodmFsdWUpO1xuXHQgICAgICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcblx0ICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2LCBrKSAge3JldHVybiBtYXAuc2V0KGssIHYpfSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdFxuXHQgICAgT3JkZXJlZE1hcC5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcblx0ICAgICAgcmV0dXJuIHRoaXMoYXJndW1lbnRzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgT3JkZXJlZE1hcC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnT3JkZXJlZE1hcCB7JywgJ30nKTtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gQHByYWdtYSBBY2Nlc3Ncblx0XG5cdCAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrLCBub3RTZXRWYWx1ZSkge1xuXHQgICAgICB2YXIgaW5kZXggPSB0aGlzLl9tYXAuZ2V0KGspO1xuXHQgICAgICByZXR1cm4gaW5kZXggIT09IHVuZGVmaW5lZCA/IHRoaXMuX2xpc3QuZ2V0KGluZGV4KVsxXSA6IG5vdFNldFZhbHVlO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXHRcblx0ICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcblx0ICAgICAgICB0aGlzLnNpemUgPSAwO1xuXHQgICAgICAgIHRoaXMuX21hcC5jbGVhcigpO1xuXHQgICAgICAgIHRoaXMuX2xpc3QuY2xlYXIoKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gZW1wdHlPcmRlcmVkTWFwKCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGssIHYpIHtcblx0ICAgICAgcmV0dXJuIHVwZGF0ZU9yZGVyZWRNYXAodGhpcywgaywgdik7XG5cdCAgICB9O1xuXHRcblx0ICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGspIHtcblx0ICAgICAgcmV0dXJuIHVwZGF0ZU9yZGVyZWRNYXAodGhpcywgaywgTk9UX1NFVCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLndhc0FsdGVyZWQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX21hcC53YXNBbHRlcmVkKCkgfHwgdGhpcy5fbGlzdC53YXNBbHRlcmVkKCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG5cdCAgICAgIHJldHVybiB0aGlzLl9saXN0Ll9faXRlcmF0ZShcblx0ICAgICAgICBmdW5jdGlvbihlbnRyeSApIHtyZXR1cm4gZW50cnkgJiYgZm4oZW50cnlbMV0sIGVudHJ5WzBdLCB0aGlzJDApfSxcblx0ICAgICAgICByZXZlcnNlXG5cdCAgICAgICk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9saXN0LmZyb21FbnRyeVNlcSgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbihvd25lcklEKSB7XG5cdCAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAuX19lbnN1cmVPd25lcihvd25lcklEKTtcblx0ICAgICAgdmFyIG5ld0xpc3QgPSB0aGlzLl9saXN0Ll9fZW5zdXJlT3duZXIob3duZXJJRCk7XG5cdCAgICAgIGlmICghb3duZXJJRCkge1xuXHQgICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcblx0ICAgICAgICB0aGlzLl9tYXAgPSBuZXdNYXA7XG5cdCAgICAgICAgdGhpcy5fbGlzdCA9IG5ld0xpc3Q7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG1ha2VPcmRlcmVkTWFwKG5ld01hcCwgbmV3TGlzdCwgb3duZXJJRCwgdGhpcy5fX2hhc2gpO1xuXHQgICAgfTtcblx0XG5cdFxuXHQgIGZ1bmN0aW9uIGlzT3JkZXJlZE1hcChtYXliZU9yZGVyZWRNYXApIHtcblx0ICAgIHJldHVybiBpc01hcChtYXliZU9yZGVyZWRNYXApICYmIGlzT3JkZXJlZChtYXliZU9yZGVyZWRNYXApO1xuXHQgIH1cblx0XG5cdCAgT3JkZXJlZE1hcC5pc09yZGVyZWRNYXAgPSBpc09yZGVyZWRNYXA7XG5cdFxuXHQgIE9yZGVyZWRNYXAucHJvdG90eXBlW0lTX09SREVSRURfU0VOVElORUxdID0gdHJ1ZTtcblx0ICBPcmRlcmVkTWFwLnByb3RvdHlwZVtERUxFVEVdID0gT3JkZXJlZE1hcC5wcm90b3R5cGUucmVtb3ZlO1xuXHRcblx0XG5cdFxuXHQgIGZ1bmN0aW9uIG1ha2VPcmRlcmVkTWFwKG1hcCwgbGlzdCwgb3duZXJJRCwgaGFzaCkge1xuXHQgICAgdmFyIG9tYXAgPSBPYmplY3QuY3JlYXRlKE9yZGVyZWRNYXAucHJvdG90eXBlKTtcblx0ICAgIG9tYXAuc2l6ZSA9IG1hcCA/IG1hcC5zaXplIDogMDtcblx0ICAgIG9tYXAuX21hcCA9IG1hcDtcblx0ICAgIG9tYXAuX2xpc3QgPSBsaXN0O1xuXHQgICAgb21hcC5fX293bmVySUQgPSBvd25lcklEO1xuXHQgICAgb21hcC5fX2hhc2ggPSBoYXNoO1xuXHQgICAgcmV0dXJuIG9tYXA7XG5cdCAgfVxuXHRcblx0ICB2YXIgRU1QVFlfT1JERVJFRF9NQVA7XG5cdCAgZnVuY3Rpb24gZW1wdHlPcmRlcmVkTWFwKCkge1xuXHQgICAgcmV0dXJuIEVNUFRZX09SREVSRURfTUFQIHx8IChFTVBUWV9PUkRFUkVEX01BUCA9IG1ha2VPcmRlcmVkTWFwKGVtcHR5TWFwKCksIGVtcHR5TGlzdCgpKSk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiB1cGRhdGVPcmRlcmVkTWFwKG9tYXAsIGssIHYpIHtcblx0ICAgIHZhciBtYXAgPSBvbWFwLl9tYXA7XG5cdCAgICB2YXIgbGlzdCA9IG9tYXAuX2xpc3Q7XG5cdCAgICB2YXIgaSA9IG1hcC5nZXQoayk7XG5cdCAgICB2YXIgaGFzID0gaSAhPT0gdW5kZWZpbmVkO1xuXHQgICAgdmFyIG5ld01hcDtcblx0ICAgIHZhciBuZXdMaXN0O1xuXHQgICAgaWYgKHYgPT09IE5PVF9TRVQpIHsgLy8gcmVtb3ZlZFxuXHQgICAgICBpZiAoIWhhcykge1xuXHQgICAgICAgIHJldHVybiBvbWFwO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChsaXN0LnNpemUgPj0gU0laRSAmJiBsaXN0LnNpemUgPj0gbWFwLnNpemUgKiAyKSB7XG5cdCAgICAgICAgbmV3TGlzdCA9IGxpc3QuZmlsdGVyKGZ1bmN0aW9uKGVudHJ5LCBpZHgpICB7cmV0dXJuIGVudHJ5ICE9PSB1bmRlZmluZWQgJiYgaSAhPT0gaWR4fSk7XG5cdCAgICAgICAgbmV3TWFwID0gbmV3TGlzdC50b0tleWVkU2VxKCkubWFwKGZ1bmN0aW9uKGVudHJ5ICkge3JldHVybiBlbnRyeVswXX0pLmZsaXAoKS50b01hcCgpO1xuXHQgICAgICAgIGlmIChvbWFwLl9fb3duZXJJRCkge1xuXHQgICAgICAgICAgbmV3TWFwLl9fb3duZXJJRCA9IG5ld0xpc3QuX19vd25lcklEID0gb21hcC5fX293bmVySUQ7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIG5ld01hcCA9IG1hcC5yZW1vdmUoayk7XG5cdCAgICAgICAgbmV3TGlzdCA9IGkgPT09IGxpc3Quc2l6ZSAtIDEgPyBsaXN0LnBvcCgpIDogbGlzdC5zZXQoaSwgdW5kZWZpbmVkKTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgaWYgKGhhcykge1xuXHQgICAgICAgIGlmICh2ID09PSBsaXN0LmdldChpKVsxXSkge1xuXHQgICAgICAgICAgcmV0dXJuIG9tYXA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIG5ld01hcCA9IG1hcDtcblx0ICAgICAgICBuZXdMaXN0ID0gbGlzdC5zZXQoaSwgW2ssIHZdKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBuZXdNYXAgPSBtYXAuc2V0KGssIGxpc3Quc2l6ZSk7XG5cdCAgICAgICAgbmV3TGlzdCA9IGxpc3Quc2V0KGxpc3Quc2l6ZSwgW2ssIHZdKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgaWYgKG9tYXAuX19vd25lcklEKSB7XG5cdCAgICAgIG9tYXAuc2l6ZSA9IG5ld01hcC5zaXplO1xuXHQgICAgICBvbWFwLl9tYXAgPSBuZXdNYXA7XG5cdCAgICAgIG9tYXAuX2xpc3QgPSBuZXdMaXN0O1xuXHQgICAgICBvbWFwLl9faGFzaCA9IHVuZGVmaW5lZDtcblx0ICAgICAgcmV0dXJuIG9tYXA7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbWFrZU9yZGVyZWRNYXAobmV3TWFwLCBuZXdMaXN0KTtcblx0ICB9XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKFN0YWNrLCBJbmRleGVkQ29sbGVjdGlvbik7XG5cdFxuXHQgICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblx0XG5cdCAgICBmdW5jdGlvbiBTdGFjayh2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5U3RhY2soKSA6XG5cdCAgICAgICAgaXNTdGFjayh2YWx1ZSkgPyB2YWx1ZSA6XG5cdCAgICAgICAgZW1wdHlTdGFjaygpLnVuc2hpZnRBbGwodmFsdWUpO1xuXHQgICAgfVxuXHRcblx0ICAgIFN0YWNrLm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuXHQgICAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTdGFjay5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnU3RhY2sgWycsICddJyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIEBwcmFnbWEgQWNjZXNzXG5cdFxuXHQgICAgU3RhY2sucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuXHQgICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG5cdCAgICAgIHdoaWxlIChoZWFkICYmIGluZGV4LS0pIHtcblx0ICAgICAgICBoZWFkID0gaGVhZC5uZXh0O1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBoZWFkID8gaGVhZC52YWx1ZSA6IG5vdFNldFZhbHVlO1xuXHQgICAgfTtcblx0XG5cdCAgICBTdGFjay5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5faGVhZCAmJiB0aGlzLl9oZWFkLnZhbHVlO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXHRcblx0ICAgIFN0YWNrLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuXHQgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBuZXdTaXplID0gdGhpcy5zaXplICsgYXJndW1lbnRzLmxlbmd0aDtcblx0ICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuXHQgICAgICBmb3IgKHZhciBpaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpaSA+PSAwOyBpaS0tKSB7XG5cdCAgICAgICAgaGVhZCA9IHtcblx0ICAgICAgICAgIHZhbHVlOiBhcmd1bWVudHNbaWldLFxuXHQgICAgICAgICAgbmV4dDogaGVhZFxuXHQgICAgICAgIH07XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG5cdCAgICAgICAgdGhpcy5zaXplID0gbmV3U2l6ZTtcblx0ICAgICAgICB0aGlzLl9oZWFkID0gaGVhZDtcblx0ICAgICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcblx0ICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG1ha2VTdGFjayhuZXdTaXplLCBoZWFkKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU3RhY2sucHJvdG90eXBlLnB1c2hBbGwgPSBmdW5jdGlvbihpdGVyKSB7XG5cdCAgICAgIGl0ZXIgPSBJbmRleGVkSXRlcmFibGUoaXRlcik7XG5cdCAgICAgIGlmIChpdGVyLnNpemUgPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuXHQgICAgICB2YXIgbmV3U2l6ZSA9IHRoaXMuc2l6ZTtcblx0ICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuXHQgICAgICBpdGVyLnJldmVyc2UoKS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlICkge1xuXHQgICAgICAgIG5ld1NpemUrKztcblx0ICAgICAgICBoZWFkID0ge1xuXHQgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuXHQgICAgICAgICAgbmV4dDogaGVhZFxuXHQgICAgICAgIH07XG5cdCAgICAgIH0pO1xuXHQgICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcblx0ICAgICAgICB0aGlzLnNpemUgPSBuZXdTaXplO1xuXHQgICAgICAgIHRoaXMuX2hlYWQgPSBoZWFkO1xuXHQgICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuXHQgICAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gbWFrZVN0YWNrKG5ld1NpemUsIGhlYWQpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTdGFjay5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnNsaWNlKDEpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTdGFjay5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcblx0ICAgICAgcmV0dXJuIHRoaXMucHVzaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTdGFjay5wcm90b3R5cGUudW5zaGlmdEFsbCA9IGZ1bmN0aW9uKGl0ZXIpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMucHVzaEFsbChpdGVyKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU3RhY2sucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnBvcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTdGFjay5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuXHQgICAgICAgIHRoaXMuc2l6ZSA9IDA7XG5cdCAgICAgICAgdGhpcy5faGVhZCA9IHVuZGVmaW5lZDtcblx0ICAgICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcblx0ICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGVtcHR5U3RhY2soKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU3RhY2sucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuXHQgICAgICBpZiAod2hvbGVTbGljZShiZWdpbiwgZW5kLCB0aGlzLnNpemUpKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHJlc29sdmVkQmVnaW4gPSByZXNvbHZlQmVnaW4oYmVnaW4sIHRoaXMuc2l6ZSk7XG5cdCAgICAgIHZhciByZXNvbHZlZEVuZCA9IHJlc29sdmVFbmQoZW5kLCB0aGlzLnNpemUpO1xuXHQgICAgICBpZiAocmVzb2x2ZWRFbmQgIT09IHRoaXMuc2l6ZSkge1xuXHQgICAgICAgIC8vIHN1cGVyLnNsaWNlKGJlZ2luLCBlbmQpO1xuXHQgICAgICAgIHJldHVybiBJbmRleGVkQ29sbGVjdGlvbi5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgbmV3U2l6ZSA9IHRoaXMuc2l6ZSAtIHJlc29sdmVkQmVnaW47XG5cdCAgICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcblx0ICAgICAgd2hpbGUgKHJlc29sdmVkQmVnaW4tLSkge1xuXHQgICAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG5cdCAgICAgICAgdGhpcy5zaXplID0gbmV3U2l6ZTtcblx0ICAgICAgICB0aGlzLl9oZWFkID0gaGVhZDtcblx0ICAgICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcblx0ICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG1ha2VTdGFjayhuZXdTaXplLCBoZWFkKTtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gQHByYWdtYSBNdXRhYmlsaXR5XG5cdFxuXHQgICAgU3RhY2sucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbihvd25lcklEKSB7XG5cdCAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICghb3duZXJJRCkge1xuXHQgICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcblx0ICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IGZhbHNlO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBtYWtlU3RhY2sodGhpcy5zaXplLCB0aGlzLl9oZWFkLCBvd25lcklELCB0aGlzLl9faGFzaCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIEBwcmFnbWEgSXRlcmF0aW9uXG5cdFxuXHQgICAgU3RhY2sucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG5cdCAgICAgIGlmIChyZXZlcnNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMudG9TZXEoKS5jYWNoZVJlc3VsdC5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgdmFyIG5vZGUgPSB0aGlzLl9oZWFkO1xuXHQgICAgICB3aGlsZSAobm9kZSkge1xuXHQgICAgICAgIGlmIChmbihub2RlLnZhbHVlLCBpdGVyYXRpb25zKyssIHRoaXMpID09PSBmYWxzZSkge1xuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG5cdCAgICB9O1xuXHRcblx0ICAgIFN0YWNrLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICBpZiAocmV2ZXJzZSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgdmFyIG5vZGUgPSB0aGlzLl9oZWFkO1xuXHQgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcblx0ICAgICAgICBpZiAobm9kZSkge1xuXHQgICAgICAgICAgdmFyIHZhbHVlID0gbm9kZS52YWx1ZTtcblx0ICAgICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG5cdCAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBpc1N0YWNrKG1heWJlU3RhY2spIHtcblx0ICAgIHJldHVybiAhIShtYXliZVN0YWNrICYmIG1heWJlU3RhY2tbSVNfU1RBQ0tfU0VOVElORUxdKTtcblx0ICB9XG5cdFxuXHQgIFN0YWNrLmlzU3RhY2sgPSBpc1N0YWNrO1xuXHRcblx0ICB2YXIgSVNfU1RBQ0tfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9TVEFDS19fQEAnO1xuXHRcblx0ICB2YXIgU3RhY2tQcm90b3R5cGUgPSBTdGFjay5wcm90b3R5cGU7XG5cdCAgU3RhY2tQcm90b3R5cGVbSVNfU1RBQ0tfU0VOVElORUxdID0gdHJ1ZTtcblx0ICBTdGFja1Byb3RvdHlwZS53aXRoTXV0YXRpb25zID0gTWFwUHJvdG90eXBlLndpdGhNdXRhdGlvbnM7XG5cdCAgU3RhY2tQcm90b3R5cGUuYXNNdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzTXV0YWJsZTtcblx0ICBTdGFja1Byb3RvdHlwZS5hc0ltbXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc0ltbXV0YWJsZTtcblx0ICBTdGFja1Byb3RvdHlwZS53YXNBbHRlcmVkID0gTWFwUHJvdG90eXBlLndhc0FsdGVyZWQ7XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBtYWtlU3RhY2soc2l6ZSwgaGVhZCwgb3duZXJJRCwgaGFzaCkge1xuXHQgICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUoU3RhY2tQcm90b3R5cGUpO1xuXHQgICAgbWFwLnNpemUgPSBzaXplO1xuXHQgICAgbWFwLl9oZWFkID0gaGVhZDtcblx0ICAgIG1hcC5fX293bmVySUQgPSBvd25lcklEO1xuXHQgICAgbWFwLl9faGFzaCA9IGhhc2g7XG5cdCAgICBtYXAuX19hbHRlcmVkID0gZmFsc2U7XG5cdCAgICByZXR1cm4gbWFwO1xuXHQgIH1cblx0XG5cdCAgdmFyIEVNUFRZX1NUQUNLO1xuXHQgIGZ1bmN0aW9uIGVtcHR5U3RhY2soKSB7XG5cdCAgICByZXR1cm4gRU1QVFlfU1RBQ0sgfHwgKEVNUFRZX1NUQUNLID0gbWFrZVN0YWNrKDApKTtcblx0ICB9XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKFNldCwgU2V0Q29sbGVjdGlvbik7XG5cdFxuXHQgICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblx0XG5cdCAgICBmdW5jdGlvbiBTZXQodmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eVNldCgpIDpcblx0ICAgICAgICBpc1NldCh2YWx1ZSkgPyB2YWx1ZSA6XG5cdCAgICAgICAgZW1wdHlTZXQoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcblx0ICAgICAgICAgIHZhciBpdGVyID0gU2V0SXRlcmFibGUodmFsdWUpO1xuXHQgICAgICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcblx0ICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2ICkge3JldHVybiBzZXQuYWRkKHYpfSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdFxuXHQgICAgU2V0Lm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuXHQgICAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTZXQuZnJvbUtleXMgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gdGhpcyhLZXllZEl0ZXJhYmxlKHZhbHVlKS5rZXlTZXEoKSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFNldC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnU2V0IHsnLCAnfScpO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXHRcblx0ICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX21hcC5oYXModmFsdWUpO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXHRcblx0ICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHVwZGF0ZVNldCh0aGlzLCB0aGlzLl9tYXAuc2V0KHZhbHVlLCB0cnVlKSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFNldC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHVwZGF0ZVNldCh0aGlzLCB0aGlzLl9tYXAucmVtb3ZlKHZhbHVlKSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHVwZGF0ZVNldCh0aGlzLCB0aGlzLl9tYXAuY2xlYXIoKSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIEBwcmFnbWEgQ29tcG9zaXRpb25cblx0XG5cdCAgICBTZXQucHJvdG90eXBlLnVuaW9uID0gZnVuY3Rpb24oKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMCk7XG5cdCAgICAgIGl0ZXJzID0gaXRlcnMuZmlsdGVyKGZ1bmN0aW9uKHggKSB7cmV0dXJuIHguc2l6ZSAhPT0gMH0pO1xuXHQgICAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCAmJiBpdGVycy5sZW5ndGggPT09IDEpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcihpdGVyc1swXSk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbihzZXQgKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGl0ZXJzLmxlbmd0aDsgaWkrKykge1xuXHQgICAgICAgICAgU2V0SXRlcmFibGUoaXRlcnNbaWldKS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBzZXQuYWRkKHZhbHVlKX0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFNldC5wcm90b3R5cGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24oKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMCk7XG5cdCAgICAgIGlmIChpdGVycy5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICBpdGVycyA9IGl0ZXJzLm1hcChmdW5jdGlvbihpdGVyICkge3JldHVybiBTZXRJdGVyYWJsZShpdGVyKX0pO1xuXHQgICAgICB2YXIgb3JpZ2luYWxTZXQgPSB0aGlzO1xuXHQgICAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcblx0ICAgICAgICBvcmlnaW5hbFNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlICkge1xuXHQgICAgICAgICAgaWYgKCFpdGVycy5ldmVyeShmdW5jdGlvbihpdGVyICkge3JldHVybiBpdGVyLmNvbnRhaW5zKHZhbHVlKX0pKSB7XG5cdCAgICAgICAgICAgIHNldC5yZW1vdmUodmFsdWUpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgU2V0LnByb3RvdHlwZS5zdWJ0cmFjdCA9IGZ1bmN0aW9uKCkge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDApO1xuXHQgICAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgaXRlcnMgPSBpdGVycy5tYXAoZnVuY3Rpb24oaXRlciApIHtyZXR1cm4gU2V0SXRlcmFibGUoaXRlcil9KTtcblx0ICAgICAgdmFyIG9yaWdpbmFsU2V0ID0gdGhpcztcblx0ICAgICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbihzZXQgKSB7XG5cdCAgICAgICAgb3JpZ2luYWxTZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSApIHtcblx0ICAgICAgICAgIGlmIChpdGVycy5zb21lKGZ1bmN0aW9uKGl0ZXIgKSB7cmV0dXJuIGl0ZXIuY29udGFpbnModmFsdWUpfSkpIHtcblx0ICAgICAgICAgICAgc2V0LnJlbW92ZSh2YWx1ZSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBTZXQucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnVuaW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFNldC5wcm90b3R5cGUubWVyZ2VXaXRoID0gZnVuY3Rpb24obWVyZ2VyKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG5cdCAgICAgIHJldHVybiB0aGlzLnVuaW9uLmFwcGx5KHRoaXMsIGl0ZXJzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU2V0LnByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24oY29tcGFyYXRvcikge1xuXHQgICAgICAvLyBMYXRlIGJpbmRpbmdcblx0ICAgICAgcmV0dXJuIE9yZGVyZWRTZXQoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvcikpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTZXQucHJvdG90eXBlLnNvcnRCeSA9IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuXHQgICAgICAvLyBMYXRlIGJpbmRpbmdcblx0ICAgICAgcmV0dXJuIE9yZGVyZWRTZXQoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvciwgbWFwcGVyKSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFNldC5wcm90b3R5cGUud2FzQWx0ZXJlZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fbWFwLndhc0FsdGVyZWQoKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU2V0LnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICByZXR1cm4gdGhpcy5fbWFwLl9faXRlcmF0ZShmdW5jdGlvbihfLCBrKSAge3JldHVybiBmbihrLCBrLCB0aGlzJDApfSwgcmV2ZXJzZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFNldC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX21hcC5tYXAoZnVuY3Rpb24oXywgaykgIHtyZXR1cm4ga30pLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFNldC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcblx0ICAgICAgaWYgKG93bmVySUQgPT09IHRoaXMuX19vd25lcklEKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIG5ld01hcCA9IHRoaXMuX21hcC5fX2Vuc3VyZU93bmVyKG93bmVySUQpO1xuXHQgICAgICBpZiAoIW93bmVySUQpIHtcblx0ICAgICAgICB0aGlzLl9fb3duZXJJRCA9IG93bmVySUQ7XG5cdCAgICAgICAgdGhpcy5fbWFwID0gbmV3TWFwO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiB0aGlzLl9fbWFrZShuZXdNYXAsIG93bmVySUQpO1xuXHQgICAgfTtcblx0XG5cdFxuXHQgIGZ1bmN0aW9uIGlzU2V0KG1heWJlU2V0KSB7XG5cdCAgICByZXR1cm4gISEobWF5YmVTZXQgJiYgbWF5YmVTZXRbSVNfU0VUX1NFTlRJTkVMXSk7XG5cdCAgfVxuXHRcblx0ICBTZXQuaXNTZXQgPSBpc1NldDtcblx0XG5cdCAgdmFyIElTX1NFVF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX1NFVF9fQEAnO1xuXHRcblx0ICB2YXIgU2V0UHJvdG90eXBlID0gU2V0LnByb3RvdHlwZTtcblx0ICBTZXRQcm90b3R5cGVbSVNfU0VUX1NFTlRJTkVMXSA9IHRydWU7XG5cdCAgU2V0UHJvdG90eXBlW0RFTEVURV0gPSBTZXRQcm90b3R5cGUucmVtb3ZlO1xuXHQgIFNldFByb3RvdHlwZS5tZXJnZURlZXAgPSBTZXRQcm90b3R5cGUubWVyZ2U7XG5cdCAgU2V0UHJvdG90eXBlLm1lcmdlRGVlcFdpdGggPSBTZXRQcm90b3R5cGUubWVyZ2VXaXRoO1xuXHQgIFNldFByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gTWFwUHJvdG90eXBlLndpdGhNdXRhdGlvbnM7XG5cdCAgU2V0UHJvdG90eXBlLmFzTXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc011dGFibGU7XG5cdCAgU2V0UHJvdG90eXBlLmFzSW1tdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzSW1tdXRhYmxlO1xuXHRcblx0ICBTZXRQcm90b3R5cGUuX19lbXB0eSA9IGVtcHR5U2V0O1xuXHQgIFNldFByb3RvdHlwZS5fX21ha2UgPSBtYWtlU2V0O1xuXHRcblx0ICBmdW5jdGlvbiB1cGRhdGVTZXQoc2V0LCBuZXdNYXApIHtcblx0ICAgIGlmIChzZXQuX19vd25lcklEKSB7XG5cdCAgICAgIHNldC5zaXplID0gbmV3TWFwLnNpemU7XG5cdCAgICAgIHNldC5fbWFwID0gbmV3TWFwO1xuXHQgICAgICByZXR1cm4gc2V0O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5ld01hcCA9PT0gc2V0Ll9tYXAgPyBzZXQgOlxuXHQgICAgICBuZXdNYXAuc2l6ZSA9PT0gMCA/IHNldC5fX2VtcHR5KCkgOlxuXHQgICAgICBzZXQuX19tYWtlKG5ld01hcCk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBtYWtlU2V0KG1hcCwgb3duZXJJRCkge1xuXHQgICAgdmFyIHNldCA9IE9iamVjdC5jcmVhdGUoU2V0UHJvdG90eXBlKTtcblx0ICAgIHNldC5zaXplID0gbWFwID8gbWFwLnNpemUgOiAwO1xuXHQgICAgc2V0Ll9tYXAgPSBtYXA7XG5cdCAgICBzZXQuX19vd25lcklEID0gb3duZXJJRDtcblx0ICAgIHJldHVybiBzZXQ7XG5cdCAgfVxuXHRcblx0ICB2YXIgRU1QVFlfU0VUO1xuXHQgIGZ1bmN0aW9uIGVtcHR5U2V0KCkge1xuXHQgICAgcmV0dXJuIEVNUFRZX1NFVCB8fCAoRU1QVFlfU0VUID0gbWFrZVNldChlbXB0eU1hcCgpKSk7XG5cdCAgfVxuXHRcblx0ICBjcmVhdGVDbGFzcyhPcmRlcmVkU2V0LCBTZXQpO1xuXHRcblx0ICAgIC8vIEBwcmFnbWEgQ29uc3RydWN0aW9uXG5cdFxuXHQgICAgZnVuY3Rpb24gT3JkZXJlZFNldCh2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5T3JkZXJlZFNldCgpIDpcblx0ICAgICAgICBpc09yZGVyZWRTZXQodmFsdWUpID8gdmFsdWUgOlxuXHQgICAgICAgIGVtcHR5T3JkZXJlZFNldCgpLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24oc2V0ICkge1xuXHQgICAgICAgICAgdmFyIGl0ZXIgPSBTZXRJdGVyYWJsZSh2YWx1ZSk7XG5cdCAgICAgICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuXHQgICAgICAgICAgaXRlci5mb3JFYWNoKGZ1bmN0aW9uKHYgKSB7cmV0dXJuIHNldC5hZGQodil9KTtcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0XG5cdCAgICBPcmRlcmVkU2V0Lm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuXHQgICAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuXHQgICAgfTtcblx0XG5cdCAgICBPcmRlcmVkU2V0LmZyb21LZXlzID0gZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMoS2V5ZWRJdGVyYWJsZSh2YWx1ZSkua2V5U2VxKCkpO1xuXHQgICAgfTtcblx0XG5cdCAgICBPcmRlcmVkU2V0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdPcmRlcmVkU2V0IHsnLCAnfScpO1xuXHQgICAgfTtcblx0XG5cdFxuXHQgIGZ1bmN0aW9uIGlzT3JkZXJlZFNldChtYXliZU9yZGVyZWRTZXQpIHtcblx0ICAgIHJldHVybiBpc1NldChtYXliZU9yZGVyZWRTZXQpICYmIGlzT3JkZXJlZChtYXliZU9yZGVyZWRTZXQpO1xuXHQgIH1cblx0XG5cdCAgT3JkZXJlZFNldC5pc09yZGVyZWRTZXQgPSBpc09yZGVyZWRTZXQ7XG5cdFxuXHQgIHZhciBPcmRlcmVkU2V0UHJvdG90eXBlID0gT3JkZXJlZFNldC5wcm90b3R5cGU7XG5cdCAgT3JkZXJlZFNldFByb3RvdHlwZVtJU19PUkRFUkVEX1NFTlRJTkVMXSA9IHRydWU7XG5cdFxuXHQgIE9yZGVyZWRTZXRQcm90b3R5cGUuX19lbXB0eSA9IGVtcHR5T3JkZXJlZFNldDtcblx0ICBPcmRlcmVkU2V0UHJvdG90eXBlLl9fbWFrZSA9IG1ha2VPcmRlcmVkU2V0O1xuXHRcblx0ICBmdW5jdGlvbiBtYWtlT3JkZXJlZFNldChtYXAsIG93bmVySUQpIHtcblx0ICAgIHZhciBzZXQgPSBPYmplY3QuY3JlYXRlKE9yZGVyZWRTZXRQcm90b3R5cGUpO1xuXHQgICAgc2V0LnNpemUgPSBtYXAgPyBtYXAuc2l6ZSA6IDA7XG5cdCAgICBzZXQuX21hcCA9IG1hcDtcblx0ICAgIHNldC5fX293bmVySUQgPSBvd25lcklEO1xuXHQgICAgcmV0dXJuIHNldDtcblx0ICB9XG5cdFxuXHQgIHZhciBFTVBUWV9PUkRFUkVEX1NFVDtcblx0ICBmdW5jdGlvbiBlbXB0eU9yZGVyZWRTZXQoKSB7XG5cdCAgICByZXR1cm4gRU1QVFlfT1JERVJFRF9TRVQgfHwgKEVNUFRZX09SREVSRURfU0VUID0gbWFrZU9yZGVyZWRTZXQoZW1wdHlPcmRlcmVkTWFwKCkpKTtcblx0ICB9XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKFJlY29yZCwgS2V5ZWRDb2xsZWN0aW9uKTtcblx0XG5cdCAgICBmdW5jdGlvbiBSZWNvcmQoZGVmYXVsdFZhbHVlcywgbmFtZSkge1xuXHQgICAgICB2YXIgUmVjb3JkVHlwZSA9IGZ1bmN0aW9uIFJlY29yZCh2YWx1ZXMpIHtcblx0ICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVjb3JkVHlwZSkpIHtcblx0ICAgICAgICAgIHJldHVybiBuZXcgUmVjb3JkVHlwZSh2YWx1ZXMpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9tYXAgPSBNYXAodmFsdWVzKTtcblx0ICAgICAgfTtcblx0XG5cdCAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGVmYXVsdFZhbHVlcyk7XG5cdFxuXHQgICAgICB2YXIgUmVjb3JkVHlwZVByb3RvdHlwZSA9IFJlY29yZFR5cGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShSZWNvcmRQcm90b3R5cGUpO1xuXHQgICAgICBSZWNvcmRUeXBlUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVjb3JkVHlwZTtcblx0ICAgICAgbmFtZSAmJiAoUmVjb3JkVHlwZVByb3RvdHlwZS5fbmFtZSA9IG5hbWUpO1xuXHQgICAgICBSZWNvcmRUeXBlUHJvdG90eXBlLl9kZWZhdWx0VmFsdWVzID0gZGVmYXVsdFZhbHVlcztcblx0ICAgICAgUmVjb3JkVHlwZVByb3RvdHlwZS5fa2V5cyA9IGtleXM7XG5cdCAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuc2l6ZSA9IGtleXMubGVuZ3RoO1xuXHRcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5ICkge1xuXHQgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29yZFR5cGUucHJvdG90eXBlLCBrZXksIHtcblx0ICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5KTtcblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgICAgICAgICAgIGludmFyaWFudCh0aGlzLl9fb3duZXJJRCwgJ0Nhbm5vdCBzZXQgb24gYW4gaW1tdXRhYmxlIHJlY29yZC4nKTtcblx0ICAgICAgICAgICAgICB0aGlzLnNldChrZXksIHZhbHVlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG5cdCAgICAgICAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnR5IGZhaWxlZC4gUHJvYmFibHkgSUU4LlxuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gUmVjb3JkVHlwZTtcblx0ICAgIH1cblx0XG5cdCAgICBSZWNvcmQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcocmVjb3JkTmFtZSh0aGlzKSArICcgeycsICd9Jyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIEBwcmFnbWEgQWNjZXNzXG5cdFxuXHQgICAgUmVjb3JkLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihrKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0VmFsdWVzLmhhc093blByb3BlcnR5KGspO1xuXHQgICAgfTtcblx0XG5cdCAgICBSZWNvcmQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGssIG5vdFNldFZhbHVlKSB7XG5cdCAgICAgIGlmICghdGhpcy5oYXMoaykpIHtcblx0ICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGRlZmF1bHRWYWwgPSB0aGlzLl9kZWZhdWx0VmFsdWVzW2tdO1xuXHQgICAgICByZXR1cm4gdGhpcy5fbWFwID8gdGhpcy5fbWFwLmdldChrLCBkZWZhdWx0VmFsKSA6IGRlZmF1bHRWYWw7XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cdFxuXHQgICAgUmVjb3JkLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcblx0ICAgICAgICB0aGlzLl9tYXAgJiYgdGhpcy5fbWFwLmNsZWFyKCk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIFN1cGVyUmVjb3JkID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yO1xuXHQgICAgICByZXR1cm4gU3VwZXJSZWNvcmQuX2VtcHR5IHx8IChTdXBlclJlY29yZC5fZW1wdHkgPSBtYWtlUmVjb3JkKHRoaXMsIGVtcHR5TWFwKCkpKTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmVjb3JkLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrLCB2KSB7XG5cdCAgICAgIGlmICghdGhpcy5oYXMoaykpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzZXQgdW5rbm93biBrZXkgXCInICsgayArICdcIiBvbiAnICsgcmVjb3JkTmFtZSh0aGlzKSk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIG5ld01hcCA9IHRoaXMuX21hcCAmJiB0aGlzLl9tYXAuc2V0KGssIHYpO1xuXHQgICAgICBpZiAodGhpcy5fX293bmVySUQgfHwgbmV3TWFwID09PSB0aGlzLl9tYXApIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gbWFrZVJlY29yZCh0aGlzLCBuZXdNYXApO1xuXHQgICAgfTtcblx0XG5cdCAgICBSZWNvcmQucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGspIHtcblx0ICAgICAgaWYgKCF0aGlzLmhhcyhrKSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAgJiYgdGhpcy5fbWFwLnJlbW92ZShrKTtcblx0ICAgICAgaWYgKHRoaXMuX19vd25lcklEIHx8IG5ld01hcCA9PT0gdGhpcy5fbWFwKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3TWFwKTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmVjb3JkLnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9tYXAud2FzQWx0ZXJlZCgpO1xuXHQgICAgfTtcblx0XG5cdCAgICBSZWNvcmQucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG5cdCAgICAgIHJldHVybiBLZXllZEl0ZXJhYmxlKHRoaXMuX2RlZmF1bHRWYWx1ZXMpLm1hcChmdW5jdGlvbihfLCBrKSAge3JldHVybiB0aGlzJDAuZ2V0KGspfSkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmVjb3JkLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICByZXR1cm4gS2V5ZWRJdGVyYWJsZSh0aGlzLl9kZWZhdWx0VmFsdWVzKS5tYXAoZnVuY3Rpb24oXywgaykgIHtyZXR1cm4gdGhpcyQwLmdldChrKX0pLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJlY29yZC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcblx0ICAgICAgaWYgKG93bmVySUQgPT09IHRoaXMuX19vd25lcklEKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIG5ld01hcCA9IHRoaXMuX21hcCAmJiB0aGlzLl9tYXAuX19lbnN1cmVPd25lcihvd25lcklEKTtcblx0ICAgICAgaWYgKCFvd25lcklEKSB7XG5cdCAgICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuXHQgICAgICAgIHRoaXMuX21hcCA9IG5ld01hcDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gbWFrZVJlY29yZCh0aGlzLCBuZXdNYXAsIG93bmVySUQpO1xuXHQgICAgfTtcblx0XG5cdFxuXHQgIHZhciBSZWNvcmRQcm90b3R5cGUgPSBSZWNvcmQucHJvdG90eXBlO1xuXHQgIFJlY29yZFByb3RvdHlwZVtERUxFVEVdID0gUmVjb3JkUHJvdG90eXBlLnJlbW92ZTtcblx0ICBSZWNvcmRQcm90b3R5cGUuZGVsZXRlSW4gPVxuXHQgIFJlY29yZFByb3RvdHlwZS5yZW1vdmVJbiA9IE1hcFByb3RvdHlwZS5yZW1vdmVJbjtcblx0ICBSZWNvcmRQcm90b3R5cGUubWVyZ2UgPSBNYXBQcm90b3R5cGUubWVyZ2U7XG5cdCAgUmVjb3JkUHJvdG90eXBlLm1lcmdlV2l0aCA9IE1hcFByb3RvdHlwZS5tZXJnZVdpdGg7XG5cdCAgUmVjb3JkUHJvdG90eXBlLm1lcmdlSW4gPSBNYXBQcm90b3R5cGUubWVyZ2VJbjtcblx0ICBSZWNvcmRQcm90b3R5cGUubWVyZ2VEZWVwID0gTWFwUHJvdG90eXBlLm1lcmdlRGVlcDtcblx0ICBSZWNvcmRQcm90b3R5cGUubWVyZ2VEZWVwV2l0aCA9IE1hcFByb3RvdHlwZS5tZXJnZURlZXBXaXRoO1xuXHQgIFJlY29yZFByb3RvdHlwZS5tZXJnZURlZXBJbiA9IE1hcFByb3RvdHlwZS5tZXJnZURlZXBJbjtcblx0ICBSZWNvcmRQcm90b3R5cGUuc2V0SW4gPSBNYXBQcm90b3R5cGUuc2V0SW47XG5cdCAgUmVjb3JkUHJvdG90eXBlLnVwZGF0ZSA9IE1hcFByb3RvdHlwZS51cGRhdGU7XG5cdCAgUmVjb3JkUHJvdG90eXBlLnVwZGF0ZUluID0gTWFwUHJvdG90eXBlLnVwZGF0ZUluO1xuXHQgIFJlY29yZFByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gTWFwUHJvdG90eXBlLndpdGhNdXRhdGlvbnM7XG5cdCAgUmVjb3JkUHJvdG90eXBlLmFzTXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc011dGFibGU7XG5cdCAgUmVjb3JkUHJvdG90eXBlLmFzSW1tdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzSW1tdXRhYmxlO1xuXHRcblx0XG5cdCAgZnVuY3Rpb24gbWFrZVJlY29yZChsaWtlUmVjb3JkLCBtYXAsIG93bmVySUQpIHtcblx0ICAgIHZhciByZWNvcmQgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihsaWtlUmVjb3JkKSk7XG5cdCAgICByZWNvcmQuX21hcCA9IG1hcDtcblx0ICAgIHJlY29yZC5fX293bmVySUQgPSBvd25lcklEO1xuXHQgICAgcmV0dXJuIHJlY29yZDtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHJlY29yZE5hbWUocmVjb3JkKSB7XG5cdCAgICByZXR1cm4gcmVjb3JkLl9uYW1lIHx8IHJlY29yZC5jb25zdHJ1Y3Rvci5uYW1lO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gZGVlcEVxdWFsKGEsIGIpIHtcblx0ICAgIGlmIChhID09PSBiKSB7XG5cdCAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmIChcblx0ICAgICAgIWlzSXRlcmFibGUoYikgfHxcblx0ICAgICAgYS5zaXplICE9PSB1bmRlZmluZWQgJiYgYi5zaXplICE9PSB1bmRlZmluZWQgJiYgYS5zaXplICE9PSBiLnNpemUgfHxcblx0ICAgICAgYS5fX2hhc2ggIT09IHVuZGVmaW5lZCAmJiBiLl9faGFzaCAhPT0gdW5kZWZpbmVkICYmIGEuX19oYXNoICE9PSBiLl9faGFzaCB8fFxuXHQgICAgICBpc0tleWVkKGEpICE9PSBpc0tleWVkKGIpIHx8XG5cdCAgICAgIGlzSW5kZXhlZChhKSAhPT0gaXNJbmRleGVkKGIpIHx8XG5cdCAgICAgIGlzT3JkZXJlZChhKSAhPT0gaXNPcmRlcmVkKGIpXG5cdCAgICApIHtcblx0ICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmIChhLnNpemUgPT09IDAgJiYgYi5zaXplID09PSAwKSB7XG5cdCAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBub3RBc3NvY2lhdGl2ZSA9ICFpc0Fzc29jaWF0aXZlKGEpO1xuXHRcblx0ICAgIGlmIChpc09yZGVyZWQoYSkpIHtcblx0ICAgICAgdmFyIGVudHJpZXMgPSBhLmVudHJpZXMoKTtcblx0ICAgICAgcmV0dXJuIGIuZXZlcnkoZnVuY3Rpb24odiwgaykgIHtcblx0ICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzLm5leHQoKS52YWx1ZTtcblx0ICAgICAgICByZXR1cm4gZW50cnkgJiYgaXMoZW50cnlbMV0sIHYpICYmIChub3RBc3NvY2lhdGl2ZSB8fCBpcyhlbnRyeVswXSwgaykpO1xuXHQgICAgICB9KSAmJiBlbnRyaWVzLm5leHQoKS5kb25lO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBmbGlwcGVkID0gZmFsc2U7XG5cdFxuXHQgICAgaWYgKGEuc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgIGlmIChiLnNpemUgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIGEuY2FjaGVSZXN1bHQoKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBmbGlwcGVkID0gdHJ1ZTtcblx0ICAgICAgICB2YXIgXyA9IGE7XG5cdCAgICAgICAgYSA9IGI7XG5cdCAgICAgICAgYiA9IF87XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICB2YXIgYWxsRXF1YWwgPSB0cnVlO1xuXHQgICAgdmFyIGJTaXplID0gYi5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtcblx0ICAgICAgaWYgKG5vdEFzc29jaWF0aXZlID8gIWEuaGFzKHYpIDpcblx0ICAgICAgICAgIGZsaXBwZWQgPyAhaXModiwgYS5nZXQoaywgTk9UX1NFVCkpIDogIWlzKGEuZ2V0KGssIE5PVF9TRVQpLCB2KSkge1xuXHQgICAgICAgIGFsbEVxdWFsID0gZmFsc2U7XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0XG5cdCAgICByZXR1cm4gYWxsRXF1YWwgJiYgYS5zaXplID09PSBiU2l6ZTtcblx0ICB9XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKFJhbmdlLCBJbmRleGVkU2VxKTtcblx0XG5cdCAgICBmdW5jdGlvbiBSYW5nZShzdGFydCwgZW5kLCBzdGVwKSB7XG5cdCAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSYW5nZSkpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IFJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXApO1xuXHQgICAgICB9XG5cdCAgICAgIGludmFyaWFudChzdGVwICE9PSAwLCAnQ2Fubm90IHN0ZXAgYSBSYW5nZSBieSAwJyk7XG5cdCAgICAgIHN0YXJ0ID0gc3RhcnQgfHwgMDtcblx0ICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgZW5kID0gSW5maW5pdHk7XG5cdCAgICAgIH1cblx0ICAgICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IDEgOiBNYXRoLmFicyhzdGVwKTtcblx0ICAgICAgaWYgKGVuZCA8IHN0YXJ0KSB7XG5cdCAgICAgICAgc3RlcCA9IC1zdGVwO1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMuX3N0YXJ0ID0gc3RhcnQ7XG5cdCAgICAgIHRoaXMuX2VuZCA9IGVuZDtcblx0ICAgICAgdGhpcy5fc3RlcCA9IHN0ZXA7XG5cdCAgICAgIHRoaXMuc2l6ZSA9IE1hdGgubWF4KDAsIE1hdGguY2VpbCgoZW5kIC0gc3RhcnQpIC8gc3RlcCAtIDEpICsgMSk7XG5cdCAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcblx0ICAgICAgICBpZiAoRU1QVFlfUkFOR0UpIHtcblx0ICAgICAgICAgIHJldHVybiBFTVBUWV9SQU5HRTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgRU1QVFlfUkFOR0UgPSB0aGlzO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgUmFuZ2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gJ1JhbmdlIFtdJztcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gJ1JhbmdlIFsgJyArXG5cdCAgICAgICAgdGhpcy5fc3RhcnQgKyAnLi4uJyArIHRoaXMuX2VuZCArXG5cdCAgICAgICAgKHRoaXMuX3N0ZXAgPiAxID8gJyBieSAnICsgdGhpcy5fc3RlcCA6ICcnKSArXG5cdCAgICAgICcgXSc7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJhbmdlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuaGFzKGluZGV4KSA/XG5cdCAgICAgICAgdGhpcy5fc3RhcnQgKyB3cmFwSW5kZXgodGhpcywgaW5kZXgpICogdGhpcy5fc3RlcCA6XG5cdCAgICAgICAgbm90U2V0VmFsdWU7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJhbmdlLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG5cdCAgICAgIHZhciBwb3NzaWJsZUluZGV4ID0gKHNlYXJjaFZhbHVlIC0gdGhpcy5fc3RhcnQpIC8gdGhpcy5fc3RlcDtcblx0ICAgICAgcmV0dXJuIHBvc3NpYmxlSW5kZXggPj0gMCAmJlxuXHQgICAgICAgIHBvc3NpYmxlSW5kZXggPCB0aGlzLnNpemUgJiZcblx0ICAgICAgICBwb3NzaWJsZUluZGV4ID09PSBNYXRoLmZsb29yKHBvc3NpYmxlSW5kZXgpO1xuXHQgICAgfTtcblx0XG5cdCAgICBSYW5nZS5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG5cdCAgICAgIGlmICh3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIHRoaXMuc2l6ZSkpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICBiZWdpbiA9IHJlc29sdmVCZWdpbihiZWdpbiwgdGhpcy5zaXplKTtcblx0ICAgICAgZW5kID0gcmVzb2x2ZUVuZChlbmQsIHRoaXMuc2l6ZSk7XG5cdCAgICAgIGlmIChlbmQgPD0gYmVnaW4pIHtcblx0ICAgICAgICByZXR1cm4gbmV3IFJhbmdlKDAsIDApO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBuZXcgUmFuZ2UodGhpcy5nZXQoYmVnaW4sIHRoaXMuX2VuZCksIHRoaXMuZ2V0KGVuZCwgdGhpcy5fZW5kKSwgdGhpcy5fc3RlcCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJhbmdlLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcblx0ICAgICAgdmFyIG9mZnNldFZhbHVlID0gc2VhcmNoVmFsdWUgLSB0aGlzLl9zdGFydDtcblx0ICAgICAgaWYgKG9mZnNldFZhbHVlICUgdGhpcy5fc3RlcCA9PT0gMCkge1xuXHQgICAgICAgIHZhciBpbmRleCA9IG9mZnNldFZhbHVlIC8gdGhpcy5fc3RlcDtcblx0ICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuc2l6ZSkge1xuXHQgICAgICAgICAgcmV0dXJuIGluZGV4XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiAtMTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmFuZ2UucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuaW5kZXhPZihzZWFyY2hWYWx1ZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJhbmdlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuXHQgICAgICB2YXIgbWF4SW5kZXggPSB0aGlzLnNpemUgLSAxO1xuXHQgICAgICB2YXIgc3RlcCA9IHRoaXMuX3N0ZXA7XG5cdCAgICAgIHZhciB2YWx1ZSA9IHJldmVyc2UgPyB0aGlzLl9zdGFydCArIG1heEluZGV4ICogc3RlcCA6IHRoaXMuX3N0YXJ0O1xuXHQgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDw9IG1heEluZGV4OyBpaSsrKSB7XG5cdCAgICAgICAgaWYgKGZuKHZhbHVlLCBpaSwgdGhpcykgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICByZXR1cm4gaWkgKyAxO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YWx1ZSArPSByZXZlcnNlID8gLXN0ZXAgOiBzdGVwO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBpaTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmFuZ2UucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG5cdCAgICAgIHZhciBtYXhJbmRleCA9IHRoaXMuc2l6ZSAtIDE7XG5cdCAgICAgIHZhciBzdGVwID0gdGhpcy5fc3RlcDtcblx0ICAgICAgdmFyIHZhbHVlID0gcmV2ZXJzZSA/IHRoaXMuX3N0YXJ0ICsgbWF4SW5kZXggKiBzdGVwIDogdGhpcy5fc3RhcnQ7XG5cdCAgICAgIHZhciBpaSA9IDA7XG5cdCAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuXHQgICAgICAgIHZhciB2ID0gdmFsdWU7XG5cdCAgICAgICAgdmFsdWUgKz0gcmV2ZXJzZSA/IC1zdGVwIDogc3RlcDtcblx0ICAgICAgICByZXR1cm4gaWkgPiBtYXhJbmRleCA/IGl0ZXJhdG9yRG9uZSgpIDogaXRlcmF0b3JWYWx1ZSh0eXBlLCBpaSsrLCB2KTtcblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJhbmdlLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihvdGhlcikge1xuXHQgICAgICByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBSYW5nZSA/XG5cdCAgICAgICAgdGhpcy5fc3RhcnQgPT09IG90aGVyLl9zdGFydCAmJlxuXHQgICAgICAgIHRoaXMuX2VuZCA9PT0gb3RoZXIuX2VuZCAmJlxuXHQgICAgICAgIHRoaXMuX3N0ZXAgPT09IG90aGVyLl9zdGVwIDpcblx0ICAgICAgICBkZWVwRXF1YWwodGhpcywgb3RoZXIpO1xuXHQgICAgfTtcblx0XG5cdFxuXHQgIHZhciBFTVBUWV9SQU5HRTtcblx0XG5cdCAgY3JlYXRlQ2xhc3MoUmVwZWF0LCBJbmRleGVkU2VxKTtcblx0XG5cdCAgICBmdW5jdGlvbiBSZXBlYXQodmFsdWUsIHRpbWVzKSB7XG5cdCAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXBlYXQpKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBSZXBlYXQodmFsdWUsIHRpbWVzKTtcblx0ICAgICAgfVxuXHQgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuXHQgICAgICB0aGlzLnNpemUgPSB0aW1lcyA9PT0gdW5kZWZpbmVkID8gSW5maW5pdHkgOiBNYXRoLm1heCgwLCB0aW1lcyk7XG5cdCAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcblx0ICAgICAgICBpZiAoRU1QVFlfUkVQRUFUKSB7XG5cdCAgICAgICAgICByZXR1cm4gRU1QVFlfUkVQRUFUO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBFTVBUWV9SRVBFQVQgPSB0aGlzO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgUmVwZWF0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG5cdCAgICAgICAgcmV0dXJuICdSZXBlYXQgW10nO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiAnUmVwZWF0IFsgJyArIHRoaXMuX3ZhbHVlICsgJyAnICsgdGhpcy5zaXplICsgJyB0aW1lcyBdJztcblx0ICAgIH07XG5cdFxuXHQgICAgUmVwZWF0LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuaGFzKGluZGV4KSA/IHRoaXMuX3ZhbHVlIDogbm90U2V0VmFsdWU7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJlcGVhdC5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuXHQgICAgICByZXR1cm4gaXModGhpcy5fdmFsdWUsIHNlYXJjaFZhbHVlKTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmVwZWF0LnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcblx0ICAgICAgdmFyIHNpemUgPSB0aGlzLnNpemU7XG5cdCAgICAgIHJldHVybiB3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIHNpemUpID8gdGhpcyA6XG5cdCAgICAgICAgbmV3IFJlcGVhdCh0aGlzLl92YWx1ZSwgcmVzb2x2ZUVuZChlbmQsIHNpemUpIC0gcmVzb2x2ZUJlZ2luKGJlZ2luLCBzaXplKSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJlcGVhdC5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdFxuXHQgICAgUmVwZWF0LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcblx0ICAgICAgaWYgKGlzKHRoaXMuX3ZhbHVlLCBzZWFyY2hWYWx1ZSkpIHtcblx0ICAgICAgICByZXR1cm4gMDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gLTE7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJlcGVhdC5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuXHQgICAgICBpZiAoaXModGhpcy5fdmFsdWUsIHNlYXJjaFZhbHVlKSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLnNpemU7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIC0xO1xuXHQgICAgfTtcblx0XG5cdCAgICBSZXBlYXQucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG5cdCAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCB0aGlzLnNpemU7IGlpKyspIHtcblx0ICAgICAgICBpZiAoZm4odGhpcy5fdmFsdWUsIGlpLCB0aGlzKSA9PT0gZmFsc2UpIHtcblx0ICAgICAgICAgIHJldHVybiBpaSArIDE7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBpaTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmVwZWF0LnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICB2YXIgaWkgPSAwO1xuXHQgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgXG5cdCAgICAgICAge3JldHVybiBpaSA8IHRoaXMkMC5zaXplID8gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpaSsrLCB0aGlzJDAuX3ZhbHVlKSA6IGl0ZXJhdG9yRG9uZSgpfVxuXHQgICAgICApO1xuXHQgICAgfTtcblx0XG5cdCAgICBSZXBlYXQucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKG90aGVyKSB7XG5cdCAgICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIFJlcGVhdCA/XG5cdCAgICAgICAgaXModGhpcy5fdmFsdWUsIG90aGVyLl92YWx1ZSkgOlxuXHQgICAgICAgIGRlZXBFcXVhbChvdGhlcik7XG5cdCAgICB9O1xuXHRcblx0XG5cdCAgdmFyIEVNUFRZX1JFUEVBVDtcblx0XG5cdCAgLyoqXG5cdCAgICogQ29udHJpYnV0ZXMgYWRkaXRpb25hbCBtZXRob2RzIHRvIGEgY29uc3RydWN0b3Jcblx0ICAgKi9cblx0ICBmdW5jdGlvbiBtaXhpbihjdG9yLCBtZXRob2RzKSB7XG5cdCAgICB2YXIga2V5Q29waWVyID0gZnVuY3Rpb24oa2V5ICkgeyBjdG9yLnByb3RvdHlwZVtrZXldID0gbWV0aG9kc1trZXldOyB9O1xuXHQgICAgT2JqZWN0LmtleXMobWV0aG9kcykuZm9yRWFjaChrZXlDb3BpZXIpO1xuXHQgICAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJlxuXHQgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG1ldGhvZHMpLmZvckVhY2goa2V5Q29waWVyKTtcblx0ICAgIHJldHVybiBjdG9yO1xuXHQgIH1cblx0XG5cdCAgSXRlcmFibGUuSXRlcmF0b3IgPSBJdGVyYXRvcjtcblx0XG5cdCAgbWl4aW4oSXRlcmFibGUsIHtcblx0XG5cdCAgICAvLyAjIyMgQ29udmVyc2lvbiB0byBvdGhlciB0eXBlc1xuXHRcblx0ICAgIHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHQgICAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuXHQgICAgICB2YXIgYXJyYXkgPSBuZXcgQXJyYXkodGhpcy5zaXplIHx8IDApO1xuXHQgICAgICB0aGlzLnZhbHVlU2VxKCkuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGkpICB7IGFycmF5W2ldID0gdjsgfSk7XG5cdCAgICAgIHJldHVybiBhcnJheTtcblx0ICAgIH0sXG5cdFxuXHQgICAgdG9JbmRleGVkU2VxOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIG5ldyBUb0luZGV4ZWRTZXF1ZW5jZSh0aGlzKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgdG9KUzogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkubWFwKFxuXHQgICAgICAgIGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudG9KUyA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnRvSlMoKSA6IHZhbHVlfVxuXHQgICAgICApLl9fdG9KUygpO1xuXHQgICAgfSxcblx0XG5cdCAgICB0b0pTT046IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy50b1NlcSgpLm1hcChcblx0ICAgICAgICBmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnRvSlNPTigpIDogdmFsdWV9XG5cdCAgICAgICkuX190b0pTKCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHRvS2V5ZWRTZXE6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gbmV3IFRvS2V5ZWRTZXF1ZW5jZSh0aGlzLCB0cnVlKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgdG9NYXA6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG5cdCAgICAgIHJldHVybiBNYXAodGhpcy50b0tleWVkU2VxKCkpO1xuXHQgICAgfSxcblx0XG5cdCAgICB0b09iamVjdDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG5cdCAgICAgIHZhciBvYmplY3QgPSB7fTtcblx0ICAgICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHsgb2JqZWN0W2tdID0gdjsgfSk7XG5cdCAgICAgIHJldHVybiBvYmplY3Q7XG5cdCAgICB9LFxuXHRcblx0ICAgIHRvT3JkZXJlZE1hcDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cblx0ICAgICAgcmV0dXJuIE9yZGVyZWRNYXAodGhpcy50b0tleWVkU2VxKCkpO1xuXHQgICAgfSxcblx0XG5cdCAgICB0b09yZGVyZWRTZXQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG5cdCAgICAgIHJldHVybiBPcmRlcmVkU2V0KGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgdG9TZXQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG5cdCAgICAgIHJldHVybiBTZXQoaXNLZXllZCh0aGlzKSA/IHRoaXMudmFsdWVTZXEoKSA6IHRoaXMpO1xuXHQgICAgfSxcblx0XG5cdCAgICB0b1NldFNlcTogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBuZXcgVG9TZXRTZXF1ZW5jZSh0aGlzKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgdG9TZXE6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gaXNJbmRleGVkKHRoaXMpID8gdGhpcy50b0luZGV4ZWRTZXEoKSA6XG5cdCAgICAgICAgaXNLZXllZCh0aGlzKSA/IHRoaXMudG9LZXllZFNlcSgpIDpcblx0ICAgICAgICB0aGlzLnRvU2V0U2VxKCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHRvU3RhY2s6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG5cdCAgICAgIHJldHVybiBTdGFjayhpc0tleWVkKHRoaXMpID8gdGhpcy52YWx1ZVNlcSgpIDogdGhpcyk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHRvTGlzdDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cblx0ICAgICAgcmV0dXJuIExpc3QoaXNLZXllZCh0aGlzKSA/IHRoaXMudmFsdWVTZXEoKSA6IHRoaXMpO1xuXHQgICAgfSxcblx0XG5cdFxuXHQgICAgLy8gIyMjIENvbW1vbiBKYXZhU2NyaXB0IG1ldGhvZHMgYW5kIHByb3BlcnRpZXNcblx0XG5cdCAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiAnW0l0ZXJhYmxlXSc7XG5cdCAgICB9LFxuXHRcblx0ICAgIF9fdG9TdHJpbmc6IGZ1bmN0aW9uKGhlYWQsIHRhaWwpIHtcblx0ICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuXHQgICAgICAgIHJldHVybiBoZWFkICsgdGFpbDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gaGVhZCArICcgJyArIHRoaXMudG9TZXEoKS5tYXAodGhpcy5fX3RvU3RyaW5nTWFwcGVyKS5qb2luKCcsICcpICsgJyAnICsgdGFpbDtcblx0ICAgIH0sXG5cdFxuXHRcblx0ICAgIC8vICMjIyBFUzYgQ29sbGVjdGlvbiBtZXRob2RzIChFUzYgQXJyYXkgYW5kIE1hcClcblx0XG5cdCAgICBjb25jYXQ6IGZ1bmN0aW9uKCkge3ZhciB2YWx1ZXMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAwKTtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGNvbmNhdEZhY3RvcnkodGhpcywgdmFsdWVzKSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGNvbnRhaW5zOiBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5zb21lKGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBpcyh2YWx1ZSwgc2VhcmNoVmFsdWUpfSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUyk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGV2ZXJ5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcblx0ICAgICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcblx0ICAgICAgdmFyIHJldHVyblZhbHVlID0gdHJ1ZTtcblx0ICAgICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaywgYykgIHtcblx0ICAgICAgICBpZiAoIXByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIGMpKSB7XG5cdCAgICAgICAgICByZXR1cm5WYWx1ZSA9IGZhbHNlO1xuXHQgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcblx0ICAgIH0sXG5cdFxuXHQgICAgZmlsdGVyOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZpbHRlckZhY3RvcnkodGhpcywgcHJlZGljYXRlLCBjb250ZXh0LCB0cnVlKSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGZpbmQ6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCwgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgdmFyIGVudHJ5ID0gdGhpcy5maW5kRW50cnkocHJlZGljYXRlLCBjb250ZXh0KTtcblx0ICAgICAgcmV0dXJuIGVudHJ5ID8gZW50cnlbMV0gOiBub3RTZXRWYWx1ZTtcblx0ICAgIH0sXG5cdFxuXHQgICAgZmluZEVudHJ5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcblx0ICAgICAgdmFyIGZvdW5kO1xuXHQgICAgICB0aGlzLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrLCBjKSAge1xuXHQgICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuXHQgICAgICAgICAgZm91bmQgPSBbaywgdl07XG5cdCAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgICAgcmV0dXJuIGZvdW5kO1xuXHQgICAgfSxcblx0XG5cdCAgICBmaW5kTGFzdEVudHJ5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudG9TZXEoKS5yZXZlcnNlKCkuZmluZEVudHJ5KHByZWRpY2F0ZSwgY29udGV4dCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGZvckVhY2g6IGZ1bmN0aW9uKHNpZGVFZmZlY3QsIGNvbnRleHQpIHtcblx0ICAgICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcblx0ICAgICAgcmV0dXJuIHRoaXMuX19pdGVyYXRlKGNvbnRleHQgPyBzaWRlRWZmZWN0LmJpbmQoY29udGV4dCkgOiBzaWRlRWZmZWN0KTtcblx0ICAgIH0sXG5cdFxuXHQgICAgam9pbjogZnVuY3Rpb24oc2VwYXJhdG9yKSB7XG5cdCAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG5cdCAgICAgIHNlcGFyYXRvciA9IHNlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gJycgKyBzZXBhcmF0b3IgOiAnLCc7XG5cdCAgICAgIHZhciBqb2luZWQgPSAnJztcblx0ICAgICAgdmFyIGlzRmlyc3QgPSB0cnVlO1xuXHQgICAgICB0aGlzLl9faXRlcmF0ZShmdW5jdGlvbih2ICkge1xuXHQgICAgICAgIGlzRmlyc3QgPyAoaXNGaXJzdCA9IGZhbHNlKSA6IChqb2luZWQgKz0gc2VwYXJhdG9yKTtcblx0ICAgICAgICBqb2luZWQgKz0gdiAhPT0gbnVsbCAmJiB2ICE9PSB1bmRlZmluZWQgPyB2IDogJyc7XG5cdCAgICAgIH0pO1xuXHQgICAgICByZXR1cm4gam9pbmVkO1xuXHQgICAgfSxcblx0XG5cdCAgICBrZXlzOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX0tFWVMpO1xuXHQgICAgfSxcblx0XG5cdCAgICBtYXA6IGZ1bmN0aW9uKG1hcHBlciwgY29udGV4dCkge1xuXHQgICAgICByZXR1cm4gcmVpZnkodGhpcywgbWFwRmFjdG9yeSh0aGlzLCBtYXBwZXIsIGNvbnRleHQpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgcmVkdWNlOiBmdW5jdGlvbihyZWR1Y2VyLCBpbml0aWFsUmVkdWN0aW9uLCBjb250ZXh0KSB7XG5cdCAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG5cdCAgICAgIHZhciByZWR1Y3Rpb247XG5cdCAgICAgIHZhciB1c2VGaXJzdDtcblx0ICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG5cdCAgICAgICAgdXNlRmlyc3QgPSB0cnVlO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJlZHVjdGlvbiA9IGluaXRpYWxSZWR1Y3Rpb247XG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaywgYykgIHtcblx0ICAgICAgICBpZiAodXNlRmlyc3QpIHtcblx0ICAgICAgICAgIHVzZUZpcnN0ID0gZmFsc2U7XG5cdCAgICAgICAgICByZWR1Y3Rpb24gPSB2O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICByZWR1Y3Rpb24gPSByZWR1Y2VyLmNhbGwoY29udGV4dCwgcmVkdWN0aW9uLCB2LCBrLCBjKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgICByZXR1cm4gcmVkdWN0aW9uO1xuXHQgICAgfSxcblx0XG5cdCAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24ocmVkdWNlciwgaW5pdGlhbFJlZHVjdGlvbiwgY29udGV4dCkge1xuXHQgICAgICB2YXIgcmV2ZXJzZWQgPSB0aGlzLnRvS2V5ZWRTZXEoKS5yZXZlcnNlKCk7XG5cdCAgICAgIHJldHVybiByZXZlcnNlZC5yZWR1Y2UuYXBwbHkocmV2ZXJzZWQsIGFyZ3VtZW50cyk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHJldmVyc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gcmVpZnkodGhpcywgcmV2ZXJzZUZhY3RvcnkodGhpcywgdHJ1ZSkpO1xuXHQgICAgfSxcblx0XG5cdCAgICBzbGljZTogZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuXHQgICAgICByZXR1cm4gcmVpZnkodGhpcywgc2xpY2VGYWN0b3J5KHRoaXMsIGJlZ2luLCBlbmQsIHRydWUpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgc29tZTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG5cdCAgICAgIHJldHVybiAhdGhpcy5ldmVyeShub3QocHJlZGljYXRlKSwgY29udGV4dCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHNvcnQ6IGZ1bmN0aW9uKGNvbXBhcmF0b3IpIHtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgdmFsdWVzOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUyk7XG5cdCAgICB9LFxuXHRcblx0XG5cdCAgICAvLyAjIyMgTW9yZSBzZXF1ZW50aWFsIG1ldGhvZHNcblx0XG5cdCAgICBidXRMYXN0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuc2xpY2UoMCwgLTEpO1xuXHQgICAgfSxcblx0XG5cdCAgICBpc0VtcHR5OiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkID8gdGhpcy5zaXplID09PSAwIDogIXRoaXMuc29tZShmdW5jdGlvbigpICB7cmV0dXJuIHRydWV9KTtcblx0ICAgIH0sXG5cdFxuXHQgICAgY291bnQ6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuXHQgICAgICByZXR1cm4gZW5zdXJlU2l6ZShcblx0ICAgICAgICBwcmVkaWNhdGUgPyB0aGlzLnRvU2VxKCkuZmlsdGVyKHByZWRpY2F0ZSwgY29udGV4dCkgOiB0aGlzXG5cdCAgICAgICk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGNvdW50Qnk6IGZ1bmN0aW9uKGdyb3VwZXIsIGNvbnRleHQpIHtcblx0ICAgICAgcmV0dXJuIGNvdW50QnlGYWN0b3J5KHRoaXMsIGdyb3VwZXIsIGNvbnRleHQpO1xuXHQgICAgfSxcblx0XG5cdCAgICBlcXVhbHM6IGZ1bmN0aW9uKG90aGVyKSB7XG5cdCAgICAgIHJldHVybiBkZWVwRXF1YWwodGhpcywgb3RoZXIpO1xuXHQgICAgfSxcblx0XG5cdCAgICBlbnRyeVNlcTogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciBpdGVyYWJsZSA9IHRoaXM7XG5cdCAgICAgIGlmIChpdGVyYWJsZS5fY2FjaGUpIHtcblx0ICAgICAgICAvLyBXZSBjYWNoZSBhcyBhbiBlbnRyaWVzIGFycmF5LCBzbyB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGNhY2hlIVxuXHQgICAgICAgIHJldHVybiBuZXcgQXJyYXlTZXEoaXRlcmFibGUuX2NhY2hlKTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgZW50cmllc1NlcXVlbmNlID0gaXRlcmFibGUudG9TZXEoKS5tYXAoZW50cnlNYXBwZXIpLnRvSW5kZXhlZFNlcSgpO1xuXHQgICAgICBlbnRyaWVzU2VxdWVuY2UuZnJvbUVudHJ5U2VxID0gZnVuY3Rpb24oKSAge3JldHVybiBpdGVyYWJsZS50b1NlcSgpfTtcblx0ICAgICAgcmV0dXJuIGVudHJpZXNTZXF1ZW5jZTtcblx0ICAgIH0sXG5cdFxuXHQgICAgZmlsdGVyTm90OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5vdChwcmVkaWNhdGUpLCBjb250ZXh0KTtcblx0ICAgIH0sXG5cdFxuXHQgICAgZmluZExhc3Q6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCwgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudG9LZXllZFNlcSgpLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSwgY29udGV4dCwgbm90U2V0VmFsdWUpO1xuXHQgICAgfSxcblx0XG5cdCAgICBmaXJzdDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmZpbmQocmV0dXJuVHJ1ZSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGZsYXRNYXA6IGZ1bmN0aW9uKG1hcHBlciwgY29udGV4dCkge1xuXHQgICAgICByZXR1cm4gcmVpZnkodGhpcywgZmxhdE1hcEZhY3RvcnkodGhpcywgbWFwcGVyLCBjb250ZXh0KSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGZsYXR0ZW46IGZ1bmN0aW9uKGRlcHRoKSB7XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGF0dGVuRmFjdG9yeSh0aGlzLCBkZXB0aCwgdHJ1ZSkpO1xuXHQgICAgfSxcblx0XG5cdCAgICBmcm9tRW50cnlTZXE6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gbmV3IEZyb21FbnRyaWVzU2VxdWVuY2UodGhpcyk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGdldDogZnVuY3Rpb24oc2VhcmNoS2V5LCBub3RTZXRWYWx1ZSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5maW5kKGZ1bmN0aW9uKF8sIGtleSkgIHtyZXR1cm4gaXMoa2V5LCBzZWFyY2hLZXkpfSwgdW5kZWZpbmVkLCBub3RTZXRWYWx1ZSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGdldEluOiBmdW5jdGlvbihzZWFyY2hLZXlQYXRoLCBub3RTZXRWYWx1ZSkge1xuXHQgICAgICB2YXIgbmVzdGVkID0gdGhpcztcblx0ICAgICAgLy8gTm90ZTogaW4gYW4gRVM2IGVudmlyb25tZW50LCB3ZSB3b3VsZCBwcmVmZXI6XG5cdCAgICAgIC8vIGZvciAodmFyIGtleSBvZiBzZWFyY2hLZXlQYXRoKSB7XG5cdCAgICAgIHZhciBpdGVyID0gZm9yY2VJdGVyYXRvcihzZWFyY2hLZXlQYXRoKTtcblx0ICAgICAgdmFyIHN0ZXA7XG5cdCAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyLm5leHQoKSkuZG9uZSkge1xuXHQgICAgICAgIHZhciBrZXkgPSBzdGVwLnZhbHVlO1xuXHQgICAgICAgIG5lc3RlZCA9IG5lc3RlZCAmJiBuZXN0ZWQuZ2V0ID8gbmVzdGVkLmdldChrZXksIE5PVF9TRVQpIDogTk9UX1NFVDtcblx0ICAgICAgICBpZiAobmVzdGVkID09PSBOT1RfU0VUKSB7XG5cdCAgICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBuZXN0ZWQ7XG5cdCAgICB9LFxuXHRcblx0ICAgIGdyb3VwQnk6IGZ1bmN0aW9uKGdyb3VwZXIsIGNvbnRleHQpIHtcblx0ICAgICAgcmV0dXJuIGdyb3VwQnlGYWN0b3J5KHRoaXMsIGdyb3VwZXIsIGNvbnRleHQpO1xuXHQgICAgfSxcblx0XG5cdCAgICBoYXM6IGZ1bmN0aW9uKHNlYXJjaEtleSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5nZXQoc2VhcmNoS2V5LCBOT1RfU0VUKSAhPT0gTk9UX1NFVDtcblx0ICAgIH0sXG5cdFxuXHQgICAgaGFzSW46IGZ1bmN0aW9uKHNlYXJjaEtleVBhdGgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuZ2V0SW4oc2VhcmNoS2V5UGF0aCwgTk9UX1NFVCkgIT09IE5PVF9TRVQ7XG5cdCAgICB9LFxuXHRcblx0ICAgIGlzU3Vic2V0OiBmdW5jdGlvbihpdGVyKSB7XG5cdCAgICAgIGl0ZXIgPSB0eXBlb2YgaXRlci5jb250YWlucyA9PT0gJ2Z1bmN0aW9uJyA/IGl0ZXIgOiBJdGVyYWJsZShpdGVyKTtcblx0ICAgICAgcmV0dXJuIHRoaXMuZXZlcnkoZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIGl0ZXIuY29udGFpbnModmFsdWUpfSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGlzU3VwZXJzZXQ6IGZ1bmN0aW9uKGl0ZXIpIHtcblx0ICAgICAgcmV0dXJuIGl0ZXIuaXNTdWJzZXQodGhpcyk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGtleVNlcTogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkubWFwKGtleU1hcHBlcikudG9JbmRleGVkU2VxKCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy50b1NlcSgpLnJldmVyc2UoKS5maXJzdCgpO1xuXHQgICAgfSxcblx0XG5cdCAgICBtYXg6IGZ1bmN0aW9uKGNvbXBhcmF0b3IpIHtcblx0ICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvcik7XG5cdCAgICB9LFxuXHRcblx0ICAgIG1heEJ5OiBmdW5jdGlvbihtYXBwZXIsIGNvbXBhcmF0b3IpIHtcblx0ICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvciwgbWFwcGVyKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgbWluOiBmdW5jdGlvbihjb21wYXJhdG9yKSB7XG5cdCAgICAgIHJldHVybiBtYXhGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IgPyBuZWcoY29tcGFyYXRvcikgOiBkZWZhdWx0TmVnQ29tcGFyYXRvcik7XG5cdCAgICB9LFxuXHRcblx0ICAgIG1pbkJ5OiBmdW5jdGlvbihtYXBwZXIsIGNvbXBhcmF0b3IpIHtcblx0ICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvciA/IG5lZyhjb21wYXJhdG9yKSA6IGRlZmF1bHROZWdDb21wYXJhdG9yLCBtYXBwZXIpO1xuXHQgICAgfSxcblx0XG5cdCAgICByZXN0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuc2xpY2UoMSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHNraXA6IGZ1bmN0aW9uKGFtb3VudCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5zbGljZShNYXRoLm1heCgwLCBhbW91bnQpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgc2tpcExhc3Q6IGZ1bmN0aW9uKGFtb3VudCkge1xuXHQgICAgICByZXR1cm4gcmVpZnkodGhpcywgdGhpcy50b1NlcSgpLnJldmVyc2UoKS5za2lwKGFtb3VudCkucmV2ZXJzZSgpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgc2tpcFdoaWxlOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNraXBXaGlsZUZhY3RvcnkodGhpcywgcHJlZGljYXRlLCBjb250ZXh0LCB0cnVlKSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHNraXBVbnRpbDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnNraXBXaGlsZShub3QocHJlZGljYXRlKSwgY29udGV4dCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHNvcnRCeTogZnVuY3Rpb24obWFwcGVyLCBjb21wYXJhdG9yKSB7XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLCBzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yLCBtYXBwZXIpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgdGFrZTogZnVuY3Rpb24oYW1vdW50KSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnNsaWNlKDAsIE1hdGgubWF4KDAsIGFtb3VudCkpO1xuXHQgICAgfSxcblx0XG5cdCAgICB0YWtlTGFzdDogZnVuY3Rpb24oYW1vdW50KSB7XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLCB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLnRha2UoYW1vdW50KS5yZXZlcnNlKCkpO1xuXHQgICAgfSxcblx0XG5cdCAgICB0YWtlV2hpbGU6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuXHQgICAgICByZXR1cm4gcmVpZnkodGhpcywgdGFrZVdoaWxlRmFjdG9yeSh0aGlzLCBwcmVkaWNhdGUsIGNvbnRleHQpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgdGFrZVVudGlsOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudGFrZVdoaWxlKG5vdChwcmVkaWNhdGUpLCBjb250ZXh0KTtcblx0ICAgIH0sXG5cdFxuXHQgICAgdmFsdWVTZXE6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy50b0luZGV4ZWRTZXEoKTtcblx0ICAgIH0sXG5cdFxuXHRcblx0ICAgIC8vICMjIyBIYXNoYWJsZSBPYmplY3Rcblx0XG5cdCAgICBoYXNoQ29kZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9faGFzaCB8fCAodGhpcy5fX2hhc2ggPSBoYXNoSXRlcmFibGUodGhpcykpO1xuXHQgICAgfSxcblx0XG5cdFxuXHQgICAgLy8gIyMjIEludGVybmFsXG5cdFxuXHQgICAgLy8gYWJzdHJhY3QgX19pdGVyYXRlKGZuLCByZXZlcnNlKVxuXHRcblx0ICAgIC8vIGFic3RyYWN0IF9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSlcblx0ICB9KTtcblx0XG5cdCAgLy8gdmFyIElTX0lURVJBQkxFX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfSVRFUkFCTEVfX0BAJztcblx0ICAvLyB2YXIgSVNfS0VZRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9LRVlFRF9fQEAnO1xuXHQgIC8vIHZhciBJU19JTkRFWEVEX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfSU5ERVhFRF9fQEAnO1xuXHQgIC8vIHZhciBJU19PUkRFUkVEX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfT1JERVJFRF9fQEAnO1xuXHRcblx0ICB2YXIgSXRlcmFibGVQcm90b3R5cGUgPSBJdGVyYWJsZS5wcm90b3R5cGU7XG5cdCAgSXRlcmFibGVQcm90b3R5cGVbSVNfSVRFUkFCTEVfU0VOVElORUxdID0gdHJ1ZTtcblx0ICBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl9TWU1CT0xdID0gSXRlcmFibGVQcm90b3R5cGUudmFsdWVzO1xuXHQgIEl0ZXJhYmxlUHJvdG90eXBlLl9fdG9KUyA9IEl0ZXJhYmxlUHJvdG90eXBlLnRvQXJyYXk7XG5cdCAgSXRlcmFibGVQcm90b3R5cGUuX190b1N0cmluZ01hcHBlciA9IHF1b3RlU3RyaW5nO1xuXHQgIEl0ZXJhYmxlUHJvdG90eXBlLmluc3BlY3QgPVxuXHQgIEl0ZXJhYmxlUHJvdG90eXBlLnRvU291cmNlID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnRvU3RyaW5nKCk7IH07XG5cdCAgSXRlcmFibGVQcm90b3R5cGUuY2hhaW4gPSBJdGVyYWJsZVByb3RvdHlwZS5mbGF0TWFwO1xuXHRcblx0ICAvLyBUZW1wb3Jhcnkgd2FybmluZyBhYm91dCB1c2luZyBsZW5ndGhcblx0ICAoZnVuY3Rpb24gKCkge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCAnbGVuZ3RoJywge1xuXHQgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgaWYgKCFJdGVyYWJsZS5ub0xlbmd0aFdhcm5pbmcpIHtcblx0ICAgICAgICAgICAgdmFyIHN0YWNrO1xuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuXHQgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuXHQgICAgICAgICAgICAgIHN0YWNrID0gZXJyb3Iuc3RhY2s7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKHN0YWNrLmluZGV4T2YoJ193cmFwT2JqZWN0JykgPT09IC0xKSB7XG5cdCAgICAgICAgICAgICAgY29uc29sZSAmJiBjb25zb2xlLndhcm4gJiYgY29uc29sZS53YXJuKFxuXHQgICAgICAgICAgICAgICAgJ2l0ZXJhYmxlLmxlbmd0aCBoYXMgYmVlbiBkZXByZWNhdGVkLCAnK1xuXHQgICAgICAgICAgICAgICAgJ3VzZSBpdGVyYWJsZS5zaXplIG9yIGl0ZXJhYmxlLmNvdW50KCkuICcrXG5cdCAgICAgICAgICAgICAgICAnVGhpcyB3YXJuaW5nIHdpbGwgYmVjb21lIGEgc2lsZW50IGVycm9yIGluIGEgZnV0dXJlIHZlcnNpb24uICcgK1xuXHQgICAgICAgICAgICAgICAgc3RhY2tcblx0ICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNpemU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfSBjYXRjaCAoZSkge31cblx0ICB9KSgpO1xuXHRcblx0XG5cdFxuXHQgIG1peGluKEtleWVkSXRlcmFibGUsIHtcblx0XG5cdCAgICAvLyAjIyMgTW9yZSBzZXF1ZW50aWFsIG1ldGhvZHNcblx0XG5cdCAgICBmbGlwOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZsaXBGYWN0b3J5KHRoaXMpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgZmluZEtleTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG5cdCAgICAgIHZhciBlbnRyeSA9IHRoaXMuZmluZEVudHJ5KHByZWRpY2F0ZSwgY29udGV4dCk7XG5cdCAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeVswXTtcblx0ICAgIH0sXG5cdFxuXHQgICAgZmluZExhc3RLZXk6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuXHQgICAgICByZXR1cm4gdGhpcy50b1NlcSgpLnJldmVyc2UoKS5maW5kS2V5KHByZWRpY2F0ZSwgY29udGV4dCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGtleU9mOiBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5maW5kS2V5KGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBpcyh2YWx1ZSwgc2VhcmNoVmFsdWUpfSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGxhc3RLZXlPZjogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuZmluZExhc3RLZXkoZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIGlzKHZhbHVlLCBzZWFyY2hWYWx1ZSl9KTtcblx0ICAgIH0sXG5cdFxuXHQgICAgbWFwRW50cmllczogZnVuY3Rpb24obWFwcGVyLCBjb250ZXh0KSB7dmFyIHRoaXMkMCA9IHRoaXM7XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsXG5cdCAgICAgICAgdGhpcy50b1NlcSgpLm1hcChcblx0ICAgICAgICAgIGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIG1hcHBlci5jYWxsKGNvbnRleHQsIFtrLCB2XSwgaXRlcmF0aW9ucysrLCB0aGlzJDApfVxuXHQgICAgICAgICkuZnJvbUVudHJ5U2VxKClcblx0ICAgICAgKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgbWFwS2V5czogZnVuY3Rpb24obWFwcGVyLCBjb250ZXh0KSB7dmFyIHRoaXMkMCA9IHRoaXM7XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLFxuXHQgICAgICAgIHRoaXMudG9TZXEoKS5mbGlwKCkubWFwKFxuXHQgICAgICAgICAgZnVuY3Rpb24oaywgdikgIHtyZXR1cm4gbWFwcGVyLmNhbGwoY29udGV4dCwgaywgdiwgdGhpcyQwKX1cblx0ICAgICAgICApLmZsaXAoKVxuXHQgICAgICApO1xuXHQgICAgfSxcblx0XG5cdCAgfSk7XG5cdFxuXHQgIHZhciBLZXllZEl0ZXJhYmxlUHJvdG90eXBlID0gS2V5ZWRJdGVyYWJsZS5wcm90b3R5cGU7XG5cdCAgS2V5ZWRJdGVyYWJsZVByb3RvdHlwZVtJU19LRVlFRF9TRU5USU5FTF0gPSB0cnVlO1xuXHQgIEtleWVkSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JfU1lNQk9MXSA9IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXM7XG5cdCAgS2V5ZWRJdGVyYWJsZVByb3RvdHlwZS5fX3RvSlMgPSBJdGVyYWJsZVByb3RvdHlwZS50b09iamVjdDtcblx0ICBLZXllZEl0ZXJhYmxlUHJvdG90eXBlLl9fdG9TdHJpbmdNYXBwZXIgPSBmdW5jdGlvbih2LCBrKSAge3JldHVybiBrICsgJzogJyArIHF1b3RlU3RyaW5nKHYpfTtcblx0XG5cdFxuXHRcblx0ICBtaXhpbihJbmRleGVkSXRlcmFibGUsIHtcblx0XG5cdCAgICAvLyAjIyMgQ29udmVyc2lvbiB0byBvdGhlciB0eXBlc1xuXHRcblx0ICAgIHRvS2V5ZWRTZXE6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gbmV3IFRvS2V5ZWRTZXF1ZW5jZSh0aGlzLCBmYWxzZSk7XG5cdCAgICB9LFxuXHRcblx0XG5cdCAgICAvLyAjIyMgRVM2IENvbGxlY3Rpb24gbWV0aG9kcyAoRVM2IEFycmF5IGFuZCBNYXApXG5cdFxuXHQgICAgZmlsdGVyOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZpbHRlckZhY3RvcnkodGhpcywgcHJlZGljYXRlLCBjb250ZXh0LCBmYWxzZSkpO1xuXHQgICAgfSxcblx0XG5cdCAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuXHQgICAgICB2YXIgZW50cnkgPSB0aGlzLmZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQpO1xuXHQgICAgICByZXR1cm4gZW50cnkgPyBlbnRyeVswXSA6IC0xO1xuXHQgICAgfSxcblx0XG5cdCAgICBpbmRleE9mOiBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuXHQgICAgICB2YXIga2V5ID0gdGhpcy50b0tleWVkU2VxKCkua2V5T2Yoc2VhcmNoVmFsdWUpO1xuXHQgICAgICByZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgPyAtMSA6IGtleTtcblx0ICAgIH0sXG5cdFxuXHQgICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLmluZGV4T2Yoc2VhcmNoVmFsdWUpO1xuXHQgICAgfSxcblx0XG5cdCAgICByZXZlcnNlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHJldmVyc2VGYWN0b3J5KHRoaXMsIGZhbHNlKSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHNsaWNlOiBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLCBzbGljZUZhY3RvcnkodGhpcywgYmVnaW4sIGVuZCwgZmFsc2UpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgc3BsaWNlOiBmdW5jdGlvbihpbmRleCwgcmVtb3ZlTnVtIC8qLCAuLi52YWx1ZXMqLykge1xuXHQgICAgICB2YXIgbnVtQXJncyA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdCAgICAgIHJlbW92ZU51bSA9IE1hdGgubWF4KHJlbW92ZU51bSB8IDAsIDApO1xuXHQgICAgICBpZiAobnVtQXJncyA9PT0gMCB8fCAobnVtQXJncyA9PT0gMiAmJiAhcmVtb3ZlTnVtKSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIGluZGV4ID0gcmVzb2x2ZUJlZ2luKGluZGV4LCB0aGlzLnNpemUpO1xuXHQgICAgICB2YXIgc3BsaWNlZCA9IHRoaXMuc2xpY2UoMCwgaW5kZXgpO1xuXHQgICAgICByZXR1cm4gcmVpZnkoXG5cdCAgICAgICAgdGhpcyxcblx0ICAgICAgICBudW1BcmdzID09PSAxID9cblx0ICAgICAgICAgIHNwbGljZWQgOlxuXHQgICAgICAgICAgc3BsaWNlZC5jb25jYXQoYXJyQ29weShhcmd1bWVudHMsIDIpLCB0aGlzLnNsaWNlKGluZGV4ICsgcmVtb3ZlTnVtKSlcblx0ICAgICAgKTtcblx0ICAgIH0sXG5cdFxuXHRcblx0ICAgIC8vICMjIyBNb3JlIGNvbGxlY3Rpb24gbWV0aG9kc1xuXHRcblx0ICAgIGZpbmRMYXN0SW5kZXg6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuXHQgICAgICB2YXIga2V5ID0gdGhpcy50b0tleWVkU2VxKCkuZmluZExhc3RLZXkocHJlZGljYXRlLCBjb250ZXh0KTtcblx0ICAgICAgcmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID8gLTEgOiBrZXk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGZpcnN0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuZ2V0KDApO1xuXHQgICAgfSxcblx0XG5cdCAgICBmbGF0dGVuOiBmdW5jdGlvbihkZXB0aCkge1xuXHQgICAgICByZXR1cm4gcmVpZnkodGhpcywgZmxhdHRlbkZhY3RvcnkodGhpcywgZGVwdGgsIGZhbHNlKSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGdldDogZnVuY3Rpb24oaW5kZXgsIG5vdFNldFZhbHVlKSB7XG5cdCAgICAgIGluZGV4ID0gd3JhcEluZGV4KHRoaXMsIGluZGV4KTtcblx0ICAgICAgcmV0dXJuIChpbmRleCA8IDAgfHwgKHRoaXMuc2l6ZSA9PT0gSW5maW5pdHkgfHxcblx0ICAgICAgICAgICh0aGlzLnNpemUgIT09IHVuZGVmaW5lZCAmJiBpbmRleCA+IHRoaXMuc2l6ZSkpKSA/XG5cdCAgICAgICAgbm90U2V0VmFsdWUgOlxuXHQgICAgICAgIHRoaXMuZmluZChmdW5jdGlvbihfLCBrZXkpICB7cmV0dXJuIGtleSA9PT0gaW5kZXh9LCB1bmRlZmluZWQsIG5vdFNldFZhbHVlKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgaGFzOiBmdW5jdGlvbihpbmRleCkge1xuXHQgICAgICBpbmRleCA9IHdyYXBJbmRleCh0aGlzLCBpbmRleCk7XG5cdCAgICAgIHJldHVybiBpbmRleCA+PSAwICYmICh0aGlzLnNpemUgIT09IHVuZGVmaW5lZCA/XG5cdCAgICAgICAgdGhpcy5zaXplID09PSBJbmZpbml0eSB8fCBpbmRleCA8IHRoaXMuc2l6ZSA6XG5cdCAgICAgICAgdGhpcy5pbmRleE9mKGluZGV4KSAhPT0gLTFcblx0ICAgICAgKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgaW50ZXJwb3NlOiBmdW5jdGlvbihzZXBhcmF0b3IpIHtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGludGVycG9zZUZhY3RvcnkodGhpcywgc2VwYXJhdG9yKSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGludGVybGVhdmU6IGZ1bmN0aW9uKC8qLi4uaXRlcmFibGVzKi8pIHtcblx0ICAgICAgdmFyIGl0ZXJhYmxlcyA9IFt0aGlzXS5jb25jYXQoYXJyQ29weShhcmd1bWVudHMpKTtcblx0ICAgICAgdmFyIHppcHBlZCA9IHppcFdpdGhGYWN0b3J5KHRoaXMudG9TZXEoKSwgSW5kZXhlZFNlcS5vZiwgaXRlcmFibGVzKTtcblx0ICAgICAgdmFyIGludGVybGVhdmVkID0gemlwcGVkLmZsYXR0ZW4odHJ1ZSk7XG5cdCAgICAgIGlmICh6aXBwZWQuc2l6ZSkge1xuXHQgICAgICAgIGludGVybGVhdmVkLnNpemUgPSB6aXBwZWQuc2l6ZSAqIGl0ZXJhYmxlcy5sZW5ndGg7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGludGVybGVhdmVkKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgbGFzdDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmdldCgtMSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHNraXBXaGlsZTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLCBza2lwV2hpbGVGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgZmFsc2UpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgemlwOiBmdW5jdGlvbigvKiwgLi4uaXRlcmFibGVzICovKSB7XG5cdCAgICAgIHZhciBpdGVyYWJsZXMgPSBbdGhpc10uY29uY2F0KGFyckNvcHkoYXJndW1lbnRzKSk7XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLCB6aXBXaXRoRmFjdG9yeSh0aGlzLCBkZWZhdWx0WmlwcGVyLCBpdGVyYWJsZXMpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgemlwV2l0aDogZnVuY3Rpb24oemlwcGVyLyosIC4uLml0ZXJhYmxlcyAqLykge1xuXHQgICAgICB2YXIgaXRlcmFibGVzID0gYXJyQ29weShhcmd1bWVudHMpO1xuXHQgICAgICBpdGVyYWJsZXNbMF0gPSB0aGlzO1xuXHQgICAgICByZXR1cm4gcmVpZnkodGhpcywgemlwV2l0aEZhY3RvcnkodGhpcywgemlwcGVyLCBpdGVyYWJsZXMpKTtcblx0ICAgIH0sXG5cdFxuXHQgIH0pO1xuXHRcblx0ICBJbmRleGVkSXRlcmFibGUucHJvdG90eXBlW0lTX0lOREVYRURfU0VOVElORUxdID0gdHJ1ZTtcblx0ICBJbmRleGVkSXRlcmFibGUucHJvdG90eXBlW0lTX09SREVSRURfU0VOVElORUxdID0gdHJ1ZTtcblx0XG5cdFxuXHRcblx0ICBtaXhpbihTZXRJdGVyYWJsZSwge1xuXHRcblx0ICAgIC8vICMjIyBFUzYgQ29sbGVjdGlvbiBtZXRob2RzIChFUzYgQXJyYXkgYW5kIE1hcClcblx0XG5cdCAgICBnZXQ6IGZ1bmN0aW9uKHZhbHVlLCBub3RTZXRWYWx1ZSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5oYXModmFsdWUpID8gdmFsdWUgOiBub3RTZXRWYWx1ZTtcblx0ICAgIH0sXG5cdFxuXHQgICAgY29udGFpbnM6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmhhcyh2YWx1ZSk7XG5cdCAgICB9LFxuXHRcblx0XG5cdCAgICAvLyAjIyMgTW9yZSBzZXF1ZW50aWFsIG1ldGhvZHNcblx0XG5cdCAgICBrZXlTZXE6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy52YWx1ZVNlcSgpO1xuXHQgICAgfSxcblx0XG5cdCAgfSk7XG5cdFxuXHQgIFNldEl0ZXJhYmxlLnByb3RvdHlwZS5oYXMgPSBJdGVyYWJsZVByb3RvdHlwZS5jb250YWlucztcblx0XG5cdFxuXHQgIC8vIE1peGluIHN1YmNsYXNzZXNcblx0XG5cdCAgbWl4aW4oS2V5ZWRTZXEsIEtleWVkSXRlcmFibGUucHJvdG90eXBlKTtcblx0ICBtaXhpbihJbmRleGVkU2VxLCBJbmRleGVkSXRlcmFibGUucHJvdG90eXBlKTtcblx0ICBtaXhpbihTZXRTZXEsIFNldEl0ZXJhYmxlLnByb3RvdHlwZSk7XG5cdFxuXHQgIG1peGluKEtleWVkQ29sbGVjdGlvbiwgS2V5ZWRJdGVyYWJsZS5wcm90b3R5cGUpO1xuXHQgIG1peGluKEluZGV4ZWRDb2xsZWN0aW9uLCBJbmRleGVkSXRlcmFibGUucHJvdG90eXBlKTtcblx0ICBtaXhpbihTZXRDb2xsZWN0aW9uLCBTZXRJdGVyYWJsZS5wcm90b3R5cGUpO1xuXHRcblx0XG5cdCAgLy8gI3ByYWdtYSBIZWxwZXIgZnVuY3Rpb25zXG5cdFxuXHQgIGZ1bmN0aW9uIGtleU1hcHBlcih2LCBrKSB7XG5cdCAgICByZXR1cm4gaztcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGVudHJ5TWFwcGVyKHYsIGspIHtcblx0ICAgIHJldHVybiBbaywgdl07XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBub3QocHJlZGljYXRlKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBuZWcocHJlZGljYXRlKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiAtcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBxdW90ZVN0cmluZyh2YWx1ZSkge1xuXHQgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiB2YWx1ZTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGRlZmF1bHRaaXBwZXIoKSB7XG5cdCAgICByZXR1cm4gYXJyQ29weShhcmd1bWVudHMpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gZGVmYXVsdE5lZ0NvbXBhcmF0b3IoYSwgYikge1xuXHQgICAgcmV0dXJuIGEgPCBiID8gMSA6IGEgPiBiID8gLTEgOiAwO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gaGFzaEl0ZXJhYmxlKGl0ZXJhYmxlKSB7XG5cdCAgICBpZiAoaXRlcmFibGUuc2l6ZSA9PT0gSW5maW5pdHkpIHtcblx0ICAgICAgcmV0dXJuIDA7XG5cdCAgICB9XG5cdCAgICB2YXIgb3JkZXJlZCA9IGlzT3JkZXJlZChpdGVyYWJsZSk7XG5cdCAgICB2YXIga2V5ZWQgPSBpc0tleWVkKGl0ZXJhYmxlKTtcblx0ICAgIHZhciBoID0gb3JkZXJlZCA/IDEgOiAwO1xuXHQgICAgdmFyIHNpemUgPSBpdGVyYWJsZS5fX2l0ZXJhdGUoXG5cdCAgICAgIGtleWVkID9cblx0ICAgICAgICBvcmRlcmVkID9cblx0ICAgICAgICAgIGZ1bmN0aW9uKHYsIGspICB7IGggPSAzMSAqIGggKyBoYXNoTWVyZ2UoaGFzaCh2KSwgaGFzaChrKSkgfCAwOyB9IDpcblx0ICAgICAgICAgIGZ1bmN0aW9uKHYsIGspICB7IGggPSBoICsgaGFzaE1lcmdlKGhhc2godiksIGhhc2goaykpIHwgMDsgfSA6XG5cdCAgICAgICAgb3JkZXJlZCA/XG5cdCAgICAgICAgICBmdW5jdGlvbih2ICkgeyBoID0gMzEgKiBoICsgaGFzaCh2KSB8IDA7IH0gOlxuXHQgICAgICAgICAgZnVuY3Rpb24odiApIHsgaCA9IGggKyBoYXNoKHYpIHwgMDsgfVxuXHQgICAgKTtcblx0ICAgIHJldHVybiBtdXJtdXJIYXNoT2ZTaXplKHNpemUsIGgpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gbXVybXVySGFzaE9mU2l6ZShzaXplLCBoKSB7XG5cdCAgICBoID0gTWF0aF9faW11bChoLCAweENDOUUyRDUxKTtcblx0ICAgIGggPSBNYXRoX19pbXVsKGggPDwgMTUgfCBoID4+PiAtMTUsIDB4MUI4NzM1OTMpO1xuXHQgICAgaCA9IE1hdGhfX2ltdWwoaCA8PCAxMyB8IGggPj4+IC0xMywgNSk7XG5cdCAgICBoID0gKGggKyAweEU2NTQ2QjY0IHwgMCkgXiBzaXplO1xuXHQgICAgaCA9IE1hdGhfX2ltdWwoaCBeIGggPj4+IDE2LCAweDg1RUJDQTZCKTtcblx0ICAgIGggPSBNYXRoX19pbXVsKGggXiBoID4+PiAxMywgMHhDMkIyQUUzNSk7XG5cdCAgICBoID0gc21pKGggXiBoID4+PiAxNik7XG5cdCAgICByZXR1cm4gaDtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGhhc2hNZXJnZShhLCBiKSB7XG5cdCAgICByZXR1cm4gYSBeIGIgKyAweDlFMzc3OUI5ICsgKGEgPDwgNikgKyAoYSA+PiAyKSB8IDA7IC8vIGludFxuXHQgIH1cblx0XG5cdCAgdmFyIEltbXV0YWJsZSA9IHtcblx0XG5cdCAgICBJdGVyYWJsZTogSXRlcmFibGUsXG5cdFxuXHQgICAgU2VxOiBTZXEsXG5cdCAgICBDb2xsZWN0aW9uOiBDb2xsZWN0aW9uLFxuXHQgICAgTWFwOiBNYXAsXG5cdCAgICBPcmRlcmVkTWFwOiBPcmRlcmVkTWFwLFxuXHQgICAgTGlzdDogTGlzdCxcblx0ICAgIFN0YWNrOiBTdGFjayxcblx0ICAgIFNldDogU2V0LFxuXHQgICAgT3JkZXJlZFNldDogT3JkZXJlZFNldCxcblx0XG5cdCAgICBSZWNvcmQ6IFJlY29yZCxcblx0ICAgIFJhbmdlOiBSYW5nZSxcblx0ICAgIFJlcGVhdDogUmVwZWF0LFxuXHRcblx0ICAgIGlzOiBpcyxcblx0ICAgIGZyb21KUzogZnJvbUpTLFxuXHRcblx0ICB9O1xuXHRcblx0ICByZXR1cm4gSW1tdXRhYmxlO1xuXHRcblx0fSkpO1xuXG4vKioqLyB9LFxuLyogNTkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGZ1bmN0aW9uIGlzUmVhY3RDbGFzc2lzaChvYmopIHtcblx0ICBpZiAoIW9iaikge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0XG5cdCAgaWYgKG9iai5wcm90b3R5cGUgJiYgdHlwZW9mIG9iai5wcm90b3R5cGUucmVuZGVyID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAvLyBSZWFjdCAwLjEzXG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdFxuXHQgIGlmIChvYmoudHlwZSAmJiBvYmoudHlwZS5wcm90b3R5cGUgJiYgdHlwZW9mIG9iai50eXBlLnByb3RvdHlwZS5yZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgIC8vIFJlYWN0IDAuMTIgYW5kIGVhcmxpZXJcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0XG5cdCAgcmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGlzUmVhY3RDbGFzc2lzaDtcblxuLyoqKi8gfSxcbi8qIDYwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIENTU1Byb3BlcnR5XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKipcblx0ICogQ1NTIHByb3BlcnRpZXMgd2hpY2ggYWNjZXB0IG51bWJlcnMgYnV0IGFyZSBub3QgaW4gdW5pdHMgb2YgXCJweFwiLlxuXHQgKi9cblx0dmFyIGlzVW5pdGxlc3NOdW1iZXIgPSB7XG5cdCAgY29sdW1uQ291bnQ6IHRydWUsXG5cdCAgZmxleDogdHJ1ZSxcblx0ICBmbGV4R3JvdzogdHJ1ZSxcblx0ICBmbGV4U2hyaW5rOiB0cnVlLFxuXHQgIGZvbnRXZWlnaHQ6IHRydWUsXG5cdCAgbGluZUNsYW1wOiB0cnVlLFxuXHQgIGxpbmVIZWlnaHQ6IHRydWUsXG5cdCAgb3BhY2l0eTogdHJ1ZSxcblx0ICBvcmRlcjogdHJ1ZSxcblx0ICBvcnBoYW5zOiB0cnVlLFxuXHQgIHdpZG93czogdHJ1ZSxcblx0ICB6SW5kZXg6IHRydWUsXG5cdCAgem9vbTogdHJ1ZSxcblx0XG5cdCAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuXHQgIGZpbGxPcGFjaXR5OiB0cnVlLFxuXHQgIHN0cm9rZU9wYWNpdHk6IHRydWVcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IHZlbmRvci1zcGVjaWZpYyBwcmVmaXgsIGVnOiBXZWJraXRcblx0ICogQHBhcmFtIHtzdHJpbmd9IGtleSBzdHlsZSBuYW1lLCBlZzogdHJhbnNpdGlvbkR1cmF0aW9uXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gc3R5bGUgbmFtZSBwcmVmaXhlZCB3aXRoIGBwcmVmaXhgLCBwcm9wZXJseSBjYW1lbENhc2VkLCBlZzpcblx0ICogV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uXG5cdCAqL1xuXHRmdW5jdGlvbiBwcmVmaXhLZXkocHJlZml4LCBrZXkpIHtcblx0ICByZXR1cm4gcHJlZml4ICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxKTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIFN1cHBvcnQgc3R5bGUgbmFtZXMgdGhhdCBtYXkgY29tZSBwYXNzZWQgaW4gcHJlZml4ZWQgYnkgYWRkaW5nIHBlcm11dGF0aW9uc1xuXHQgKiBvZiB2ZW5kb3IgcHJlZml4ZXMuXG5cdCAqL1xuXHR2YXIgcHJlZml4ZXMgPSBbJ1dlYmtpdCcsICdtcycsICdNb3onLCAnTyddO1xuXHRcblx0Ly8gVXNpbmcgT2JqZWN0LmtleXMgaGVyZSwgb3IgZWxzZSB0aGUgdmFuaWxsYSBmb3ItaW4gbG9vcCBtYWtlcyBJRTggZ28gaW50byBhblxuXHQvLyBpbmZpbml0ZSBsb29wLCBiZWNhdXNlIGl0IGl0ZXJhdGVzIG92ZXIgdGhlIG5ld2x5IGFkZGVkIHByb3BzIHRvby5cblx0T2JqZWN0LmtleXMoaXNVbml0bGVzc051bWJlcikuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG5cdCAgcHJlZml4ZXMuZm9yRWFjaChmdW5jdGlvbihwcmVmaXgpIHtcblx0ICAgIGlzVW5pdGxlc3NOdW1iZXJbcHJlZml4S2V5KHByZWZpeCwgcHJvcCldID0gaXNVbml0bGVzc051bWJlcltwcm9wXTtcblx0ICB9KTtcblx0fSk7XG5cdFxuXHQvKipcblx0ICogTW9zdCBzdHlsZSBwcm9wZXJ0aWVzIGNhbiBiZSB1bnNldCBieSBkb2luZyAuc3R5bGVbcHJvcF0gPSAnJyBidXQgSUU4XG5cdCAqIGRvZXNuJ3QgbGlrZSBkb2luZyB0aGF0IHdpdGggc2hvcnRoYW5kIHByb3BlcnRpZXMgc28gZm9yIHRoZSBwcm9wZXJ0aWVzIHRoYXRcblx0ICogSUU4IGJyZWFrcyBvbiwgd2hpY2ggYXJlIGxpc3RlZCBoZXJlLCB3ZSBpbnN0ZWFkIHVuc2V0IGVhY2ggb2YgdGhlXG5cdCAqIGluZGl2aWR1YWwgcHJvcGVydGllcy4gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzg1LlxuXHQgKiBUaGUgNC12YWx1ZSAnY2xvY2snIHByb3BlcnRpZXMgbGlrZSBtYXJnaW4sIHBhZGRpbmcsIGJvcmRlci13aWR0aCBzZWVtIHRvXG5cdCAqIGJlaGF2ZSB3aXRob3V0IGFueSBwcm9ibGVtcy4gQ3VyaW91c2x5LCBsaXN0LXN0eWxlIHdvcmtzIHRvbyB3aXRob3V0IGFueVxuXHQgKiBzcGVjaWFsIHByb2RkaW5nLlxuXHQgKi9cblx0dmFyIHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9ucyA9IHtcblx0ICBiYWNrZ3JvdW5kOiB7XG5cdCAgICBiYWNrZ3JvdW5kSW1hZ2U6IHRydWUsXG5cdCAgICBiYWNrZ3JvdW5kUG9zaXRpb246IHRydWUsXG5cdCAgICBiYWNrZ3JvdW5kUmVwZWF0OiB0cnVlLFxuXHQgICAgYmFja2dyb3VuZENvbG9yOiB0cnVlXG5cdCAgfSxcblx0ICBib3JkZXI6IHtcblx0ICAgIGJvcmRlcldpZHRoOiB0cnVlLFxuXHQgICAgYm9yZGVyU3R5bGU6IHRydWUsXG5cdCAgICBib3JkZXJDb2xvcjogdHJ1ZVxuXHQgIH0sXG5cdCAgYm9yZGVyQm90dG9tOiB7XG5cdCAgICBib3JkZXJCb3R0b21XaWR0aDogdHJ1ZSxcblx0ICAgIGJvcmRlckJvdHRvbVN0eWxlOiB0cnVlLFxuXHQgICAgYm9yZGVyQm90dG9tQ29sb3I6IHRydWVcblx0ICB9LFxuXHQgIGJvcmRlckxlZnQ6IHtcblx0ICAgIGJvcmRlckxlZnRXaWR0aDogdHJ1ZSxcblx0ICAgIGJvcmRlckxlZnRTdHlsZTogdHJ1ZSxcblx0ICAgIGJvcmRlckxlZnRDb2xvcjogdHJ1ZVxuXHQgIH0sXG5cdCAgYm9yZGVyUmlnaHQ6IHtcblx0ICAgIGJvcmRlclJpZ2h0V2lkdGg6IHRydWUsXG5cdCAgICBib3JkZXJSaWdodFN0eWxlOiB0cnVlLFxuXHQgICAgYm9yZGVyUmlnaHRDb2xvcjogdHJ1ZVxuXHQgIH0sXG5cdCAgYm9yZGVyVG9wOiB7XG5cdCAgICBib3JkZXJUb3BXaWR0aDogdHJ1ZSxcblx0ICAgIGJvcmRlclRvcFN0eWxlOiB0cnVlLFxuXHQgICAgYm9yZGVyVG9wQ29sb3I6IHRydWVcblx0ICB9LFxuXHQgIGZvbnQ6IHtcblx0ICAgIGZvbnRTdHlsZTogdHJ1ZSxcblx0ICAgIGZvbnRWYXJpYW50OiB0cnVlLFxuXHQgICAgZm9udFdlaWdodDogdHJ1ZSxcblx0ICAgIGZvbnRTaXplOiB0cnVlLFxuXHQgICAgbGluZUhlaWdodDogdHJ1ZSxcblx0ICAgIGZvbnRGYW1pbHk6IHRydWVcblx0ICB9XG5cdH07XG5cdFxuXHR2YXIgQ1NTUHJvcGVydHkgPSB7XG5cdCAgaXNVbml0bGVzc051bWJlcjogaXNVbml0bGVzc051bWJlcixcblx0ICBzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnM6IHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uc1xuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBDU1NQcm9wZXJ0eTtcblxuXG4vKioqLyB9LFxuLyogNjEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBDU1NQcm9wZXJ0eU9wZXJhdGlvbnNcblx0ICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBDU1NQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oNjApO1xuXHR2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRcblx0dmFyIGNhbWVsaXplU3R5bGVOYW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjQpO1xuXHR2YXIgZGFuZ2Vyb3VzU3R5bGVWYWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTY4KTtcblx0dmFyIGh5cGhlbmF0ZVN0eWxlTmFtZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTc0KTtcblx0dmFyIG1lbW9pemVTdHJpbmdPbmx5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSk7XG5cdHZhciB3YXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdHZhciBwcm9jZXNzU3R5bGVOYW1lID0gbWVtb2l6ZVN0cmluZ09ubHkoZnVuY3Rpb24oc3R5bGVOYW1lKSB7XG5cdCAgcmV0dXJuIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHlsZU5hbWUpO1xuXHR9KTtcblx0XG5cdHZhciBzdHlsZUZsb2F0QWNjZXNzb3IgPSAnY3NzRmxvYXQnO1xuXHRpZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG5cdCAgLy8gSUU4IG9ubHkgc3VwcG9ydHMgYWNjZXNzaW5nIGNzc0Zsb2F0IChzdGFuZGFyZCkgYXMgc3R5bGVGbG9hdFxuXHQgIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuY3NzRmxvYXQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgc3R5bGVGbG9hdEFjY2Vzc29yID0gJ3N0eWxlRmxvYXQnO1xuXHQgIH1cblx0fVxuXHRcblx0aWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuXHQgIHZhciB3YXJuZWRTdHlsZU5hbWVzID0ge307XG5cdFxuXHQgIHZhciB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0ICAgIGlmICh3YXJuZWRTdHlsZU5hbWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0pIHtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHRcblx0ICAgIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0gPSB0cnVlO1xuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG5cdCAgICAgIGZhbHNlLFxuXHQgICAgICAnVW5zdXBwb3J0ZWQgc3R5bGUgcHJvcGVydHkgJyArIG5hbWUgKyAnLiBEaWQgeW91IG1lYW4gJyArXG5cdCAgICAgIGNhbWVsaXplU3R5bGVOYW1lKG5hbWUpICsgJz8nXG5cdCAgICApIDogbnVsbCk7XG5cdCAgfTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIE9wZXJhdGlvbnMgZm9yIGRlYWxpbmcgd2l0aCBDU1MgcHJvcGVydGllcy5cblx0ICovXG5cdHZhciBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMgPSB7XG5cdFxuXHQgIC8qKlxuXHQgICAqIFNlcmlhbGl6ZXMgYSBtYXBwaW5nIG9mIHN0eWxlIHByb3BlcnRpZXMgZm9yIHVzZSBhcyBpbmxpbmUgc3R5bGVzOlxuXHQgICAqXG5cdCAgICogICA+IGNyZWF0ZU1hcmt1cEZvclN0eWxlcyh7d2lkdGg6ICcyMDBweCcsIGhlaWdodDogMH0pXG5cdCAgICogICBcIndpZHRoOjIwMHB4O2hlaWdodDowO1wiXG5cdCAgICpcblx0ICAgKiBVbmRlZmluZWQgdmFsdWVzIGFyZSBpZ25vcmVkIHNvIHRoYXQgZGVjbGFyYXRpdmUgcHJvZ3JhbW1pbmcgaXMgZWFzaWVyLlxuXHQgICAqIFRoZSByZXN1bHQgc2hvdWxkIGJlIEhUTUwtZXNjYXBlZCBiZWZvcmUgaW5zZXJ0aW9uIGludG8gdGhlIERPTS5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7b2JqZWN0fSBzdHlsZXNcblx0ICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxuXHQgICAqL1xuXHQgIGNyZWF0ZU1hcmt1cEZvclN0eWxlczogZnVuY3Rpb24oc3R5bGVzKSB7XG5cdCAgICB2YXIgc2VyaWFsaXplZCA9ICcnO1xuXHQgICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHN0eWxlcykge1xuXHQgICAgICBpZiAoIXN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG5cdCAgICAgICAgY29udGludWU7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuXHQgICAgICAgIGlmIChzdHlsZU5hbWUuaW5kZXhPZignLScpID4gLTEpIHtcblx0ICAgICAgICAgIHdhcm5IeXBoZW5hdGVkU3R5bGVOYW1lKHN0eWxlTmFtZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHZhciBzdHlsZVZhbHVlID0gc3R5bGVzW3N0eWxlTmFtZV07XG5cdCAgICAgIGlmIChzdHlsZVZhbHVlICE9IG51bGwpIHtcblx0ICAgICAgICBzZXJpYWxpemVkICs9IHByb2Nlc3NTdHlsZU5hbWUoc3R5bGVOYW1lKSArICc6Jztcblx0ICAgICAgICBzZXJpYWxpemVkICs9IGRhbmdlcm91c1N0eWxlVmFsdWUoc3R5bGVOYW1lLCBzdHlsZVZhbHVlKSArICc7Jztcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIHNlcmlhbGl6ZWQgfHwgbnVsbDtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBTZXRzIHRoZSB2YWx1ZSBmb3IgbXVsdGlwbGUgc3R5bGVzIG9uIGEgbm9kZS4gIElmIGEgdmFsdWUgaXMgc3BlY2lmaWVkIGFzXG5cdCAgICogJycgKGVtcHR5IHN0cmluZyksIHRoZSBjb3JyZXNwb25kaW5nIHN0eWxlIHByb3BlcnR5IHdpbGwgYmUgdW5zZXQuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcblx0ICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzXG5cdCAgICovXG5cdCAgc2V0VmFsdWVGb3JTdHlsZXM6IGZ1bmN0aW9uKG5vZGUsIHN0eWxlcykge1xuXHQgICAgdmFyIHN0eWxlID0gbm9kZS5zdHlsZTtcblx0ICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcblx0ICAgICAgaWYgKCFzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuXHQgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgICBpZiAoc3R5bGVOYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG5cdCAgICAgICAgICB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZShzdHlsZU5hbWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICB2YXIgc3R5bGVWYWx1ZSA9IGRhbmdlcm91c1N0eWxlVmFsdWUoc3R5bGVOYW1lLCBzdHlsZXNbc3R5bGVOYW1lXSk7XG5cdCAgICAgIGlmIChzdHlsZU5hbWUgPT09ICdmbG9hdCcpIHtcblx0ICAgICAgICBzdHlsZU5hbWUgPSBzdHlsZUZsb2F0QWNjZXNzb3I7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHN0eWxlVmFsdWUpIHtcblx0ICAgICAgICBzdHlsZVtzdHlsZU5hbWVdID0gc3R5bGVWYWx1ZTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB2YXIgZXhwYW5zaW9uID0gQ1NTUHJvcGVydHkuc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zW3N0eWxlTmFtZV07XG5cdCAgICAgICAgaWYgKGV4cGFuc2lvbikge1xuXHQgICAgICAgICAgLy8gU2hvcnRoYW5kIHByb3BlcnR5IHRoYXQgSUU4IHdvbid0IGxpa2UgdW5zZXR0aW5nLCBzbyB1bnNldCBlYWNoXG5cdCAgICAgICAgICAvLyBjb21wb25lbnQgdG8gcGxhY2F0ZSBpdFxuXHQgICAgICAgICAgZm9yICh2YXIgaW5kaXZpZHVhbFN0eWxlTmFtZSBpbiBleHBhbnNpb24pIHtcblx0ICAgICAgICAgICAgc3R5bGVbaW5kaXZpZHVhbFN0eWxlTmFtZV0gPSAnJztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgc3R5bGVbc3R5bGVOYW1lXSA9ICcnO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IENTU1Byb3BlcnR5T3BlcmF0aW9ucztcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDYyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQbHVnaW5SZWdpc3RyeVxuXHQgKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIGludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHQvKipcblx0ICogSW5qZWN0YWJsZSBvcmRlcmluZyBvZiBldmVudCBwbHVnaW5zLlxuXHQgKi9cblx0dmFyIEV2ZW50UGx1Z2luT3JkZXIgPSBudWxsO1xuXHRcblx0LyoqXG5cdCAqIEluamVjdGFibGUgbWFwcGluZyBmcm9tIG5hbWVzIHRvIGV2ZW50IHBsdWdpbiBtb2R1bGVzLlxuXHQgKi9cblx0dmFyIG5hbWVzVG9QbHVnaW5zID0ge307XG5cdFxuXHQvKipcblx0ICogUmVjb21wdXRlcyB0aGUgcGx1Z2luIGxpc3QgdXNpbmcgdGhlIGluamVjdGVkIHBsdWdpbnMgYW5kIHBsdWdpbiBvcmRlcmluZy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIHJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nKCkge1xuXHQgIGlmICghRXZlbnRQbHVnaW5PcmRlcikge1xuXHQgICAgLy8gV2FpdCB1bnRpbCBhbiBgRXZlbnRQbHVnaW5PcmRlcmAgaXMgaW5qZWN0ZWQuXG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIGZvciAodmFyIHBsdWdpbk5hbWUgaW4gbmFtZXNUb1BsdWdpbnMpIHtcblx0ICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXTtcblx0ICAgIHZhciBwbHVnaW5JbmRleCA9IEV2ZW50UGx1Z2luT3JkZXIuaW5kZXhPZihwbHVnaW5OYW1lKTtcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgIHBsdWdpbkluZGV4ID4gLTEsXG5cdCAgICAgICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbnMgdGhhdCBkbyBub3QgZXhpc3QgaW4gJyArXG5cdCAgICAgICd0aGUgcGx1Z2luIG9yZGVyaW5nLCBgJXNgLicsXG5cdCAgICAgIHBsdWdpbk5hbWVcblx0ICAgICkgOiBpbnZhcmlhbnQocGx1Z2luSW5kZXggPiAtMSkpO1xuXHQgICAgaWYgKEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2luc1twbHVnaW5JbmRleF0pIHtcblx0ICAgICAgY29udGludWU7XG5cdCAgICB9XG5cdCAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICBQbHVnaW5Nb2R1bGUuZXh0cmFjdEV2ZW50cyxcblx0ICAgICAgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IEV2ZW50IHBsdWdpbnMgbXVzdCBpbXBsZW1lbnQgYW4gYGV4dHJhY3RFdmVudHNgICcgK1xuXHQgICAgICAnbWV0aG9kLCBidXQgYCVzYCBkb2VzIG5vdC4nLFxuXHQgICAgICBwbHVnaW5OYW1lXG5cdCAgICApIDogaW52YXJpYW50KFBsdWdpbk1vZHVsZS5leHRyYWN0RXZlbnRzKSk7XG5cdCAgICBFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnNbcGx1Z2luSW5kZXhdID0gUGx1Z2luTW9kdWxlO1xuXHQgICAgdmFyIHB1Ymxpc2hlZEV2ZW50cyA9IFBsdWdpbk1vZHVsZS5ldmVudFR5cGVzO1xuXHQgICAgZm9yICh2YXIgZXZlbnROYW1lIGluIHB1Ymxpc2hlZEV2ZW50cykge1xuXHQgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICAgIHB1Ymxpc2hFdmVudEZvclBsdWdpbihcblx0ICAgICAgICAgIHB1Ymxpc2hlZEV2ZW50c1tldmVudE5hbWVdLFxuXHQgICAgICAgICAgUGx1Z2luTW9kdWxlLFxuXHQgICAgICAgICAgZXZlbnROYW1lXG5cdCAgICAgICAgKSxcblx0ICAgICAgICAnRXZlbnRQbHVnaW5SZWdpc3RyeTogRmFpbGVkIHRvIHB1Ymxpc2ggZXZlbnQgYCVzYCBmb3IgcGx1Z2luIGAlc2AuJyxcblx0ICAgICAgICBldmVudE5hbWUsXG5cdCAgICAgICAgcGx1Z2luTmFtZVxuXHQgICAgICApIDogaW52YXJpYW50KHB1Ymxpc2hFdmVudEZvclBsdWdpbihcblx0ICAgICAgICBwdWJsaXNoZWRFdmVudHNbZXZlbnROYW1lXSxcblx0ICAgICAgICBQbHVnaW5Nb2R1bGUsXG5cdCAgICAgICAgZXZlbnROYW1lXG5cdCAgICAgICkpKTtcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBQdWJsaXNoZXMgYW4gZXZlbnQgc28gdGhhdCBpdCBjYW4gYmUgZGlzcGF0Y2hlZCBieSB0aGUgc3VwcGxpZWQgcGx1Z2luLlxuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgRGlzcGF0Y2ggY29uZmlndXJhdGlvbiBmb3IgdGhlIGV2ZW50LlxuXHQgKiBAcGFyYW0ge29iamVjdH0gUGx1Z2luTW9kdWxlIFBsdWdpbiBwdWJsaXNoaW5nIHRoZSBldmVudC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgd2FzIHN1Y2Nlc3NmdWxseSBwdWJsaXNoZWQuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBwdWJsaXNoRXZlbnRGb3JQbHVnaW4oZGlzcGF0Y2hDb25maWcsIFBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSB7XG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICFFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpLFxuXHQgICAgJ0V2ZW50UGx1Z2luSHViOiBNb3JlIHRoYW4gb25lIHBsdWdpbiBhdHRlbXB0ZWQgdG8gcHVibGlzaCB0aGUgc2FtZSAnICtcblx0ICAgICdldmVudCBuYW1lLCBgJXNgLicsXG5cdCAgICBldmVudE5hbWVcblx0ICApIDogaW52YXJpYW50KCFFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpKSk7XG5cdCAgRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3NbZXZlbnROYW1lXSA9IGRpc3BhdGNoQ29uZmlnO1xuXHRcblx0ICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMgPSBkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztcblx0ICBpZiAocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcblx0ICAgIGZvciAodmFyIHBoYXNlTmFtZSBpbiBwaGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuXHQgICAgICBpZiAocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkocGhhc2VOYW1lKSkge1xuXHQgICAgICAgIHZhciBwaGFzZWRSZWdpc3RyYXRpb25OYW1lID0gcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcGhhc2VOYW1lXTtcblx0ICAgICAgICBwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZShcblx0ICAgICAgICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWUsXG5cdCAgICAgICAgICBQbHVnaW5Nb2R1bGUsXG5cdCAgICAgICAgICBldmVudE5hbWVcblx0ICAgICAgICApO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9IGVsc2UgaWYgKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcblx0ICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKFxuXHQgICAgICBkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lLFxuXHQgICAgICBQbHVnaW5Nb2R1bGUsXG5cdCAgICAgIGV2ZW50TmFtZVxuXHQgICAgKTtcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0ICByZXR1cm4gZmFsc2U7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBQdWJsaXNoZXMgYSByZWdpc3RyYXRpb24gbmFtZSB0aGF0IGlzIHVzZWQgdG8gaWRlbnRpZnkgZGlzcGF0Y2hlZCBldmVudHMgYW5kXG5cdCAqIGNhbiBiZSB1c2VkIHdpdGggYEV2ZW50UGx1Z2luSHViLnB1dExpc3RlbmVyYCB0byByZWdpc3RlciBsaXN0ZW5lcnMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIFJlZ2lzdHJhdGlvbiBuYW1lIHRvIGFkZC5cblx0ICogQHBhcmFtIHtvYmplY3R9IFBsdWdpbk1vZHVsZSBQbHVnaW4gcHVibGlzaGluZyB0aGUgZXZlbnQuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZShyZWdpc3RyYXRpb25OYW1lLCBQbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSkge1xuXHQgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAhRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSxcblx0ICAgICdFdmVudFBsdWdpbkh1YjogTW9yZSB0aGFuIG9uZSBwbHVnaW4gYXR0ZW1wdGVkIHRvIHB1Ymxpc2ggdGhlIHNhbWUgJyArXG5cdCAgICAncmVnaXN0cmF0aW9uIG5hbWUsIGAlc2AuJyxcblx0ICAgIHJlZ2lzdHJhdGlvbk5hbWVcblx0ICApIDogaW52YXJpYW50KCFFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdKSk7XG5cdCAgRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSA9IFBsdWdpbk1vZHVsZTtcblx0ICBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV0gPVxuXHQgICAgUGx1Z2luTW9kdWxlLmV2ZW50VHlwZXNbZXZlbnROYW1lXS5kZXBlbmRlbmNpZXM7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBSZWdpc3RlcnMgcGx1Z2lucyBzbyB0aGF0IHRoZXkgY2FuIGV4dHJhY3QgYW5kIGRpc3BhdGNoIGV2ZW50cy5cblx0ICpcblx0ICogQHNlZSB7RXZlbnRQbHVnaW5IdWJ9XG5cdCAqL1xuXHR2YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHtcblx0XG5cdCAgLyoqXG5cdCAgICogT3JkZXJlZCBsaXN0IG9mIGluamVjdGVkIHBsdWdpbnMuXG5cdCAgICovXG5cdCAgcGx1Z2luczogW10sXG5cdFxuXHQgIC8qKlxuXHQgICAqIE1hcHBpbmcgZnJvbSBldmVudCBuYW1lIHRvIGRpc3BhdGNoIGNvbmZpZ1xuXHQgICAqL1xuXHQgIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczoge30sXG5cdFxuXHQgIC8qKlxuXHQgICAqIE1hcHBpbmcgZnJvbSByZWdpc3RyYXRpb24gbmFtZSB0byBwbHVnaW4gbW9kdWxlXG5cdCAgICovXG5cdCAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6IHt9LFxuXHRcblx0ICAvKipcblx0ICAgKiBNYXBwaW5nIGZyb20gcmVnaXN0cmF0aW9uIG5hbWUgdG8gZXZlbnQgbmFtZVxuXHQgICAqL1xuXHQgIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXM6IHt9LFxuXHRcblx0ICAvKipcblx0ICAgKiBJbmplY3RzIGFuIG9yZGVyaW5nIG9mIHBsdWdpbnMgKGJ5IHBsdWdpbiBuYW1lKS4gVGhpcyBhbGxvd3MgdGhlIG9yZGVyaW5nXG5cdCAgICogdG8gYmUgZGVjb3VwbGVkIGZyb20gaW5qZWN0aW9uIG9mIHRoZSBhY3R1YWwgcGx1Z2lucyBzbyB0aGF0IG9yZGVyaW5nIGlzXG5cdCAgICogYWx3YXlzIGRldGVybWluaXN0aWMgcmVnYXJkbGVzcyBvZiBwYWNrYWdpbmcsIG9uLXRoZS1mbHkgaW5qZWN0aW9uLCBldGMuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge2FycmF5fSBJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXJcblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5PcmRlcn1cblx0ICAgKi9cblx0ICBpbmplY3RFdmVudFBsdWdpbk9yZGVyOiBmdW5jdGlvbihJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIpIHtcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgICFFdmVudFBsdWdpbk9yZGVyLFxuXHQgICAgICAnRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCBldmVudCBwbHVnaW4gb3JkZXJpbmcgbW9yZSB0aGFuICcgK1xuXHQgICAgICAnb25jZS4gWW91IGFyZSBsaWtlbHkgdHJ5aW5nIHRvIGxvYWQgbW9yZSB0aGFuIG9uZSBjb3B5IG9mIFJlYWN0Lidcblx0ICAgICkgOiBpbnZhcmlhbnQoIUV2ZW50UGx1Z2luT3JkZXIpKTtcblx0ICAgIC8vIENsb25lIHRoZSBvcmRlcmluZyBzbyBpdCBjYW5ub3QgYmUgZHluYW1pY2FsbHkgbXV0YXRlZC5cblx0ICAgIEV2ZW50UGx1Z2luT3JkZXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIpO1xuXHQgICAgcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKTtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBJbmplY3RzIHBsdWdpbnMgdG8gYmUgdXNlZCBieSBgRXZlbnRQbHVnaW5IdWJgLiBUaGUgcGx1Z2luIG5hbWVzIG11c3QgYmVcblx0ICAgKiBpbiB0aGUgb3JkZXJpbmcgaW5qZWN0ZWQgYnkgYGluamVjdEV2ZW50UGx1Z2luT3JkZXJgLlxuXHQgICAqXG5cdCAgICogUGx1Z2lucyBjYW4gYmUgaW5qZWN0ZWQgYXMgcGFydCBvZiBwYWdlIGluaXRpYWxpemF0aW9uIG9yIG9uLXRoZS1mbHkuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge29iamVjdH0gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyBNYXAgZnJvbSBuYW1lcyB0byBwbHVnaW4gbW9kdWxlcy5cblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lfVxuXHQgICAqL1xuXHQgIGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTogZnVuY3Rpb24oaW5qZWN0ZWROYW1lc1RvUGx1Z2lucykge1xuXHQgICAgdmFyIGlzT3JkZXJpbmdEaXJ0eSA9IGZhbHNlO1xuXHQgICAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBpbmplY3RlZE5hbWVzVG9QbHVnaW5zKSB7XG5cdCAgICAgIGlmICghaW5qZWN0ZWROYW1lc1RvUGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShwbHVnaW5OYW1lKSkge1xuXHQgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBpbmplY3RlZE5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuXHQgICAgICBpZiAoIW5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpIHx8XG5cdCAgICAgICAgICBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSAhPT0gUGx1Z2luTW9kdWxlKSB7XG5cdCAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgICAgICFuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSxcblx0ICAgICAgICAgICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IHR3byBkaWZmZXJlbnQgZXZlbnQgcGx1Z2lucyAnICtcblx0ICAgICAgICAgICd1c2luZyB0aGUgc2FtZSBuYW1lLCBgJXNgLicsXG5cdCAgICAgICAgICBwbHVnaW5OYW1lXG5cdCAgICAgICAgKSA6IGludmFyaWFudCghbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV0pKTtcblx0ICAgICAgICBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSA9IFBsdWdpbk1vZHVsZTtcblx0ICAgICAgICBpc09yZGVyaW5nRGlydHkgPSB0cnVlO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAoaXNPcmRlcmluZ0RpcnR5KSB7XG5cdCAgICAgIHJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nKCk7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogTG9va3MgdXAgdGhlIHBsdWdpbiBmb3IgdGhlIHN1cHBsaWVkIGV2ZW50LlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IEEgc3ludGhldGljIGV2ZW50LlxuXHQgICAqIEByZXR1cm4gez9vYmplY3R9IFRoZSBwbHVnaW4gdGhhdCBjcmVhdGVkIHRoZSBzdXBwbGllZCBldmVudC5cblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKi9cblx0ICBnZXRQbHVnaW5Nb2R1bGVGb3JFdmVudDogZnVuY3Rpb24oZXZlbnQpIHtcblx0ICAgIHZhciBkaXNwYXRjaENvbmZpZyA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnO1xuXHQgICAgaWYgKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcblx0ICAgICAgcmV0dXJuIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbXG5cdCAgICAgICAgZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZVxuXHQgICAgICBdIHx8IG51bGw7XG5cdCAgICB9XG5cdCAgICBmb3IgKHZhciBwaGFzZSBpbiBkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuXHQgICAgICBpZiAoIWRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KHBoYXNlKSkge1xuXHQgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW1xuXHQgICAgICAgIGRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlXVxuXHQgICAgICBdO1xuXHQgICAgICBpZiAoUGx1Z2luTW9kdWxlKSB7XG5cdCAgICAgICAgcmV0dXJuIFBsdWdpbk1vZHVsZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIG51bGw7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLlxuXHQgICAqIEBwcml2YXRlXG5cdCAgICovXG5cdCAgX3Jlc2V0RXZlbnRQbHVnaW5zOiBmdW5jdGlvbigpIHtcblx0ICAgIEV2ZW50UGx1Z2luT3JkZXIgPSBudWxsO1xuXHQgICAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBuYW1lc1RvUGx1Z2lucykge1xuXHQgICAgICBpZiAobmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkpIHtcblx0ICAgICAgICBkZWxldGUgbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2lucy5sZW5ndGggPSAwO1xuXHRcblx0ICAgIHZhciBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncztcblx0ICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MpIHtcblx0ICAgICAgaWYgKGV2ZW50TmFtZURpc3BhdGNoQ29uZmlncy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpKSB7XG5cdCAgICAgICAgZGVsZXRlIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnc1tldmVudE5hbWVdO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlcztcblx0ICAgIGZvciAodmFyIHJlZ2lzdHJhdGlvbk5hbWUgaW4gcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMpIHtcblx0ICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHJlZ2lzdHJhdGlvbk5hbWUpKSB7XG5cdCAgICAgICAgZGVsZXRlIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5SZWdpc3RyeTtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDYzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIExvY2FsRXZlbnRUcmFwTWl4aW5cblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKTtcblx0XG5cdHZhciBhY2N1bXVsYXRlSW50byA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpO1xuXHR2YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MSk7XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0ZnVuY3Rpb24gcmVtb3ZlKGV2ZW50KSB7XG5cdCAgZXZlbnQucmVtb3ZlKCk7XG5cdH1cblx0XG5cdHZhciBMb2NhbEV2ZW50VHJhcE1peGluID0ge1xuXHQgIHRyYXBCdWJibGVkRXZlbnQ6ZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUpIHtcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQodGhpcy5pc01vdW50ZWQoKSwgJ011c3QgYmUgbW91bnRlZCB0byB0cmFwIGV2ZW50cycpIDogaW52YXJpYW50KHRoaXMuaXNNb3VudGVkKCkpKTtcblx0ICAgIHZhciBsaXN0ZW5lciA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KFxuXHQgICAgICB0b3BMZXZlbFR5cGUsXG5cdCAgICAgIGhhbmRsZXJCYXNlTmFtZSxcblx0ICAgICAgdGhpcy5nZXRET01Ob2RlKClcblx0ICAgICk7XG5cdCAgICB0aGlzLl9sb2NhbEV2ZW50TGlzdGVuZXJzID1cblx0ICAgICAgYWNjdW11bGF0ZUludG8odGhpcy5fbG9jYWxFdmVudExpc3RlbmVycywgbGlzdGVuZXIpO1xuXHQgIH0sXG5cdFxuXHQgIC8vIHRyYXBDYXB0dXJlZEV2ZW50IHdvdWxkIGxvb2sgbmVhcmx5IGlkZW50aWNhbC4gV2UgZG9uJ3QgaW1wbGVtZW50IHRoYXRcblx0ICAvLyBtZXRob2QgYmVjYXVzZSBpdCBpc24ndCBjdXJyZW50bHkgbmVlZGVkLlxuXHRcblx0ICBjb21wb25lbnRXaWxsVW5tb3VudDpmdW5jdGlvbigpIHtcblx0ICAgIGlmICh0aGlzLl9sb2NhbEV2ZW50TGlzdGVuZXJzKSB7XG5cdCAgICAgIGZvckVhY2hBY2N1bXVsYXRlZCh0aGlzLl9sb2NhbEV2ZW50TGlzdGVuZXJzLCByZW1vdmUpO1xuXHQgICAgfVxuXHQgIH1cblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gTG9jYWxFdmVudFRyYXBNaXhpbjtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDY0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01Db21wb25lbnRcblx0ICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxKTtcblx0dmFyIERPTVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cdHZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblx0dmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cdHZhciBSZWFjdENvbXBvbmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXHR2YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cdHZhciBSZWFjdE1vdW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblx0dmFyIFJlYWN0TXVsdGlDaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18oNjYpO1xuXHR2YXIgUmVhY3RQZXJmID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdFxuXHR2YXIgYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0dmFyIGVzY2FwZVRleHRGb3JCcm93c2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgaXNFdmVudFN1cHBvcnRlZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTYpO1xuXHR2YXIga2V5T2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblx0dmFyIG1vbml0b3JDb2RlVXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cdFxuXHR2YXIgZGVsZXRlTGlzdGVuZXIgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuZGVsZXRlTGlzdGVuZXI7XG5cdHZhciBsaXN0ZW5UbyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5saXN0ZW5Ubztcblx0dmFyIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzID0gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzO1xuXHRcblx0Ly8gRm9yIHF1aWNrbHkgbWF0Y2hpbmcgY2hpbGRyZW4gdHlwZSwgdG8gdGVzdCBpZiBjYW4gYmUgdHJlYXRlZCBhcyBjb250ZW50LlxuXHR2YXIgQ09OVEVOVF9UWVBFUyA9IHsnc3RyaW5nJzogdHJ1ZSwgJ251bWJlcic6IHRydWV9O1xuXHRcblx0dmFyIFNUWUxFID0ga2V5T2Yoe3N0eWxlOiBudWxsfSk7XG5cdFxuXHR2YXIgRUxFTUVOVF9OT0RFX1RZUEUgPSAxO1xuXHRcblx0LyoqXG5cdCAqIEBwYXJhbSB7P29iamVjdH0gcHJvcHNcblx0ICovXG5cdGZ1bmN0aW9uIGFzc2VydFZhbGlkUHJvcHMocHJvcHMpIHtcblx0ICBpZiAoIXByb3BzKSB7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIC8vIE5vdGUgdGhlIHVzZSBvZiBgPT1gIHdoaWNoIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWQuXG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgIHByb3BzLmNoaWxkcmVuID09IG51bGwgfHwgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT0gbnVsbCxcblx0ICAgICdDYW4gb25seSBzZXQgb25lIG9mIGBjaGlsZHJlbmAgb3IgYHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4nXG5cdCAgKSA6IGludmFyaWFudChwcm9wcy5jaGlsZHJlbiA9PSBudWxsIHx8IHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09IG51bGwpKTtcblx0ICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICBpZiAocHJvcHMuY29udGVudEVkaXRhYmxlICYmIHByb3BzLmNoaWxkcmVuICE9IG51bGwpIHtcblx0ICAgICAgY29uc29sZS53YXJuKFxuXHQgICAgICAgICdBIGNvbXBvbmVudCBpcyBgY29udGVudEVkaXRhYmxlYCBhbmQgY29udGFpbnMgYGNoaWxkcmVuYCBtYW5hZ2VkIGJ5ICcgK1xuXHQgICAgICAgICdSZWFjdC4gSXQgaXMgbm93IHlvdXIgcmVzcG9uc2liaWxpdHkgdG8gZ3VhcmFudGVlIHRoYXQgbm9uZSBvZiB0aG9zZSAnK1xuXHQgICAgICAgICdub2RlcyBhcmUgdW5leHBlY3RlZGx5IG1vZGlmaWVkIG9yIGR1cGxpY2F0ZWQuIFRoaXMgaXMgcHJvYmFibHkgbm90ICcgK1xuXHQgICAgICAgICdpbnRlbnRpb25hbC4nXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICBwcm9wcy5zdHlsZSA9PSBudWxsIHx8IHR5cGVvZiBwcm9wcy5zdHlsZSA9PT0gJ29iamVjdCcsXG5cdCAgICAnVGhlIGBzdHlsZWAgcHJvcCBleHBlY3RzIGEgbWFwcGluZyBmcm9tIHN0eWxlIHByb3BlcnRpZXMgdG8gdmFsdWVzLCAnICtcblx0ICAgICdub3QgYSBzdHJpbmcuJ1xuXHQgICkgOiBpbnZhcmlhbnQocHJvcHMuc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2YgcHJvcHMuc3R5bGUgPT09ICdvYmplY3QnKSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHB1dExpc3RlbmVyKGlkLCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lciwgdHJhbnNhY3Rpb24pIHtcblx0ICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICAvLyBJRTggaGFzIG5vIEFQSSBmb3IgZXZlbnQgY2FwdHVyaW5nIGFuZCB0aGUgYG9uU2Nyb2xsYCBldmVudCBkb2Vzbid0XG5cdCAgICAvLyBidWJibGUuXG5cdCAgICBpZiAocmVnaXN0cmF0aW9uTmFtZSA9PT0gJ29uU2Nyb2xsJyAmJlxuXHQgICAgICAgICFpc0V2ZW50U3VwcG9ydGVkKCdzY3JvbGwnLCB0cnVlKSkge1xuXHQgICAgICBtb25pdG9yQ29kZVVzZSgncmVhY3Rfbm9fc2Nyb2xsX2V2ZW50Jyk7XG5cdCAgICAgIGNvbnNvbGUud2FybignVGhpcyBicm93c2VyIGRvZXNuXFwndCBzdXBwb3J0IHRoZSBgb25TY3JvbGxgIGV2ZW50Jyk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHZhciBjb250YWluZXIgPSBSZWFjdE1vdW50LmZpbmRSZWFjdENvbnRhaW5lckZvcklEKGlkKTtcblx0ICBpZiAoY29udGFpbmVyKSB7XG5cdCAgICB2YXIgZG9jID0gY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSA/XG5cdCAgICAgIGNvbnRhaW5lci5vd25lckRvY3VtZW50IDpcblx0ICAgICAgY29udGFpbmVyO1xuXHQgICAgbGlzdGVuVG8ocmVnaXN0cmF0aW9uTmFtZSwgZG9jKTtcblx0ICB9XG5cdCAgdHJhbnNhY3Rpb24uZ2V0UHV0TGlzdGVuZXJRdWV1ZSgpLmVucXVldWVQdXRMaXN0ZW5lcihcblx0ICAgIGlkLFxuXHQgICAgcmVnaXN0cmF0aW9uTmFtZSxcblx0ICAgIGxpc3RlbmVyXG5cdCAgKTtcblx0fVxuXHRcblx0Ly8gRm9yIEhUTUwsIGNlcnRhaW4gdGFncyBzaG91bGQgb21pdCB0aGVpciBjbG9zZSB0YWcuIFdlIGtlZXAgYSB3aGl0ZWxpc3QgZm9yXG5cdC8vIHRob3NlIHNwZWNpYWwgY2FzZWQgdGFncy5cblx0XG5cdHZhciBvbWl0dGVkQ2xvc2VUYWdzID0ge1xuXHQgICdhcmVhJzogdHJ1ZSxcblx0ICAnYmFzZSc6IHRydWUsXG5cdCAgJ2JyJzogdHJ1ZSxcblx0ICAnY29sJzogdHJ1ZSxcblx0ICAnZW1iZWQnOiB0cnVlLFxuXHQgICdocic6IHRydWUsXG5cdCAgJ2ltZyc6IHRydWUsXG5cdCAgJ2lucHV0JzogdHJ1ZSxcblx0ICAna2V5Z2VuJzogdHJ1ZSxcblx0ICAnbGluayc6IHRydWUsXG5cdCAgJ21ldGEnOiB0cnVlLFxuXHQgICdwYXJhbSc6IHRydWUsXG5cdCAgJ3NvdXJjZSc6IHRydWUsXG5cdCAgJ3RyYWNrJzogdHJ1ZSxcblx0ICAnd2JyJzogdHJ1ZVxuXHQgIC8vIE5PVEU6IG1lbnVpdGVtJ3MgY2xvc2UgdGFnIHNob3VsZCBiZSBvbWl0dGVkLCBidXQgdGhhdCBjYXVzZXMgcHJvYmxlbXMuXG5cdH07XG5cdFxuXHQvLyBXZSBhY2NlcHQgYW55IHRhZyB0byBiZSByZW5kZXJlZCBidXQgc2luY2UgdGhpcyBnZXRzIGluamVjdGVkIGludG8gYWJpdHJhcnlcblx0Ly8gSFRNTCwgd2Ugd2FudCB0byBtYWtlIHN1cmUgdGhhdCBpdCdzIGEgc2FmZSB0YWcuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy14bWwvI05ULU5hbWVcblx0XG5cdHZhciBWQUxJRF9UQUdfUkVHRVggPSAvXlthLXpBLVpdW2EtekEtWjpfXFwuXFwtXFxkXSokLzsgLy8gU2ltcGxpZmllZCBzdWJzZXRcblx0dmFyIHZhbGlkYXRlZFRhZ0NhY2hlID0ge307XG5cdHZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXHRcblx0ZnVuY3Rpb24gdmFsaWRhdGVEYW5nZXJvdXNUYWcodGFnKSB7XG5cdCAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbGlkYXRlZFRhZ0NhY2hlLCB0YWcpKSB7XG5cdCAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFZBTElEX1RBR19SRUdFWC50ZXN0KHRhZyksICdJbnZhbGlkIHRhZzogJXMnLCB0YWcpIDogaW52YXJpYW50KFZBTElEX1RBR19SRUdFWC50ZXN0KHRhZykpKTtcblx0ICAgIHZhbGlkYXRlZFRhZ0NhY2hlW3RhZ10gPSB0cnVlO1xuXHQgIH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgUmVhY3QgY2xhc3MgdGhhdCBpcyBpZGVtcG90ZW50IGFuZCBjYXBhYmxlIG9mIGNvbnRhaW5pbmcgb3RoZXJcblx0ICogUmVhY3QgY29tcG9uZW50cy4gSXQgYWNjZXB0cyBldmVudCBsaXN0ZW5lcnMgYW5kIERPTSBwcm9wZXJ0aWVzIHRoYXQgYXJlXG5cdCAqIHZhbGlkIGFjY29yZGluZyB0byBgRE9NUHJvcGVydHlgLlxuXHQgKlxuXHQgKiAgLSBFdmVudCBsaXN0ZW5lcnM6IGBvbkNsaWNrYCwgYG9uTW91c2VEb3duYCwgZXRjLlxuXHQgKiAgLSBET00gcHJvcGVydGllczogYGNsYXNzTmFtZWAsIGBuYW1lYCwgYHRpdGxlYCwgZXRjLlxuXHQgKlxuXHQgKiBUaGUgYHN0eWxlYCBwcm9wZXJ0eSBmdW5jdGlvbnMgZGlmZmVyZW50bHkgZnJvbSB0aGUgRE9NIEFQSS4gSXQgYWNjZXB0cyBhblxuXHQgKiBvYmplY3QgbWFwcGluZyBvZiBzdHlsZSBwcm9wZXJ0aWVzIHRvIHZhbHVlcy5cblx0ICpcblx0ICogQGNvbnN0cnVjdG9yIFJlYWN0RE9NQ29tcG9uZW50XG5cdCAqIEBleHRlbmRzIFJlYWN0Q29tcG9uZW50XG5cdCAqIEBleHRlbmRzIFJlYWN0TXVsdGlDaGlsZFxuXHQgKi9cblx0ZnVuY3Rpb24gUmVhY3RET01Db21wb25lbnQodGFnKSB7XG5cdCAgdmFsaWRhdGVEYW5nZXJvdXNUYWcodGFnKTtcblx0ICB0aGlzLl90YWcgPSB0YWc7XG5cdCAgdGhpcy50YWdOYW1lID0gdGFnLnRvVXBwZXJDYXNlKCk7XG5cdH1cblx0XG5cdFJlYWN0RE9NQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gJ1JlYWN0RE9NQ29tcG9uZW50Jztcblx0XG5cdFJlYWN0RE9NQ29tcG9uZW50Lk1peGluID0ge1xuXHRcblx0ICAvKipcblx0ICAgKiBHZW5lcmF0ZXMgcm9vdCB0YWcgbWFya3VwIHRoZW4gcmVjdXJzZXMuIFRoaXMgbWV0aG9kIGhhcyBzaWRlIGVmZmVjdHMgYW5kXG5cdCAgICogaXMgbm90IGlkZW1wb3RlbnQuXG5cdCAgICpcblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIFRoZSByb290IERPTSBJRCBmb3IgdGhpcyBub2RlLlxuXHQgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuXHQgICAqIEBwYXJhbSB7bnVtYmVyfSBtb3VudERlcHRoIG51bWJlciBvZiBjb21wb25lbnRzIGluIHRoZSBvd25lciBoaWVyYXJjaHlcblx0ICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjb21wdXRlZCBtYXJrdXAuXG5cdCAgICovXG5cdCAgbW91bnRDb21wb25lbnQ6IFJlYWN0UGVyZi5tZWFzdXJlKFxuXHQgICAgJ1JlYWN0RE9NQ29tcG9uZW50Jyxcblx0ICAgICdtb3VudENvbXBvbmVudCcsXG5cdCAgICBmdW5jdGlvbihyb290SUQsIHRyYW5zYWN0aW9uLCBtb3VudERlcHRoKSB7XG5cdCAgICAgIFJlYWN0Q29tcG9uZW50Lk1peGluLm1vdW50Q29tcG9uZW50LmNhbGwoXG5cdCAgICAgICAgdGhpcyxcblx0ICAgICAgICByb290SUQsXG5cdCAgICAgICAgdHJhbnNhY3Rpb24sXG5cdCAgICAgICAgbW91bnREZXB0aFxuXHQgICAgICApO1xuXHQgICAgICBhc3NlcnRWYWxpZFByb3BzKHRoaXMucHJvcHMpO1xuXHQgICAgICB2YXIgY2xvc2VUYWcgPSBvbWl0dGVkQ2xvc2VUYWdzW3RoaXMuX3RhZ10gPyAnJyA6ICc8LycgKyB0aGlzLl90YWcgKyAnPic7XG5cdCAgICAgIHJldHVybiAoXG5cdCAgICAgICAgdGhpcy5fY3JlYXRlT3BlblRhZ01hcmt1cEFuZFB1dExpc3RlbmVycyh0cmFuc2FjdGlvbikgK1xuXHQgICAgICAgIHRoaXMuX2NyZWF0ZUNvbnRlbnRNYXJrdXAodHJhbnNhY3Rpb24pICtcblx0ICAgICAgICBjbG9zZVRhZ1xuXHQgICAgICApO1xuXHQgICAgfVxuXHQgICksXG5cdFxuXHQgIC8qKlxuXHQgICAqIENyZWF0ZXMgbWFya3VwIGZvciB0aGUgb3BlbiB0YWcgYW5kIGFsbCBhdHRyaWJ1dGVzLlxuXHQgICAqXG5cdCAgICogVGhpcyBtZXRob2QgaGFzIHNpZGUgZWZmZWN0cyBiZWNhdXNlIGV2ZW50cyBnZXQgcmVnaXN0ZXJlZC5cblx0ICAgKlxuXHQgICAqIEl0ZXJhdGluZyBvdmVyIG9iamVjdCBwcm9wZXJ0aWVzIGlzIGZhc3RlciB0aGFuIGl0ZXJhdGluZyBvdmVyIGFycmF5cy5cblx0ICAgKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL29iai12cy1hcnItaXRlcmF0aW9uXG5cdCAgICpcblx0ICAgKiBAcHJpdmF0ZVxuXHQgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuXHQgICAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIG9mIG9wZW5pbmcgdGFnLlxuXHQgICAqL1xuXHQgIF9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzOiBmdW5jdGlvbih0cmFuc2FjdGlvbikge1xuXHQgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcblx0ICAgIHZhciByZXQgPSAnPCcgKyB0aGlzLl90YWc7XG5cdFxuXHQgICAgZm9yICh2YXIgcHJvcEtleSBpbiBwcm9wcykge1xuXHQgICAgICBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG5cdCAgICAgICAgY29udGludWU7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BLZXldO1xuXHQgICAgICBpZiAocHJvcFZhbHVlID09IG51bGwpIHtcblx0ICAgICAgICBjb250aW51ZTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAocmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcblx0ICAgICAgICBwdXRMaXN0ZW5lcih0aGlzLl9yb290Tm9kZUlELCBwcm9wS2V5LCBwcm9wVmFsdWUsIHRyYW5zYWN0aW9uKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcblx0ICAgICAgICAgIGlmIChwcm9wVmFsdWUpIHtcblx0ICAgICAgICAgICAgcHJvcFZhbHVlID0gcHJvcHMuc3R5bGUgPSBhc3NpZ24oe30sIHByb3BzLnN0eWxlKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIHByb3BWYWx1ZSA9IENTU1Byb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JTdHlsZXMocHJvcFZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIG1hcmt1cCA9XG5cdCAgICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yUHJvcGVydHkocHJvcEtleSwgcHJvcFZhbHVlKTtcblx0ICAgICAgICBpZiAobWFya3VwKSB7XG5cdCAgICAgICAgICByZXQgKz0gJyAnICsgbWFya3VwO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIC8vIEZvciBzdGF0aWMgcGFnZXMsIG5vIG5lZWQgdG8gcHV0IFJlYWN0IElEIGFuZCBjaGVja3N1bS4gU2F2ZXMgbG90cyBvZlxuXHQgICAgLy8gYnl0ZXMuXG5cdCAgICBpZiAodHJhbnNhY3Rpb24ucmVuZGVyVG9TdGF0aWNNYXJrdXApIHtcblx0ICAgICAgcmV0dXJuIHJldCArICc+Jztcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgbWFya3VwRm9ySUQgPSBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9ySUQodGhpcy5fcm9vdE5vZGVJRCk7XG5cdCAgICByZXR1cm4gcmV0ICsgJyAnICsgbWFya3VwRm9ySUQgKyAnPic7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIHRoZSBjb250ZW50IGJldHdlZW4gdGhlIHRhZ3MuXG5cdCAgICpcblx0ICAgKiBAcHJpdmF0ZVxuXHQgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuXHQgICAqIEByZXR1cm4ge3N0cmluZ30gQ29udGVudCBtYXJrdXAuXG5cdCAgICovXG5cdCAgX2NyZWF0ZUNvbnRlbnRNYXJrdXA6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uKSB7XG5cdCAgICAvLyBJbnRlbnRpb25hbCB1c2Ugb2YgIT0gdG8gYXZvaWQgY2F0Y2hpbmcgemVyby9mYWxzZS5cblx0ICAgIHZhciBpbm5lckhUTUwgPSB0aGlzLnByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MO1xuXHQgICAgaWYgKGlubmVySFRNTCAhPSBudWxsKSB7XG5cdCAgICAgIGlmIChpbm5lckhUTUwuX19odG1sICE9IG51bGwpIHtcblx0ICAgICAgICByZXR1cm4gaW5uZXJIVE1MLl9faHRtbDtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdmFyIGNvbnRlbnRUb1VzZSA9XG5cdCAgICAgICAgQ09OVEVOVF9UWVBFU1t0eXBlb2YgdGhpcy5wcm9wcy5jaGlsZHJlbl0gPyB0aGlzLnByb3BzLmNoaWxkcmVuIDogbnVsbDtcblx0ICAgICAgdmFyIGNoaWxkcmVuVG9Vc2UgPSBjb250ZW50VG9Vc2UgIT0gbnVsbCA/IG51bGwgOiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXHQgICAgICBpZiAoY29udGVudFRvVXNlICE9IG51bGwpIHtcblx0ICAgICAgICByZXR1cm4gZXNjYXBlVGV4dEZvckJyb3dzZXIoY29udGVudFRvVXNlKTtcblx0ICAgICAgfSBlbHNlIGlmIChjaGlsZHJlblRvVXNlICE9IG51bGwpIHtcblx0ICAgICAgICB2YXIgbW91bnRJbWFnZXMgPSB0aGlzLm1vdW50Q2hpbGRyZW4oXG5cdCAgICAgICAgICBjaGlsZHJlblRvVXNlLFxuXHQgICAgICAgICAgdHJhbnNhY3Rpb25cblx0ICAgICAgICApO1xuXHQgICAgICAgIHJldHVybiBtb3VudEltYWdlcy5qb2luKCcnKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuICcnO1xuXHQgIH0sXG5cdFxuXHQgIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbikge1xuXHQgICAgaWYgKG5leHRFbGVtZW50ID09PSB0aGlzLl9jdXJyZW50RWxlbWVudCAmJlxuXHQgICAgICAgIG5leHRFbGVtZW50Ll9vd25lciAhPSBudWxsKSB7XG5cdCAgICAgIC8vIFNpbmNlIGVsZW1lbnRzIGFyZSBpbW11dGFibGUgYWZ0ZXIgdGhlIG93bmVyIGlzIHJlbmRlcmVkLFxuXHQgICAgICAvLyB3ZSBjYW4gZG8gYSBjaGVhcCBpZGVudGl0eSBjb21wYXJlIGhlcmUgdG8gZGV0ZXJtaW5lIGlmIHRoaXMgaXMgYVxuXHQgICAgICAvLyBzdXBlcmZsdW91cyByZWNvbmNpbGUuIEl0J3MgcG9zc2libGUgZm9yIHN0YXRlIHRvIGJlIG11dGFibGUgYnV0IHN1Y2hcblx0ICAgICAgLy8gY2hhbmdlIHNob3VsZCB0cmlnZ2VyIGFuIHVwZGF0ZSBvZiB0aGUgb3duZXIgd2hpY2ggd291bGQgcmVjcmVhdGVcblx0ICAgICAgLy8gdGhlIGVsZW1lbnQuIFdlIGV4cGxpY2l0bHkgY2hlY2sgZm9yIHRoZSBleGlzdGVuY2Ugb2YgYW4gb3duZXIgc2luY2Vcblx0ICAgICAgLy8gaXQncyBwb3NzaWJsZSBmb3IgYSBlbGVtZW50IGNyZWF0ZWQgb3V0c2lkZSBhIGNvbXBvc2l0ZSB0byBiZVxuXHQgICAgICAvLyBkZWVwbHkgbXV0YXRlZCBhbmQgcmV1c2VkLlxuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdFxuXHQgICAgUmVhY3RDb21wb25lbnQuTWl4aW4ucmVjZWl2ZUNvbXBvbmVudC5jYWxsKFxuXHQgICAgICB0aGlzLFxuXHQgICAgICBuZXh0RWxlbWVudCxcblx0ICAgICAgdHJhbnNhY3Rpb25cblx0ICAgICk7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogVXBkYXRlcyBhIG5hdGl2ZSBET00gY29tcG9uZW50IGFmdGVyIGl0IGhhcyBhbHJlYWR5IGJlZW4gYWxsb2NhdGVkIGFuZFxuXHQgICAqIGF0dGFjaGVkIHRvIHRoZSBET00uIFJlY29uY2lsZXMgdGhlIHJvb3QgRE9NIG5vZGUsIHRoZW4gcmVjdXJzZXMuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG5cdCAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IHByZXZFbGVtZW50XG5cdCAgICogQGludGVybmFsXG5cdCAgICogQG92ZXJyaWRhYmxlXG5cdCAgICovXG5cdCAgdXBkYXRlQ29tcG9uZW50OiBSZWFjdFBlcmYubWVhc3VyZShcblx0ICAgICdSZWFjdERPTUNvbXBvbmVudCcsXG5cdCAgICAndXBkYXRlQ29tcG9uZW50Jyxcblx0ICAgIGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBwcmV2RWxlbWVudCkge1xuXHQgICAgICBhc3NlcnRWYWxpZFByb3BzKHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzKTtcblx0ICAgICAgUmVhY3RDb21wb25lbnQuTWl4aW4udXBkYXRlQ29tcG9uZW50LmNhbGwoXG5cdCAgICAgICAgdGhpcyxcblx0ICAgICAgICB0cmFuc2FjdGlvbixcblx0ICAgICAgICBwcmV2RWxlbWVudFxuXHQgICAgICApO1xuXHQgICAgICB0aGlzLl91cGRhdGVET01Qcm9wZXJ0aWVzKHByZXZFbGVtZW50LnByb3BzLCB0cmFuc2FjdGlvbik7XG5cdCAgICAgIHRoaXMuX3VwZGF0ZURPTUNoaWxkcmVuKHByZXZFbGVtZW50LnByb3BzLCB0cmFuc2FjdGlvbik7XG5cdCAgICB9XG5cdCAgKSxcblx0XG5cdCAgLyoqXG5cdCAgICogUmVjb25jaWxlcyB0aGUgcHJvcGVydGllcyBieSBkZXRlY3RpbmcgZGlmZmVyZW5jZXMgaW4gcHJvcGVydHkgdmFsdWVzIGFuZFxuXHQgICAqIHVwZGF0aW5nIHRoZSBET00gYXMgbmVjZXNzYXJ5LiBUaGlzIGZ1bmN0aW9uIGlzIHByb2JhYmx5IHRoZSBzaW5nbGUgbW9zdFxuXHQgICAqIGNyaXRpY2FsIHBhdGggZm9yIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbi5cblx0ICAgKlxuXHQgICAqIFRPRE86IEJlbmNobWFyayB3aGV0aGVyIGNoZWNraW5nIGZvciBjaGFuZ2VkIHZhbHVlcyBpbiBtZW1vcnkgYWN0dWFsbHlcblx0ICAgKiAgICAgICBpbXByb3ZlcyBwZXJmb3JtYW5jZSAoZXNwZWNpYWxseSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudHMpLlxuXHQgICAqIFRPRE86IEJlbmNobWFyayB0aGUgZWZmZWN0cyBvZiBwdXR0aW5nIHRoaXMgYXQgdGhlIHRvcCBzaW5jZSA5OSUgb2YgcHJvcHNcblx0ICAgKiAgICAgICBkbyBub3QgY2hhbmdlIGZvciBhIGdpdmVuIHJlY29uY2lsaWF0aW9uLlxuXHQgICAqIFRPRE86IEJlbmNobWFyayBhcmVhcyB0aGF0IGNhbiBiZSBpbXByb3ZlZCB3aXRoIGNhY2hpbmcuXG5cdCAgICpcblx0ICAgKiBAcHJpdmF0ZVxuXHQgICAqIEBwYXJhbSB7b2JqZWN0fSBsYXN0UHJvcHNcblx0ICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG5cdCAgICovXG5cdCAgX3VwZGF0ZURPTVByb3BlcnRpZXM6IGZ1bmN0aW9uKGxhc3RQcm9wcywgdHJhbnNhY3Rpb24pIHtcblx0ICAgIHZhciBuZXh0UHJvcHMgPSB0aGlzLnByb3BzO1xuXHQgICAgdmFyIHByb3BLZXk7XG5cdCAgICB2YXIgc3R5bGVOYW1lO1xuXHQgICAgdmFyIHN0eWxlVXBkYXRlcztcblx0ICAgIGZvciAocHJvcEtleSBpbiBsYXN0UHJvcHMpIHtcblx0ICAgICAgaWYgKG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fFxuXHQgICAgICAgICAhbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG5cdCAgICAgICAgY29udGludWU7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG5cdCAgICAgICAgdmFyIGxhc3RTdHlsZSA9IGxhc3RQcm9wc1twcm9wS2V5XTtcblx0ICAgICAgICBmb3IgKHN0eWxlTmFtZSBpbiBsYXN0U3R5bGUpIHtcblx0ICAgICAgICAgIGlmIChsYXN0U3R5bGUuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuXHQgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG5cdCAgICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gJyc7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG5cdCAgICAgICAgZGVsZXRlTGlzdGVuZXIodGhpcy5fcm9vdE5vZGVJRCwgcHJvcEtleSk7XG5cdCAgICAgIH0gZWxzZSBpZiAoXG5cdCAgICAgICAgICBET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZVtwcm9wS2V5XSB8fFxuXHQgICAgICAgICAgRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUocHJvcEtleSkpIHtcblx0ICAgICAgICBSZWFjdENvbXBvbmVudC5CYWNrZW5kSURPcGVyYXRpb25zLmRlbGV0ZVByb3BlcnR5QnlJRChcblx0ICAgICAgICAgIHRoaXMuX3Jvb3ROb2RlSUQsXG5cdCAgICAgICAgICBwcm9wS2V5XG5cdCAgICAgICAgKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZm9yIChwcm9wS2V5IGluIG5leHRQcm9wcykge1xuXHQgICAgICB2YXIgbmV4dFByb3AgPSBuZXh0UHJvcHNbcHJvcEtleV07XG5cdCAgICAgIHZhciBsYXN0UHJvcCA9IGxhc3RQcm9wc1twcm9wS2V5XTtcblx0ICAgICAgaWYgKCFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHwgbmV4dFByb3AgPT09IGxhc3RQcm9wKSB7XG5cdCAgICAgICAgY29udGludWU7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG5cdCAgICAgICAgaWYgKG5leHRQcm9wKSB7XG5cdCAgICAgICAgICBuZXh0UHJvcCA9IG5leHRQcm9wcy5zdHlsZSA9IGFzc2lnbih7fSwgbmV4dFByb3ApO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAobGFzdFByb3ApIHtcblx0ICAgICAgICAgIC8vIFVuc2V0IHN0eWxlcyBvbiBgbGFzdFByb3BgIGJ1dCBub3Qgb24gYG5leHRQcm9wYC5cblx0ICAgICAgICAgIGZvciAoc3R5bGVOYW1lIGluIGxhc3RQcm9wKSB7XG5cdCAgICAgICAgICAgIGlmIChsYXN0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpICYmXG5cdCAgICAgICAgICAgICAgICAoIW5leHRQcm9wIHx8ICFuZXh0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSkge1xuXHQgICAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHN0eWxlVXBkYXRlcyB8fCB7fTtcblx0ICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9ICcnO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICAvLyBVcGRhdGUgc3R5bGVzIHRoYXQgY2hhbmdlZCBzaW5jZSBgbGFzdFByb3BgLlxuXHQgICAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbmV4dFByb3ApIHtcblx0ICAgICAgICAgICAgaWYgKG5leHRQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkgJiZcblx0ICAgICAgICAgICAgICAgIGxhc3RQcm9wW3N0eWxlTmFtZV0gIT09IG5leHRQcm9wW3N0eWxlTmFtZV0pIHtcblx0ICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG5cdCAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzW3N0eWxlTmFtZV0gPSBuZXh0UHJvcFtzdHlsZU5hbWVdO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIC8vIFJlbGllcyBvbiBgdXBkYXRlU3R5bGVzQnlJRGAgbm90IG11dGF0aW5nIGBzdHlsZVVwZGF0ZXNgLlxuXHQgICAgICAgICAgc3R5bGVVcGRhdGVzID0gbmV4dFByb3A7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG5cdCAgICAgICAgcHV0TGlzdGVuZXIodGhpcy5fcm9vdE5vZGVJRCwgcHJvcEtleSwgbmV4dFByb3AsIHRyYW5zYWN0aW9uKTtcblx0ICAgICAgfSBlbHNlIGlmIChcblx0ICAgICAgICAgIERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lW3Byb3BLZXldIHx8XG5cdCAgICAgICAgICBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShwcm9wS2V5KSkge1xuXHQgICAgICAgIFJlYWN0Q29tcG9uZW50LkJhY2tlbmRJRE9wZXJhdGlvbnMudXBkYXRlUHJvcGVydHlCeUlEKFxuXHQgICAgICAgICAgdGhpcy5fcm9vdE5vZGVJRCxcblx0ICAgICAgICAgIHByb3BLZXksXG5cdCAgICAgICAgICBuZXh0UHJvcFxuXHQgICAgICAgICk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGlmIChzdHlsZVVwZGF0ZXMpIHtcblx0ICAgICAgUmVhY3RDb21wb25lbnQuQmFja2VuZElET3BlcmF0aW9ucy51cGRhdGVTdHlsZXNCeUlEKFxuXHQgICAgICAgIHRoaXMuX3Jvb3ROb2RlSUQsXG5cdCAgICAgICAgc3R5bGVVcGRhdGVzXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogUmVjb25jaWxlcyB0aGUgY2hpbGRyZW4gd2l0aCB0aGUgdmFyaW91cyBwcm9wZXJ0aWVzIHRoYXQgYWZmZWN0IHRoZVxuXHQgICAqIGNoaWxkcmVuIGNvbnRlbnQuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge29iamVjdH0gbGFzdFByb3BzXG5cdCAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuXHQgICAqL1xuXHQgIF91cGRhdGVET01DaGlsZHJlbjogZnVuY3Rpb24obGFzdFByb3BzLCB0cmFuc2FjdGlvbikge1xuXHQgICAgdmFyIG5leHRQcm9wcyA9IHRoaXMucHJvcHM7XG5cdFxuXHQgICAgdmFyIGxhc3RDb250ZW50ID1cblx0ICAgICAgQ09OVEVOVF9UWVBFU1t0eXBlb2YgbGFzdFByb3BzLmNoaWxkcmVuXSA/IGxhc3RQcm9wcy5jaGlsZHJlbiA6IG51bGw7XG5cdCAgICB2YXIgbmV4dENvbnRlbnQgPVxuXHQgICAgICBDT05URU5UX1RZUEVTW3R5cGVvZiBuZXh0UHJvcHMuY2hpbGRyZW5dID8gbmV4dFByb3BzLmNoaWxkcmVuIDogbnVsbDtcblx0XG5cdCAgICB2YXIgbGFzdEh0bWwgPVxuXHQgICAgICBsYXN0UHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgJiZcblx0ICAgICAgbGFzdFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbDtcblx0ICAgIHZhciBuZXh0SHRtbCA9XG5cdCAgICAgIG5leHRQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJlxuXHQgICAgICBuZXh0UHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sO1xuXHRcblx0ICAgIC8vIE5vdGUgdGhlIHVzZSBvZiBgIT1gIHdoaWNoIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWQuXG5cdCAgICB2YXIgbGFzdENoaWxkcmVuID0gbGFzdENvbnRlbnQgIT0gbnVsbCA/IG51bGwgOiBsYXN0UHJvcHMuY2hpbGRyZW47XG5cdCAgICB2YXIgbmV4dENoaWxkcmVuID0gbmV4dENvbnRlbnQgIT0gbnVsbCA/IG51bGwgOiBuZXh0UHJvcHMuY2hpbGRyZW47XG5cdFxuXHQgICAgLy8gSWYgd2UncmUgc3dpdGNoaW5nIGZyb20gY2hpbGRyZW4gdG8gY29udGVudC9odG1sIG9yIHZpY2UgdmVyc2EsIHJlbW92ZVxuXHQgICAgLy8gdGhlIG9sZCBjb250ZW50XG5cdCAgICB2YXIgbGFzdEhhc0NvbnRlbnRPckh0bWwgPSBsYXN0Q29udGVudCAhPSBudWxsIHx8IGxhc3RIdG1sICE9IG51bGw7XG5cdCAgICB2YXIgbmV4dEhhc0NvbnRlbnRPckh0bWwgPSBuZXh0Q29udGVudCAhPSBudWxsIHx8IG5leHRIdG1sICE9IG51bGw7XG5cdCAgICBpZiAobGFzdENoaWxkcmVuICE9IG51bGwgJiYgbmV4dENoaWxkcmVuID09IG51bGwpIHtcblx0ICAgICAgdGhpcy51cGRhdGVDaGlsZHJlbihudWxsLCB0cmFuc2FjdGlvbik7XG5cdCAgICB9IGVsc2UgaWYgKGxhc3RIYXNDb250ZW50T3JIdG1sICYmICFuZXh0SGFzQ29udGVudE9ySHRtbCkge1xuXHQgICAgICB0aGlzLnVwZGF0ZVRleHRDb250ZW50KCcnKTtcblx0ICAgIH1cblx0XG5cdCAgICBpZiAobmV4dENvbnRlbnQgIT0gbnVsbCkge1xuXHQgICAgICBpZiAobGFzdENvbnRlbnQgIT09IG5leHRDb250ZW50KSB7XG5cdCAgICAgICAgdGhpcy51cGRhdGVUZXh0Q29udGVudCgnJyArIG5leHRDb250ZW50KTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIGlmIChuZXh0SHRtbCAhPSBudWxsKSB7XG5cdCAgICAgIGlmIChsYXN0SHRtbCAhPT0gbmV4dEh0bWwpIHtcblx0ICAgICAgICBSZWFjdENvbXBvbmVudC5CYWNrZW5kSURPcGVyYXRpb25zLnVwZGF0ZUlubmVySFRNTEJ5SUQoXG5cdCAgICAgICAgICB0aGlzLl9yb290Tm9kZUlELFxuXHQgICAgICAgICAgbmV4dEh0bWxcblx0ICAgICAgICApO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2UgaWYgKG5leHRDaGlsZHJlbiAhPSBudWxsKSB7XG5cdCAgICAgIHRoaXMudXBkYXRlQ2hpbGRyZW4obmV4dENoaWxkcmVuLCB0cmFuc2FjdGlvbik7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogRGVzdHJveXMgYWxsIGV2ZW50IHJlZ2lzdHJhdGlvbnMgZm9yIHRoaXMgaW5zdGFuY2UuIERvZXMgbm90IHJlbW92ZSBmcm9tXG5cdCAgICogdGhlIERPTS4gVGhhdCBtdXN0IGJlIGRvbmUgYnkgdGhlIHBhcmVudC5cblx0ICAgKlxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy51bm1vdW50Q2hpbGRyZW4oKTtcblx0ICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5kZWxldGVBbGxMaXN0ZW5lcnModGhpcy5fcm9vdE5vZGVJRCk7XG5cdCAgICBSZWFjdENvbXBvbmVudC5NaXhpbi51bm1vdW50Q29tcG9uZW50LmNhbGwodGhpcyk7XG5cdCAgfVxuXHRcblx0fTtcblx0XG5cdGFzc2lnbihcblx0ICBSZWFjdERPTUNvbXBvbmVudC5wcm90b3R5cGUsXG5cdCAgUmVhY3RDb21wb25lbnQuTWl4aW4sXG5cdCAgUmVhY3RET01Db21wb25lbnQuTWl4aW4sXG5cdCAgUmVhY3RNdWx0aUNoaWxkLk1peGluLFxuXHQgIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXG5cdCk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NQ29tcG9uZW50O1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogNjUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RNYXJrdXBDaGVja3N1bVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIGFkbGVyMzIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2Mik7XG5cdFxuXHR2YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IHtcblx0ICBDSEVDS1NVTV9BVFRSX05BTUU6ICdkYXRhLXJlYWN0LWNoZWNrc3VtJyxcblx0XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgc3RyaW5nXG5cdCAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgc3RyaW5nIHdpdGggY2hlY2tzdW0gYXR0cmlidXRlIGF0dGFjaGVkXG5cdCAgICovXG5cdCAgYWRkQ2hlY2tzdW1Ub01hcmt1cDogZnVuY3Rpb24obWFya3VwKSB7XG5cdCAgICB2YXIgY2hlY2tzdW0gPSBhZGxlcjMyKG1hcmt1cCk7XG5cdCAgICByZXR1cm4gbWFya3VwLnJlcGxhY2UoXG5cdCAgICAgICc+Jyxcblx0ICAgICAgJyAnICsgUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUgKyAnPVwiJyArIGNoZWNrc3VtICsgJ1wiPidcblx0ICAgICk7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCB0byB1c2Vcblx0ICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgcm9vdCBSZWFjdCBlbGVtZW50XG5cdCAgICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgb3Igbm90IHRoZSBtYXJrdXAgaXMgdGhlIHNhbWVcblx0ICAgKi9cblx0ICBjYW5SZXVzZU1hcmt1cDogZnVuY3Rpb24obWFya3VwLCBlbGVtZW50KSB7XG5cdCAgICB2YXIgZXhpc3RpbmdDaGVja3N1bSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFxuXHQgICAgICBSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRVxuXHQgICAgKTtcblx0ICAgIGV4aXN0aW5nQ2hlY2tzdW0gPSBleGlzdGluZ0NoZWNrc3VtICYmIHBhcnNlSW50KGV4aXN0aW5nQ2hlY2tzdW0sIDEwKTtcblx0ICAgIHZhciBtYXJrdXBDaGVja3N1bSA9IGFkbGVyMzIobWFya3VwKTtcblx0ICAgIHJldHVybiBtYXJrdXBDaGVja3N1bSA9PT0gZXhpc3RpbmdDaGVja3N1bTtcblx0ICB9XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0TWFya3VwQ2hlY2tzdW07XG5cblxuLyoqKi8gfSxcbi8qIDY2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TXVsdGlDaGlsZFxuXHQgKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIFJlYWN0Q29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cdHZhciBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oNjcpO1xuXHRcblx0dmFyIGZsYXR0ZW5DaGlsZHJlbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTcwKTtcblx0dmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KTtcblx0dmFyIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Nyk7XG5cdFxuXHQvKipcblx0ICogVXBkYXRpbmcgY2hpbGRyZW4gb2YgYSBjb21wb25lbnQgbWF5IHRyaWdnZXIgcmVjdXJzaXZlIHVwZGF0ZXMuIFRoZSBkZXB0aCBpc1xuXHQgKiB1c2VkIHRvIGJhdGNoIHJlY3Vyc2l2ZSB1cGRhdGVzIHRvIHJlbmRlciBtYXJrdXAgbW9yZSBlZmZpY2llbnRseS5cblx0ICpcblx0ICogQHR5cGUge251bWJlcn1cblx0ICogQHByaXZhdGVcblx0ICovXG5cdHZhciB1cGRhdGVEZXB0aCA9IDA7XG5cdFxuXHQvKipcblx0ICogUXVldWUgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb24gb2JqZWN0cy5cblx0ICpcblx0ICogRWFjaCBvYmplY3QgaGFzIGEgYHR5cGVgIHByb3BlcnR5IHRoYXQgaXMgaW4gYFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzYC5cblx0ICpcblx0ICogQHR5cGUge2FycmF5PG9iamVjdD59XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHR2YXIgdXBkYXRlUXVldWUgPSBbXTtcblx0XG5cdC8qKlxuXHQgKiBRdWV1ZSBvZiBtYXJrdXAgdG8gYmUgcmVuZGVyZWQuXG5cdCAqXG5cdCAqIEB0eXBlIHthcnJheTxzdHJpbmc+fVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0dmFyIG1hcmt1cFF1ZXVlID0gW107XG5cdFxuXHQvKipcblx0ICogRW5xdWV1ZXMgbWFya3VwIHRvIGJlIHJlbmRlcmVkIGFuZCBpbnNlcnRlZCBhdCBhIHN1cHBsaWVkIGluZGV4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50SUQgSUQgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHRoYXQgcmVuZGVycyBpbnRvIGFuIGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0b0luZGV4IERlc3RpbmF0aW9uIGluZGV4LlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gZW5xdWV1ZU1hcmt1cChwYXJlbnRJRCwgbWFya3VwLCB0b0luZGV4KSB7XG5cdCAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuXHQgIHVwZGF0ZVF1ZXVlLnB1c2goe1xuXHQgICAgcGFyZW50SUQ6IHBhcmVudElELFxuXHQgICAgcGFyZW50Tm9kZTogbnVsbCxcblx0ICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLklOU0VSVF9NQVJLVVAsXG5cdCAgICBtYXJrdXBJbmRleDogbWFya3VwUXVldWUucHVzaChtYXJrdXApIC0gMSxcblx0ICAgIHRleHRDb250ZW50OiBudWxsLFxuXHQgICAgZnJvbUluZGV4OiBudWxsLFxuXHQgICAgdG9JbmRleDogdG9JbmRleFxuXHQgIH0pO1xuXHR9XG5cdFxuXHQvKipcblx0ICogRW5xdWV1ZXMgbW92aW5nIGFuIGV4aXN0aW5nIGVsZW1lbnQgdG8gYW5vdGhlciBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFNvdXJjZSBpbmRleCBvZiB0aGUgZXhpc3RpbmcgZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggRGVzdGluYXRpb24gaW5kZXggb2YgdGhlIGVsZW1lbnQuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBlbnF1ZXVlTW92ZShwYXJlbnRJRCwgZnJvbUluZGV4LCB0b0luZGV4KSB7XG5cdCAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuXHQgIHVwZGF0ZVF1ZXVlLnB1c2goe1xuXHQgICAgcGFyZW50SUQ6IHBhcmVudElELFxuXHQgICAgcGFyZW50Tm9kZTogbnVsbCxcblx0ICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLk1PVkVfRVhJU1RJTkcsXG5cdCAgICBtYXJrdXBJbmRleDogbnVsbCxcblx0ICAgIHRleHRDb250ZW50OiBudWxsLFxuXHQgICAgZnJvbUluZGV4OiBmcm9tSW5kZXgsXG5cdCAgICB0b0luZGV4OiB0b0luZGV4XG5cdCAgfSk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBFbnF1ZXVlcyByZW1vdmluZyBhbiBlbGVtZW50IGF0IGFuIGluZGV4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50SUQgSUQgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggSW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmVtb3ZlLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gZW5xdWV1ZVJlbW92ZShwYXJlbnRJRCwgZnJvbUluZGV4KSB7XG5cdCAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuXHQgIHVwZGF0ZVF1ZXVlLnB1c2goe1xuXHQgICAgcGFyZW50SUQ6IHBhcmVudElELFxuXHQgICAgcGFyZW50Tm9kZTogbnVsbCxcblx0ICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlJFTU9WRV9OT0RFLFxuXHQgICAgbWFya3VwSW5kZXg6IG51bGwsXG5cdCAgICB0ZXh0Q29udGVudDogbnVsbCxcblx0ICAgIGZyb21JbmRleDogZnJvbUluZGV4LFxuXHQgICAgdG9JbmRleDogbnVsbFxuXHQgIH0pO1xuXHR9XG5cdFxuXHQvKipcblx0ICogRW5xdWV1ZXMgc2V0dGluZyB0aGUgdGV4dCBjb250ZW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50SUQgSUQgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0Q29udGVudCBUZXh0IGNvbnRlbnQgdG8gc2V0LlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gZW5xdWV1ZVRleHRDb250ZW50KHBhcmVudElELCB0ZXh0Q29udGVudCkge1xuXHQgIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cblx0ICB1cGRhdGVRdWV1ZS5wdXNoKHtcblx0ICAgIHBhcmVudElEOiBwYXJlbnRJRCxcblx0ICAgIHBhcmVudE5vZGU6IG51bGwsXG5cdCAgICB0eXBlOiBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5URVhUX0NPTlRFTlQsXG5cdCAgICBtYXJrdXBJbmRleDogbnVsbCxcblx0ICAgIHRleHRDb250ZW50OiB0ZXh0Q29udGVudCxcblx0ICAgIGZyb21JbmRleDogbnVsbCxcblx0ICAgIHRvSW5kZXg6IG51bGxcblx0ICB9KTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIFByb2Nlc3NlcyBhbnkgZW5xdWV1ZWQgdXBkYXRlcy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIHByb2Nlc3NRdWV1ZSgpIHtcblx0ICBpZiAodXBkYXRlUXVldWUubGVuZ3RoKSB7XG5cdCAgICBSZWFjdENvbXBvbmVudC5CYWNrZW5kSURPcGVyYXRpb25zLmRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyhcblx0ICAgICAgdXBkYXRlUXVldWUsXG5cdCAgICAgIG1hcmt1cFF1ZXVlXG5cdCAgICApO1xuXHQgICAgY2xlYXJRdWV1ZSgpO1xuXHQgIH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIENsZWFycyBhbnkgZW5xdWV1ZWQgdXBkYXRlcy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGNsZWFyUXVldWUoKSB7XG5cdCAgdXBkYXRlUXVldWUubGVuZ3RoID0gMDtcblx0ICBtYXJrdXBRdWV1ZS5sZW5ndGggPSAwO1xuXHR9XG5cdFxuXHQvKipcblx0ICogUmVhY3RNdWx0aUNoaWxkIGFyZSBjYXBhYmxlIG9mIHJlY29uY2lsaW5nIG11bHRpcGxlIGNoaWxkcmVuLlxuXHQgKlxuXHQgKiBAY2xhc3MgUmVhY3RNdWx0aUNoaWxkXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0dmFyIFJlYWN0TXVsdGlDaGlsZCA9IHtcblx0XG5cdCAgLyoqXG5cdCAgICogUHJvdmlkZXMgY29tbW9uIGZ1bmN0aW9uYWxpdHkgZm9yIGNvbXBvbmVudHMgdGhhdCBtdXN0IHJlY29uY2lsZSBtdWx0aXBsZVxuXHQgICAqIGNoaWxkcmVuLiBUaGlzIGlzIHVzZWQgYnkgYFJlYWN0RE9NQ29tcG9uZW50YCB0byBtb3VudCwgdXBkYXRlLCBhbmRcblx0ICAgKiB1bm1vdW50IGNoaWxkIGNvbXBvbmVudHMuXG5cdCAgICpcblx0ICAgKiBAbGVuZHMge1JlYWN0TXVsdGlDaGlsZC5wcm90b3R5cGV9XG5cdCAgICovXG5cdCAgTWl4aW46IHtcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEdlbmVyYXRlcyBhIFwibW91bnQgaW1hZ2VcIiBmb3IgZWFjaCBvZiB0aGUgc3VwcGxpZWQgY2hpbGRyZW4uIEluIHRoZSBjYXNlXG5cdCAgICAgKiBvZiBgUmVhY3RET01Db21wb25lbnRgLCBhIG1vdW50IGltYWdlIGlzIGEgc3RyaW5nIG9mIG1hcmt1cC5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5lc3RlZENoaWxkcmVuIE5lc3RlZCBjaGlsZCBtYXBzLlxuXHQgICAgICogQHJldHVybiB7YXJyYXl9IEFuIGFycmF5IG9mIG1vdW50ZWQgcmVwcmVzZW50YXRpb25zLlxuXHQgICAgICogQGludGVybmFsXG5cdCAgICAgKi9cblx0ICAgIG1vdW50Q2hpbGRyZW46IGZ1bmN0aW9uKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbikge1xuXHQgICAgICB2YXIgY2hpbGRyZW4gPSBmbGF0dGVuQ2hpbGRyZW4obmVzdGVkQ2hpbGRyZW4pO1xuXHQgICAgICB2YXIgbW91bnRJbWFnZXMgPSBbXTtcblx0ICAgICAgdmFyIGluZGV4ID0gMDtcblx0ICAgICAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IGNoaWxkcmVuO1xuXHQgICAgICBmb3IgKHZhciBuYW1lIGluIGNoaWxkcmVuKSB7XG5cdCAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5bbmFtZV07XG5cdCAgICAgICAgaWYgKGNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG5cdCAgICAgICAgICAvLyBUaGUgcmVuZGVyZWQgY2hpbGRyZW4gbXVzdCBiZSB0dXJuZWQgaW50byBpbnN0YW5jZXMgYXMgdGhleSdyZVxuXHQgICAgICAgICAgLy8gbW91bnRlZC5cblx0ICAgICAgICAgIHZhciBjaGlsZEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChjaGlsZCwgbnVsbCk7XG5cdCAgICAgICAgICBjaGlsZHJlbltuYW1lXSA9IGNoaWxkSW5zdGFuY2U7XG5cdCAgICAgICAgICAvLyBJbmxpbmVkIGZvciBwZXJmb3JtYW5jZSwgc2VlIGBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdElEYC5cblx0ICAgICAgICAgIHZhciByb290SUQgPSB0aGlzLl9yb290Tm9kZUlEICsgbmFtZTtcblx0ICAgICAgICAgIHZhciBtb3VudEltYWdlID0gY2hpbGRJbnN0YW5jZS5tb3VudENvbXBvbmVudChcblx0ICAgICAgICAgICAgcm9vdElELFxuXHQgICAgICAgICAgICB0cmFuc2FjdGlvbixcblx0ICAgICAgICAgICAgdGhpcy5fbW91bnREZXB0aCArIDFcblx0ICAgICAgICAgICk7XG5cdCAgICAgICAgICBjaGlsZEluc3RhbmNlLl9tb3VudEluZGV4ID0gaW5kZXg7XG5cdCAgICAgICAgICBtb3VudEltYWdlcy5wdXNoKG1vdW50SW1hZ2UpO1xuXHQgICAgICAgICAgaW5kZXgrKztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG1vdW50SW1hZ2VzO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIFJlcGxhY2VzIGFueSByZW5kZXJlZCBjaGlsZHJlbiB3aXRoIGEgdGV4dCBjb250ZW50IHN0cmluZy5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV4dENvbnRlbnQgU3RyaW5nIG9mIGNvbnRlbnQuXG5cdCAgICAgKiBAaW50ZXJuYWxcblx0ICAgICAqL1xuXHQgICAgdXBkYXRlVGV4dENvbnRlbnQ6IGZ1bmN0aW9uKG5leHRDb250ZW50KSB7XG5cdCAgICAgIHVwZGF0ZURlcHRoKys7XG5cdCAgICAgIHZhciBlcnJvclRocm93biA9IHRydWU7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG5cdCAgICAgICAgLy8gUmVtb3ZlIGFueSByZW5kZXJlZCBjaGlsZHJlbi5cblx0ICAgICAgICBmb3IgKHZhciBuYW1lIGluIHByZXZDaGlsZHJlbikge1xuXHQgICAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuXHQgICAgICAgICAgICB0aGlzLl91bm1vdW50Q2hpbGRCeU5hbWUocHJldkNoaWxkcmVuW25hbWVdLCBuYW1lKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gU2V0IG5ldyB0ZXh0IGNvbnRlbnQuXG5cdCAgICAgICAgdGhpcy5zZXRUZXh0Q29udGVudChuZXh0Q29udGVudCk7XG5cdCAgICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcblx0ICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICB1cGRhdGVEZXB0aC0tO1xuXHQgICAgICAgIGlmICghdXBkYXRlRGVwdGgpIHtcblx0ICAgICAgICAgIGVycm9yVGhyb3duID8gY2xlYXJRdWV1ZSgpIDogcHJvY2Vzc1F1ZXVlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogVXBkYXRlcyB0aGUgcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBuZXcgY2hpbGRyZW4uXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0TmVzdGVkQ2hpbGRyZW4gTmVzdGVkIGNoaWxkIG1hcHMuXG5cdCAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG5cdCAgICAgKiBAaW50ZXJuYWxcblx0ICAgICAqL1xuXHQgICAgdXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uKG5leHROZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24pIHtcblx0ICAgICAgdXBkYXRlRGVwdGgrKztcblx0ICAgICAgdmFyIGVycm9yVGhyb3duID0gdHJ1ZTtcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICB0aGlzLl91cGRhdGVDaGlsZHJlbihuZXh0TmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uKTtcblx0ICAgICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuXHQgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgIHVwZGF0ZURlcHRoLS07XG5cdCAgICAgICAgaWYgKCF1cGRhdGVEZXB0aCkge1xuXHQgICAgICAgICAgZXJyb3JUaHJvd24gPyBjbGVhclF1ZXVlKCkgOiBwcm9jZXNzUXVldWUoKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBJbXByb3ZlIHBlcmZvcm1hbmNlIGJ5IGlzb2xhdGluZyB0aGlzIGhvdCBjb2RlIHBhdGggZnJvbSB0aGUgdHJ5L2NhdGNoXG5cdCAgICAgKiBibG9jayBpbiBgdXBkYXRlQ2hpbGRyZW5gLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dE5lc3RlZENoaWxkcmVuIE5lc3RlZCBjaGlsZCBtYXBzLlxuXHQgICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuXHQgICAgICogQGZpbmFsXG5cdCAgICAgKiBAcHJvdGVjdGVkXG5cdCAgICAgKi9cblx0ICAgIF91cGRhdGVDaGlsZHJlbjogZnVuY3Rpb24obmV4dE5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbikge1xuXHQgICAgICB2YXIgbmV4dENoaWxkcmVuID0gZmxhdHRlbkNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbik7XG5cdCAgICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuXHQgICAgICBpZiAoIW5leHRDaGlsZHJlbiAmJiAhcHJldkNoaWxkcmVuKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBuYW1lO1xuXHQgICAgICAvLyBgbmV4dEluZGV4YCB3aWxsIGluY3JlbWVudCBmb3IgZWFjaCBjaGlsZCBpbiBgbmV4dENoaWxkcmVuYCwgYnV0XG5cdCAgICAgIC8vIGBsYXN0SW5kZXhgIHdpbGwgYmUgdGhlIGxhc3QgaW5kZXggdmlzaXRlZCBpbiBgcHJldkNoaWxkcmVuYC5cblx0ICAgICAgdmFyIGxhc3RJbmRleCA9IDA7XG5cdCAgICAgIHZhciBuZXh0SW5kZXggPSAwO1xuXHQgICAgICBmb3IgKG5hbWUgaW4gbmV4dENoaWxkcmVuKSB7XG5cdCAgICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcblx0ICAgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkcmVuICYmIHByZXZDaGlsZHJlbltuYW1lXTtcblx0ICAgICAgICB2YXIgcHJldkVsZW1lbnQgPSBwcmV2Q2hpbGQgJiYgcHJldkNoaWxkLl9jdXJyZW50RWxlbWVudDtcblx0ICAgICAgICB2YXIgbmV4dEVsZW1lbnQgPSBuZXh0Q2hpbGRyZW5bbmFtZV07XG5cdCAgICAgICAgaWYgKHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcblx0ICAgICAgICAgIHRoaXMubW92ZUNoaWxkKHByZXZDaGlsZCwgbmV4dEluZGV4LCBsYXN0SW5kZXgpO1xuXHQgICAgICAgICAgbGFzdEluZGV4ID0gTWF0aC5tYXgocHJldkNoaWxkLl9tb3VudEluZGV4LCBsYXN0SW5kZXgpO1xuXHQgICAgICAgICAgcHJldkNoaWxkLnJlY2VpdmVDb21wb25lbnQobmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uKTtcblx0ICAgICAgICAgIHByZXZDaGlsZC5fbW91bnRJbmRleCA9IG5leHRJbmRleDtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgaWYgKHByZXZDaGlsZCkge1xuXHQgICAgICAgICAgICAvLyBVcGRhdGUgYGxhc3RJbmRleGAgYmVmb3JlIGBfbW91bnRJbmRleGAgZ2V0cyB1bnNldCBieSB1bm1vdW50aW5nLlxuXHQgICAgICAgICAgICBsYXN0SW5kZXggPSBNYXRoLm1heChwcmV2Q2hpbGQuX21vdW50SW5kZXgsIGxhc3RJbmRleCk7XG5cdCAgICAgICAgICAgIHRoaXMuX3VubW91bnRDaGlsZEJ5TmFtZShwcmV2Q2hpbGQsIG5hbWUpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgLy8gVGhlIGNoaWxkIG11c3QgYmUgaW5zdGFudGlhdGVkIGJlZm9yZSBpdCdzIG1vdW50ZWQuXG5cdCAgICAgICAgICB2YXIgbmV4dENoaWxkSW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KFxuXHQgICAgICAgICAgICBuZXh0RWxlbWVudCxcblx0ICAgICAgICAgICAgbnVsbFxuXHQgICAgICAgICAgKTtcblx0ICAgICAgICAgIHRoaXMuX21vdW50Q2hpbGRCeU5hbWVBdEluZGV4KFxuXHQgICAgICAgICAgICBuZXh0Q2hpbGRJbnN0YW5jZSwgbmFtZSwgbmV4dEluZGV4LCB0cmFuc2FjdGlvblxuXHQgICAgICAgICAgKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgbmV4dEluZGV4Kys7XG5cdCAgICAgIH1cblx0ICAgICAgLy8gUmVtb3ZlIGNoaWxkcmVuIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50LlxuXHQgICAgICBmb3IgKG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG5cdCAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxuXHQgICAgICAgICAgICAhKG5leHRDaGlsZHJlbiAmJiBuZXh0Q2hpbGRyZW5bbmFtZV0pKSB7XG5cdCAgICAgICAgICB0aGlzLl91bm1vdW50Q2hpbGRCeU5hbWUocHJldkNoaWxkcmVuW25hbWVdLCBuYW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBVbm1vdW50cyBhbGwgcmVuZGVyZWQgY2hpbGRyZW4uIFRoaXMgc2hvdWxkIGJlIHVzZWQgdG8gY2xlYW4gdXAgY2hpbGRyZW5cblx0ICAgICAqIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxuXHQgICAgICpcblx0ICAgICAqIEBpbnRlcm5hbFxuXHQgICAgICovXG5cdCAgICB1bm1vdW50Q2hpbGRyZW46IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgcmVuZGVyZWRDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG5cdCAgICAgIGZvciAodmFyIG5hbWUgaW4gcmVuZGVyZWRDaGlsZHJlbikge1xuXHQgICAgICAgIHZhciByZW5kZXJlZENoaWxkID0gcmVuZGVyZWRDaGlsZHJlbltuYW1lXTtcblx0ICAgICAgICAvLyBUT0RPOiBXaGVuIGlzIHRoaXMgbm90IHRydWU/XG5cdCAgICAgICAgaWYgKHJlbmRlcmVkQ2hpbGQudW5tb3VudENvbXBvbmVudCkge1xuXHQgICAgICAgICAgcmVuZGVyZWRDaGlsZC51bm1vdW50Q29tcG9uZW50KCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBudWxsO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIE1vdmVzIGEgY2hpbGQgY29tcG9uZW50IHRvIHRoZSBzdXBwbGllZCBpbmRleC5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gbW92ZS5cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0b0luZGV4IERlc3RpbmF0aW9uIGluZGV4IG9mIHRoZSBlbGVtZW50LlxuXHQgICAgICogQHBhcmFtIHtudW1iZXJ9IGxhc3RJbmRleCBMYXN0IGluZGV4IHZpc2l0ZWQgb2YgdGhlIHNpYmxpbmdzIG9mIGBjaGlsZGAuXG5cdCAgICAgKiBAcHJvdGVjdGVkXG5cdCAgICAgKi9cblx0ICAgIG1vdmVDaGlsZDogZnVuY3Rpb24oY2hpbGQsIHRvSW5kZXgsIGxhc3RJbmRleCkge1xuXHQgICAgICAvLyBJZiB0aGUgaW5kZXggb2YgYGNoaWxkYCBpcyBsZXNzIHRoYW4gYGxhc3RJbmRleGAsIHRoZW4gaXQgbmVlZHMgdG9cblx0ICAgICAgLy8gYmUgbW92ZWQuIE90aGVyd2lzZSwgd2UgZG8gbm90IG5lZWQgdG8gbW92ZSBpdCBiZWNhdXNlIGEgY2hpbGQgd2lsbCBiZVxuXHQgICAgICAvLyBpbnNlcnRlZCBvciBtb3ZlZCBiZWZvcmUgYGNoaWxkYC5cblx0ICAgICAgaWYgKGNoaWxkLl9tb3VudEluZGV4IDwgbGFzdEluZGV4KSB7XG5cdCAgICAgICAgZW5xdWV1ZU1vdmUodGhpcy5fcm9vdE5vZGVJRCwgY2hpbGQuX21vdW50SW5kZXgsIHRvSW5kZXgpO1xuXHQgICAgICB9XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQ3JlYXRlcyBhIGNoaWxkIGNvbXBvbmVudC5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gY3JlYXRlLlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IG1vdW50SW1hZ2UgTWFya3VwIHRvIGluc2VydC5cblx0ICAgICAqIEBwcm90ZWN0ZWRcblx0ICAgICAqL1xuXHQgICAgY3JlYXRlQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkLCBtb3VudEltYWdlKSB7XG5cdCAgICAgIGVucXVldWVNYXJrdXAodGhpcy5fcm9vdE5vZGVJRCwgbW91bnRJbWFnZSwgY2hpbGQuX21vdW50SW5kZXgpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIFJlbW92ZXMgYSBjaGlsZCBjb21wb25lbnQuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ2hpbGQgdG8gcmVtb3ZlLlxuXHQgICAgICogQHByb3RlY3RlZFxuXHQgICAgICovXG5cdCAgICByZW1vdmVDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHtcblx0ICAgICAgZW5xdWV1ZVJlbW92ZSh0aGlzLl9yb290Tm9kZUlELCBjaGlsZC5fbW91bnRJbmRleCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogU2V0cyB0aGlzIHRleHQgY29udGVudCBzdHJpbmcuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRDb250ZW50IFRleHQgY29udGVudCB0byBzZXQuXG5cdCAgICAgKiBAcHJvdGVjdGVkXG5cdCAgICAgKi9cblx0ICAgIHNldFRleHRDb250ZW50OiBmdW5jdGlvbih0ZXh0Q29udGVudCkge1xuXHQgICAgICBlbnF1ZXVlVGV4dENvbnRlbnQodGhpcy5fcm9vdE5vZGVJRCwgdGV4dENvbnRlbnQpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIE1vdW50cyBhIGNoaWxkIHdpdGggdGhlIHN1cHBsaWVkIG5hbWUuXG5cdCAgICAgKlxuXHQgICAgICogTk9URTogVGhpcyBpcyBwYXJ0IG9mIGB1cGRhdGVDaGlsZHJlbmAgYW5kIGlzIGhlcmUgZm9yIHJlYWRhYmlsaXR5LlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byBtb3VudC5cblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGNoaWxkLlxuXHQgICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IGF0IHdoaWNoIHRvIGluc2VydCB0aGUgY2hpbGQuXG5cdCAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfbW91bnRDaGlsZEJ5TmFtZUF0SW5kZXg6IGZ1bmN0aW9uKGNoaWxkLCBuYW1lLCBpbmRleCwgdHJhbnNhY3Rpb24pIHtcblx0ICAgICAgLy8gSW5saW5lZCBmb3IgcGVyZm9ybWFuY2UsIHNlZSBgUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RJRGAuXG5cdCAgICAgIHZhciByb290SUQgPSB0aGlzLl9yb290Tm9kZUlEICsgbmFtZTtcblx0ICAgICAgdmFyIG1vdW50SW1hZ2UgPSBjaGlsZC5tb3VudENvbXBvbmVudChcblx0ICAgICAgICByb290SUQsXG5cdCAgICAgICAgdHJhbnNhY3Rpb24sXG5cdCAgICAgICAgdGhpcy5fbW91bnREZXB0aCArIDFcblx0ICAgICAgKTtcblx0ICAgICAgY2hpbGQuX21vdW50SW5kZXggPSBpbmRleDtcblx0ICAgICAgdGhpcy5jcmVhdGVDaGlsZChjaGlsZCwgbW91bnRJbWFnZSk7XG5cdCAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuIHx8IHt9O1xuXHQgICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuW25hbWVdID0gY2hpbGQ7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogVW5tb3VudHMgYSByZW5kZXJlZCBjaGlsZCBieSBuYW1lLlxuXHQgICAgICpcblx0ICAgICAqIE5PVEU6IFRoaXMgaXMgcGFydCBvZiBgdXBkYXRlQ2hpbGRyZW5gIGFuZCBpcyBoZXJlIGZvciByZWFkYWJpbGl0eS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gdW5tb3VudC5cblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGNoaWxkIGluIGB0aGlzLl9yZW5kZXJlZENoaWxkcmVuYC5cblx0ICAgICAqIEBwcml2YXRlXG5cdCAgICAgKi9cblx0ICAgIF91bm1vdW50Q2hpbGRCeU5hbWU6IGZ1bmN0aW9uKGNoaWxkLCBuYW1lKSB7XG5cdCAgICAgIHRoaXMucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuXHQgICAgICBjaGlsZC5fbW91bnRJbmRleCA9IG51bGw7XG5cdCAgICAgIGNoaWxkLnVubW91bnRDb21wb25lbnQoKTtcblx0ICAgICAgZGVsZXRlIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW5bbmFtZV07XG5cdCAgICB9XG5cdFxuXHQgIH1cblx0XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0TXVsdGlDaGlsZDtcblxuXG4vKioqLyB9LFxuLyogNjcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBrZXlNaXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KTtcblx0XG5cdC8qKlxuXHQgKiBXaGVuIGEgY29tcG9uZW50J3MgY2hpbGRyZW4gYXJlIHVwZGF0ZWQsIGEgc2VyaWVzIG9mIHVwZGF0ZSBjb25maWd1cmF0aW9uXG5cdCAqIG9iamVjdHMgYXJlIGNyZWF0ZWQgaW4gb3JkZXIgdG8gYmF0Y2ggYW5kIHNlcmlhbGl6ZSB0aGUgcmVxdWlyZWQgY2hhbmdlcy5cblx0ICpcblx0ICogRW51bWVyYXRlcyBhbGwgdGhlIHBvc3NpYmxlIHR5cGVzIG9mIHVwZGF0ZSBjb25maWd1cmF0aW9ucy5cblx0ICpcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHR2YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSBrZXlNaXJyb3Ioe1xuXHQgIElOU0VSVF9NQVJLVVA6IG51bGwsXG5cdCAgTU9WRV9FWElTVElORzogbnVsbCxcblx0ICBSRU1PVkVfTk9ERTogbnVsbCxcblx0ICBURVhUX0NPTlRFTlQ6IG51bGxcblx0fSk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzO1xuXG5cbi8qKiovIH0sXG4vKiA2OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE5hdGl2ZUNvbXBvbmVudFxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIGFzc2lnbiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIGdlbmVyaWNDb21wb25lbnRDbGFzcyA9IG51bGw7XG5cdC8vIFRoaXMgcmVnaXN0cnkga2VlcHMgdHJhY2sgb2Ygd3JhcHBlciBjbGFzc2VzIGFyb3VuZCBuYXRpdmUgdGFnc1xuXHR2YXIgdGFnVG9Db21wb25lbnRDbGFzcyA9IHt9O1xuXHRcblx0dmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50SW5qZWN0aW9uID0ge1xuXHQgIC8vIFRoaXMgYWNjZXB0cyBhIGNsYXNzIHRoYXQgcmVjZWl2ZXMgdGhlIHRhZyBzdHJpbmcuIFRoaXMgaXMgYSBjYXRjaCBhbGxcblx0ICAvLyB0aGF0IGNhbiByZW5kZXIgYW55IGtpbmQgb2YgdGFnLlxuXHQgIGluamVjdEdlbmVyaWNDb21wb25lbnRDbGFzczogZnVuY3Rpb24oY29tcG9uZW50Q2xhc3MpIHtcblx0ICAgIGdlbmVyaWNDb21wb25lbnRDbGFzcyA9IGNvbXBvbmVudENsYXNzO1xuXHQgIH0sXG5cdCAgLy8gVGhpcyBhY2NlcHRzIGEga2V5ZWQgb2JqZWN0IHdpdGggY2xhc3NlcyBhcyB2YWx1ZXMuIEVhY2gga2V5IHJlcHJlc2VudHMgYVxuXHQgIC8vIHRhZy4gVGhhdCBwYXJ0aWN1bGFyIHRhZyB3aWxsIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgdGhlIGdlbmVyaWMgb25lLlxuXHQgIGluamVjdENvbXBvbmVudENsYXNzZXM6IGZ1bmN0aW9uKGNvbXBvbmVudENsYXNzZXMpIHtcblx0ICAgIGFzc2lnbih0YWdUb0NvbXBvbmVudENsYXNzLCBjb21wb25lbnRDbGFzc2VzKTtcblx0ICB9XG5cdH07XG5cdFxuXHQvKipcblx0ICogQ3JlYXRlIGFuIGludGVybmFsIGNsYXNzIGZvciBhIHNwZWNpZmljIHRhZy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgdGFnIGZvciB3aGljaCB0byBjcmVhdGUgYW4gaW50ZXJuYWwgaW5zdGFuY2UuXG5cdCAqIEBwYXJhbSB7YW55fSBwcm9wcyBUaGUgcHJvcHMgcGFzc2VkIHRvIHRoZSBpbnN0YW5jZSBjb25zdHJ1Y3Rvci5cblx0ICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBUaGUgaW5qZWN0ZWQgZW1wdHkgY29tcG9uZW50LlxuXHQgKi9cblx0ZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VGb3JUYWcodGFnLCBwcm9wcywgcGFyZW50VHlwZSkge1xuXHQgIHZhciBjb21wb25lbnRDbGFzcyA9IHRhZ1RvQ29tcG9uZW50Q2xhc3NbdGFnXTtcblx0ICBpZiAoY29tcG9uZW50Q2xhc3MgPT0gbnVsbCkge1xuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgZ2VuZXJpY0NvbXBvbmVudENsYXNzLFxuXHQgICAgICAnVGhlcmUgaXMgbm8gcmVnaXN0ZXJlZCBjb21wb25lbnQgZm9yIHRoZSB0YWcgJXMnLFxuXHQgICAgICB0YWdcblx0ICAgICkgOiBpbnZhcmlhbnQoZ2VuZXJpY0NvbXBvbmVudENsYXNzKSk7XG5cdCAgICByZXR1cm4gbmV3IGdlbmVyaWNDb21wb25lbnRDbGFzcyh0YWcsIHByb3BzKTtcblx0ICB9XG5cdCAgaWYgKHBhcmVudFR5cGUgPT09IHRhZykge1xuXHQgICAgLy8gQXZvaWQgcmVjdXJzaW9uXG5cdCAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICBnZW5lcmljQ29tcG9uZW50Q2xhc3MsXG5cdCAgICAgICdUaGVyZSBpcyBubyByZWdpc3RlcmVkIGNvbXBvbmVudCBmb3IgdGhlIHRhZyAlcycsXG5cdCAgICAgIHRhZ1xuXHQgICAgKSA6IGludmFyaWFudChnZW5lcmljQ29tcG9uZW50Q2xhc3MpKTtcblx0ICAgIHJldHVybiBuZXcgZ2VuZXJpY0NvbXBvbmVudENsYXNzKHRhZywgcHJvcHMpO1xuXHQgIH1cblx0ICAvLyBVbndyYXAgbGVnYWN5IGZhY3Rvcmllc1xuXHQgIHJldHVybiBuZXcgY29tcG9uZW50Q2xhc3MudHlwZShwcm9wcyk7XG5cdH1cblx0XG5cdHZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudCA9IHtcblx0ICBjcmVhdGVJbnN0YW5jZUZvclRhZzogY3JlYXRlSW5zdGFuY2VGb3JUYWcsXG5cdCAgaW5qZWN0aW9uOiBSZWFjdE5hdGl2ZUNvbXBvbmVudEluamVjdGlvblxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudDtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDY5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RPd25lclxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIGVtcHR5T2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjkpO1xuXHR2YXIgaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdC8qKlxuXHQgKiBSZWFjdE93bmVycyBhcmUgY2FwYWJsZSBvZiBzdG9yaW5nIHJlZmVyZW5jZXMgdG8gb3duZWQgY29tcG9uZW50cy5cblx0ICpcblx0ICogQWxsIGNvbXBvbmVudHMgYXJlIGNhcGFibGUgb2YgLy9iZWluZy8vIHJlZmVyZW5jZWQgYnkgb3duZXIgY29tcG9uZW50cywgYnV0XG5cdCAqIG9ubHkgUmVhY3RPd25lciBjb21wb25lbnRzIGFyZSBjYXBhYmxlIG9mIC8vcmVmZXJlbmNpbmcvLyBvd25lZCBjb21wb25lbnRzLlxuXHQgKiBUaGUgbmFtZWQgcmVmZXJlbmNlIGlzIGtub3duIGFzIGEgXCJyZWZcIi5cblx0ICpcblx0ICogUmVmcyBhcmUgYXZhaWxhYmxlIHdoZW4gbW91bnRlZCBhbmQgdXBkYXRlZCBkdXJpbmcgcmVjb25jaWxpYXRpb24uXG5cdCAqXG5cdCAqICAgdmFyIE15Q29tcG9uZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHQgKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcblx0ICogICAgICAgcmV0dXJuIChcblx0ICogICAgICAgICA8ZGl2IG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9PlxuXHQgKiAgICAgICAgICAgPEN1c3RvbUNvbXBvbmVudCByZWY9XCJjdXN0b21cIiAvPlxuXHQgKiAgICAgICAgIDwvZGl2PlxuXHQgKiAgICAgICApO1xuXHQgKiAgICAgfSxcblx0ICogICAgIGhhbmRsZUNsaWNrOiBmdW5jdGlvbigpIHtcblx0ICogICAgICAgdGhpcy5yZWZzLmN1c3RvbS5oYW5kbGVDbGljaygpO1xuXHQgKiAgICAgfSxcblx0ICogICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcblx0ICogICAgICAgdGhpcy5yZWZzLmN1c3RvbS5pbml0aWFsaXplKCk7XG5cdCAqICAgICB9XG5cdCAqICAgfSk7XG5cdCAqXG5cdCAqIFJlZnMgc2hvdWxkIHJhcmVseSBiZSB1c2VkLiBXaGVuIHJlZnMgYXJlIHVzZWQsIHRoZXkgc2hvdWxkIG9ubHkgYmUgZG9uZSB0b1xuXHQgKiBjb250cm9sIGRhdGEgdGhhdCBpcyBub3QgaGFuZGxlZCBieSBSZWFjdCdzIGRhdGEgZmxvdy5cblx0ICpcblx0ICogQGNsYXNzIFJlYWN0T3duZXJcblx0ICovXG5cdHZhciBSZWFjdE93bmVyID0ge1xuXHRcblx0ICAvKipcblx0ICAgKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuXHQgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYG9iamVjdGAgaXMgYSB2YWxpZCBvd25lci5cblx0ICAgKiBAZmluYWxcblx0ICAgKi9cblx0ICBpc1ZhbGlkT3duZXI6IGZ1bmN0aW9uKG9iamVjdCkge1xuXHQgICAgcmV0dXJuICEhKFxuXHQgICAgICBvYmplY3QgJiZcblx0ICAgICAgdHlwZW9mIG9iamVjdC5hdHRhY2hSZWYgPT09ICdmdW5jdGlvbicgJiZcblx0ICAgICAgdHlwZW9mIG9iamVjdC5kZXRhY2hSZWYgPT09ICdmdW5jdGlvbidcblx0ICAgICk7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQWRkcyBhIGNvbXBvbmVudCBieSByZWYgdG8gYW4gb3duZXIgY29tcG9uZW50LlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50IENvbXBvbmVudCB0byByZWZlcmVuY2UuXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHJlZiBOYW1lIGJ5IHdoaWNoIHRvIHJlZmVyIHRvIHRoZSBjb21wb25lbnQuXG5cdCAgICogQHBhcmFtIHtSZWFjdE93bmVyfSBvd25lciBDb21wb25lbnQgb24gd2hpY2ggdG8gcmVjb3JkIHRoZSByZWYuXG5cdCAgICogQGZpbmFsXG5cdCAgICogQGludGVybmFsXG5cdCAgICovXG5cdCAgYWRkQ29tcG9uZW50QXNSZWZUbzogZnVuY3Rpb24oY29tcG9uZW50LCByZWYsIG93bmVyKSB7XG5cdCAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICBSZWFjdE93bmVyLmlzVmFsaWRPd25lcihvd25lciksXG5cdCAgICAgICdhZGRDb21wb25lbnRBc1JlZlRvKC4uLik6IE9ubHkgYSBSZWFjdE93bmVyIGNhbiBoYXZlIHJlZnMuIFRoaXMgJyArXG5cdCAgICAgICd1c3VhbGx5IG1lYW5zIHRoYXQgeW91XFwncmUgdHJ5aW5nIHRvIGFkZCBhIHJlZiB0byBhIGNvbXBvbmVudCB0aGF0ICcgK1xuXHQgICAgICAnZG9lc25cXCd0IGhhdmUgYW4gb3duZXIgKHRoYXQgaXMsIHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgb2YgYW5vdGhlciAnICtcblx0ICAgICAgJ2NvbXBvbmVudFxcJ3MgYHJlbmRlcmAgbWV0aG9kKS4gVHJ5IHJlbmRlcmluZyB0aGlzIGNvbXBvbmVudCBpbnNpZGUgb2YgJyArXG5cdCAgICAgICdhIG5ldyB0b3AtbGV2ZWwgY29tcG9uZW50IHdoaWNoIHdpbGwgaG9sZCB0aGUgcmVmLidcblx0ICAgICkgOiBpbnZhcmlhbnQoUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpKSk7XG5cdCAgICBvd25lci5hdHRhY2hSZWYocmVmLCBjb21wb25lbnQpO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIFJlbW92ZXMgYSBjb21wb25lbnQgYnkgcmVmIGZyb20gYW4gb3duZXIgY29tcG9uZW50LlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50IENvbXBvbmVudCB0byBkZXJlZmVyZW5jZS5cblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgb2YgdGhlIHJlZiB0byByZW1vdmUuXG5cdCAgICogQHBhcmFtIHtSZWFjdE93bmVyfSBvd25lciBDb21wb25lbnQgb24gd2hpY2ggdGhlIHJlZiBpcyByZWNvcmRlZC5cblx0ICAgKiBAZmluYWxcblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKi9cblx0ICByZW1vdmVDb21wb25lbnRBc1JlZkZyb206IGZ1bmN0aW9uKGNvbXBvbmVudCwgcmVmLCBvd25lcikge1xuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpLFxuXHQgICAgICAncmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tKC4uLik6IE9ubHkgYSBSZWFjdE93bmVyIGNhbiBoYXZlIHJlZnMuIFRoaXMgJyArXG5cdCAgICAgICd1c3VhbGx5IG1lYW5zIHRoYXQgeW91XFwncmUgdHJ5aW5nIHRvIHJlbW92ZSBhIHJlZiB0byBhIGNvbXBvbmVudCB0aGF0ICcgK1xuXHQgICAgICAnZG9lc25cXCd0IGhhdmUgYW4gb3duZXIgKHRoYXQgaXMsIHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgb2YgYW5vdGhlciAnICtcblx0ICAgICAgJ2NvbXBvbmVudFxcJ3MgYHJlbmRlcmAgbWV0aG9kKS4gVHJ5IHJlbmRlcmluZyB0aGlzIGNvbXBvbmVudCBpbnNpZGUgb2YgJyArXG5cdCAgICAgICdhIG5ldyB0b3AtbGV2ZWwgY29tcG9uZW50IHdoaWNoIHdpbGwgaG9sZCB0aGUgcmVmLidcblx0ICAgICkgOiBpbnZhcmlhbnQoUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpKSk7XG5cdCAgICAvLyBDaGVjayB0aGF0IGBjb21wb25lbnRgIGlzIHN0aWxsIHRoZSBjdXJyZW50IHJlZiBiZWNhdXNlIHdlIGRvIG5vdCB3YW50IHRvXG5cdCAgICAvLyBkZXRhY2ggdGhlIHJlZiBpZiBhbm90aGVyIGNvbXBvbmVudCBzdG9sZSBpdC5cblx0ICAgIGlmIChvd25lci5yZWZzW3JlZl0gPT09IGNvbXBvbmVudCkge1xuXHQgICAgICBvd25lci5kZXRhY2hSZWYocmVmKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBBIFJlYWN0Q29tcG9uZW50IG11c3QgbWl4IHRoaXMgaW4gdG8gaGF2ZSByZWZzLlxuXHQgICAqXG5cdCAgICogQGxlbmRzIHtSZWFjdE93bmVyLnByb3RvdHlwZX1cblx0ICAgKi9cblx0ICBNaXhpbjoge1xuXHRcblx0ICAgIGNvbnN0cnVjdDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIExhemlseSBhbGxvY2F0ZXMgdGhlIHJlZnMgb2JqZWN0IGFuZCBzdG9yZXMgYGNvbXBvbmVudGAgYXMgYHJlZmAuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IHJlZiBSZWZlcmVuY2UgbmFtZS5cblx0ICAgICAqIEBwYXJhbSB7Y29tcG9uZW50fSBjb21wb25lbnQgQ29tcG9uZW50IHRvIHN0b3JlIGFzIGByZWZgLlxuXHQgICAgICogQGZpbmFsXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBhdHRhY2hSZWY6IGZ1bmN0aW9uKHJlZiwgY29tcG9uZW50KSB7XG5cdCAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgICAgY29tcG9uZW50LmlzT3duZWRCeSh0aGlzKSxcblx0ICAgICAgICAnYXR0YWNoUmVmKCVzLCAuLi4pOiBPbmx5IGEgY29tcG9uZW50XFwncyBvd25lciBjYW4gc3RvcmUgYSByZWYgdG8gaXQuJyxcblx0ICAgICAgICByZWZcblx0ICAgICAgKSA6IGludmFyaWFudChjb21wb25lbnQuaXNPd25lZEJ5KHRoaXMpKSk7XG5cdCAgICAgIHZhciByZWZzID0gdGhpcy5yZWZzID09PSBlbXB0eU9iamVjdCA/ICh0aGlzLnJlZnMgPSB7fSkgOiB0aGlzLnJlZnM7XG5cdCAgICAgIHJlZnNbcmVmXSA9IGNvbXBvbmVudDtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBEZXRhY2hlcyBhIHJlZmVyZW5jZSBuYW1lLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgTmFtZSB0byBkZXJlZmVyZW5jZS5cblx0ICAgICAqIEBmaW5hbFxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXHQgICAgZGV0YWNoUmVmOiBmdW5jdGlvbihyZWYpIHtcblx0ICAgICAgZGVsZXRlIHRoaXMucmVmc1tyZWZdO1xuXHQgICAgfVxuXHRcblx0ICB9XG5cdFxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdE93bmVyO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogNzAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1xuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0ge307XG5cdFxuXHRpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7XG5cdCAgICBwcm9wOiAncHJvcCcsXG5cdCAgICBjb250ZXh0OiAnY29udGV4dCcsXG5cdCAgICBjaGlsZENvbnRleHQ6ICdjaGlsZCBjb250ZXh0J1xuXHQgIH07XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXM7XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiA3MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFByb3BUeXBlTG9jYXRpb25zXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIga2V5TWlycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cdFxuXHR2YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IGtleU1pcnJvcih7XG5cdCAgcHJvcDogbnVsbCxcblx0ICBjb250ZXh0OiBudWxsLFxuXHQgIGNoaWxkQ29udGV4dDogbnVsbFxuXHR9KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9ucztcblxuXG4vKioqLyB9LFxuLyogNzIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RQcm9wVHlwZXNcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBSZWFjdEVsZW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHR2YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwKTtcblx0XG5cdHZhciBkZXByZWNhdGVkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OSk7XG5cdHZhciBlbXB0eUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cdFxuXHQvKipcblx0ICogQ29sbGVjdGlvbiBvZiBtZXRob2RzIHRoYXQgYWxsb3cgZGVjbGFyYXRpb24gYW5kIHZhbGlkYXRpb24gb2YgcHJvcHMgdGhhdCBhcmVcblx0ICogc3VwcGxpZWQgdG8gUmVhY3QgY29tcG9uZW50cy4gRXhhbXBsZSB1c2FnZTpcblx0ICpcblx0ICogICB2YXIgUHJvcHMgPSByZXF1aXJlKCdSZWFjdFByb3BUeXBlcycpO1xuXHQgKiAgIHZhciBNeUFydGljbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdCAqICAgICBwcm9wVHlwZXM6IHtcblx0ICogICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIHByb3AgbmFtZWQgXCJkZXNjcmlwdGlvblwiLlxuXHQgKiAgICAgICBkZXNjcmlwdGlvbjogUHJvcHMuc3RyaW5nLFxuXHQgKlxuXHQgKiAgICAgICAvLyBBIHJlcXVpcmVkIGVudW0gcHJvcCBuYW1lZCBcImNhdGVnb3J5XCIuXG5cdCAqICAgICAgIGNhdGVnb3J5OiBQcm9wcy5vbmVPZihbJ05ld3MnLCdQaG90b3MnXSkuaXNSZXF1aXJlZCxcblx0ICpcblx0ICogICAgICAgLy8gQSBwcm9wIG5hbWVkIFwiZGlhbG9nXCIgdGhhdCByZXF1aXJlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2cuXG5cdCAqICAgICAgIGRpYWxvZzogUHJvcHMuaW5zdGFuY2VPZihEaWFsb2cpLmlzUmVxdWlyZWRcblx0ICogICAgIH0sXG5cdCAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgeyAuLi4gfVxuXHQgKiAgIH0pO1xuXHQgKlxuXHQgKiBBIG1vcmUgZm9ybWFsIHNwZWNpZmljYXRpb24gb2YgaG93IHRoZXNlIG1ldGhvZHMgYXJlIHVzZWQ6XG5cdCAqXG5cdCAqICAgdHlwZSA6PSBhcnJheXxib29sfGZ1bmN8b2JqZWN0fG51bWJlcnxzdHJpbmd8b25lT2YoWy4uLl0pfGluc3RhbmNlT2YoLi4uKVxuXHQgKiAgIGRlY2wgOj0gUmVhY3RQcm9wVHlwZXMue3R5cGV9KC5pc1JlcXVpcmVkKT9cblx0ICpcblx0ICogRWFjaCBhbmQgZXZlcnkgZGVjbGFyYXRpb24gcHJvZHVjZXMgYSBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIHNpZ25hdHVyZS4gVGhpc1xuXHQgKiBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6XG5cdCAqXG5cdCAqICB2YXIgTXlMaW5rID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHQgKiAgICBwcm9wVHlwZXM6IHtcblx0ICogICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgb3IgVVJJIHByb3AgbmFtZWQgXCJocmVmXCIuXG5cdCAqICAgICAgaHJlZjogZnVuY3Rpb24ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG5cdCAqICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuXHQgKiAgICAgICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wVmFsdWUgIT09ICdzdHJpbmcnICYmXG5cdCAqICAgICAgICAgICAgIShwcm9wVmFsdWUgaW5zdGFuY2VvZiBVUkkpKSB7XG5cdCAqICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG5cdCAqICAgICAgICAgICAgJ0V4cGVjdGVkIGEgc3RyaW5nIG9yIGFuIFVSSSBmb3IgJyArIHByb3BOYW1lICsgJyBpbiAnICtcblx0ICogICAgICAgICAgICBjb21wb25lbnROYW1lXG5cdCAqICAgICAgICAgICk7XG5cdCAqICAgICAgICB9XG5cdCAqICAgICAgfVxuXHQgKiAgICB9LFxuXHQgKiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgey4uLn1cblx0ICogIH0pO1xuXHQgKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdFxuXHR2YXIgQU5PTllNT1VTID0gJzw8YW5vbnltb3VzPj4nO1xuXHRcblx0dmFyIGVsZW1lbnRUeXBlQ2hlY2tlciA9IGNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlcigpO1xuXHR2YXIgbm9kZVR5cGVDaGVja2VyID0gY3JlYXRlTm9kZUNoZWNrZXIoKTtcblx0XG5cdHZhciBSZWFjdFByb3BUeXBlcyA9IHtcblx0ICBhcnJheTogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2FycmF5JyksXG5cdCAgYm9vbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2Jvb2xlYW4nKSxcblx0ICBmdW5jOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignZnVuY3Rpb24nKSxcblx0ICBudW1iZXI6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdudW1iZXInKSxcblx0ICBvYmplY3Q6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdvYmplY3QnKSxcblx0ICBzdHJpbmc6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzdHJpbmcnKSxcblx0XG5cdCAgYW55OiBjcmVhdGVBbnlUeXBlQ2hlY2tlcigpLFxuXHQgIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcblx0ICBlbGVtZW50OiBlbGVtZW50VHlwZUNoZWNrZXIsXG5cdCAgaW5zdGFuY2VPZjogY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlcixcblx0ICBub2RlOiBub2RlVHlwZUNoZWNrZXIsXG5cdCAgb2JqZWN0T2Y6IGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIsXG5cdCAgb25lT2Y6IGNyZWF0ZUVudW1UeXBlQ2hlY2tlcixcblx0ICBvbmVPZlR5cGU6IGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIsXG5cdCAgc2hhcGU6IGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIsXG5cdFxuXHQgIGNvbXBvbmVudDogZGVwcmVjYXRlZChcblx0ICAgICdSZWFjdC5Qcm9wVHlwZXMnLFxuXHQgICAgJ2NvbXBvbmVudCcsXG5cdCAgICAnZWxlbWVudCcsXG5cdCAgICB0aGlzLFxuXHQgICAgZWxlbWVudFR5cGVDaGVja2VyXG5cdCAgKSxcblx0ICByZW5kZXJhYmxlOiBkZXByZWNhdGVkKFxuXHQgICAgJ1JlYWN0LlByb3BUeXBlcycsXG5cdCAgICAncmVuZGVyYWJsZScsXG5cdCAgICAnbm9kZScsXG5cdCAgICB0aGlzLFxuXHQgICAgbm9kZVR5cGVDaGVja2VyXG5cdCAgKVxuXHR9O1xuXHRcblx0ZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpIHtcblx0ICBmdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuXHQgICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgQU5PTllNT1VTO1xuXHQgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG5cdCAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG5cdCAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcblx0ICAgICAgICAgIChcIlJlcXVpcmVkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgd2FzIG5vdCBzcGVjaWZpZWQgaW4gXCIpK1xuXHQgICAgICAgICAgKFwiYFwiICsgY29tcG9uZW50TmFtZSArIFwiYC5cIilcblx0ICAgICAgICApO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICB2YXIgY2hhaW5lZENoZWNrVHlwZSA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIGZhbHNlKTtcblx0ICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcblx0XG5cdCAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKGV4cGVjdGVkVHlwZSkge1xuXHQgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcblx0ICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG5cdCAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuXHQgICAgaWYgKHByb3BUeXBlICE9PSBleHBlY3RlZFR5cGUpIHtcblx0ICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcblx0ICAgICAgLy8gYHByb3BWYWx1ZWAgYmVpbmcgaW5zdGFuY2Ugb2YsIHNheSwgZGF0ZS9yZWdleHAsIHBhc3MgdGhlICdvYmplY3QnXG5cdCAgICAgIC8vIGNoZWNrLCBidXQgd2UgY2FuIG9mZmVyIGEgbW9yZSBwcmVjaXNlIGVycm9yIG1lc3NhZ2UgaGVyZSByYXRoZXIgdGhhblxuXHQgICAgICAvLyAnb2YgdHlwZSBgb2JqZWN0YCcuXG5cdCAgICAgIHZhciBwcmVjaXNlVHlwZSA9IGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSk7XG5cdFxuXHQgICAgICByZXR1cm4gbmV3IEVycm9yKFxuXHQgICAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBvZiB0eXBlIGBcIiArIHByZWNpc2VUeXBlICsgXCJgIFwiKSArXG5cdCAgICAgICAgKFwic3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYFwiICsgZXhwZWN0ZWRUeXBlICsgXCJgLlwiKVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjcmVhdGVBbnlUeXBlQ2hlY2tlcigpIHtcblx0ICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucygpKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7XG5cdCAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuXHQgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcblx0ICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG5cdCAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG5cdCAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG5cdCAgICAgIHJldHVybiBuZXcgRXJyb3IoXG5cdCAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHR5cGUgXCIpICtcblx0ICAgICAgICAoXCJgXCIgKyBwcm9wVHlwZSArIFwiYCBzdXBwbGllZCB0byBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBhbiBhcnJheS5cIilcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwgaSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuXHQgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuXHQgICAgICAgIHJldHVybiBlcnJvcjtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSB7XG5cdCAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuXHQgICAgaWYgKCFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocHJvcHNbcHJvcE5hbWVdKSkge1xuXHQgICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuXHQgICAgICByZXR1cm4gbmV3IEVycm9yKFxuXHQgICAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBzdXBwbGllZCB0byBcIikgK1xuXHQgICAgICAgIChcImBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGEgUmVhY3RFbGVtZW50LlwiKVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyKGV4cGVjdGVkQ2xhc3MpIHtcblx0ICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG5cdCAgICBpZiAoIShwcm9wc1twcm9wTmFtZV0gaW5zdGFuY2VvZiBleHBlY3RlZENsYXNzKSkge1xuXHQgICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuXHQgICAgICB2YXIgZXhwZWN0ZWRDbGFzc05hbWUgPSBleHBlY3RlZENsYXNzLm5hbWUgfHwgQU5PTllNT1VTO1xuXHQgICAgICByZXR1cm4gbmV3IEVycm9yKFxuXHQgICAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBzdXBwbGllZCB0byBcIikgK1xuXHQgICAgICAgIChcImBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGluc3RhbmNlIG9mIGBcIiArIGV4cGVjdGVkQ2xhc3NOYW1lICsgXCJgLlwiKVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjcmVhdGVFbnVtVHlwZUNoZWNrZXIoZXhwZWN0ZWRWYWx1ZXMpIHtcblx0ICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG5cdCAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHBlY3RlZFZhbHVlcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICBpZiAocHJvcFZhbHVlID09PSBleHBlY3RlZFZhbHVlc1tpXSkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG5cdCAgICB2YXIgdmFsdWVzU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWRWYWx1ZXMpO1xuXHQgICAgcmV0dXJuIG5ldyBFcnJvcihcblx0ICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHZhbHVlIGBcIiArIHByb3BWYWx1ZSArIFwiYCBcIikgK1xuXHQgICAgICAoXCJzdXBwbGllZCB0byBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBvbmUgb2YgXCIgKyB2YWx1ZXNTdHJpbmcgKyBcIi5cIilcblx0ICAgICk7XG5cdCAgfVxuXHQgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcblx0ICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG5cdCAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuXHQgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcblx0ICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcblx0ICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcblx0ICAgICAgcmV0dXJuIG5ldyBFcnJvcihcblx0ICAgICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgb2YgdHlwZSBcIikgK1xuXHQgICAgICAgIChcImBcIiArIHByb3BUeXBlICsgXCJgIHN1cHBsaWVkIHRvIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGFuIG9iamVjdC5cIilcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICAgIGZvciAodmFyIGtleSBpbiBwcm9wVmFsdWUpIHtcblx0ICAgICAgaWYgKHByb3BWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdCAgICAgICAgdmFyIGVycm9yID0gdHlwZUNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKTtcblx0ICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuXHQgICAgICAgICAgcmV0dXJuIGVycm9yO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjcmVhdGVVbmlvblR5cGVDaGVja2VyKGFycmF5T2ZUeXBlQ2hlY2tlcnMpIHtcblx0ICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5T2ZUeXBlQ2hlY2tlcnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgdmFyIGNoZWNrZXIgPSBhcnJheU9mVHlwZUNoZWNrZXJzW2ldO1xuXHQgICAgICBpZiAoY2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSA9PSBudWxsKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcblx0ICAgIHJldHVybiBuZXcgRXJyb3IoXG5cdCAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBzdXBwbGllZCB0byBcIikgK1xuXHQgICAgICAoXCJgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLlwiKVxuXHQgICAgKTtcblx0ICB9XG5cdCAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gY3JlYXRlTm9kZUNoZWNrZXIoKSB7XG5cdCAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuXHQgICAgaWYgKCFpc05vZGUocHJvcHNbcHJvcE5hbWVdKSkge1xuXHQgICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuXHQgICAgICByZXR1cm4gbmV3IEVycm9yKFxuXHQgICAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBzdXBwbGllZCB0byBcIikgK1xuXHQgICAgICAgIChcImBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGEgUmVhY3ROb2RlLlwiKVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyKHNoYXBlVHlwZXMpIHtcblx0ICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG5cdCAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuXHQgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcblx0ICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcblx0ICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcblx0ICAgICAgcmV0dXJuIG5ldyBFcnJvcihcblx0ICAgICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgb2YgdHlwZSBgXCIgKyBwcm9wVHlwZSArIFwiYCBcIikgK1xuXHQgICAgICAgIChcInN1cHBsaWVkIHRvIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGBvYmplY3RgLlwiKVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgICAgZm9yICh2YXIga2V5IGluIHNoYXBlVHlwZXMpIHtcblx0ICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG5cdCAgICAgIGlmICghY2hlY2tlcikge1xuXHQgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKTtcblx0ICAgICAgaWYgKGVycm9yKSB7XG5cdCAgICAgICAgcmV0dXJuIGVycm9yO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSwgJ2V4cGVjdGVkIGBvYmplY3RgJyk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlzTm9kZShwcm9wVmFsdWUpIHtcblx0ICBzd2l0Y2godHlwZW9mIHByb3BWYWx1ZSkge1xuXHQgICAgY2FzZSAnbnVtYmVyJzpcblx0ICAgIGNhc2UgJ3N0cmluZyc6XG5cdCAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgY2FzZSAnYm9vbGVhbic6XG5cdCAgICAgIHJldHVybiAhcHJvcFZhbHVlO1xuXHQgICAgY2FzZSAnb2JqZWN0Jzpcblx0ICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuXHQgICAgICAgIHJldHVybiBwcm9wVmFsdWUuZXZlcnkoaXNOb2RlKTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgfVxuXHQgICAgICBmb3IgKHZhciBrIGluIHByb3BWYWx1ZSkge1xuXHQgICAgICAgIGlmICghaXNOb2RlKHByb3BWYWx1ZVtrXSkpIHtcblx0ICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICBkZWZhdWx0OlxuXHQgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgfVxuXHR9XG5cdFxuXHQvLyBFcXVpdmFsZW50IG9mIGB0eXBlb2ZgIGJ1dCB3aXRoIHNwZWNpYWwgaGFuZGxpbmcgZm9yIGFycmF5IGFuZCByZWdleHAuXG5cdGZ1bmN0aW9uIGdldFByb3BUeXBlKHByb3BWYWx1ZSkge1xuXHQgIHZhciBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWU7XG5cdCAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuXHQgICAgcmV0dXJuICdhcnJheSc7XG5cdCAgfVxuXHQgIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcblx0ICAgIC8vIE9sZCB3ZWJraXRzIChhdCBsZWFzdCB1bnRpbCBBbmRyb2lkIDQuMCkgcmV0dXJuICdmdW5jdGlvbicgcmF0aGVyIHRoYW5cblx0ICAgIC8vICdvYmplY3QnIGZvciB0eXBlb2YgYSBSZWdFeHAuIFdlJ2xsIG5vcm1hbGl6ZSB0aGlzIGhlcmUgc28gdGhhdCAvYmxhL1xuXHQgICAgLy8gcGFzc2VzIFByb3BUeXBlcy5vYmplY3QuXG5cdCAgICByZXR1cm4gJ29iamVjdCc7XG5cdCAgfVxuXHQgIHJldHVybiBwcm9wVHlwZTtcblx0fVxuXHRcblx0Ly8gVGhpcyBoYW5kbGVzIG1vcmUgdHlwZXMgdGhhbiBgZ2V0UHJvcFR5cGVgLiBPbmx5IHVzZWQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuXHQvLyBTZWUgYGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyYC5cblx0ZnVuY3Rpb24gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKSB7XG5cdCAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcblx0ICBpZiAocHJvcFR5cGUgPT09ICdvYmplY3QnKSB7XG5cdCAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuXHQgICAgICByZXR1cm4gJ2RhdGUnO1xuXHQgICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcblx0ICAgICAgcmV0dXJuICdyZWdleHAnO1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gcHJvcFR5cGU7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXM7XG5cblxuLyoqKi8gfSxcbi8qIDczICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UHV0TGlzdGVuZXJRdWV1ZVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIFBvb2xlZENsYXNzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cdHZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKTtcblx0XG5cdHZhciBhc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0ZnVuY3Rpb24gUmVhY3RQdXRMaXN0ZW5lclF1ZXVlKCkge1xuXHQgIHRoaXMubGlzdGVuZXJzVG9QdXQgPSBbXTtcblx0fVxuXHRcblx0YXNzaWduKFJlYWN0UHV0TGlzdGVuZXJRdWV1ZS5wcm90b3R5cGUsIHtcblx0ICBlbnF1ZXVlUHV0TGlzdGVuZXI6IGZ1bmN0aW9uKHJvb3ROb2RlSUQsIHByb3BLZXksIHByb3BWYWx1ZSkge1xuXHQgICAgdGhpcy5saXN0ZW5lcnNUb1B1dC5wdXNoKHtcblx0ICAgICAgcm9vdE5vZGVJRDogcm9vdE5vZGVJRCxcblx0ICAgICAgcHJvcEtleTogcHJvcEtleSxcblx0ICAgICAgcHJvcFZhbHVlOiBwcm9wVmFsdWVcblx0ICAgIH0pO1xuXHQgIH0sXG5cdFxuXHQgIHB1dExpc3RlbmVyczogZnVuY3Rpb24oKSB7XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGlzdGVuZXJzVG9QdXQubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgdmFyIGxpc3RlbmVyVG9QdXQgPSB0aGlzLmxpc3RlbmVyc1RvUHV0W2ldO1xuXHQgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIucHV0TGlzdGVuZXIoXG5cdCAgICAgICAgbGlzdGVuZXJUb1B1dC5yb290Tm9kZUlELFxuXHQgICAgICAgIGxpc3RlbmVyVG9QdXQucHJvcEtleSxcblx0ICAgICAgICBsaXN0ZW5lclRvUHV0LnByb3BWYWx1ZVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIHJlc2V0OiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMubGlzdGVuZXJzVG9QdXQubGVuZ3RoID0gMDtcblx0ICB9LFxuXHRcblx0ICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMucmVzZXQoKTtcblx0ICB9XG5cdH0pO1xuXHRcblx0UG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFJlYWN0UHV0TGlzdGVuZXJRdWV1ZSk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHV0TGlzdGVuZXJRdWV1ZTtcblxuXG4vKioqLyB9LFxuLyogNzQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RSb290SW5kZXhcblx0ICogQHR5cGVjaGVja3Ncblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBSZWFjdFJvb3RJbmRleEluamVjdGlvbiA9IHtcblx0ICAvKipcblx0ICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBfY3JlYXRlUmVhY3RSb290SW5kZXhcblx0ICAgKi9cblx0ICBpbmplY3RDcmVhdGVSZWFjdFJvb3RJbmRleDogZnVuY3Rpb24oX2NyZWF0ZVJlYWN0Um9vdEluZGV4KSB7XG5cdCAgICBSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleCA9IF9jcmVhdGVSZWFjdFJvb3RJbmRleDtcblx0ICB9XG5cdH07XG5cdFxuXHR2YXIgUmVhY3RSb290SW5kZXggPSB7XG5cdCAgY3JlYXRlUmVhY3RSb290SW5kZXg6IG51bGwsXG5cdCAgaW5qZWN0aW9uOiBSZWFjdFJvb3RJbmRleEluamVjdGlvblxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJvb3RJbmRleDtcblxuXG4vKioqLyB9LFxuLyogNzUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RUZXh0Q29tcG9uZW50XG5cdCAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cdHZhciBSZWFjdENvbXBvbmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXHR2YXIgUmVhY3RFbGVtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdHZhciBhc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgZXNjYXBlVGV4dEZvckJyb3dzZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTtcblx0XG5cdC8qKlxuXHQgKiBUZXh0IG5vZGVzIHZpb2xhdGUgYSBjb3VwbGUgYXNzdW1wdGlvbnMgdGhhdCBSZWFjdCBtYWtlcyBhYm91dCBjb21wb25lbnRzOlxuXHQgKlxuXHQgKiAgLSBXaGVuIG1vdW50aW5nIHRleHQgaW50byB0aGUgRE9NLCBhZGphY2VudCB0ZXh0IG5vZGVzIGFyZSBtZXJnZWQuXG5cdCAqICAtIFRleHQgbm9kZXMgY2Fubm90IGJlIGFzc2lnbmVkIGEgUmVhY3Qgcm9vdCBJRC5cblx0ICpcblx0ICogVGhpcyBjb21wb25lbnQgaXMgdXNlZCB0byB3cmFwIHN0cmluZ3MgaW4gZWxlbWVudHMgc28gdGhhdCB0aGV5IGNhbiB1bmRlcmdvXG5cdCAqIHRoZSBzYW1lIHJlY29uY2lsaWF0aW9uIHRoYXQgaXMgYXBwbGllZCB0byBlbGVtZW50cy5cblx0ICpcblx0ICogVE9ETzogSW52ZXN0aWdhdGUgcmVwcmVzZW50aW5nIFJlYWN0IGNvbXBvbmVudHMgaW4gdGhlIERPTSB3aXRoIHRleHQgbm9kZXMuXG5cdCAqXG5cdCAqIEBjbGFzcyBSZWFjdFRleHRDb21wb25lbnRcblx0ICogQGV4dGVuZHMgUmVhY3RDb21wb25lbnRcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHR2YXIgUmVhY3RUZXh0Q29tcG9uZW50ID0gZnVuY3Rpb24ocHJvcHMpIHtcblx0ICAvLyBUaGlzIGNvbnN0cnVjdG9yIGFuZCBpdCdzIGFyZ3VtZW50IGlzIGN1cnJlbnRseSB1c2VkIGJ5IG1vY2tzLlxuXHR9O1xuXHRcblx0YXNzaWduKFJlYWN0VGV4dENvbXBvbmVudC5wcm90b3R5cGUsIFJlYWN0Q29tcG9uZW50Lk1peGluLCB7XG5cdFxuXHQgIC8qKlxuXHQgICAqIENyZWF0ZXMgdGhlIG1hcmt1cCBmb3IgdGhpcyB0ZXh0IG5vZGUuIFRoaXMgbm9kZSBpcyBub3QgaW50ZW5kZWQgdG8gaGF2ZVxuXHQgICAqIGFueSBmZWF0dXJlcyBiZXNpZGVzIGNvbnRhaW5pbmcgdGV4dCBjb250ZW50LlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBET00gSUQgb2YgdGhlIHJvb3Qgbm9kZS5cblx0ICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cblx0ICAgKiBAcGFyYW0ge251bWJlcn0gbW91bnREZXB0aCBudW1iZXIgb2YgY29tcG9uZW50cyBpbiB0aGUgb3duZXIgaGllcmFyY2h5XG5cdCAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgZm9yIHRoaXMgdGV4dCBub2RlLlxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbihyb290SUQsIHRyYW5zYWN0aW9uLCBtb3VudERlcHRoKSB7XG5cdCAgICBSZWFjdENvbXBvbmVudC5NaXhpbi5tb3VudENvbXBvbmVudC5jYWxsKFxuXHQgICAgICB0aGlzLFxuXHQgICAgICByb290SUQsXG5cdCAgICAgIHRyYW5zYWN0aW9uLFxuXHQgICAgICBtb3VudERlcHRoXG5cdCAgICApO1xuXHRcblx0ICAgIHZhciBlc2NhcGVkVGV4dCA9IGVzY2FwZVRleHRGb3JCcm93c2VyKHRoaXMucHJvcHMpO1xuXHRcblx0ICAgIGlmICh0cmFuc2FjdGlvbi5yZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuXHQgICAgICAvLyBOb3JtYWxseSB3ZSdkIHdyYXAgdGhpcyBpbiBhIGBzcGFuYCBmb3IgdGhlIHJlYXNvbnMgc3RhdGVkIGFib3ZlLCBidXRcblx0ICAgICAgLy8gc2luY2UgdGhpcyBpcyBhIHNpdHVhdGlvbiB3aGVyZSBSZWFjdCB3b24ndCB0YWtlIG92ZXIgKHN0YXRpYyBwYWdlcyksXG5cdCAgICAgIC8vIHdlIGNhbiBzaW1wbHkgcmV0dXJuIHRoZSB0ZXh0IGFzIGl0IGlzLlxuXHQgICAgICByZXR1cm4gZXNjYXBlZFRleHQ7XG5cdCAgICB9XG5cdFxuXHQgICAgcmV0dXJuIChcblx0ICAgICAgJzxzcGFuICcgKyBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9ySUQocm9vdElEKSArICc+JyArXG5cdCAgICAgICAgZXNjYXBlZFRleHQgK1xuXHQgICAgICAnPC9zcGFuPidcblx0ICAgICk7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogVXBkYXRlcyB0aGlzIGNvbXBvbmVudCBieSB1cGRhdGluZyB0aGUgdGV4dCBjb250ZW50LlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtvYmplY3R9IG5leHRDb21wb25lbnQgQ29udGFpbnMgdGhlIG5leHQgdGV4dCBjb250ZW50LlxuXHQgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKi9cblx0ICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbihuZXh0Q29tcG9uZW50LCB0cmFuc2FjdGlvbikge1xuXHQgICAgdmFyIG5leHRQcm9wcyA9IG5leHRDb21wb25lbnQucHJvcHM7XG5cdCAgICBpZiAobmV4dFByb3BzICE9PSB0aGlzLnByb3BzKSB7XG5cdCAgICAgIHRoaXMucHJvcHMgPSBuZXh0UHJvcHM7XG5cdCAgICAgIFJlYWN0Q29tcG9uZW50LkJhY2tlbmRJRE9wZXJhdGlvbnMudXBkYXRlVGV4dENvbnRlbnRCeUlEKFxuXHQgICAgICAgIHRoaXMuX3Jvb3ROb2RlSUQsXG5cdCAgICAgICAgbmV4dFByb3BzXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0fSk7XG5cdFxuXHR2YXIgUmVhY3RUZXh0Q29tcG9uZW50RmFjdG9yeSA9IGZ1bmN0aW9uKHRleHQpIHtcblx0ICAvLyBCeXBhc3MgdmFsaWRhdGlvbiBhbmQgY29uZmlndXJhdGlvblxuXHQgIHJldHVybiBuZXcgUmVhY3RFbGVtZW50KFJlYWN0VGV4dENvbXBvbmVudCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgdGV4dCk7XG5cdH07XG5cdFxuXHRSZWFjdFRleHRDb21wb25lbnRGYWN0b3J5LnR5cGUgPSBSZWFjdFRleHRDb21wb25lbnQ7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0VGV4dENvbXBvbmVudEZhY3Rvcnk7XG5cblxuLyoqKi8gfSxcbi8qIDc2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFZpZXdwb3J0TWV0cmljc1xuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4Mik7XG5cdFxuXHR2YXIgVmlld3BvcnRNZXRyaWNzID0ge1xuXHRcblx0ICBjdXJyZW50U2Nyb2xsTGVmdDogMCxcblx0XG5cdCAgY3VycmVudFNjcm9sbFRvcDogMCxcblx0XG5cdCAgcmVmcmVzaFNjcm9sbFZhbHVlczogZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgc2Nyb2xsUG9zaXRpb24gPSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbih3aW5kb3cpO1xuXHQgICAgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxMZWZ0ID0gc2Nyb2xsUG9zaXRpb24ueDtcblx0ICAgIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsVG9wID0gc2Nyb2xsUG9zaXRpb24ueTtcblx0ICB9XG5cdFxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBWaWV3cG9ydE1ldHJpY3M7XG5cblxuLyoqKi8gfSxcbi8qIDc3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIGNvbnRhaW5zTm9kZVxuXHQgKiBAdHlwZWNoZWNrc1xuXHQgKi9cblx0XG5cdHZhciBpc1RleHROb2RlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzYpO1xuXHRcblx0Lypqc2xpbnQgYml0d2lzZTp0cnVlICovXG5cdFxuXHQvKipcblx0ICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHs/RE9NTm9kZX0gb3V0ZXJOb2RlIE91dGVyIERPTSBub2RlLlxuXHQgKiBAcGFyYW0gez9ET01Ob2RlfSBpbm5lck5vZGUgSW5uZXIgRE9NIG5vZGUuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYG91dGVyTm9kZWAgY29udGFpbnMgb3IgaXMgYGlubmVyTm9kZWAuXG5cdCAqL1xuXHRmdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcblx0ICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcblx0ICAgIHJldHVybiBmYWxzZTtcblx0ICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuXHQgICAgcmV0dXJuIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKTtcblx0ICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb250YWlucykge1xuXHQgICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuXHQgIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG5cdCAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiBmYWxzZTtcblx0ICB9XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlO1xuXG5cbi8qKiovIH0sXG4vKiA3OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgZm9jdXNOb2RlXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKipcblx0ICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlIGlucHV0L3RleHRhcmVhIHRvIGZvY3VzXG5cdCAqL1xuXHRmdW5jdGlvbiBmb2N1c05vZGUobm9kZSkge1xuXHQgIC8vIElFOCBjYW4gdGhyb3cgXCJDYW4ndCBtb3ZlIGZvY3VzIHRvIHRoZSBjb250cm9sIGJlY2F1c2UgaXQgaXMgaW52aXNpYmxlLFxuXHQgIC8vIG5vdCBlbmFibGVkLCBvciBvZiBhIHR5cGUgdGhhdCBkb2VzIG5vdCBhY2NlcHQgdGhlIGZvY3VzLlwiIGZvciBhbGwga2luZHMgb2Zcblx0ICAvLyByZWFzb25zIHRoYXQgYXJlIHRvbyBleHBlbnNpdmUgYW5kIGZyYWdpbGUgdG8gdGVzdC5cblx0ICB0cnkge1xuXHQgICAgbm9kZS5mb2N1cygpO1xuXHQgIH0gY2F0Y2goZSkge1xuXHQgIH1cblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmb2N1c05vZGU7XG5cblxuLyoqKi8gfSxcbi8qIDc5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIGdldEFjdGl2ZUVsZW1lbnRcblx0ICogQHR5cGVjaGVja3Ncblx0ICovXG5cdFxuXHQvKipcblx0ICogU2FtZSBhcyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGJ1dCB3cmFwcyBpbiBhIHRyeS1jYXRjaCBibG9jay4gSW4gSUUgaXQgaXNcblx0ICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cblx0ICpcblx0ICogVGhlIGFjdGl2ZUVsZW1lbnQgd2lsbCBiZSBudWxsIG9ubHkgaWYgdGhlIGRvY3VtZW50IGJvZHkgaXMgbm90IHlldCBkZWZpbmVkLlxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudCgpIC8qP0RPTUVsZW1lbnQqLyB7XG5cdCAgdHJ5IHtcblx0ICAgIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8IGRvY3VtZW50LmJvZHk7XG5cdCAgfSBjYXRjaCAoZSkge1xuXHQgICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG5cdCAgfVxuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7XG5cblxuLyoqKi8gfSxcbi8qIDgwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgZ2V0TWFya3VwV3JhcFxuXHQgKi9cblx0XG5cdHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFxuXHR2YXIgaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdC8qKlxuXHQgKiBEdW1teSBjb250YWluZXIgdXNlZCB0byBkZXRlY3Qgd2hpY2ggd3JhcHMgYXJlIG5lY2Vzc2FyeS5cblx0ICovXG5cdHZhciBkdW1teU5vZGUgPVxuXHQgIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpIDogbnVsbDtcblx0XG5cdC8qKlxuXHQgKiBTb21lIGJyb3dzZXJzIGNhbm5vdCB1c2UgYGlubmVySFRNTGAgdG8gcmVuZGVyIGNlcnRhaW4gZWxlbWVudHMgc3RhbmRhbG9uZSxcblx0ICogc28gd2Ugd3JhcCB0aGVtLCByZW5kZXIgdGhlIHdyYXBwZWQgbm9kZXMsIHRoZW4gZXh0cmFjdCB0aGUgZGVzaXJlZCBub2RlLlxuXHQgKlxuXHQgKiBJbiBJRTgsIGNlcnRhaW4gZWxlbWVudHMgY2Fubm90IHJlbmRlciBhbG9uZSwgc28gd3JhcCBhbGwgZWxlbWVudHMgKCcqJykuXG5cdCAqL1xuXHR2YXIgc2hvdWxkV3JhcCA9IHtcblx0ICAvLyBGb3JjZSB3cmFwcGluZyBmb3IgU1ZHIGVsZW1lbnRzIGJlY2F1c2UgaWYgdGhleSBnZXQgY3JlYXRlZCBpbnNpZGUgYSA8ZGl2Pixcblx0ICAvLyB0aGV5IHdpbGwgYmUgaW5pdGlhbGl6ZWQgaW4gdGhlIHdyb25nIG5hbWVzcGFjZSAoYW5kIHdpbGwgbm90IGRpc3BsYXkpLlxuXHQgICdjaXJjbGUnOiB0cnVlLFxuXHQgICdkZWZzJzogdHJ1ZSxcblx0ICAnZWxsaXBzZSc6IHRydWUsXG5cdCAgJ2cnOiB0cnVlLFxuXHQgICdsaW5lJzogdHJ1ZSxcblx0ICAnbGluZWFyR3JhZGllbnQnOiB0cnVlLFxuXHQgICdwYXRoJzogdHJ1ZSxcblx0ICAncG9seWdvbic6IHRydWUsXG5cdCAgJ3BvbHlsaW5lJzogdHJ1ZSxcblx0ICAncmFkaWFsR3JhZGllbnQnOiB0cnVlLFxuXHQgICdyZWN0JzogdHJ1ZSxcblx0ICAnc3RvcCc6IHRydWUsXG5cdCAgJ3RleHQnOiB0cnVlXG5cdH07XG5cdFxuXHR2YXIgc2VsZWN0V3JhcCA9IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cInRydWVcIj4nLCAnPC9zZWxlY3Q+J107XG5cdHZhciB0YWJsZVdyYXAgPSBbMSwgJzx0YWJsZT4nLCAnPC90YWJsZT4nXTtcblx0dmFyIHRyV3JhcCA9IFszLCAnPHRhYmxlPjx0Ym9keT48dHI+JywgJzwvdHI+PC90Ym9keT48L3RhYmxlPiddO1xuXHRcblx0dmFyIHN2Z1dyYXAgPSBbMSwgJzxzdmc+JywgJzwvc3ZnPiddO1xuXHRcblx0dmFyIG1hcmt1cFdyYXAgPSB7XG5cdCAgJyonOiBbMSwgJz88ZGl2PicsICc8L2Rpdj4nXSxcblx0XG5cdCAgJ2FyZWEnOiBbMSwgJzxtYXA+JywgJzwvbWFwPiddLFxuXHQgICdjb2wnOiBbMiwgJzx0YWJsZT48dGJvZHk+PC90Ym9keT48Y29sZ3JvdXA+JywgJzwvY29sZ3JvdXA+PC90YWJsZT4nXSxcblx0ICAnbGVnZW5kJzogWzEsICc8ZmllbGRzZXQ+JywgJzwvZmllbGRzZXQ+J10sXG5cdCAgJ3BhcmFtJzogWzEsICc8b2JqZWN0PicsICc8L29iamVjdD4nXSxcblx0ICAndHInOiBbMiwgJzx0YWJsZT48dGJvZHk+JywgJzwvdGJvZHk+PC90YWJsZT4nXSxcblx0XG5cdCAgJ29wdGdyb3VwJzogc2VsZWN0V3JhcCxcblx0ICAnb3B0aW9uJzogc2VsZWN0V3JhcCxcblx0XG5cdCAgJ2NhcHRpb24nOiB0YWJsZVdyYXAsXG5cdCAgJ2NvbGdyb3VwJzogdGFibGVXcmFwLFxuXHQgICd0Ym9keSc6IHRhYmxlV3JhcCxcblx0ICAndGZvb3QnOiB0YWJsZVdyYXAsXG5cdCAgJ3RoZWFkJzogdGFibGVXcmFwLFxuXHRcblx0ICAndGQnOiB0cldyYXAsXG5cdCAgJ3RoJzogdHJXcmFwLFxuXHRcblx0ICAnY2lyY2xlJzogc3ZnV3JhcCxcblx0ICAnZGVmcyc6IHN2Z1dyYXAsXG5cdCAgJ2VsbGlwc2UnOiBzdmdXcmFwLFxuXHQgICdnJzogc3ZnV3JhcCxcblx0ICAnbGluZSc6IHN2Z1dyYXAsXG5cdCAgJ2xpbmVhckdyYWRpZW50Jzogc3ZnV3JhcCxcblx0ICAncGF0aCc6IHN2Z1dyYXAsXG5cdCAgJ3BvbHlnb24nOiBzdmdXcmFwLFxuXHQgICdwb2x5bGluZSc6IHN2Z1dyYXAsXG5cdCAgJ3JhZGlhbEdyYWRpZW50Jzogc3ZnV3JhcCxcblx0ICAncmVjdCc6IHN2Z1dyYXAsXG5cdCAgJ3N0b3AnOiBzdmdXcmFwLFxuXHQgICd0ZXh0Jzogc3ZnV3JhcFxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIEdldHMgdGhlIG1hcmt1cCB3cmFwIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBzdXBwbGllZCBgbm9kZU5hbWVgLlxuXHQgKlxuXHQgKiBOT1RFOiBUaGlzIGxhemlseSBkZXRlY3RzIHdoaWNoIHdyYXBzIGFyZSBuZWNlc3NhcnkgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBub2RlTmFtZSBMb3dlcmNhc2UgYG5vZGVOYW1lYC5cblx0ICogQHJldHVybiB7P2FycmF5fSBNYXJrdXAgd3JhcCBjb25maWd1cmF0aW9uLCBpZiBhcHBsaWNhYmxlLlxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0TWFya3VwV3JhcChub2RlTmFtZSkge1xuXHQgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoISFkdW1teU5vZGUsICdNYXJrdXAgd3JhcHBpbmcgbm9kZSBub3QgaW5pdGlhbGl6ZWQnKSA6IGludmFyaWFudCghIWR1bW15Tm9kZSkpO1xuXHQgIGlmICghbWFya3VwV3JhcC5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcblx0ICAgIG5vZGVOYW1lID0gJyonO1xuXHQgIH1cblx0ICBpZiAoIXNob3VsZFdyYXAuaGFzT3duUHJvcGVydHkobm9kZU5hbWUpKSB7XG5cdCAgICBpZiAobm9kZU5hbWUgPT09ICcqJykge1xuXHQgICAgICBkdW1teU5vZGUuaW5uZXJIVE1MID0gJzxsaW5rIC8+Jztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGR1bW15Tm9kZS5pbm5lckhUTUwgPSAnPCcgKyBub2RlTmFtZSArICc+PC8nICsgbm9kZU5hbWUgKyAnPic7XG5cdCAgICB9XG5cdCAgICBzaG91bGRXcmFwW25vZGVOYW1lXSA9ICFkdW1teU5vZGUuZmlyc3RDaGlsZDtcblx0ICB9XG5cdCAgcmV0dXJuIHNob3VsZFdyYXBbbm9kZU5hbWVdID8gbWFya3VwV3JhcFtub2RlTmFtZV0gOiBudWxsO1xuXHR9XG5cdFxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBnZXRNYXJrdXBXcmFwO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogODEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgRE9DX05PREVfVFlQRSA9IDk7XG5cdFxuXHQvKipcblx0ICogQHBhcmFtIHtET01FbGVtZW50fERPTURvY3VtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdGhhdCBtYXkgY29udGFpblxuXHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIFJlYWN0IGNvbXBvbmVudFxuXHQgKiBAcmV0dXJuIHs/Kn0gRE9NIGVsZW1lbnQgdGhhdCBtYXkgaGF2ZSB0aGUgcmVhY3RSb290IElELCBvciBudWxsLlxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcikge1xuXHQgIGlmICghY29udGFpbmVyKSB7XG5cdCAgICByZXR1cm4gbnVsbDtcblx0ICB9XG5cdFxuXHQgIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUpIHtcblx0ICAgIHJldHVybiBjb250YWluZXIuZG9jdW1lbnRFbGVtZW50O1xuXHQgIH0gZWxzZSB7XG5cdCAgICByZXR1cm4gY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG5cdCAgfVxuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcjtcblxuXG4vKioqLyB9LFxuLyogODIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb25cblx0ICogQHR5cGVjaGVja3Ncblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIHN1cHBsaWVkIGVsZW1lbnQgb3Igd2luZG93LlxuXHQgKlxuXHQgKiBUaGUgcmV0dXJuIHZhbHVlcyBhcmUgdW5ib3VuZGVkLCB1bmxpa2UgYGdldFNjcm9sbFBvc2l0aW9uYC4gVGhpcyBtZWFucyB0aGV5XG5cdCAqIG1heSBiZSBuZWdhdGl2ZSBvciBleGNlZWQgdGhlIGVsZW1lbnQgYm91bmRhcmllcyAod2hpY2ggaXMgcG9zc2libGUgdXNpbmdcblx0ICogaW5lcnRpYWwgc2Nyb2xsaW5nKS5cblx0ICpcblx0ICogQHBhcmFtIHtET01XaW5kb3d8RE9NRWxlbWVudH0gc2Nyb2xsYWJsZVxuXHQgKiBAcmV0dXJuIHtvYmplY3R9IE1hcCB3aXRoIGB4YCBhbmQgYHlgIGtleXMuXG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbihzY3JvbGxhYmxlKSB7XG5cdCAgaWYgKHNjcm9sbGFibGUgPT09IHdpbmRvdykge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgeDogd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LFxuXHQgICAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxuXHQgICAgfTtcblx0ICB9XG5cdCAgcmV0dXJuIHtcblx0ICAgIHg6IHNjcm9sbGFibGUuc2Nyb2xsTGVmdCxcblx0ICAgIHk6IHNjcm9sbGFibGUuc2Nyb2xsVG9wXG5cdCAgfTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbjtcblxuXG4vKioqLyB9LFxuLyogODMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgaXNUZXh0SW5wdXRFbGVtZW50XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKipcblx0ICogQHNlZSBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS90aGUtaW5wdXQtZWxlbWVudC5odG1sI2lucHV0LXR5cGUtYXR0ci1zdW1tYXJ5XG5cdCAqL1xuXHR2YXIgc3VwcG9ydGVkSW5wdXRUeXBlcyA9IHtcblx0ICAnY29sb3InOiB0cnVlLFxuXHQgICdkYXRlJzogdHJ1ZSxcblx0ICAnZGF0ZXRpbWUnOiB0cnVlLFxuXHQgICdkYXRldGltZS1sb2NhbCc6IHRydWUsXG5cdCAgJ2VtYWlsJzogdHJ1ZSxcblx0ICAnbW9udGgnOiB0cnVlLFxuXHQgICdudW1iZXInOiB0cnVlLFxuXHQgICdwYXNzd29yZCc6IHRydWUsXG5cdCAgJ3JhbmdlJzogdHJ1ZSxcblx0ICAnc2VhcmNoJzogdHJ1ZSxcblx0ICAndGVsJzogdHJ1ZSxcblx0ICAndGV4dCc6IHRydWUsXG5cdCAgJ3RpbWUnOiB0cnVlLFxuXHQgICd1cmwnOiB0cnVlLFxuXHQgICd3ZWVrJzogdHJ1ZVxuXHR9O1xuXHRcblx0ZnVuY3Rpb24gaXNUZXh0SW5wdXRFbGVtZW50KGVsZW0pIHtcblx0ICByZXR1cm4gZWxlbSAmJiAoXG5cdCAgICAoZWxlbS5ub2RlTmFtZSA9PT0gJ0lOUFVUJyAmJiBzdXBwb3J0ZWRJbnB1dFR5cGVzW2VsZW0udHlwZV0pIHx8XG5cdCAgICBlbGVtLm5vZGVOYW1lID09PSAnVEVYVEFSRUEnXG5cdCAgKTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBpc1RleHRJbnB1dEVsZW1lbnQ7XG5cblxuLyoqKi8gfSxcbi8qIDg0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIG1hcE9iamVjdFxuXHQgKi9cblx0XG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cdFxuXHQvKipcblx0ICogRXhlY3V0ZXMgdGhlIHByb3ZpZGVkIGBjYWxsYmFja2Agb25jZSBmb3IgZWFjaCBlbnVtZXJhYmxlIG93biBwcm9wZXJ0eSBpbiB0aGVcblx0ICogb2JqZWN0IGFuZCBjb25zdHJ1Y3RzIGEgbmV3IG9iamVjdCBmcm9tIHRoZSByZXN1bHRzLiBUaGUgYGNhbGxiYWNrYCBpc1xuXHQgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuXHQgKlxuXHQgKiAgLSB0aGUgcHJvcGVydHkgdmFsdWVcblx0ICogIC0gdGhlIHByb3BlcnR5IG5hbWVcblx0ICogIC0gdGhlIG9iamVjdCBiZWluZyB0cmF2ZXJzZWRcblx0ICpcblx0ICogUHJvcGVydGllcyB0aGF0IGFyZSBhZGRlZCBhZnRlciB0aGUgY2FsbCB0byBgbWFwT2JqZWN0YCB3aWxsIG5vdCBiZSB2aXNpdGVkXG5cdCAqIGJ5IGBjYWxsYmFja2AuIElmIHRoZSB2YWx1ZXMgb2YgZXhpc3RpbmcgcHJvcGVydGllcyBhcmUgY2hhbmdlZCwgdGhlIHZhbHVlXG5cdCAqIHBhc3NlZCB0byBgY2FsbGJhY2tgIHdpbGwgYmUgdGhlIHZhbHVlIGF0IHRoZSB0aW1lIGBtYXBPYmplY3RgIHZpc2l0cyB0aGVtLlxuXHQgKiBQcm9wZXJ0aWVzIHRoYXQgYXJlIGRlbGV0ZWQgYmVmb3JlIGJlaW5nIHZpc2l0ZWQgYXJlIG5vdCB2aXNpdGVkLlxuXHQgKlxuXHQgKiBAZ3JlcCBmdW5jdGlvbiBvYmplY3RNYXAoKVxuXHQgKiBAZ3JlcCBmdW5jdGlvbiBvYmpNYXAoKVxuXHQgKlxuXHQgKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuXHQgKiBAcGFyYW0geyp9IGNvbnRleHRcblx0ICogQHJldHVybiB7P29iamVjdH1cblx0ICovXG5cdGZ1bmN0aW9uIG1hcE9iamVjdChvYmplY3QsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG5cdCAgaWYgKCFvYmplY3QpIHtcblx0ICAgIHJldHVybiBudWxsO1xuXHQgIH1cblx0ICB2YXIgcmVzdWx0ID0ge307XG5cdCAgZm9yICh2YXIgbmFtZSBpbiBvYmplY3QpIHtcblx0ICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgbmFtZSkpIHtcblx0ICAgICAgcmVzdWx0W25hbWVdID0gY2FsbGJhY2suY2FsbChjb250ZXh0LCBvYmplY3RbbmFtZV0sIG5hbWUsIG9iamVjdCk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiByZXN1bHQ7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gbWFwT2JqZWN0O1xuXG5cbi8qKiovIH0sXG4vKiA4NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBtZW1vaXplU3RyaW5nT25seVxuXHQgKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0LyoqXG5cdCAqIE1lbW9pemVzIHRoZSByZXR1cm4gdmFsdWUgb2YgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgb25lIHN0cmluZyBhcmd1bWVudC5cblx0ICpcblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcblx0ICogQHJldHVybiB7ZnVuY3Rpb259XG5cdCAqL1xuXHRmdW5jdGlvbiBtZW1vaXplU3RyaW5nT25seShjYWxsYmFjaykge1xuXHQgIHZhciBjYWNoZSA9IHt9O1xuXHQgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcblx0ICAgIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShzdHJpbmcpKSB7XG5cdCAgICAgIHJldHVybiBjYWNoZVtzdHJpbmddO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIGNhY2hlW3N0cmluZ10gPSBjYWxsYmFjay5jYWxsKHRoaXMsIHN0cmluZyk7XG5cdCAgICB9XG5cdCAgfTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplU3RyaW5nT25seTtcblxuXG4vKioqLyB9LFxuLyogODYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgc2V0SW5uZXJIVE1MXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRcblx0dmFyIFdISVRFU1BBQ0VfVEVTVCA9IC9eWyBcXHJcXG5cXHRcXGZdLztcblx0dmFyIE5PTlZJU0lCTEVfVEVTVCA9IC88KCEtLXxsaW5rfG5vc2NyaXB0fG1ldGF8c2NyaXB0fHN0eWxlKVsgXFxyXFxuXFx0XFxmXFwvPl0vO1xuXHRcblx0LyoqXG5cdCAqIFNldCB0aGUgaW5uZXJIVE1MIHByb3BlcnR5IG9mIGEgbm9kZSwgZW5zdXJpbmcgdGhhdCB3aGl0ZXNwYWNlIGlzIHByZXNlcnZlZFxuXHQgKiBldmVuIGluIElFOC5cblx0ICpcblx0ICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0dmFyIHNldElubmVySFRNTCA9IGZ1bmN0aW9uKG5vZGUsIGh0bWwpIHtcblx0ICBub2RlLmlubmVySFRNTCA9IGh0bWw7XG5cdH07XG5cdFxuXHRpZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG5cdCAgLy8gSUU4OiBXaGVuIHVwZGF0aW5nIGEganVzdCBjcmVhdGVkIG5vZGUgd2l0aCBpbm5lckhUTUwgb25seSBsZWFkaW5nXG5cdCAgLy8gd2hpdGVzcGFjZSBpcyByZW1vdmVkLiBXaGVuIHVwZGF0aW5nIGFuIGV4aXN0aW5nIG5vZGUgd2l0aCBpbm5lckhUTUxcblx0ICAvLyB3aGl0ZXNwYWNlIGluIHJvb3QgVGV4dE5vZGVzIGlzIGFsc28gY29sbGFwc2VkLlxuXHQgIC8vIEBzZWUgcXVpcmtzbW9kZS5vcmcvYnVncmVwb3J0cy9hcmNoaXZlcy8yMDA0LzExL2lubmVyaHRtbF9hbmRfdC5odG1sXG5cdFxuXHQgIC8vIEZlYXR1cmUgZGV0ZWN0aW9uOyBvbmx5IElFOCBpcyBrbm93biB0byBiZWhhdmUgaW1wcm9wZXJseSBsaWtlIHRoaXMuXG5cdCAgdmFyIHRlc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdCAgdGVzdEVsZW1lbnQuaW5uZXJIVE1MID0gJyAnO1xuXHQgIGlmICh0ZXN0RWxlbWVudC5pbm5lckhUTUwgPT09ICcnKSB7XG5cdCAgICBzZXRJbm5lckhUTUwgPSBmdW5jdGlvbihub2RlLCBodG1sKSB7XG5cdCAgICAgIC8vIE1hZ2ljIHRoZW9yeTogSUU4IHN1cHBvc2VkbHkgZGlmZmVyZW50aWF0ZXMgYmV0d2VlbiBhZGRlZCBhbmQgdXBkYXRlZFxuXHQgICAgICAvLyBub2RlcyB3aGVuIHByb2Nlc3NpbmcgaW5uZXJIVE1MLCBpbm5lckhUTUwgb24gdXBkYXRlZCBub2RlcyBzdWZmZXJzXG5cdCAgICAgIC8vIGZyb20gd29yc2Ugd2hpdGVzcGFjZSBiZWhhdmlvci4gUmUtYWRkaW5nIGEgbm9kZSBsaWtlIHRoaXMgdHJpZ2dlcnNcblx0ICAgICAgLy8gdGhlIGluaXRpYWwgYW5kIG1vcmUgZmF2b3JhYmxlIHdoaXRlc3BhY2UgYmVoYXZpb3IuXG5cdCAgICAgIC8vIFRPRE86IFdoYXQgdG8gZG8gb24gYSBkZXRhY2hlZCBub2RlP1xuXHQgICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG5cdCAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChub2RlLCBub2RlKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgLy8gV2UgYWxzbyBpbXBsZW1lbnQgYSB3b3JrYXJvdW5kIGZvciBub24tdmlzaWJsZSB0YWdzIGRpc2FwcGVhcmluZyBpbnRvXG5cdCAgICAgIC8vIHRoaW4gYWlyIG9uIElFOCwgdGhpcyBvbmx5IGhhcHBlbnMgaWYgdGhlcmUgaXMgbm8gdmlzaWJsZSB0ZXh0XG5cdCAgICAgIC8vIGluLWZyb250IG9mIHRoZSBub24tdmlzaWJsZSB0YWdzLiBQaWdneWJhY2sgb24gdGhlIHdoaXRlc3BhY2UgZml4XG5cdCAgICAgIC8vIGFuZCBzaW1wbHkgY2hlY2sgaWYgYW55IG5vbi12aXNpYmxlIHRhZ3MgYXBwZWFyIGluIHRoZSBzb3VyY2UuXG5cdCAgICAgIGlmIChXSElURVNQQUNFX1RFU1QudGVzdChodG1sKSB8fFxuXHQgICAgICAgICAgaHRtbFswXSA9PT0gJzwnICYmIE5PTlZJU0lCTEVfVEVTVC50ZXN0KGh0bWwpKSB7XG5cdCAgICAgICAgLy8gUmVjb3ZlciBsZWFkaW5nIHdoaXRlc3BhY2UgYnkgdGVtcG9yYXJpbHkgcHJlcGVuZGluZyBhbnkgY2hhcmFjdGVyLlxuXHQgICAgICAgIC8vIFxcdUZFRkYgaGFzIHRoZSBwb3RlbnRpYWwgYWR2YW50YWdlIG9mIGJlaW5nIHplcm8td2lkdGgvaW52aXNpYmxlLlxuXHQgICAgICAgIG5vZGUuaW5uZXJIVE1MID0gJ1xcdUZFRkYnICsgaHRtbDtcblx0XG5cdCAgICAgICAgLy8gZGVsZXRlRGF0YSBsZWF2ZXMgYW4gZW1wdHkgYFRleHROb2RlYCB3aGljaCBvZmZzZXRzIHRoZSBpbmRleCBvZiBhbGxcblx0ICAgICAgICAvLyBjaGlsZHJlbi4gRGVmaW5pdGVseSB3YW50IHRvIGF2b2lkIHRoaXMuXG5cdCAgICAgICAgdmFyIHRleHROb2RlID0gbm9kZS5maXJzdENoaWxkO1xuXHQgICAgICAgIGlmICh0ZXh0Tm9kZS5kYXRhLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZCh0ZXh0Tm9kZSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHRleHROb2RlLmRlbGV0ZURhdGEoMCwgMSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIG5vZGUuaW5uZXJIVE1MID0gaHRtbDtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICB9XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gc2V0SW5uZXJIVE1MO1xuXG5cbi8qKiovIH0sXG4vKiA4NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIHRyYXZlcnNlQWxsQ2hpbGRyZW5cblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBSZWFjdEVsZW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHR2YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcblx0XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIFNFUEFSQVRPUiA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLlNFUEFSQVRPUjtcblx0dmFyIFNVQlNFUEFSQVRPUiA9ICc6Jztcblx0XG5cdC8qKlxuXHQgKiBUT0RPOiBUZXN0IHRoYXQ6XG5cdCAqIDEuIGBtYXBDaGlsZHJlbmAgdHJhbnNmb3JtcyBzdHJpbmdzIGFuZCBudW1iZXJzIGludG8gYFJlYWN0VGV4dENvbXBvbmVudGAuXG5cdCAqIDIuIGl0KCdzaG91bGQgZmFpbCB3aGVuIHN1cHBsaWVkIGR1cGxpY2F0ZSBrZXknLCBmdW5jdGlvbigpIHtcblx0ICogMy4gVGhhdCBhIHNpbmdsZSBjaGlsZCBhbmQgYW4gYXJyYXkgd2l0aCBvbmUgaXRlbSBoYXZlIHRoZSBzYW1lIGtleSBwYXR0ZXJuLlxuXHQgKiB9KTtcblx0ICovXG5cdFxuXHR2YXIgdXNlclByb3ZpZGVkS2V5RXNjYXBlckxvb2t1cCA9IHtcblx0ICAnPSc6ICc9MCcsXG5cdCAgJy4nOiAnPTEnLFxuXHQgICc6JzogJz0yJ1xuXHR9O1xuXHRcblx0dmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4ID0gL1s9LjpdL2c7XG5cdFxuXHRmdW5jdGlvbiB1c2VyUHJvdmlkZWRLZXlFc2NhcGVyKG1hdGNoKSB7XG5cdCAgcmV0dXJuIHVzZXJQcm92aWRlZEtleUVzY2FwZXJMb29rdXBbbWF0Y2hdO1xuXHR9XG5cdFxuXHQvKipcblx0ICogR2VuZXJhdGUgYSBrZXkgc3RyaW5nIHRoYXQgaWRlbnRpZmllcyBhIGNvbXBvbmVudCB3aXRoaW4gYSBzZXQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Kn0gY29tcG9uZW50IEEgY29tcG9uZW50IHRoYXQgY291bGQgY29udGFpbiBhIG1hbnVhbCBrZXkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCB0aGF0IGlzIHVzZWQgaWYgYSBtYW51YWwga2V5IGlzIG5vdCBwcm92aWRlZC5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0Q29tcG9uZW50S2V5KGNvbXBvbmVudCwgaW5kZXgpIHtcblx0ICBpZiAoY29tcG9uZW50ICYmIGNvbXBvbmVudC5rZXkgIT0gbnVsbCkge1xuXHQgICAgLy8gRXhwbGljaXQga2V5XG5cdCAgICByZXR1cm4gd3JhcFVzZXJQcm92aWRlZEtleShjb21wb25lbnQua2V5KTtcblx0ICB9XG5cdCAgLy8gSW1wbGljaXQga2V5IGRldGVybWluZWQgYnkgdGhlIGluZGV4IGluIHRoZSBzZXRcblx0ICByZXR1cm4gaW5kZXgudG9TdHJpbmcoMzYpO1xuXHR9XG5cdFxuXHQvKipcblx0ICogRXNjYXBlIGEgY29tcG9uZW50IGtleSBzbyB0aGF0IGl0IGlzIHNhZmUgdG8gdXNlIGluIGEgcmVhY3RpZC5cblx0ICpcblx0ICogQHBhcmFtIHsqfSBrZXkgQ29tcG9uZW50IGtleSB0byBiZSBlc2NhcGVkLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IEFuIGVzY2FwZWQgc3RyaW5nLlxuXHQgKi9cblx0ZnVuY3Rpb24gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHRleHQpIHtcblx0ICByZXR1cm4gKCcnICsgdGV4dCkucmVwbGFjZShcblx0ICAgIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4LFxuXHQgICAgdXNlclByb3ZpZGVkS2V5RXNjYXBlclxuXHQgICk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBXcmFwIGEgYGtleWAgdmFsdWUgZXhwbGljaXRseSBwcm92aWRlZCBieSB0aGUgdXNlciB0byBkaXN0aW5ndWlzaCBpdCBmcm9tXG5cdCAqIGltcGxpY2l0bHktZ2VuZXJhdGVkIGtleXMgZ2VuZXJhdGVkIGJ5IGEgY29tcG9uZW50J3MgaW5kZXggaW4gaXRzIHBhcmVudC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IGtleSBWYWx1ZSBvZiBhIHVzZXItcHJvdmlkZWQgYGtleWAgYXR0cmlidXRlXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdGZ1bmN0aW9uIHdyYXBVc2VyUHJvdmlkZWRLZXkoa2V5KSB7XG5cdCAgcmV0dXJuICckJyArIGVzY2FwZVVzZXJQcm92aWRlZEtleShrZXkpO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG5cdCAqIEBwYXJhbSB7IXN0cmluZ30gbmFtZVNvRmFyIE5hbWUgb2YgdGhlIGtleSBwYXRoIHNvIGZhci5cblx0ICogQHBhcmFtIHshbnVtYmVyfSBpbmRleFNvRmFyIE51bWJlciBvZiBjaGlsZHJlbiBlbmNvdW50ZXJlZCB1bnRpbCB0aGlzIHBvaW50LlxuXHQgKiBAcGFyYW0geyFmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gaW52b2tlIHdpdGggZWFjaCBjaGlsZCBmb3VuZC5cblx0ICogQHBhcmFtIHs/Kn0gdHJhdmVyc2VDb250ZXh0IFVzZWQgdG8gcGFzcyBpbmZvcm1hdGlvbiB0aHJvdWdob3V0IHRoZSB0cmF2ZXJzYWxcblx0ICogcHJvY2Vzcy5cblx0ICogQHJldHVybiB7IW51bWJlcn0gVGhlIG51bWJlciBvZiBjaGlsZHJlbiBpbiB0aGlzIHN1YnRyZWUuXG5cdCAqL1xuXHR2YXIgdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwgPVxuXHQgIGZ1bmN0aW9uKGNoaWxkcmVuLCBuYW1lU29GYXIsIGluZGV4U29GYXIsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpIHtcblx0ICAgIHZhciBuZXh0TmFtZSwgbmV4dEluZGV4O1xuXHQgICAgdmFyIHN1YnRyZWVDb3VudCA9IDA7ICAvLyBDb3VudCBvZiBjaGlsZHJlbiBmb3VuZCBpbiB0aGUgY3VycmVudCBzdWJ0cmVlLlxuXHQgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcblx0ICAgICAgICBuZXh0TmFtZSA9IChcblx0ICAgICAgICAgIG5hbWVTb0ZhciArXG5cdCAgICAgICAgICAobmFtZVNvRmFyID8gU1VCU0VQQVJBVE9SIDogU0VQQVJBVE9SKSArXG5cdCAgICAgICAgICBnZXRDb21wb25lbnRLZXkoY2hpbGQsIGkpXG5cdCAgICAgICAgKTtcblx0ICAgICAgICBuZXh0SW5kZXggPSBpbmRleFNvRmFyICsgc3VidHJlZUNvdW50O1xuXHQgICAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChcblx0ICAgICAgICAgIGNoaWxkLFxuXHQgICAgICAgICAgbmV4dE5hbWUsXG5cdCAgICAgICAgICBuZXh0SW5kZXgsXG5cdCAgICAgICAgICBjYWxsYmFjayxcblx0ICAgICAgICAgIHRyYXZlcnNlQ29udGV4dFxuXHQgICAgICAgICk7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuXHQgICAgICB2YXIgaXNPbmx5Q2hpbGQgPSBuYW1lU29GYXIgPT09ICcnO1xuXHQgICAgICAvLyBJZiBpdCdzIHRoZSBvbmx5IGNoaWxkLCB0cmVhdCB0aGUgbmFtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBhbiBhcnJheVxuXHQgICAgICAvLyBzbyB0aGF0IGl0J3MgY29uc2lzdGVudCBpZiB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIGdyb3dzXG5cdCAgICAgIHZhciBzdG9yYWdlTmFtZSA9XG5cdCAgICAgICAgaXNPbmx5Q2hpbGQgPyBTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGRyZW4sIDApIDogbmFtZVNvRmFyO1xuXHQgICAgICBpZiAoY2hpbGRyZW4gPT0gbnVsbCB8fCB0eXBlID09PSAnYm9vbGVhbicpIHtcblx0ICAgICAgICAvLyBBbGwgb2YgdGhlIGFib3ZlIGFyZSBwZXJjZWl2ZWQgYXMgbnVsbC5cblx0ICAgICAgICBjYWxsYmFjayh0cmF2ZXJzZUNvbnRleHQsIG51bGwsIHN0b3JhZ2VOYW1lLCBpbmRleFNvRmFyKTtcblx0ICAgICAgICBzdWJ0cmVlQ291bnQgPSAxO1xuXHQgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGUgPT09ICdudW1iZXInIHx8XG5cdCAgICAgICAgICAgICAgICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuXHQgICAgICAgIGNhbGxiYWNrKHRyYXZlcnNlQ29udGV4dCwgY2hpbGRyZW4sIHN0b3JhZ2VOYW1lLCBpbmRleFNvRmFyKTtcblx0ICAgICAgICBzdWJ0cmVlQ291bnQgPSAxO1xuXHQgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG5cdCAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgICAgICFjaGlsZHJlbiB8fCBjaGlsZHJlbi5ub2RlVHlwZSAhPT0gMSxcblx0ICAgICAgICAgICd0cmF2ZXJzZUFsbENoaWxkcmVuKC4uLik6IEVuY291bnRlcmVkIGFuIGludmFsaWQgY2hpbGQ7IERPTSAnICtcblx0ICAgICAgICAgICdlbGVtZW50cyBhcmUgbm90IHZhbGlkIGNoaWxkcmVuIG9mIFJlYWN0IGNvbXBvbmVudHMuJ1xuXHQgICAgICAgICkgOiBpbnZhcmlhbnQoIWNoaWxkcmVuIHx8IGNoaWxkcmVuLm5vZGVUeXBlICE9PSAxKSk7XG5cdCAgICAgICAgZm9yICh2YXIga2V5IGluIGNoaWxkcmVuKSB7XG5cdCAgICAgICAgICBpZiAoY2hpbGRyZW4uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHQgICAgICAgICAgICBuZXh0TmFtZSA9IChcblx0ICAgICAgICAgICAgICBuYW1lU29GYXIgKyAobmFtZVNvRmFyID8gU1VCU0VQQVJBVE9SIDogU0VQQVJBVE9SKSArXG5cdCAgICAgICAgICAgICAgd3JhcFVzZXJQcm92aWRlZEtleShrZXkpICsgU1VCU0VQQVJBVE9SICtcblx0ICAgICAgICAgICAgICBnZXRDb21wb25lbnRLZXkoY2hpbGRyZW5ba2V5XSwgMClcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgbmV4dEluZGV4ID0gaW5kZXhTb0ZhciArIHN1YnRyZWVDb3VudDtcblx0ICAgICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKFxuXHQgICAgICAgICAgICAgIGNoaWxkcmVuW2tleV0sXG5cdCAgICAgICAgICAgICAgbmV4dE5hbWUsXG5cdCAgICAgICAgICAgICAgbmV4dEluZGV4LFxuXHQgICAgICAgICAgICAgIGNhbGxiYWNrLFxuXHQgICAgICAgICAgICAgIHRyYXZlcnNlQ29udGV4dFxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIHN1YnRyZWVDb3VudDtcblx0ICB9O1xuXHRcblx0LyoqXG5cdCAqIFRyYXZlcnNlcyBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAsIGJ1dFxuXHQgKiBtaWdodCBhbHNvIGJlIHNwZWNpZmllZCB0aHJvdWdoIGF0dHJpYnV0ZXM6XG5cdCAqXG5cdCAqIC0gYHRyYXZlcnNlQWxsQ2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbiwgLi4uKWBcblx0ICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmxlZnRQYW5lbENoaWxkcmVuLCAuLi4pYFxuXHQgKlxuXHQgKiBUaGUgYHRyYXZlcnNlQ29udGV4dGAgaXMgYW4gb3B0aW9uYWwgYXJndW1lbnQgdGhhdCBpcyBwYXNzZWQgdGhyb3VnaCB0aGVcblx0ICogZW50aXJlIHRyYXZlcnNhbC4gSXQgY2FuIGJlIHVzZWQgdG8gc3RvcmUgYWNjdW11bGF0aW9ucyBvciBhbnl0aGluZyBlbHNlIHRoYXRcblx0ICogdGhlIGNhbGxiYWNrIG1pZ2h0IGZpbmQgcmVsZXZhbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgb2JqZWN0LlxuXHQgKiBAcGFyYW0geyFmdW5jdGlvbn0gY2FsbGJhY2sgVG8gaW52b2tlIHVwb24gdHJhdmVyc2luZyBlYWNoIGNoaWxkLlxuXHQgKiBAcGFyYW0gez8qfSB0cmF2ZXJzZUNvbnRleHQgQ29udGV4dCBmb3IgdHJhdmVyc2FsLlxuXHQgKiBAcmV0dXJuIHshbnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuIGluIHRoaXMgc3VidHJlZS5cblx0ICovXG5cdGZ1bmN0aW9uIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpIHtcblx0ICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuXHQgICAgcmV0dXJuIDA7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGRyZW4sICcnLCAwLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSB0cmF2ZXJzZUFsbENoaWxkcmVuO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogODggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgbGlzdCA9IFtdO1xyXG5cdFx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG5cdFx0XHR2YXIgcmVzdWx0ID0gW107XHJcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIGl0ZW0gPSB0aGlzW2ldO1xyXG5cdFx0XHRcdGlmKGl0ZW1bMl0pIHtcclxuXHRcdFx0XHRcdHJlc3VsdC5wdXNoKFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgaXRlbVsxXSArIFwifVwiKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0cmVzdWx0LnB1c2goaXRlbVsxXSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiByZXN1bHQuam9pbihcIlwiKTtcclxuXHRcdH07XHJcblx0XHRyZXR1cm4gbGlzdDtcclxuXHR9XG5cbi8qKiovIH0sXG4vKiA4OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIFN0cnVjdHVyZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTMpO1xuXHRcblx0ZnVuY3Rpb24gSW1tc3RydWN0ICgpIHtcblx0ICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSW1tc3RydWN0KSkge1xuXHQgICAgcmV0dXJuIG5ldyBJbW1zdHJ1Y3QoKTtcblx0ICB9XG5cdFxuXHQgIHRoaXMuaW5zdGFuY2VzID0ge307XG5cdH1cblx0XG5cdEltbXN0cnVjdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSwgZGF0YSkge1xuXHQgIHJldHVybiBnZXRJbnN0YW5jZSh0aGlzLCB7XG5cdCAgICBrZXk6IGtleSxcblx0ICAgIGRhdGE6IGRhdGFcblx0ICB9KTtcblx0fTtcblx0XG5cdEltbXN0cnVjdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgdGhpcy5pbnN0YW5jZXMgPSB7fTtcblx0fTtcblx0XG5cdEltbXN0cnVjdC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGtleSkge1xuXHQgIHJldHVybiBkZWxldGUgdGhpcy5pbnN0YW5jZXNba2V5XTtcblx0fTtcblx0XG5cdEltbXN0cnVjdC5wcm90b3R5cGUud2l0aEhpc3RvcnkgPSBmdW5jdGlvbiAoa2V5LCBkYXRhKSB7XG5cdCAgcmV0dXJuIGdldEluc3RhbmNlKHRoaXMsIHtcblx0ICAgIGtleToga2V5LFxuXHQgICAgZGF0YTogZGF0YSxcblx0ICAgIGhpc3Rvcnk6IHRydWVcblx0ICB9KTtcblx0fTtcblx0XG5cdHZhciBpbnN0ID0gbmV3IEltbXN0cnVjdCgpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCBkYXRhKSB7XG5cdCAgcmV0dXJuIGdldEluc3RhbmNlKGluc3QsIHtcblx0ICAgIGtleToga2V5LFxuXHQgICAgZGF0YTogZGF0YVxuXHQgIH0pO1xuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMud2l0aEhpc3RvcnkgPSBmdW5jdGlvbiAoa2V5LCBkYXRhKSB7XG5cdCAgcmV0dXJuIGdldEluc3RhbmNlKGluc3QsIHtcblx0ICAgIGtleToga2V5LFxuXHQgICAgZGF0YTogZGF0YSxcblx0ICAgIGhpc3Rvcnk6IHRydWVcblx0ICB9KTtcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzLlN0cnVjdHVyZSA9IFN0cnVjdHVyZTtcblx0bW9kdWxlLmV4cG9ydHMuSW1tc3RydWN0ID0gSW1tc3RydWN0O1xuXHRtb2R1bGUuZXhwb3J0cy5jbGVhciA9IGluc3QuY2xlYXIuYmluZChpbnN0KTtcblx0bW9kdWxlLmV4cG9ydHMucmVtb3ZlID0gaW5zdC5yZW1vdmUuYmluZChpbnN0KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnaW5zdGFuY2VzJywge1xuXHQgIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBpbnN0Lmluc3RhbmNlczsgfSxcblx0ICBlbnVtZXJhYmxlOiB0cnVlLFxuXHQgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHR9KTtcblx0XG5cdGZ1bmN0aW9uIGdldEluc3RhbmNlIChvYmosIG9wdGlvbnMpIHtcblx0ICBpZiAodHlwZW9mIG9wdGlvbnMua2V5ID09PSAnb2JqZWN0Jykge1xuXHQgICAgb3B0aW9ucy5kYXRhID0gb3B0aW9ucy5rZXk7XG5cdCAgICBvcHRpb25zLmtleSA9IHZvaWQgMDtcblx0ICB9XG5cdFxuXHQgIGlmIChvcHRpb25zLmtleSAmJiBvYmouaW5zdGFuY2VzW29wdGlvbnMua2V5XSkge1xuXHQgICAgcmV0dXJuIG9iai5pbnN0YW5jZXNbb3B0aW9ucy5rZXldO1xuXHQgIH1cblx0XG5cdCAgdmFyIG5ld0luc3RhbmNlID0gbmV3IFN0cnVjdHVyZShvcHRpb25zKTtcblx0ICBvYmouaW5zdGFuY2VzW25ld0luc3RhbmNlLmtleV0gPSBuZXdJbnN0YW5jZTtcblx0ICByZXR1cm4gbmV3SW5zdGFuY2U7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDkwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHQvKipcblx0ICogUmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgRXZlbnRFbWl0dGVyIGZ1bmN0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBFdmVudCBoYW5kbGVyIHRvIGJlIGNhbGxlZC5cblx0ICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBDb250ZXh0IGZvciBmdW5jdGlvbiBleGVjdXRpb24uXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IGVtaXQgb25jZVxuXHQgKiBAYXBpIHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIEVFKGZuLCBjb250ZXh0LCBvbmNlKSB7XG5cdCAgdGhpcy5mbiA9IGZuO1xuXHQgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG5cdCAgdGhpcy5vbmNlID0gb25jZSB8fCBmYWxzZTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIE1pbmltYWwgRXZlbnRFbWl0dGVyIGludGVyZmFjZSB0aGF0IGlzIG1vbGRlZCBhZ2FpbnN0IHRoZSBOb2RlLmpzXG5cdCAqIEV2ZW50RW1pdHRlciBpbnRlcmZhY2UuXG5cdCAqXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKiBAYXBpIHB1YmxpY1xuXHQgKi9cblx0ZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkgeyAvKiBOb3RoaW5nIHRvIHNldCAqLyB9XG5cdFxuXHQvKipcblx0ICogSG9sZHMgdGhlIGFzc2lnbmVkIEV2ZW50RW1pdHRlcnMgYnkgbmFtZS5cblx0ICpcblx0ICogQHR5cGUge09iamVjdH1cblx0ICogQHByaXZhdGVcblx0ICovXG5cdEV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcblx0XG5cdC8qKlxuXHQgKiBSZXR1cm4gYSBsaXN0IG9mIGFzc2lnbmVkIGV2ZW50IGxpc3RlbmVycy5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IFRoZSBldmVudHMgdGhhdCBzaG91bGQgYmUgbGlzdGVkLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9XG5cdCAqIEBhcGkgcHVibGljXG5cdCAqL1xuXHRFdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyhldmVudCkge1xuXHQgIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbZXZlbnRdKSByZXR1cm4gW107XG5cdCAgaWYgKHRoaXMuX2V2ZW50c1tldmVudF0uZm4pIHJldHVybiBbdGhpcy5fZXZlbnRzW2V2ZW50XS5mbl07XG5cdFxuXHQgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5fZXZlbnRzW2V2ZW50XS5sZW5ndGgsIGVlID0gbmV3IEFycmF5KGwpOyBpIDwgbDsgaSsrKSB7XG5cdCAgICBlZVtpXSA9IHRoaXMuX2V2ZW50c1tldmVudF1baV0uZm47XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gZWU7XG5cdH07XG5cdFxuXHQvKipcblx0ICogRW1pdCBhbiBldmVudCB0byBhbGwgcmVnaXN0ZXJlZCBldmVudCBsaXN0ZW5lcnMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBUaGUgbmFtZSBvZiB0aGUgZXZlbnQuXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSBJbmRpY2F0aW9uIGlmIHdlJ3ZlIGVtaXR0ZWQgYW4gZXZlbnQuXG5cdCAqIEBhcGkgcHVibGljXG5cdCAqL1xuXHRFdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2ZW50LCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcblx0ICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW2V2ZW50XSkgcmV0dXJuIGZhbHNlO1xuXHRcblx0ICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2ZW50XVxuXHQgICAgLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoXG5cdCAgICAsIGFyZ3Ncblx0ICAgICwgaTtcblx0XG5cdCAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBsaXN0ZW5lcnMuZm4pIHtcblx0ICAgIGlmIChsaXN0ZW5lcnMub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzLmZuLCB0cnVlKTtcblx0XG5cdCAgICBzd2l0Y2ggKGxlbikge1xuXHQgICAgICBjYXNlIDE6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCksIHRydWU7XG5cdCAgICAgIGNhc2UgMjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSksIHRydWU7XG5cdCAgICAgIGNhc2UgMzogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIpLCB0cnVlO1xuXHQgICAgICBjYXNlIDQ6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMyksIHRydWU7XG5cdCAgICAgIGNhc2UgNTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCksIHRydWU7XG5cdCAgICAgIGNhc2UgNjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCwgYTUpLCB0cnVlO1xuXHQgICAgfVxuXHRcblx0ICAgIGZvciAoaSA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuXHQgICAgfVxuXHRcblx0ICAgIGxpc3RlbmVycy5mbi5hcHBseShsaXN0ZW5lcnMuY29udGV4dCwgYXJncyk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHZhciBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoXG5cdCAgICAgICwgajtcblx0XG5cdCAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0ICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbaV0uZm4sIHRydWUpO1xuXHRcblx0ICAgICAgc3dpdGNoIChsZW4pIHtcblx0ICAgICAgICBjYXNlIDE6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0KTsgYnJlYWs7XG5cdCAgICAgICAgY2FzZSAyOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEpOyBicmVhaztcblx0ICAgICAgICBjYXNlIDM6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIpOyBicmVhaztcblx0ICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgaWYgKCFhcmdzKSBmb3IgKGogPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGogPCBsZW47IGorKykge1xuXHQgICAgICAgICAgICBhcmdzW2ogLSAxXSA9IGFyZ3VtZW50c1tqXTtcblx0ICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2ldLmNvbnRleHQsIGFyZ3MpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gdHJ1ZTtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBSZWdpc3RlciBhIG5ldyBFdmVudExpc3RlbmVyIGZvciB0aGUgZ2l2ZW4gZXZlbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBOYW1lIG9mIHRoZSBldmVudC5cblx0ICogQHBhcmFtIHtGdW5jdG9ufSBmbiBDYWxsYmFjayBmdW5jdGlvbi5cblx0ICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBUaGUgY29udGV4dCBvZiB0aGUgZnVuY3Rpb24uXG5cdCAqIEBhcGkgcHVibGljXG5cdCAqL1xuXHRFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGZuLCBjb250ZXh0KSB7XG5cdCAgdmFyIGxpc3RlbmVyID0gbmV3IEVFKGZuLCBjb250ZXh0IHx8IHRoaXMpO1xuXHRcblx0ICBpZiAoIXRoaXMuX2V2ZW50cykgdGhpcy5fZXZlbnRzID0ge307XG5cdCAgaWYgKCF0aGlzLl9ldmVudHNbZXZlbnRdKSB0aGlzLl9ldmVudHNbZXZlbnRdID0gbGlzdGVuZXI7XG5cdCAgZWxzZSB7XG5cdCAgICBpZiAoIXRoaXMuX2V2ZW50c1tldmVudF0uZm4pIHRoaXMuX2V2ZW50c1tldmVudF0ucHVzaChsaXN0ZW5lcik7XG5cdCAgICBlbHNlIHRoaXMuX2V2ZW50c1tldmVudF0gPSBbXG5cdCAgICAgIHRoaXMuX2V2ZW50c1tldmVudF0sIGxpc3RlbmVyXG5cdCAgICBdO1xuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHRoaXM7XG5cdH07XG5cdFxuXHQvKipcblx0ICogQWRkIGFuIEV2ZW50TGlzdGVuZXIgdGhhdCdzIG9ubHkgY2FsbGVkIG9uY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBOYW1lIG9mIHRoZSBldmVudC5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gQ2FsbGJhY2sgZnVuY3Rpb24uXG5cdCAqIEBwYXJhbSB7TWl4ZWR9IGNvbnRleHQgVGhlIGNvbnRleHQgb2YgdGhlIGZ1bmN0aW9uLlxuXHQgKiBAYXBpIHB1YmxpY1xuXHQgKi9cblx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZShldmVudCwgZm4sIGNvbnRleHQpIHtcblx0ICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgdGhpcywgdHJ1ZSk7XG5cdFxuXHQgIGlmICghdGhpcy5fZXZlbnRzKSB0aGlzLl9ldmVudHMgPSB7fTtcblx0ICBpZiAoIXRoaXMuX2V2ZW50c1tldmVudF0pIHRoaXMuX2V2ZW50c1tldmVudF0gPSBsaXN0ZW5lcjtcblx0ICBlbHNlIHtcblx0ICAgIGlmICghdGhpcy5fZXZlbnRzW2V2ZW50XS5mbikgdGhpcy5fZXZlbnRzW2V2ZW50XS5wdXNoKGxpc3RlbmVyKTtcblx0ICAgIGVsc2UgdGhpcy5fZXZlbnRzW2V2ZW50XSA9IFtcblx0ICAgICAgdGhpcy5fZXZlbnRzW2V2ZW50XSwgbGlzdGVuZXJcblx0ICAgIF07XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gdGhpcztcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgVGhlIGV2ZW50IHdlIHdhbnQgdG8gcmVtb3ZlLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgdGhhdCB3ZSBuZWVkIHRvIGZpbmQuXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IHJlbW92ZSBvbmNlIGxpc3RlbmVycy5cblx0ICogQGFwaSBwdWJsaWNcblx0ICovXG5cdEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldmVudCwgZm4sIG9uY2UpIHtcblx0ICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW2V2ZW50XSkgcmV0dXJuIHRoaXM7XG5cdFxuXHQgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZlbnRdXG5cdCAgICAsIGV2ZW50cyA9IFtdO1xuXHRcblx0ICBpZiAoZm4pIHtcblx0ICAgIGlmIChsaXN0ZW5lcnMuZm4gJiYgKGxpc3RlbmVycy5mbiAhPT0gZm4gfHwgKG9uY2UgJiYgIWxpc3RlbmVycy5vbmNlKSkpIHtcblx0ICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzKTtcblx0ICAgIH1cblx0ICAgIGlmICghbGlzdGVuZXJzLmZuKSBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIGlmIChsaXN0ZW5lcnNbaV0uZm4gIT09IGZuIHx8IChvbmNlICYmICFsaXN0ZW5lcnNbaV0ub25jZSkpIHtcblx0ICAgICAgICBldmVudHMucHVzaChsaXN0ZW5lcnNbaV0pO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICAvL1xuXHQgIC8vIFJlc2V0IHRoZSBhcnJheSwgb3IgcmVtb3ZlIGl0IGNvbXBsZXRlbHkgaWYgd2UgaGF2ZSBubyBtb3JlIGxpc3RlbmVycy5cblx0ICAvL1xuXHQgIGlmIChldmVudHMubGVuZ3RoKSB7XG5cdCAgICB0aGlzLl9ldmVudHNbZXZlbnRdID0gZXZlbnRzLmxlbmd0aCA9PT0gMSA/IGV2ZW50c1swXSA6IGV2ZW50cztcblx0ICB9IGVsc2Uge1xuXHQgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1tldmVudF07XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gdGhpcztcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBSZW1vdmUgYWxsIGxpc3RlbmVycyBvciBvbmx5IHRoZSBsaXN0ZW5lcnMgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBUaGUgZXZlbnQgd2FudCB0byByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IuXG5cdCAqIEBhcGkgcHVibGljXG5cdCAqL1xuXHRFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuXHQgIGlmICghdGhpcy5fZXZlbnRzKSByZXR1cm4gdGhpcztcblx0XG5cdCAgaWYgKGV2ZW50KSBkZWxldGUgdGhpcy5fZXZlbnRzW2V2ZW50XTtcblx0ICBlbHNlIHRoaXMuX2V2ZW50cyA9IHt9O1xuXHRcblx0ICByZXR1cm4gdGhpcztcblx0fTtcblx0XG5cdC8vXG5cdC8vIEFsaWFzIG1ldGhvZHMgbmFtZXMgYmVjYXVzZSBwZW9wbGUgcm9sbCBsaWtlIHRoYXQuXG5cdC8vXG5cdEV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cdFxuXHQvL1xuXHQvLyBUaGlzIGZ1bmN0aW9uIGRvZXNuJ3QgYXBwbHkgYW55bW9yZS5cblx0Ly9cblx0RXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMoKSB7XG5cdCAgcmV0dXJuIHRoaXM7XG5cdH07XG5cdFxuXHQvL1xuXHQvLyBFeHBvc2UgdGhlIG1vZHVsZS5cblx0Ly9cblx0RXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblx0RXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlcjIgPSBFdmVudEVtaXR0ZXI7XG5cdEV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIzID0gRXZlbnRFbWl0dGVyO1xuXHRcblx0Ly9cblx0Ly8gRXhwb3NlIHRoZSBtb2R1bGUuXG5cdC8vXG5cdG1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG5cbi8qKiovIH0sXG4vKiA5MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqICBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiAgVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqICBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKi9cblx0XG5cdC8qKlxuXHQgKiBDdXJzb3IgaXMgZXhwZWN0ZWQgdG8gYmUgcmVxdWlyZWQgaW4gYSBub2RlIG9yIG90aGVyIENvbW1vbkpTIGNvbnRleHQ6XG5cdCAqXG5cdCAqICAgICB2YXIgQ3Vyc29yID0gcmVxdWlyZSgnaW1tdXRhYmxlL2NvbnRyaWIvY3Vyc29yJyk7XG5cdCAqXG5cdCAqIElmIHlvdSB3aXNoIHRvIHVzZSBpdCBpbiB0aGUgYnJvd3NlciwgcGxlYXNlIGNoZWNrIG91dCBCcm93c2VyaWZ5IG9yIFdlYlBhY2shXG5cdCAqL1xuXHRcblx0dmFyIEltbXV0YWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTgpO1xuXHR2YXIgSXRlcmFibGUgPSBJbW11dGFibGUuSXRlcmFibGU7XG5cdHZhciBJdGVyYXRvciA9IEl0ZXJhYmxlLkl0ZXJhdG9yO1xuXHR2YXIgU2VxID0gSW1tdXRhYmxlLlNlcTtcblx0dmFyIE1hcCA9IEltbXV0YWJsZS5NYXA7XG5cdFxuXHRcblx0ZnVuY3Rpb24gY3Vyc29yRnJvbShyb290RGF0YSwga2V5UGF0aCwgb25DaGFuZ2UpIHtcblx0ICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHQgICAga2V5UGF0aCA9IFtdO1xuXHQgIH0gZWxzZSBpZiAodHlwZW9mIGtleVBhdGggPT09ICdmdW5jdGlvbicpIHtcblx0ICAgIG9uQ2hhbmdlID0ga2V5UGF0aDtcblx0ICAgIGtleVBhdGggPSBbXTtcblx0ICB9IGVsc2Uge1xuXHQgICAga2V5UGF0aCA9IHZhbFRvS2V5UGF0aChrZXlQYXRoKTtcblx0ICB9XG5cdCAgcmV0dXJuIG1ha2VDdXJzb3Iocm9vdERhdGEsIGtleVBhdGgsIG9uQ2hhbmdlKTtcblx0fVxuXHRcblx0XG5cdHZhciBLZXllZEN1cnNvclByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU2VxLktleWVkLnByb3RvdHlwZSk7XG5cdHZhciBJbmRleGVkQ3Vyc29yUHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTZXEuSW5kZXhlZC5wcm90b3R5cGUpO1xuXHRcblx0ZnVuY3Rpb24gS2V5ZWRDdXJzb3Iocm9vdERhdGEsIGtleVBhdGgsIG9uQ2hhbmdlLCBzaXplKSB7XG5cdCAgdGhpcy5zaXplID0gc2l6ZTtcblx0ICB0aGlzLl9yb290RGF0YSA9IHJvb3REYXRhO1xuXHQgIHRoaXMuX2tleVBhdGggPSBrZXlQYXRoO1xuXHQgIHRoaXMuX29uQ2hhbmdlID0gb25DaGFuZ2U7XG5cdH1cblx0S2V5ZWRDdXJzb3JQcm90b3R5cGUuY29uc3RydWN0b3IgPSBLZXllZEN1cnNvcjtcblx0XG5cdGZ1bmN0aW9uIEluZGV4ZWRDdXJzb3Iocm9vdERhdGEsIGtleVBhdGgsIG9uQ2hhbmdlLCBzaXplKSB7XG5cdCAgdGhpcy5zaXplID0gc2l6ZTtcblx0ICB0aGlzLl9yb290RGF0YSA9IHJvb3REYXRhO1xuXHQgIHRoaXMuX2tleVBhdGggPSBrZXlQYXRoO1xuXHQgIHRoaXMuX29uQ2hhbmdlID0gb25DaGFuZ2U7XG5cdH1cblx0SW5kZXhlZEN1cnNvclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEluZGV4ZWRDdXJzb3I7XG5cdFxuXHRLZXllZEN1cnNvclByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ0N1cnNvciB7JywgJ30nKTtcblx0fVxuXHRJbmRleGVkQ3Vyc29yUHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdCAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnQ3Vyc29yIFsnLCAnXScpO1xuXHR9XG5cdFxuXHRLZXllZEN1cnNvclByb3RvdHlwZS5kZXJlZiA9XG5cdEtleWVkQ3Vyc29yUHJvdG90eXBlLnZhbHVlT2YgPVxuXHRJbmRleGVkQ3Vyc29yUHJvdG90eXBlLmRlcmVmID1cblx0SW5kZXhlZEN1cnNvclByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24obm90U2V0VmFsdWUpIHtcblx0ICByZXR1cm4gdGhpcy5fcm9vdERhdGEuZ2V0SW4odGhpcy5fa2V5UGF0aCwgbm90U2V0VmFsdWUpO1xuXHR9XG5cdFxuXHRLZXllZEN1cnNvclByb3RvdHlwZS5nZXQgPVxuXHRJbmRleGVkQ3Vyc29yUHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGtleSwgbm90U2V0VmFsdWUpIHtcblx0ICByZXR1cm4gdGhpcy5nZXRJbihba2V5XSwgbm90U2V0VmFsdWUpO1xuXHR9XG5cdFxuXHRLZXllZEN1cnNvclByb3RvdHlwZS5nZXRJbiA9XG5cdEluZGV4ZWRDdXJzb3JQcm90b3R5cGUuZ2V0SW4gPSBmdW5jdGlvbihrZXlQYXRoLCBub3RTZXRWYWx1ZSkge1xuXHQgIGtleVBhdGggPSBsaXN0VG9LZXlQYXRoKGtleVBhdGgpO1xuXHQgIGlmIChrZXlQYXRoLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgcmV0dXJuIHRoaXM7XG5cdCAgfVxuXHQgIHZhciB2YWx1ZSA9IHRoaXMuX3Jvb3REYXRhLmdldEluKG5ld0tleVBhdGgodGhpcy5fa2V5UGF0aCwga2V5UGF0aCksIE5PVF9TRVQpO1xuXHQgIHJldHVybiB2YWx1ZSA9PT0gTk9UX1NFVCA/IG5vdFNldFZhbHVlIDogd3JhcHBlZFZhbHVlKHRoaXMsIGtleVBhdGgsIHZhbHVlKTtcblx0fVxuXHRcblx0SW5kZXhlZEN1cnNvclByb3RvdHlwZS5zZXQgPVxuXHRLZXllZEN1cnNvclByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdCAgcmV0dXJuIHVwZGF0ZUN1cnNvcih0aGlzLCBmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5zZXQoa2V5LCB2YWx1ZSk7IH0sIFtrZXldKTtcblx0fVxuXHRcblx0SW5kZXhlZEN1cnNvclByb3RvdHlwZS5zZXRJbiA9XG5cdEtleWVkQ3Vyc29yUHJvdG90eXBlLnNldEluID0gTWFwLnByb3RvdHlwZS5zZXRJbjtcblx0XG5cdEtleWVkQ3Vyc29yUHJvdG90eXBlLnJlbW92ZSA9XG5cdEtleWVkQ3Vyc29yUHJvdG90eXBlWydkZWxldGUnXSA9XG5cdEluZGV4ZWRDdXJzb3JQcm90b3R5cGUucmVtb3ZlID1cblx0SW5kZXhlZEN1cnNvclByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihrZXkpIHtcblx0ICByZXR1cm4gdXBkYXRlQ3Vyc29yKHRoaXMsIGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLnJlbW92ZShrZXkpOyB9LCBba2V5XSk7XG5cdH1cblx0XG5cdEluZGV4ZWRDdXJzb3JQcm90b3R5cGUucmVtb3ZlSW4gPVxuXHRJbmRleGVkQ3Vyc29yUHJvdG90eXBlLmRlbGV0ZUluID1cblx0S2V5ZWRDdXJzb3JQcm90b3R5cGUucmVtb3ZlSW4gPVxuXHRLZXllZEN1cnNvclByb3RvdHlwZS5kZWxldGVJbiA9IE1hcC5wcm90b3R5cGUuZGVsZXRlSW47XG5cdFxuXHRLZXllZEN1cnNvclByb3RvdHlwZS5jbGVhciA9XG5cdEluZGV4ZWRDdXJzb3JQcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcblx0ICByZXR1cm4gdXBkYXRlQ3Vyc29yKHRoaXMsIGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLmNsZWFyKCk7IH0pO1xuXHR9XG5cdFxuXHRJbmRleGVkQ3Vyc29yUHJvdG90eXBlLnVwZGF0ZSA9XG5cdEtleWVkQ3Vyc29yUHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKGtleU9yRm4sIG5vdFNldFZhbHVlLCB1cGRhdGVyKSB7XG5cdCAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHQgICAgdXBkYXRlQ3Vyc29yKHRoaXMsIGtleU9yRm4pIDpcblx0ICAgIHRoaXMudXBkYXRlSW4oW2tleU9yRm5dLCBub3RTZXRWYWx1ZSwgdXBkYXRlcik7XG5cdH1cblx0XG5cdEluZGV4ZWRDdXJzb3JQcm90b3R5cGUudXBkYXRlSW4gPVxuXHRLZXllZEN1cnNvclByb3RvdHlwZS51cGRhdGVJbiA9IGZ1bmN0aW9uKGtleVBhdGgsIG5vdFNldFZhbHVlLCB1cGRhdGVyKSB7XG5cdCAgcmV0dXJuIHVwZGF0ZUN1cnNvcih0aGlzLCBmdW5jdGlvbiAobSkge1xuXHQgICAgcmV0dXJuIG0udXBkYXRlSW4oa2V5UGF0aCwgbm90U2V0VmFsdWUsIHVwZGF0ZXIpO1xuXHQgIH0sIGtleVBhdGgpO1xuXHR9XG5cdFxuXHRJbmRleGVkQ3Vyc29yUHJvdG90eXBlLm1lcmdlID1cblx0S2V5ZWRDdXJzb3JQcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbigvKi4uLml0ZXJzKi8pIHtcblx0ICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblx0ICByZXR1cm4gdXBkYXRlQ3Vyc29yKHRoaXMsIGZ1bmN0aW9uIChtKSB7XG5cdCAgICByZXR1cm4gbS5tZXJnZS5hcHBseShtLCBhcmdzKTtcblx0ICB9KTtcblx0fVxuXHRcblx0SW5kZXhlZEN1cnNvclByb3RvdHlwZS5tZXJnZVdpdGggPVxuXHRLZXllZEN1cnNvclByb3RvdHlwZS5tZXJnZVdpdGggPSBmdW5jdGlvbihtZXJnZXIvKiwgLi4uaXRlcnMqLykge1xuXHQgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXHQgIHJldHVybiB1cGRhdGVDdXJzb3IodGhpcywgZnVuY3Rpb24gKG0pIHtcblx0ICAgIHJldHVybiBtLm1lcmdlV2l0aC5hcHBseShtLCBhcmdzKTtcblx0ICB9KTtcblx0fVxuXHRcblx0SW5kZXhlZEN1cnNvclByb3RvdHlwZS5tZXJnZUluID1cblx0S2V5ZWRDdXJzb3JQcm90b3R5cGUubWVyZ2VJbiA9IE1hcC5wcm90b3R5cGUubWVyZ2VJbjtcblx0XG5cdEluZGV4ZWRDdXJzb3JQcm90b3R5cGUubWVyZ2VEZWVwID1cblx0S2V5ZWRDdXJzb3JQcm90b3R5cGUubWVyZ2VEZWVwID0gZnVuY3Rpb24oLyouLi5pdGVycyovKSB7XG5cdCAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cdCAgcmV0dXJuIHVwZGF0ZUN1cnNvcih0aGlzLCBmdW5jdGlvbiAobSkge1xuXHQgICAgcmV0dXJuIG0ubWVyZ2VEZWVwLmFwcGx5KG0sIGFyZ3MpO1xuXHQgIH0pO1xuXHR9XG5cdFxuXHRJbmRleGVkQ3Vyc29yUHJvdG90eXBlLm1lcmdlRGVlcFdpdGggPVxuXHRLZXllZEN1cnNvclByb3RvdHlwZS5tZXJnZURlZXBXaXRoID0gZnVuY3Rpb24obWVyZ2VyLyosIC4uLml0ZXJzKi8pIHtcblx0ICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblx0ICByZXR1cm4gdXBkYXRlQ3Vyc29yKHRoaXMsIGZ1bmN0aW9uIChtKSB7XG5cdCAgICByZXR1cm4gbS5tZXJnZURlZXBXaXRoLmFwcGx5KG0sIGFyZ3MpO1xuXHQgIH0pO1xuXHR9XG5cdFxuXHRJbmRleGVkQ3Vyc29yUHJvdG90eXBlLm1lcmdlRGVlcEluID1cblx0S2V5ZWRDdXJzb3JQcm90b3R5cGUubWVyZ2VEZWVwSW4gPSBNYXAucHJvdG90eXBlLm1lcmdlRGVlcEluO1xuXHRcblx0S2V5ZWRDdXJzb3JQcm90b3R5cGUud2l0aE11dGF0aW9ucyA9XG5cdEluZGV4ZWRDdXJzb3JQcm90b3R5cGUud2l0aE11dGF0aW9ucyA9IGZ1bmN0aW9uKGZuKSB7XG5cdCAgcmV0dXJuIHVwZGF0ZUN1cnNvcih0aGlzLCBmdW5jdGlvbiAobSkge1xuXHQgICAgcmV0dXJuIChtIHx8IE1hcCgpKS53aXRoTXV0YXRpb25zKGZuKTtcblx0ICB9KTtcblx0fVxuXHRcblx0S2V5ZWRDdXJzb3JQcm90b3R5cGUuY3Vyc29yID1cblx0SW5kZXhlZEN1cnNvclByb3RvdHlwZS5jdXJzb3IgPSBmdW5jdGlvbihzdWJLZXlQYXRoKSB7XG5cdCAgc3ViS2V5UGF0aCA9IHZhbFRvS2V5UGF0aChzdWJLZXlQYXRoKTtcblx0ICByZXR1cm4gc3ViS2V5UGF0aC5sZW5ndGggPT09IDAgPyB0aGlzIDogc3ViQ3Vyc29yKHRoaXMsIHN1YktleVBhdGgpO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQWxsIGl0ZXJhYmxlcyBuZWVkIHRvIGltcGxlbWVudCBfX2l0ZXJhdGVcblx0ICovXG5cdEtleWVkQ3Vyc29yUHJvdG90eXBlLl9faXRlcmF0ZSA9XG5cdEluZGV4ZWRDdXJzb3JQcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcblx0ICB2YXIgY3Vyc29yID0gdGhpcztcblx0ICB2YXIgZGVyZWYgPSBjdXJzb3IuZGVyZWYoKTtcblx0ICByZXR1cm4gZGVyZWYgJiYgZGVyZWYuX19pdGVyYXRlID8gZGVyZWYuX19pdGVyYXRlKFxuXHQgICAgZnVuY3Rpb24gKHYsIGspIHsgcmV0dXJuIGZuKHdyYXBwZWRWYWx1ZShjdXJzb3IsIFtrXSwgdiksIGssIGN1cnNvcik7IH0sXG5cdCAgICByZXZlcnNlXG5cdCAgKSA6IDA7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBBbGwgaXRlcmFibGVzIG5lZWQgdG8gaW1wbGVtZW50IF9faXRlcmF0b3Jcblx0ICovXG5cdEtleWVkQ3Vyc29yUHJvdG90eXBlLl9faXRlcmF0b3IgPVxuXHRJbmRleGVkQ3Vyc29yUHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG5cdCAgdmFyIGRlcmVmID0gdGhpcy5kZXJlZigpO1xuXHQgIHZhciBjdXJzb3IgPSB0aGlzO1xuXHQgIHZhciBpdGVyYXRvciA9IGRlcmVmICYmIGRlcmVmLl9faXRlcmF0b3IgJiZcblx0ICAgIGRlcmVmLl9faXRlcmF0b3IoSXRlcmF0b3IuRU5UUklFUywgcmV2ZXJzZSk7XG5cdCAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG5cdCAgICBpZiAoIWl0ZXJhdG9yKSB7XG5cdCAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcblx0ICAgIH1cblx0ICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuXHQgICAgaWYgKHN0ZXAuZG9uZSkge1xuXHQgICAgICByZXR1cm4gc3RlcDtcblx0ICAgIH1cblx0ICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG5cdCAgICB2YXIgayA9IGVudHJ5WzBdO1xuXHQgICAgdmFyIHYgPSB3cmFwcGVkVmFsdWUoY3Vyc29yLCBba10sIGVudHJ5WzFdKTtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIHZhbHVlOiB0eXBlID09PSBJdGVyYXRvci5LRVlTID8gayA6IHR5cGUgPT09IEl0ZXJhdG9yLlZBTFVFUyA/IHYgOiBbaywgdl0sXG5cdCAgICAgIGRvbmU6IGZhbHNlXG5cdCAgICB9O1xuXHQgIH0pO1xuXHR9XG5cdFxuXHRLZXllZEN1cnNvci5wcm90b3R5cGUgPSBLZXllZEN1cnNvclByb3RvdHlwZTtcblx0SW5kZXhlZEN1cnNvci5wcm90b3R5cGUgPSBJbmRleGVkQ3Vyc29yUHJvdG90eXBlO1xuXHRcblx0XG5cdHZhciBOT1RfU0VUID0ge307IC8vIFNlbnRpbmVsIHZhbHVlXG5cdFxuXHRmdW5jdGlvbiBtYWtlQ3Vyc29yKHJvb3REYXRhLCBrZXlQYXRoLCBvbkNoYW5nZSwgdmFsdWUpIHtcblx0ICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDQpIHtcblx0ICAgIHZhbHVlID0gcm9vdERhdGEuZ2V0SW4oa2V5UGF0aCk7XG5cdCAgfVxuXHQgIHZhciBzaXplID0gdmFsdWUgJiYgdmFsdWUuc2l6ZTtcblx0ICB2YXIgQ3Vyc29yQ2xhc3MgPSBJdGVyYWJsZS5pc0luZGV4ZWQodmFsdWUpID8gSW5kZXhlZEN1cnNvciA6IEtleWVkQ3Vyc29yO1xuXHQgIHJldHVybiBuZXcgQ3Vyc29yQ2xhc3Mocm9vdERhdGEsIGtleVBhdGgsIG9uQ2hhbmdlLCBzaXplKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gd3JhcHBlZFZhbHVlKGN1cnNvciwga2V5UGF0aCwgdmFsdWUpIHtcblx0ICByZXR1cm4gSXRlcmFibGUuaXNJdGVyYWJsZSh2YWx1ZSkgPyBzdWJDdXJzb3IoY3Vyc29yLCBrZXlQYXRoLCB2YWx1ZSkgOiB2YWx1ZTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gc3ViQ3Vyc29yKGN1cnNvciwga2V5UGF0aCwgdmFsdWUpIHtcblx0ICByZXR1cm4gbWFrZUN1cnNvcihcblx0ICAgIGN1cnNvci5fcm9vdERhdGEsXG5cdCAgICBuZXdLZXlQYXRoKGN1cnNvci5fa2V5UGF0aCwga2V5UGF0aCksXG5cdCAgICBjdXJzb3IuX29uQ2hhbmdlLFxuXHQgICAgdmFsdWVcblx0ICApO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiB1cGRhdGVDdXJzb3IoY3Vyc29yLCBjaGFuZ2VGbiwgY2hhbmdlS2V5UGF0aCkge1xuXHQgIHZhciBkZWVwQ2hhbmdlID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG5cdCAgdmFyIG5ld1Jvb3REYXRhID0gY3Vyc29yLl9yb290RGF0YS51cGRhdGVJbihcblx0ICAgIGN1cnNvci5fa2V5UGF0aCxcblx0ICAgIGRlZXBDaGFuZ2UgPyBNYXAoKSA6IHVuZGVmaW5lZCxcblx0ICAgIGNoYW5nZUZuXG5cdCAgKTtcblx0ICB2YXIga2V5UGF0aCA9IGN1cnNvci5fa2V5UGF0aCB8fCBbXTtcblx0ICB2YXIgcmVzdWx0ID0gY3Vyc29yLl9vbkNoYW5nZSAmJiBjdXJzb3IuX29uQ2hhbmdlLmNhbGwoXG5cdCAgICB1bmRlZmluZWQsXG5cdCAgICBuZXdSb290RGF0YSxcblx0ICAgIGN1cnNvci5fcm9vdERhdGEsXG5cdCAgICBkZWVwQ2hhbmdlID8gbmV3S2V5UGF0aChrZXlQYXRoLCBjaGFuZ2VLZXlQYXRoKSA6IGtleVBhdGhcblx0ICApO1xuXHQgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgbmV3Um9vdERhdGEgPSByZXN1bHQ7XG5cdCAgfVxuXHQgIHJldHVybiBtYWtlQ3Vyc29yKG5ld1Jvb3REYXRhLCBjdXJzb3IuX2tleVBhdGgsIGN1cnNvci5fb25DaGFuZ2UpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBuZXdLZXlQYXRoKGhlYWQsIHRhaWwpIHtcblx0ICByZXR1cm4gaGVhZC5jb25jYXQobGlzdFRvS2V5UGF0aCh0YWlsKSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGxpc3RUb0tleVBhdGgobGlzdCkge1xuXHQgIHJldHVybiBBcnJheS5pc0FycmF5KGxpc3QpID8gbGlzdCA6IEltbXV0YWJsZS5JdGVyYWJsZShsaXN0KS50b0FycmF5KCk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHZhbFRvS2V5UGF0aCh2YWwpIHtcblx0ICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gdmFsIDpcblx0ICAgIEl0ZXJhYmxlLmlzSXRlcmFibGUodmFsKSA/IHZhbC50b0FycmF5KCkgOlxuXHQgICAgW3ZhbF07XG5cdH1cblx0XG5cdGV4cG9ydHMuZnJvbSA9IGN1cnNvckZyb207XG5cblxuLyoqKi8gfSxcbi8qIDkyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcblx0ICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuXHQgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG5cdCAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuXHQgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcblx0ICAgICAgY29uc3RydWN0b3I6IHtcblx0ICAgICAgICB2YWx1ZTogY3Rvcixcblx0ICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcblx0ICAgICAgICB3cml0YWJsZTogdHJ1ZSxcblx0ICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfTtcblx0fSBlbHNlIHtcblx0ICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuXHQgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG5cdCAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuXHQgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cblx0ICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcblx0ICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcblx0ICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuXHQgIH1cblx0fVxuXG5cbi8qKiovIH0sXG4vKiA5MyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIEltbXV0YWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTgpO1xuXHR2YXIgQ3Vyc29yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MSk7XG5cdHZhciBFdmVudEVtaXR0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwKS5FdmVudEVtaXR0ZXI7XG5cdHZhciBpbmhlcml0cyA9IF9fd2VicGFja19yZXF1aXJlX18oOTIpO1xuXHR2YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk0KTtcblx0XG5cdC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblx0ICpcblx0ICogIyMgUHVibGljIEFQSS5cblx0ICogICBDb25zdHJ1Y3Rvcih7IGhpc3Rvcnk6IGJvb2wsIGtleTogc3RyaW5nLCBkYXRhOiBzdHJ1Y3R1cmV8b2JqZWN0IH0pXG5cdCAqICAgLmN1cnNvcihwYXRoKVxuXHQgKiAgIC5yZWZlcmVuY2UocGF0aClcblx0ICogICAuZm9yY2VIYXNTd2FwcGVkKG5ld0RhdGEsIG9sZERhdGEsIGtleVBhdGgpXG5cdCAqICAgLnVuZG8oc3RlcHMpXG5cdCAqICAgLnJlZG8oc3RlcHMpXG5cdCAqICAgLnVuZG9VbnRpbChzdHJ1Y3R1cmUpXG5cdCAqXG5cdCAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cdGZ1bmN0aW9uIFN0cnVjdHVyZSAob3B0aW9ucykge1xuXHQgIHZhciBzZWxmID0gdGhpcztcblx0XG5cdCAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdCAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFN0cnVjdHVyZSkpIHtcblx0ICAgIHJldHVybiBuZXcgU3RydWN0dXJlKG9wdGlvbnMpO1xuXHQgIH1cblx0XG5cdCAgdGhpcy5rZXkgPSBvcHRpb25zLmtleSB8fCB1dGlscy5nZW5lcmF0ZVJhbmRvbUtleSgpO1xuXHRcblx0ICB0aGlzLmN1cnJlbnQgPSBvcHRpb25zLmRhdGE7XG5cdCAgaWYgKCFpc0ltbXV0YWJsZVN0cnVjdHVyZSh0aGlzLmN1cnJlbnQpIHx8ICF0aGlzLmN1cnJlbnQpIHtcblx0ICAgIHRoaXMuY3VycmVudCA9IEltbXV0YWJsZS5mcm9tSlModGhpcy5jdXJyZW50IHx8IHt9KTtcblx0ICB9XG5cdFxuXHQgIGlmICghIW9wdGlvbnMuaGlzdG9yeSkge1xuXHQgICAgdGhpcy5oaXN0b3J5ID0gSW1tdXRhYmxlLkxpc3Qub2YodGhpcy5jdXJyZW50KTtcblx0ICAgIHRoaXMuX2N1cnJlbnRSZXZpc2lvbiA9IDA7XG5cdCAgfVxuXHRcblx0ICB0aGlzLl9wYXRoTGlzdGVuZXJzID0gW107XG5cdCAgdGhpcy5vbignc3dhcCcsIGZ1bmN0aW9uIChuZXdEYXRhLCBvbGREYXRhLCBrZXlQYXRoKSB7XG5cdCAgICBsaXN0TGlzdGVuZXJNYXRjaGluZyhzZWxmLl9wYXRoTGlzdGVuZXJzLCBwYXRoU3RyaW5nKGtleVBhdGgpKS5mb3JFYWNoKGZ1bmN0aW9uIChmbnMpIHtcblx0ICAgICAgZm5zLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xuXHQgICAgICAgIGZuKG5ld0RhdGEsIG9sZERhdGEsIGtleVBhdGgpO1xuXHQgICAgICB9KTtcblx0ICAgIH0pO1xuXHQgIH0pO1xuXHRcblx0ICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzLCBhcmd1bWVudHMpO1xuXHR9XG5cdGluaGVyaXRzKFN0cnVjdHVyZSwgRXZlbnRFbWl0dGVyKTtcblx0bW9kdWxlLmV4cG9ydHMgPSBTdHJ1Y3R1cmU7XG5cdFxuXHRTdHJ1Y3R1cmUucHJvdG90eXBlLmN1cnNvciA9IGZ1bmN0aW9uIChwYXRoKSB7XG5cdCAgdmFyIHNlbGYgPSB0aGlzO1xuXHQgIHBhdGggPSBwYXRoIHx8IFtdO1xuXHRcblx0ICBpZiAoIXRoaXMuY3VycmVudCkge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKCdObyBzdHJ1Y3R1cmUgbG9hZGVkLicpO1xuXHQgIH1cblx0XG5cdCAgdmFyIGNoYW5nZUxpc3RlbmVyID0gZnVuY3Rpb24gKG5ld1Jvb3QsIG9sZFJvb3QsIHBhdGgpIHtcblx0ICAgIGlmKHNlbGYuY3VycmVudCA9PT0gb2xkUm9vdCkge1xuXHQgICAgICByZXR1cm4gc2VsZi5jdXJyZW50ID0gbmV3Um9vdDtcblx0ICAgIH1cblx0ICAgIC8vIE90aGV3aXNlIGFuIG91dC1vZi1zeW5jIGNoYW5nZSBvY2N1cmVkLiBXZSBpZ25vcmUgYG9sZFJvb3RgLCBhbmQgZm9jdXMgb25cblx0ICAgIC8vIGNoYW5nZXMgYXQgcGF0aCBgcGF0aGAsIGFuZCBzeW5jIHRoaXMgdG8gYHNlbGYuY3VycmVudGAuXG5cdFxuXHQgICAgaWYoIWhhc0luKG5ld1Jvb3QsIHBhdGgpKSB7XG5cdCAgICAgIHJldHVybiBzZWxmLmN1cnJlbnQgPSBzZWxmLmN1cnJlbnQucmVtb3ZlSW4ocGF0aCk7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gVXBkYXRlIGFuIGV4aXN0aW5nIHBhdGggb3IgYWRkIGEgbmV3IHBhdGggd2l0aGluIHRoZSBjdXJyZW50IG1hcC5cblx0ICAgIHJldHVybiBzZWxmLmN1cnJlbnQgPSBzZWxmLmN1cnJlbnQuc2V0SW4ocGF0aCwgbmV3Um9vdC5nZXRJbihwYXRoKSk7XG5cdCAgfTtcblx0XG5cdCAgY2hhbmdlTGlzdGVuZXIgPSBoYW5kbGVIaXN0b3J5KHRoaXMsIGNoYW5nZUxpc3RlbmVyKTtcblx0ICBjaGFuZ2VMaXN0ZW5lciA9IGhhbmRsZVN3YXAodGhpcywgY2hhbmdlTGlzdGVuZXIpO1xuXHQgIGNoYW5nZUxpc3RlbmVyID0gaGFuZGxlUGVyc2lzdGluZyh0aGlzLCBjaGFuZ2VMaXN0ZW5lcik7XG5cdCAgcmV0dXJuIEN1cnNvci5mcm9tKHNlbGYuY3VycmVudCwgcGF0aCwgY2hhbmdlTGlzdGVuZXIpO1xuXHR9O1xuXHRcblx0U3RydWN0dXJlLnByb3RvdHlwZS5yZWZlcmVuY2UgPSBmdW5jdGlvbiAocGF0aCkge1xuXHQgIGlmIChpc0N1cnNvcihwYXRoKSAmJiBwYXRoLl9rZXlQYXRoKSB7XG5cdCAgICBwYXRoID0gcGF0aC5fa2V5UGF0aDtcblx0ICB9XG5cdCAgdmFyIHNlbGYgPSB0aGlzLCBwYXRoSWQgPSBwYXRoU3RyaW5nKHBhdGgpO1xuXHQgIHZhciBsaXN0ZW5lck5zID0gc2VsZi5fcGF0aExpc3RlbmVyc1twYXRoSWRdO1xuXHQgIHZhciBjdXJzb3IgPSB0aGlzLmN1cnNvcihwYXRoKTtcblx0XG5cdCAgdmFyIGNoYW5nZUxpc3RlbmVyID0gZnVuY3Rpb24gKG5ld1Jvb3QsIG9sZFJvb3QsIGNoYW5nZWRQYXRoKSB7IGN1cnNvciA9IHNlbGYuY3Vyc29yKHBhdGgpOyB9O1xuXHQgIHZhciByZWZlcmVuY2VMaXN0ZW5lcnMgPSBbY2hhbmdlTGlzdGVuZXJdO1xuXHQgIHRoaXMuX3BhdGhMaXN0ZW5lcnNbcGF0aElkXSA9ICFsaXN0ZW5lck5zID8gcmVmZXJlbmNlTGlzdGVuZXJzIDogbGlzdGVuZXJOcy5jb25jYXQoY2hhbmdlTGlzdGVuZXIpO1xuXHRcblx0ICByZXR1cm4ge1xuXHQgICAgb2JzZXJ2ZTogZnVuY3Rpb24gKGV2ZW50TmFtZSwgbmV3Rm4pIHtcblx0ICAgICAgaWYgKHR5cGVvZiBldmVudE5hbWUgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICBuZXdGbiA9IGV2ZW50TmFtZTtcblx0ICAgICAgICBldmVudE5hbWUgPSB2b2lkIDA7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHRoaXMuX2RlYWQgfHwgdHlwZW9mIG5ld0ZuICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XG5cdCAgICAgIGlmIChldmVudE5hbWUgJiYgZXZlbnROYW1lICE9PSAnc3dhcCcpIHtcblx0ICAgICAgICBuZXdGbiA9IG9ubHlPbkV2ZW50KGV2ZW50TmFtZSwgbmV3Rm4pO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBzZWxmLl9wYXRoTGlzdGVuZXJzW3BhdGhJZF0gPSBzZWxmLl9wYXRoTGlzdGVuZXJzW3BhdGhJZF0uY29uY2F0KG5ld0ZuKTtcblx0ICAgICAgcmVmZXJlbmNlTGlzdGVuZXJzID0gcmVmZXJlbmNlTGlzdGVuZXJzLmNvbmNhdChuZXdGbik7XG5cdFxuXHQgICAgICByZXR1cm4gZnVuY3Rpb24gdW5vYnNlcnZlICgpIHtcblx0ICAgICAgICB2YXIgZm5JbmRleCA9IHNlbGYuX3BhdGhMaXN0ZW5lcnNbcGF0aElkXS5pbmRleE9mKG5ld0ZuKTtcblx0ICAgICAgICB2YXIgbG9jYWxMaXN0ZW5lckluZGV4ID0gcmVmZXJlbmNlTGlzdGVuZXJzLmluZGV4T2YobmV3Rm4pO1xuXHRcblx0ICAgICAgICBpZiAocmVmZXJlbmNlTGlzdGVuZXJzW2xvY2FsTGlzdGVuZXJJbmRleF0gPT09IG5ld0ZuKSB7XG5cdCAgICAgICAgICByZWZlcmVuY2VMaXN0ZW5lcnMuc3BsaWNlKGxvY2FsTGlzdGVuZXJJbmRleCwgMSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAoIXNlbGYuX3BhdGhMaXN0ZW5lcnNbcGF0aElkXSkgcmV0dXJuO1xuXHQgICAgICAgIGlmIChzZWxmLl9wYXRoTGlzdGVuZXJzW3BhdGhJZF1bZm5JbmRleF0gIT09IG5ld0ZuKSByZXR1cm47XG5cdCAgICAgICAgc2VsZi5fcGF0aExpc3RlbmVyc1twYXRoSWRdLnNwbGljZShmbkluZGV4LCAxKTtcblx0ICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICBjdXJzb3I6IGZ1bmN0aW9uIChzdWJQYXRoKSB7XG5cdCAgICAgIGlmIChzdWJQYXRoKSByZXR1cm4gY3Vyc29yLmN1cnNvcihzdWJQYXRoKTtcblx0ICAgICAgcmV0dXJuIGN1cnNvcjtcblx0ICAgIH0sXG5cdCAgICB1bm9ic2VydmVBbGw6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgcmVtb3ZlQWxsTGlzdGVuZXJzQnV0KHNlbGYsIHBhdGhJZCwgcmVmZXJlbmNlTGlzdGVuZXJzLCBjaGFuZ2VMaXN0ZW5lcik7XG5cdCAgICAgIHJlZmVyZW5jZUxpc3RlbmVycyA9IFtjaGFuZ2VMaXN0ZW5lcl07XG5cdCAgICB9LFxuXHQgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuXHQgICAgICByZW1vdmVBbGxMaXN0ZW5lcnNCdXQoc2VsZiwgcGF0aElkLCByZWZlcmVuY2VMaXN0ZW5lcnMpO1xuXHQgICAgICByZWZlcmVuY2VMaXN0ZW5lcnMgPSB2b2lkIDA7XG5cdCAgICAgIGN1cnNvciA9IHZvaWQgMDtcblx0XG5cdCAgICAgIHRoaXMuX2RlYWQgPSB0cnVlO1xuXHQgICAgICB0aGlzLm9ic2VydmUgPSB2b2lkIDA7XG5cdCAgICAgIHRoaXMudW5vYnNlcnZlQWxsID0gdm9pZCAwO1xuXHQgICAgICB0aGlzLmN1cnNvciA9IHZvaWQgMDtcblx0ICAgICAgdGhpcy5kZXN0cm95ID0gdm9pZCAwO1xuXHQgICAgfVxuXHQgIH07XG5cdH07XG5cdFxuXHRTdHJ1Y3R1cmUucHJvdG90eXBlLmZvcmNlSGFzU3dhcHBlZCA9IGZ1bmN0aW9uIChuZXdEYXRhLCBvbGREYXRhLCBrZXlQYXRoKSB7XG5cdCAgdGhpcy5lbWl0KCdzd2FwJywgbmV3RGF0YSB8fCB0aGlzLmN1cnJlbnQsIG9sZERhdGEsIGtleVBhdGgpO1xuXHQgIHBvc3NpYmx5RW1pdEFuaW1hdGlvbkZyYW1lRXZlbnQodGhpcywgbmV3RGF0YSB8fCB0aGlzLmN1cnJlbnQsIG9sZERhdGEsIGtleVBhdGgpXG5cdH07XG5cdFxuXHRTdHJ1Y3R1cmUucHJvdG90eXBlLnVuZG8gPSBmdW5jdGlvbihiYWNrKSB7XG5cdCAgdGhpcy5fY3VycmVudFJldmlzaW9uIC09IGJhY2sgfHwgMTtcblx0ICBpZiAodGhpcy5fY3VycmVudFJldmlzaW9uIDwgMCkge1xuXHQgICAgdGhpcy5fY3VycmVudFJldmlzaW9uID0gMDtcblx0ICB9XG5cdFxuXHQgIHRoaXMuY3VycmVudCA9IHRoaXMuaGlzdG9yeS5nZXQodGhpcy5fY3VycmVudFJldmlzaW9uKTtcblx0ICByZXR1cm4gdGhpcy5jdXJyZW50O1xuXHR9O1xuXHRcblx0U3RydWN0dXJlLnByb3RvdHlwZS5yZWRvID0gZnVuY3Rpb24oaGVhZCkge1xuXHQgIHRoaXMuX2N1cnJlbnRSZXZpc2lvbiArPSBoZWFkIHx8IDE7XG5cdCAgaWYgKHRoaXMuX2N1cnJlbnRSZXZpc2lvbiA+IHRoaXMuaGlzdG9yeS5jb3VudCgpIC0gMSkge1xuXHQgICAgdGhpcy5fY3VycmVudFJldmlzaW9uID0gdGhpcy5oaXN0b3J5LmNvdW50KCkgLSAxO1xuXHQgIH1cblx0XG5cdCAgdGhpcy5jdXJyZW50ID0gdGhpcy5oaXN0b3J5LmdldCh0aGlzLl9jdXJyZW50UmV2aXNpb24pO1xuXHQgIHJldHVybiB0aGlzLmN1cnJlbnQ7XG5cdH07XG5cdFxuXHRTdHJ1Y3R1cmUucHJvdG90eXBlLnVuZG9VbnRpbCA9IGZ1bmN0aW9uKHN0cnVjdHVyZSkge1xuXHQgIHRoaXMuX2N1cnJlbnRSZXZpc2lvbiA9IHRoaXMuaGlzdG9yeS5pbmRleE9mKHN0cnVjdHVyZSk7XG5cdCAgdGhpcy5jdXJyZW50ID0gc3RydWN0dXJlO1xuXHRcblx0ICByZXR1cm4gc3RydWN0dXJlO1xuXHR9O1xuXHRcblx0XG5cdC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblx0ICogUHJpdmF0ZSBkZWNvcmF0b3JzLlxuXHQgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cdFxuXHQvLyBVcGRhdGUgaGlzdG9yeSBpZiBoaXN0b3J5IGlzIGFjdGl2ZVxuXHRmdW5jdGlvbiBoYW5kbGVIaXN0b3J5IChlbWl0dGVyLCBmbikge1xuXHQgIHJldHVybiBmdW5jdGlvbiAobmV3RGF0YSwgb2xkRGF0YSwgcGF0aCkge1xuXHQgICAgdmFyIG5ld1N0cnVjdHVyZSA9IGZuLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuXHQgICAgaWYgKCFlbWl0dGVyLmhpc3RvcnkgfHwgKG5ld0RhdGEgPT09IG9sZERhdGEpKSByZXR1cm4gbmV3U3RydWN0dXJlO1xuXHRcblx0ICAgIGVtaXR0ZXIuaGlzdG9yeSA9IGVtaXR0ZXIuaGlzdG9yeVxuXHQgICAgICAudGFrZSgrK2VtaXR0ZXIuX2N1cnJlbnRSZXZpc2lvbilcblx0ICAgICAgLnB1c2goZW1pdHRlci5jdXJyZW50KTtcblx0XG5cdCAgICByZXR1cm4gbmV3U3RydWN0dXJlO1xuXHQgIH07XG5cdH1cblx0XG5cdC8vIFVwZGF0ZSBoaXN0b3J5IGlmIGhpc3RvcnkgaXMgYWN0aXZlXG5cdHZhciBwb3NzaWJseUVtaXRBbmltYXRpb25GcmFtZUV2ZW50ID0gKGZ1bmN0aW9uICgpIHtcblx0ICB2YXIgcXVldWVkQ2hhbmdlID0gZmFsc2U7XG5cdCAgaWYgKHR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgIT09ICdmdW5jdGlvbicpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbiAoKSB7fTtcblx0ICB9XG5cdFxuXHQgIHJldHVybiBmdW5jdGlvbiByZXF1ZXN0QW5pbWF0aW9uRnJhbWVFbWl0dGVyIChlbWl0dGVyLCBuZXdTdHJ1Y3R1cmUsIG9sZERhdGEpIHtcblx0ICAgIGlmIChxdWV1ZWRDaGFuZ2UpIHJldHVybjtcblx0ICAgIHF1ZXVlZENoYW5nZSA9IHRydWU7XG5cdFxuXHQgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgcXVldWVkQ2hhbmdlID0gZmFsc2U7XG5cdCAgICAgIGVtaXR0ZXIuZW1pdCgnbmV4dC1hbmltYXRpb24tZnJhbWUnLCBuZXdTdHJ1Y3R1cmUsIG9sZERhdGEpO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0fSgpKTtcblx0XG5cdC8vIEVtaXQgc3dhcCBldmVudCBvbiB2YWx1ZXMgYXJlIHN3YXBwZWRcblx0ZnVuY3Rpb24gaGFuZGxlU3dhcCAoZW1pdHRlciwgZm4pIHtcblx0ICByZXR1cm4gZnVuY3Rpb24gKG5ld0RhdGEsIG9sZERhdGEsIGtleVBhdGgpIHtcblx0ICAgIHZhciBuZXdTdHJ1Y3R1cmUgPSBmbi5hcHBseShmbiwgYXJndW1lbnRzKTtcblx0ICAgIGlmKG5ld0RhdGEgPT09IG9sZERhdGEpIHJldHVybiBuZXdTdHJ1Y3R1cmU7XG5cdFxuXHQgICAgZW1pdHRlci5lbWl0KCdzd2FwJywgbmV3U3RydWN0dXJlLCBvbGREYXRhLCBrZXlQYXRoKTtcblx0ICAgIHBvc3NpYmx5RW1pdEFuaW1hdGlvbkZyYW1lRXZlbnQoZW1pdHRlciwgbmV3U3RydWN0dXJlLCBvbGREYXRhLCBrZXlQYXRoKTtcblx0XG5cdCAgICByZXR1cm4gbmV3U3RydWN0dXJlO1xuXHQgIH07XG5cdH1cblx0XG5cdC8vIE1hcCBjaGFuZ2VzIHRvIHVwZGF0ZSBldmVudHMgKGRlbGV0ZS9jaGFuZ2UvYWRkKS5cblx0ZnVuY3Rpb24gaGFuZGxlUGVyc2lzdGluZyAoZW1pdHRlciwgZm4pIHtcblx0ICByZXR1cm4gZnVuY3Rpb24gKG5ld0RhdGEsIG9sZERhdGEsIHBhdGgpIHtcblx0ICAgIHZhciBuZXdTdHJ1Y3R1cmUgPSBmbi5hcHBseShmbiwgYXJndW1lbnRzKTtcblx0ICAgIGlmKG5ld0RhdGEgPT09IG9sZERhdGEpIHJldHVybiBuZXdTdHJ1Y3R1cmU7XG5cdCAgICB2YXIgaW5mbyA9IGFuYWx5emUobmV3RGF0YSwgb2xkRGF0YSwgcGF0aCk7XG5cdFxuXHQgICAgaWYgKGluZm8uZXZlbnROYW1lKSB7XG5cdCAgICAgIGVtaXR0ZXIuZW1pdC5hcHBseShlbWl0dGVyLCBbaW5mby5ldmVudE5hbWVdLmNvbmNhdChpbmZvLmFyZ3VtZW50cykpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5ld1N0cnVjdHVyZTtcblx0ICB9O1xuXHR9XG5cdFxuXHQvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCAqIFByaXZhdGUgaGVscGVycy5cblx0ICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXHRcblx0ZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzQnV0KHNlbGYsIHBhdGhJZCwgbGlzdGVuZXJzLCBleGNlcHQpIHtcblx0ICBpZiAoIWxpc3RlbmVycykgcmV0dXJuO1xuXHQgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuXHQgICAgaWYgKGV4Y2VwdCAmJiBmbiA9PT0gZXhjZXB0KSByZXR1cm47XG5cdCAgICB2YXIgaW5kZXggPSBzZWxmLl9wYXRoTGlzdGVuZXJzW3BhdGhJZF0uaW5kZXhPZihmbik7XG5cdCAgICBzZWxmLl9wYXRoTGlzdGVuZXJzW3BhdGhJZF0uc3BsaWNlKGluZGV4LCAxKTtcblx0ICB9KTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gYW5hbHl6ZSAobmV3RGF0YSwgb2xkRGF0YSwgcGF0aCkge1xuXHQgIHZhciBvbGRPYmplY3QgPSBvbGREYXRhICYmIG9sZERhdGEuZ2V0SW4ocGF0aCk7XG5cdCAgdmFyIG5ld09iamVjdCA9IG5ld0RhdGEgJiYgbmV3RGF0YS5nZXRJbihwYXRoKTtcblx0XG5cdCAgdmFyIGluT2xkID0gb2xkRGF0YSAmJiBoYXNJbihvbGREYXRhLCBwYXRoKTtcblx0ICB2YXIgaW5OZXcgPSBuZXdEYXRhICYmIGhhc0luKG5ld0RhdGEsIHBhdGgpO1xuXHRcblx0ICB2YXIgYXJndW1lbnRzLCBldmVudE5hbWU7XG5cdFxuXHQgIGlmIChpbk9sZCAmJiAhaW5OZXcpIHtcblx0ICAgIGV2ZW50TmFtZSA9ICdkZWxldGUnO1xuXHQgICAgYXJndW1lbnRzID0gW3BhdGgsIG9sZE9iamVjdF07XG5cdCAgfSBlbHNlIGlmIChpbk9sZCAmJiBpbk5ldykge1xuXHQgICAgZXZlbnROYW1lID0gJ2NoYW5nZSc7XG5cdCAgICBhcmd1bWVudHMgPSBbcGF0aCwgbmV3T2JqZWN0LCBvbGRPYmplY3RdO1xuXHQgIH0gZWxzZSBpZiAoIWluT2xkICYmIGluTmV3KSB7XG5cdCAgICBldmVudE5hbWUgPSAnYWRkJztcblx0ICAgIGFyZ3VtZW50cyA9IFtwYXRoLCBuZXdPYmplY3RdO1xuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHtcblx0ICAgIGV2ZW50TmFtZTogZXZlbnROYW1lLFxuXHQgICAgYXJndW1lbnRzOiBhcmd1bWVudHNcblx0ICB9O1xuXHR9XG5cdFxuXHRcblx0Ly8gQ2hlY2sgaWYgcGF0aCBleGlzdHMuXG5cdHZhciBOT1RfU0VUID0ge307XG5cdGZ1bmN0aW9uIGhhc0luKGN1cnNvciwgcGF0aCkge1xuXHQgIGlmKGN1cnNvci5oYXNJbikgcmV0dXJuIGN1cnNvci5oYXNJbihwYXRoKTtcblx0ICByZXR1cm4gY3Vyc29yLmdldEluKHBhdGgsIE5PVF9TRVQpICE9PSBOT1RfU0VUO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBwYXRoU3RyaW5nKHBhdGgpIHtcblx0ICB2YXIgdG9wTGV2ZWwgPSAnZ2xvYmFsJztcblx0ICBpZiAoIXBhdGggfHwgIXBhdGgubGVuZ3RoKSByZXR1cm4gdG9wTGV2ZWw7XG5cdCAgcmV0dXJuIFt0b3BMZXZlbF0uY29uY2F0KHBhdGgpLmpvaW4oJ3wnKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gbGlzdExpc3RlbmVyTWF0Y2hpbmcgKGxpc3RlbmVycywgYmFzZVBhdGgpIHtcblx0ICB2YXIgbmV3TGlzdGVuZXJzID0gW107XG5cdCAgZm9yICh2YXIga2V5IGluIGxpc3RlbmVycykge1xuXHQgICAgaWYgKCFsaXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoa2V5KSkgcmV0dXJuO1xuXHQgICAgaWYgKGJhc2VQYXRoLmluZGV4T2Yoa2V5KSAhPT0gMCkgY29udGludWU7XG5cdCAgICBuZXdMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcnNba2V5XSk7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gbmV3TGlzdGVuZXJzO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBvbmx5T25FdmVudChldmVudE5hbWUsIGZuKSB7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uIChuZXdEYXRhLCBvbGREYXRhLCBrZXlQYXRoKSB7XG5cdCAgICB2YXIgaW5mbyA9IGFuYWx5emUobmV3RGF0YSwgb2xkRGF0YSwga2V5UGF0aCk7XG5cdCAgICBpZiAoaW5mby5ldmVudE5hbWUgIT09IGV2ZW50TmFtZSkgcmV0dXJuO1xuXHQgICAgcmV0dXJuIGZuKG5ld0RhdGEsIG9sZERhdGEsIGtleVBhdGgpO1xuXHQgIH07XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlzQ3Vyc29yIChwb3RlbnRpYWwpIHtcblx0ICByZXR1cm4gcG90ZW50aWFsICYmIHR5cGVvZiBwb3RlbnRpYWwuZGVyZWYgPT09ICdmdW5jdGlvbic7XG5cdH1cblx0XG5cdC8vIENoZWNrIGlmIHBhc3NlZCBzdHJ1Y3R1cmUgaXMgZXhpc3RpbmcgaW1tdXRhYmxlIHN0cnVjdHVyZS5cblx0Ly8gRnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svaW1tdXRhYmxlLWpzL3dpa2kvVXBncmFkaW5nLXRvLUltbXV0YWJsZS12MyNhZGRpdGlvbmFsLWNoYW5nZXNcblx0ZnVuY3Rpb24gaXNJbW11dGFibGVTdHJ1Y3R1cmUgKGRhdGEpIHtcblx0ICByZXR1cm4gaW1tdXRhYmxlU2FmZUNoZWNrKCdJdGVyYWJsZScsICdpc0l0ZXJhYmxlJywgZGF0YSkgfHxcblx0ICAgICAgICAgIGltbXV0YWJsZVNhZmVDaGVjaygnU2VxJywgJ2lzU2VxJywgZGF0YSkgfHxcblx0ICAgICAgICAgIGltbXV0YWJsZVNhZmVDaGVjaygnTWFwJywgJ2lzTWFwJywgZGF0YSkgfHxcblx0ICAgICAgICAgIGltbXV0YWJsZVNhZmVDaGVjaygnT3JkZXJlZE1hcCcsICdpc09yZGVyZWRNYXAnLCBkYXRhKSB8fFxuXHQgICAgICAgICAgaW1tdXRhYmxlU2FmZUNoZWNrKCdMaXN0JywgJ2lzTGlzdCcsIGRhdGEpIHx8XG5cdCAgICAgICAgICBpbW11dGFibGVTYWZlQ2hlY2soJ1N0YWNrJywgJ2lzU3RhY2snLCBkYXRhKSB8fFxuXHQgICAgICAgICAgaW1tdXRhYmxlU2FmZUNoZWNrKCdTZXQnLCAnaXNTZXQnLCBkYXRhKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gaW1tdXRhYmxlU2FmZUNoZWNrIChucywgbWV0aG9kLCBkYXRhKSB7XG5cdCAgcmV0dXJuIEltbXV0YWJsZVtuc10gJiYgSW1tdXRhYmxlW25zXVttZXRob2RdICYmIEltbXV0YWJsZVtuc11bbWV0aG9kXShkYXRhKTtcblx0fVxuXG5cbi8qKiovIH0sXG4vKiA5NCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XG5cdFxuXHRtb2R1bGUuZXhwb3J0cy5nZW5lcmF0ZVJhbmRvbUtleSA9IGZ1bmN0aW9uIChsZW4pIHtcblx0ICBsZW4gPSBsZW4gfHwgMTA7XG5cdCAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyKS5zdWJzdHJpbmcoMCwgbGVuKTtcblx0fTtcblxuXG4vKioqLyB9LFxuLyogOTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiAgQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiAgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqICBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICovXG5cdChmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdCAgdHJ1ZSA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0ICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQgIGdsb2JhbC5JbW11dGFibGUgPSBmYWN0b3J5KClcblx0fSh0aGlzLCBmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0Jzt2YXIgU0xJQ0UkMCA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblx0XG5cdCAgZnVuY3Rpb24gY3JlYXRlQ2xhc3MoY3Rvciwgc3VwZXJDbGFzcykge1xuXHQgICAgaWYgKHN1cGVyQ2xhc3MpIHtcblx0ICAgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcblx0ICAgIH1cblx0ICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3Rvcjtcblx0ICB9XG5cdFxuXHQgIC8vIFVzZWQgZm9yIHNldHRpbmcgcHJvdG90eXBlIG1ldGhvZHMgdGhhdCBJRTggY2hva2VzIG9uLlxuXHQgIHZhciBERUxFVEUgPSAnZGVsZXRlJztcblx0XG5cdCAgLy8gQ29uc3RhbnRzIGRlc2NyaWJpbmcgdGhlIHNpemUgb2YgdHJpZSBub2Rlcy5cblx0ICB2YXIgU0hJRlQgPSA1OyAvLyBSZXN1bHRlZCBpbiBiZXN0IHBlcmZvcm1hbmNlIGFmdGVyIF9fX19fXz9cblx0ICB2YXIgU0laRSA9IDEgPDwgU0hJRlQ7XG5cdCAgdmFyIE1BU0sgPSBTSVpFIC0gMTtcblx0XG5cdCAgLy8gQSBjb25zaXN0ZW50IHNoYXJlZCB2YWx1ZSByZXByZXNlbnRpbmcgXCJub3Qgc2V0XCIgd2hpY2ggZXF1YWxzIG5vdGhpbmcgb3RoZXJcblx0ICAvLyB0aGFuIGl0c2VsZiwgYW5kIG5vdGhpbmcgdGhhdCBjb3VsZCBiZSBwcm92aWRlZCBleHRlcm5hbGx5LlxuXHQgIHZhciBOT1RfU0VUID0ge307XG5cdFxuXHQgIC8vIEJvb2xlYW4gcmVmZXJlbmNlcywgUm91Z2ggZXF1aXZhbGVudCBvZiBgYm9vbCAmYC5cblx0ICB2YXIgQ0hBTkdFX0xFTkdUSCA9IHsgdmFsdWU6IGZhbHNlIH07XG5cdCAgdmFyIERJRF9BTFRFUiA9IHsgdmFsdWU6IGZhbHNlIH07XG5cdFxuXHQgIGZ1bmN0aW9uIE1ha2VSZWYocmVmKSB7XG5cdCAgICByZWYudmFsdWUgPSBmYWxzZTtcblx0ICAgIHJldHVybiByZWY7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBTZXRSZWYocmVmKSB7XG5cdCAgICByZWYgJiYgKHJlZi52YWx1ZSA9IHRydWUpO1xuXHQgIH1cblx0XG5cdCAgLy8gQSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgdmFsdWUgcmVwcmVzZW50aW5nIGFuIFwib3duZXJcIiBmb3IgdHJhbnNpZW50IHdyaXRlc1xuXHQgIC8vIHRvIHRyaWVzLiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgb25seSBldmVyIGVxdWFsIGl0c2VsZiwgYW5kIHdpbGwgbm90IGVxdWFsXG5cdCAgLy8gdGhlIHJldHVybiBvZiBhbnkgc3Vic2VxdWVudCBjYWxsIG9mIHRoaXMgZnVuY3Rpb24uXG5cdCAgZnVuY3Rpb24gT3duZXJJRCgpIHt9XG5cdFxuXHQgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2NvcHktYXJyYXktaW5saW5lXG5cdCAgZnVuY3Rpb24gYXJyQ29weShhcnIsIG9mZnNldCkge1xuXHQgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cdCAgICB2YXIgbGVuID0gTWF0aC5tYXgoMCwgYXJyLmxlbmd0aCAtIG9mZnNldCk7XG5cdCAgICB2YXIgbmV3QXJyID0gbmV3IEFycmF5KGxlbik7XG5cdCAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbGVuOyBpaSsrKSB7XG5cdCAgICAgIG5ld0FycltpaV0gPSBhcnJbaWkgKyBvZmZzZXRdO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5ld0Fycjtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGVuc3VyZVNpemUoaXRlcikge1xuXHQgICAgaWYgKGl0ZXIuc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgIGl0ZXIuc2l6ZSA9IGl0ZXIuX19pdGVyYXRlKHJldHVyblRydWUpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGl0ZXIuc2l6ZTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHdyYXBJbmRleChpdGVyLCBpbmRleCkge1xuXHQgICAgcmV0dXJuIGluZGV4ID49IDAgPyAoK2luZGV4KSA6IGVuc3VyZVNpemUoaXRlcikgKyAoK2luZGV4KTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgc2l6ZSkge1xuXHQgICAgcmV0dXJuIChiZWdpbiA9PT0gMCB8fCAoc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGJlZ2luIDw9IC1zaXplKSkgJiZcblx0ICAgICAgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IChzaXplICE9PSB1bmRlZmluZWQgJiYgZW5kID49IHNpemUpKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHJlc29sdmVCZWdpbihiZWdpbiwgc2l6ZSkge1xuXHQgICAgcmV0dXJuIHJlc29sdmVJbmRleChiZWdpbiwgc2l6ZSwgMCk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiByZXNvbHZlRW5kKGVuZCwgc2l6ZSkge1xuXHQgICAgcmV0dXJuIHJlc29sdmVJbmRleChlbmQsIHNpemUsIHNpemUpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gcmVzb2x2ZUluZGV4KGluZGV4LCBzaXplLCBkZWZhdWx0SW5kZXgpIHtcblx0ICAgIHJldHVybiBpbmRleCA9PT0gdW5kZWZpbmVkID9cblx0ICAgICAgZGVmYXVsdEluZGV4IDpcblx0ICAgICAgaW5kZXggPCAwID9cblx0ICAgICAgICBNYXRoLm1heCgwLCBzaXplICsgaW5kZXgpIDpcblx0ICAgICAgICBzaXplID09PSB1bmRlZmluZWQgP1xuXHQgICAgICAgICAgaW5kZXggOlxuXHQgICAgICAgICAgTWF0aC5taW4oc2l6ZSwgaW5kZXgpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gSXRlcmFibGUodmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIGlzSXRlcmFibGUodmFsdWUpID8gdmFsdWUgOiBTZXEodmFsdWUpO1xuXHQgICAgfVxuXHRcblx0XG5cdCAgY3JlYXRlQ2xhc3MoS2V5ZWRJdGVyYWJsZSwgSXRlcmFibGUpO1xuXHQgICAgZnVuY3Rpb24gS2V5ZWRJdGVyYWJsZSh2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gaXNLZXllZCh2YWx1ZSkgPyB2YWx1ZSA6IEtleWVkU2VxKHZhbHVlKTtcblx0ICAgIH1cblx0XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKEluZGV4ZWRJdGVyYWJsZSwgSXRlcmFibGUpO1xuXHQgICAgZnVuY3Rpb24gSW5kZXhlZEl0ZXJhYmxlKHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiBpc0luZGV4ZWQodmFsdWUpID8gdmFsdWUgOiBJbmRleGVkU2VxKHZhbHVlKTtcblx0ICAgIH1cblx0XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKFNldEl0ZXJhYmxlLCBJdGVyYWJsZSk7XG5cdCAgICBmdW5jdGlvbiBTZXRJdGVyYWJsZSh2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gaXNJdGVyYWJsZSh2YWx1ZSkgJiYgIWlzQXNzb2NpYXRpdmUodmFsdWUpID8gdmFsdWUgOiBTZXRTZXEodmFsdWUpO1xuXHQgICAgfVxuXHRcblx0XG5cdFxuXHQgIGZ1bmN0aW9uIGlzSXRlcmFibGUobWF5YmVJdGVyYWJsZSkge1xuXHQgICAgcmV0dXJuICEhKG1heWJlSXRlcmFibGUgJiYgbWF5YmVJdGVyYWJsZVtJU19JVEVSQUJMRV9TRU5USU5FTF0pO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gaXNLZXllZChtYXliZUtleWVkKSB7XG5cdCAgICByZXR1cm4gISEobWF5YmVLZXllZCAmJiBtYXliZUtleWVkW0lTX0tFWUVEX1NFTlRJTkVMXSk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBpc0luZGV4ZWQobWF5YmVJbmRleGVkKSB7XG5cdCAgICByZXR1cm4gISEobWF5YmVJbmRleGVkICYmIG1heWJlSW5kZXhlZFtJU19JTkRFWEVEX1NFTlRJTkVMXSk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBpc0Fzc29jaWF0aXZlKG1heWJlQXNzb2NpYXRpdmUpIHtcblx0ICAgIHJldHVybiBpc0tleWVkKG1heWJlQXNzb2NpYXRpdmUpIHx8IGlzSW5kZXhlZChtYXliZUFzc29jaWF0aXZlKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGlzT3JkZXJlZChtYXliZU9yZGVyZWQpIHtcblx0ICAgIHJldHVybiAhIShtYXliZU9yZGVyZWQgJiYgbWF5YmVPcmRlcmVkW0lTX09SREVSRURfU0VOVElORUxdKTtcblx0ICB9XG5cdFxuXHQgIEl0ZXJhYmxlLmlzSXRlcmFibGUgPSBpc0l0ZXJhYmxlO1xuXHQgIEl0ZXJhYmxlLmlzS2V5ZWQgPSBpc0tleWVkO1xuXHQgIEl0ZXJhYmxlLmlzSW5kZXhlZCA9IGlzSW5kZXhlZDtcblx0ICBJdGVyYWJsZS5pc0Fzc29jaWF0aXZlID0gaXNBc3NvY2lhdGl2ZTtcblx0ICBJdGVyYWJsZS5pc09yZGVyZWQgPSBpc09yZGVyZWQ7XG5cdFxuXHQgIEl0ZXJhYmxlLktleWVkID0gS2V5ZWRJdGVyYWJsZTtcblx0ICBJdGVyYWJsZS5JbmRleGVkID0gSW5kZXhlZEl0ZXJhYmxlO1xuXHQgIEl0ZXJhYmxlLlNldCA9IFNldEl0ZXJhYmxlO1xuXHRcblx0XG5cdCAgdmFyIElTX0lURVJBQkxFX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfSVRFUkFCTEVfX0BAJztcblx0ICB2YXIgSVNfS0VZRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9LRVlFRF9fQEAnO1xuXHQgIHZhciBJU19JTkRFWEVEX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfSU5ERVhFRF9fQEAnO1xuXHQgIHZhciBJU19PUkRFUkVEX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfT1JERVJFRF9fQEAnO1xuXHRcblx0ICAvKiBnbG9iYWwgU3ltYm9sICovXG5cdFxuXHQgIHZhciBJVEVSQVRFX0tFWVMgPSAwO1xuXHQgIHZhciBJVEVSQVRFX1ZBTFVFUyA9IDE7XG5cdCAgdmFyIElURVJBVEVfRU5UUklFUyA9IDI7XG5cdFxuXHQgIHZhciBSRUFMX0lURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xuXHQgIHZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJztcblx0XG5cdCAgdmFyIElURVJBVE9SX1NZTUJPTCA9IFJFQUxfSVRFUkFUT1JfU1lNQk9MIHx8IEZBVVhfSVRFUkFUT1JfU1lNQk9MO1xuXHRcblx0XG5cdCAgZnVuY3Rpb24gSXRlcmF0b3IobmV4dCkge1xuXHQgICAgICB0aGlzLm5leHQgPSBuZXh0O1xuXHQgICAgfVxuXHRcblx0ICAgIEl0ZXJhdG9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gJ1tJdGVyYXRvcl0nO1xuXHQgICAgfTtcblx0XG5cdFxuXHQgIEl0ZXJhdG9yLktFWVMgPSBJVEVSQVRFX0tFWVM7XG5cdCAgSXRlcmF0b3IuVkFMVUVTID0gSVRFUkFURV9WQUxVRVM7XG5cdCAgSXRlcmF0b3IuRU5UUklFUyA9IElURVJBVEVfRU5UUklFUztcblx0XG5cdCAgSXRlcmF0b3IucHJvdG90eXBlLmluc3BlY3QgPVxuXHQgIEl0ZXJhdG9yLnByb3RvdHlwZS50b1NvdXJjZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTsgfVxuXHQgIEl0ZXJhdG9yLnByb3RvdHlwZVtJVEVSQVRPUl9TWU1CT0xdID0gZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIHRoaXM7XG5cdCAgfTtcblx0XG5cdFxuXHQgIGZ1bmN0aW9uIGl0ZXJhdG9yVmFsdWUodHlwZSwgaywgdiwgaXRlcmF0b3JSZXN1bHQpIHtcblx0ICAgIHZhciB2YWx1ZSA9IHR5cGUgPT09IDAgPyBrIDogdHlwZSA9PT0gMSA/IHYgOiBbaywgdl07XG5cdCAgICBpdGVyYXRvclJlc3VsdCA/IChpdGVyYXRvclJlc3VsdC52YWx1ZSA9IHZhbHVlKSA6IChpdGVyYXRvclJlc3VsdCA9IHtcblx0ICAgICAgdmFsdWU6IHZhbHVlLCBkb25lOiBmYWxzZVxuXHQgICAgfSk7XG5cdCAgICByZXR1cm4gaXRlcmF0b3JSZXN1bHQ7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBpdGVyYXRvckRvbmUoKSB7XG5cdCAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBoYXNJdGVyYXRvcihtYXliZUl0ZXJhYmxlKSB7XG5cdCAgICByZXR1cm4gISFnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gaXNJdGVyYXRvcihtYXliZUl0ZXJhdG9yKSB7XG5cdCAgICByZXR1cm4gbWF5YmVJdGVyYXRvciAmJiB0eXBlb2YgbWF5YmVJdGVyYXRvci5uZXh0ID09PSAnZnVuY3Rpb24nO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gZ2V0SXRlcmF0b3IoaXRlcmFibGUpIHtcblx0ICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihpdGVyYWJsZSk7XG5cdCAgICByZXR1cm4gaXRlcmF0b3JGbiAmJiBpdGVyYXRvckZuLmNhbGwoaXRlcmFibGUpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihpdGVyYWJsZSkge1xuXHQgICAgdmFyIGl0ZXJhdG9yRm4gPSBpdGVyYWJsZSAmJiAoXG5cdCAgICAgIChSRUFMX0lURVJBVE9SX1NZTUJPTCAmJiBpdGVyYWJsZVtSRUFMX0lURVJBVE9SX1NZTUJPTF0pIHx8XG5cdCAgICAgIGl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXVxuXHQgICAgKTtcblx0ICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICByZXR1cm4gaXRlcmF0b3JGbjtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG5cdCAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcic7XG5cdCAgfVxuXHRcblx0ICBjcmVhdGVDbGFzcyhTZXEsIEl0ZXJhYmxlKTtcblx0ICAgIGZ1bmN0aW9uIFNlcSh2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5U2VxdWVuY2UoKSA6XG5cdCAgICAgICAgaXNJdGVyYWJsZSh2YWx1ZSkgPyB2YWx1ZS50b1NlcSgpIDogc2VxRnJvbVZhbHVlKHZhbHVlKTtcblx0ICAgIH1cblx0XG5cdCAgICBTZXEub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG5cdCAgICAgIHJldHVybiBTZXEoYXJndW1lbnRzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU2VxLnByb3RvdHlwZS50b1NlcSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdFxuXHQgICAgU2VxLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdTZXEgeycsICd9Jyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFNlcS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgaWYgKCF0aGlzLl9jYWNoZSAmJiB0aGlzLl9faXRlcmF0ZVVuY2FjaGVkKSB7XG5cdCAgICAgICAgdGhpcy5fY2FjaGUgPSB0aGlzLmVudHJ5U2VxKCkudG9BcnJheSgpO1xuXHQgICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuX2NhY2hlLmxlbmd0aDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gYWJzdHJhY3QgX19pdGVyYXRlVW5jYWNoZWQoZm4sIHJldmVyc2UpXG5cdFxuXHQgICAgU2VxLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuXHQgICAgICByZXR1cm4gc2VxSXRlcmF0ZSh0aGlzLCBmbiwgcmV2ZXJzZSwgdHJ1ZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIGFic3RyYWN0IF9faXRlcmF0b3JVbmNhY2hlZCh0eXBlLCByZXZlcnNlKVxuXHRcblx0ICAgIFNlcS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcblx0ICAgICAgcmV0dXJuIHNlcUl0ZXJhdG9yKHRoaXMsIHR5cGUsIHJldmVyc2UsIHRydWUpO1xuXHQgICAgfTtcblx0XG5cdFxuXHRcblx0ICBjcmVhdGVDbGFzcyhLZXllZFNlcSwgU2VxKTtcblx0ICAgIGZ1bmN0aW9uIEtleWVkU2VxKHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0ICAgICAgICBlbXB0eVNlcXVlbmNlKCkudG9LZXllZFNlcSgpIDpcblx0ICAgICAgICBpc0l0ZXJhYmxlKHZhbHVlKSA/XG5cdCAgICAgICAgICAoaXNLZXllZCh2YWx1ZSkgPyB2YWx1ZS50b1NlcSgpIDogdmFsdWUuZnJvbUVudHJ5U2VxKCkpIDpcblx0ICAgICAgICAgIGtleWVkU2VxRnJvbVZhbHVlKHZhbHVlKTtcblx0ICAgIH1cblx0XG5cdCAgICBLZXllZFNlcS5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcblx0ICAgICAgcmV0dXJuIEtleWVkU2VxKGFyZ3VtZW50cyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIEtleWVkU2VxLnByb3RvdHlwZS50b0tleWVkU2VxID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0XG5cdCAgICBLZXllZFNlcS5wcm90b3R5cGUudG9TZXEgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHRcblx0XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKEluZGV4ZWRTZXEsIFNlcSk7XG5cdCAgICBmdW5jdGlvbiBJbmRleGVkU2VxKHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlTZXF1ZW5jZSgpIDpcblx0ICAgICAgICAhaXNJdGVyYWJsZSh2YWx1ZSkgPyBpbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSA6XG5cdCAgICAgICAgaXNLZXllZCh2YWx1ZSkgPyB2YWx1ZS5lbnRyeVNlcSgpIDogdmFsdWUudG9JbmRleGVkU2VxKCk7XG5cdCAgICB9XG5cdFxuXHQgICAgSW5kZXhlZFNlcS5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcblx0ICAgICAgcmV0dXJuIEluZGV4ZWRTZXEoYXJndW1lbnRzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgSW5kZXhlZFNlcS5wcm90b3R5cGUudG9JbmRleGVkU2VxID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfTtcblx0XG5cdCAgICBJbmRleGVkU2VxLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdTZXEgWycsICddJyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIEluZGV4ZWRTZXEucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG5cdCAgICAgIHJldHVybiBzZXFJdGVyYXRlKHRoaXMsIGZuLCByZXZlcnNlLCBmYWxzZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIEluZGV4ZWRTZXEucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG5cdCAgICAgIHJldHVybiBzZXFJdGVyYXRvcih0aGlzLCB0eXBlLCByZXZlcnNlLCBmYWxzZSk7XG5cdCAgICB9O1xuXHRcblx0XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKFNldFNlcSwgU2VxKTtcblx0ICAgIGZ1bmN0aW9uIFNldFNlcSh2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gKFxuXHQgICAgICAgIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eVNlcXVlbmNlKCkgOlxuXHQgICAgICAgICFpc0l0ZXJhYmxlKHZhbHVlKSA/IGluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpIDpcblx0ICAgICAgICBpc0tleWVkKHZhbHVlKSA/IHZhbHVlLmVudHJ5U2VxKCkgOiB2YWx1ZVxuXHQgICAgICApLnRvU2V0U2VxKCk7XG5cdCAgICB9XG5cdFxuXHQgICAgU2V0U2VxLm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuXHQgICAgICByZXR1cm4gU2V0U2VxKGFyZ3VtZW50cyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFNldFNlcS5wcm90b3R5cGUudG9TZXRTZXEgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHRcblx0XG5cdFxuXHQgIFNlcS5pc1NlcSA9IGlzU2VxO1xuXHQgIFNlcS5LZXllZCA9IEtleWVkU2VxO1xuXHQgIFNlcS5TZXQgPSBTZXRTZXE7XG5cdCAgU2VxLkluZGV4ZWQgPSBJbmRleGVkU2VxO1xuXHRcblx0ICB2YXIgSVNfU0VRX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfU0VRX19AQCc7XG5cdFxuXHQgIFNlcS5wcm90b3R5cGVbSVNfU0VRX1NFTlRJTkVMXSA9IHRydWU7XG5cdFxuXHRcblx0XG5cdCAgLy8gI3ByYWdtYSBSb290IFNlcXVlbmNlc1xuXHRcblx0ICBjcmVhdGVDbGFzcyhBcnJheVNlcSwgSW5kZXhlZFNlcSk7XG5cdCAgICBmdW5jdGlvbiBBcnJheVNlcShhcnJheSkge1xuXHQgICAgICB0aGlzLl9hcnJheSA9IGFycmF5O1xuXHQgICAgICB0aGlzLnNpemUgPSBhcnJheS5sZW5ndGg7XG5cdCAgICB9XG5cdFxuXHQgICAgQXJyYXlTZXEucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5oYXMoaW5kZXgpID8gdGhpcy5fYXJyYXlbd3JhcEluZGV4KHRoaXMsIGluZGV4KV0gOiBub3RTZXRWYWx1ZTtcblx0ICAgIH07XG5cdFxuXHQgICAgQXJyYXlTZXEucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG5cdCAgICAgIHZhciBhcnJheSA9IHRoaXMuX2FycmF5O1xuXHQgICAgICB2YXIgbWF4SW5kZXggPSBhcnJheS5sZW5ndGggLSAxO1xuXHQgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDw9IG1heEluZGV4OyBpaSsrKSB7XG5cdCAgICAgICAgaWYgKGZuKGFycmF5W3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldLCBpaSwgdGhpcykgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICByZXR1cm4gaWkgKyAxO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gaWk7XG5cdCAgICB9O1xuXHRcblx0ICAgIEFycmF5U2VxLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICB2YXIgYXJyYXkgPSB0aGlzLl9hcnJheTtcblx0ICAgICAgdmFyIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoIC0gMTtcblx0ICAgICAgdmFyIGlpID0gMDtcblx0ICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpIFxuXHQgICAgICAgIHtyZXR1cm4gaWkgPiBtYXhJbmRleCA/XG5cdCAgICAgICAgICBpdGVyYXRvckRvbmUoKSA6XG5cdCAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGlpLCBhcnJheVtyZXZlcnNlID8gbWF4SW5kZXggLSBpaSsrIDogaWkrK10pfVxuXHQgICAgICApO1xuXHQgICAgfTtcblx0XG5cdFxuXHRcblx0ICBjcmVhdGVDbGFzcyhPYmplY3RTZXEsIEtleWVkU2VxKTtcblx0ICAgIGZ1bmN0aW9uIE9iamVjdFNlcShvYmplY3QpIHtcblx0ICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXHQgICAgICB0aGlzLl9vYmplY3QgPSBvYmplY3Q7XG5cdCAgICAgIHRoaXMuX2tleXMgPSBrZXlzO1xuXHQgICAgICB0aGlzLnNpemUgPSBrZXlzLmxlbmd0aDtcblx0ICAgIH1cblx0XG5cdCAgICBPYmplY3RTZXEucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGtleSwgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgaWYgKG5vdFNldFZhbHVlICE9PSB1bmRlZmluZWQgJiYgIXRoaXMuaGFzKGtleSkpIHtcblx0ICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHRoaXMuX29iamVjdFtrZXldO1xuXHQgICAgfTtcblx0XG5cdCAgICBPYmplY3RTZXEucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGtleSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fb2JqZWN0Lmhhc093blByb3BlcnR5KGtleSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE9iamVjdFNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcblx0ICAgICAgdmFyIG9iamVjdCA9IHRoaXMuX29iamVjdDtcblx0ICAgICAgdmFyIGtleXMgPSB0aGlzLl9rZXlzO1xuXHQgICAgICB2YXIgbWF4SW5kZXggPSBrZXlzLmxlbmd0aCAtIDE7XG5cdCAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcblx0ICAgICAgICB2YXIga2V5ID0ga2V5c1tyZXZlcnNlID8gbWF4SW5kZXggLSBpaSA6IGlpXTtcblx0ICAgICAgICBpZiAoZm4ob2JqZWN0W2tleV0sIGtleSwgdGhpcykgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICByZXR1cm4gaWkgKyAxO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gaWk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE9iamVjdFNlcS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcblx0ICAgICAgdmFyIG9iamVjdCA9IHRoaXMuX29iamVjdDtcblx0ICAgICAgdmFyIGtleXMgPSB0aGlzLl9rZXlzO1xuXHQgICAgICB2YXIgbWF4SW5kZXggPSBrZXlzLmxlbmd0aCAtIDE7XG5cdCAgICAgIHZhciBpaSA9IDA7XG5cdCAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuXHQgICAgICAgIHZhciBrZXkgPSBrZXlzW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldO1xuXHQgICAgICAgIHJldHVybiBpaSsrID4gbWF4SW5kZXggP1xuXHQgICAgICAgICAgaXRlcmF0b3JEb25lKCkgOlxuXHQgICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBrZXksIG9iamVjdFtrZXldKTtcblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICBPYmplY3RTZXEucHJvdG90eXBlW0lTX09SREVSRURfU0VOVElORUxdID0gdHJ1ZTtcblx0XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKEl0ZXJhYmxlU2VxLCBJbmRleGVkU2VxKTtcblx0ICAgIGZ1bmN0aW9uIEl0ZXJhYmxlU2VxKGl0ZXJhYmxlKSB7XG5cdCAgICAgIHRoaXMuX2l0ZXJhYmxlID0gaXRlcmFibGU7XG5cdCAgICAgIHRoaXMuc2l6ZSA9IGl0ZXJhYmxlLmxlbmd0aCB8fCBpdGVyYWJsZS5zaXplO1xuXHQgICAgfVxuXHRcblx0ICAgIEl0ZXJhYmxlU2VxLnByb3RvdHlwZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG5cdCAgICAgIGlmIChyZXZlcnNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBpdGVyYWJsZSA9IHRoaXMuX2l0ZXJhYmxlO1xuXHQgICAgICB2YXIgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihpdGVyYWJsZSk7XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgaWYgKGlzSXRlcmF0b3IoaXRlcmF0b3IpKSB7XG5cdCAgICAgICAgdmFyIHN0ZXA7XG5cdCAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuXHQgICAgICAgICAgaWYgKGZuKHN0ZXAudmFsdWUsIGl0ZXJhdGlvbnMrKywgdGhpcykgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gaXRlcmF0aW9ucztcblx0ICAgIH07XG5cdFxuXHQgICAgSXRlcmFibGVTZXEucHJvdG90eXBlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcblx0ICAgICAgaWYgKHJldmVyc2UpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGl0ZXJhYmxlID0gdGhpcy5faXRlcmFibGU7XG5cdCAgICAgIHZhciBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKGl0ZXJhYmxlKTtcblx0ICAgICAgaWYgKCFpc0l0ZXJhdG9yKGl0ZXJhdG9yKSkge1xuXHQgICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoaXRlcmF0b3JEb25lKTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuXHQgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuXHQgICAgICAgIHJldHVybiBzdGVwLmRvbmUgPyBzdGVwIDogaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHN0ZXAudmFsdWUpO1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHRcblx0XG5cdCAgY3JlYXRlQ2xhc3MoSXRlcmF0b3JTZXEsIEluZGV4ZWRTZXEpO1xuXHQgICAgZnVuY3Rpb24gSXRlcmF0b3JTZXEoaXRlcmF0b3IpIHtcblx0ICAgICAgdGhpcy5faXRlcmF0b3IgPSBpdGVyYXRvcjtcblx0ICAgICAgdGhpcy5faXRlcmF0b3JDYWNoZSA9IFtdO1xuXHQgICAgfVxuXHRcblx0ICAgIEl0ZXJhdG9yU2VxLnByb3RvdHlwZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG5cdCAgICAgIGlmIChyZXZlcnNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXJhdG9yO1xuXHQgICAgICB2YXIgY2FjaGUgPSB0aGlzLl9pdGVyYXRvckNhY2hlO1xuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIHdoaWxlIChpdGVyYXRpb25zIDwgY2FjaGUubGVuZ3RoKSB7XG5cdCAgICAgICAgaWYgKGZuKGNhY2hlW2l0ZXJhdGlvbnNdLCBpdGVyYXRpb25zKyssIHRoaXMpID09PSBmYWxzZSkge1xuXHQgICAgICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHZhciBzdGVwO1xuXHQgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG5cdCAgICAgICAgdmFyIHZhbCA9IHN0ZXAudmFsdWU7XG5cdCAgICAgICAgY2FjaGVbaXRlcmF0aW9uc10gPSB2YWw7XG5cdCAgICAgICAgaWYgKGZuKHZhbCwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcblx0ICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gaXRlcmF0aW9ucztcblx0ICAgIH07XG5cdFxuXHQgICAgSXRlcmF0b3JTZXEucHJvdG90eXBlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcblx0ICAgICAgaWYgKHJldmVyc2UpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5faXRlcmF0b3I7XG5cdCAgICAgIHZhciBjYWNoZSA9IHRoaXMuX2l0ZXJhdG9yQ2FjaGU7XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG5cdCAgICAgICAgaWYgKGl0ZXJhdGlvbnMgPj0gY2FjaGUubGVuZ3RoKSB7XG5cdCAgICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcblx0ICAgICAgICAgIGlmIChzdGVwLmRvbmUpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBjYWNoZVtpdGVyYXRpb25zXSA9IHN0ZXAudmFsdWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMsIGNhY2hlW2l0ZXJhdGlvbnMrK10pO1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHRcblx0XG5cdFxuXHQgIC8vICMgcHJhZ21hIEhlbHBlciBmdW5jdGlvbnNcblx0XG5cdCAgZnVuY3Rpb24gaXNTZXEobWF5YmVTZXEpIHtcblx0ICAgIHJldHVybiAhIShtYXliZVNlcSAmJiBtYXliZVNlcVtJU19TRVFfU0VOVElORUxdKTtcblx0ICB9XG5cdFxuXHQgIHZhciBFTVBUWV9TRVE7XG5cdFxuXHQgIGZ1bmN0aW9uIGVtcHR5U2VxdWVuY2UoKSB7XG5cdCAgICByZXR1cm4gRU1QVFlfU0VRIHx8IChFTVBUWV9TRVEgPSBuZXcgQXJyYXlTZXEoW10pKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGtleWVkU2VxRnJvbVZhbHVlKHZhbHVlKSB7XG5cdCAgICB2YXIgc2VxID1cblx0ICAgICAgQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBuZXcgQXJyYXlTZXEodmFsdWUpLmZyb21FbnRyeVNlcSgpIDpcblx0ICAgICAgaXNJdGVyYXRvcih2YWx1ZSkgPyBuZXcgSXRlcmF0b3JTZXEodmFsdWUpLmZyb21FbnRyeVNlcSgpIDpcblx0ICAgICAgaGFzSXRlcmF0b3IodmFsdWUpID8gbmV3IEl0ZXJhYmxlU2VxKHZhbHVlKS5mcm9tRW50cnlTZXEoKSA6XG5cdCAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgPyBuZXcgT2JqZWN0U2VxKHZhbHVlKSA6XG5cdCAgICAgIHVuZGVmaW5lZDtcblx0ICAgIGlmICghc2VxKSB7XG5cdCAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG5cdCAgICAgICAgJ0V4cGVjdGVkIEFycmF5IG9yIGl0ZXJhYmxlIG9iamVjdCBvZiBbaywgdl0gZW50cmllcywgJytcblx0ICAgICAgICAnb3Iga2V5ZWQgb2JqZWN0OiAnICsgdmFsdWVcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBzZXE7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBpbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSB7XG5cdCAgICB2YXIgc2VxID0gbWF5YmVJbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKTtcblx0ICAgIGlmICghc2VxKSB7XG5cdCAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG5cdCAgICAgICAgJ0V4cGVjdGVkIEFycmF5IG9yIGl0ZXJhYmxlIG9iamVjdCBvZiB2YWx1ZXM6ICcgKyB2YWx1ZVxuXHQgICAgICApO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHNlcTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHNlcUZyb21WYWx1ZSh2YWx1ZSkge1xuXHQgICAgdmFyIHNlcSA9IG1heWJlSW5kZXhlZFNlcUZyb21WYWx1ZSh2YWx1ZSkgfHxcblx0ICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgbmV3IE9iamVjdFNlcSh2YWx1ZSkpO1xuXHQgICAgaWYgKCFzZXEpIHtcblx0ICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcblx0ICAgICAgICAnRXhwZWN0ZWQgQXJyYXkgb3IgaXRlcmFibGUgb2JqZWN0IG9mIHZhbHVlcywgb3Iga2V5ZWQgb2JqZWN0OiAnICsgdmFsdWVcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBzZXE7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBtYXliZUluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHtcblx0ICAgIHJldHVybiAoXG5cdCAgICAgIGlzQXJyYXlMaWtlKHZhbHVlKSA/IG5ldyBBcnJheVNlcSh2YWx1ZSkgOlxuXHQgICAgICBpc0l0ZXJhdG9yKHZhbHVlKSA/IG5ldyBJdGVyYXRvclNlcSh2YWx1ZSkgOlxuXHQgICAgICBoYXNJdGVyYXRvcih2YWx1ZSkgPyBuZXcgSXRlcmFibGVTZXEodmFsdWUpIDpcblx0ICAgICAgdW5kZWZpbmVkXG5cdCAgICApO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gc2VxSXRlcmF0ZShzZXEsIGZuLCByZXZlcnNlLCB1c2VLZXlzKSB7XG5cdCAgICB2YXIgY2FjaGUgPSBzZXEuX2NhY2hlO1xuXHQgICAgaWYgKGNhY2hlKSB7XG5cdCAgICAgIHZhciBtYXhJbmRleCA9IGNhY2hlLmxlbmd0aCAtIDE7XG5cdCAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcblx0ICAgICAgICB2YXIgZW50cnkgPSBjYWNoZVtyZXZlcnNlID8gbWF4SW5kZXggLSBpaSA6IGlpXTtcblx0ICAgICAgICBpZiAoZm4oZW50cnlbMV0sIHVzZUtleXMgPyBlbnRyeVswXSA6IGlpLCBzZXEpID09PSBmYWxzZSkge1xuXHQgICAgICAgICAgcmV0dXJuIGlpICsgMTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGlpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHNlcS5fX2l0ZXJhdGVVbmNhY2hlZChmbiwgcmV2ZXJzZSk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBzZXFJdGVyYXRvcihzZXEsIHR5cGUsIHJldmVyc2UsIHVzZUtleXMpIHtcblx0ICAgIHZhciBjYWNoZSA9IHNlcS5fY2FjaGU7XG5cdCAgICBpZiAoY2FjaGUpIHtcblx0ICAgICAgdmFyIG1heEluZGV4ID0gY2FjaGUubGVuZ3RoIC0gMTtcblx0ICAgICAgdmFyIGlpID0gMDtcblx0ICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG5cdCAgICAgICAgdmFyIGVudHJ5ID0gY2FjaGVbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV07XG5cdCAgICAgICAgcmV0dXJuIGlpKysgPiBtYXhJbmRleCA/XG5cdCAgICAgICAgICBpdGVyYXRvckRvbmUoKSA6XG5cdCAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIHVzZUtleXMgPyBlbnRyeVswXSA6IGlpIC0gMSwgZW50cnlbMV0pO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBzZXEuX19pdGVyYXRvclVuY2FjaGVkKHR5cGUsIHJldmVyc2UpO1xuXHQgIH1cblx0XG5cdCAgY3JlYXRlQ2xhc3MoQ29sbGVjdGlvbiwgSXRlcmFibGUpO1xuXHQgICAgZnVuY3Rpb24gQ29sbGVjdGlvbigpIHtcblx0ICAgICAgdGhyb3cgVHlwZUVycm9yKCdBYnN0cmFjdCcpO1xuXHQgICAgfVxuXHRcblx0XG5cdCAgY3JlYXRlQ2xhc3MoS2V5ZWRDb2xsZWN0aW9uLCBDb2xsZWN0aW9uKTtmdW5jdGlvbiBLZXllZENvbGxlY3Rpb24oKSB7fVxuXHRcblx0ICBjcmVhdGVDbGFzcyhJbmRleGVkQ29sbGVjdGlvbiwgQ29sbGVjdGlvbik7ZnVuY3Rpb24gSW5kZXhlZENvbGxlY3Rpb24oKSB7fVxuXHRcblx0ICBjcmVhdGVDbGFzcyhTZXRDb2xsZWN0aW9uLCBDb2xsZWN0aW9uKTtmdW5jdGlvbiBTZXRDb2xsZWN0aW9uKCkge31cblx0XG5cdFxuXHQgIENvbGxlY3Rpb24uS2V5ZWQgPSBLZXllZENvbGxlY3Rpb247XG5cdCAgQ29sbGVjdGlvbi5JbmRleGVkID0gSW5kZXhlZENvbGxlY3Rpb247XG5cdCAgQ29sbGVjdGlvbi5TZXQgPSBTZXRDb2xsZWN0aW9uO1xuXHRcblx0ICAvKipcblx0ICAgKiBBbiBleHRlbnNpb24gb2YgdGhlIFwic2FtZS12YWx1ZVwiIGFsZ29yaXRobSBhcyBbZGVzY3JpYmVkIGZvciB1c2UgYnkgRVM2IE1hcFxuXHQgICAqIGFuZCBTZXRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hcCNLZXlfZXF1YWxpdHkpXG5cdCAgICpcblx0ICAgKiBOYU4gaXMgY29uc2lkZXJlZCB0aGUgc2FtZSBhcyBOYU4sIGhvd2V2ZXIgLTAgYW5kIDAgYXJlIGNvbnNpZGVyZWQgdGhlIHNhbWVcblx0ICAgKiB2YWx1ZSwgd2hpY2ggaXMgZGlmZmVyZW50IGZyb20gdGhlIGFsZ29yaXRobSBkZXNjcmliZWQgYnlcblx0ICAgKiBbYE9iamVjdC5pc2BdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pcykuXG5cdCAgICpcblx0ICAgKiBUaGlzIGlzIGV4dGVuZGVkIGZ1cnRoZXIgdG8gYWxsb3cgT2JqZWN0cyB0byBkZXNjcmliZSB0aGUgdmFsdWVzIHRoZXlcblx0ICAgKiByZXByZXNlbnQsIGJ5IHdheSBvZiBgdmFsdWVPZmAgb3IgYGVxdWFsc2AgKGFuZCBgaGFzaENvZGVgKS5cblx0ICAgKlxuXHQgICAqIE5vdGU6IGJlY2F1c2Ugb2YgdGhpcyBleHRlbnNpb24sIHRoZSBrZXkgZXF1YWxpdHkgb2YgSW1tdXRhYmxlLk1hcCBhbmQgdGhlXG5cdCAgICogdmFsdWUgZXF1YWxpdHkgb2YgSW1tdXRhYmxlLlNldCB3aWxsIGRpZmZlciBmcm9tIEVTNiBNYXAgYW5kIFNldC5cblx0ICAgKlxuXHQgICAqICMjIyBEZWZpbmluZyBjdXN0b20gdmFsdWVzXG5cdCAgICpcblx0ICAgKiBUaGUgZWFzaWVzdCB3YXkgdG8gZGVzY3JpYmUgdGhlIHZhbHVlIGFuIG9iamVjdCByZXByZXNlbnRzIGlzIGJ5IGltcGxlbWVudGluZ1xuXHQgICAqIGB2YWx1ZU9mYC4gRm9yIGV4YW1wbGUsIGBEYXRlYCByZXByZXNlbnRzIGEgdmFsdWUgYnkgcmV0dXJuaW5nIGEgdW5peFxuXHQgICAqIHRpbWVzdGFtcCBmb3IgYHZhbHVlT2ZgOlxuXHQgICAqXG5cdCAgICogICAgIHZhciBkYXRlMSA9IG5ldyBEYXRlKDEyMzQ1Njc4OTAwMDApOyAvLyBGcmkgRmViIDEzIDIwMDkgLi4uXG5cdCAgICogICAgIHZhciBkYXRlMiA9IG5ldyBEYXRlKDEyMzQ1Njc4OTAwMDApO1xuXHQgICAqICAgICBkYXRlMS52YWx1ZU9mKCk7IC8vIDEyMzQ1Njc4OTAwMDBcblx0ICAgKiAgICAgYXNzZXJ0KCBkYXRlMSAhPT0gZGF0ZTIgKTtcblx0ICAgKiAgICAgYXNzZXJ0KCBJbW11dGFibGUuaXMoIGRhdGUxLCBkYXRlMiApICk7XG5cdCAgICpcblx0ICAgKiBOb3RlOiBvdmVycmlkaW5nIGB2YWx1ZU9mYCBtYXkgaGF2ZSBvdGhlciBpbXBsaWNhdGlvbnMgaWYgeW91IHVzZSB0aGlzIG9iamVjdFxuXHQgICAqIHdoZXJlIEphdmFTY3JpcHQgZXhwZWN0cyBhIHByaW1pdGl2ZSwgc3VjaCBhcyBpbXBsaWNpdCBzdHJpbmcgY29lcmNpb24uXG5cdCAgICpcblx0ICAgKiBGb3IgbW9yZSBjb21wbGV4IHR5cGVzLCBlc3BlY2lhbGx5IGNvbGxlY3Rpb25zLCBpbXBsZW1lbnRpbmcgYHZhbHVlT2ZgIG1heVxuXHQgICAqIG5vdCBiZSBwZXJmb3JtYW50LiBBbiBhbHRlcm5hdGl2ZSBpcyB0byBpbXBsZW1lbnQgYGVxdWFsc2AgYW5kIGBoYXNoQ29kZWAuXG5cdCAgICpcblx0ICAgKiBgZXF1YWxzYCB0YWtlcyBhbm90aGVyIG9iamVjdCwgcHJlc3VtYWJseSBvZiBzaW1pbGFyIHR5cGUsIGFuZCByZXR1cm5zIHRydWVcblx0ICAgKiBpZiB0aGUgaXQgaXMgZXF1YWwuIEVxdWFsaXR5IGlzIHN5bW1ldHJpY2FsLCBzbyB0aGUgc2FtZSByZXN1bHQgc2hvdWxkIGJlXG5cdCAgICogcmV0dXJuZWQgaWYgdGhpcyBhbmQgdGhlIGFyZ3VtZW50IGFyZSBmbGlwcGVkLlxuXHQgICAqXG5cdCAgICogICAgIGFzc2VydCggYS5lcXVhbHMoYikgPT09IGIuZXF1YWxzKGEpICk7XG5cdCAgICpcblx0ICAgKiBgaGFzaENvZGVgIHJldHVybnMgYSAzMmJpdCBpbnRlZ2VyIG51bWJlciByZXByZXNlbnRpbmcgdGhlIG9iamVjdCB3aGljaCB3aWxsXG5cdCAgICogYmUgdXNlZCB0byBkZXRlcm1pbmUgaG93IHRvIHN0b3JlIHRoZSB2YWx1ZSBvYmplY3QgaW4gYSBNYXAgb3IgU2V0LiBZb3UgbXVzdFxuXHQgICAqIHByb3ZpZGUgYm90aCBvciBuZWl0aGVyIG1ldGhvZHMsIG9uZSBtdXN0IG5vdCBleGlzdCB3aXRob3V0IHRoZSBvdGhlci5cblx0ICAgKlxuXHQgICAqIEFsc28sIGFuIGltcG9ydGFudCByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGVzZSBtZXRob2RzIG11c3QgYmUgdXBoZWxkOiBpZiB0d29cblx0ICAgKiB2YWx1ZXMgYXJlIGVxdWFsLCB0aGV5ICptdXN0KiByZXR1cm4gdGhlIHNhbWUgaGFzaENvZGUuIElmIHRoZSB2YWx1ZXMgYXJlIG5vdFxuXHQgICAqIGVxdWFsLCB0aGV5IG1pZ2h0IGhhdmUgdGhlIHNhbWUgaGFzaENvZGU7IHRoaXMgaXMgY2FsbGVkIGEgaGFzaCBjb2xsaXNpb24sXG5cdCAgICogYW5kIHdoaWxlIHVuZGVzaXJhYmxlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCBpdCBpcyBhY2NlcHRhYmxlLlxuXHQgICAqXG5cdCAgICogICAgIGlmIChhLmVxdWFscyhiKSkge1xuXHQgICAqICAgICAgIGFzc2VydCggYS5oYXNoQ29kZSgpID09PSBiLmhhc2hDb2RlKCkgKTtcblx0ICAgKiAgICAgfVxuXHQgICAqXG5cdCAgICogQWxsIEltbXV0YWJsZSBjb2xsZWN0aW9ucyBpbXBsZW1lbnQgYGVxdWFsc2AgYW5kIGBoYXNoQ29kZWAuXG5cdCAgICpcblx0ICAgKi9cblx0ICBmdW5jdGlvbiBpcyh2YWx1ZUEsIHZhbHVlQikge1xuXHQgICAgaWYgKHZhbHVlQSA9PT0gdmFsdWVCIHx8ICh2YWx1ZUEgIT09IHZhbHVlQSAmJiB2YWx1ZUIgIT09IHZhbHVlQikpIHtcblx0ICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9XG5cdCAgICBpZiAoIXZhbHVlQSB8fCAhdmFsdWVCKSB7XG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblx0ICAgIGlmICh0eXBlb2YgdmFsdWVBLnZhbHVlT2YgPT09ICdmdW5jdGlvbicgJiZcblx0ICAgICAgICB0eXBlb2YgdmFsdWVCLnZhbHVlT2YgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgdmFsdWVBID0gdmFsdWVBLnZhbHVlT2YoKTtcblx0ICAgICAgdmFsdWVCID0gdmFsdWVCLnZhbHVlT2YoKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0eXBlb2YgdmFsdWVBLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHQgICAgICB0eXBlb2YgdmFsdWVCLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyA/XG5cdCAgICAgICAgdmFsdWVBLmVxdWFscyh2YWx1ZUIpIDpcblx0ICAgICAgICB2YWx1ZUEgPT09IHZhbHVlQiB8fCAodmFsdWVBICE9PSB2YWx1ZUEgJiYgdmFsdWVCICE9PSB2YWx1ZUIpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gZnJvbUpTKGpzb24sIGNvbnZlcnRlcikge1xuXHQgICAgcmV0dXJuIGNvbnZlcnRlciA/XG5cdCAgICAgIGZyb21KU1dpdGgoY29udmVydGVyLCBqc29uLCAnJywgeycnOiBqc29ufSkgOlxuXHQgICAgICBmcm9tSlNEZWZhdWx0KGpzb24pO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gZnJvbUpTV2l0aChjb252ZXJ0ZXIsIGpzb24sIGtleSwgcGFyZW50SlNPTikge1xuXHQgICAgaWYgKEFycmF5LmlzQXJyYXkoanNvbikpIHtcblx0ICAgICAgcmV0dXJuIGNvbnZlcnRlci5jYWxsKHBhcmVudEpTT04sIGtleSwgSW5kZXhlZFNlcShqc29uKS5tYXAoZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gZnJvbUpTV2l0aChjb252ZXJ0ZXIsIHYsIGssIGpzb24pfSkpO1xuXHQgICAgfVxuXHQgICAgaWYgKGlzUGxhaW5PYmooanNvbikpIHtcblx0ICAgICAgcmV0dXJuIGNvbnZlcnRlci5jYWxsKHBhcmVudEpTT04sIGtleSwgS2V5ZWRTZXEoanNvbikubWFwKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIGZyb21KU1dpdGgoY29udmVydGVyLCB2LCBrLCBqc29uKX0pKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBqc29uO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gZnJvbUpTRGVmYXVsdChqc29uKSB7XG5cdCAgICBpZiAoQXJyYXkuaXNBcnJheShqc29uKSkge1xuXHQgICAgICByZXR1cm4gSW5kZXhlZFNlcShqc29uKS5tYXAoZnJvbUpTRGVmYXVsdCkudG9MaXN0KCk7XG5cdCAgICB9XG5cdCAgICBpZiAoaXNQbGFpbk9iaihqc29uKSkge1xuXHQgICAgICByZXR1cm4gS2V5ZWRTZXEoanNvbikubWFwKGZyb21KU0RlZmF1bHQpLnRvTWFwKCk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4ganNvbjtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGlzUGxhaW5PYmoodmFsdWUpIHtcblx0ICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xuXHQgIH1cblx0XG5cdCAgdmFyIE1hdGhfX2ltdWwgPVxuXHQgICAgdHlwZW9mIE1hdGguaW11bCA9PT0gJ2Z1bmN0aW9uJyAmJiBNYXRoLmltdWwoMHhmZmZmZmZmZiwgMikgPT09IC0yID9cblx0ICAgIE1hdGguaW11bCA6XG5cdCAgICBmdW5jdGlvbiBNYXRoX19pbXVsKGEsIGIpIHtcblx0ICAgICAgYSA9IGEgfCAwOyAvLyBpbnRcblx0ICAgICAgYiA9IGIgfCAwOyAvLyBpbnRcblx0ICAgICAgdmFyIGMgPSBhICYgMHhmZmZmO1xuXHQgICAgICB2YXIgZCA9IGIgJiAweGZmZmY7XG5cdCAgICAgIC8vIFNoaWZ0IGJ5IDAgZml4ZXMgdGhlIHNpZ24gb24gdGhlIGhpZ2ggcGFydC5cblx0ICAgICAgcmV0dXJuIChjICogZCkgKyAoKCgoYSA+Pj4gMTYpICogZCArIGMgKiAoYiA+Pj4gMTYpKSA8PCAxNikgPj4+IDApIHwgMDsgLy8gaW50XG5cdCAgICB9O1xuXHRcblx0ICAvLyB2OCBoYXMgYW4gb3B0aW1pemF0aW9uIGZvciBzdG9yaW5nIDMxLWJpdCBzaWduZWQgbnVtYmVycy5cblx0ICAvLyBWYWx1ZXMgd2hpY2ggaGF2ZSBlaXRoZXIgMDAgb3IgMTEgYXMgdGhlIGhpZ2ggb3JkZXIgYml0cyBxdWFsaWZ5LlxuXHQgIC8vIFRoaXMgZnVuY3Rpb24gZHJvcHMgdGhlIGhpZ2hlc3Qgb3JkZXIgYml0IGluIGEgc2lnbmVkIG51bWJlciwgbWFpbnRhaW5pbmdcblx0ICAvLyB0aGUgc2lnbiBiaXQuXG5cdCAgZnVuY3Rpb24gc21pKGkzMikge1xuXHQgICAgcmV0dXJuICgoaTMyID4+PiAxKSAmIDB4NDAwMDAwMDApIHwgKGkzMiAmIDB4QkZGRkZGRkYpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gaGFzaChvKSB7XG5cdCAgICBpZiAobyA9PT0gZmFsc2UgfHwgbyA9PT0gbnVsbCB8fCBvID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgcmV0dXJuIDA7XG5cdCAgICB9XG5cdCAgICBpZiAodHlwZW9mIG8udmFsdWVPZiA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICBvID0gby52YWx1ZU9mKCk7XG5cdCAgICAgIGlmIChvID09PSBmYWxzZSB8fCBvID09PSBudWxsIHx8IG8gPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHJldHVybiAwO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAobyA9PT0gdHJ1ZSkge1xuXHQgICAgICByZXR1cm4gMTtcblx0ICAgIH1cblx0ICAgIHZhciB0eXBlID0gdHlwZW9mIG87XG5cdCAgICBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcblx0ICAgICAgdmFyIGggPSBvIHwgMDtcblx0ICAgICAgaWYgKGggIT09IG8pIHtcblx0ICAgICAgICBoIF49IG8gKiAweEZGRkZGRkZGO1xuXHQgICAgICB9XG5cdCAgICAgIHdoaWxlIChvID4gMHhGRkZGRkZGRikge1xuXHQgICAgICAgIG8gLz0gMHhGRkZGRkZGRjtcblx0ICAgICAgICBoIF49IG87XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHNtaShoKTtcblx0ICAgIH1cblx0ICAgIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuXHQgICAgICByZXR1cm4gby5sZW5ndGggPiBTVFJJTkdfSEFTSF9DQUNIRV9NSU5fU1RSTEVOID8gY2FjaGVkSGFzaFN0cmluZyhvKSA6IGhhc2hTdHJpbmcobyk7XG5cdCAgICB9XG5cdCAgICBpZiAodHlwZW9mIG8uaGFzaENvZGUgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgcmV0dXJuIG8uaGFzaENvZGUoKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBoYXNoSlNPYmoobyk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBjYWNoZWRIYXNoU3RyaW5nKHN0cmluZykge1xuXHQgICAgdmFyIGhhc2ggPSBzdHJpbmdIYXNoQ2FjaGVbc3RyaW5nXTtcblx0ICAgIGlmIChoYXNoID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgaGFzaCA9IGhhc2hTdHJpbmcoc3RyaW5nKTtcblx0ICAgICAgaWYgKFNUUklOR19IQVNIX0NBQ0hFX1NJWkUgPT09IFNUUklOR19IQVNIX0NBQ0hFX01BWF9TSVpFKSB7XG5cdCAgICAgICAgU1RSSU5HX0hBU0hfQ0FDSEVfU0laRSA9IDA7XG5cdCAgICAgICAgc3RyaW5nSGFzaENhY2hlID0ge307XG5cdCAgICAgIH1cblx0ICAgICAgU1RSSU5HX0hBU0hfQ0FDSEVfU0laRSsrO1xuXHQgICAgICBzdHJpbmdIYXNoQ2FjaGVbc3RyaW5nXSA9IGhhc2g7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gaGFzaDtcblx0ICB9XG5cdFxuXHQgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2hhc2hpbmctc3RyaW5nc1xuXHQgIGZ1bmN0aW9uIGhhc2hTdHJpbmcoc3RyaW5nKSB7XG5cdCAgICAvLyBUaGlzIGlzIHRoZSBoYXNoIGZyb20gSlZNXG5cdCAgICAvLyBUaGUgaGFzaCBjb2RlIGZvciBhIHN0cmluZyBpcyBjb21wdXRlZCBhc1xuXHQgICAgLy8gc1swXSAqIDMxIF4gKG4gLSAxKSArIHNbMV0gKiAzMSBeIChuIC0gMikgKyAuLi4gKyBzW24gLSAxXSxcblx0ICAgIC8vIHdoZXJlIHNbaV0gaXMgdGhlIGl0aCBjaGFyYWN0ZXIgb2YgdGhlIHN0cmluZyBhbmQgbiBpcyB0aGUgbGVuZ3RoIG9mXG5cdCAgICAvLyB0aGUgc3RyaW5nLiBXZSBcIm1vZFwiIHRoZSByZXN1bHQgdG8gbWFrZSBpdCBiZXR3ZWVuIDAgKGluY2x1c2l2ZSkgYW5kIDJeMzFcblx0ICAgIC8vIChleGNsdXNpdmUpIGJ5IGRyb3BwaW5nIGhpZ2ggYml0cy5cblx0ICAgIHZhciBoYXNoID0gMDtcblx0ICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBzdHJpbmcubGVuZ3RoOyBpaSsrKSB7XG5cdCAgICAgIGhhc2ggPSAzMSAqIGhhc2ggKyBzdHJpbmcuY2hhckNvZGVBdChpaSkgfCAwO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHNtaShoYXNoKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGhhc2hKU09iaihvYmopIHtcblx0ICAgIHZhciBoYXNoID0gd2Vha01hcCAmJiB3ZWFrTWFwLmdldChvYmopO1xuXHQgICAgaWYgKGhhc2gpIHJldHVybiBoYXNoO1xuXHRcblx0ICAgIGhhc2ggPSBvYmpbVUlEX0hBU0hfS0VZXTtcblx0ICAgIGlmIChoYXNoKSByZXR1cm4gaGFzaDtcblx0XG5cdCAgICBpZiAoIWNhbkRlZmluZVByb3BlcnR5KSB7XG5cdCAgICAgIGhhc2ggPSBvYmoucHJvcGVydHlJc0VudW1lcmFibGUgJiYgb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlW1VJRF9IQVNIX0tFWV07XG5cdCAgICAgIGlmIChoYXNoKSByZXR1cm4gaGFzaDtcblx0XG5cdCAgICAgIGhhc2ggPSBnZXRJRU5vZGVIYXNoKG9iaik7XG5cdCAgICAgIGlmIChoYXNoKSByZXR1cm4gaGFzaDtcblx0ICAgIH1cblx0XG5cdCAgICBpZiAoT2JqZWN0LmlzRXh0ZW5zaWJsZSAmJiAhT2JqZWN0LmlzRXh0ZW5zaWJsZShvYmopKSB7XG5cdCAgICAgIHRocm93IG5ldyBFcnJvcignTm9uLWV4dGVuc2libGUgb2JqZWN0cyBhcmUgbm90IGFsbG93ZWQgYXMga2V5cy4nKTtcblx0ICAgIH1cblx0XG5cdCAgICBoYXNoID0gKytvYmpIYXNoVUlEO1xuXHQgICAgaWYgKG9iakhhc2hVSUQgJiAweDQwMDAwMDAwKSB7XG5cdCAgICAgIG9iakhhc2hVSUQgPSAwO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmICh3ZWFrTWFwKSB7XG5cdCAgICAgIHdlYWtNYXAuc2V0KG9iaiwgaGFzaCk7XG5cdCAgICB9IGVsc2UgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG5cdCAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIFVJRF9IQVNIX0tFWSwge1xuXHQgICAgICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG5cdCAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IGZhbHNlLFxuXHQgICAgICAgICd3cml0YWJsZSc6IGZhbHNlLFxuXHQgICAgICAgICd2YWx1ZSc6IGhhc2hcblx0ICAgICAgfSk7XG5cdCAgICB9IGVsc2UgaWYgKG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZSAmJlxuXHQgICAgICAgICAgICAgICBvYmoucHJvcGVydHlJc0VudW1lcmFibGUgPT09IG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUpIHtcblx0ICAgICAgLy8gU2luY2Ugd2UgY2FuJ3QgZGVmaW5lIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgb24gdGhlIG9iamVjdFxuXHQgICAgICAvLyB3ZSdsbCBoaWphY2sgb25lIG9mIHRoZSBsZXNzLXVzZWQgbm9uLWVudW1lcmFibGUgcHJvcGVydGllcyB0b1xuXHQgICAgICAvLyBzYXZlIG91ciBoYXNoIG9uIGl0LiBTaW5jZSB0aGlzIGlzIGEgZnVuY3Rpb24gaXQgd2lsbCBub3Qgc2hvdyB1cCBpblxuXHQgICAgICAvLyBgSlNPTi5zdHJpbmdpZnlgIHdoaWNoIGlzIHdoYXQgd2Ugd2FudC5cblx0ICAgICAgb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgIH07XG5cdCAgICAgIG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZVtVSURfSEFTSF9LRVldID0gaGFzaDtcblx0ICAgIH0gZWxzZSBpZiAob2JqLm5vZGVUeXBlKSB7XG5cdCAgICAgIC8vIEF0IHRoaXMgcG9pbnQgd2UgY291bGRuJ3QgZ2V0IHRoZSBJRSBgdW5pcXVlSURgIHRvIHVzZSBhcyBhIGhhc2hcblx0ICAgICAgLy8gYW5kIHdlIGNvdWxkbid0IHVzZSBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IHRvIGV4cGxvaXQgdGhlXG5cdCAgICAgIC8vIGRvbnRFbnVtIGJ1ZyBzbyB3ZSBzaW1wbHkgYWRkIHRoZSBgVUlEX0hBU0hfS0VZYCBvbiB0aGUgbm9kZVxuXHQgICAgICAvLyBpdHNlbGYuXG5cdCAgICAgIG9ialtVSURfSEFTSF9LRVldID0gaGFzaDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHNldCBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IG9uIG9iamVjdC4nKTtcblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gaGFzaDtcblx0ICB9XG5cdFxuXHQgIC8vIFRydWUgaWYgT2JqZWN0LmRlZmluZVByb3BlcnR5IHdvcmtzIGFzIGV4cGVjdGVkLiBJRTggZmFpbHMgdGhpcyB0ZXN0LlxuXHQgIHZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcblx0ICAgIHRyeSB7XG5cdCAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3gnLCB7fSk7XG5cdCAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICB9XG5cdCAgfSgpKTtcblx0XG5cdCAgLy8gSUUgaGFzIGEgYHVuaXF1ZUlEYCBwcm9wZXJ0eSBvbiBET00gbm9kZXMuIFdlIGNhbiBjb25zdHJ1Y3QgdGhlIGhhc2ggZnJvbSBpdFxuXHQgIC8vIGFuZCBhdm9pZCBtZW1vcnkgbGVha3MgZnJvbSB0aGUgSUUgY2xvbmVOb2RlIGJ1Zy5cblx0ICBmdW5jdGlvbiBnZXRJRU5vZGVIYXNoKG5vZGUpIHtcblx0ICAgIGlmIChub2RlICYmIG5vZGUubm9kZVR5cGUgPiAwKSB7XG5cdCAgICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuXHQgICAgICAgIGNhc2UgMTogLy8gRWxlbWVudFxuXHQgICAgICAgICAgcmV0dXJuIG5vZGUudW5pcXVlSUQ7XG5cdCAgICAgICAgY2FzZSA5OiAvLyBEb2N1bWVudFxuXHQgICAgICAgICAgcmV0dXJuIG5vZGUuZG9jdW1lbnRFbGVtZW50ICYmIG5vZGUuZG9jdW1lbnRFbGVtZW50LnVuaXF1ZUlEO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICAvLyBJZiBwb3NzaWJsZSwgdXNlIGEgV2Vha01hcC5cblx0ICB2YXIgd2Vha01hcCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIG5ldyBXZWFrTWFwKCk7XG5cdFxuXHQgIHZhciBvYmpIYXNoVUlEID0gMDtcblx0XG5cdCAgdmFyIFVJRF9IQVNIX0tFWSA9ICdfX2ltbXV0YWJsZWhhc2hfXyc7XG5cdCAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgIFVJRF9IQVNIX0tFWSA9IFN5bWJvbChVSURfSEFTSF9LRVkpO1xuXHQgIH1cblx0XG5cdCAgdmFyIFNUUklOR19IQVNIX0NBQ0hFX01JTl9TVFJMRU4gPSAxNjtcblx0ICB2YXIgU1RSSU5HX0hBU0hfQ0FDSEVfTUFYX1NJWkUgPSAyNTU7XG5cdCAgdmFyIFNUUklOR19IQVNIX0NBQ0hFX1NJWkUgPSAwO1xuXHQgIHZhciBzdHJpbmdIYXNoQ2FjaGUgPSB7fTtcblx0XG5cdCAgZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZXJyb3IpIHtcblx0ICAgIGlmICghY29uZGl0aW9uKSB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gYXNzZXJ0Tm90SW5maW5pdGUoc2l6ZSkge1xuXHQgICAgaW52YXJpYW50KFxuXHQgICAgICBzaXplICE9PSBJbmZpbml0eSxcblx0ICAgICAgJ0Nhbm5vdCBwZXJmb3JtIHRoaXMgYWN0aW9uIHdpdGggYW4gaW5maW5pdGUgc2l6ZS4nXG5cdCAgICApO1xuXHQgIH1cblx0XG5cdCAgY3JlYXRlQ2xhc3MoVG9LZXllZFNlcXVlbmNlLCBLZXllZFNlcSk7XG5cdCAgICBmdW5jdGlvbiBUb0tleWVkU2VxdWVuY2UoaW5kZXhlZCwgdXNlS2V5cykge1xuXHQgICAgICB0aGlzLl9pdGVyID0gaW5kZXhlZDtcblx0ICAgICAgdGhpcy5fdXNlS2V5cyA9IHVzZUtleXM7XG5cdCAgICAgIHRoaXMuc2l6ZSA9IGluZGV4ZWQuc2l6ZTtcblx0ICAgIH1cblx0XG5cdCAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGtleSwgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuZ2V0KGtleSwgbm90U2V0VmFsdWUpO1xuXHQgICAgfTtcblx0XG5cdCAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGtleSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5faXRlci5oYXMoa2V5KTtcblx0ICAgIH07XG5cdFxuXHQgICAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS52YWx1ZVNlcSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5faXRlci52YWx1ZVNlcSgpO1xuXHQgICAgfTtcblx0XG5cdCAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbigpIHt2YXIgdGhpcyQwID0gdGhpcztcblx0ICAgICAgdmFyIHJldmVyc2VkU2VxdWVuY2UgPSByZXZlcnNlRmFjdG9yeSh0aGlzLCB0cnVlKTtcblx0ICAgICAgaWYgKCF0aGlzLl91c2VLZXlzKSB7XG5cdCAgICAgICAgcmV2ZXJzZWRTZXF1ZW5jZS52YWx1ZVNlcSA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gdGhpcyQwLl9pdGVyLnRvU2VxKCkucmV2ZXJzZSgpfTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gcmV2ZXJzZWRTZXF1ZW5jZTtcblx0ICAgIH07XG5cdFxuXHQgICAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbihtYXBwZXIsIGNvbnRleHQpIHt2YXIgdGhpcyQwID0gdGhpcztcblx0ICAgICAgdmFyIG1hcHBlZFNlcXVlbmNlID0gbWFwRmFjdG9yeSh0aGlzLCBtYXBwZXIsIGNvbnRleHQpO1xuXHQgICAgICBpZiAoIXRoaXMuX3VzZUtleXMpIHtcblx0ICAgICAgICBtYXBwZWRTZXF1ZW5jZS52YWx1ZVNlcSA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gdGhpcyQwLl9pdGVyLnRvU2VxKCkubWFwKG1hcHBlciwgY29udGV4dCl9O1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBtYXBwZWRTZXF1ZW5jZTtcblx0ICAgIH07XG5cdFxuXHQgICAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICB2YXIgaWk7XG5cdCAgICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0ZShcblx0ICAgICAgICB0aGlzLl91c2VLZXlzID9cblx0ICAgICAgICAgIGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIGZuKHYsIGssIHRoaXMkMCl9IDpcblx0ICAgICAgICAgICgoaWkgPSByZXZlcnNlID8gcmVzb2x2ZVNpemUodGhpcykgOiAwKSxcblx0ICAgICAgICAgICAgZnVuY3Rpb24odiApIHtyZXR1cm4gZm4odiwgcmV2ZXJzZSA/IC0taWkgOiBpaSsrLCB0aGlzJDApfSksXG5cdCAgICAgICAgcmV2ZXJzZVxuXHQgICAgICApO1xuXHQgICAgfTtcblx0XG5cdCAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG5cdCAgICAgIGlmICh0aGlzLl91c2VLZXlzKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuXHQgICAgICB2YXIgaWkgPSByZXZlcnNlID8gcmVzb2x2ZVNpemUodGhpcykgOiAwO1xuXHQgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcblx0ICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcblx0ICAgICAgICByZXR1cm4gc3RlcC5kb25lID8gc3RlcCA6XG5cdCAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIHJldmVyc2UgPyAtLWlpIDogaWkrKywgc3RlcC52YWx1ZSwgc3RlcCk7XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZVtJU19PUkRFUkVEX1NFTlRJTkVMXSA9IHRydWU7XG5cdFxuXHRcblx0ICBjcmVhdGVDbGFzcyhUb0luZGV4ZWRTZXF1ZW5jZSwgSW5kZXhlZFNlcSk7XG5cdCAgICBmdW5jdGlvbiBUb0luZGV4ZWRTZXF1ZW5jZShpdGVyKSB7XG5cdCAgICAgIHRoaXMuX2l0ZXIgPSBpdGVyO1xuXHQgICAgICB0aGlzLnNpemUgPSBpdGVyLnNpemU7XG5cdCAgICB9XG5cdFxuXHQgICAgVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuY29udGFpbnModmFsdWUpO1xuXHQgICAgfTtcblx0XG5cdCAgICBUb0luZGV4ZWRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcblx0ICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuXHQgICAgICByZXR1cm4gdGhpcy5faXRlci5fX2l0ZXJhdGUoZnVuY3Rpb24odiApIHtyZXR1cm4gZm4odiwgaXRlcmF0aW9ucysrLCB0aGlzJDApfSwgcmV2ZXJzZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFRvSW5kZXhlZFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuXHQgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuXHQgICAgICAgIHJldHVybiBzdGVwLmRvbmUgPyBzdGVwIDpcblx0ICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzdGVwLnZhbHVlLCBzdGVwKVxuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHRcblx0XG5cdCAgY3JlYXRlQ2xhc3MoVG9TZXRTZXF1ZW5jZSwgU2V0U2VxKTtcblx0ICAgIGZ1bmN0aW9uIFRvU2V0U2VxdWVuY2UoaXRlcikge1xuXHQgICAgICB0aGlzLl9pdGVyID0gaXRlcjtcblx0ICAgICAgdGhpcy5zaXplID0gaXRlci5zaXplO1xuXHQgICAgfVxuXHRcblx0ICAgIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGtleSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5faXRlci5jb250YWlucyhrZXkpO1xuXHQgICAgfTtcblx0XG5cdCAgICBUb1NldFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICByZXR1cm4gdGhpcy5faXRlci5fX2l0ZXJhdGUoZnVuY3Rpb24odiApIHtyZXR1cm4gZm4odiwgdiwgdGhpcyQwKX0sIHJldmVyc2UpO1xuXHQgICAgfTtcblx0XG5cdCAgICBUb1NldFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuXHQgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcblx0ICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcblx0ICAgICAgICByZXR1cm4gc3RlcC5kb25lID8gc3RlcCA6XG5cdCAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIHN0ZXAudmFsdWUsIHN0ZXAudmFsdWUsIHN0ZXApO1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHRcblx0XG5cdCAgY3JlYXRlQ2xhc3MoRnJvbUVudHJpZXNTZXF1ZW5jZSwgS2V5ZWRTZXEpO1xuXHQgICAgZnVuY3Rpb24gRnJvbUVudHJpZXNTZXF1ZW5jZShlbnRyaWVzKSB7XG5cdCAgICAgIHRoaXMuX2l0ZXIgPSBlbnRyaWVzO1xuXHQgICAgICB0aGlzLnNpemUgPSBlbnRyaWVzLnNpemU7XG5cdCAgICB9XG5cdFxuXHQgICAgRnJvbUVudHJpZXNTZXF1ZW5jZS5wcm90b3R5cGUuZW50cnlTZXEgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIudG9TZXEoKTtcblx0ICAgIH07XG5cdFxuXHQgICAgRnJvbUVudHJpZXNTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcblx0ICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRlKGZ1bmN0aW9uKGVudHJ5ICkge1xuXHQgICAgICAgIC8vIENoZWNrIGlmIGVudHJ5IGV4aXN0cyBmaXJzdCBzbyBhcnJheSBhY2Nlc3MgZG9lc24ndCB0aHJvdyBmb3IgaG9sZXNcblx0ICAgICAgICAvLyBpbiB0aGUgcGFyZW50IGl0ZXJhdGlvbi5cblx0ICAgICAgICBpZiAoZW50cnkpIHtcblx0ICAgICAgICAgIHZhbGlkYXRlRW50cnkoZW50cnkpO1xuXHQgICAgICAgICAgcmV0dXJuIGZuKGVudHJ5WzFdLCBlbnRyeVswXSwgdGhpcyQwKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0sIHJldmVyc2UpO1xuXHQgICAgfTtcblx0XG5cdCAgICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuXHQgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcblx0ICAgICAgICB3aGlsZSAodHJ1ZSkge1xuXHQgICAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG5cdCAgICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBzdGVwO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcblx0ICAgICAgICAgIC8vIENoZWNrIGlmIGVudHJ5IGV4aXN0cyBmaXJzdCBzbyBhcnJheSBhY2Nlc3MgZG9lc24ndCB0aHJvdyBmb3IgaG9sZXNcblx0ICAgICAgICAgIC8vIGluIHRoZSBwYXJlbnQgaXRlcmF0aW9uLlxuXHQgICAgICAgICAgaWYgKGVudHJ5KSB7XG5cdCAgICAgICAgICAgIHZhbGlkYXRlRW50cnkoZW50cnkpO1xuXHQgICAgICAgICAgICByZXR1cm4gdHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTID8gc3RlcCA6XG5cdCAgICAgICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBlbnRyeVswXSwgZW50cnlbMV0sIHN0ZXApO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0XG5cdCAgVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlLmNhY2hlUmVzdWx0ID1cblx0ICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLmNhY2hlUmVzdWx0ID1cblx0ICBUb1NldFNlcXVlbmNlLnByb3RvdHlwZS5jYWNoZVJlc3VsdCA9XG5cdCAgRnJvbUVudHJpZXNTZXF1ZW5jZS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPVxuXHQgICAgY2FjaGVSZXN1bHRUaHJvdWdoO1xuXHRcblx0XG5cdCAgZnVuY3Rpb24gZmxpcEZhY3RvcnkoaXRlcmFibGUpIHtcblx0ICAgIHZhciBmbGlwU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuXHQgICAgZmxpcFNlcXVlbmNlLl9pdGVyID0gaXRlcmFibGU7XG5cdCAgICBmbGlwU2VxdWVuY2Uuc2l6ZSA9IGl0ZXJhYmxlLnNpemU7XG5cdCAgICBmbGlwU2VxdWVuY2UuZmxpcCA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGV9O1xuXHQgICAgZmxpcFNlcXVlbmNlLnJldmVyc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciByZXZlcnNlZFNlcXVlbmNlID0gaXRlcmFibGUucmV2ZXJzZS5hcHBseSh0aGlzKTsgLy8gc3VwZXIucmV2ZXJzZSgpXG5cdCAgICAgIHJldmVyc2VkU2VxdWVuY2UuZmxpcCA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGUucmV2ZXJzZSgpfTtcblx0ICAgICAgcmV0dXJuIHJldmVyc2VkU2VxdWVuY2U7XG5cdCAgICB9O1xuXHQgICAgZmxpcFNlcXVlbmNlLmhhcyA9IGZ1bmN0aW9uKGtleSApIHtyZXR1cm4gaXRlcmFibGUuY29udGFpbnMoa2V5KX07XG5cdCAgICBmbGlwU2VxdWVuY2UuY29udGFpbnMgPSBmdW5jdGlvbihrZXkgKSB7cmV0dXJuIGl0ZXJhYmxlLmhhcyhrZXkpfTtcblx0ICAgIGZsaXBTZXF1ZW5jZS5jYWNoZVJlc3VsdCA9IGNhY2hlUmVzdWx0VGhyb3VnaDtcblx0ICAgIGZsaXBTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICByZXR1cm4gaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIGZuKGssIHYsIHRoaXMkMCkgIT09IGZhbHNlfSwgcmV2ZXJzZSk7XG5cdCAgICB9XG5cdCAgICBmbGlwU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICBpZiAodHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTKSB7XG5cdCAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcblx0ICAgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcblx0ICAgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuXHQgICAgICAgICAgaWYgKCFzdGVwLmRvbmUpIHtcblx0ICAgICAgICAgICAgdmFyIGsgPSBzdGVwLnZhbHVlWzBdO1xuXHQgICAgICAgICAgICBzdGVwLnZhbHVlWzBdID0gc3RlcC52YWx1ZVsxXTtcblx0ICAgICAgICAgICAgc3RlcC52YWx1ZVsxXSA9IGs7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICByZXR1cm4gc3RlcDtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gaXRlcmFibGUuX19pdGVyYXRvcihcblx0ICAgICAgICB0eXBlID09PSBJVEVSQVRFX1ZBTFVFUyA/IElURVJBVEVfS0VZUyA6IElURVJBVEVfVkFMVUVTLFxuXHQgICAgICAgIHJldmVyc2Vcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBmbGlwU2VxdWVuY2U7XG5cdCAgfVxuXHRcblx0XG5cdCAgZnVuY3Rpb24gbWFwRmFjdG9yeShpdGVyYWJsZSwgbWFwcGVyLCBjb250ZXh0KSB7XG5cdCAgICB2YXIgbWFwcGVkU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuXHQgICAgbWFwcGVkU2VxdWVuY2Uuc2l6ZSA9IGl0ZXJhYmxlLnNpemU7XG5cdCAgICBtYXBwZWRTZXF1ZW5jZS5oYXMgPSBmdW5jdGlvbihrZXkgKSB7cmV0dXJuIGl0ZXJhYmxlLmhhcyhrZXkpfTtcblx0ICAgIG1hcHBlZFNlcXVlbmNlLmdldCA9IGZ1bmN0aW9uKGtleSwgbm90U2V0VmFsdWUpICB7XG5cdCAgICAgIHZhciB2ID0gaXRlcmFibGUuZ2V0KGtleSwgTk9UX1NFVCk7XG5cdCAgICAgIHJldHVybiB2ID09PSBOT1RfU0VUID9cblx0ICAgICAgICBub3RTZXRWYWx1ZSA6XG5cdCAgICAgICAgbWFwcGVyLmNhbGwoY29udGV4dCwgdiwga2V5LCBpdGVyYWJsZSk7XG5cdCAgICB9O1xuXHQgICAgbWFwcGVkU2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcblx0ICAgICAgcmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0ZShcblx0ICAgICAgICBmdW5jdGlvbih2LCBrLCBjKSAge3JldHVybiBmbihtYXBwZXIuY2FsbChjb250ZXh0LCB2LCBrLCBjKSwgaywgdGhpcyQwKSAhPT0gZmFsc2V9LFxuXHQgICAgICAgIHJldmVyc2Vcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICAgIG1hcHBlZFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uICh0eXBlLCByZXZlcnNlKSB7XG5cdCAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCByZXZlcnNlKTtcblx0ICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG5cdCAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG5cdCAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuXHQgICAgICAgICAgcmV0dXJuIHN0ZXA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG5cdCAgICAgICAgdmFyIGtleSA9IGVudHJ5WzBdO1xuXHQgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKFxuXHQgICAgICAgICAgdHlwZSxcblx0ICAgICAgICAgIGtleSxcblx0ICAgICAgICAgIG1hcHBlci5jYWxsKGNvbnRleHQsIGVudHJ5WzFdLCBrZXksIGl0ZXJhYmxlKSxcblx0ICAgICAgICAgIHN0ZXBcblx0ICAgICAgICApO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBtYXBwZWRTZXF1ZW5jZTtcblx0ICB9XG5cdFxuXHRcblx0ICBmdW5jdGlvbiByZXZlcnNlRmFjdG9yeShpdGVyYWJsZSwgdXNlS2V5cykge1xuXHQgICAgdmFyIHJldmVyc2VkU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuXHQgICAgcmV2ZXJzZWRTZXF1ZW5jZS5faXRlciA9IGl0ZXJhYmxlO1xuXHQgICAgcmV2ZXJzZWRTZXF1ZW5jZS5zaXplID0gaXRlcmFibGUuc2l6ZTtcblx0ICAgIHJldmVyc2VkU2VxdWVuY2UucmV2ZXJzZSA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGV9O1xuXHQgICAgaWYgKGl0ZXJhYmxlLmZsaXApIHtcblx0ICAgICAgcmV2ZXJzZWRTZXF1ZW5jZS5mbGlwID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBmbGlwU2VxdWVuY2UgPSBmbGlwRmFjdG9yeShpdGVyYWJsZSk7XG5cdCAgICAgICAgZmxpcFNlcXVlbmNlLnJldmVyc2UgPSBmdW5jdGlvbigpICB7cmV0dXJuIGl0ZXJhYmxlLmZsaXAoKX07XG5cdCAgICAgICAgcmV0dXJuIGZsaXBTZXF1ZW5jZTtcblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICAgIHJldmVyc2VkU2VxdWVuY2UuZ2V0ID0gZnVuY3Rpb24oa2V5LCBub3RTZXRWYWx1ZSkgXG5cdCAgICAgIHtyZXR1cm4gaXRlcmFibGUuZ2V0KHVzZUtleXMgPyBrZXkgOiAtMSAtIGtleSwgbm90U2V0VmFsdWUpfTtcblx0ICAgIHJldmVyc2VkU2VxdWVuY2UuaGFzID0gZnVuY3Rpb24oa2V5IClcblx0ICAgICAge3JldHVybiBpdGVyYWJsZS5oYXModXNlS2V5cyA/IGtleSA6IC0xIC0ga2V5KX07XG5cdCAgICByZXZlcnNlZFNlcXVlbmNlLmNvbnRhaW5zID0gZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIGl0ZXJhYmxlLmNvbnRhaW5zKHZhbHVlKX07XG5cdCAgICByZXZlcnNlZFNlcXVlbmNlLmNhY2hlUmVzdWx0ID0gY2FjaGVSZXN1bHRUaHJvdWdoO1xuXHQgICAgcmV2ZXJzZWRTZXF1ZW5jZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcblx0ICAgICAgcmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge3JldHVybiBmbih2LCBrLCB0aGlzJDApfSwgIXJldmVyc2UpO1xuXHQgICAgfTtcblx0ICAgIHJldmVyc2VkU2VxdWVuY2UuX19pdGVyYXRvciA9XG5cdCAgICAgIGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpICB7cmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0b3IodHlwZSwgIXJldmVyc2UpfTtcblx0ICAgIHJldHVybiByZXZlcnNlZFNlcXVlbmNlO1xuXHQgIH1cblx0XG5cdFxuXHQgIGZ1bmN0aW9uIGZpbHRlckZhY3RvcnkoaXRlcmFibGUsIHByZWRpY2F0ZSwgY29udGV4dCwgdXNlS2V5cykge1xuXHQgICAgdmFyIGZpbHRlclNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcblx0ICAgIGlmICh1c2VLZXlzKSB7XG5cdCAgICAgIGZpbHRlclNlcXVlbmNlLmhhcyA9IGZ1bmN0aW9uKGtleSApIHtcblx0ICAgICAgICB2YXIgdiA9IGl0ZXJhYmxlLmdldChrZXksIE5PVF9TRVQpO1xuXHQgICAgICAgIHJldHVybiB2ICE9PSBOT1RfU0VUICYmICEhcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwga2V5LCBpdGVyYWJsZSk7XG5cdCAgICAgIH07XG5cdCAgICAgIGZpbHRlclNlcXVlbmNlLmdldCA9IGZ1bmN0aW9uKGtleSwgbm90U2V0VmFsdWUpICB7XG5cdCAgICAgICAgdmFyIHYgPSBpdGVyYWJsZS5nZXQoa2V5LCBOT1RfU0VUKTtcblx0ICAgICAgICByZXR1cm4gdiAhPT0gTk9UX1NFVCAmJiBwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrZXksIGl0ZXJhYmxlKSA/XG5cdCAgICAgICAgICB2IDogbm90U2V0VmFsdWU7XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICBmaWx0ZXJTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrLCBjKSAge1xuXHQgICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuXHQgICAgICAgICAgaXRlcmF0aW9ucysrO1xuXHQgICAgICAgICAgcmV0dXJuIGZuKHYsIHVzZUtleXMgPyBrIDogaXRlcmF0aW9ucyAtIDEsIHRoaXMkMCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9LCByZXZlcnNlKTtcblx0ICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG5cdCAgICB9O1xuXHQgICAgZmlsdGVyU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24gKHR5cGUsIHJldmVyc2UpIHtcblx0ICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuXHQgICAgICAgIHdoaWxlICh0cnVlKSB7XG5cdCAgICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcblx0ICAgICAgICAgIGlmIChzdGVwLmRvbmUpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuXHQgICAgICAgICAgdmFyIGtleSA9IGVudHJ5WzBdO1xuXHQgICAgICAgICAgdmFyIHZhbHVlID0gZW50cnlbMV07XG5cdCAgICAgICAgICBpZiAocHJlZGljYXRlLmNhbGwoY29udGV4dCwgdmFsdWUsIGtleSwgaXRlcmFibGUpKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIHVzZUtleXMgPyBrZXkgOiBpdGVyYXRpb25zKyssIHZhbHVlLCBzdGVwKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGZpbHRlclNlcXVlbmNlO1xuXHQgIH1cblx0XG5cdFxuXHQgIGZ1bmN0aW9uIGNvdW50QnlGYWN0b3J5KGl0ZXJhYmxlLCBncm91cGVyLCBjb250ZXh0KSB7XG5cdCAgICB2YXIgZ3JvdXBzID0gTWFwKCkuYXNNdXRhYmxlKCk7XG5cdCAgICBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtcblx0ICAgICAgZ3JvdXBzLnVwZGF0ZShcblx0ICAgICAgICBncm91cGVyLmNhbGwoY29udGV4dCwgdiwgaywgaXRlcmFibGUpLFxuXHQgICAgICAgIDAsXG5cdCAgICAgICAgZnVuY3Rpb24oYSApIHtyZXR1cm4gYSArIDF9XG5cdCAgICAgICk7XG5cdCAgICB9KTtcblx0ICAgIHJldHVybiBncm91cHMuYXNJbW11dGFibGUoKTtcblx0ICB9XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBncm91cEJ5RmFjdG9yeShpdGVyYWJsZSwgZ3JvdXBlciwgY29udGV4dCkge1xuXHQgICAgdmFyIGlzS2V5ZWRJdGVyID0gaXNLZXllZChpdGVyYWJsZSk7XG5cdCAgICB2YXIgZ3JvdXBzID0gKGlzT3JkZXJlZChpdGVyYWJsZSkgPyBPcmRlcmVkTWFwKCkgOiBNYXAoKSkuYXNNdXRhYmxlKCk7XG5cdCAgICBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtcblx0ICAgICAgZ3JvdXBzLnVwZGF0ZShcblx0ICAgICAgICBncm91cGVyLmNhbGwoY29udGV4dCwgdiwgaywgaXRlcmFibGUpLFxuXHQgICAgICAgIGZ1bmN0aW9uKGEgKSB7cmV0dXJuIChhID0gYSB8fCBbXSwgYS5wdXNoKGlzS2V5ZWRJdGVyID8gW2ssIHZdIDogdiksIGEpfVxuXHQgICAgICApO1xuXHQgICAgfSk7XG5cdCAgICB2YXIgY29lcmNlID0gaXRlcmFibGVDbGFzcyhpdGVyYWJsZSk7XG5cdCAgICByZXR1cm4gZ3JvdXBzLm1hcChmdW5jdGlvbihhcnIgKSB7cmV0dXJuIHJlaWZ5KGl0ZXJhYmxlLCBjb2VyY2UoYXJyKSl9KTtcblx0ICB9XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBzbGljZUZhY3RvcnkoaXRlcmFibGUsIGJlZ2luLCBlbmQsIHVzZUtleXMpIHtcblx0ICAgIHZhciBvcmlnaW5hbFNpemUgPSBpdGVyYWJsZS5zaXplO1xuXHRcblx0ICAgIGlmICh3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIG9yaWdpbmFsU2l6ZSkpIHtcblx0ICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciByZXNvbHZlZEJlZ2luID0gcmVzb2x2ZUJlZ2luKGJlZ2luLCBvcmlnaW5hbFNpemUpO1xuXHQgICAgdmFyIHJlc29sdmVkRW5kID0gcmVzb2x2ZUVuZChlbmQsIG9yaWdpbmFsU2l6ZSk7XG5cdFxuXHQgICAgLy8gYmVnaW4gb3IgZW5kIHdpbGwgYmUgTmFOIGlmIHRoZXkgd2VyZSBwcm92aWRlZCBhcyBuZWdhdGl2ZSBudW1iZXJzIGFuZFxuXHQgICAgLy8gdGhpcyBpdGVyYWJsZSdzIHNpemUgaXMgdW5rbm93bi4gSW4gdGhhdCBjYXNlLCBjYWNoZSBmaXJzdCBzbyB0aGVyZSBpc1xuXHQgICAgLy8gYSBrbm93biBzaXplLlxuXHQgICAgaWYgKHJlc29sdmVkQmVnaW4gIT09IHJlc29sdmVkQmVnaW4gfHwgcmVzb2x2ZWRFbmQgIT09IHJlc29sdmVkRW5kKSB7XG5cdCAgICAgIHJldHVybiBzbGljZUZhY3RvcnkoaXRlcmFibGUudG9TZXEoKS5jYWNoZVJlc3VsdCgpLCBiZWdpbiwgZW5kLCB1c2VLZXlzKTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgc2xpY2VTaXplID0gcmVzb2x2ZWRFbmQgLSByZXNvbHZlZEJlZ2luO1xuXHQgICAgaWYgKHNsaWNlU2l6ZSA8IDApIHtcblx0ICAgICAgc2xpY2VTaXplID0gMDtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgc2xpY2VTZXEgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuXHRcblx0ICAgIHNsaWNlU2VxLnNpemUgPSBzbGljZVNpemUgPT09IDAgPyBzbGljZVNpemUgOiBpdGVyYWJsZS5zaXplICYmIHNsaWNlU2l6ZSB8fCB1bmRlZmluZWQ7XG5cdFxuXHQgICAgaWYgKCF1c2VLZXlzICYmIGlzU2VxKGl0ZXJhYmxlKSAmJiBzbGljZVNpemUgPj0gMCkge1xuXHQgICAgICBzbGljZVNlcS5nZXQgPSBmdW5jdGlvbiAoaW5kZXgsIG5vdFNldFZhbHVlKSB7XG5cdCAgICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuXHQgICAgICAgIHJldHVybiBpbmRleCA+PSAwICYmIGluZGV4IDwgc2xpY2VTaXplID9cblx0ICAgICAgICAgIGl0ZXJhYmxlLmdldChpbmRleCArIHJlc29sdmVkQmVnaW4sIG5vdFNldFZhbHVlKSA6XG5cdCAgICAgICAgICBub3RTZXRWYWx1ZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIHNsaWNlU2VxLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcblx0ICAgICAgaWYgKHNsaWNlU2l6ZSA9PT0gMCkge1xuXHQgICAgICAgIHJldHVybiAwO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChyZXZlcnNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBza2lwcGVkID0gMDtcblx0ICAgICAgdmFyIGlzU2tpcHBpbmcgPSB0cnVlO1xuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge1xuXHQgICAgICAgIGlmICghKGlzU2tpcHBpbmcgJiYgKGlzU2tpcHBpbmcgPSBza2lwcGVkKysgPCByZXNvbHZlZEJlZ2luKSkpIHtcblx0ICAgICAgICAgIGl0ZXJhdGlvbnMrKztcblx0ICAgICAgICAgIHJldHVybiBmbih2LCB1c2VLZXlzID8gayA6IGl0ZXJhdGlvbnMgLSAxLCB0aGlzJDApICE9PSBmYWxzZSAmJlxuXHQgICAgICAgICAgICAgICAgIGl0ZXJhdGlvbnMgIT09IHNsaWNlU2l6ZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgICByZXR1cm4gaXRlcmF0aW9ucztcblx0ICAgIH07XG5cdFxuXHQgICAgc2xpY2VTZXEuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICBpZiAoc2xpY2VTaXplICYmIHJldmVyc2UpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG5cdCAgICAgIH1cblx0ICAgICAgLy8gRG9uJ3QgYm90aGVyIGluc3RhbnRpYXRpbmcgcGFyZW50IGl0ZXJhdG9yIGlmIHRha2luZyAwLlxuXHQgICAgICB2YXIgaXRlcmF0b3IgPSBzbGljZVNpemUgJiYgaXRlcmFibGUuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcblx0ICAgICAgdmFyIHNraXBwZWQgPSAwO1xuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuXHQgICAgICAgIHdoaWxlIChza2lwcGVkKysgIT09IHJlc29sdmVkQmVnaW4pIHtcblx0ICAgICAgICAgIGl0ZXJhdG9yLm5leHQoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKCsraXRlcmF0aW9ucyA+IHNsaWNlU2l6ZSkge1xuXHQgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcblx0ICAgICAgICBpZiAodXNlS2V5cyB8fCB0eXBlID09PSBJVEVSQVRFX1ZBTFVFUykge1xuXHQgICAgICAgICAgcmV0dXJuIHN0ZXA7XG5cdCAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBJVEVSQVRFX0tFWVMpIHtcblx0ICAgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMgLSAxLCB1bmRlZmluZWQsIHN0ZXApO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zIC0gMSwgc3RlcC52YWx1ZVsxXSwgc3RlcCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gc2xpY2VTZXE7XG5cdCAgfVxuXHRcblx0XG5cdCAgZnVuY3Rpb24gdGFrZVdoaWxlRmFjdG9yeShpdGVyYWJsZSwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG5cdCAgICB2YXIgdGFrZVNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcblx0ICAgIHRha2VTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG5cdCAgICAgIGlmIChyZXZlcnNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpIFxuXHQgICAgICAgIHtyZXR1cm4gcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgYykgJiYgKytpdGVyYXRpb25zICYmIGZuKHYsIGssIHRoaXMkMCl9XG5cdCAgICAgICk7XG5cdCAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuXHQgICAgfTtcblx0ICAgIHRha2VTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG5cdCAgICAgIGlmIChyZXZlcnNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCByZXZlcnNlKTtcblx0ICAgICAgdmFyIGl0ZXJhdGluZyA9IHRydWU7XG5cdCAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuXHQgICAgICAgIGlmICghaXRlcmF0aW5nKSB7XG5cdCAgICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuXHQgICAgICAgIGlmIChzdGVwLmRvbmUpIHtcblx0ICAgICAgICAgIHJldHVybiBzdGVwO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuXHQgICAgICAgIHZhciBrID0gZW50cnlbMF07XG5cdCAgICAgICAgdmFyIHYgPSBlbnRyeVsxXTtcblx0ICAgICAgICBpZiAoIXByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIHRoaXMkMCkpIHtcblx0ICAgICAgICAgIGl0ZXJhdGluZyA9IGZhbHNlO1xuXHQgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTID8gc3RlcCA6XG5cdCAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGssIHYsIHN0ZXApO1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gdGFrZVNlcXVlbmNlO1xuXHQgIH1cblx0XG5cdFxuXHQgIGZ1bmN0aW9uIHNraXBXaGlsZUZhY3RvcnkoaXRlcmFibGUsIHByZWRpY2F0ZSwgY29udGV4dCwgdXNlS2V5cykge1xuXHQgICAgdmFyIHNraXBTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG5cdCAgICBza2lwU2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcblx0ICAgICAgaWYgKHJldmVyc2UpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGlzU2tpcHBpbmcgPSB0cnVlO1xuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrLCBjKSAge1xuXHQgICAgICAgIGlmICghKGlzU2tpcHBpbmcgJiYgKGlzU2tpcHBpbmcgPSBwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkpKSB7XG5cdCAgICAgICAgICBpdGVyYXRpb25zKys7XG5cdCAgICAgICAgICByZXR1cm4gZm4odiwgdXNlS2V5cyA/IGsgOiBpdGVyYXRpb25zIC0gMSwgdGhpcyQwKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgICByZXR1cm4gaXRlcmF0aW9ucztcblx0ICAgIH07XG5cdCAgICBza2lwU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICBpZiAocmV2ZXJzZSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG5cdCAgICAgIHZhciBza2lwcGluZyA9IHRydWU7XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG5cdCAgICAgICAgdmFyIHN0ZXAsIGssIHY7XG5cdCAgICAgICAgZG8ge1xuXHQgICAgICAgICAgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcblx0ICAgICAgICAgIGlmIChzdGVwLmRvbmUpIHtcblx0ICAgICAgICAgICAgaWYgKHVzZUtleXMgfHwgdHlwZSA9PT0gSVRFUkFURV9WQUxVRVMpIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gc3RlcDtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBJVEVSQVRFX0tFWVMpIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHVuZGVmaW5lZCwgc3RlcCk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzdGVwLnZhbHVlWzFdLCBzdGVwKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcblx0ICAgICAgICAgIGsgPSBlbnRyeVswXTtcblx0ICAgICAgICAgIHYgPSBlbnRyeVsxXTtcblx0ICAgICAgICAgIHNraXBwaW5nICYmIChza2lwcGluZyA9IHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIHRoaXMkMCkpO1xuXHQgICAgICAgIH0gd2hpbGUgKHNraXBwaW5nKTtcblx0ICAgICAgICByZXR1cm4gdHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTID8gc3RlcCA6XG5cdCAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGssIHYsIHN0ZXApO1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gc2tpcFNlcXVlbmNlO1xuXHQgIH1cblx0XG5cdFxuXHQgIGZ1bmN0aW9uIGNvbmNhdEZhY3RvcnkoaXRlcmFibGUsIHZhbHVlcykge1xuXHQgICAgdmFyIGlzS2V5ZWRJdGVyYWJsZSA9IGlzS2V5ZWQoaXRlcmFibGUpO1xuXHQgICAgdmFyIGl0ZXJzID0gW2l0ZXJhYmxlXS5jb25jYXQodmFsdWVzKS5tYXAoZnVuY3Rpb24odiApIHtcblx0ICAgICAgaWYgKCFpc0l0ZXJhYmxlKHYpKSB7XG5cdCAgICAgICAgdiA9IGlzS2V5ZWRJdGVyYWJsZSA/XG5cdCAgICAgICAgICBrZXllZFNlcUZyb21WYWx1ZSh2KSA6XG5cdCAgICAgICAgICBpbmRleGVkU2VxRnJvbVZhbHVlKEFycmF5LmlzQXJyYXkodikgPyB2IDogW3ZdKTtcblx0ICAgICAgfSBlbHNlIGlmIChpc0tleWVkSXRlcmFibGUpIHtcblx0ICAgICAgICB2ID0gS2V5ZWRJdGVyYWJsZSh2KTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gdjtcblx0ICAgIH0pLmZpbHRlcihmdW5jdGlvbih2ICkge3JldHVybiB2LnNpemUgIT09IDB9KTtcblx0XG5cdCAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgIHJldHVybiBpdGVyYWJsZTtcblx0ICAgIH1cblx0XG5cdCAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgIHZhciBzaW5nbGV0b24gPSBpdGVyc1swXTtcblx0ICAgICAgaWYgKHNpbmdsZXRvbiA9PT0gaXRlcmFibGUgfHxcblx0ICAgICAgICAgIGlzS2V5ZWRJdGVyYWJsZSAmJiBpc0tleWVkKHNpbmdsZXRvbikgfHxcblx0ICAgICAgICAgIGlzSW5kZXhlZChpdGVyYWJsZSkgJiYgaXNJbmRleGVkKHNpbmdsZXRvbikpIHtcblx0ICAgICAgICByZXR1cm4gc2luZ2xldG9uO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIGNvbmNhdFNlcSA9IG5ldyBBcnJheVNlcShpdGVycyk7XG5cdCAgICBpZiAoaXNLZXllZEl0ZXJhYmxlKSB7XG5cdCAgICAgIGNvbmNhdFNlcSA9IGNvbmNhdFNlcS50b0tleWVkU2VxKCk7XG5cdCAgICB9IGVsc2UgaWYgKCFpc0luZGV4ZWQoaXRlcmFibGUpKSB7XG5cdCAgICAgIGNvbmNhdFNlcSA9IGNvbmNhdFNlcS50b1NldFNlcSgpO1xuXHQgICAgfVxuXHQgICAgY29uY2F0U2VxID0gY29uY2F0U2VxLmZsYXR0ZW4odHJ1ZSk7XG5cdCAgICBjb25jYXRTZXEuc2l6ZSA9IGl0ZXJzLnJlZHVjZShcblx0ICAgICAgZnVuY3Rpb24oc3VtLCBzZXEpICB7XG5cdCAgICAgICAgaWYgKHN1bSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICB2YXIgc2l6ZSA9IHNlcS5zaXplO1xuXHQgICAgICAgICAgaWYgKHNpemUgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICByZXR1cm4gc3VtICsgc2l6ZTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH0sXG5cdCAgICAgIDBcblx0ICAgICk7XG5cdCAgICByZXR1cm4gY29uY2F0U2VxO1xuXHQgIH1cblx0XG5cdFxuXHQgIGZ1bmN0aW9uIGZsYXR0ZW5GYWN0b3J5KGl0ZXJhYmxlLCBkZXB0aCwgdXNlS2V5cykge1xuXHQgICAgdmFyIGZsYXRTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG5cdCAgICBmbGF0U2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIHZhciBzdG9wcGVkID0gZmFsc2U7XG5cdCAgICAgIGZ1bmN0aW9uIGZsYXREZWVwKGl0ZXIsIGN1cnJlbnREZXB0aCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICAgIGl0ZXIuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7XG5cdCAgICAgICAgICBpZiAoKCFkZXB0aCB8fCBjdXJyZW50RGVwdGggPCBkZXB0aCkgJiYgaXNJdGVyYWJsZSh2KSkge1xuXHQgICAgICAgICAgICBmbGF0RGVlcCh2LCBjdXJyZW50RGVwdGggKyAxKTtcblx0ICAgICAgICAgIH0gZWxzZSBpZiAoZm4odiwgdXNlS2V5cyA/IGsgOiBpdGVyYXRpb25zKyssIHRoaXMkMCkgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICAgIHN0b3BwZWQgPSB0cnVlO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgcmV0dXJuICFzdG9wcGVkO1xuXHQgICAgICAgIH0sIHJldmVyc2UpO1xuXHQgICAgICB9XG5cdCAgICAgIGZsYXREZWVwKGl0ZXJhYmxlLCAwKTtcblx0ICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG5cdCAgICB9XG5cdCAgICBmbGF0U2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuXHQgICAgICB2YXIgc3RhY2sgPSBbXTtcblx0ICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuXHQgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcblx0ICAgICAgICB3aGlsZSAoaXRlcmF0b3IpIHtcblx0ICAgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuXHQgICAgICAgICAgaWYgKHN0ZXAuZG9uZSAhPT0gZmFsc2UpIHtcblx0ICAgICAgICAgICAgaXRlcmF0b3IgPSBzdGFjay5wb3AoKTtcblx0ICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICB2YXIgdiA9IHN0ZXAudmFsdWU7XG5cdCAgICAgICAgICBpZiAodHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTKSB7XG5cdCAgICAgICAgICAgIHYgPSB2WzFdO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgaWYgKCghZGVwdGggfHwgc3RhY2subGVuZ3RoIDwgZGVwdGgpICYmIGlzSXRlcmFibGUodikpIHtcblx0ICAgICAgICAgICAgc3RhY2sucHVzaChpdGVyYXRvcik7XG5cdCAgICAgICAgICAgIGl0ZXJhdG9yID0gdi5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHVzZUtleXMgPyBzdGVwIDogaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHYsIHN0ZXApO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGZsYXRTZXF1ZW5jZTtcblx0ICB9XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBmbGF0TWFwRmFjdG9yeShpdGVyYWJsZSwgbWFwcGVyLCBjb250ZXh0KSB7XG5cdCAgICB2YXIgY29lcmNlID0gaXRlcmFibGVDbGFzcyhpdGVyYWJsZSk7XG5cdCAgICByZXR1cm4gaXRlcmFibGUudG9TZXEoKS5tYXAoXG5cdCAgICAgIGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIGNvZXJjZShtYXBwZXIuY2FsbChjb250ZXh0LCB2LCBrLCBpdGVyYWJsZSkpfVxuXHQgICAgKS5mbGF0dGVuKHRydWUpO1xuXHQgIH1cblx0XG5cdFxuXHQgIGZ1bmN0aW9uIGludGVycG9zZUZhY3RvcnkoaXRlcmFibGUsIHNlcGFyYXRvcikge1xuXHQgICAgdmFyIGludGVycG9zZWRTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG5cdCAgICBpbnRlcnBvc2VkU2VxdWVuY2Uuc2l6ZSA9IGl0ZXJhYmxlLnNpemUgJiYgaXRlcmFibGUuc2l6ZSAqIDIgLTE7XG5cdCAgICBpbnRlcnBvc2VkU2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSBcblx0ICAgICAgICB7cmV0dXJuICghaXRlcmF0aW9ucyB8fCBmbihzZXBhcmF0b3IsIGl0ZXJhdGlvbnMrKywgdGhpcyQwKSAhPT0gZmFsc2UpICYmXG5cdCAgICAgICAgZm4odiwgaXRlcmF0aW9ucysrLCB0aGlzJDApICE9PSBmYWxzZX0sXG5cdCAgICAgICAgcmV2ZXJzZVxuXHQgICAgICApO1xuXHQgICAgICByZXR1cm4gaXRlcmF0aW9ucztcblx0ICAgIH07XG5cdCAgICBpbnRlcnBvc2VkU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcblx0ICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuXHQgICAgICB2YXIgc3RlcDtcblx0ICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG5cdCAgICAgICAgaWYgKCFzdGVwIHx8IGl0ZXJhdGlvbnMgJSAyKSB7XG5cdCAgICAgICAgICBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuXHQgICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuXHQgICAgICAgICAgICByZXR1cm4gc3RlcDtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGl0ZXJhdGlvbnMgJSAyID9cblx0ICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzZXBhcmF0b3IpIDpcblx0ICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzdGVwLnZhbHVlLCBzdGVwKTtcblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIGludGVycG9zZWRTZXF1ZW5jZTtcblx0ICB9XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBzb3J0RmFjdG9yeShpdGVyYWJsZSwgY29tcGFyYXRvciwgbWFwcGVyKSB7XG5cdCAgICBpZiAoIWNvbXBhcmF0b3IpIHtcblx0ICAgICAgY29tcGFyYXRvciA9IGRlZmF1bHRDb21wYXJhdG9yO1xuXHQgICAgfVxuXHQgICAgdmFyIGlzS2V5ZWRJdGVyYWJsZSA9IGlzS2V5ZWQoaXRlcmFibGUpO1xuXHQgICAgdmFyIGluZGV4ID0gMDtcblx0ICAgIHZhciBlbnRyaWVzID0gaXRlcmFibGUudG9TZXEoKS5tYXAoXG5cdCAgICAgIGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIFtrLCB2LCBpbmRleCsrLCBtYXBwZXIgPyBtYXBwZXIodiwgaywgaXRlcmFibGUpIDogdl19XG5cdCAgICApLnRvQXJyYXkoKTtcblx0ICAgIGVudHJpZXMuc29ydChmdW5jdGlvbihhLCBiKSAge3JldHVybiBjb21wYXJhdG9yKGFbM10sIGJbM10pIHx8IGFbMl0gLSBiWzJdfSkuZm9yRWFjaChcblx0ICAgICAgaXNLZXllZEl0ZXJhYmxlID9cblx0ICAgICAgZnVuY3Rpb24odiwgaSkgIHsgZW50cmllc1tpXS5sZW5ndGggPSAyOyB9IDpcblx0ICAgICAgZnVuY3Rpb24odiwgaSkgIHsgZW50cmllc1tpXSA9IHZbMV07IH1cblx0ICAgICk7XG5cdCAgICByZXR1cm4gaXNLZXllZEl0ZXJhYmxlID8gS2V5ZWRTZXEoZW50cmllcykgOlxuXHQgICAgICBpc0luZGV4ZWQoaXRlcmFibGUpID8gSW5kZXhlZFNlcShlbnRyaWVzKSA6XG5cdCAgICAgIFNldFNlcShlbnRyaWVzKTtcblx0ICB9XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBtYXhGYWN0b3J5KGl0ZXJhYmxlLCBjb21wYXJhdG9yLCBtYXBwZXIpIHtcblx0ICAgIGlmICghY29tcGFyYXRvcikge1xuXHQgICAgICBjb21wYXJhdG9yID0gZGVmYXVsdENvbXBhcmF0b3I7XG5cdCAgICB9XG5cdCAgICBpZiAobWFwcGVyKSB7XG5cdCAgICAgIHZhciBlbnRyeSA9IGl0ZXJhYmxlLnRvU2VxKClcblx0ICAgICAgICAubWFwKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIFt2LCBtYXBwZXIodiwgaywgaXRlcmFibGUpXX0pXG5cdCAgICAgICAgLnJlZHVjZShmdW5jdGlvbihhLCBiKSAge3JldHVybiBtYXhDb21wYXJlKGNvbXBhcmF0b3IsIGFbMV0sIGJbMV0pID8gYiA6IGF9KTtcblx0ICAgICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5WzBdO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIGl0ZXJhYmxlLnJlZHVjZShmdW5jdGlvbihhLCBiKSAge3JldHVybiBtYXhDb21wYXJlKGNvbXBhcmF0b3IsIGEsIGIpID8gYiA6IGF9KTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIG1heENvbXBhcmUoY29tcGFyYXRvciwgYSwgYikge1xuXHQgICAgdmFyIGNvbXAgPSBjb21wYXJhdG9yKGIsIGEpO1xuXHQgICAgLy8gYiBpcyBjb25zaWRlcmVkIHRoZSBuZXcgbWF4IGlmIHRoZSBjb21wYXJhdG9yIGRlY2xhcmVzIHRoZW0gZXF1YWwsIGJ1dFxuXHQgICAgLy8gdGhleSBhcmUgbm90IGVxdWFsIGFuZCBiIGlzIGluIGZhY3QgYSBudWxsaXNoIHZhbHVlLlxuXHQgICAgcmV0dXJuIChjb21wID09PSAwICYmIGIgIT09IGEgJiYgKGIgPT09IHVuZGVmaW5lZCB8fCBiID09PSBudWxsIHx8IGIgIT09IGIpKSB8fCBjb21wID4gMDtcblx0ICB9XG5cdFxuXHRcblx0ICBmdW5jdGlvbiB6aXBXaXRoRmFjdG9yeShrZXlJdGVyLCB6aXBwZXIsIGl0ZXJzKSB7XG5cdCAgICB2YXIgemlwU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2Uoa2V5SXRlcik7XG5cdCAgICB6aXBTZXF1ZW5jZS5zaXplID0gbmV3IEFycmF5U2VxKGl0ZXJzKS5tYXAoZnVuY3Rpb24oaSApIHtyZXR1cm4gaS5zaXplfSkubWluKCk7XG5cdCAgICAvLyBOb3RlOiB0aGlzIGEgZ2VuZXJpYyBiYXNlIGltcGxlbWVudGF0aW9uIG9mIF9faXRlcmF0ZSBpbiB0ZXJtcyBvZlxuXHQgICAgLy8gX19pdGVyYXRvciB3aGljaCBtYXkgYmUgbW9yZSBnZW5lcmljYWxseSB1c2VmdWwgaW4gdGhlIGZ1dHVyZS5cblx0ICAgIHppcFNlcXVlbmNlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG5cdCAgICAgIC8qIGdlbmVyaWM6XG5cdCAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuXHQgICAgICB2YXIgc3RlcDtcblx0ICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuXHQgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG5cdCAgICAgICAgaXRlcmF0aW9ucysrO1xuXHQgICAgICAgIGlmIChmbihzdGVwLnZhbHVlWzFdLCBzdGVwLnZhbHVlWzBdLCB0aGlzKSA9PT0gZmFsc2UpIHtcblx0ICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gaXRlcmF0aW9ucztcblx0ICAgICAgKi9cblx0ICAgICAgLy8gaW5kZXhlZDpcblx0ICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcblx0ICAgICAgdmFyIHN0ZXA7XG5cdCAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcblx0ICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuXHQgICAgICAgIGlmIChmbihzdGVwLnZhbHVlLCBpdGVyYXRpb25zKyssIHRoaXMpID09PSBmYWxzZSkge1xuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuXHQgICAgfTtcblx0ICAgIHppcFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcblx0ICAgICAgdmFyIGl0ZXJhdG9ycyA9IGl0ZXJzLm1hcChmdW5jdGlvbihpIClcblx0ICAgICAgICB7cmV0dXJuIChpID0gSXRlcmFibGUoaSksIGdldEl0ZXJhdG9yKHJldmVyc2UgPyBpLnJldmVyc2UoKSA6IGkpKX1cblx0ICAgICAgKTtcblx0ICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuXHQgICAgICB2YXIgaXNEb25lID0gZmFsc2U7XG5cdCAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuXHQgICAgICAgIHZhciBzdGVwcztcblx0ICAgICAgICBpZiAoIWlzRG9uZSkge1xuXHQgICAgICAgICAgc3RlcHMgPSBpdGVyYXRvcnMubWFwKGZ1bmN0aW9uKGkgKSB7cmV0dXJuIGkubmV4dCgpfSk7XG5cdCAgICAgICAgICBpc0RvbmUgPSBzdGVwcy5zb21lKGZ1bmN0aW9uKHMgKSB7cmV0dXJuIHMuZG9uZX0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoaXNEb25lKSB7XG5cdCAgICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKFxuXHQgICAgICAgICAgdHlwZSxcblx0ICAgICAgICAgIGl0ZXJhdGlvbnMrKyxcblx0ICAgICAgICAgIHppcHBlci5hcHBseShudWxsLCBzdGVwcy5tYXAoZnVuY3Rpb24ocyApIHtyZXR1cm4gcy52YWx1ZX0pKVxuXHQgICAgICAgICk7XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiB6aXBTZXF1ZW5jZVxuXHQgIH1cblx0XG5cdFxuXHQgIC8vICNwcmFnbWEgSGVscGVyIEZ1bmN0aW9uc1xuXHRcblx0ICBmdW5jdGlvbiByZWlmeShpdGVyLCBzZXEpIHtcblx0ICAgIHJldHVybiBpc1NlcShpdGVyKSA/IHNlcSA6IGl0ZXIuY29uc3RydWN0b3Ioc2VxKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIHZhbGlkYXRlRW50cnkoZW50cnkpIHtcblx0ICAgIGlmIChlbnRyeSAhPT0gT2JqZWN0KGVudHJ5KSkge1xuXHQgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBbSywgVl0gdHVwbGU6ICcgKyBlbnRyeSk7XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiByZXNvbHZlU2l6ZShpdGVyKSB7XG5cdCAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuXHQgICAgcmV0dXJuIGVuc3VyZVNpemUoaXRlcik7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBpdGVyYWJsZUNsYXNzKGl0ZXJhYmxlKSB7XG5cdCAgICByZXR1cm4gaXNLZXllZChpdGVyYWJsZSkgPyBLZXllZEl0ZXJhYmxlIDpcblx0ICAgICAgaXNJbmRleGVkKGl0ZXJhYmxlKSA/IEluZGV4ZWRJdGVyYWJsZSA6XG5cdCAgICAgIFNldEl0ZXJhYmxlO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKSB7XG5cdCAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShcblx0ICAgICAgKFxuXHQgICAgICAgIGlzS2V5ZWQoaXRlcmFibGUpID8gS2V5ZWRTZXEgOlxuXHQgICAgICAgIGlzSW5kZXhlZChpdGVyYWJsZSkgPyBJbmRleGVkU2VxIDpcblx0ICAgICAgICBTZXRTZXFcblx0ICAgICAgKS5wcm90b3R5cGVcblx0ICAgICk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBjYWNoZVJlc3VsdFRocm91Z2goKSB7XG5cdCAgICBpZiAodGhpcy5faXRlci5jYWNoZVJlc3VsdCkge1xuXHQgICAgICB0aGlzLl9pdGVyLmNhY2hlUmVzdWx0KCk7XG5cdCAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuX2l0ZXIuc2l6ZTtcblx0ICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gU2VxLnByb3RvdHlwZS5jYWNoZVJlc3VsdC5jYWxsKHRoaXMpO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gZGVmYXVsdENvbXBhcmF0b3IoYSwgYikge1xuXHQgICAgcmV0dXJuIGEgPiBiID8gMSA6IGEgPCBiID8gLTEgOiAwO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gZm9yY2VJdGVyYXRvcihrZXlQYXRoKSB7XG5cdCAgICB2YXIgaXRlciA9IGdldEl0ZXJhdG9yKGtleVBhdGgpO1xuXHQgICAgaWYgKCFpdGVyKSB7XG5cdCAgICAgIC8vIEFycmF5IG1pZ2h0IG5vdCBiZSBpdGVyYWJsZSBpbiB0aGlzIGVudmlyb25tZW50LCBzbyB3ZSBuZWVkIGEgZmFsbGJhY2tcblx0ICAgICAgLy8gdG8gb3VyIHdyYXBwZWQgdHlwZS5cblx0ICAgICAgaWYgKCFpc0FycmF5TGlrZShrZXlQYXRoKSkge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGl0ZXJhYmxlIG9yIGFycmF5LWxpa2U6ICcgKyBrZXlQYXRoKTtcblx0ICAgICAgfVxuXHQgICAgICBpdGVyID0gZ2V0SXRlcmF0b3IoSXRlcmFibGUoa2V5UGF0aCkpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGl0ZXI7XG5cdCAgfVxuXHRcblx0ICBjcmVhdGVDbGFzcyhNYXAsIEtleWVkQ29sbGVjdGlvbik7XG5cdFxuXHQgICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblx0XG5cdCAgICBmdW5jdGlvbiBNYXAodmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eU1hcCgpIDpcblx0ICAgICAgICBpc01hcCh2YWx1ZSkgPyB2YWx1ZSA6XG5cdCAgICAgICAgZW1wdHlNYXAoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKG1hcCApIHtcblx0ICAgICAgICAgIHZhciBpdGVyID0gS2V5ZWRJdGVyYWJsZSh2YWx1ZSk7XG5cdCAgICAgICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuXHQgICAgICAgICAgaXRlci5mb3JFYWNoKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIG1hcC5zZXQoaywgdil9KTtcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0XG5cdCAgICBNYXAucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ01hcCB7JywgJ30nKTtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gQHByYWdtYSBBY2Nlc3Ncblx0XG5cdCAgICBNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGssIG5vdFNldFZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9yb290ID9cblx0ICAgICAgICB0aGlzLl9yb290LmdldCgwLCB1bmRlZmluZWQsIGssIG5vdFNldFZhbHVlKSA6XG5cdCAgICAgICAgbm90U2V0VmFsdWU7XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrLCB2KSB7XG5cdCAgICAgIHJldHVybiB1cGRhdGVNYXAodGhpcywgaywgdik7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1hcC5wcm90b3R5cGUuc2V0SW4gPSBmdW5jdGlvbihrZXlQYXRoLCB2KSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUluKGtleVBhdGgsIE5PVF9TRVQsIGZ1bmN0aW9uKCkgIHtyZXR1cm4gdn0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBNYXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGspIHtcblx0ICAgICAgcmV0dXJuIHVwZGF0ZU1hcCh0aGlzLCBrLCBOT1RfU0VUKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS5kZWxldGVJbiA9IGZ1bmN0aW9uKGtleVBhdGgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSW4oa2V5UGF0aCwgZnVuY3Rpb24oKSAge3JldHVybiBOT1RfU0VUfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1hcC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oaywgbm90U2V0VmFsdWUsIHVwZGF0ZXIpIHtcblx0ICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHQgICAgICAgIGsodGhpcykgOlxuXHQgICAgICAgIHRoaXMudXBkYXRlSW4oW2tdLCBub3RTZXRWYWx1ZSwgdXBkYXRlcik7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1hcC5wcm90b3R5cGUudXBkYXRlSW4gPSBmdW5jdGlvbihrZXlQYXRoLCBub3RTZXRWYWx1ZSwgdXBkYXRlcikge1xuXHQgICAgICBpZiAoIXVwZGF0ZXIpIHtcblx0ICAgICAgICB1cGRhdGVyID0gbm90U2V0VmFsdWU7XG5cdCAgICAgICAgbm90U2V0VmFsdWUgPSB1bmRlZmluZWQ7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHVwZGF0ZWRWYWx1ZSA9IHVwZGF0ZUluRGVlcE1hcChcblx0ICAgICAgICB0aGlzLFxuXHQgICAgICAgIGZvcmNlSXRlcmF0b3Ioa2V5UGF0aCksXG5cdCAgICAgICAgbm90U2V0VmFsdWUsXG5cdCAgICAgICAgdXBkYXRlclxuXHQgICAgICApO1xuXHQgICAgICByZXR1cm4gdXBkYXRlZFZhbHVlID09PSBOT1RfU0VUID8gdW5kZWZpbmVkIDogdXBkYXRlZFZhbHVlO1xuXHQgICAgfTtcblx0XG5cdCAgICBNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcblx0ICAgICAgICB0aGlzLnNpemUgPSAwO1xuXHQgICAgICAgIHRoaXMuX3Jvb3QgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuXHQgICAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gZW1wdHlNYXAoKTtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gQHByYWdtYSBDb21wb3NpdGlvblxuXHRcblx0ICAgIE1hcC5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbigvKi4uLml0ZXJzKi8pIHtcblx0ICAgICAgcmV0dXJuIG1lcmdlSW50b01hcFdpdGgodGhpcywgdW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuXHQgICAgfTtcblx0XG5cdCAgICBNYXAucHJvdG90eXBlLm1lcmdlV2l0aCA9IGZ1bmN0aW9uKG1lcmdlcikge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuXHQgICAgICByZXR1cm4gbWVyZ2VJbnRvTWFwV2l0aCh0aGlzLCBtZXJnZXIsIGl0ZXJzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS5tZXJnZUluID0gZnVuY3Rpb24oa2V5UGF0aCkge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuXHQgICAgICByZXR1cm4gdGhpcy51cGRhdGVJbihrZXlQYXRoLCBlbXB0eU1hcCgpLCBmdW5jdGlvbihtICkge3JldHVybiBtLm1lcmdlLmFwcGx5KG0sIGl0ZXJzKX0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBNYXAucHJvdG90eXBlLm1lcmdlRGVlcCA9IGZ1bmN0aW9uKC8qLi4uaXRlcnMqLykge1xuXHQgICAgICByZXR1cm4gbWVyZ2VJbnRvTWFwV2l0aCh0aGlzLCBkZWVwTWVyZ2VyKHVuZGVmaW5lZCksIGFyZ3VtZW50cyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1hcC5wcm90b3R5cGUubWVyZ2VEZWVwV2l0aCA9IGZ1bmN0aW9uKG1lcmdlcikge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuXHQgICAgICByZXR1cm4gbWVyZ2VJbnRvTWFwV2l0aCh0aGlzLCBkZWVwTWVyZ2VyKG1lcmdlciksIGl0ZXJzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS5tZXJnZURlZXBJbiA9IGZ1bmN0aW9uKGtleVBhdGgpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAxKTtcblx0ICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSW4oa2V5UGF0aCwgZW1wdHlNYXAoKSwgZnVuY3Rpb24obSApIHtyZXR1cm4gbS5tZXJnZURlZXAuYXBwbHkobSwgaXRlcnMpfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1hcC5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKGNvbXBhcmF0b3IpIHtcblx0ICAgICAgLy8gTGF0ZSBiaW5kaW5nXG5cdCAgICAgIHJldHVybiBPcmRlcmVkTWFwKHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IpKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS5zb3J0QnkgPSBmdW5jdGlvbihtYXBwZXIsIGNvbXBhcmF0b3IpIHtcblx0ICAgICAgLy8gTGF0ZSBiaW5kaW5nXG5cdCAgICAgIHJldHVybiBPcmRlcmVkTWFwKHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IsIG1hcHBlcikpO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIE11dGFiaWxpdHlcblx0XG5cdCAgICBNYXAucHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSBmdW5jdGlvbihmbikge1xuXHQgICAgICB2YXIgbXV0YWJsZSA9IHRoaXMuYXNNdXRhYmxlKCk7XG5cdCAgICAgIGZuKG11dGFibGUpO1xuXHQgICAgICByZXR1cm4gbXV0YWJsZS53YXNBbHRlcmVkKCkgPyBtdXRhYmxlLl9fZW5zdXJlT3duZXIodGhpcy5fX293bmVySUQpIDogdGhpcztcblx0ICAgIH07XG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS5hc011dGFibGUgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX19vd25lcklEID8gdGhpcyA6IHRoaXMuX19lbnN1cmVPd25lcihuZXcgT3duZXJJRCgpKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS5hc0ltbXV0YWJsZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fX2Vuc3VyZU93bmVyKCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1hcC5wcm90b3R5cGUud2FzQWx0ZXJlZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fX2FsdGVyZWQ7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1hcC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcblx0ICAgICAgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcih0aGlzLCB0eXBlLCByZXZlcnNlKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTWFwLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIHRoaXMuX3Jvb3QgJiYgdGhpcy5fcm9vdC5pdGVyYXRlKGZ1bmN0aW9uKGVudHJ5ICkge1xuXHQgICAgICAgIGl0ZXJhdGlvbnMrKztcblx0ICAgICAgICByZXR1cm4gZm4oZW50cnlbMV0sIGVudHJ5WzBdLCB0aGlzJDApO1xuXHQgICAgICB9LCByZXZlcnNlKTtcblx0ICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1hcC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcblx0ICAgICAgaWYgKG93bmVySUQgPT09IHRoaXMuX19vd25lcklEKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKCFvd25lcklEKSB7XG5cdCAgICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuXHQgICAgICAgIHRoaXMuX19hbHRlcmVkID0gZmFsc2U7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG1ha2VNYXAodGhpcy5zaXplLCB0aGlzLl9yb290LCBvd25lcklELCB0aGlzLl9faGFzaCk7XG5cdCAgICB9O1xuXHRcblx0XG5cdCAgZnVuY3Rpb24gaXNNYXAobWF5YmVNYXApIHtcblx0ICAgIHJldHVybiAhIShtYXliZU1hcCAmJiBtYXliZU1hcFtJU19NQVBfU0VOVElORUxdKTtcblx0ICB9XG5cdFxuXHQgIE1hcC5pc01hcCA9IGlzTWFwO1xuXHRcblx0ICB2YXIgSVNfTUFQX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfTUFQX19AQCc7XG5cdFxuXHQgIHZhciBNYXBQcm90b3R5cGUgPSBNYXAucHJvdG90eXBlO1xuXHQgIE1hcFByb3RvdHlwZVtJU19NQVBfU0VOVElORUxdID0gdHJ1ZTtcblx0ICBNYXBQcm90b3R5cGVbREVMRVRFXSA9IE1hcFByb3RvdHlwZS5yZW1vdmU7XG5cdCAgTWFwUHJvdG90eXBlLnJlbW92ZUluID0gTWFwUHJvdG90eXBlLmRlbGV0ZUluO1xuXHRcblx0XG5cdCAgLy8gI3ByYWdtYSBUcmllIE5vZGVzXG5cdFxuXHRcblx0XG5cdCAgICBmdW5jdGlvbiBBcnJheU1hcE5vZGUob3duZXJJRCwgZW50cmllcykge1xuXHQgICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuXHQgICAgICB0aGlzLmVudHJpZXMgPSBlbnRyaWVzO1xuXHQgICAgfVxuXHRcblx0ICAgIEFycmF5TWFwTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oc2hpZnQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXM7XG5cdCAgICAgIGZvciAodmFyIGlpID0gMCwgbGVuID0gZW50cmllcy5sZW5ndGg7IGlpIDwgbGVuOyBpaSsrKSB7XG5cdCAgICAgICAgaWYgKGlzKGtleSwgZW50cmllc1tpaV1bMF0pKSB7XG5cdCAgICAgICAgICByZXR1cm4gZW50cmllc1tpaV1bMV07XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBub3RTZXRWYWx1ZTtcblx0ICAgIH07XG5cdFxuXHQgICAgQXJyYXlNYXBOb2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcblx0ICAgICAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcblx0XG5cdCAgICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuXHQgICAgICB2YXIgaWR4ID0gMDtcblx0ICAgICAgZm9yICh2YXIgbGVuID0gZW50cmllcy5sZW5ndGg7IGlkeCA8IGxlbjsgaWR4KyspIHtcblx0ICAgICAgICBpZiAoaXMoa2V5LCBlbnRyaWVzW2lkeF1bMF0pKSB7XG5cdCAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGV4aXN0cyA9IGlkeCA8IGxlbjtcblx0XG5cdCAgICAgIGlmIChleGlzdHMgPyBlbnRyaWVzW2lkeF1bMV0gPT09IHZhbHVlIDogcmVtb3ZlZCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuXHQgICAgICAocmVtb3ZlZCB8fCAhZXhpc3RzKSAmJiBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG5cdFxuXHQgICAgICBpZiAocmVtb3ZlZCAmJiBlbnRyaWVzLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICAgIHJldHVybjsgLy8gdW5kZWZpbmVkXG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghZXhpc3RzICYmICFyZW1vdmVkICYmIGVudHJpZXMubGVuZ3RoID49IE1BWF9BUlJBWV9NQVBfU0laRSkge1xuXHQgICAgICAgIHJldHVybiBjcmVhdGVOb2Rlcyhvd25lcklELCBlbnRyaWVzLCBrZXksIHZhbHVlKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIGlzRWRpdGFibGUgPSBvd25lcklEICYmIG93bmVySUQgPT09IHRoaXMub3duZXJJRDtcblx0ICAgICAgdmFyIG5ld0VudHJpZXMgPSBpc0VkaXRhYmxlID8gZW50cmllcyA6IGFyckNvcHkoZW50cmllcyk7XG5cdFxuXHQgICAgICBpZiAoZXhpc3RzKSB7XG5cdCAgICAgICAgaWYgKHJlbW92ZWQpIHtcblx0ICAgICAgICAgIGlkeCA9PT0gbGVuIC0gMSA/IG5ld0VudHJpZXMucG9wKCkgOiAobmV3RW50cmllc1tpZHhdID0gbmV3RW50cmllcy5wb3AoKSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIG5ld0VudHJpZXNbaWR4XSA9IFtrZXksIHZhbHVlXTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgbmV3RW50cmllcy5wdXNoKFtrZXksIHZhbHVlXSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG5cdCAgICAgICAgdGhpcy5lbnRyaWVzID0gbmV3RW50cmllcztcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIG5ldyBBcnJheU1hcE5vZGUob3duZXJJRCwgbmV3RW50cmllcyk7XG5cdCAgICB9O1xuXHRcblx0XG5cdFxuXHRcblx0ICAgIGZ1bmN0aW9uIEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsIGJpdG1hcCwgbm9kZXMpIHtcblx0ICAgICAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcblx0ICAgICAgdGhpcy5iaXRtYXAgPSBiaXRtYXA7XG5cdCAgICAgIHRoaXMubm9kZXMgPSBub2Rlcztcblx0ICAgIH1cblx0XG5cdCAgICBCaXRtYXBJbmRleGVkTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oc2hpZnQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIGtleUhhc2ggPSBoYXNoKGtleSk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGJpdCA9ICgxIDw8ICgoc2hpZnQgPT09IDAgPyBrZXlIYXNoIDoga2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSykpO1xuXHQgICAgICB2YXIgYml0bWFwID0gdGhpcy5iaXRtYXA7XG5cdCAgICAgIHJldHVybiAoYml0bWFwICYgYml0KSA9PT0gMCA/IG5vdFNldFZhbHVlIDpcblx0ICAgICAgICB0aGlzLm5vZGVzW3BvcENvdW50KGJpdG1hcCAmIChiaXQgLSAxKSldLmdldChzaGlmdCArIFNISUZULCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKTtcblx0ICAgIH07XG5cdFxuXHQgICAgQml0bWFwSW5kZXhlZE5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuXHQgICAgICBpZiAoa2V5SGFzaCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAga2V5SGFzaCA9IGhhc2goa2V5KTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIga2V5SGFzaEZyYWcgPSAoc2hpZnQgPT09IDAgPyBrZXlIYXNoIDoga2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSztcblx0ICAgICAgdmFyIGJpdCA9IDEgPDwga2V5SGFzaEZyYWc7XG5cdCAgICAgIHZhciBiaXRtYXAgPSB0aGlzLmJpdG1hcDtcblx0ICAgICAgdmFyIGV4aXN0cyA9IChiaXRtYXAgJiBiaXQpICE9PSAwO1xuXHRcblx0ICAgICAgaWYgKCFleGlzdHMgJiYgdmFsdWUgPT09IE5PVF9TRVQpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIGlkeCA9IHBvcENvdW50KGJpdG1hcCAmIChiaXQgLSAxKSk7XG5cdCAgICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XG5cdCAgICAgIHZhciBub2RlID0gZXhpc3RzID8gbm9kZXNbaWR4XSA6IHVuZGVmaW5lZDtcblx0ICAgICAgdmFyIG5ld05vZGUgPSB1cGRhdGVOb2RlKG5vZGUsIG93bmVySUQsIHNoaWZ0ICsgU0hJRlQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKTtcblx0XG5cdCAgICAgIGlmIChuZXdOb2RlID09PSBub2RlKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICghZXhpc3RzICYmIG5ld05vZGUgJiYgbm9kZXMubGVuZ3RoID49IE1BWF9CSVRNQVBfSU5ERVhFRF9TSVpFKSB7XG5cdCAgICAgICAgcmV0dXJuIGV4cGFuZE5vZGVzKG93bmVySUQsIG5vZGVzLCBiaXRtYXAsIGtleUhhc2hGcmFnLCBuZXdOb2RlKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKGV4aXN0cyAmJiAhbmV3Tm9kZSAmJiBub2Rlcy5sZW5ndGggPT09IDIgJiYgaXNMZWFmTm9kZShub2Rlc1tpZHggXiAxXSkpIHtcblx0ICAgICAgICByZXR1cm4gbm9kZXNbaWR4IF4gMV07XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChleGlzdHMgJiYgbmV3Tm9kZSAmJiBub2Rlcy5sZW5ndGggPT09IDEgJiYgaXNMZWFmTm9kZShuZXdOb2RlKSkge1xuXHQgICAgICAgIHJldHVybiBuZXdOb2RlO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuXHQgICAgICB2YXIgbmV3Qml0bWFwID0gZXhpc3RzID8gbmV3Tm9kZSA/IGJpdG1hcCA6IGJpdG1hcCBeIGJpdCA6IGJpdG1hcCB8IGJpdDtcblx0ICAgICAgdmFyIG5ld05vZGVzID0gZXhpc3RzID8gbmV3Tm9kZSA/XG5cdCAgICAgICAgc2V0SW4obm9kZXMsIGlkeCwgbmV3Tm9kZSwgaXNFZGl0YWJsZSkgOlxuXHQgICAgICAgIHNwbGljZU91dChub2RlcywgaWR4LCBpc0VkaXRhYmxlKSA6XG5cdCAgICAgICAgc3BsaWNlSW4obm9kZXMsIGlkeCwgbmV3Tm9kZSwgaXNFZGl0YWJsZSk7XG5cdFxuXHQgICAgICBpZiAoaXNFZGl0YWJsZSkge1xuXHQgICAgICAgIHRoaXMuYml0bWFwID0gbmV3Qml0bWFwO1xuXHQgICAgICAgIHRoaXMubm9kZXMgPSBuZXdOb2Rlcztcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIG5ldyBCaXRtYXBJbmRleGVkTm9kZShvd25lcklELCBuZXdCaXRtYXAsIG5ld05vZGVzKTtcblx0ICAgIH07XG5cdFxuXHRcblx0XG5cdFxuXHQgICAgZnVuY3Rpb24gSGFzaEFycmF5TWFwTm9kZShvd25lcklELCBjb3VudCwgbm9kZXMpIHtcblx0ICAgICAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcblx0ICAgICAgdGhpcy5jb3VudCA9IGNvdW50O1xuXHQgICAgICB0aGlzLm5vZGVzID0gbm9kZXM7XG5cdCAgICB9XG5cdFxuXHQgICAgSGFzaEFycmF5TWFwTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oc2hpZnQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIGtleUhhc2ggPSBoYXNoKGtleSk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGlkeCA9IChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuXHQgICAgICB2YXIgbm9kZSA9IHRoaXMubm9kZXNbaWR4XTtcblx0ICAgICAgcmV0dXJuIG5vZGUgPyBub2RlLmdldChzaGlmdCArIFNISUZULCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSA6IG5vdFNldFZhbHVlO1xuXHQgICAgfTtcblx0XG5cdCAgICBIYXNoQXJyYXlNYXBOb2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcblx0ICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIGtleUhhc2ggPSBoYXNoKGtleSk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGlkeCA9IChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuXHQgICAgICB2YXIgcmVtb3ZlZCA9IHZhbHVlID09PSBOT1RfU0VUO1xuXHQgICAgICB2YXIgbm9kZXMgPSB0aGlzLm5vZGVzO1xuXHQgICAgICB2YXIgbm9kZSA9IG5vZGVzW2lkeF07XG5cdFxuXHQgICAgICBpZiAocmVtb3ZlZCAmJiAhbm9kZSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgbmV3Tm9kZSA9IHVwZGF0ZU5vZGUobm9kZSwgb3duZXJJRCwgc2hpZnQgKyBTSElGVCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpO1xuXHQgICAgICBpZiAobmV3Tm9kZSA9PT0gbm9kZSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgbmV3Q291bnQgPSB0aGlzLmNvdW50O1xuXHQgICAgICBpZiAoIW5vZGUpIHtcblx0ICAgICAgICBuZXdDb3VudCsrO1xuXHQgICAgICB9IGVsc2UgaWYgKCFuZXdOb2RlKSB7XG5cdCAgICAgICAgbmV3Q291bnQtLTtcblx0ICAgICAgICBpZiAobmV3Q291bnQgPCBNSU5fSEFTSF9BUlJBWV9NQVBfU0laRSkge1xuXHQgICAgICAgICAgcmV0dXJuIHBhY2tOb2Rlcyhvd25lcklELCBub2RlcywgbmV3Q291bnQsIGlkeCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuXHQgICAgICB2YXIgbmV3Tm9kZXMgPSBzZXRJbihub2RlcywgaWR4LCBuZXdOb2RlLCBpc0VkaXRhYmxlKTtcblx0XG5cdCAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG5cdCAgICAgICAgdGhpcy5jb3VudCA9IG5ld0NvdW50O1xuXHQgICAgICAgIHRoaXMubm9kZXMgPSBuZXdOb2Rlcztcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIG5ldyBIYXNoQXJyYXlNYXBOb2RlKG93bmVySUQsIG5ld0NvdW50LCBuZXdOb2Rlcyk7XG5cdCAgICB9O1xuXHRcblx0XG5cdFxuXHRcblx0ICAgIGZ1bmN0aW9uIEhhc2hDb2xsaXNpb25Ob2RlKG93bmVySUQsIGtleUhhc2gsIGVudHJpZXMpIHtcblx0ICAgICAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcblx0ICAgICAgdGhpcy5rZXlIYXNoID0ga2V5SGFzaDtcblx0ICAgICAgdGhpcy5lbnRyaWVzID0gZW50cmllcztcblx0ICAgIH1cblx0XG5cdCAgICBIYXNoQ29sbGlzaW9uTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oc2hpZnQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXM7XG5cdCAgICAgIGZvciAodmFyIGlpID0gMCwgbGVuID0gZW50cmllcy5sZW5ndGg7IGlpIDwgbGVuOyBpaSsrKSB7XG5cdCAgICAgICAgaWYgKGlzKGtleSwgZW50cmllc1tpaV1bMF0pKSB7XG5cdCAgICAgICAgICByZXR1cm4gZW50cmllc1tpaV1bMV07XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBub3RTZXRWYWx1ZTtcblx0ICAgIH07XG5cdFxuXHQgICAgSGFzaENvbGxpc2lvbk5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuXHQgICAgICBpZiAoa2V5SGFzaCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAga2V5SGFzaCA9IGhhc2goa2V5KTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcblx0XG5cdCAgICAgIGlmIChrZXlIYXNoICE9PSB0aGlzLmtleUhhc2gpIHtcblx0ICAgICAgICBpZiAocmVtb3ZlZCkge1xuXHQgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIFNldFJlZihkaWRBbHRlcik7XG5cdCAgICAgICAgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuXHQgICAgICAgIHJldHVybiBtZXJnZUludG9Ob2RlKHRoaXMsIG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBba2V5LCB2YWx1ZV0pO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcblx0ICAgICAgdmFyIGlkeCA9IDA7XG5cdCAgICAgIGZvciAodmFyIGxlbiA9IGVudHJpZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG5cdCAgICAgICAgaWYgKGlzKGtleSwgZW50cmllc1tpZHhdWzBdKSkge1xuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHZhciBleGlzdHMgPSBpZHggPCBsZW47XG5cdFxuXHQgICAgICBpZiAoZXhpc3RzID8gZW50cmllc1tpZHhdWzFdID09PSB2YWx1ZSA6IHJlbW92ZWQpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHRcblx0ICAgICAgU2V0UmVmKGRpZEFsdGVyKTtcblx0ICAgICAgKHJlbW92ZWQgfHwgIWV4aXN0cykgJiYgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuXHRcblx0ICAgICAgaWYgKHJlbW92ZWQgJiYgbGVuID09PSAyKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZU5vZGUob3duZXJJRCwgdGhpcy5rZXlIYXNoLCBlbnRyaWVzW2lkeCBeIDFdKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIGlzRWRpdGFibGUgPSBvd25lcklEICYmIG93bmVySUQgPT09IHRoaXMub3duZXJJRDtcblx0ICAgICAgdmFyIG5ld0VudHJpZXMgPSBpc0VkaXRhYmxlID8gZW50cmllcyA6IGFyckNvcHkoZW50cmllcyk7XG5cdFxuXHQgICAgICBpZiAoZXhpc3RzKSB7XG5cdCAgICAgICAgaWYgKHJlbW92ZWQpIHtcblx0ICAgICAgICAgIGlkeCA9PT0gbGVuIC0gMSA/IG5ld0VudHJpZXMucG9wKCkgOiAobmV3RW50cmllc1tpZHhdID0gbmV3RW50cmllcy5wb3AoKSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIG5ld0VudHJpZXNbaWR4XSA9IFtrZXksIHZhbHVlXTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgbmV3RW50cmllcy5wdXNoKFtrZXksIHZhbHVlXSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG5cdCAgICAgICAgdGhpcy5lbnRyaWVzID0gbmV3RW50cmllcztcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIG5ldyBIYXNoQ29sbGlzaW9uTm9kZShvd25lcklELCB0aGlzLmtleUhhc2gsIG5ld0VudHJpZXMpO1xuXHQgICAgfTtcblx0XG5cdFxuXHRcblx0XG5cdCAgICBmdW5jdGlvbiBWYWx1ZU5vZGUob3duZXJJRCwga2V5SGFzaCwgZW50cnkpIHtcblx0ICAgICAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcblx0ICAgICAgdGhpcy5rZXlIYXNoID0ga2V5SGFzaDtcblx0ICAgICAgdGhpcy5lbnRyeSA9IGVudHJ5O1xuXHQgICAgfVxuXHRcblx0ICAgIFZhbHVlTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oc2hpZnQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIGlzKGtleSwgdGhpcy5lbnRyeVswXSkgPyB0aGlzLmVudHJ5WzFdIDogbm90U2V0VmFsdWU7XG5cdCAgICB9O1xuXHRcblx0ICAgIFZhbHVlTm9kZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24ob3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKSB7XG5cdCAgICAgIHZhciByZW1vdmVkID0gdmFsdWUgPT09IE5PVF9TRVQ7XG5cdCAgICAgIHZhciBrZXlNYXRjaCA9IGlzKGtleSwgdGhpcy5lbnRyeVswXSk7XG5cdCAgICAgIGlmIChrZXlNYXRjaCA/IHZhbHVlID09PSB0aGlzLmVudHJ5WzFdIDogcmVtb3ZlZCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuXHRcblx0ICAgICAgaWYgKHJlbW92ZWQpIHtcblx0ICAgICAgICBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG5cdCAgICAgICAgcmV0dXJuOyAvLyB1bmRlZmluZWRcblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKGtleU1hdGNoKSB7XG5cdCAgICAgICAgaWYgKG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEKSB7XG5cdCAgICAgICAgICB0aGlzLmVudHJ5WzFdID0gdmFsdWU7XG5cdCAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZU5vZGUob3duZXJJRCwgdGhpcy5rZXlIYXNoLCBba2V5LCB2YWx1ZV0pO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG5cdCAgICAgIHJldHVybiBtZXJnZUludG9Ob2RlKHRoaXMsIG93bmVySUQsIHNoaWZ0LCBoYXNoKGtleSksIFtrZXksIHZhbHVlXSk7XG5cdCAgICB9O1xuXHRcblx0XG5cdFxuXHQgIC8vICNwcmFnbWEgSXRlcmF0b3JzXG5cdFxuXHQgIEFycmF5TWFwTm9kZS5wcm90b3R5cGUuaXRlcmF0ZSA9XG5cdCAgSGFzaENvbGxpc2lvbk5vZGUucHJvdG90eXBlLml0ZXJhdGUgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHtcblx0ICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuXHQgICAgZm9yICh2YXIgaWkgPSAwLCBtYXhJbmRleCA9IGVudHJpZXMubGVuZ3RoIC0gMTsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcblx0ICAgICAgaWYgKGZuKGVudHJpZXNbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV0pID09PSBmYWxzZSkge1xuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgQml0bWFwSW5kZXhlZE5vZGUucHJvdG90eXBlLml0ZXJhdGUgPVxuXHQgIEhhc2hBcnJheU1hcE5vZGUucHJvdG90eXBlLml0ZXJhdGUgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHtcblx0ICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XG5cdCAgICBmb3IgKHZhciBpaSA9IDAsIG1heEluZGV4ID0gbm9kZXMubGVuZ3RoIC0gMTsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcblx0ICAgICAgdmFyIG5vZGUgPSBub2Rlc1tyZXZlcnNlID8gbWF4SW5kZXggLSBpaSA6IGlpXTtcblx0ICAgICAgaWYgKG5vZGUgJiYgbm9kZS5pdGVyYXRlKGZuLCByZXZlcnNlKSA9PT0gZmFsc2UpIHtcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIFZhbHVlTm9kZS5wcm90b3R5cGUuaXRlcmF0ZSA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge1xuXHQgICAgcmV0dXJuIGZuKHRoaXMuZW50cnkpO1xuXHQgIH1cblx0XG5cdCAgY3JlYXRlQ2xhc3MoTWFwSXRlcmF0b3IsIEl0ZXJhdG9yKTtcblx0XG5cdCAgICBmdW5jdGlvbiBNYXBJdGVyYXRvcihtYXAsIHR5cGUsIHJldmVyc2UpIHtcblx0ICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG5cdCAgICAgIHRoaXMuX3JldmVyc2UgPSByZXZlcnNlO1xuXHQgICAgICB0aGlzLl9zdGFjayA9IG1hcC5fcm9vdCAmJiBtYXBJdGVyYXRvckZyYW1lKG1hcC5fcm9vdCk7XG5cdCAgICB9XG5cdFxuXHQgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIHR5cGUgPSB0aGlzLl90eXBlO1xuXHQgICAgICB2YXIgc3RhY2sgPSB0aGlzLl9zdGFjaztcblx0ICAgICAgd2hpbGUgKHN0YWNrKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSBzdGFjay5ub2RlO1xuXHQgICAgICAgIHZhciBpbmRleCA9IHN0YWNrLmluZGV4Kys7XG5cdCAgICAgICAgdmFyIG1heEluZGV4O1xuXHQgICAgICAgIGlmIChub2RlLmVudHJ5KSB7XG5cdCAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG1hcEl0ZXJhdG9yVmFsdWUodHlwZSwgbm9kZS5lbnRyeSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmIChub2RlLmVudHJpZXMpIHtcblx0ICAgICAgICAgIG1heEluZGV4ID0gbm9kZS5lbnRyaWVzLmxlbmd0aCAtIDE7XG5cdCAgICAgICAgICBpZiAoaW5kZXggPD0gbWF4SW5kZXgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG1hcEl0ZXJhdG9yVmFsdWUodHlwZSwgbm9kZS5lbnRyaWVzW3RoaXMuX3JldmVyc2UgPyBtYXhJbmRleCAtIGluZGV4IDogaW5kZXhdKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgbWF4SW5kZXggPSBub2RlLm5vZGVzLmxlbmd0aCAtIDE7XG5cdCAgICAgICAgICBpZiAoaW5kZXggPD0gbWF4SW5kZXgpIHtcblx0ICAgICAgICAgICAgdmFyIHN1Yk5vZGUgPSBub2RlLm5vZGVzW3RoaXMuX3JldmVyc2UgPyBtYXhJbmRleCAtIGluZGV4IDogaW5kZXhdO1xuXHQgICAgICAgICAgICBpZiAoc3ViTm9kZSkge1xuXHQgICAgICAgICAgICAgIGlmIChzdWJOb2RlLmVudHJ5KSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBzdWJOb2RlLmVudHJ5KTtcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgc3RhY2sgPSB0aGlzLl9zdGFjayA9IG1hcEl0ZXJhdG9yRnJhbWUoc3ViTm9kZSwgc3RhY2spO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBzdGFjayA9IHRoaXMuX3N0YWNrID0gdGhpcy5fc3RhY2suX19wcmV2O1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcblx0ICAgIH07XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBtYXBJdGVyYXRvclZhbHVlKHR5cGUsIGVudHJ5KSB7XG5cdCAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBlbnRyeVswXSwgZW50cnlbMV0pO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gbWFwSXRlcmF0b3JGcmFtZShub2RlLCBwcmV2KSB7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICBub2RlOiBub2RlLFxuXHQgICAgICBpbmRleDogMCxcblx0ICAgICAgX19wcmV2OiBwcmV2XG5cdCAgICB9O1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gbWFrZU1hcChzaXplLCByb290LCBvd25lcklELCBoYXNoKSB7XG5cdCAgICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShNYXBQcm90b3R5cGUpO1xuXHQgICAgbWFwLnNpemUgPSBzaXplO1xuXHQgICAgbWFwLl9yb290ID0gcm9vdDtcblx0ICAgIG1hcC5fX293bmVySUQgPSBvd25lcklEO1xuXHQgICAgbWFwLl9faGFzaCA9IGhhc2g7XG5cdCAgICBtYXAuX19hbHRlcmVkID0gZmFsc2U7XG5cdCAgICByZXR1cm4gbWFwO1xuXHQgIH1cblx0XG5cdCAgdmFyIEVNUFRZX01BUDtcblx0ICBmdW5jdGlvbiBlbXB0eU1hcCgpIHtcblx0ICAgIHJldHVybiBFTVBUWV9NQVAgfHwgKEVNUFRZX01BUCA9IG1ha2VNYXAoMCkpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gdXBkYXRlTWFwKG1hcCwgaywgdikge1xuXHQgICAgdmFyIG5ld1Jvb3Q7XG5cdCAgICB2YXIgbmV3U2l6ZTtcblx0ICAgIGlmICghbWFwLl9yb290KSB7XG5cdCAgICAgIGlmICh2ID09PSBOT1RfU0VUKSB7XG5cdCAgICAgICAgcmV0dXJuIG1hcDtcblx0ICAgICAgfVxuXHQgICAgICBuZXdTaXplID0gMTtcblx0ICAgICAgbmV3Um9vdCA9IG5ldyBBcnJheU1hcE5vZGUobWFwLl9fb3duZXJJRCwgW1trLCB2XV0pO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdmFyIGRpZENoYW5nZVNpemUgPSBNYWtlUmVmKENIQU5HRV9MRU5HVEgpO1xuXHQgICAgICB2YXIgZGlkQWx0ZXIgPSBNYWtlUmVmKERJRF9BTFRFUik7XG5cdCAgICAgIG5ld1Jvb3QgPSB1cGRhdGVOb2RlKG1hcC5fcm9vdCwgbWFwLl9fb3duZXJJRCwgMCwgdW5kZWZpbmVkLCBrLCB2LCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcik7XG5cdCAgICAgIGlmICghZGlkQWx0ZXIudmFsdWUpIHtcblx0ICAgICAgICByZXR1cm4gbWFwO1xuXHQgICAgICB9XG5cdCAgICAgIG5ld1NpemUgPSBtYXAuc2l6ZSArIChkaWRDaGFuZ2VTaXplLnZhbHVlID8gdiA9PT0gTk9UX1NFVCA/IC0xIDogMSA6IDApO1xuXHQgICAgfVxuXHQgICAgaWYgKG1hcC5fX293bmVySUQpIHtcblx0ICAgICAgbWFwLnNpemUgPSBuZXdTaXplO1xuXHQgICAgICBtYXAuX3Jvb3QgPSBuZXdSb290O1xuXHQgICAgICBtYXAuX19oYXNoID0gdW5kZWZpbmVkO1xuXHQgICAgICBtYXAuX19hbHRlcmVkID0gdHJ1ZTtcblx0ICAgICAgcmV0dXJuIG1hcDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBuZXdSb290ID8gbWFrZU1hcChuZXdTaXplLCBuZXdSb290KSA6IGVtcHR5TWFwKCk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiB1cGRhdGVOb2RlKG5vZGUsIG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuXHQgICAgaWYgKCFub2RlKSB7XG5cdCAgICAgIGlmICh2YWx1ZSA9PT0gTk9UX1NFVCkge1xuXHQgICAgICAgIHJldHVybiBub2RlO1xuXHQgICAgICB9XG5cdCAgICAgIFNldFJlZihkaWRBbHRlcik7XG5cdCAgICAgIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcblx0ICAgICAgcmV0dXJuIG5ldyBWYWx1ZU5vZGUob3duZXJJRCwga2V5SGFzaCwgW2tleSwgdmFsdWVdKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBub2RlLnVwZGF0ZShvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gaXNMZWFmTm9kZShub2RlKSB7XG5cdCAgICByZXR1cm4gbm9kZS5jb25zdHJ1Y3RvciA9PT0gVmFsdWVOb2RlIHx8IG5vZGUuY29uc3RydWN0b3IgPT09IEhhc2hDb2xsaXNpb25Ob2RlO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gbWVyZ2VJbnRvTm9kZShub2RlLCBvd25lcklELCBzaGlmdCwga2V5SGFzaCwgZW50cnkpIHtcblx0ICAgIGlmIChub2RlLmtleUhhc2ggPT09IGtleUhhc2gpIHtcblx0ICAgICAgcmV0dXJuIG5ldyBIYXNoQ29sbGlzaW9uTm9kZShvd25lcklELCBrZXlIYXNoLCBbbm9kZS5lbnRyeSwgZW50cnldKTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgaWR4MSA9IChzaGlmdCA9PT0gMCA/IG5vZGUua2V5SGFzaCA6IG5vZGUua2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSztcblx0ICAgIHZhciBpZHgyID0gKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG5cdFxuXHQgICAgdmFyIG5ld05vZGU7XG5cdCAgICB2YXIgbm9kZXMgPSBpZHgxID09PSBpZHgyID9cblx0ICAgICAgW21lcmdlSW50b05vZGUobm9kZSwgb3duZXJJRCwgc2hpZnQgKyBTSElGVCwga2V5SGFzaCwgZW50cnkpXSA6XG5cdCAgICAgICgobmV3Tm9kZSA9IG5ldyBWYWx1ZU5vZGUob3duZXJJRCwga2V5SGFzaCwgZW50cnkpKSwgaWR4MSA8IGlkeDIgPyBbbm9kZSwgbmV3Tm9kZV0gOiBbbmV3Tm9kZSwgbm9kZV0pO1xuXHRcblx0ICAgIHJldHVybiBuZXcgQml0bWFwSW5kZXhlZE5vZGUob3duZXJJRCwgKDEgPDwgaWR4MSkgfCAoMSA8PCBpZHgyKSwgbm9kZXMpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gY3JlYXRlTm9kZXMob3duZXJJRCwgZW50cmllcywga2V5LCB2YWx1ZSkge1xuXHQgICAgaWYgKCFvd25lcklEKSB7XG5cdCAgICAgIG93bmVySUQgPSBuZXcgT3duZXJJRCgpO1xuXHQgICAgfVxuXHQgICAgdmFyIG5vZGUgPSBuZXcgVmFsdWVOb2RlKG93bmVySUQsIGhhc2goa2V5KSwgW2tleSwgdmFsdWVdKTtcblx0ICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBlbnRyaWVzLmxlbmd0aDsgaWkrKykge1xuXHQgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2lpXTtcblx0ICAgICAgbm9kZSA9IG5vZGUudXBkYXRlKG93bmVySUQsIDAsIHVuZGVmaW5lZCwgZW50cnlbMF0sIGVudHJ5WzFdKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBub2RlO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gcGFja05vZGVzKG93bmVySUQsIG5vZGVzLCBjb3VudCwgZXhjbHVkaW5nKSB7XG5cdCAgICB2YXIgYml0bWFwID0gMDtcblx0ICAgIHZhciBwYWNrZWRJSSA9IDA7XG5cdCAgICB2YXIgcGFja2VkTm9kZXMgPSBuZXcgQXJyYXkoY291bnQpO1xuXHQgICAgZm9yICh2YXIgaWkgPSAwLCBiaXQgPSAxLCBsZW4gPSBub2Rlcy5sZW5ndGg7IGlpIDwgbGVuOyBpaSsrLCBiaXQgPDw9IDEpIHtcblx0ICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpaV07XG5cdCAgICAgIGlmIChub2RlICE9PSB1bmRlZmluZWQgJiYgaWkgIT09IGV4Y2x1ZGluZykge1xuXHQgICAgICAgIGJpdG1hcCB8PSBiaXQ7XG5cdCAgICAgICAgcGFja2VkTm9kZXNbcGFja2VkSUkrK10gPSBub2RlO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbmV3IEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsIGJpdG1hcCwgcGFja2VkTm9kZXMpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gZXhwYW5kTm9kZXMob3duZXJJRCwgbm9kZXMsIGJpdG1hcCwgaW5jbHVkaW5nLCBub2RlKSB7XG5cdCAgICB2YXIgY291bnQgPSAwO1xuXHQgICAgdmFyIGV4cGFuZGVkTm9kZXMgPSBuZXcgQXJyYXkoU0laRSk7XG5cdCAgICBmb3IgKHZhciBpaSA9IDA7IGJpdG1hcCAhPT0gMDsgaWkrKywgYml0bWFwID4+Pj0gMSkge1xuXHQgICAgICBleHBhbmRlZE5vZGVzW2lpXSA9IGJpdG1hcCAmIDEgPyBub2Rlc1tjb3VudCsrXSA6IHVuZGVmaW5lZDtcblx0ICAgIH1cblx0ICAgIGV4cGFuZGVkTm9kZXNbaW5jbHVkaW5nXSA9IG5vZGU7XG5cdCAgICByZXR1cm4gbmV3IEhhc2hBcnJheU1hcE5vZGUob3duZXJJRCwgY291bnQgKyAxLCBleHBhbmRlZE5vZGVzKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIG1lcmdlSW50b01hcFdpdGgobWFwLCBtZXJnZXIsIGl0ZXJhYmxlcykge1xuXHQgICAgdmFyIGl0ZXJzID0gW107XG5cdCAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaXRlcmFibGVzLmxlbmd0aDsgaWkrKykge1xuXHQgICAgICB2YXIgdmFsdWUgPSBpdGVyYWJsZXNbaWldO1xuXHQgICAgICB2YXIgaXRlciA9IEtleWVkSXRlcmFibGUodmFsdWUpO1xuXHQgICAgICBpZiAoIWlzSXRlcmFibGUodmFsdWUpKSB7XG5cdCAgICAgICAgaXRlciA9IGl0ZXIubWFwKGZ1bmN0aW9uKHYgKSB7cmV0dXJuIGZyb21KUyh2KX0pO1xuXHQgICAgICB9XG5cdCAgICAgIGl0ZXJzLnB1c2goaXRlcik7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbWVyZ2VJbnRvQ29sbGVjdGlvbldpdGgobWFwLCBtZXJnZXIsIGl0ZXJzKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGRlZXBNZXJnZXIobWVyZ2VyKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oZXhpc3RpbmcsIHZhbHVlKSBcblx0ICAgICAge3JldHVybiBleGlzdGluZyAmJiBleGlzdGluZy5tZXJnZURlZXBXaXRoICYmIGlzSXRlcmFibGUodmFsdWUpID9cblx0ICAgICAgICBleGlzdGluZy5tZXJnZURlZXBXaXRoKG1lcmdlciwgdmFsdWUpIDpcblx0ICAgICAgICBtZXJnZXIgPyBtZXJnZXIoZXhpc3RpbmcsIHZhbHVlKSA6IHZhbHVlfTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIG1lcmdlSW50b0NvbGxlY3Rpb25XaXRoKGNvbGxlY3Rpb24sIG1lcmdlciwgaXRlcnMpIHtcblx0ICAgIGl0ZXJzID0gaXRlcnMuZmlsdGVyKGZ1bmN0aW9uKHggKSB7cmV0dXJuIHguc2l6ZSAhPT0gMH0pO1xuXHQgICAgaWYgKGl0ZXJzLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICByZXR1cm4gY29sbGVjdGlvbjtcblx0ICAgIH1cblx0ICAgIGlmIChjb2xsZWN0aW9uLnNpemUgPT09IDAgJiYgaXRlcnMubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgIHJldHVybiBjb2xsZWN0aW9uLmNvbnN0cnVjdG9yKGl0ZXJzWzBdKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBjb2xsZWN0aW9uLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24oY29sbGVjdGlvbiApIHtcblx0ICAgICAgdmFyIG1lcmdlSW50b01hcCA9IG1lcmdlciA/XG5cdCAgICAgICAgZnVuY3Rpb24odmFsdWUsIGtleSkgIHtcblx0ICAgICAgICAgIGNvbGxlY3Rpb24udXBkYXRlKGtleSwgTk9UX1NFVCwgZnVuY3Rpb24oZXhpc3RpbmcgKVxuXHQgICAgICAgICAgICB7cmV0dXJuIGV4aXN0aW5nID09PSBOT1RfU0VUID8gdmFsdWUgOiBtZXJnZXIoZXhpc3RpbmcsIHZhbHVlKX1cblx0ICAgICAgICAgICk7XG5cdCAgICAgICAgfSA6XG5cdCAgICAgICAgZnVuY3Rpb24odmFsdWUsIGtleSkgIHtcblx0ICAgICAgICAgIGNvbGxlY3Rpb24uc2V0KGtleSwgdmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGl0ZXJzLmxlbmd0aDsgaWkrKykge1xuXHQgICAgICAgIGl0ZXJzW2lpXS5mb3JFYWNoKG1lcmdlSW50b01hcCk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gdXBkYXRlSW5EZWVwTWFwKGV4aXN0aW5nLCBrZXlQYXRoSXRlciwgbm90U2V0VmFsdWUsIHVwZGF0ZXIpIHtcblx0ICAgIHZhciBpc05vdFNldCA9IGV4aXN0aW5nID09PSBOT1RfU0VUO1xuXHQgICAgdmFyIHN0ZXAgPSBrZXlQYXRoSXRlci5uZXh0KCk7XG5cdCAgICBpZiAoc3RlcC5kb25lKSB7XG5cdCAgICAgIHZhciBleGlzdGluZ1ZhbHVlID0gaXNOb3RTZXQgPyBub3RTZXRWYWx1ZSA6IGV4aXN0aW5nO1xuXHQgICAgICB2YXIgbmV3VmFsdWUgPSB1cGRhdGVyKGV4aXN0aW5nVmFsdWUpO1xuXHQgICAgICByZXR1cm4gbmV3VmFsdWUgPT09IGV4aXN0aW5nVmFsdWUgPyBleGlzdGluZyA6IG5ld1ZhbHVlO1xuXHQgICAgfVxuXHQgICAgaW52YXJpYW50KFxuXHQgICAgICBpc05vdFNldCB8fCAoZXhpc3RpbmcgJiYgZXhpc3Rpbmcuc2V0KSxcblx0ICAgICAgJ2ludmFsaWQga2V5UGF0aCdcblx0ICAgICk7XG5cdCAgICB2YXIga2V5ID0gc3RlcC52YWx1ZTtcblx0ICAgIHZhciBuZXh0RXhpc3RpbmcgPSBpc05vdFNldCA/IE5PVF9TRVQgOiBleGlzdGluZy5nZXQoa2V5LCBOT1RfU0VUKTtcblx0ICAgIHZhciBuZXh0VXBkYXRlZCA9IHVwZGF0ZUluRGVlcE1hcChcblx0ICAgICAgbmV4dEV4aXN0aW5nLFxuXHQgICAgICBrZXlQYXRoSXRlcixcblx0ICAgICAgbm90U2V0VmFsdWUsXG5cdCAgICAgIHVwZGF0ZXJcblx0ICAgICk7XG5cdCAgICByZXR1cm4gbmV4dFVwZGF0ZWQgPT09IG5leHRFeGlzdGluZyA/IGV4aXN0aW5nIDpcblx0ICAgICAgbmV4dFVwZGF0ZWQgPT09IE5PVF9TRVQgPyBleGlzdGluZy5yZW1vdmUoa2V5KSA6XG5cdCAgICAgIChpc05vdFNldCA/IGVtcHR5TWFwKCkgOiBleGlzdGluZykuc2V0KGtleSwgbmV4dFVwZGF0ZWQpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gcG9wQ291bnQoeCkge1xuXHQgICAgeCA9IHggLSAoKHggPj4gMSkgJiAweDU1NTU1NTU1KTtcblx0ICAgIHggPSAoeCAmIDB4MzMzMzMzMzMpICsgKCh4ID4+IDIpICYgMHgzMzMzMzMzMyk7XG5cdCAgICB4ID0gKHggKyAoeCA+PiA0KSkgJiAweDBmMGYwZjBmO1xuXHQgICAgeCA9IHggKyAoeCA+PiA4KTtcblx0ICAgIHggPSB4ICsgKHggPj4gMTYpO1xuXHQgICAgcmV0dXJuIHggJiAweDdmO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gc2V0SW4oYXJyYXksIGlkeCwgdmFsLCBjYW5FZGl0KSB7XG5cdCAgICB2YXIgbmV3QXJyYXkgPSBjYW5FZGl0ID8gYXJyYXkgOiBhcnJDb3B5KGFycmF5KTtcblx0ICAgIG5ld0FycmF5W2lkeF0gPSB2YWw7XG5cdCAgICByZXR1cm4gbmV3QXJyYXk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBzcGxpY2VJbihhcnJheSwgaWR4LCB2YWwsIGNhbkVkaXQpIHtcblx0ICAgIHZhciBuZXdMZW4gPSBhcnJheS5sZW5ndGggKyAxO1xuXHQgICAgaWYgKGNhbkVkaXQgJiYgaWR4ICsgMSA9PT0gbmV3TGVuKSB7XG5cdCAgICAgIGFycmF5W2lkeF0gPSB2YWw7XG5cdCAgICAgIHJldHVybiBhcnJheTtcblx0ICAgIH1cblx0ICAgIHZhciBuZXdBcnJheSA9IG5ldyBBcnJheShuZXdMZW4pO1xuXHQgICAgdmFyIGFmdGVyID0gMDtcblx0ICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBuZXdMZW47IGlpKyspIHtcblx0ICAgICAgaWYgKGlpID09PSBpZHgpIHtcblx0ICAgICAgICBuZXdBcnJheVtpaV0gPSB2YWw7XG5cdCAgICAgICAgYWZ0ZXIgPSAtMTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBuZXdBcnJheVtpaV0gPSBhcnJheVtpaSArIGFmdGVyXTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5ld0FycmF5O1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gc3BsaWNlT3V0KGFycmF5LCBpZHgsIGNhbkVkaXQpIHtcblx0ICAgIHZhciBuZXdMZW4gPSBhcnJheS5sZW5ndGggLSAxO1xuXHQgICAgaWYgKGNhbkVkaXQgJiYgaWR4ID09PSBuZXdMZW4pIHtcblx0ICAgICAgYXJyYXkucG9wKCk7XG5cdCAgICAgIHJldHVybiBhcnJheTtcblx0ICAgIH1cblx0ICAgIHZhciBuZXdBcnJheSA9IG5ldyBBcnJheShuZXdMZW4pO1xuXHQgICAgdmFyIGFmdGVyID0gMDtcblx0ICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBuZXdMZW47IGlpKyspIHtcblx0ICAgICAgaWYgKGlpID09PSBpZHgpIHtcblx0ICAgICAgICBhZnRlciA9IDE7XG5cdCAgICAgIH1cblx0ICAgICAgbmV3QXJyYXlbaWldID0gYXJyYXlbaWkgKyBhZnRlcl07XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbmV3QXJyYXk7XG5cdCAgfVxuXHRcblx0ICB2YXIgTUFYX0FSUkFZX01BUF9TSVpFID0gU0laRSAvIDQ7XG5cdCAgdmFyIE1BWF9CSVRNQVBfSU5ERVhFRF9TSVpFID0gU0laRSAvIDI7XG5cdCAgdmFyIE1JTl9IQVNIX0FSUkFZX01BUF9TSVpFID0gU0laRSAvIDQ7XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKExpc3QsIEluZGV4ZWRDb2xsZWN0aW9uKTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIENvbnN0cnVjdGlvblxuXHRcblx0ICAgIGZ1bmN0aW9uIExpc3QodmFsdWUpIHtcblx0ICAgICAgdmFyIGVtcHR5ID0gZW1wdHlMaXN0KCk7XG5cdCAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgcmV0dXJuIGVtcHR5O1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChpc0xpc3QodmFsdWUpKSB7XG5cdCAgICAgICAgcmV0dXJuIHZhbHVlO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBpdGVyID0gSW5kZXhlZEl0ZXJhYmxlKHZhbHVlKTtcblx0ICAgICAgdmFyIHNpemUgPSBpdGVyLnNpemU7XG5cdCAgICAgIGlmIChzaXplID09PSAwKSB7XG5cdCAgICAgICAgcmV0dXJuIGVtcHR5O1xuXHQgICAgICB9XG5cdCAgICAgIGFzc2VydE5vdEluZmluaXRlKHNpemUpO1xuXHQgICAgICBpZiAoc2l6ZSA+IDAgJiYgc2l6ZSA8IFNJWkUpIHtcblx0ICAgICAgICByZXR1cm4gbWFrZUxpc3QoMCwgc2l6ZSwgU0hJRlQsIG51bGwsIG5ldyBWTm9kZShpdGVyLnRvQXJyYXkoKSkpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBlbXB0eS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKGxpc3QgKSB7XG5cdCAgICAgICAgbGlzdC5zZXRTaXplKHNpemUpO1xuXHQgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2LCBpKSAge3JldHVybiBsaXN0LnNldChpLCB2KX0pO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0XG5cdCAgICBMaXN0Lm9mID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuXHQgICAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuXHQgICAgfTtcblx0XG5cdCAgICBMaXN0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdMaXN0IFsnLCAnXScpO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXHRcblx0ICAgIExpc3QucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuXHQgICAgICBpbmRleCA9IHdyYXBJbmRleCh0aGlzLCBpbmRleCk7XG5cdCAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5zaXplKSB7XG5cdCAgICAgICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuXHQgICAgICB9XG5cdCAgICAgIGluZGV4ICs9IHRoaXMuX29yaWdpbjtcblx0ICAgICAgdmFyIG5vZGUgPSBsaXN0Tm9kZUZvcih0aGlzLCBpbmRleCk7XG5cdCAgICAgIHJldHVybiBub2RlICYmIG5vZGUuYXJyYXlbaW5kZXggJiBNQVNLXTtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblx0XG5cdCAgICBMaXN0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHVwZGF0ZUxpc3QodGhpcywgaW5kZXgsIHZhbHVlKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTGlzdC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oaW5kZXgpIHtcblx0ICAgICAgcmV0dXJuICF0aGlzLmhhcyhpbmRleCkgPyB0aGlzIDpcblx0ICAgICAgICBpbmRleCA9PT0gMCA/IHRoaXMuc2hpZnQoKSA6XG5cdCAgICAgICAgaW5kZXggPT09IHRoaXMuc2l6ZSAtIDEgPyB0aGlzLnBvcCgpIDpcblx0ICAgICAgICB0aGlzLnNwbGljZShpbmRleCwgMSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIExpc3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcblx0ICAgICAgICB0aGlzLnNpemUgPSB0aGlzLl9vcmlnaW4gPSB0aGlzLl9jYXBhY2l0eSA9IDA7XG5cdCAgICAgICAgdGhpcy5fbGV2ZWwgPSBTSElGVDtcblx0ICAgICAgICB0aGlzLl9yb290ID0gdGhpcy5fdGFpbCA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBlbXB0eUxpc3QoKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcblx0ICAgICAgdmFyIHZhbHVlcyA9IGFyZ3VtZW50cztcblx0ICAgICAgdmFyIG9sZFNpemUgPSB0aGlzLnNpemU7XG5cdCAgICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24obGlzdCApIHtcblx0ICAgICAgICBzZXRMaXN0Qm91bmRzKGxpc3QsIDAsIG9sZFNpemUgKyB2YWx1ZXMubGVuZ3RoKTtcblx0ICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgdmFsdWVzLmxlbmd0aDsgaWkrKykge1xuXHQgICAgICAgICAgbGlzdC5zZXQob2xkU2l6ZSArIGlpLCB2YWx1ZXNbaWldKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBMaXN0LnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHNldExpc3RCb3VuZHModGhpcywgMCwgLTEpO1xuXHQgICAgfTtcblx0XG5cdCAgICBMaXN0LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuXHQgICAgICB2YXIgdmFsdWVzID0gYXJndW1lbnRzO1xuXHQgICAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKGxpc3QgKSB7XG5cdCAgICAgICAgc2V0TGlzdEJvdW5kcyhsaXN0LCAtdmFsdWVzLmxlbmd0aCk7XG5cdCAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHZhbHVlcy5sZW5ndGg7IGlpKyspIHtcblx0ICAgICAgICAgIGxpc3Quc2V0KGlpLCB2YWx1ZXNbaWldKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gc2V0TGlzdEJvdW5kcyh0aGlzLCAxKTtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gQHByYWdtYSBDb21wb3NpdGlvblxuXHRcblx0ICAgIExpc3QucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24oLyouLi5pdGVycyovKSB7XG5cdCAgICAgIHJldHVybiBtZXJnZUludG9MaXN0V2l0aCh0aGlzLCB1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIExpc3QucHJvdG90eXBlLm1lcmdlV2l0aCA9IGZ1bmN0aW9uKG1lcmdlcikge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuXHQgICAgICByZXR1cm4gbWVyZ2VJbnRvTGlzdFdpdGgodGhpcywgbWVyZ2VyLCBpdGVycyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIExpc3QucHJvdG90eXBlLm1lcmdlRGVlcCA9IGZ1bmN0aW9uKC8qLi4uaXRlcnMqLykge1xuXHQgICAgICByZXR1cm4gbWVyZ2VJbnRvTGlzdFdpdGgodGhpcywgZGVlcE1lcmdlcih1bmRlZmluZWQpLCBhcmd1bWVudHMpO1xuXHQgICAgfTtcblx0XG5cdCAgICBMaXN0LnByb3RvdHlwZS5tZXJnZURlZXBXaXRoID0gZnVuY3Rpb24obWVyZ2VyKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG5cdCAgICAgIHJldHVybiBtZXJnZUludG9MaXN0V2l0aCh0aGlzLCBkZWVwTWVyZ2VyKG1lcmdlciksIGl0ZXJzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTGlzdC5wcm90b3R5cGUuc2V0U2l6ZSA9IGZ1bmN0aW9uKHNpemUpIHtcblx0ICAgICAgcmV0dXJuIHNldExpc3RCb3VuZHModGhpcywgMCwgc2l6ZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIEBwcmFnbWEgSXRlcmF0aW9uXG5cdFxuXHQgICAgTGlzdC5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG5cdCAgICAgIHZhciBzaXplID0gdGhpcy5zaXplO1xuXHQgICAgICBpZiAod2hvbGVTbGljZShiZWdpbiwgZW5kLCBzaXplKSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBzZXRMaXN0Qm91bmRzKFxuXHQgICAgICAgIHRoaXMsXG5cdCAgICAgICAgcmVzb2x2ZUJlZ2luKGJlZ2luLCBzaXplKSxcblx0ICAgICAgICByZXNvbHZlRW5kKGVuZCwgc2l6ZSlcblx0ICAgICAgKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTGlzdC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcblx0ICAgICAgdmFyIGluZGV4ID0gMDtcblx0ICAgICAgdmFyIHZhbHVlcyA9IGl0ZXJhdGVMaXN0KHRoaXMsIHJldmVyc2UpO1xuXHQgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcblx0ICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZXMoKTtcblx0ICAgICAgICByZXR1cm4gdmFsdWUgPT09IERPTkUgP1xuXHQgICAgICAgICAgaXRlcmF0b3JEb25lKCkgOlxuXHQgICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBpbmRleCsrLCB2YWx1ZSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBMaXN0LnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuXHQgICAgICB2YXIgaW5kZXggPSAwO1xuXHQgICAgICB2YXIgdmFsdWVzID0gaXRlcmF0ZUxpc3QodGhpcywgcmV2ZXJzZSk7XG5cdCAgICAgIHZhciB2YWx1ZTtcblx0ICAgICAgd2hpbGUgKCh2YWx1ZSA9IHZhbHVlcygpKSAhPT0gRE9ORSkge1xuXHQgICAgICAgIGlmIChmbih2YWx1ZSwgaW5kZXgrKywgdGhpcykgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGluZGV4O1xuXHQgICAgfTtcblx0XG5cdCAgICBMaXN0LnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24ob3duZXJJRCkge1xuXHQgICAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICBpZiAoIW93bmVySUQpIHtcblx0ICAgICAgICB0aGlzLl9fb3duZXJJRCA9IG93bmVySUQ7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG1ha2VMaXN0KHRoaXMuX29yaWdpbiwgdGhpcy5fY2FwYWNpdHksIHRoaXMuX2xldmVsLCB0aGlzLl9yb290LCB0aGlzLl90YWlsLCBvd25lcklELCB0aGlzLl9faGFzaCk7XG5cdCAgICB9O1xuXHRcblx0XG5cdCAgZnVuY3Rpb24gaXNMaXN0KG1heWJlTGlzdCkge1xuXHQgICAgcmV0dXJuICEhKG1heWJlTGlzdCAmJiBtYXliZUxpc3RbSVNfTElTVF9TRU5USU5FTF0pO1xuXHQgIH1cblx0XG5cdCAgTGlzdC5pc0xpc3QgPSBpc0xpc3Q7XG5cdFxuXHQgIHZhciBJU19MSVNUX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfTElTVF9fQEAnO1xuXHRcblx0ICB2YXIgTGlzdFByb3RvdHlwZSA9IExpc3QucHJvdG90eXBlO1xuXHQgIExpc3RQcm90b3R5cGVbSVNfTElTVF9TRU5USU5FTF0gPSB0cnVlO1xuXHQgIExpc3RQcm90b3R5cGVbREVMRVRFXSA9IExpc3RQcm90b3R5cGUucmVtb3ZlO1xuXHQgIExpc3RQcm90b3R5cGUuc2V0SW4gPSBNYXBQcm90b3R5cGUuc2V0SW47XG5cdCAgTGlzdFByb3RvdHlwZS5kZWxldGVJbiA9XG5cdCAgTGlzdFByb3RvdHlwZS5yZW1vdmVJbiA9IE1hcFByb3RvdHlwZS5yZW1vdmVJbjtcblx0ICBMaXN0UHJvdG90eXBlLnVwZGF0ZSA9IE1hcFByb3RvdHlwZS51cGRhdGU7XG5cdCAgTGlzdFByb3RvdHlwZS51cGRhdGVJbiA9IE1hcFByb3RvdHlwZS51cGRhdGVJbjtcblx0ICBMaXN0UHJvdG90eXBlLm1lcmdlSW4gPSBNYXBQcm90b3R5cGUubWVyZ2VJbjtcblx0ICBMaXN0UHJvdG90eXBlLm1lcmdlRGVlcEluID0gTWFwUHJvdG90eXBlLm1lcmdlRGVlcEluO1xuXHQgIExpc3RQcm90b3R5cGUud2l0aE11dGF0aW9ucyA9IE1hcFByb3RvdHlwZS53aXRoTXV0YXRpb25zO1xuXHQgIExpc3RQcm90b3R5cGUuYXNNdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzTXV0YWJsZTtcblx0ICBMaXN0UHJvdG90eXBlLmFzSW1tdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzSW1tdXRhYmxlO1xuXHQgIExpc3RQcm90b3R5cGUud2FzQWx0ZXJlZCA9IE1hcFByb3RvdHlwZS53YXNBbHRlcmVkO1xuXHRcblx0XG5cdFxuXHQgICAgZnVuY3Rpb24gVk5vZGUoYXJyYXksIG93bmVySUQpIHtcblx0ICAgICAgdGhpcy5hcnJheSA9IGFycmF5O1xuXHQgICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIFRPRE86IHNlZW1zIGxpa2UgdGhlc2UgbWV0aG9kcyBhcmUgdmVyeSBzaW1pbGFyXG5cdFxuXHQgICAgVk5vZGUucHJvdG90eXBlLnJlbW92ZUJlZm9yZSA9IGZ1bmN0aW9uKG93bmVySUQsIGxldmVsLCBpbmRleCkge1xuXHQgICAgICBpZiAoaW5kZXggPT09IGxldmVsID8gMSA8PCBsZXZlbCA6IDAgfHwgdGhpcy5hcnJheS5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICB2YXIgb3JpZ2luSW5kZXggPSAoaW5kZXggPj4+IGxldmVsKSAmIE1BU0s7XG5cdCAgICAgIGlmIChvcmlnaW5JbmRleCA+PSB0aGlzLmFycmF5Lmxlbmd0aCkge1xuXHQgICAgICAgIHJldHVybiBuZXcgVk5vZGUoW10sIG93bmVySUQpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciByZW1vdmluZ0ZpcnN0ID0gb3JpZ2luSW5kZXggPT09IDA7XG5cdCAgICAgIHZhciBuZXdDaGlsZDtcblx0ICAgICAgaWYgKGxldmVsID4gMCkge1xuXHQgICAgICAgIHZhciBvbGRDaGlsZCA9IHRoaXMuYXJyYXlbb3JpZ2luSW5kZXhdO1xuXHQgICAgICAgIG5ld0NoaWxkID0gb2xkQ2hpbGQgJiYgb2xkQ2hpbGQucmVtb3ZlQmVmb3JlKG93bmVySUQsIGxldmVsIC0gU0hJRlQsIGluZGV4KTtcblx0ICAgICAgICBpZiAobmV3Q2hpbGQgPT09IG9sZENoaWxkICYmIHJlbW92aW5nRmlyc3QpIHtcblx0ICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBpZiAocmVtb3ZpbmdGaXJzdCAmJiAhbmV3Q2hpbGQpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICB2YXIgZWRpdGFibGUgPSBlZGl0YWJsZVZOb2RlKHRoaXMsIG93bmVySUQpO1xuXHQgICAgICBpZiAoIXJlbW92aW5nRmlyc3QpIHtcblx0ICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgb3JpZ2luSW5kZXg7IGlpKyspIHtcblx0ICAgICAgICAgIGVkaXRhYmxlLmFycmF5W2lpXSA9IHVuZGVmaW5lZDtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKG5ld0NoaWxkKSB7XG5cdCAgICAgICAgZWRpdGFibGUuYXJyYXlbb3JpZ2luSW5kZXhdID0gbmV3Q2hpbGQ7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGVkaXRhYmxlO1xuXHQgICAgfTtcblx0XG5cdCAgICBWTm9kZS5wcm90b3R5cGUucmVtb3ZlQWZ0ZXIgPSBmdW5jdGlvbihvd25lcklELCBsZXZlbCwgaW5kZXgpIHtcblx0ICAgICAgaWYgKGluZGV4ID09PSBsZXZlbCA/IDEgPDwgbGV2ZWwgOiAwIHx8IHRoaXMuYXJyYXkubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHNpemVJbmRleCA9ICgoaW5kZXggLSAxKSA+Pj4gbGV2ZWwpICYgTUFTSztcblx0ICAgICAgaWYgKHNpemVJbmRleCA+PSB0aGlzLmFycmF5Lmxlbmd0aCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciByZW1vdmluZ0xhc3QgPSBzaXplSW5kZXggPT09IHRoaXMuYXJyYXkubGVuZ3RoIC0gMTtcblx0ICAgICAgdmFyIG5ld0NoaWxkO1xuXHQgICAgICBpZiAobGV2ZWwgPiAwKSB7XG5cdCAgICAgICAgdmFyIG9sZENoaWxkID0gdGhpcy5hcnJheVtzaXplSW5kZXhdO1xuXHQgICAgICAgIG5ld0NoaWxkID0gb2xkQ2hpbGQgJiYgb2xkQ2hpbGQucmVtb3ZlQWZ0ZXIob3duZXJJRCwgbGV2ZWwgLSBTSElGVCwgaW5kZXgpO1xuXHQgICAgICAgIGlmIChuZXdDaGlsZCA9PT0gb2xkQ2hpbGQgJiYgcmVtb3ZpbmdMYXN0KSB7XG5cdCAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHJlbW92aW5nTGFzdCAmJiAhbmV3Q2hpbGQpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICB2YXIgZWRpdGFibGUgPSBlZGl0YWJsZVZOb2RlKHRoaXMsIG93bmVySUQpO1xuXHQgICAgICBpZiAoIXJlbW92aW5nTGFzdCkge1xuXHQgICAgICAgIGVkaXRhYmxlLmFycmF5LnBvcCgpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChuZXdDaGlsZCkge1xuXHQgICAgICAgIGVkaXRhYmxlLmFycmF5W3NpemVJbmRleF0gPSBuZXdDaGlsZDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gZWRpdGFibGU7XG5cdCAgICB9O1xuXHRcblx0XG5cdFxuXHQgIHZhciBET05FID0ge307XG5cdFxuXHQgIGZ1bmN0aW9uIGl0ZXJhdGVMaXN0KGxpc3QsIHJldmVyc2UpIHtcblx0ICAgIHZhciBsZWZ0ID0gbGlzdC5fb3JpZ2luO1xuXHQgICAgdmFyIHJpZ2h0ID0gbGlzdC5fY2FwYWNpdHk7XG5cdCAgICB2YXIgdGFpbFBvcyA9IGdldFRhaWxPZmZzZXQocmlnaHQpO1xuXHQgICAgdmFyIHRhaWwgPSBsaXN0Ll90YWlsO1xuXHRcblx0ICAgIHJldHVybiBpdGVyYXRlTm9kZU9yTGVhZihsaXN0Ll9yb290LCBsaXN0Ll9sZXZlbCwgMCk7XG5cdFxuXHQgICAgZnVuY3Rpb24gaXRlcmF0ZU5vZGVPckxlYWYobm9kZSwgbGV2ZWwsIG9mZnNldCkge1xuXHQgICAgICByZXR1cm4gbGV2ZWwgPT09IDAgP1xuXHQgICAgICAgIGl0ZXJhdGVMZWFmKG5vZGUsIG9mZnNldCkgOlxuXHQgICAgICAgIGl0ZXJhdGVOb2RlKG5vZGUsIGxldmVsLCBvZmZzZXQpO1xuXHQgICAgfVxuXHRcblx0ICAgIGZ1bmN0aW9uIGl0ZXJhdGVMZWFmKG5vZGUsIG9mZnNldCkge1xuXHQgICAgICB2YXIgYXJyYXkgPSBvZmZzZXQgPT09IHRhaWxQb3MgPyB0YWlsICYmIHRhaWwuYXJyYXkgOiBub2RlICYmIG5vZGUuYXJyYXk7XG5cdCAgICAgIHZhciBmcm9tID0gb2Zmc2V0ID4gbGVmdCA/IDAgOiBsZWZ0IC0gb2Zmc2V0O1xuXHQgICAgICB2YXIgdG8gPSByaWdodCAtIG9mZnNldDtcblx0ICAgICAgaWYgKHRvID4gU0laRSkge1xuXHQgICAgICAgIHRvID0gU0laRTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gZnVuY3Rpb24oKSAge1xuXHQgICAgICAgIGlmIChmcm9tID09PSB0bykge1xuXHQgICAgICAgICAgcmV0dXJuIERPTkU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBpZHggPSByZXZlcnNlID8gLS10byA6IGZyb20rKztcblx0ICAgICAgICByZXR1cm4gYXJyYXkgJiYgYXJyYXlbaWR4XTtcblx0ICAgICAgfTtcblx0ICAgIH1cblx0XG5cdCAgICBmdW5jdGlvbiBpdGVyYXRlTm9kZShub2RlLCBsZXZlbCwgb2Zmc2V0KSB7XG5cdCAgICAgIHZhciB2YWx1ZXM7XG5cdCAgICAgIHZhciBhcnJheSA9IG5vZGUgJiYgbm9kZS5hcnJheTtcblx0ICAgICAgdmFyIGZyb20gPSBvZmZzZXQgPiBsZWZ0ID8gMCA6IChsZWZ0IC0gb2Zmc2V0KSA+PiBsZXZlbDtcblx0ICAgICAgdmFyIHRvID0gKChyaWdodCAtIG9mZnNldCkgPj4gbGV2ZWwpICsgMTtcblx0ICAgICAgaWYgKHRvID4gU0laRSkge1xuXHQgICAgICAgIHRvID0gU0laRTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gZnVuY3Rpb24oKSAge1xuXHQgICAgICAgIGRvIHtcblx0ICAgICAgICAgIGlmICh2YWx1ZXMpIHtcblx0ICAgICAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVzKCk7XG5cdCAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gRE9ORSkge1xuXHQgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB2YWx1ZXMgPSBudWxsO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgaWYgKGZyb20gPT09IHRvKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBET05FO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgdmFyIGlkeCA9IHJldmVyc2UgPyAtLXRvIDogZnJvbSsrO1xuXHQgICAgICAgICAgdmFsdWVzID0gaXRlcmF0ZU5vZGVPckxlYWYoXG5cdCAgICAgICAgICAgIGFycmF5ICYmIGFycmF5W2lkeF0sIGxldmVsIC0gU0hJRlQsIG9mZnNldCArIChpZHggPDwgbGV2ZWwpXG5cdCAgICAgICAgICApO1xuXHQgICAgICAgIH0gd2hpbGUgKHRydWUpO1xuXHQgICAgICB9O1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gbWFrZUxpc3Qob3JpZ2luLCBjYXBhY2l0eSwgbGV2ZWwsIHJvb3QsIHRhaWwsIG93bmVySUQsIGhhc2gpIHtcblx0ICAgIHZhciBsaXN0ID0gT2JqZWN0LmNyZWF0ZShMaXN0UHJvdG90eXBlKTtcblx0ICAgIGxpc3Quc2l6ZSA9IGNhcGFjaXR5IC0gb3JpZ2luO1xuXHQgICAgbGlzdC5fb3JpZ2luID0gb3JpZ2luO1xuXHQgICAgbGlzdC5fY2FwYWNpdHkgPSBjYXBhY2l0eTtcblx0ICAgIGxpc3QuX2xldmVsID0gbGV2ZWw7XG5cdCAgICBsaXN0Ll9yb290ID0gcm9vdDtcblx0ICAgIGxpc3QuX3RhaWwgPSB0YWlsO1xuXHQgICAgbGlzdC5fX293bmVySUQgPSBvd25lcklEO1xuXHQgICAgbGlzdC5fX2hhc2ggPSBoYXNoO1xuXHQgICAgbGlzdC5fX2FsdGVyZWQgPSBmYWxzZTtcblx0ICAgIHJldHVybiBsaXN0O1xuXHQgIH1cblx0XG5cdCAgdmFyIEVNUFRZX0xJU1Q7XG5cdCAgZnVuY3Rpb24gZW1wdHlMaXN0KCkge1xuXHQgICAgcmV0dXJuIEVNUFRZX0xJU1QgfHwgKEVNUFRZX0xJU1QgPSBtYWtlTGlzdCgwLCAwLCBTSElGVCkpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gdXBkYXRlTGlzdChsaXN0LCBpbmRleCwgdmFsdWUpIHtcblx0ICAgIGluZGV4ID0gd3JhcEluZGV4KGxpc3QsIGluZGV4KTtcblx0XG5cdCAgICBpZiAoaW5kZXggPj0gbGlzdC5zaXplIHx8IGluZGV4IDwgMCkge1xuXHQgICAgICByZXR1cm4gbGlzdC53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKGxpc3QgKSB7XG5cdCAgICAgICAgaW5kZXggPCAwID9cblx0ICAgICAgICAgIHNldExpc3RCb3VuZHMobGlzdCwgaW5kZXgpLnNldCgwLCB2YWx1ZSkgOlxuXHQgICAgICAgICAgc2V0TGlzdEJvdW5kcyhsaXN0LCAwLCBpbmRleCArIDEpLnNldChpbmRleCwgdmFsdWUpXG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHRcblx0ICAgIGluZGV4ICs9IGxpc3QuX29yaWdpbjtcblx0XG5cdCAgICB2YXIgbmV3VGFpbCA9IGxpc3QuX3RhaWw7XG5cdCAgICB2YXIgbmV3Um9vdCA9IGxpc3QuX3Jvb3Q7XG5cdCAgICB2YXIgZGlkQWx0ZXIgPSBNYWtlUmVmKERJRF9BTFRFUik7XG5cdCAgICBpZiAoaW5kZXggPj0gZ2V0VGFpbE9mZnNldChsaXN0Ll9jYXBhY2l0eSkpIHtcblx0ICAgICAgbmV3VGFpbCA9IHVwZGF0ZVZOb2RlKG5ld1RhaWwsIGxpc3QuX19vd25lcklELCAwLCBpbmRleCwgdmFsdWUsIGRpZEFsdGVyKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIG5ld1Jvb3QgPSB1cGRhdGVWTm9kZShuZXdSb290LCBsaXN0Ll9fb3duZXJJRCwgbGlzdC5fbGV2ZWwsIGluZGV4LCB2YWx1ZSwgZGlkQWx0ZXIpO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmICghZGlkQWx0ZXIudmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIGxpc3Q7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKGxpc3QuX19vd25lcklEKSB7XG5cdCAgICAgIGxpc3QuX3Jvb3QgPSBuZXdSb290O1xuXHQgICAgICBsaXN0Ll90YWlsID0gbmV3VGFpbDtcblx0ICAgICAgbGlzdC5fX2hhc2ggPSB1bmRlZmluZWQ7XG5cdCAgICAgIGxpc3QuX19hbHRlcmVkID0gdHJ1ZTtcblx0ICAgICAgcmV0dXJuIGxpc3Q7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbWFrZUxpc3QobGlzdC5fb3JpZ2luLCBsaXN0Ll9jYXBhY2l0eSwgbGlzdC5fbGV2ZWwsIG5ld1Jvb3QsIG5ld1RhaWwpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gdXBkYXRlVk5vZGUobm9kZSwgb3duZXJJRCwgbGV2ZWwsIGluZGV4LCB2YWx1ZSwgZGlkQWx0ZXIpIHtcblx0ICAgIHZhciBpZHggPSAoaW5kZXggPj4+IGxldmVsKSAmIE1BU0s7XG5cdCAgICB2YXIgbm9kZUhhcyA9IG5vZGUgJiYgaWR4IDwgbm9kZS5hcnJheS5sZW5ndGg7XG5cdCAgICBpZiAoIW5vZGVIYXMgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICByZXR1cm4gbm9kZTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgbmV3Tm9kZTtcblx0XG5cdCAgICBpZiAobGV2ZWwgPiAwKSB7XG5cdCAgICAgIHZhciBsb3dlck5vZGUgPSBub2RlICYmIG5vZGUuYXJyYXlbaWR4XTtcblx0ICAgICAgdmFyIG5ld0xvd2VyTm9kZSA9IHVwZGF0ZVZOb2RlKGxvd2VyTm9kZSwgb3duZXJJRCwgbGV2ZWwgLSBTSElGVCwgaW5kZXgsIHZhbHVlLCBkaWRBbHRlcik7XG5cdCAgICAgIGlmIChuZXdMb3dlck5vZGUgPT09IGxvd2VyTm9kZSkge1xuXHQgICAgICAgIHJldHVybiBub2RlO1xuXHQgICAgICB9XG5cdCAgICAgIG5ld05vZGUgPSBlZGl0YWJsZVZOb2RlKG5vZGUsIG93bmVySUQpO1xuXHQgICAgICBuZXdOb2RlLmFycmF5W2lkeF0gPSBuZXdMb3dlck5vZGU7XG5cdCAgICAgIHJldHVybiBuZXdOb2RlO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmIChub2RlSGFzICYmIG5vZGUuYXJyYXlbaWR4XSA9PT0gdmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIG5vZGU7XG5cdCAgICB9XG5cdFxuXHQgICAgU2V0UmVmKGRpZEFsdGVyKTtcblx0XG5cdCAgICBuZXdOb2RlID0gZWRpdGFibGVWTm9kZShub2RlLCBvd25lcklEKTtcblx0ICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGlkeCA9PT0gbmV3Tm9kZS5hcnJheS5sZW5ndGggLSAxKSB7XG5cdCAgICAgIG5ld05vZGUuYXJyYXkucG9wKCk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBuZXdOb2RlLmFycmF5W2lkeF0gPSB2YWx1ZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBuZXdOb2RlO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gZWRpdGFibGVWTm9kZShub2RlLCBvd25lcklEKSB7XG5cdCAgICBpZiAob3duZXJJRCAmJiBub2RlICYmIG93bmVySUQgPT09IG5vZGUub3duZXJJRCkge1xuXHQgICAgICByZXR1cm4gbm9kZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBuZXcgVk5vZGUobm9kZSA/IG5vZGUuYXJyYXkuc2xpY2UoKSA6IFtdLCBvd25lcklEKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGxpc3ROb2RlRm9yKGxpc3QsIHJhd0luZGV4KSB7XG5cdCAgICBpZiAocmF3SW5kZXggPj0gZ2V0VGFpbE9mZnNldChsaXN0Ll9jYXBhY2l0eSkpIHtcblx0ICAgICAgcmV0dXJuIGxpc3QuX3RhaWw7XG5cdCAgICB9XG5cdCAgICBpZiAocmF3SW5kZXggPCAxIDw8IChsaXN0Ll9sZXZlbCArIFNISUZUKSkge1xuXHQgICAgICB2YXIgbm9kZSA9IGxpc3QuX3Jvb3Q7XG5cdCAgICAgIHZhciBsZXZlbCA9IGxpc3QuX2xldmVsO1xuXHQgICAgICB3aGlsZSAobm9kZSAmJiBsZXZlbCA+IDApIHtcblx0ICAgICAgICBub2RlID0gbm9kZS5hcnJheVsocmF3SW5kZXggPj4+IGxldmVsKSAmIE1BU0tdO1xuXHQgICAgICAgIGxldmVsIC09IFNISUZUO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBub2RlO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gc2V0TGlzdEJvdW5kcyhsaXN0LCBiZWdpbiwgZW5kKSB7XG5cdCAgICB2YXIgb3duZXIgPSBsaXN0Ll9fb3duZXJJRCB8fCBuZXcgT3duZXJJRCgpO1xuXHQgICAgdmFyIG9sZE9yaWdpbiA9IGxpc3QuX29yaWdpbjtcblx0ICAgIHZhciBvbGRDYXBhY2l0eSA9IGxpc3QuX2NhcGFjaXR5O1xuXHQgICAgdmFyIG5ld09yaWdpbiA9IG9sZE9yaWdpbiArIGJlZ2luO1xuXHQgICAgdmFyIG5ld0NhcGFjaXR5ID0gZW5kID09PSB1bmRlZmluZWQgPyBvbGRDYXBhY2l0eSA6IGVuZCA8IDAgPyBvbGRDYXBhY2l0eSArIGVuZCA6IG9sZE9yaWdpbiArIGVuZDtcblx0ICAgIGlmIChuZXdPcmlnaW4gPT09IG9sZE9yaWdpbiAmJiBuZXdDYXBhY2l0eSA9PT0gb2xkQ2FwYWNpdHkpIHtcblx0ICAgICAgcmV0dXJuIGxpc3Q7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gSWYgaXQncyBnb2luZyB0byBlbmQgYWZ0ZXIgaXQgc3RhcnRzLCBpdCdzIGVtcHR5LlxuXHQgICAgaWYgKG5ld09yaWdpbiA+PSBuZXdDYXBhY2l0eSkge1xuXHQgICAgICByZXR1cm4gbGlzdC5jbGVhcigpO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBuZXdMZXZlbCA9IGxpc3QuX2xldmVsO1xuXHQgICAgdmFyIG5ld1Jvb3QgPSBsaXN0Ll9yb290O1xuXHRcblx0ICAgIC8vIE5ldyBvcmlnaW4gbWlnaHQgcmVxdWlyZSBjcmVhdGluZyBhIGhpZ2hlciByb290LlxuXHQgICAgdmFyIG9mZnNldFNoaWZ0ID0gMDtcblx0ICAgIHdoaWxlIChuZXdPcmlnaW4gKyBvZmZzZXRTaGlmdCA8IDApIHtcblx0ICAgICAgbmV3Um9vdCA9IG5ldyBWTm9kZShuZXdSb290ICYmIG5ld1Jvb3QuYXJyYXkubGVuZ3RoID8gW3VuZGVmaW5lZCwgbmV3Um9vdF0gOiBbXSwgb3duZXIpO1xuXHQgICAgICBuZXdMZXZlbCArPSBTSElGVDtcblx0ICAgICAgb2Zmc2V0U2hpZnQgKz0gMSA8PCBuZXdMZXZlbDtcblx0ICAgIH1cblx0ICAgIGlmIChvZmZzZXRTaGlmdCkge1xuXHQgICAgICBuZXdPcmlnaW4gKz0gb2Zmc2V0U2hpZnQ7XG5cdCAgICAgIG9sZE9yaWdpbiArPSBvZmZzZXRTaGlmdDtcblx0ICAgICAgbmV3Q2FwYWNpdHkgKz0gb2Zmc2V0U2hpZnQ7XG5cdCAgICAgIG9sZENhcGFjaXR5ICs9IG9mZnNldFNoaWZ0O1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBvbGRUYWlsT2Zmc2V0ID0gZ2V0VGFpbE9mZnNldChvbGRDYXBhY2l0eSk7XG5cdCAgICB2YXIgbmV3VGFpbE9mZnNldCA9IGdldFRhaWxPZmZzZXQobmV3Q2FwYWNpdHkpO1xuXHRcblx0ICAgIC8vIE5ldyBzaXplIG1pZ2h0IHJlcXVpcmUgY3JlYXRpbmcgYSBoaWdoZXIgcm9vdC5cblx0ICAgIHdoaWxlIChuZXdUYWlsT2Zmc2V0ID49IDEgPDwgKG5ld0xldmVsICsgU0hJRlQpKSB7XG5cdCAgICAgIG5ld1Jvb3QgPSBuZXcgVk5vZGUobmV3Um9vdCAmJiBuZXdSb290LmFycmF5Lmxlbmd0aCA/IFtuZXdSb290XSA6IFtdLCBvd25lcik7XG5cdCAgICAgIG5ld0xldmVsICs9IFNISUZUO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIExvY2F0ZSBvciBjcmVhdGUgdGhlIG5ldyB0YWlsLlxuXHQgICAgdmFyIG9sZFRhaWwgPSBsaXN0Ll90YWlsO1xuXHQgICAgdmFyIG5ld1RhaWwgPSBuZXdUYWlsT2Zmc2V0IDwgb2xkVGFpbE9mZnNldCA/XG5cdCAgICAgIGxpc3ROb2RlRm9yKGxpc3QsIG5ld0NhcGFjaXR5IC0gMSkgOlxuXHQgICAgICBuZXdUYWlsT2Zmc2V0ID4gb2xkVGFpbE9mZnNldCA/IG5ldyBWTm9kZShbXSwgb3duZXIpIDogb2xkVGFpbDtcblx0XG5cdCAgICAvLyBNZXJnZSBUYWlsIGludG8gdHJlZS5cblx0ICAgIGlmIChvbGRUYWlsICYmIG5ld1RhaWxPZmZzZXQgPiBvbGRUYWlsT2Zmc2V0ICYmIG5ld09yaWdpbiA8IG9sZENhcGFjaXR5ICYmIG9sZFRhaWwuYXJyYXkubGVuZ3RoKSB7XG5cdCAgICAgIG5ld1Jvb3QgPSBlZGl0YWJsZVZOb2RlKG5ld1Jvb3QsIG93bmVyKTtcblx0ICAgICAgdmFyIG5vZGUgPSBuZXdSb290O1xuXHQgICAgICBmb3IgKHZhciBsZXZlbCA9IG5ld0xldmVsOyBsZXZlbCA+IFNISUZUOyBsZXZlbCAtPSBTSElGVCkge1xuXHQgICAgICAgIHZhciBpZHggPSAob2xkVGFpbE9mZnNldCA+Pj4gbGV2ZWwpICYgTUFTSztcblx0ICAgICAgICBub2RlID0gbm9kZS5hcnJheVtpZHhdID0gZWRpdGFibGVWTm9kZShub2RlLmFycmF5W2lkeF0sIG93bmVyKTtcblx0ICAgICAgfVxuXHQgICAgICBub2RlLmFycmF5WyhvbGRUYWlsT2Zmc2V0ID4+PiBTSElGVCkgJiBNQVNLXSA9IG9sZFRhaWw7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gSWYgdGhlIHNpemUgaGFzIGJlZW4gcmVkdWNlZCwgdGhlcmUncyBhIGNoYW5jZSB0aGUgdGFpbCBuZWVkcyB0byBiZSB0cmltbWVkLlxuXHQgICAgaWYgKG5ld0NhcGFjaXR5IDwgb2xkQ2FwYWNpdHkpIHtcblx0ICAgICAgbmV3VGFpbCA9IG5ld1RhaWwgJiYgbmV3VGFpbC5yZW1vdmVBZnRlcihvd25lciwgMCwgbmV3Q2FwYWNpdHkpO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIElmIHRoZSBuZXcgb3JpZ2luIGlzIHdpdGhpbiB0aGUgdGFpbCwgdGhlbiB3ZSBkbyBub3QgbmVlZCBhIHJvb3QuXG5cdCAgICBpZiAobmV3T3JpZ2luID49IG5ld1RhaWxPZmZzZXQpIHtcblx0ICAgICAgbmV3T3JpZ2luIC09IG5ld1RhaWxPZmZzZXQ7XG5cdCAgICAgIG5ld0NhcGFjaXR5IC09IG5ld1RhaWxPZmZzZXQ7XG5cdCAgICAgIG5ld0xldmVsID0gU0hJRlQ7XG5cdCAgICAgIG5ld1Jvb3QgPSBudWxsO1xuXHQgICAgICBuZXdUYWlsID0gbmV3VGFpbCAmJiBuZXdUYWlsLnJlbW92ZUJlZm9yZShvd25lciwgMCwgbmV3T3JpZ2luKTtcblx0XG5cdCAgICAvLyBPdGhlcndpc2UsIGlmIHRoZSByb290IGhhcyBiZWVuIHRyaW1tZWQsIGdhcmJhZ2UgY29sbGVjdC5cblx0ICAgIH0gZWxzZSBpZiAobmV3T3JpZ2luID4gb2xkT3JpZ2luIHx8IG5ld1RhaWxPZmZzZXQgPCBvbGRUYWlsT2Zmc2V0KSB7XG5cdCAgICAgIG9mZnNldFNoaWZ0ID0gMDtcblx0XG5cdCAgICAgIC8vIElkZW50aWZ5IHRoZSBuZXcgdG9wIHJvb3Qgbm9kZSBvZiB0aGUgc3VidHJlZSBvZiB0aGUgb2xkIHJvb3QuXG5cdCAgICAgIHdoaWxlIChuZXdSb290KSB7XG5cdCAgICAgICAgdmFyIGJlZ2luSW5kZXggPSAobmV3T3JpZ2luID4+PiBuZXdMZXZlbCkgJiBNQVNLO1xuXHQgICAgICAgIGlmIChiZWdpbkluZGV4ICE9PSAobmV3VGFpbE9mZnNldCA+Pj4gbmV3TGV2ZWwpICYgTUFTSykge1xuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChiZWdpbkluZGV4KSB7XG5cdCAgICAgICAgICBvZmZzZXRTaGlmdCArPSAoMSA8PCBuZXdMZXZlbCkgKiBiZWdpbkluZGV4O1xuXHQgICAgICAgIH1cblx0ICAgICAgICBuZXdMZXZlbCAtPSBTSElGVDtcblx0ICAgICAgICBuZXdSb290ID0gbmV3Um9vdC5hcnJheVtiZWdpbkluZGV4XTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgLy8gVHJpbSB0aGUgbmV3IHNpZGVzIG9mIHRoZSBuZXcgcm9vdC5cblx0ICAgICAgaWYgKG5ld1Jvb3QgJiYgbmV3T3JpZ2luID4gb2xkT3JpZ2luKSB7XG5cdCAgICAgICAgbmV3Um9vdCA9IG5ld1Jvb3QucmVtb3ZlQmVmb3JlKG93bmVyLCBuZXdMZXZlbCwgbmV3T3JpZ2luIC0gb2Zmc2V0U2hpZnQpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChuZXdSb290ICYmIG5ld1RhaWxPZmZzZXQgPCBvbGRUYWlsT2Zmc2V0KSB7XG5cdCAgICAgICAgbmV3Um9vdCA9IG5ld1Jvb3QucmVtb3ZlQWZ0ZXIob3duZXIsIG5ld0xldmVsLCBuZXdUYWlsT2Zmc2V0IC0gb2Zmc2V0U2hpZnQpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChvZmZzZXRTaGlmdCkge1xuXHQgICAgICAgIG5ld09yaWdpbiAtPSBvZmZzZXRTaGlmdDtcblx0ICAgICAgICBuZXdDYXBhY2l0eSAtPSBvZmZzZXRTaGlmdDtcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIGlmIChsaXN0Ll9fb3duZXJJRCkge1xuXHQgICAgICBsaXN0LnNpemUgPSBuZXdDYXBhY2l0eSAtIG5ld09yaWdpbjtcblx0ICAgICAgbGlzdC5fb3JpZ2luID0gbmV3T3JpZ2luO1xuXHQgICAgICBsaXN0Ll9jYXBhY2l0eSA9IG5ld0NhcGFjaXR5O1xuXHQgICAgICBsaXN0Ll9sZXZlbCA9IG5ld0xldmVsO1xuXHQgICAgICBsaXN0Ll9yb290ID0gbmV3Um9vdDtcblx0ICAgICAgbGlzdC5fdGFpbCA9IG5ld1RhaWw7XG5cdCAgICAgIGxpc3QuX19oYXNoID0gdW5kZWZpbmVkO1xuXHQgICAgICBsaXN0Ll9fYWx0ZXJlZCA9IHRydWU7XG5cdCAgICAgIHJldHVybiBsaXN0O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG1ha2VMaXN0KG5ld09yaWdpbiwgbmV3Q2FwYWNpdHksIG5ld0xldmVsLCBuZXdSb290LCBuZXdUYWlsKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIG1lcmdlSW50b0xpc3RXaXRoKGxpc3QsIG1lcmdlciwgaXRlcmFibGVzKSB7XG5cdCAgICB2YXIgaXRlcnMgPSBbXTtcblx0ICAgIHZhciBtYXhTaXplID0gMDtcblx0ICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBpdGVyYWJsZXMubGVuZ3RoOyBpaSsrKSB7XG5cdCAgICAgIHZhciB2YWx1ZSA9IGl0ZXJhYmxlc1tpaV07XG5cdCAgICAgIHZhciBpdGVyID0gSW5kZXhlZEl0ZXJhYmxlKHZhbHVlKTtcblx0ICAgICAgaWYgKGl0ZXIuc2l6ZSA+IG1heFNpemUpIHtcblx0ICAgICAgICBtYXhTaXplID0gaXRlci5zaXplO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICghaXNJdGVyYWJsZSh2YWx1ZSkpIHtcblx0ICAgICAgICBpdGVyID0gaXRlci5tYXAoZnVuY3Rpb24odiApIHtyZXR1cm4gZnJvbUpTKHYpfSk7XG5cdCAgICAgIH1cblx0ICAgICAgaXRlcnMucHVzaChpdGVyKTtcblx0ICAgIH1cblx0ICAgIGlmIChtYXhTaXplID4gbGlzdC5zaXplKSB7XG5cdCAgICAgIGxpc3QgPSBsaXN0LnNldFNpemUobWF4U2l6ZSk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gbWVyZ2VJbnRvQ29sbGVjdGlvbldpdGgobGlzdCwgbWVyZ2VyLCBpdGVycyk7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBnZXRUYWlsT2Zmc2V0KHNpemUpIHtcblx0ICAgIHJldHVybiBzaXplIDwgU0laRSA/IDAgOiAoKChzaXplIC0gMSkgPj4+IFNISUZUKSA8PCBTSElGVCk7XG5cdCAgfVxuXHRcblx0ICBjcmVhdGVDbGFzcyhPcmRlcmVkTWFwLCBNYXApO1xuXHRcblx0ICAgIC8vIEBwcmFnbWEgQ29uc3RydWN0aW9uXG5cdFxuXHQgICAgZnVuY3Rpb24gT3JkZXJlZE1hcCh2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5T3JkZXJlZE1hcCgpIDpcblx0ICAgICAgICBpc09yZGVyZWRNYXAodmFsdWUpID8gdmFsdWUgOlxuXHQgICAgICAgIGVtcHR5T3JkZXJlZE1hcCgpLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24obWFwICkge1xuXHQgICAgICAgICAgdmFyIGl0ZXIgPSBLZXllZEl0ZXJhYmxlKHZhbHVlKTtcblx0ICAgICAgICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG5cdCAgICAgICAgICBpdGVyLmZvckVhY2goZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gbWFwLnNldChrLCB2KX0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHRcblx0ICAgIE9yZGVyZWRNYXAub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG5cdCAgICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ09yZGVyZWRNYXAgeycsICd9Jyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIEBwcmFnbWEgQWNjZXNzXG5cdFxuXHQgICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaywgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgdmFyIGluZGV4ID0gdGhpcy5fbWFwLmdldChrKTtcblx0ICAgICAgcmV0dXJuIGluZGV4ICE9PSB1bmRlZmluZWQgPyB0aGlzLl9saXN0LmdldChpbmRleClbMV0gOiBub3RTZXRWYWx1ZTtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblx0XG5cdCAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG5cdCAgICAgICAgdGhpcy5zaXplID0gMDtcblx0ICAgICAgICB0aGlzLl9tYXAuY2xlYXIoKTtcblx0ICAgICAgICB0aGlzLl9saXN0LmNsZWFyKCk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGVtcHR5T3JkZXJlZE1hcCgpO1xuXHQgICAgfTtcblx0XG5cdCAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrLCB2KSB7XG5cdCAgICAgIHJldHVybiB1cGRhdGVPcmRlcmVkTWFwKHRoaXMsIGssIHYpO1xuXHQgICAgfTtcblx0XG5cdCAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihrKSB7XG5cdCAgICAgIHJldHVybiB1cGRhdGVPcmRlcmVkTWFwKHRoaXMsIGssIE5PVF9TRVQpO1xuXHQgICAgfTtcblx0XG5cdCAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9tYXAud2FzQWx0ZXJlZCgpIHx8IHRoaXMuX2xpc3Qud2FzQWx0ZXJlZCgpO1xuXHQgICAgfTtcblx0XG5cdCAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICByZXR1cm4gdGhpcy5fbGlzdC5fX2l0ZXJhdGUoXG5cdCAgICAgICAgZnVuY3Rpb24oZW50cnkgKSB7cmV0dXJuIGVudHJ5ICYmIGZuKGVudHJ5WzFdLCBlbnRyeVswXSwgdGhpcyQwKX0sXG5cdCAgICAgICAgcmV2ZXJzZVxuXHQgICAgICApO1xuXHQgICAgfTtcblx0XG5cdCAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fbGlzdC5mcm9tRW50cnlTZXEoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuXHQgICAgfTtcblx0XG5cdCAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24ob3duZXJJRCkge1xuXHQgICAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICB2YXIgbmV3TWFwID0gdGhpcy5fbWFwLl9fZW5zdXJlT3duZXIob3duZXJJRCk7XG5cdCAgICAgIHZhciBuZXdMaXN0ID0gdGhpcy5fbGlzdC5fX2Vuc3VyZU93bmVyKG93bmVySUQpO1xuXHQgICAgICBpZiAoIW93bmVySUQpIHtcblx0ICAgICAgICB0aGlzLl9fb3duZXJJRCA9IG93bmVySUQ7XG5cdCAgICAgICAgdGhpcy5fbWFwID0gbmV3TWFwO1xuXHQgICAgICAgIHRoaXMuX2xpc3QgPSBuZXdMaXN0O1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBtYWtlT3JkZXJlZE1hcChuZXdNYXAsIG5ld0xpc3QsIG93bmVySUQsIHRoaXMuX19oYXNoKTtcblx0ICAgIH07XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBpc09yZGVyZWRNYXAobWF5YmVPcmRlcmVkTWFwKSB7XG5cdCAgICByZXR1cm4gaXNNYXAobWF5YmVPcmRlcmVkTWFwKSAmJiBpc09yZGVyZWQobWF5YmVPcmRlcmVkTWFwKTtcblx0ICB9XG5cdFxuXHQgIE9yZGVyZWRNYXAuaXNPcmRlcmVkTWFwID0gaXNPcmRlcmVkTWFwO1xuXHRcblx0ICBPcmRlcmVkTWFwLnByb3RvdHlwZVtJU19PUkRFUkVEX1NFTlRJTkVMXSA9IHRydWU7XG5cdCAgT3JkZXJlZE1hcC5wcm90b3R5cGVbREVMRVRFXSA9IE9yZGVyZWRNYXAucHJvdG90eXBlLnJlbW92ZTtcblx0XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBtYWtlT3JkZXJlZE1hcChtYXAsIGxpc3QsIG93bmVySUQsIGhhc2gpIHtcblx0ICAgIHZhciBvbWFwID0gT2JqZWN0LmNyZWF0ZShPcmRlcmVkTWFwLnByb3RvdHlwZSk7XG5cdCAgICBvbWFwLnNpemUgPSBtYXAgPyBtYXAuc2l6ZSA6IDA7XG5cdCAgICBvbWFwLl9tYXAgPSBtYXA7XG5cdCAgICBvbWFwLl9saXN0ID0gbGlzdDtcblx0ICAgIG9tYXAuX19vd25lcklEID0gb3duZXJJRDtcblx0ICAgIG9tYXAuX19oYXNoID0gaGFzaDtcblx0ICAgIHJldHVybiBvbWFwO1xuXHQgIH1cblx0XG5cdCAgdmFyIEVNUFRZX09SREVSRURfTUFQO1xuXHQgIGZ1bmN0aW9uIGVtcHR5T3JkZXJlZE1hcCgpIHtcblx0ICAgIHJldHVybiBFTVBUWV9PUkRFUkVEX01BUCB8fCAoRU1QVFlfT1JERVJFRF9NQVAgPSBtYWtlT3JkZXJlZE1hcChlbXB0eU1hcCgpLCBlbXB0eUxpc3QoKSkpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gdXBkYXRlT3JkZXJlZE1hcChvbWFwLCBrLCB2KSB7XG5cdCAgICB2YXIgbWFwID0gb21hcC5fbWFwO1xuXHQgICAgdmFyIGxpc3QgPSBvbWFwLl9saXN0O1xuXHQgICAgdmFyIGkgPSBtYXAuZ2V0KGspO1xuXHQgICAgdmFyIGhhcyA9IGkgIT09IHVuZGVmaW5lZDtcblx0ICAgIHZhciBuZXdNYXA7XG5cdCAgICB2YXIgbmV3TGlzdDtcblx0ICAgIGlmICh2ID09PSBOT1RfU0VUKSB7IC8vIHJlbW92ZWRcblx0ICAgICAgaWYgKCFoYXMpIHtcblx0ICAgICAgICByZXR1cm4gb21hcDtcblx0ICAgICAgfVxuXHQgICAgICBpZiAobGlzdC5zaXplID49IFNJWkUgJiYgbGlzdC5zaXplID49IG1hcC5zaXplICogMikge1xuXHQgICAgICAgIG5ld0xpc3QgPSBsaXN0LmZpbHRlcihmdW5jdGlvbihlbnRyeSwgaWR4KSAge3JldHVybiBlbnRyeSAhPT0gdW5kZWZpbmVkICYmIGkgIT09IGlkeH0pO1xuXHQgICAgICAgIG5ld01hcCA9IG5ld0xpc3QudG9LZXllZFNlcSgpLm1hcChmdW5jdGlvbihlbnRyeSApIHtyZXR1cm4gZW50cnlbMF19KS5mbGlwKCkudG9NYXAoKTtcblx0ICAgICAgICBpZiAob21hcC5fX293bmVySUQpIHtcblx0ICAgICAgICAgIG5ld01hcC5fX293bmVySUQgPSBuZXdMaXN0Ll9fb3duZXJJRCA9IG9tYXAuX19vd25lcklEO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBuZXdNYXAgPSBtYXAucmVtb3ZlKGspO1xuXHQgICAgICAgIG5ld0xpc3QgPSBpID09PSBsaXN0LnNpemUgLSAxID8gbGlzdC5wb3AoKSA6IGxpc3Quc2V0KGksIHVuZGVmaW5lZCk7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGlmIChoYXMpIHtcblx0ICAgICAgICBpZiAodiA9PT0gbGlzdC5nZXQoaSlbMV0pIHtcblx0ICAgICAgICAgIHJldHVybiBvbWFwO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBuZXdNYXAgPSBtYXA7XG5cdCAgICAgICAgbmV3TGlzdCA9IGxpc3Quc2V0KGksIFtrLCB2XSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgbmV3TWFwID0gbWFwLnNldChrLCBsaXN0LnNpemUpO1xuXHQgICAgICAgIG5ld0xpc3QgPSBsaXN0LnNldChsaXN0LnNpemUsIFtrLCB2XSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGlmIChvbWFwLl9fb3duZXJJRCkge1xuXHQgICAgICBvbWFwLnNpemUgPSBuZXdNYXAuc2l6ZTtcblx0ICAgICAgb21hcC5fbWFwID0gbmV3TWFwO1xuXHQgICAgICBvbWFwLl9saXN0ID0gbmV3TGlzdDtcblx0ICAgICAgb21hcC5fX2hhc2ggPSB1bmRlZmluZWQ7XG5cdCAgICAgIHJldHVybiBvbWFwO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG1ha2VPcmRlcmVkTWFwKG5ld01hcCwgbmV3TGlzdCk7XG5cdCAgfVxuXHRcblx0ICBjcmVhdGVDbGFzcyhTdGFjaywgSW5kZXhlZENvbGxlY3Rpb24pO1xuXHRcblx0ICAgIC8vIEBwcmFnbWEgQ29uc3RydWN0aW9uXG5cdFxuXHQgICAgZnVuY3Rpb24gU3RhY2sodmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eVN0YWNrKCkgOlxuXHQgICAgICAgIGlzU3RhY2sodmFsdWUpID8gdmFsdWUgOlxuXHQgICAgICAgIGVtcHR5U3RhY2soKS51bnNoaWZ0QWxsKHZhbHVlKTtcblx0ICAgIH1cblx0XG5cdCAgICBTdGFjay5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcblx0ICAgICAgcmV0dXJuIHRoaXMoYXJndW1lbnRzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU3RhY2sucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ1N0YWNrIFsnLCAnXScpO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXHRcblx0ICAgIFN0YWNrLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuXHQgICAgICB3aGlsZSAoaGVhZCAmJiBpbmRleC0tKSB7XG5cdCAgICAgICAgaGVhZCA9IGhlYWQubmV4dDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gaGVhZCA/IGhlYWQudmFsdWUgOiBub3RTZXRWYWx1ZTtcblx0ICAgIH07XG5cdFxuXHQgICAgU3RhY2sucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX2hlYWQgJiYgdGhpcy5faGVhZC52YWx1ZTtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblx0XG5cdCAgICBTdGFjay5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcblx0ICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICB2YXIgbmV3U2l6ZSA9IHRoaXMuc2l6ZSArIGFyZ3VtZW50cy5sZW5ndGg7XG5cdCAgICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcblx0ICAgICAgZm9yICh2YXIgaWkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaWkgPj0gMDsgaWktLSkge1xuXHQgICAgICAgIGhlYWQgPSB7XG5cdCAgICAgICAgICB2YWx1ZTogYXJndW1lbnRzW2lpXSxcblx0ICAgICAgICAgIG5leHQ6IGhlYWRcblx0ICAgICAgICB9O1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuXHQgICAgICAgIHRoaXMuc2l6ZSA9IG5ld1NpemU7XG5cdCAgICAgICAgdGhpcy5faGVhZCA9IGhlYWQ7XG5cdCAgICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBtYWtlU3RhY2sobmV3U2l6ZSwgaGVhZCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFN0YWNrLnByb3RvdHlwZS5wdXNoQWxsID0gZnVuY3Rpb24oaXRlcikge1xuXHQgICAgICBpdGVyID0gSW5kZXhlZEl0ZXJhYmxlKGl0ZXIpO1xuXHQgICAgICBpZiAoaXRlci5zaXplID09PSAwKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcblx0ICAgICAgdmFyIG5ld1NpemUgPSB0aGlzLnNpemU7XG5cdCAgICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcblx0ICAgICAgaXRlci5yZXZlcnNlKCkuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSApIHtcblx0ICAgICAgICBuZXdTaXplKys7XG5cdCAgICAgICAgaGVhZCA9IHtcblx0ICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcblx0ICAgICAgICAgIG5leHQ6IGhlYWRcblx0ICAgICAgICB9O1xuXHQgICAgICB9KTtcblx0ICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG5cdCAgICAgICAgdGhpcy5zaXplID0gbmV3U2l6ZTtcblx0ICAgICAgICB0aGlzLl9oZWFkID0gaGVhZDtcblx0ICAgICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcblx0ICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG1ha2VTdGFjayhuZXdTaXplLCBoZWFkKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU3RhY2sucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5zbGljZSgxKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU3RhY2sucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnB1c2guYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU3RhY2sucHJvdG90eXBlLnVuc2hpZnRBbGwgPSBmdW5jdGlvbihpdGVyKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnB1c2hBbGwoaXRlcik7XG5cdCAgICB9O1xuXHRcblx0ICAgIFN0YWNrLnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5wb3AuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcblx0ICAgICAgICB0aGlzLnNpemUgPSAwO1xuXHQgICAgICAgIHRoaXMuX2hlYWQgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBlbXB0eVN0YWNrKCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFN0YWNrLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcblx0ICAgICAgaWYgKHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgdGhpcy5zaXplKSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciByZXNvbHZlZEJlZ2luID0gcmVzb2x2ZUJlZ2luKGJlZ2luLCB0aGlzLnNpemUpO1xuXHQgICAgICB2YXIgcmVzb2x2ZWRFbmQgPSByZXNvbHZlRW5kKGVuZCwgdGhpcy5zaXplKTtcblx0ICAgICAgaWYgKHJlc29sdmVkRW5kICE9PSB0aGlzLnNpemUpIHtcblx0ICAgICAgICAvLyBzdXBlci5zbGljZShiZWdpbiwgZW5kKTtcblx0ICAgICAgICByZXR1cm4gSW5kZXhlZENvbGxlY3Rpb24ucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIG5ld1NpemUgPSB0aGlzLnNpemUgLSByZXNvbHZlZEJlZ2luO1xuXHQgICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG5cdCAgICAgIHdoaWxlIChyZXNvbHZlZEJlZ2luLS0pIHtcblx0ICAgICAgICBoZWFkID0gaGVhZC5uZXh0O1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuXHQgICAgICAgIHRoaXMuc2l6ZSA9IG5ld1NpemU7XG5cdCAgICAgICAgdGhpcy5faGVhZCA9IGhlYWQ7XG5cdCAgICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBtYWtlU3RhY2sobmV3U2l6ZSwgaGVhZCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIC8vIEBwcmFnbWEgTXV0YWJpbGl0eVxuXHRcblx0ICAgIFN0YWNrLnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24ob3duZXJJRCkge1xuXHQgICAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICBpZiAoIW93bmVySUQpIHtcblx0ICAgICAgICB0aGlzLl9fb3duZXJJRCA9IG93bmVySUQ7XG5cdCAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSBmYWxzZTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gbWFrZVN0YWNrKHRoaXMuc2l6ZSwgdGhpcy5faGVhZCwgb3duZXJJRCwgdGhpcy5fX2hhc2gpO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIEl0ZXJhdGlvblxuXHRcblx0ICAgIFN0YWNrLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuXHQgICAgICBpZiAocmV2ZXJzZSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkuY2FjaGVSZXN1bHQuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIHZhciBub2RlID0gdGhpcy5faGVhZDtcblx0ICAgICAgd2hpbGUgKG5vZGUpIHtcblx0ICAgICAgICBpZiAoZm4obm9kZS52YWx1ZSwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcblx0ICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuXHQgICAgfTtcblx0XG5cdCAgICBTdGFjay5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcblx0ICAgICAgaWYgKHJldmVyc2UpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy50b1NlcSgpLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIHZhciBub2RlID0gdGhpcy5faGVhZDtcblx0ICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG5cdCAgICAgICAgaWYgKG5vZGUpIHtcblx0ICAgICAgICAgIHZhciB2YWx1ZSA9IG5vZGUudmFsdWU7XG5cdCAgICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xuXHQgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCB2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0XG5cdCAgZnVuY3Rpb24gaXNTdGFjayhtYXliZVN0YWNrKSB7XG5cdCAgICByZXR1cm4gISEobWF5YmVTdGFjayAmJiBtYXliZVN0YWNrW0lTX1NUQUNLX1NFTlRJTkVMXSk7XG5cdCAgfVxuXHRcblx0ICBTdGFjay5pc1N0YWNrID0gaXNTdGFjaztcblx0XG5cdCAgdmFyIElTX1NUQUNLX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfU1RBQ0tfX0BAJztcblx0XG5cdCAgdmFyIFN0YWNrUHJvdG90eXBlID0gU3RhY2sucHJvdG90eXBlO1xuXHQgIFN0YWNrUHJvdG90eXBlW0lTX1NUQUNLX1NFTlRJTkVMXSA9IHRydWU7XG5cdCAgU3RhY2tQcm90b3R5cGUud2l0aE11dGF0aW9ucyA9IE1hcFByb3RvdHlwZS53aXRoTXV0YXRpb25zO1xuXHQgIFN0YWNrUHJvdG90eXBlLmFzTXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc011dGFibGU7XG5cdCAgU3RhY2tQcm90b3R5cGUuYXNJbW11dGFibGUgPSBNYXBQcm90b3R5cGUuYXNJbW11dGFibGU7XG5cdCAgU3RhY2tQcm90b3R5cGUud2FzQWx0ZXJlZCA9IE1hcFByb3RvdHlwZS53YXNBbHRlcmVkO1xuXHRcblx0XG5cdCAgZnVuY3Rpb24gbWFrZVN0YWNrKHNpemUsIGhlYWQsIG93bmVySUQsIGhhc2gpIHtcblx0ICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKFN0YWNrUHJvdG90eXBlKTtcblx0ICAgIG1hcC5zaXplID0gc2l6ZTtcblx0ICAgIG1hcC5faGVhZCA9IGhlYWQ7XG5cdCAgICBtYXAuX19vd25lcklEID0gb3duZXJJRDtcblx0ICAgIG1hcC5fX2hhc2ggPSBoYXNoO1xuXHQgICAgbWFwLl9fYWx0ZXJlZCA9IGZhbHNlO1xuXHQgICAgcmV0dXJuIG1hcDtcblx0ICB9XG5cdFxuXHQgIHZhciBFTVBUWV9TVEFDSztcblx0ICBmdW5jdGlvbiBlbXB0eVN0YWNrKCkge1xuXHQgICAgcmV0dXJuIEVNUFRZX1NUQUNLIHx8IChFTVBUWV9TVEFDSyA9IG1ha2VTdGFjaygwKSk7XG5cdCAgfVxuXHRcblx0ICBjcmVhdGVDbGFzcyhTZXQsIFNldENvbGxlY3Rpb24pO1xuXHRcblx0ICAgIC8vIEBwcmFnbWEgQ29uc3RydWN0aW9uXG5cdFxuXHQgICAgZnVuY3Rpb24gU2V0KHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlTZXQoKSA6XG5cdCAgICAgICAgaXNTZXQodmFsdWUpID8gdmFsdWUgOlxuXHQgICAgICAgIGVtcHR5U2V0KCkud2l0aE11dGF0aW9ucyhmdW5jdGlvbihzZXQgKSB7XG5cdCAgICAgICAgICB2YXIgaXRlciA9IFNldEl0ZXJhYmxlKHZhbHVlKTtcblx0ICAgICAgICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG5cdCAgICAgICAgICBpdGVyLmZvckVhY2goZnVuY3Rpb24odiApIHtyZXR1cm4gc2V0LmFkZCh2KX0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHRcblx0ICAgIFNldC5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcblx0ICAgICAgcmV0dXJuIHRoaXMoYXJndW1lbnRzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU2V0LmZyb21LZXlzID0gZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMoS2V5ZWRJdGVyYWJsZSh2YWx1ZSkua2V5U2VxKCkpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTZXQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ1NldCB7JywgJ30nKTtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gQHByYWdtYSBBY2Nlc3Ncblx0XG5cdCAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9tYXAuaGFzKHZhbHVlKTtcblx0ICAgIH07XG5cdFxuXHQgICAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblx0XG5cdCAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB1cGRhdGVTZXQodGhpcywgdGhpcy5fbWFwLnNldCh2YWx1ZSwgdHJ1ZSkpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTZXQucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB1cGRhdGVTZXQodGhpcywgdGhpcy5fbWFwLnJlbW92ZSh2YWx1ZSkpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB1cGRhdGVTZXQodGhpcywgdGhpcy5fbWFwLmNsZWFyKCkpO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIENvbXBvc2l0aW9uXG5cdFxuXHQgICAgU2V0LnByb3RvdHlwZS51bmlvbiA9IGZ1bmN0aW9uKCkge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDApO1xuXHQgICAgICBpdGVycyA9IGl0ZXJzLmZpbHRlcihmdW5jdGlvbih4ICkge3JldHVybiB4LnNpemUgIT09IDB9KTtcblx0ICAgICAgaWYgKGl0ZXJzLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh0aGlzLnNpemUgPT09IDAgJiYgaXRlcnMubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IoaXRlcnNbMF0pO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24oc2V0ICkge1xuXHQgICAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBpdGVycy5sZW5ndGg7IGlpKyspIHtcblx0ICAgICAgICAgIFNldEl0ZXJhYmxlKGl0ZXJzW2lpXSkuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gc2V0LmFkZCh2YWx1ZSl9KTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBTZXQucHJvdG90eXBlLmludGVyc2VjdCA9IGZ1bmN0aW9uKCkge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDApO1xuXHQgICAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgaXRlcnMgPSBpdGVycy5tYXAoZnVuY3Rpb24oaXRlciApIHtyZXR1cm4gU2V0SXRlcmFibGUoaXRlcil9KTtcblx0ICAgICAgdmFyIG9yaWdpbmFsU2V0ID0gdGhpcztcblx0ICAgICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbihzZXQgKSB7XG5cdCAgICAgICAgb3JpZ2luYWxTZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSApIHtcblx0ICAgICAgICAgIGlmICghaXRlcnMuZXZlcnkoZnVuY3Rpb24oaXRlciApIHtyZXR1cm4gaXRlci5jb250YWlucyh2YWx1ZSl9KSkge1xuXHQgICAgICAgICAgICBzZXQucmVtb3ZlKHZhbHVlKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFNldC5wcm90b3R5cGUuc3VidHJhY3QgPSBmdW5jdGlvbigpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAwKTtcblx0ICAgICAgaWYgKGl0ZXJzLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIGl0ZXJzID0gaXRlcnMubWFwKGZ1bmN0aW9uKGl0ZXIgKSB7cmV0dXJuIFNldEl0ZXJhYmxlKGl0ZXIpfSk7XG5cdCAgICAgIHZhciBvcmlnaW5hbFNldCA9IHRoaXM7XG5cdCAgICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24oc2V0ICkge1xuXHQgICAgICAgIG9yaWdpbmFsU2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUgKSB7XG5cdCAgICAgICAgICBpZiAoaXRlcnMuc29tZShmdW5jdGlvbihpdGVyICkge3JldHVybiBpdGVyLmNvbnRhaW5zKHZhbHVlKX0pKSB7XG5cdCAgICAgICAgICAgIHNldC5yZW1vdmUodmFsdWUpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgU2V0LnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy51bmlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTZXQucHJvdG90eXBlLm1lcmdlV2l0aCA9IGZ1bmN0aW9uKG1lcmdlcikge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuXHQgICAgICByZXR1cm4gdGhpcy51bmlvbi5hcHBseSh0aGlzLCBpdGVycyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFNldC5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKGNvbXBhcmF0b3IpIHtcblx0ICAgICAgLy8gTGF0ZSBiaW5kaW5nXG5cdCAgICAgIHJldHVybiBPcmRlcmVkU2V0KHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IpKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU2V0LnByb3RvdHlwZS5zb3J0QnkgPSBmdW5jdGlvbihtYXBwZXIsIGNvbXBhcmF0b3IpIHtcblx0ICAgICAgLy8gTGF0ZSBiaW5kaW5nXG5cdCAgICAgIHJldHVybiBPcmRlcmVkU2V0KHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IsIG1hcHBlcikpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTZXQucHJvdG90eXBlLndhc0FsdGVyZWQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX21hcC53YXNBbHRlcmVkKCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFNldC5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcblx0ICAgICAgcmV0dXJuIHRoaXMuX21hcC5fX2l0ZXJhdGUoZnVuY3Rpb24oXywgaykgIHtyZXR1cm4gZm4oaywgaywgdGhpcyQwKX0sIHJldmVyc2UpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTZXQucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9tYXAubWFwKGZ1bmN0aW9uKF8sIGspICB7cmV0dXJuIGt9KS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuXHQgICAgfTtcblx0XG5cdCAgICBTZXQucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbihvd25lcklEKSB7XG5cdCAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAuX19lbnN1cmVPd25lcihvd25lcklEKTtcblx0ICAgICAgaWYgKCFvd25lcklEKSB7XG5cdCAgICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuXHQgICAgICAgIHRoaXMuX21hcCA9IG5ld01hcDtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gdGhpcy5fX21ha2UobmV3TWFwLCBvd25lcklEKTtcblx0ICAgIH07XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBpc1NldChtYXliZVNldCkge1xuXHQgICAgcmV0dXJuICEhKG1heWJlU2V0ICYmIG1heWJlU2V0W0lTX1NFVF9TRU5USU5FTF0pO1xuXHQgIH1cblx0XG5cdCAgU2V0LmlzU2V0ID0gaXNTZXQ7XG5cdFxuXHQgIHZhciBJU19TRVRfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9TRVRfX0BAJztcblx0XG5cdCAgdmFyIFNldFByb3RvdHlwZSA9IFNldC5wcm90b3R5cGU7XG5cdCAgU2V0UHJvdG90eXBlW0lTX1NFVF9TRU5USU5FTF0gPSB0cnVlO1xuXHQgIFNldFByb3RvdHlwZVtERUxFVEVdID0gU2V0UHJvdG90eXBlLnJlbW92ZTtcblx0ICBTZXRQcm90b3R5cGUubWVyZ2VEZWVwID0gU2V0UHJvdG90eXBlLm1lcmdlO1xuXHQgIFNldFByb3RvdHlwZS5tZXJnZURlZXBXaXRoID0gU2V0UHJvdG90eXBlLm1lcmdlV2l0aDtcblx0ICBTZXRQcm90b3R5cGUud2l0aE11dGF0aW9ucyA9IE1hcFByb3RvdHlwZS53aXRoTXV0YXRpb25zO1xuXHQgIFNldFByb3RvdHlwZS5hc011dGFibGUgPSBNYXBQcm90b3R5cGUuYXNNdXRhYmxlO1xuXHQgIFNldFByb3RvdHlwZS5hc0ltbXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc0ltbXV0YWJsZTtcblx0XG5cdCAgU2V0UHJvdG90eXBlLl9fZW1wdHkgPSBlbXB0eVNldDtcblx0ICBTZXRQcm90b3R5cGUuX19tYWtlID0gbWFrZVNldDtcblx0XG5cdCAgZnVuY3Rpb24gdXBkYXRlU2V0KHNldCwgbmV3TWFwKSB7XG5cdCAgICBpZiAoc2V0Ll9fb3duZXJJRCkge1xuXHQgICAgICBzZXQuc2l6ZSA9IG5ld01hcC5zaXplO1xuXHQgICAgICBzZXQuX21hcCA9IG5ld01hcDtcblx0ICAgICAgcmV0dXJuIHNldDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBuZXdNYXAgPT09IHNldC5fbWFwID8gc2V0IDpcblx0ICAgICAgbmV3TWFwLnNpemUgPT09IDAgPyBzZXQuX19lbXB0eSgpIDpcblx0ICAgICAgc2V0Ll9fbWFrZShuZXdNYXApO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gbWFrZVNldChtYXAsIG93bmVySUQpIHtcblx0ICAgIHZhciBzZXQgPSBPYmplY3QuY3JlYXRlKFNldFByb3RvdHlwZSk7XG5cdCAgICBzZXQuc2l6ZSA9IG1hcCA/IG1hcC5zaXplIDogMDtcblx0ICAgIHNldC5fbWFwID0gbWFwO1xuXHQgICAgc2V0Ll9fb3duZXJJRCA9IG93bmVySUQ7XG5cdCAgICByZXR1cm4gc2V0O1xuXHQgIH1cblx0XG5cdCAgdmFyIEVNUFRZX1NFVDtcblx0ICBmdW5jdGlvbiBlbXB0eVNldCgpIHtcblx0ICAgIHJldHVybiBFTVBUWV9TRVQgfHwgKEVNUFRZX1NFVCA9IG1ha2VTZXQoZW1wdHlNYXAoKSkpO1xuXHQgIH1cblx0XG5cdCAgY3JlYXRlQ2xhc3MoT3JkZXJlZFNldCwgU2V0KTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIENvbnN0cnVjdGlvblxuXHRcblx0ICAgIGZ1bmN0aW9uIE9yZGVyZWRTZXQodmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eU9yZGVyZWRTZXQoKSA6XG5cdCAgICAgICAgaXNPcmRlcmVkU2V0KHZhbHVlKSA/IHZhbHVlIDpcblx0ICAgICAgICBlbXB0eU9yZGVyZWRTZXQoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcblx0ICAgICAgICAgIHZhciBpdGVyID0gU2V0SXRlcmFibGUodmFsdWUpO1xuXHQgICAgICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcblx0ICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2ICkge3JldHVybiBzZXQuYWRkKHYpfSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdFxuXHQgICAgT3JkZXJlZFNldC5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcblx0ICAgICAgcmV0dXJuIHRoaXMoYXJndW1lbnRzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgT3JkZXJlZFNldC5mcm9tS2V5cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB0aGlzKEtleWVkSXRlcmFibGUodmFsdWUpLmtleVNlcSgpKTtcblx0ICAgIH07XG5cdFxuXHQgICAgT3JkZXJlZFNldC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnT3JkZXJlZFNldCB7JywgJ30nKTtcblx0ICAgIH07XG5cdFxuXHRcblx0ICBmdW5jdGlvbiBpc09yZGVyZWRTZXQobWF5YmVPcmRlcmVkU2V0KSB7XG5cdCAgICByZXR1cm4gaXNTZXQobWF5YmVPcmRlcmVkU2V0KSAmJiBpc09yZGVyZWQobWF5YmVPcmRlcmVkU2V0KTtcblx0ICB9XG5cdFxuXHQgIE9yZGVyZWRTZXQuaXNPcmRlcmVkU2V0ID0gaXNPcmRlcmVkU2V0O1xuXHRcblx0ICB2YXIgT3JkZXJlZFNldFByb3RvdHlwZSA9IE9yZGVyZWRTZXQucHJvdG90eXBlO1xuXHQgIE9yZGVyZWRTZXRQcm90b3R5cGVbSVNfT1JERVJFRF9TRU5USU5FTF0gPSB0cnVlO1xuXHRcblx0ICBPcmRlcmVkU2V0UHJvdG90eXBlLl9fZW1wdHkgPSBlbXB0eU9yZGVyZWRTZXQ7XG5cdCAgT3JkZXJlZFNldFByb3RvdHlwZS5fX21ha2UgPSBtYWtlT3JkZXJlZFNldDtcblx0XG5cdCAgZnVuY3Rpb24gbWFrZU9yZGVyZWRTZXQobWFwLCBvd25lcklEKSB7XG5cdCAgICB2YXIgc2V0ID0gT2JqZWN0LmNyZWF0ZShPcmRlcmVkU2V0UHJvdG90eXBlKTtcblx0ICAgIHNldC5zaXplID0gbWFwID8gbWFwLnNpemUgOiAwO1xuXHQgICAgc2V0Ll9tYXAgPSBtYXA7XG5cdCAgICBzZXQuX19vd25lcklEID0gb3duZXJJRDtcblx0ICAgIHJldHVybiBzZXQ7XG5cdCAgfVxuXHRcblx0ICB2YXIgRU1QVFlfT1JERVJFRF9TRVQ7XG5cdCAgZnVuY3Rpb24gZW1wdHlPcmRlcmVkU2V0KCkge1xuXHQgICAgcmV0dXJuIEVNUFRZX09SREVSRURfU0VUIHx8IChFTVBUWV9PUkRFUkVEX1NFVCA9IG1ha2VPcmRlcmVkU2V0KGVtcHR5T3JkZXJlZE1hcCgpKSk7XG5cdCAgfVxuXHRcblx0ICBjcmVhdGVDbGFzcyhSZWNvcmQsIEtleWVkQ29sbGVjdGlvbik7XG5cdFxuXHQgICAgZnVuY3Rpb24gUmVjb3JkKGRlZmF1bHRWYWx1ZXMsIG5hbWUpIHtcblx0ICAgICAgdmFyIFJlY29yZFR5cGUgPSBmdW5jdGlvbiBSZWNvcmQodmFsdWVzKSB7XG5cdCAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlY29yZFR5cGUpKSB7XG5cdCAgICAgICAgICByZXR1cm4gbmV3IFJlY29yZFR5cGUodmFsdWVzKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5fbWFwID0gTWFwKHZhbHVlcyk7XG5cdCAgICAgIH07XG5cdFxuXHQgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRlZmF1bHRWYWx1ZXMpO1xuXHRcblx0ICAgICAgdmFyIFJlY29yZFR5cGVQcm90b3R5cGUgPSBSZWNvcmRUeXBlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmVjb3JkUHJvdG90eXBlKTtcblx0ICAgICAgUmVjb3JkVHlwZVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlY29yZFR5cGU7XG5cdCAgICAgIG5hbWUgJiYgKFJlY29yZFR5cGVQcm90b3R5cGUuX25hbWUgPSBuYW1lKTtcblx0ICAgICAgUmVjb3JkVHlwZVByb3RvdHlwZS5fZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRWYWx1ZXM7XG5cdCAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuX2tleXMgPSBrZXlzO1xuXHQgICAgICBSZWNvcmRUeXBlUHJvdG90eXBlLnNpemUgPSBrZXlzLmxlbmd0aDtcblx0XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSApIHtcblx0ICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWNvcmRUeXBlLnByb3RvdHlwZSwga2V5LCB7XG5cdCAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgICAgICAgICAgICBpbnZhcmlhbnQodGhpcy5fX293bmVySUQsICdDYW5ub3Qgc2V0IG9uIGFuIGltbXV0YWJsZSByZWNvcmQuJyk7XG5cdCAgICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9IGNhdGNoIChlcnJvcikge1xuXHQgICAgICAgIC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBmYWlsZWQuIFByb2JhYmx5IElFOC5cblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIFJlY29yZFR5cGU7XG5cdCAgICB9XG5cdFxuXHQgICAgUmVjb3JkLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKHJlY29yZE5hbWUodGhpcykgKyAnIHsnLCAnfScpO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXHRcblx0ICAgIFJlY29yZC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oaykge1xuXHQgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFZhbHVlcy5oYXNPd25Qcm9wZXJ0eShrKTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmVjb3JkLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrLCBub3RTZXRWYWx1ZSkge1xuXHQgICAgICBpZiAoIXRoaXMuaGFzKGspKSB7XG5cdCAgICAgICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBkZWZhdWx0VmFsID0gdGhpcy5fZGVmYXVsdFZhbHVlc1trXTtcblx0ICAgICAgcmV0dXJuIHRoaXMuX21hcCA/IHRoaXMuX21hcC5nZXQoaywgZGVmYXVsdFZhbCkgOiBkZWZhdWx0VmFsO1xuXHQgICAgfTtcblx0XG5cdCAgICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXHRcblx0ICAgIFJlY29yZC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG5cdCAgICAgICAgdGhpcy5fbWFwICYmIHRoaXMuX21hcC5jbGVhcigpO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBTdXBlclJlY29yZCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcjtcblx0ICAgICAgcmV0dXJuIFN1cGVyUmVjb3JkLl9lbXB0eSB8fCAoU3VwZXJSZWNvcmQuX2VtcHR5ID0gbWFrZVJlY29yZCh0aGlzLCBlbXB0eU1hcCgpKSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJlY29yZC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oaywgdikge1xuXHQgICAgICBpZiAoIXRoaXMuaGFzKGspKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2V0IHVua25vd24ga2V5IFwiJyArIGsgKyAnXCIgb24gJyArIHJlY29yZE5hbWUodGhpcykpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAgJiYgdGhpcy5fbWFwLnNldChrLCB2KTtcblx0ICAgICAgaWYgKHRoaXMuX19vd25lcklEIHx8IG5ld01hcCA9PT0gdGhpcy5fbWFwKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3TWFwKTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmVjb3JkLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihrKSB7XG5cdCAgICAgIGlmICghdGhpcy5oYXMoaykpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICB2YXIgbmV3TWFwID0gdGhpcy5fbWFwICYmIHRoaXMuX21hcC5yZW1vdmUoayk7XG5cdCAgICAgIGlmICh0aGlzLl9fb3duZXJJRCB8fCBuZXdNYXAgPT09IHRoaXMuX21hcCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBtYWtlUmVjb3JkKHRoaXMsIG5ld01hcCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJlY29yZC5wcm90b3R5cGUud2FzQWx0ZXJlZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fbWFwLndhc0FsdGVyZWQoKTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmVjb3JkLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICByZXR1cm4gS2V5ZWRJdGVyYWJsZSh0aGlzLl9kZWZhdWx0VmFsdWVzKS5tYXAoZnVuY3Rpb24oXywgaykgIHtyZXR1cm4gdGhpcyQwLmdldChrKX0pLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJlY29yZC5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcblx0ICAgICAgcmV0dXJuIEtleWVkSXRlcmFibGUodGhpcy5fZGVmYXVsdFZhbHVlcykubWFwKGZ1bmN0aW9uKF8sIGspICB7cmV0dXJuIHRoaXMkMC5nZXQoayl9KS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuXHQgICAgfTtcblx0XG5cdCAgICBSZWNvcmQucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbihvd25lcklEKSB7XG5cdCAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAgJiYgdGhpcy5fbWFwLl9fZW5zdXJlT3duZXIob3duZXJJRCk7XG5cdCAgICAgIGlmICghb3duZXJJRCkge1xuXHQgICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcblx0ICAgICAgICB0aGlzLl9tYXAgPSBuZXdNYXA7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3TWFwLCBvd25lcklEKTtcblx0ICAgIH07XG5cdFxuXHRcblx0ICB2YXIgUmVjb3JkUHJvdG90eXBlID0gUmVjb3JkLnByb3RvdHlwZTtcblx0ICBSZWNvcmRQcm90b3R5cGVbREVMRVRFXSA9IFJlY29yZFByb3RvdHlwZS5yZW1vdmU7XG5cdCAgUmVjb3JkUHJvdG90eXBlLmRlbGV0ZUluID1cblx0ICBSZWNvcmRQcm90b3R5cGUucmVtb3ZlSW4gPSBNYXBQcm90b3R5cGUucmVtb3ZlSW47XG5cdCAgUmVjb3JkUHJvdG90eXBlLm1lcmdlID0gTWFwUHJvdG90eXBlLm1lcmdlO1xuXHQgIFJlY29yZFByb3RvdHlwZS5tZXJnZVdpdGggPSBNYXBQcm90b3R5cGUubWVyZ2VXaXRoO1xuXHQgIFJlY29yZFByb3RvdHlwZS5tZXJnZUluID0gTWFwUHJvdG90eXBlLm1lcmdlSW47XG5cdCAgUmVjb3JkUHJvdG90eXBlLm1lcmdlRGVlcCA9IE1hcFByb3RvdHlwZS5tZXJnZURlZXA7XG5cdCAgUmVjb3JkUHJvdG90eXBlLm1lcmdlRGVlcFdpdGggPSBNYXBQcm90b3R5cGUubWVyZ2VEZWVwV2l0aDtcblx0ICBSZWNvcmRQcm90b3R5cGUubWVyZ2VEZWVwSW4gPSBNYXBQcm90b3R5cGUubWVyZ2VEZWVwSW47XG5cdCAgUmVjb3JkUHJvdG90eXBlLnNldEluID0gTWFwUHJvdG90eXBlLnNldEluO1xuXHQgIFJlY29yZFByb3RvdHlwZS51cGRhdGUgPSBNYXBQcm90b3R5cGUudXBkYXRlO1xuXHQgIFJlY29yZFByb3RvdHlwZS51cGRhdGVJbiA9IE1hcFByb3RvdHlwZS51cGRhdGVJbjtcblx0ICBSZWNvcmRQcm90b3R5cGUud2l0aE11dGF0aW9ucyA9IE1hcFByb3RvdHlwZS53aXRoTXV0YXRpb25zO1xuXHQgIFJlY29yZFByb3RvdHlwZS5hc011dGFibGUgPSBNYXBQcm90b3R5cGUuYXNNdXRhYmxlO1xuXHQgIFJlY29yZFByb3RvdHlwZS5hc0ltbXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc0ltbXV0YWJsZTtcblx0XG5cdFxuXHQgIGZ1bmN0aW9uIG1ha2VSZWNvcmQobGlrZVJlY29yZCwgbWFwLCBvd25lcklEKSB7XG5cdCAgICB2YXIgcmVjb3JkID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YobGlrZVJlY29yZCkpO1xuXHQgICAgcmVjb3JkLl9tYXAgPSBtYXA7XG5cdCAgICByZWNvcmQuX19vd25lcklEID0gb3duZXJJRDtcblx0ICAgIHJldHVybiByZWNvcmQ7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiByZWNvcmROYW1lKHJlY29yZCkge1xuXHQgICAgcmV0dXJuIHJlY29yZC5fbmFtZSB8fCByZWNvcmQuY29uc3RydWN0b3IubmFtZTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGRlZXBFcXVhbChhLCBiKSB7XG5cdCAgICBpZiAoYSA9PT0gYikge1xuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH1cblx0XG5cdCAgICBpZiAoXG5cdCAgICAgICFpc0l0ZXJhYmxlKGIpIHx8XG5cdCAgICAgIGEuc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGIuc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGEuc2l6ZSAhPT0gYi5zaXplIHx8XG5cdCAgICAgIGEuX19oYXNoICE9PSB1bmRlZmluZWQgJiYgYi5fX2hhc2ggIT09IHVuZGVmaW5lZCAmJiBhLl9faGFzaCAhPT0gYi5fX2hhc2ggfHxcblx0ICAgICAgaXNLZXllZChhKSAhPT0gaXNLZXllZChiKSB8fFxuXHQgICAgICBpc0luZGV4ZWQoYSkgIT09IGlzSW5kZXhlZChiKSB8fFxuXHQgICAgICBpc09yZGVyZWQoYSkgIT09IGlzT3JkZXJlZChiKVxuXHQgICAgKSB7XG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblx0XG5cdCAgICBpZiAoYS5zaXplID09PSAwICYmIGIuc2l6ZSA9PT0gMCkge1xuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgbm90QXNzb2NpYXRpdmUgPSAhaXNBc3NvY2lhdGl2ZShhKTtcblx0XG5cdCAgICBpZiAoaXNPcmRlcmVkKGEpKSB7XG5cdCAgICAgIHZhciBlbnRyaWVzID0gYS5lbnRyaWVzKCk7XG5cdCAgICAgIHJldHVybiBiLmV2ZXJ5KGZ1bmN0aW9uKHYsIGspICB7XG5cdCAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllcy5uZXh0KCkudmFsdWU7XG5cdCAgICAgICAgcmV0dXJuIGVudHJ5ICYmIGlzKGVudHJ5WzFdLCB2KSAmJiAobm90QXNzb2NpYXRpdmUgfHwgaXMoZW50cnlbMF0sIGspKTtcblx0ICAgICAgfSkgJiYgZW50cmllcy5uZXh0KCkuZG9uZTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgZmxpcHBlZCA9IGZhbHNlO1xuXHRcblx0ICAgIGlmIChhLnNpemUgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICBpZiAoYi5zaXplID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICBhLmNhY2hlUmVzdWx0KCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgZmxpcHBlZCA9IHRydWU7XG5cdCAgICAgICAgdmFyIF8gPSBhO1xuXHQgICAgICAgIGEgPSBiO1xuXHQgICAgICAgIGIgPSBfO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIGFsbEVxdWFsID0gdHJ1ZTtcblx0ICAgIHZhciBiU2l6ZSA9IGIuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7XG5cdCAgICAgIGlmIChub3RBc3NvY2lhdGl2ZSA/ICFhLmhhcyh2KSA6XG5cdCAgICAgICAgICBmbGlwcGVkID8gIWlzKHYsIGEuZ2V0KGssIE5PVF9TRVQpKSA6ICFpcyhhLmdldChrLCBOT1RfU0VUKSwgdikpIHtcblx0ICAgICAgICBhbGxFcXVhbCA9IGZhbHNlO1xuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdFxuXHQgICAgcmV0dXJuIGFsbEVxdWFsICYmIGEuc2l6ZSA9PT0gYlNpemU7XG5cdCAgfVxuXHRcblx0ICBjcmVhdGVDbGFzcyhSYW5nZSwgSW5kZXhlZFNlcSk7XG5cdFxuXHQgICAgZnVuY3Rpb24gUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCkge1xuXHQgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmFuZ2UpKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydCwgZW5kLCBzdGVwKTtcblx0ICAgICAgfVxuXHQgICAgICBpbnZhcmlhbnQoc3RlcCAhPT0gMCwgJ0Nhbm5vdCBzdGVwIGEgUmFuZ2UgYnkgMCcpO1xuXHQgICAgICBzdGFydCA9IHN0YXJ0IHx8IDA7XG5cdCAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIGVuZCA9IEluZmluaXR5O1xuXHQgICAgICB9XG5cdCAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAxIDogTWF0aC5hYnMoc3RlcCk7XG5cdCAgICAgIGlmIChlbmQgPCBzdGFydCkge1xuXHQgICAgICAgIHN0ZXAgPSAtc3RlcDtcblx0ICAgICAgfVxuXHQgICAgICB0aGlzLl9zdGFydCA9IHN0YXJ0O1xuXHQgICAgICB0aGlzLl9lbmQgPSBlbmQ7XG5cdCAgICAgIHRoaXMuX3N0ZXAgPSBzdGVwO1xuXHQgICAgICB0aGlzLnNpemUgPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoKGVuZCAtIHN0YXJ0KSAvIHN0ZXAgLSAxKSArIDEpO1xuXHQgICAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG5cdCAgICAgICAgaWYgKEVNUFRZX1JBTkdFKSB7XG5cdCAgICAgICAgICByZXR1cm4gRU1QVFlfUkFOR0U7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIEVNUFRZX1JBTkdFID0gdGhpcztcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIFJhbmdlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG5cdCAgICAgICAgcmV0dXJuICdSYW5nZSBbXSc7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuICdSYW5nZSBbICcgK1xuXHQgICAgICAgIHRoaXMuX3N0YXJ0ICsgJy4uLicgKyB0aGlzLl9lbmQgK1xuXHQgICAgICAgICh0aGlzLl9zdGVwID4gMSA/ICcgYnkgJyArIHRoaXMuX3N0ZXAgOiAnJykgK1xuXHQgICAgICAnIF0nO1xuXHQgICAgfTtcblx0XG5cdCAgICBSYW5nZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaW5kZXgsIG5vdFNldFZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmhhcyhpbmRleCkgP1xuXHQgICAgICAgIHRoaXMuX3N0YXJ0ICsgd3JhcEluZGV4KHRoaXMsIGluZGV4KSAqIHRoaXMuX3N0ZXAgOlxuXHQgICAgICAgIG5vdFNldFZhbHVlO1xuXHQgICAgfTtcblx0XG5cdCAgICBSYW5nZS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuXHQgICAgICB2YXIgcG9zc2libGVJbmRleCA9IChzZWFyY2hWYWx1ZSAtIHRoaXMuX3N0YXJ0KSAvIHRoaXMuX3N0ZXA7XG5cdCAgICAgIHJldHVybiBwb3NzaWJsZUluZGV4ID49IDAgJiZcblx0ICAgICAgICBwb3NzaWJsZUluZGV4IDwgdGhpcy5zaXplICYmXG5cdCAgICAgICAgcG9zc2libGVJbmRleCA9PT0gTWF0aC5mbG9vcihwb3NzaWJsZUluZGV4KTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmFuZ2UucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuXHQgICAgICBpZiAod2hvbGVTbGljZShiZWdpbiwgZW5kLCB0aGlzLnNpemUpKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH1cblx0ICAgICAgYmVnaW4gPSByZXNvbHZlQmVnaW4oYmVnaW4sIHRoaXMuc2l6ZSk7XG5cdCAgICAgIGVuZCA9IHJlc29sdmVFbmQoZW5kLCB0aGlzLnNpemUpO1xuXHQgICAgICBpZiAoZW5kIDw9IGJlZ2luKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBSYW5nZSgwLCAwKTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gbmV3IFJhbmdlKHRoaXMuZ2V0KGJlZ2luLCB0aGlzLl9lbmQpLCB0aGlzLmdldChlbmQsIHRoaXMuX2VuZCksIHRoaXMuX3N0ZXApO1xuXHQgICAgfTtcblx0XG5cdCAgICBSYW5nZS5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG5cdCAgICAgIHZhciBvZmZzZXRWYWx1ZSA9IHNlYXJjaFZhbHVlIC0gdGhpcy5fc3RhcnQ7XG5cdCAgICAgIGlmIChvZmZzZXRWYWx1ZSAlIHRoaXMuX3N0ZXAgPT09IDApIHtcblx0ICAgICAgICB2YXIgaW5kZXggPSBvZmZzZXRWYWx1ZSAvIHRoaXMuX3N0ZXA7XG5cdCAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLnNpemUpIHtcblx0ICAgICAgICAgIHJldHVybiBpbmRleFxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gLTE7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJhbmdlLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmluZGV4T2Yoc2VhcmNoVmFsdWUpO1xuXHQgICAgfTtcblx0XG5cdCAgICBSYW5nZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcblx0ICAgICAgdmFyIG1heEluZGV4ID0gdGhpcy5zaXplIC0gMTtcblx0ICAgICAgdmFyIHN0ZXAgPSB0aGlzLl9zdGVwO1xuXHQgICAgICB2YXIgdmFsdWUgPSByZXZlcnNlID8gdGhpcy5fc3RhcnQgKyBtYXhJbmRleCAqIHN0ZXAgOiB0aGlzLl9zdGFydDtcblx0ICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8PSBtYXhJbmRleDsgaWkrKykge1xuXHQgICAgICAgIGlmIChmbih2YWx1ZSwgaWksIHRoaXMpID09PSBmYWxzZSkge1xuXHQgICAgICAgICAgcmV0dXJuIGlpICsgMTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFsdWUgKz0gcmV2ZXJzZSA/IC1zdGVwIDogc3RlcDtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gaWk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJhbmdlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuXHQgICAgICB2YXIgbWF4SW5kZXggPSB0aGlzLnNpemUgLSAxO1xuXHQgICAgICB2YXIgc3RlcCA9IHRoaXMuX3N0ZXA7XG5cdCAgICAgIHZhciB2YWx1ZSA9IHJldmVyc2UgPyB0aGlzLl9zdGFydCArIG1heEluZGV4ICogc3RlcCA6IHRoaXMuX3N0YXJ0O1xuXHQgICAgICB2YXIgaWkgPSAwO1xuXHQgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcblx0ICAgICAgICB2YXIgdiA9IHZhbHVlO1xuXHQgICAgICAgIHZhbHVlICs9IHJldmVyc2UgPyAtc3RlcCA6IHN0ZXA7XG5cdCAgICAgICAgcmV0dXJuIGlpID4gbWF4SW5kZXggPyBpdGVyYXRvckRvbmUoKSA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgaWkrKywgdik7XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBSYW5nZS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpIHtcblx0ICAgICAgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgUmFuZ2UgP1xuXHQgICAgICAgIHRoaXMuX3N0YXJ0ID09PSBvdGhlci5fc3RhcnQgJiZcblx0ICAgICAgICB0aGlzLl9lbmQgPT09IG90aGVyLl9lbmQgJiZcblx0ICAgICAgICB0aGlzLl9zdGVwID09PSBvdGhlci5fc3RlcCA6XG5cdCAgICAgICAgZGVlcEVxdWFsKHRoaXMsIG90aGVyKTtcblx0ICAgIH07XG5cdFxuXHRcblx0ICB2YXIgRU1QVFlfUkFOR0U7XG5cdFxuXHQgIGNyZWF0ZUNsYXNzKFJlcGVhdCwgSW5kZXhlZFNlcSk7XG5cdFxuXHQgICAgZnVuY3Rpb24gUmVwZWF0KHZhbHVlLCB0aW1lcykge1xuXHQgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVwZWF0KSkge1xuXHQgICAgICAgIHJldHVybiBuZXcgUmVwZWF0KHZhbHVlLCB0aW1lcyk7XG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgdGhpcy5zaXplID0gdGltZXMgPT09IHVuZGVmaW5lZCA/IEluZmluaXR5IDogTWF0aC5tYXgoMCwgdGltZXMpO1xuXHQgICAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG5cdCAgICAgICAgaWYgKEVNUFRZX1JFUEVBVCkge1xuXHQgICAgICAgICAgcmV0dXJuIEVNUFRZX1JFUEVBVDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgRU1QVFlfUkVQRUFUID0gdGhpcztcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIFJlcGVhdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuXHQgICAgICAgIHJldHVybiAnUmVwZWF0IFtdJztcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gJ1JlcGVhdCBbICcgKyB0aGlzLl92YWx1ZSArICcgJyArIHRoaXMuc2l6ZSArICcgdGltZXMgXSc7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJlcGVhdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaW5kZXgsIG5vdFNldFZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmhhcyhpbmRleCkgPyB0aGlzLl92YWx1ZSA6IG5vdFNldFZhbHVlO1xuXHQgICAgfTtcblx0XG5cdCAgICBSZXBlYXQucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIGlzKHRoaXMuX3ZhbHVlLCBzZWFyY2hWYWx1ZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJlcGVhdC5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihiZWdpbiwgZW5kKSB7XG5cdCAgICAgIHZhciBzaXplID0gdGhpcy5zaXplO1xuXHQgICAgICByZXR1cm4gd2hvbGVTbGljZShiZWdpbiwgZW5kLCBzaXplKSA/IHRoaXMgOlxuXHQgICAgICAgIG5ldyBSZXBlYXQodGhpcy5fdmFsdWUsIHJlc29sdmVFbmQoZW5kLCBzaXplKSAtIHJlc29sdmVCZWdpbihiZWdpbiwgc2l6ZSkpO1xuXHQgICAgfTtcblx0XG5cdCAgICBSZXBlYXQucHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJlcGVhdC5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG5cdCAgICAgIGlmIChpcyh0aGlzLl92YWx1ZSwgc2VhcmNoVmFsdWUpKSB7XG5cdCAgICAgICAgcmV0dXJuIDA7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIC0xO1xuXHQgICAgfTtcblx0XG5cdCAgICBSZXBlYXQucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcblx0ICAgICAgaWYgKGlzKHRoaXMuX3ZhbHVlLCBzZWFyY2hWYWx1ZSkpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5zaXplO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiAtMTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmVwZWF0LnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuXHQgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgdGhpcy5zaXplOyBpaSsrKSB7XG5cdCAgICAgICAgaWYgKGZuKHRoaXMuX3ZhbHVlLCBpaSwgdGhpcykgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICByZXR1cm4gaWkgKyAxO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gaWk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJlcGVhdC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcblx0ICAgICAgdmFyIGlpID0gMDtcblx0ICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpIFxuXHQgICAgICAgIHtyZXR1cm4gaWkgPCB0aGlzJDAuc2l6ZSA/IGl0ZXJhdG9yVmFsdWUodHlwZSwgaWkrKywgdGhpcyQwLl92YWx1ZSkgOiBpdGVyYXRvckRvbmUoKX1cblx0ICAgICAgKTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmVwZWF0LnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihvdGhlcikge1xuXHQgICAgICByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBSZXBlYXQgP1xuXHQgICAgICAgIGlzKHRoaXMuX3ZhbHVlLCBvdGhlci5fdmFsdWUpIDpcblx0ICAgICAgICBkZWVwRXF1YWwob3RoZXIpO1xuXHQgICAgfTtcblx0XG5cdFxuXHQgIHZhciBFTVBUWV9SRVBFQVQ7XG5cdFxuXHQgIC8qKlxuXHQgICAqIENvbnRyaWJ1dGVzIGFkZGl0aW9uYWwgbWV0aG9kcyB0byBhIGNvbnN0cnVjdG9yXG5cdCAgICovXG5cdCAgZnVuY3Rpb24gbWl4aW4oY3RvciwgbWV0aG9kcykge1xuXHQgICAgdmFyIGtleUNvcGllciA9IGZ1bmN0aW9uKGtleSApIHsgY3Rvci5wcm90b3R5cGVba2V5XSA9IG1ldGhvZHNba2V5XTsgfTtcblx0ICAgIE9iamVjdC5rZXlzKG1ldGhvZHMpLmZvckVhY2goa2V5Q29waWVyKTtcblx0ICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiZcblx0ICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtZXRob2RzKS5mb3JFYWNoKGtleUNvcGllcik7XG5cdCAgICByZXR1cm4gY3Rvcjtcblx0ICB9XG5cdFxuXHQgIEl0ZXJhYmxlLkl0ZXJhdG9yID0gSXRlcmF0b3I7XG5cdFxuXHQgIG1peGluKEl0ZXJhYmxlLCB7XG5cdFxuXHQgICAgLy8gIyMjIENvbnZlcnNpb24gdG8gb3RoZXIgdHlwZXNcblx0XG5cdCAgICB0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0ICAgICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcblx0ICAgICAgdmFyIGFycmF5ID0gbmV3IEFycmF5KHRoaXMuc2l6ZSB8fCAwKTtcblx0ICAgICAgdGhpcy52YWx1ZVNlcSgpLl9faXRlcmF0ZShmdW5jdGlvbih2LCBpKSAgeyBhcnJheVtpXSA9IHY7IH0pO1xuXHQgICAgICByZXR1cm4gYXJyYXk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHRvSW5kZXhlZFNlcTogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiBuZXcgVG9JbmRleGVkU2VxdWVuY2UodGhpcyk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHRvSlM6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy50b1NlcSgpLm1hcChcblx0ICAgICAgICBmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRvSlMgPT09ICdmdW5jdGlvbicgPyB2YWx1ZS50b0pTKCkgOiB2YWx1ZX1cblx0ICAgICAgKS5fX3RvSlMoKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgdG9KU09OOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudG9TZXEoKS5tYXAoXG5cdCAgICAgICAgZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS50b0pTT04gPT09ICdmdW5jdGlvbicgPyB2YWx1ZS50b0pTT04oKSA6IHZhbHVlfVxuXHQgICAgICApLl9fdG9KUygpO1xuXHQgICAgfSxcblx0XG5cdCAgICB0b0tleWVkU2VxOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIG5ldyBUb0tleWVkU2VxdWVuY2UodGhpcywgdHJ1ZSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHRvTWFwOiBmdW5jdGlvbigpIHtcblx0ICAgICAgLy8gVXNlIExhdGUgQmluZGluZyBoZXJlIHRvIHNvbHZlIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuXHQgICAgICByZXR1cm4gTWFwKHRoaXMudG9LZXllZFNlcSgpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgdG9PYmplY3Q6IGZ1bmN0aW9uKCkge1xuXHQgICAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuXHQgICAgICB2YXIgb2JqZWN0ID0ge307XG5cdCAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7IG9iamVjdFtrXSA9IHY7IH0pO1xuXHQgICAgICByZXR1cm4gb2JqZWN0O1xuXHQgICAgfSxcblx0XG5cdCAgICB0b09yZGVyZWRNYXA6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG5cdCAgICAgIHJldHVybiBPcmRlcmVkTWFwKHRoaXMudG9LZXllZFNlcSgpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgdG9PcmRlcmVkU2V0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgLy8gVXNlIExhdGUgQmluZGluZyBoZXJlIHRvIHNvbHZlIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuXHQgICAgICByZXR1cm4gT3JkZXJlZFNldChpc0tleWVkKHRoaXMpID8gdGhpcy52YWx1ZVNlcSgpIDogdGhpcyk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHRvU2V0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgLy8gVXNlIExhdGUgQmluZGluZyBoZXJlIHRvIHNvbHZlIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuXHQgICAgICByZXR1cm4gU2V0KGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgdG9TZXRTZXE6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gbmV3IFRvU2V0U2VxdWVuY2UodGhpcyk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHRvU2VxOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIGlzSW5kZXhlZCh0aGlzKSA/IHRoaXMudG9JbmRleGVkU2VxKCkgOlxuXHQgICAgICAgIGlzS2V5ZWQodGhpcykgPyB0aGlzLnRvS2V5ZWRTZXEoKSA6XG5cdCAgICAgICAgdGhpcy50b1NldFNlcSgpO1xuXHQgICAgfSxcblx0XG5cdCAgICB0b1N0YWNrOiBmdW5jdGlvbigpIHtcblx0ICAgICAgLy8gVXNlIExhdGUgQmluZGluZyBoZXJlIHRvIHNvbHZlIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuXHQgICAgICByZXR1cm4gU3RhY2soaXNLZXllZCh0aGlzKSA/IHRoaXMudmFsdWVTZXEoKSA6IHRoaXMpO1xuXHQgICAgfSxcblx0XG5cdCAgICB0b0xpc3Q6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG5cdCAgICAgIHJldHVybiBMaXN0KGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcblx0ICAgIH0sXG5cdFxuXHRcblx0ICAgIC8vICMjIyBDb21tb24gSmF2YVNjcmlwdCBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzXG5cdFxuXHQgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gJ1tJdGVyYWJsZV0nO1xuXHQgICAgfSxcblx0XG5cdCAgICBfX3RvU3RyaW5nOiBmdW5jdGlvbihoZWFkLCB0YWlsKSB7XG5cdCAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gaGVhZCArIHRhaWw7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGhlYWQgKyAnICcgKyB0aGlzLnRvU2VxKCkubWFwKHRoaXMuX190b1N0cmluZ01hcHBlcikuam9pbignLCAnKSArICcgJyArIHRhaWw7XG5cdCAgICB9LFxuXHRcblx0XG5cdCAgICAvLyAjIyMgRVM2IENvbGxlY3Rpb24gbWV0aG9kcyAoRVM2IEFycmF5IGFuZCBNYXApXG5cdFxuXHQgICAgY29uY2F0OiBmdW5jdGlvbigpIHt2YXIgdmFsdWVzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMCk7XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLCBjb25jYXRGYWN0b3J5KHRoaXMsIHZhbHVlcykpO1xuXHQgICAgfSxcblx0XG5cdCAgICBjb250YWluczogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuc29tZShmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gaXModmFsdWUsIHNlYXJjaFZhbHVlKX0pO1xuXHQgICAgfSxcblx0XG5cdCAgICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMpO1xuXHQgICAgfSxcblx0XG5cdCAgICBldmVyeTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG5cdCAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG5cdCAgICAgIHZhciByZXR1cm5WYWx1ZSA9IHRydWU7XG5cdCAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG5cdCAgICAgICAgaWYgKCFwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuXHQgICAgICAgICAgcmV0dXJuVmFsdWUgPSBmYWxzZTtcblx0ICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG5cdCAgICB9LFxuXHRcblx0ICAgIGZpbHRlcjogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmaWx0ZXJGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgdHJ1ZSkpO1xuXHQgICAgfSxcblx0XG5cdCAgICBmaW5kOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQsIG5vdFNldFZhbHVlKSB7XG5cdCAgICAgIHZhciBlbnRyeSA9IHRoaXMuZmluZEVudHJ5KHByZWRpY2F0ZSwgY29udGV4dCk7XG5cdCAgICAgIHJldHVybiBlbnRyeSA/IGVudHJ5WzFdIDogbm90U2V0VmFsdWU7XG5cdCAgICB9LFxuXHRcblx0ICAgIGZpbmRFbnRyeTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG5cdCAgICAgIHZhciBmb3VuZDtcblx0ICAgICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaywgYykgIHtcblx0ICAgICAgICBpZiAocHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgYykpIHtcblx0ICAgICAgICAgIGZvdW5kID0gW2ssIHZdO1xuXHQgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiBmb3VuZDtcblx0ICAgIH0sXG5cdFxuXHQgICAgZmluZExhc3RFbnRyeTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLmZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQpO1xuXHQgICAgfSxcblx0XG5cdCAgICBmb3JFYWNoOiBmdW5jdGlvbihzaWRlRWZmZWN0LCBjb250ZXh0KSB7XG5cdCAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG5cdCAgICAgIHJldHVybiB0aGlzLl9faXRlcmF0ZShjb250ZXh0ID8gc2lkZUVmZmVjdC5iaW5kKGNvbnRleHQpIDogc2lkZUVmZmVjdCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGpvaW46IGZ1bmN0aW9uKHNlcGFyYXRvcikge1xuXHQgICAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuXHQgICAgICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/ICcnICsgc2VwYXJhdG9yIDogJywnO1xuXHQgICAgICB2YXIgam9pbmVkID0gJyc7XG5cdCAgICAgIHZhciBpc0ZpcnN0ID0gdHJ1ZTtcblx0ICAgICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24odiApIHtcblx0ICAgICAgICBpc0ZpcnN0ID8gKGlzRmlyc3QgPSBmYWxzZSkgOiAoam9pbmVkICs9IHNlcGFyYXRvcik7XG5cdCAgICAgICAgam9pbmVkICs9IHYgIT09IG51bGwgJiYgdiAhPT0gdW5kZWZpbmVkID8gdiA6ICcnO1xuXHQgICAgICB9KTtcblx0ICAgICAgcmV0dXJuIGpvaW5lZDtcblx0ICAgIH0sXG5cdFxuXHQgICAga2V5czogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9faXRlcmF0b3IoSVRFUkFURV9LRVlTKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgbWFwOiBmdW5jdGlvbihtYXBwZXIsIGNvbnRleHQpIHtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIG1hcEZhY3RvcnkodGhpcywgbWFwcGVyLCBjb250ZXh0KSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHJlZHVjZTogZnVuY3Rpb24ocmVkdWNlciwgaW5pdGlhbFJlZHVjdGlvbiwgY29udGV4dCkge1xuXHQgICAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuXHQgICAgICB2YXIgcmVkdWN0aW9uO1xuXHQgICAgICB2YXIgdXNlRmlyc3Q7XG5cdCAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuXHQgICAgICAgIHVzZUZpcnN0ID0gdHJ1ZTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZWR1Y3Rpb24gPSBpbml0aWFsUmVkdWN0aW9uO1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG5cdCAgICAgICAgaWYgKHVzZUZpcnN0KSB7XG5cdCAgICAgICAgICB1c2VGaXJzdCA9IGZhbHNlO1xuXHQgICAgICAgICAgcmVkdWN0aW9uID0gdjtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgcmVkdWN0aW9uID0gcmVkdWNlci5jYWxsKGNvbnRleHQsIHJlZHVjdGlvbiwgdiwgaywgYyk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgICAgcmV0dXJuIHJlZHVjdGlvbjtcblx0ICAgIH0sXG5cdFxuXHQgICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uKHJlZHVjZXIsIGluaXRpYWxSZWR1Y3Rpb24sIGNvbnRleHQpIHtcblx0ICAgICAgdmFyIHJldmVyc2VkID0gdGhpcy50b0tleWVkU2VxKCkucmV2ZXJzZSgpO1xuXHQgICAgICByZXR1cm4gcmV2ZXJzZWQucmVkdWNlLmFwcGx5KHJldmVyc2VkLCBhcmd1bWVudHMpO1xuXHQgICAgfSxcblx0XG5cdCAgICByZXZlcnNlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHJldmVyc2VGYWN0b3J5KHRoaXMsIHRydWUpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgc2xpY2U6IGZ1bmN0aW9uKGJlZ2luLCBlbmQpIHtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNsaWNlRmFjdG9yeSh0aGlzLCBiZWdpbiwgZW5kLCB0cnVlKSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHNvbWU6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuXHQgICAgICByZXR1cm4gIXRoaXMuZXZlcnkobm90KHByZWRpY2F0ZSksIGNvbnRleHQpO1xuXHQgICAgfSxcblx0XG5cdCAgICBzb3J0OiBmdW5jdGlvbihjb21wYXJhdG9yKSB7XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLCBzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yKSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHZhbHVlczogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMpO1xuXHQgICAgfSxcblx0XG5cdFxuXHQgICAgLy8gIyMjIE1vcmUgc2VxdWVudGlhbCBtZXRob2RzXG5cdFxuXHQgICAgYnV0TGFzdDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnNsaWNlKDAsIC0xKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgaXNFbXB0eTogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnNpemUgIT09IHVuZGVmaW5lZCA/IHRoaXMuc2l6ZSA9PT0gMCA6ICF0aGlzLnNvbWUoZnVuY3Rpb24oKSAge3JldHVybiB0cnVlfSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGNvdW50OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcblx0ICAgICAgcmV0dXJuIGVuc3VyZVNpemUoXG5cdCAgICAgICAgcHJlZGljYXRlID8gdGhpcy50b1NlcSgpLmZpbHRlcihwcmVkaWNhdGUsIGNvbnRleHQpIDogdGhpc1xuXHQgICAgICApO1xuXHQgICAgfSxcblx0XG5cdCAgICBjb3VudEJ5OiBmdW5jdGlvbihncm91cGVyLCBjb250ZXh0KSB7XG5cdCAgICAgIHJldHVybiBjb3VudEJ5RmFjdG9yeSh0aGlzLCBncm91cGVyLCBjb250ZXh0KTtcblx0ICAgIH0sXG5cdFxuXHQgICAgZXF1YWxzOiBmdW5jdGlvbihvdGhlcikge1xuXHQgICAgICByZXR1cm4gZGVlcEVxdWFsKHRoaXMsIG90aGVyKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgZW50cnlTZXE6IGZ1bmN0aW9uKCkge1xuXHQgICAgICB2YXIgaXRlcmFibGUgPSB0aGlzO1xuXHQgICAgICBpZiAoaXRlcmFibGUuX2NhY2hlKSB7XG5cdCAgICAgICAgLy8gV2UgY2FjaGUgYXMgYW4gZW50cmllcyBhcnJheSwgc28gd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBjYWNoZSFcblx0ICAgICAgICByZXR1cm4gbmV3IEFycmF5U2VxKGl0ZXJhYmxlLl9jYWNoZSk7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIGVudHJpZXNTZXF1ZW5jZSA9IGl0ZXJhYmxlLnRvU2VxKCkubWFwKGVudHJ5TWFwcGVyKS50b0luZGV4ZWRTZXEoKTtcblx0ICAgICAgZW50cmllc1NlcXVlbmNlLmZyb21FbnRyeVNlcSA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGUudG9TZXEoKX07XG5cdCAgICAgIHJldHVybiBlbnRyaWVzU2VxdWVuY2U7XG5cdCAgICB9LFxuXHRcblx0ICAgIGZpbHRlck5vdDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmZpbHRlcihub3QocHJlZGljYXRlKSwgY29udGV4dCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGZpbmRMYXN0OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQsIG5vdFNldFZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnRvS2V5ZWRTZXEoKS5yZXZlcnNlKCkuZmluZChwcmVkaWNhdGUsIGNvbnRleHQsIG5vdFNldFZhbHVlKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgZmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5maW5kKHJldHVyblRydWUpO1xuXHQgICAgfSxcblx0XG5cdCAgICBmbGF0TWFwOiBmdW5jdGlvbihtYXBwZXIsIGNvbnRleHQpIHtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZsYXRNYXBGYWN0b3J5KHRoaXMsIG1hcHBlciwgY29udGV4dCkpO1xuXHQgICAgfSxcblx0XG5cdCAgICBmbGF0dGVuOiBmdW5jdGlvbihkZXB0aCkge1xuXHQgICAgICByZXR1cm4gcmVpZnkodGhpcywgZmxhdHRlbkZhY3RvcnkodGhpcywgZGVwdGgsIHRydWUpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgZnJvbUVudHJ5U2VxOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIG5ldyBGcm9tRW50cmllc1NlcXVlbmNlKHRoaXMpO1xuXHQgICAgfSxcblx0XG5cdCAgICBnZXQ6IGZ1bmN0aW9uKHNlYXJjaEtleSwgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuZmluZChmdW5jdGlvbihfLCBrZXkpICB7cmV0dXJuIGlzKGtleSwgc2VhcmNoS2V5KX0sIHVuZGVmaW5lZCwgbm90U2V0VmFsdWUpO1xuXHQgICAgfSxcblx0XG5cdCAgICBnZXRJbjogZnVuY3Rpb24oc2VhcmNoS2V5UGF0aCwgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgdmFyIG5lc3RlZCA9IHRoaXM7XG5cdCAgICAgIC8vIE5vdGU6IGluIGFuIEVTNiBlbnZpcm9ubWVudCwgd2Ugd291bGQgcHJlZmVyOlxuXHQgICAgICAvLyBmb3IgKHZhciBrZXkgb2Ygc2VhcmNoS2V5UGF0aCkge1xuXHQgICAgICB2YXIgaXRlciA9IGZvcmNlSXRlcmF0b3Ioc2VhcmNoS2V5UGF0aCk7XG5cdCAgICAgIHZhciBzdGVwO1xuXHQgICAgICB3aGlsZSAoIShzdGVwID0gaXRlci5uZXh0KCkpLmRvbmUpIHtcblx0ICAgICAgICB2YXIga2V5ID0gc3RlcC52YWx1ZTtcblx0ICAgICAgICBuZXN0ZWQgPSBuZXN0ZWQgJiYgbmVzdGVkLmdldCA/IG5lc3RlZC5nZXQoa2V5LCBOT1RfU0VUKSA6IE5PVF9TRVQ7XG5cdCAgICAgICAgaWYgKG5lc3RlZCA9PT0gTk9UX1NFVCkge1xuXHQgICAgICAgICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gbmVzdGVkO1xuXHQgICAgfSxcblx0XG5cdCAgICBncm91cEJ5OiBmdW5jdGlvbihncm91cGVyLCBjb250ZXh0KSB7XG5cdCAgICAgIHJldHVybiBncm91cEJ5RmFjdG9yeSh0aGlzLCBncm91cGVyLCBjb250ZXh0KTtcblx0ICAgIH0sXG5cdFxuXHQgICAgaGFzOiBmdW5jdGlvbihzZWFyY2hLZXkpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuZ2V0KHNlYXJjaEtleSwgTk9UX1NFVCkgIT09IE5PVF9TRVQ7XG5cdCAgICB9LFxuXHRcblx0ICAgIGhhc0luOiBmdW5jdGlvbihzZWFyY2hLZXlQYXRoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmdldEluKHNlYXJjaEtleVBhdGgsIE5PVF9TRVQpICE9PSBOT1RfU0VUO1xuXHQgICAgfSxcblx0XG5cdCAgICBpc1N1YnNldDogZnVuY3Rpb24oaXRlcikge1xuXHQgICAgICBpdGVyID0gdHlwZW9mIGl0ZXIuY29udGFpbnMgPT09ICdmdW5jdGlvbicgPyBpdGVyIDogSXRlcmFibGUoaXRlcik7XG5cdCAgICAgIHJldHVybiB0aGlzLmV2ZXJ5KGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBpdGVyLmNvbnRhaW5zKHZhbHVlKX0pO1xuXHQgICAgfSxcblx0XG5cdCAgICBpc1N1cGVyc2V0OiBmdW5jdGlvbihpdGVyKSB7XG5cdCAgICAgIHJldHVybiBpdGVyLmlzU3Vic2V0KHRoaXMpO1xuXHQgICAgfSxcblx0XG5cdCAgICBrZXlTZXE6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy50b1NlcSgpLm1hcChrZXlNYXBwZXIpLnRvSW5kZXhlZFNlcSgpO1xuXHQgICAgfSxcblx0XG5cdCAgICBsYXN0OiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudG9TZXEoKS5yZXZlcnNlKCkuZmlyc3QoKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgbWF4OiBmdW5jdGlvbihjb21wYXJhdG9yKSB7XG5cdCAgICAgIHJldHVybiBtYXhGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IpO1xuXHQgICAgfSxcblx0XG5cdCAgICBtYXhCeTogZnVuY3Rpb24obWFwcGVyLCBjb21wYXJhdG9yKSB7XG5cdCAgICAgIHJldHVybiBtYXhGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IsIG1hcHBlcik7XG5cdCAgICB9LFxuXHRcblx0ICAgIG1pbjogZnVuY3Rpb24oY29tcGFyYXRvcikge1xuXHQgICAgICByZXR1cm4gbWF4RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yID8gbmVnKGNvbXBhcmF0b3IpIDogZGVmYXVsdE5lZ0NvbXBhcmF0b3IpO1xuXHQgICAgfSxcblx0XG5cdCAgICBtaW5CeTogZnVuY3Rpb24obWFwcGVyLCBjb21wYXJhdG9yKSB7XG5cdCAgICAgIHJldHVybiBtYXhGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IgPyBuZWcoY29tcGFyYXRvcikgOiBkZWZhdWx0TmVnQ29tcGFyYXRvciwgbWFwcGVyKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgcmVzdDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnNsaWNlKDEpO1xuXHQgICAgfSxcblx0XG5cdCAgICBza2lwOiBmdW5jdGlvbihhbW91bnQpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuc2xpY2UoTWF0aC5tYXgoMCwgYW1vdW50KSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHNraXBMYXN0OiBmdW5jdGlvbihhbW91bnQpIHtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHRoaXMudG9TZXEoKS5yZXZlcnNlKCkuc2tpcChhbW91bnQpLnJldmVyc2UoKSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHNraXBXaGlsZTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLCBza2lwV2hpbGVGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgdHJ1ZSkpO1xuXHQgICAgfSxcblx0XG5cdCAgICBza2lwVW50aWw6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5za2lwV2hpbGUobm90KHByZWRpY2F0ZSksIGNvbnRleHQpO1xuXHQgICAgfSxcblx0XG5cdCAgICBzb3J0Qnk6IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuXHQgICAgICByZXR1cm4gcmVpZnkodGhpcywgc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvciwgbWFwcGVyKSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHRha2U6IGZ1bmN0aW9uKGFtb3VudCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5zbGljZSgwLCBNYXRoLm1heCgwLCBhbW91bnQpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgdGFrZUxhc3Q6IGZ1bmN0aW9uKGFtb3VudCkge1xuXHQgICAgICByZXR1cm4gcmVpZnkodGhpcywgdGhpcy50b1NlcSgpLnJldmVyc2UoKS50YWtlKGFtb3VudCkucmV2ZXJzZSgpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgdGFrZVdoaWxlOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHRha2VXaGlsZUZhY3RvcnkodGhpcywgcHJlZGljYXRlLCBjb250ZXh0KSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHRha2VVbnRpbDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnRha2VXaGlsZShub3QocHJlZGljYXRlKSwgY29udGV4dCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHZhbHVlU2VxOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudG9JbmRleGVkU2VxKCk7XG5cdCAgICB9LFxuXHRcblx0XG5cdCAgICAvLyAjIyMgSGFzaGFibGUgT2JqZWN0XG5cdFxuXHQgICAgaGFzaENvZGU6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fX2hhc2ggfHwgKHRoaXMuX19oYXNoID0gaGFzaEl0ZXJhYmxlKHRoaXMpKTtcblx0ICAgIH0sXG5cdFxuXHRcblx0ICAgIC8vICMjIyBJbnRlcm5hbFxuXHRcblx0ICAgIC8vIGFic3RyYWN0IF9faXRlcmF0ZShmbiwgcmV2ZXJzZSlcblx0XG5cdCAgICAvLyBhYnN0cmFjdCBfX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpXG5cdCAgfSk7XG5cdFxuXHQgIC8vIHZhciBJU19JVEVSQUJMRV9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0lURVJBQkxFX19AQCc7XG5cdCAgLy8gdmFyIElTX0tFWUVEX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfS0VZRURfX0BAJztcblx0ICAvLyB2YXIgSVNfSU5ERVhFRF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0lOREVYRURfX0BAJztcblx0ICAvLyB2YXIgSVNfT1JERVJFRF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX09SREVSRURfX0BAJztcblx0XG5cdCAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuXHQgIEl0ZXJhYmxlUHJvdG90eXBlW0lTX0lURVJBQkxFX1NFTlRJTkVMXSA9IHRydWU7XG5cdCAgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JfU1lNQk9MXSA9IEl0ZXJhYmxlUHJvdG90eXBlLnZhbHVlcztcblx0ICBJdGVyYWJsZVByb3RvdHlwZS5fX3RvSlMgPSBJdGVyYWJsZVByb3RvdHlwZS50b0FycmF5O1xuXHQgIEl0ZXJhYmxlUHJvdG90eXBlLl9fdG9TdHJpbmdNYXBwZXIgPSBxdW90ZVN0cmluZztcblx0ICBJdGVyYWJsZVByb3RvdHlwZS5pbnNwZWN0ID1cblx0ICBJdGVyYWJsZVByb3RvdHlwZS50b1NvdXJjZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy50b1N0cmluZygpOyB9O1xuXHQgIEl0ZXJhYmxlUHJvdG90eXBlLmNoYWluID0gSXRlcmFibGVQcm90b3R5cGUuZmxhdE1hcDtcblx0XG5cdCAgLy8gVGVtcG9yYXJ5IHdhcm5pbmcgYWJvdXQgdXNpbmcgbGVuZ3RoXG5cdCAgKGZ1bmN0aW9uICgpIHtcblx0ICAgIHRyeSB7XG5cdCAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJdGVyYWJsZVByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIGlmICghSXRlcmFibGUubm9MZW5ndGhXYXJuaW5nKSB7XG5cdCAgICAgICAgICAgIHZhciBzdGFjaztcblx0ICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcblx0ICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcblx0ICAgICAgICAgICAgICBzdGFjayA9IGVycm9yLnN0YWNrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmIChzdGFjay5pbmRleE9mKCdfd3JhcE9iamVjdCcpID09PSAtMSkge1xuXHQgICAgICAgICAgICAgIGNvbnNvbGUgJiYgY29uc29sZS53YXJuICYmIGNvbnNvbGUud2Fybihcblx0ICAgICAgICAgICAgICAgICdpdGVyYWJsZS5sZW5ndGggaGFzIGJlZW4gZGVwcmVjYXRlZCwgJytcblx0ICAgICAgICAgICAgICAgICd1c2UgaXRlcmFibGUuc2l6ZSBvciBpdGVyYWJsZS5jb3VudCgpLiAnK1xuXHQgICAgICAgICAgICAgICAgJ1RoaXMgd2FybmluZyB3aWxsIGJlY29tZSBhIHNpbGVudCBlcnJvciBpbiBhIGZ1dHVyZSB2ZXJzaW9uLiAnICtcblx0ICAgICAgICAgICAgICAgIHN0YWNrXG5cdCAgICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zaXplO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgIH0gY2F0Y2ggKGUpIHt9XG5cdCAgfSkoKTtcblx0XG5cdFxuXHRcblx0ICBtaXhpbihLZXllZEl0ZXJhYmxlLCB7XG5cdFxuXHQgICAgLy8gIyMjIE1vcmUgc2VxdWVudGlhbCBtZXRob2RzXG5cdFxuXHQgICAgZmxpcDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGlwRmFjdG9yeSh0aGlzKSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGZpbmRLZXk6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuXHQgICAgICB2YXIgZW50cnkgPSB0aGlzLmZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQpO1xuXHQgICAgICByZXR1cm4gZW50cnkgJiYgZW50cnlbMF07XG5cdCAgICB9LFxuXHRcblx0ICAgIGZpbmRMYXN0S2V5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudG9TZXEoKS5yZXZlcnNlKCkuZmluZEtleShwcmVkaWNhdGUsIGNvbnRleHQpO1xuXHQgICAgfSxcblx0XG5cdCAgICBrZXlPZjogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuZmluZEtleShmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gaXModmFsdWUsIHNlYXJjaFZhbHVlKX0pO1xuXHQgICAgfSxcblx0XG5cdCAgICBsYXN0S2V5T2Y6IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmZpbmRMYXN0S2V5KGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBpcyh2YWx1ZSwgc2VhcmNoVmFsdWUpfSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIG1hcEVudHJpZXM6IGZ1bmN0aW9uKG1hcHBlciwgY29udGV4dCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLFxuXHQgICAgICAgIHRoaXMudG9TZXEoKS5tYXAoXG5cdCAgICAgICAgICBmdW5jdGlvbih2LCBrKSAge3JldHVybiBtYXBwZXIuY2FsbChjb250ZXh0LCBbaywgdl0sIGl0ZXJhdGlvbnMrKywgdGhpcyQwKX1cblx0ICAgICAgICApLmZyb21FbnRyeVNlcSgpXG5cdCAgICAgICk7XG5cdCAgICB9LFxuXHRcblx0ICAgIG1hcEtleXM6IGZ1bmN0aW9uKG1hcHBlciwgY29udGV4dCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuXHQgICAgICByZXR1cm4gcmVpZnkodGhpcyxcblx0ICAgICAgICB0aGlzLnRvU2VxKCkuZmxpcCgpLm1hcChcblx0ICAgICAgICAgIGZ1bmN0aW9uKGssIHYpICB7cmV0dXJuIG1hcHBlci5jYWxsKGNvbnRleHQsIGssIHYsIHRoaXMkMCl9XG5cdCAgICAgICAgKS5mbGlwKClcblx0ICAgICAgKTtcblx0ICAgIH0sXG5cdFxuXHQgIH0pO1xuXHRcblx0ICB2YXIgS2V5ZWRJdGVyYWJsZVByb3RvdHlwZSA9IEtleWVkSXRlcmFibGUucHJvdG90eXBlO1xuXHQgIEtleWVkSXRlcmFibGVQcm90b3R5cGVbSVNfS0VZRURfU0VOVElORUxdID0gdHJ1ZTtcblx0ICBLZXllZEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SX1NZTUJPTF0gPSBJdGVyYWJsZVByb3RvdHlwZS5lbnRyaWVzO1xuXHQgIEtleWVkSXRlcmFibGVQcm90b3R5cGUuX190b0pTID0gSXRlcmFibGVQcm90b3R5cGUudG9PYmplY3Q7XG5cdCAgS2V5ZWRJdGVyYWJsZVByb3RvdHlwZS5fX3RvU3RyaW5nTWFwcGVyID0gZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gayArICc6ICcgKyBxdW90ZVN0cmluZyh2KX07XG5cdFxuXHRcblx0XG5cdCAgbWl4aW4oSW5kZXhlZEl0ZXJhYmxlLCB7XG5cdFxuXHQgICAgLy8gIyMjIENvbnZlcnNpb24gdG8gb3RoZXIgdHlwZXNcblx0XG5cdCAgICB0b0tleWVkU2VxOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIG5ldyBUb0tleWVkU2VxdWVuY2UodGhpcywgZmFsc2UpO1xuXHQgICAgfSxcblx0XG5cdFxuXHQgICAgLy8gIyMjIEVTNiBDb2xsZWN0aW9uIG1ldGhvZHMgKEVTNiBBcnJheSBhbmQgTWFwKVxuXHRcblx0ICAgIGZpbHRlcjogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmaWx0ZXJGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgZmFsc2UpKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgZmluZEluZGV4OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcblx0ICAgICAgdmFyIGVudHJ5ID0gdGhpcy5maW5kRW50cnkocHJlZGljYXRlLCBjb250ZXh0KTtcblx0ICAgICAgcmV0dXJuIGVudHJ5ID8gZW50cnlbMF0gOiAtMTtcblx0ICAgIH0sXG5cdFxuXHQgICAgaW5kZXhPZjogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcblx0ICAgICAgdmFyIGtleSA9IHRoaXMudG9LZXllZFNlcSgpLmtleU9mKHNlYXJjaFZhbHVlKTtcblx0ICAgICAgcmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID8gLTEgOiBrZXk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuXHQgICAgICByZXR1cm4gdGhpcy50b1NlcSgpLnJldmVyc2UoKS5pbmRleE9mKHNlYXJjaFZhbHVlKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgcmV2ZXJzZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLCByZXZlcnNlRmFjdG9yeSh0aGlzLCBmYWxzZSkpO1xuXHQgICAgfSxcblx0XG5cdCAgICBzbGljZTogZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuXHQgICAgICByZXR1cm4gcmVpZnkodGhpcywgc2xpY2VGYWN0b3J5KHRoaXMsIGJlZ2luLCBlbmQsIGZhbHNlKSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHNwbGljZTogZnVuY3Rpb24oaW5kZXgsIHJlbW92ZU51bSAvKiwgLi4udmFsdWVzKi8pIHtcblx0ICAgICAgdmFyIG51bUFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoO1xuXHQgICAgICByZW1vdmVOdW0gPSBNYXRoLm1heChyZW1vdmVOdW0gfCAwLCAwKTtcblx0ICAgICAgaWYgKG51bUFyZ3MgPT09IDAgfHwgKG51bUFyZ3MgPT09IDIgJiYgIXJlbW92ZU51bSkpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgfVxuXHQgICAgICBpbmRleCA9IHJlc29sdmVCZWdpbihpbmRleCwgdGhpcy5zaXplKTtcblx0ICAgICAgdmFyIHNwbGljZWQgPSB0aGlzLnNsaWNlKDAsIGluZGV4KTtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KFxuXHQgICAgICAgIHRoaXMsXG5cdCAgICAgICAgbnVtQXJncyA9PT0gMSA/XG5cdCAgICAgICAgICBzcGxpY2VkIDpcblx0ICAgICAgICAgIHNwbGljZWQuY29uY2F0KGFyckNvcHkoYXJndW1lbnRzLCAyKSwgdGhpcy5zbGljZShpbmRleCArIHJlbW92ZU51bSkpXG5cdCAgICAgICk7XG5cdCAgICB9LFxuXHRcblx0XG5cdCAgICAvLyAjIyMgTW9yZSBjb2xsZWN0aW9uIG1ldGhvZHNcblx0XG5cdCAgICBmaW5kTGFzdEluZGV4OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcblx0ICAgICAgdmFyIGtleSA9IHRoaXMudG9LZXllZFNlcSgpLmZpbmRMYXN0S2V5KHByZWRpY2F0ZSwgY29udGV4dCk7XG5cdCAgICAgIHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/IC0xIDoga2V5O1xuXHQgICAgfSxcblx0XG5cdCAgICBmaXJzdDogZnVuY3Rpb24oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmdldCgwKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgZmxhdHRlbjogZnVuY3Rpb24oZGVwdGgpIHtcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZsYXR0ZW5GYWN0b3J5KHRoaXMsIGRlcHRoLCBmYWxzZSkpO1xuXHQgICAgfSxcblx0XG5cdCAgICBnZXQ6IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuXHQgICAgICBpbmRleCA9IHdyYXBJbmRleCh0aGlzLCBpbmRleCk7XG5cdCAgICAgIHJldHVybiAoaW5kZXggPCAwIHx8ICh0aGlzLnNpemUgPT09IEluZmluaXR5IHx8XG5cdCAgICAgICAgICAodGhpcy5zaXplICE9PSB1bmRlZmluZWQgJiYgaW5kZXggPiB0aGlzLnNpemUpKSkgP1xuXHQgICAgICAgIG5vdFNldFZhbHVlIDpcblx0ICAgICAgICB0aGlzLmZpbmQoZnVuY3Rpb24oXywga2V5KSAge3JldHVybiBrZXkgPT09IGluZGV4fSwgdW5kZWZpbmVkLCBub3RTZXRWYWx1ZSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGhhczogZnVuY3Rpb24oaW5kZXgpIHtcblx0ICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuXHQgICAgICByZXR1cm4gaW5kZXggPj0gMCAmJiAodGhpcy5zaXplICE9PSB1bmRlZmluZWQgP1xuXHQgICAgICAgIHRoaXMuc2l6ZSA9PT0gSW5maW5pdHkgfHwgaW5kZXggPCB0aGlzLnNpemUgOlxuXHQgICAgICAgIHRoaXMuaW5kZXhPZihpbmRleCkgIT09IC0xXG5cdCAgICAgICk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGludGVycG9zZTogZnVuY3Rpb24oc2VwYXJhdG9yKSB7XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLCBpbnRlcnBvc2VGYWN0b3J5KHRoaXMsIHNlcGFyYXRvcikpO1xuXHQgICAgfSxcblx0XG5cdCAgICBpbnRlcmxlYXZlOiBmdW5jdGlvbigvKi4uLml0ZXJhYmxlcyovKSB7XG5cdCAgICAgIHZhciBpdGVyYWJsZXMgPSBbdGhpc10uY29uY2F0KGFyckNvcHkoYXJndW1lbnRzKSk7XG5cdCAgICAgIHZhciB6aXBwZWQgPSB6aXBXaXRoRmFjdG9yeSh0aGlzLnRvU2VxKCksIEluZGV4ZWRTZXEub2YsIGl0ZXJhYmxlcyk7XG5cdCAgICAgIHZhciBpbnRlcmxlYXZlZCA9IHppcHBlZC5mbGF0dGVuKHRydWUpO1xuXHQgICAgICBpZiAoemlwcGVkLnNpemUpIHtcblx0ICAgICAgICBpbnRlcmxlYXZlZC5zaXplID0gemlwcGVkLnNpemUgKiBpdGVyYWJsZXMubGVuZ3RoO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiByZWlmeSh0aGlzLCBpbnRlcmxlYXZlZCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5nZXQoLTEpO1xuXHQgICAgfSxcblx0XG5cdCAgICBza2lwV2hpbGU6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuXHQgICAgICByZXR1cm4gcmVpZnkodGhpcywgc2tpcFdoaWxlRmFjdG9yeSh0aGlzLCBwcmVkaWNhdGUsIGNvbnRleHQsIGZhbHNlKSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHppcDogZnVuY3Rpb24oLyosIC4uLml0ZXJhYmxlcyAqLykge1xuXHQgICAgICB2YXIgaXRlcmFibGVzID0gW3RoaXNdLmNvbmNhdChhcnJDb3B5KGFyZ3VtZW50cykpO1xuXHQgICAgICByZXR1cm4gcmVpZnkodGhpcywgemlwV2l0aEZhY3RvcnkodGhpcywgZGVmYXVsdFppcHBlciwgaXRlcmFibGVzKSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIHppcFdpdGg6IGZ1bmN0aW9uKHppcHBlci8qLCAuLi5pdGVyYWJsZXMgKi8pIHtcblx0ICAgICAgdmFyIGl0ZXJhYmxlcyA9IGFyckNvcHkoYXJndW1lbnRzKTtcblx0ICAgICAgaXRlcmFibGVzWzBdID0gdGhpcztcblx0ICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHppcFdpdGhGYWN0b3J5KHRoaXMsIHppcHBlciwgaXRlcmFibGVzKSk7XG5cdCAgICB9LFxuXHRcblx0ICB9KTtcblx0XG5cdCAgSW5kZXhlZEl0ZXJhYmxlLnByb3RvdHlwZVtJU19JTkRFWEVEX1NFTlRJTkVMXSA9IHRydWU7XG5cdCAgSW5kZXhlZEl0ZXJhYmxlLnByb3RvdHlwZVtJU19PUkRFUkVEX1NFTlRJTkVMXSA9IHRydWU7XG5cdFxuXHRcblx0XG5cdCAgbWl4aW4oU2V0SXRlcmFibGUsIHtcblx0XG5cdCAgICAvLyAjIyMgRVM2IENvbGxlY3Rpb24gbWV0aG9kcyAoRVM2IEFycmF5IGFuZCBNYXApXG5cdFxuXHQgICAgZ2V0OiBmdW5jdGlvbih2YWx1ZSwgbm90U2V0VmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuaGFzKHZhbHVlKSA/IHZhbHVlIDogbm90U2V0VmFsdWU7XG5cdCAgICB9LFxuXHRcblx0ICAgIGNvbnRhaW5zOiBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5oYXModmFsdWUpO1xuXHQgICAgfSxcblx0XG5cdFxuXHQgICAgLy8gIyMjIE1vcmUgc2VxdWVudGlhbCBtZXRob2RzXG5cdFxuXHQgICAga2V5U2VxOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudmFsdWVTZXEoKTtcblx0ICAgIH0sXG5cdFxuXHQgIH0pO1xuXHRcblx0ICBTZXRJdGVyYWJsZS5wcm90b3R5cGUuaGFzID0gSXRlcmFibGVQcm90b3R5cGUuY29udGFpbnM7XG5cdFxuXHRcblx0ICAvLyBNaXhpbiBzdWJjbGFzc2VzXG5cdFxuXHQgIG1peGluKEtleWVkU2VxLCBLZXllZEl0ZXJhYmxlLnByb3RvdHlwZSk7XG5cdCAgbWl4aW4oSW5kZXhlZFNlcSwgSW5kZXhlZEl0ZXJhYmxlLnByb3RvdHlwZSk7XG5cdCAgbWl4aW4oU2V0U2VxLCBTZXRJdGVyYWJsZS5wcm90b3R5cGUpO1xuXHRcblx0ICBtaXhpbihLZXllZENvbGxlY3Rpb24sIEtleWVkSXRlcmFibGUucHJvdG90eXBlKTtcblx0ICBtaXhpbihJbmRleGVkQ29sbGVjdGlvbiwgSW5kZXhlZEl0ZXJhYmxlLnByb3RvdHlwZSk7XG5cdCAgbWl4aW4oU2V0Q29sbGVjdGlvbiwgU2V0SXRlcmFibGUucHJvdG90eXBlKTtcblx0XG5cdFxuXHQgIC8vICNwcmFnbWEgSGVscGVyIGZ1bmN0aW9uc1xuXHRcblx0ICBmdW5jdGlvbiBrZXlNYXBwZXIodiwgaykge1xuXHQgICAgcmV0dXJuIGs7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBlbnRyeU1hcHBlcih2LCBrKSB7XG5cdCAgICByZXR1cm4gW2ssIHZdO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gbm90KHByZWRpY2F0ZSkge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gbmVnKHByZWRpY2F0ZSkge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gLXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gcXVvdGVTdHJpbmcodmFsdWUpIHtcblx0ICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogdmFsdWU7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBkZWZhdWx0WmlwcGVyKCkge1xuXHQgICAgcmV0dXJuIGFyckNvcHkoYXJndW1lbnRzKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGRlZmF1bHROZWdDb21wYXJhdG9yKGEsIGIpIHtcblx0ICAgIHJldHVybiBhIDwgYiA/IDEgOiBhID4gYiA/IC0xIDogMDtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGhhc2hJdGVyYWJsZShpdGVyYWJsZSkge1xuXHQgICAgaWYgKGl0ZXJhYmxlLnNpemUgPT09IEluZmluaXR5KSB7XG5cdCAgICAgIHJldHVybiAwO1xuXHQgICAgfVxuXHQgICAgdmFyIG9yZGVyZWQgPSBpc09yZGVyZWQoaXRlcmFibGUpO1xuXHQgICAgdmFyIGtleWVkID0gaXNLZXllZChpdGVyYWJsZSk7XG5cdCAgICB2YXIgaCA9IG9yZGVyZWQgPyAxIDogMDtcblx0ICAgIHZhciBzaXplID0gaXRlcmFibGUuX19pdGVyYXRlKFxuXHQgICAgICBrZXllZCA/XG5cdCAgICAgICAgb3JkZXJlZCA/XG5cdCAgICAgICAgICBmdW5jdGlvbih2LCBrKSAgeyBoID0gMzEgKiBoICsgaGFzaE1lcmdlKGhhc2godiksIGhhc2goaykpIHwgMDsgfSA6XG5cdCAgICAgICAgICBmdW5jdGlvbih2LCBrKSAgeyBoID0gaCArIGhhc2hNZXJnZShoYXNoKHYpLCBoYXNoKGspKSB8IDA7IH0gOlxuXHQgICAgICAgIG9yZGVyZWQgP1xuXHQgICAgICAgICAgZnVuY3Rpb24odiApIHsgaCA9IDMxICogaCArIGhhc2godikgfCAwOyB9IDpcblx0ICAgICAgICAgIGZ1bmN0aW9uKHYgKSB7IGggPSBoICsgaGFzaCh2KSB8IDA7IH1cblx0ICAgICk7XG5cdCAgICByZXR1cm4gbXVybXVySGFzaE9mU2l6ZShzaXplLCBoKTtcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIG11cm11ckhhc2hPZlNpemUoc2l6ZSwgaCkge1xuXHQgICAgaCA9IE1hdGhfX2ltdWwoaCwgMHhDQzlFMkQ1MSk7XG5cdCAgICBoID0gTWF0aF9faW11bChoIDw8IDE1IHwgaCA+Pj4gLTE1LCAweDFCODczNTkzKTtcblx0ICAgIGggPSBNYXRoX19pbXVsKGggPDwgMTMgfCBoID4+PiAtMTMsIDUpO1xuXHQgICAgaCA9IChoICsgMHhFNjU0NkI2NCB8IDApIF4gc2l6ZTtcblx0ICAgIGggPSBNYXRoX19pbXVsKGggXiBoID4+PiAxNiwgMHg4NUVCQ0E2Qik7XG5cdCAgICBoID0gTWF0aF9faW11bChoIF4gaCA+Pj4gMTMsIDB4QzJCMkFFMzUpO1xuXHQgICAgaCA9IHNtaShoIF4gaCA+Pj4gMTYpO1xuXHQgICAgcmV0dXJuIGg7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBoYXNoTWVyZ2UoYSwgYikge1xuXHQgICAgcmV0dXJuIGEgXiBiICsgMHg5RTM3NzlCOSArIChhIDw8IDYpICsgKGEgPj4gMikgfCAwOyAvLyBpbnRcblx0ICB9XG5cdFxuXHQgIHZhciBJbW11dGFibGUgPSB7XG5cdFxuXHQgICAgSXRlcmFibGU6IEl0ZXJhYmxlLFxuXHRcblx0ICAgIFNlcTogU2VxLFxuXHQgICAgQ29sbGVjdGlvbjogQ29sbGVjdGlvbixcblx0ICAgIE1hcDogTWFwLFxuXHQgICAgT3JkZXJlZE1hcDogT3JkZXJlZE1hcCxcblx0ICAgIExpc3Q6IExpc3QsXG5cdCAgICBTdGFjazogU3RhY2ssXG5cdCAgICBTZXQ6IFNldCxcblx0ICAgIE9yZGVyZWRTZXQ6IE9yZGVyZWRTZXQsXG5cdFxuXHQgICAgUmVjb3JkOiBSZWNvcmQsXG5cdCAgICBSYW5nZTogUmFuZ2UsXG5cdCAgICBSZXBlYXQ6IFJlcGVhdCxcblx0XG5cdCAgICBpczogaXMsXG5cdCAgICBmcm9tSlM6IGZyb21KUyxcblx0XG5cdCAgfTtcblx0XG5cdCAgcmV0dXJuIEltbXV0YWJsZTtcblx0XG5cdH0pKTtcblxuLyoqKi8gfSxcbi8qIDk2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogTW9kdWxlIGRlcGVuZGVuY2llc1xuXHQgKi9cblx0XG5cdHZhciBkZWJ1ZyA9IF9fd2VicGFja19yZXF1aXJlX18oOTcpKCdqc29ucCcpO1xuXHRcblx0LyoqXG5cdCAqIE1vZHVsZSBleHBvcnRzLlxuXHQgKi9cblx0XG5cdG1vZHVsZS5leHBvcnRzID0ganNvbnA7XG5cdFxuXHQvKipcblx0ICogQ2FsbGJhY2sgaW5kZXguXG5cdCAqL1xuXHRcblx0dmFyIGNvdW50ID0gMDtcblx0XG5cdC8qKlxuXHQgKiBOb29wIGZ1bmN0aW9uLlxuXHQgKi9cblx0XG5cdGZ1bmN0aW9uIG5vb3AoKXt9XG5cdFxuXHQvKipcblx0ICogSlNPTlAgaGFuZGxlclxuXHQgKlxuXHQgKiBPcHRpb25zOlxuXHQgKiAgLSBwYXJhbSB7U3RyaW5nfSBxcyBwYXJhbWV0ZXIgKGBjYWxsYmFja2ApXG5cdCAqICAtIHRpbWVvdXQge051bWJlcn0gaG93IGxvbmcgYWZ0ZXIgYSB0aW1lb3V0IGVycm9yIGlzIGVtaXR0ZWQgKGA2MDAwMGApXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcblx0ICogQHBhcmFtIHtPYmplY3R8RnVuY3Rpb259IG9wdGlvbmFsIG9wdGlvbnMgLyBjYWxsYmFja1xuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25hbCBjYWxsYmFja1xuXHQgKi9cblx0XG5cdGZ1bmN0aW9uIGpzb25wKHVybCwgb3B0cywgZm4pe1xuXHQgIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBvcHRzKSB7XG5cdCAgICBmbiA9IG9wdHM7XG5cdCAgICBvcHRzID0ge307XG5cdCAgfVxuXHQgIGlmICghb3B0cykgb3B0cyA9IHt9O1xuXHRcblx0ICB2YXIgcHJlZml4ID0gb3B0cy5wcmVmaXggfHwgJ19fanAnO1xuXHQgIHZhciBwYXJhbSA9IG9wdHMucGFyYW0gfHwgJ2NhbGxiYWNrJztcblx0ICB2YXIgdGltZW91dCA9IG51bGwgIT0gb3B0cy50aW1lb3V0ID8gb3B0cy50aW1lb3V0IDogNjAwMDA7XG5cdCAgdmFyIGVuYyA9IGVuY29kZVVSSUNvbXBvbmVudDtcblx0ICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdIHx8IGRvY3VtZW50LmhlYWQ7XG5cdCAgdmFyIHNjcmlwdDtcblx0ICB2YXIgdGltZXI7XG5cdFxuXHQgIC8vIGdlbmVyYXRlIGEgdW5pcXVlIGlkIGZvciB0aGlzIHJlcXVlc3Rcblx0ICB2YXIgaWQgPSBwcmVmaXggKyAoY291bnQrKyk7XG5cdFxuXHQgIGlmICh0aW1lb3V0KSB7XG5cdCAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0ICAgICAgY2xlYW51cCgpO1xuXHQgICAgICBpZiAoZm4pIGZuKG5ldyBFcnJvcignVGltZW91dCcpKTtcblx0ICAgIH0sIHRpbWVvdXQpO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gY2xlYW51cCgpe1xuXHQgICAgaWYgKHNjcmlwdC5wYXJlbnROb2RlKSBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHQgICAgd2luZG93W2lkXSA9IG5vb3A7XG5cdCAgICBpZiAodGltZXIpIGNsZWFyVGltZW91dCh0aW1lcik7XG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBjYW5jZWwoKXtcblx0ICAgIGlmICh3aW5kb3dbaWRdKSB7XG5cdCAgICAgIGNsZWFudXAoKTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHdpbmRvd1tpZF0gPSBmdW5jdGlvbihkYXRhKXtcblx0ICAgIGRlYnVnKCdqc29ucCBnb3QnLCBkYXRhKTtcblx0ICAgIGNsZWFudXAoKTtcblx0ICAgIGlmIChmbikgZm4obnVsbCwgZGF0YSk7XG5cdCAgfTtcblx0XG5cdCAgLy8gYWRkIHFzIGNvbXBvbmVudFxuXHQgIHVybCArPSAofnVybC5pbmRleE9mKCc/JykgPyAnJicgOiAnPycpICsgcGFyYW0gKyAnPScgKyBlbmMoaWQpO1xuXHQgIHVybCA9IHVybC5yZXBsYWNlKCc/JicsICc/Jyk7XG5cdFxuXHQgIGRlYnVnKCdqc29ucCByZXEgXCIlc1wiJywgdXJsKTtcblx0XG5cdCAgLy8gY3JlYXRlIHNjcmlwdFxuXHQgIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXHQgIHNjcmlwdC5zcmMgPSB1cmw7XG5cdCAgdGFyZ2V0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNjcmlwdCwgdGFyZ2V0KTtcblx0XG5cdCAgcmV0dXJuIGNhbmNlbDtcblx0fVxuXG5cbi8qKiovIH0sXG4vKiA5NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XG5cdC8qKlxuXHQgKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG5cdCAqXG5cdCAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cblx0ICovXG5cdFxuXHRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk4KTtcblx0ZXhwb3J0cy5sb2cgPSBsb2c7XG5cdGV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5cdGV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5cdGV4cG9ydHMubG9hZCA9IGxvYWQ7XG5cdGV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuXHRcblx0LyoqXG5cdCAqIFVzZSBjaHJvbWUuc3RvcmFnZS5sb2NhbCBpZiB3ZSBhcmUgaW4gYW4gYXBwXG5cdCAqL1xuXHRcblx0dmFyIHN0b3JhZ2U7XG5cdFxuXHRpZiAodHlwZW9mIGNocm9tZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNocm9tZS5zdG9yYWdlICE9PSAndW5kZWZpbmVkJylcblx0ICBzdG9yYWdlID0gY2hyb21lLnN0b3JhZ2UubG9jYWw7XG5cdGVsc2Vcblx0ICBzdG9yYWdlID0gd2luZG93LmxvY2FsU3RvcmFnZTtcblx0XG5cdC8qKlxuXHQgKiBDb2xvcnMuXG5cdCAqL1xuXHRcblx0ZXhwb3J0cy5jb2xvcnMgPSBbXG5cdCAgJ2xpZ2h0c2VhZ3JlZW4nLFxuXHQgICdmb3Jlc3RncmVlbicsXG5cdCAgJ2dvbGRlbnJvZCcsXG5cdCAgJ2RvZGdlcmJsdWUnLFxuXHQgICdkYXJrb3JjaGlkJyxcblx0ICAnY3JpbXNvbidcblx0XTtcblx0XG5cdC8qKlxuXHQgKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuXHQgKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cblx0ICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuXHQgKlxuXHQgKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuXHQgKi9cblx0XG5cdGZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0ICAvLyBpcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQgIHJldHVybiAoJ1dlYmtpdEFwcGVhcmFuY2UnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSkgfHxcblx0ICAgIC8vIGlzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcblx0ICAgICh3aW5kb3cuY29uc29sZSAmJiAoY29uc29sZS5maXJlYnVnIHx8IChjb25zb2xlLmV4Y2VwdGlvbiAmJiBjb25zb2xlLnRhYmxlKSkpIHx8XG5cdCAgICAvLyBpcyBmaXJlZm94ID49IHYzMT9cblx0ICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuXHQgICAgKG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cblx0ICovXG5cdFxuXHRleHBvcnRzLmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uKHYpIHtcblx0ICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG5cdH07XG5cdFxuXHRcblx0LyoqXG5cdCAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cblx0ICpcblx0ICogQGFwaSBwdWJsaWNcblx0ICovXG5cdFxuXHRmdW5jdGlvbiBmb3JtYXRBcmdzKCkge1xuXHQgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXHQgIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblx0XG5cdCAgYXJnc1swXSA9ICh1c2VDb2xvcnMgPyAnJWMnIDogJycpXG5cdCAgICArIHRoaXMubmFtZXNwYWNlXG5cdCAgICArICh1c2VDb2xvcnMgPyAnICVjJyA6ICcgJylcblx0ICAgICsgYXJnc1swXVxuXHQgICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG5cdCAgICArICcrJyArIGV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblx0XG5cdCAgaWYgKCF1c2VDb2xvcnMpIHJldHVybiBhcmdzO1xuXHRcblx0ICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdCAgYXJncyA9IFthcmdzWzBdLCBjLCAnY29sb3I6IGluaGVyaXQnXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncywgMSkpO1xuXHRcblx0ICAvLyB0aGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuXHQgIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0ICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cblx0ICB2YXIgaW5kZXggPSAwO1xuXHQgIHZhciBsYXN0QyA9IDA7XG5cdCAgYXJnc1swXS5yZXBsYWNlKC8lW2EteiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG5cdCAgICBpZiAoJyUlJyA9PT0gbWF0Y2gpIHJldHVybjtcblx0ICAgIGluZGV4Kys7XG5cdCAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcblx0ICAgICAgLy8gd2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG5cdCAgICAgIC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG5cdCAgICAgIGxhc3RDID0gaW5kZXg7XG5cdCAgICB9XG5cdCAgfSk7XG5cdFxuXHQgIGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcblx0ICByZXR1cm4gYXJncztcblx0fVxuXHRcblx0LyoqXG5cdCAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuXHQgKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuXHQgKlxuXHQgKiBAYXBpIHB1YmxpY1xuXHQgKi9cblx0XG5cdGZ1bmN0aW9uIGxvZygpIHtcblx0ICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuXHQgIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG5cdCAgcmV0dXJuICdvYmplY3QnID09PSB0eXBlb2YgY29uc29sZVxuXHQgICAgJiYgY29uc29sZS5sb2dcblx0ICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xuXHR9XG5cdFxuXHQvKipcblx0ICogU2F2ZSBgbmFtZXNwYWNlc2AuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCAqIEBhcGkgcHJpdmF0ZVxuXHQgKi9cblx0XG5cdGZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHQgIHRyeSB7XG5cdCAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG5cdCAgICAgIHN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHN0b3JhZ2UuZGVidWcgPSBuYW1lc3BhY2VzO1xuXHQgICAgfVxuXHQgIH0gY2F0Y2goZSkge31cblx0fVxuXHRcblx0LyoqXG5cdCAqIExvYWQgYG5hbWVzcGFjZXNgLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG5cdCAqIEBhcGkgcHJpdmF0ZVxuXHQgKi9cblx0XG5cdGZ1bmN0aW9uIGxvYWQoKSB7XG5cdCAgdmFyIHI7XG5cdCAgdHJ5IHtcblx0ICAgIHIgPSBzdG9yYWdlLmRlYnVnO1xuXHQgIH0gY2F0Y2goZSkge31cblx0ICByZXR1cm4gcjtcblx0fVxuXHRcblx0LyoqXG5cdCAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuXG5cdCAqL1xuXHRcblx0ZXhwb3J0cy5lbmFibGUobG9hZCgpKTtcblxuXG4vKioqLyB9LFxuLyogOTggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFxuXHQvKipcblx0ICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuXHQgKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuXHQgKlxuXHQgKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG5cdCAqL1xuXHRcblx0ZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZGVidWc7XG5cdGV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuXHRleHBvcnRzLmRpc2FibGUgPSBkaXNhYmxlO1xuXHRleHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcblx0ZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcblx0ZXhwb3J0cy5odW1hbml6ZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTkpO1xuXHRcblx0LyoqXG5cdCAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuXHQgKi9cblx0XG5cdGV4cG9ydHMubmFtZXMgPSBbXTtcblx0ZXhwb3J0cy5za2lwcyA9IFtdO1xuXHRcblx0LyoqXG5cdCAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cblx0ICpcblx0ICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXJjYXNlZCBsZXR0ZXIsIGkuZS4gXCJuXCIuXG5cdCAqL1xuXHRcblx0ZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cdFxuXHQvKipcblx0ICogUHJldmlvdXNseSBhc3NpZ25lZCBjb2xvci5cblx0ICovXG5cdFxuXHR2YXIgcHJldkNvbG9yID0gMDtcblx0XG5cdC8qKlxuXHQgKiBQcmV2aW91cyBsb2cgdGltZXN0YW1wLlxuXHQgKi9cblx0XG5cdHZhciBwcmV2VGltZTtcblx0XG5cdC8qKlxuXHQgKiBTZWxlY3QgYSBjb2xvci5cblx0ICpcblx0ICogQHJldHVybiB7TnVtYmVyfVxuXHQgKiBAYXBpIHByaXZhdGVcblx0ICovXG5cdFxuXHRmdW5jdGlvbiBzZWxlY3RDb2xvcigpIHtcblx0ICByZXR1cm4gZXhwb3J0cy5jb2xvcnNbcHJldkNvbG9yKysgJSBleHBvcnRzLmNvbG9ycy5sZW5ndGhdO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0ICogQHJldHVybiB7RnVuY3Rpb259XG5cdCAqIEBhcGkgcHVibGljXG5cdCAqL1xuXHRcblx0ZnVuY3Rpb24gZGVidWcobmFtZXNwYWNlKSB7XG5cdFxuXHQgIC8vIGRlZmluZSB0aGUgYGRpc2FibGVkYCB2ZXJzaW9uXG5cdCAgZnVuY3Rpb24gZGlzYWJsZWQoKSB7XG5cdCAgfVxuXHQgIGRpc2FibGVkLmVuYWJsZWQgPSBmYWxzZTtcblx0XG5cdCAgLy8gZGVmaW5lIHRoZSBgZW5hYmxlZGAgdmVyc2lvblxuXHQgIGZ1bmN0aW9uIGVuYWJsZWQoKSB7XG5cdFxuXHQgICAgdmFyIHNlbGYgPSBlbmFibGVkO1xuXHRcblx0ICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG5cdCAgICB2YXIgY3VyciA9ICtuZXcgRGF0ZSgpO1xuXHQgICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcblx0ICAgIHNlbGYuZGlmZiA9IG1zO1xuXHQgICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7XG5cdCAgICBzZWxmLmN1cnIgPSBjdXJyO1xuXHQgICAgcHJldlRpbWUgPSBjdXJyO1xuXHRcblx0ICAgIC8vIGFkZCB0aGUgYGNvbG9yYCBpZiBub3Qgc2V0XG5cdCAgICBpZiAobnVsbCA9PSBzZWxmLnVzZUNvbG9ycykgc2VsZi51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuXHQgICAgaWYgKG51bGwgPT0gc2VsZi5jb2xvciAmJiBzZWxmLnVzZUNvbG9ycykgc2VsZi5jb2xvciA9IHNlbGVjdENvbG9yKCk7XG5cdFxuXHQgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcblx0ICAgIGFyZ3NbMF0gPSBleHBvcnRzLmNvZXJjZShhcmdzWzBdKTtcblx0XG5cdCAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7XG5cdCAgICAgIC8vIGFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVvXG5cdCAgICAgIGFyZ3MgPSBbJyVvJ10uY29uY2F0KGFyZ3MpO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG5cdCAgICB2YXIgaW5kZXggPSAwO1xuXHQgICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16JV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcblx0ICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuXHQgICAgICBpZiAobWF0Y2ggPT09ICclJScpIHJldHVybiBtYXRjaDtcblx0ICAgICAgaW5kZXgrKztcblx0ICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXHQgICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGZvcm1hdHRlcikge1xuXHQgICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcblx0ICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cdFxuXHQgICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcblx0ICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG5cdCAgICAgICAgaW5kZXgtLTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gbWF0Y2g7XG5cdCAgICB9KTtcblx0XG5cdCAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuZm9ybWF0QXJncykge1xuXHQgICAgICBhcmdzID0gZXhwb3J0cy5mb3JtYXRBcmdzLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHQgICAgfVxuXHQgICAgdmFyIGxvZ0ZuID0gZW5hYmxlZC5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcblx0ICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHQgIH1cblx0ICBlbmFibGVkLmVuYWJsZWQgPSB0cnVlO1xuXHRcblx0ICB2YXIgZm4gPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKSA/IGVuYWJsZWQgOiBkaXNhYmxlZDtcblx0XG5cdCAgZm4ubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXHRcblx0ICByZXR1cm4gZm47XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG5cdCAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCAqIEBhcGkgcHVibGljXG5cdCAqL1xuXHRcblx0ZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcblx0ICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cdFxuXHQgIHZhciBzcGxpdCA9IChuYW1lc3BhY2VzIHx8ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuXHQgIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cdFxuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuXHQgICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG5cdCAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG5cdCAgICAgIGV4cG9ydHMuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHQvKipcblx0ICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG5cdCAqXG5cdCAqIEBhcGkgcHVibGljXG5cdCAqL1xuXHRcblx0ZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0ICBleHBvcnRzLmVuYWJsZSgnJyk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCAqIEBhcGkgcHVibGljXG5cdCAqL1xuXHRcblx0ZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG5cdCAgdmFyIGksIGxlbjtcblx0ICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblx0ICB9XG5cdCAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHQgICAgaWYgKGV4cG9ydHMubmFtZXNbaV0udGVzdChuYW1lKSkge1xuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQ29lcmNlIGB2YWxgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge01peGVkfSB2YWxcblx0ICogQHJldHVybiB7TWl4ZWR9XG5cdCAqIEBhcGkgcHJpdmF0ZVxuXHQgKi9cblx0XG5cdGZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcblx0ICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG5cdCAgcmV0dXJuIHZhbDtcblx0fVxuXG5cbi8qKiovIH0sXG4vKiA5OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIEhlbHBlcnMuXG5cdCAqL1xuXHRcblx0dmFyIHMgPSAxMDAwO1xuXHR2YXIgbSA9IHMgKiA2MDtcblx0dmFyIGggPSBtICogNjA7XG5cdHZhciBkID0gaCAqIDI0O1xuXHR2YXIgeSA9IGQgKiAzNjUuMjU7XG5cdFxuXHQvKipcblx0ICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cblx0ICpcblx0ICogT3B0aW9uczpcblx0ICpcblx0ICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG5cdCAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG5cdCAqIEBhcGkgcHVibGljXG5cdCAqL1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpe1xuXHQgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHQgIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgdmFsKSByZXR1cm4gcGFyc2UodmFsKTtcblx0ICByZXR1cm4gb3B0aW9ucy5sb25nXG5cdCAgICA/IGxvbmcodmFsKVxuXHQgICAgOiBzaG9ydCh2YWwpO1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd9IHN0clxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9XG5cdCAqIEBhcGkgcHJpdmF0ZVxuXHQgKi9cblx0XG5cdGZ1bmN0aW9uIHBhcnNlKHN0cikge1xuXHQgIHZhciBtYXRjaCA9IC9eKCg/OlxcZCspP1xcLj9cXGQrKSAqKG1zfHNlY29uZHM/fHN8bWludXRlcz98bXxob3Vycz98aHxkYXlzP3xkfHllYXJzP3x5KT8kL2kuZXhlYyhzdHIpO1xuXHQgIGlmICghbWF0Y2gpIHJldHVybjtcblx0ICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuXHQgIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG5cdCAgc3dpdGNoICh0eXBlKSB7XG5cdCAgICBjYXNlICd5ZWFycyc6XG5cdCAgICBjYXNlICd5ZWFyJzpcblx0ICAgIGNhc2UgJ3knOlxuXHQgICAgICByZXR1cm4gbiAqIHk7XG5cdCAgICBjYXNlICdkYXlzJzpcblx0ICAgIGNhc2UgJ2RheSc6XG5cdCAgICBjYXNlICdkJzpcblx0ICAgICAgcmV0dXJuIG4gKiBkO1xuXHQgICAgY2FzZSAnaG91cnMnOlxuXHQgICAgY2FzZSAnaG91cic6XG5cdCAgICBjYXNlICdoJzpcblx0ICAgICAgcmV0dXJuIG4gKiBoO1xuXHQgICAgY2FzZSAnbWludXRlcyc6XG5cdCAgICBjYXNlICdtaW51dGUnOlxuXHQgICAgY2FzZSAnbSc6XG5cdCAgICAgIHJldHVybiBuICogbTtcblx0ICAgIGNhc2UgJ3NlY29uZHMnOlxuXHQgICAgY2FzZSAnc2Vjb25kJzpcblx0ICAgIGNhc2UgJ3MnOlxuXHQgICAgICByZXR1cm4gbiAqIHM7XG5cdCAgICBjYXNlICdtcyc6XG5cdCAgICAgIHJldHVybiBuO1xuXHQgIH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJ9IG1zXG5cdCAqIEByZXR1cm4ge1N0cmluZ31cblx0ICogQGFwaSBwcml2YXRlXG5cdCAqL1xuXHRcblx0ZnVuY3Rpb24gc2hvcnQobXMpIHtcblx0ICBpZiAobXMgPj0gZCkgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcblx0ICBpZiAobXMgPj0gaCkgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcblx0ICBpZiAobXMgPj0gbSkgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcblx0ICBpZiAobXMgPj0gcykgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcblx0ICByZXR1cm4gbXMgKyAnbXMnO1xuXHR9XG5cdFxuXHQvKipcblx0ICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuXHQgKiBAcmV0dXJuIHtTdHJpbmd9XG5cdCAqIEBhcGkgcHJpdmF0ZVxuXHQgKi9cblx0XG5cdGZ1bmN0aW9uIGxvbmcobXMpIHtcblx0ICByZXR1cm4gcGx1cmFsKG1zLCBkLCAnZGF5Jylcblx0ICAgIHx8IHBsdXJhbChtcywgaCwgJ2hvdXInKVxuXHQgICAgfHwgcGx1cmFsKG1zLCBtLCAnbWludXRlJylcblx0ICAgIHx8IHBsdXJhbChtcywgcywgJ3NlY29uZCcpXG5cdCAgICB8fCBtcyArICcgbXMnO1xuXHR9XG5cdFxuXHQvKipcblx0ICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG5cdCAqL1xuXHRcblx0ZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG5cdCAgaWYgKG1zIDwgbikgcmV0dXJuO1xuXHQgIGlmIChtcyA8IG4gKiAxLjUpIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuXHQgIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG5cdH1cblxuXG4vKioqLyB9LFxuLyogMTAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgcFNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXHR2YXIgb2JqZWN0S2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTAyKTtcblx0dmFyIGlzQXJndW1lbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDEpO1xuXHRcblx0dmFyIGRlZXBFcXVhbCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFjdHVhbCwgZXhwZWN0ZWQsIG9wdHMpIHtcblx0ICBpZiAoIW9wdHMpIG9wdHMgPSB7fTtcblx0ICAvLyA3LjEuIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cblx0ICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuXHQgICAgcmV0dXJuIHRydWU7XG5cdFxuXHQgIH0gZWxzZSBpZiAoYWN0dWFsIGluc3RhbmNlb2YgRGF0ZSAmJiBleHBlY3RlZCBpbnN0YW5jZW9mIERhdGUpIHtcblx0ICAgIHJldHVybiBhY3R1YWwuZ2V0VGltZSgpID09PSBleHBlY3RlZC5nZXRUaW1lKCk7XG5cdFxuXHQgIC8vIDcuMy4gT3RoZXIgcGFpcnMgdGhhdCBkbyBub3QgYm90aCBwYXNzIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jyxcblx0ICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LlxuXHQgIH0gZWxzZSBpZiAodHlwZW9mIGFjdHVhbCAhPSAnb2JqZWN0JyAmJiB0eXBlb2YgZXhwZWN0ZWQgIT0gJ29iamVjdCcpIHtcblx0ICAgIHJldHVybiBvcHRzLnN0cmljdCA/IGFjdHVhbCA9PT0gZXhwZWN0ZWQgOiBhY3R1YWwgPT0gZXhwZWN0ZWQ7XG5cdFxuXHQgIC8vIDcuNC4gRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpc1xuXHQgIC8vIGRldGVybWluZWQgYnkgaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChhcyB2ZXJpZmllZFxuXHQgIC8vIHdpdGggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKSwgdGhlIHNhbWUgc2V0IG9mIGtleXNcblx0ICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5XG5cdCAgLy8gY29ycmVzcG9uZGluZyBrZXksIGFuZCBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuIE5vdGU6IHRoaXNcblx0ICAvLyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cblx0ICB9IGVsc2Uge1xuXHQgICAgcmV0dXJuIG9iakVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQsIG9wdHMpO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gaXNVbmRlZmluZWRPck51bGwodmFsdWUpIHtcblx0ICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcblx0fVxuXHRcblx0ZnVuY3Rpb24gaXNCdWZmZXIgKHgpIHtcblx0ICBpZiAoIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnIHx8IHR5cGVvZiB4Lmxlbmd0aCAhPT0gJ251bWJlcicpIHJldHVybiBmYWxzZTtcblx0ICBpZiAodHlwZW9mIHguY29weSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgeC5zbGljZSAhPT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0ICBpZiAoeC5sZW5ndGggPiAwICYmIHR5cGVvZiB4WzBdICE9PSAnbnVtYmVyJykgcmV0dXJuIGZhbHNlO1xuXHQgIHJldHVybiB0cnVlO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBvYmpFcXVpdihhLCBiLCBvcHRzKSB7XG5cdCAgdmFyIGksIGtleTtcblx0ICBpZiAoaXNVbmRlZmluZWRPck51bGwoYSkgfHwgaXNVbmRlZmluZWRPck51bGwoYikpXG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgLy8gYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LlxuXHQgIGlmIChhLnByb3RvdHlwZSAhPT0gYi5wcm90b3R5cGUpIHJldHVybiBmYWxzZTtcblx0ICAvL35+fkkndmUgbWFuYWdlZCB0byBicmVhayBPYmplY3Qua2V5cyB0aHJvdWdoIHNjcmV3eSBhcmd1bWVudHMgcGFzc2luZy5cblx0ICAvLyAgIENvbnZlcnRpbmcgdG8gYXJyYXkgc29sdmVzIHRoZSBwcm9ibGVtLlxuXHQgIGlmIChpc0FyZ3VtZW50cyhhKSkge1xuXHQgICAgaWYgKCFpc0FyZ3VtZW50cyhiKSkge1xuXHQgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICB9XG5cdCAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG5cdCAgICBiID0gcFNsaWNlLmNhbGwoYik7XG5cdCAgICByZXR1cm4gZGVlcEVxdWFsKGEsIGIsIG9wdHMpO1xuXHQgIH1cblx0ICBpZiAoaXNCdWZmZXIoYSkpIHtcblx0ICAgIGlmICghaXNCdWZmZXIoYikpIHtcblx0ICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXHQgICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXHQgICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgaWYgKGFbaV0gIT09IGJbaV0pIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0ICB0cnkge1xuXHQgICAgdmFyIGthID0gb2JqZWN0S2V5cyhhKSxcblx0ICAgICAgICBrYiA9IG9iamVjdEtleXMoYik7XG5cdCAgfSBjYXRjaCAoZSkgey8vaGFwcGVucyB3aGVuIG9uZSBpcyBhIHN0cmluZyBsaXRlcmFsIGFuZCB0aGUgb3RoZXIgaXNuJ3Rcblx0ICAgIHJldHVybiBmYWxzZTtcblx0ICB9XG5cdCAgLy8gaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChrZXlzIGluY29ycG9yYXRlc1xuXHQgIC8vIGhhc093blByb3BlcnR5KVxuXHQgIGlmIChrYS5sZW5ndGggIT0ga2IubGVuZ3RoKVxuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIC8vdGhlIHNhbWUgc2V0IG9mIGtleXMgKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksXG5cdCAga2Euc29ydCgpO1xuXHQgIGtiLnNvcnQoKTtcblx0ICAvL35+fmNoZWFwIGtleSB0ZXN0XG5cdCAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0ICAgIGlmIChrYVtpXSAhPSBrYltpXSlcblx0ICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0ICAvL2VxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleSwgYW5kXG5cdCAgLy9+fn5wb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0XG5cdCAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0ICAgIGtleSA9IGthW2ldO1xuXHQgICAgaWYgKCFkZWVwRXF1YWwoYVtrZXldLCBiW2tleV0sIG9wdHMpKSByZXR1cm4gZmFsc2U7XG5cdCAgfVxuXHQgIHJldHVybiB0eXBlb2YgYSA9PT0gdHlwZW9mIGI7XG5cdH1cblxuXG4vKioqLyB9LFxuLyogMTAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgc3VwcG9ydHNBcmd1bWVudHNDbGFzcyA9IChmdW5jdGlvbigpe1xuXHQgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnRzKVxuXHR9KSgpID09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXHRcblx0ZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gc3VwcG9ydHNBcmd1bWVudHNDbGFzcyA/IHN1cHBvcnRlZCA6IHVuc3VwcG9ydGVkO1xuXHRcblx0ZXhwb3J0cy5zdXBwb3J0ZWQgPSBzdXBwb3J0ZWQ7XG5cdGZ1bmN0aW9uIHN1cHBvcnRlZChvYmplY3QpIHtcblx0ICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cdH07XG5cdFxuXHRleHBvcnRzLnVuc3VwcG9ydGVkID0gdW5zdXBwb3J0ZWQ7XG5cdGZ1bmN0aW9uIHVuc3VwcG9ydGVkKG9iamVjdCl7XG5cdCAgcmV0dXJuIG9iamVjdCAmJlxuXHQgICAgdHlwZW9mIG9iamVjdCA9PSAnb2JqZWN0JyAmJlxuXHQgICAgdHlwZW9mIG9iamVjdC5sZW5ndGggPT0gJ251bWJlcicgJiZcblx0ICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdjYWxsZWUnKSAmJlxuXHQgICAgIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsICdjYWxsZWUnKSB8fFxuXHQgICAgZmFsc2U7XG5cdH07XG5cblxuLyoqKi8gfSxcbi8qIDEwMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nXG5cdCAgPyBPYmplY3Qua2V5cyA6IHNoaW07XG5cdFxuXHRleHBvcnRzLnNoaW0gPSBzaGltO1xuXHRmdW5jdGlvbiBzaGltIChvYmopIHtcblx0ICB2YXIga2V5cyA9IFtdO1xuXHQgIGZvciAodmFyIGtleSBpbiBvYmopIGtleXMucHVzaChrZXkpO1xuXHQgIHJldHVybiBrZXlzO1xuXHR9XG5cblxuLyoqKi8gfSxcbi8qIDEwMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0ZnVuY3Rpb24gZ2V0Um9vdEluc3RhbmNlc0Zyb21SZWFjdE1vdW50KFJlYWN0TW91bnQpIHtcblx0ICByZXR1cm4gUmVhY3RNb3VudC5faW5zdGFuY2VzQnlSZWFjdFJvb3RJRCB8fCBSZWFjdE1vdW50Ll9pbnN0YW5jZXNCeUNvbnRhaW5lcklEIHx8IFtdO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGdldFJvb3RJbnN0YW5jZXNGcm9tUmVhY3RNb3VudDtcblxuLyoqKi8gfSxcbi8qIDEwNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKG1vZHVsZSkgey8qIFJFQUNUIEhPVCBMT0FERVIgKi8gaWYgKHRydWUpIHsgKGZ1bmN0aW9uICgpIHsgdmFyIFJlYWN0SG90QVBJID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMiksIFJvb3RJbnN0YW5jZVByb3ZpZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCksIFJlYWN0TW91bnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpOyBtb2R1bGUubWFrZUhvdCA9IG1vZHVsZS5ob3QuZGF0YSA/IG1vZHVsZS5ob3QuZGF0YS5tYWtlSG90IDogUmVhY3RIb3RBUEkoZnVuY3Rpb24gKCkgeyByZXR1cm4gUm9vdEluc3RhbmNlUHJvdmlkZXIuZ2V0Um9vdEluc3RhbmNlcyhSZWFjdE1vdW50KTsgfSk7IH0pKCk7IH0gKGZ1bmN0aW9uICgpIHtcblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIF9pbnRlcm9wUmVxdWlyZSA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmo7IH07XG5cdFxuXHR2YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXygzOSkpO1xuXHRcblx0dmFyIGNvbXBvbmVudCA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKSk7XG5cdFxuXHR2YXIgVXNlciA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNykpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBjb21wb25lbnQoXCJBcHBcIiwgZnVuY3Rpb24gKF9yZWYpIHtcblx0ICB2YXIgZW50cmllcyA9IF9yZWYuZW50cmllcztcblx0ICB2YXIgYWxsVXNlcnMgPSBlbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcblx0ICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFVzZXIsIHsgbmFtZTogZW50cnkuZ2V0KFwibmFtZVwiKSB9KTtcblx0ICB9KS50b0FycmF5KCk7XG5cdFxuXHQgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgXCJkaXZcIixcblx0ICAgIHsgY2xhc3NOYW1lOiBcImZhbHVudGlwcGluZ1wiIH0sXG5cdCAgICBhbGxVc2Vyc1xuXHQgICk7XG5cdH0pO1xuXHRcblxuXG5cdC8vIG9yIHdpdGgganN4OlxuXHQvL1xuXHQvLyA8ZGl2IGNsYXNzTmFtZT1cImFwcFwiPlxuXHQvLyAgIHtjb3VudGVyLmRlcmVmKCl9XG5cdC8vIDwvZGl2Pik7XG5cdC8vXG5cdC8vIGp1c3QgcmVtZW1iZXIgdG86XG5cdC8vXG5cdC8vIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cblxuXHQvLyBlbmFibGUgNnRvNS1sb2FkZXI/ZXhwZXJpbWVudGFsIHRvIHVzZSBnZW5lcmF0b3JzIGV0Yy5cblx0Ly8gZXhwb3J0IGZ1bmN0aW9uICogY291bnRlciAoKcKge1xuXHQvLyAgIHZhciBuID0gMDtcblx0Ly8gICB3aGlsZSAodHJ1ZSkgeWllbGQgbisrO1xuXHQvLyB9XG5cblx0LyogUkVBQ1QgSE9UIExPQURFUiAqLyB9KSgpOyBpZiAodHJ1ZSkgeyAoZnVuY3Rpb24gKCkgeyBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHsgZGF0YS5tYWtlSG90ID0gbW9kdWxlLm1ha2VIb3Q7IH0pOyBpZiAobW9kdWxlLmV4cG9ydHMgJiYgbW9kdWxlLm1ha2VIb3QpIHsgdmFyIG1ha2VFeHBvcnRzSG90ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSksIGZvdW5kUmVhY3RDbGFzc2VzID0gZmFsc2U7IGlmIChtYWtlRXhwb3J0c0hvdChtb2R1bGUpKSB7IGZvdW5kUmVhY3RDbGFzc2VzID0gdHJ1ZTsgfSB2YXIgc2hvdWxkQWNjZXB0TW9kdWxlID0gdHJ1ZSAmJiBmb3VuZFJlYWN0Q2xhc3NlczsgaWYgKHNob3VsZEFjY2VwdE1vZHVsZSkgeyBtb2R1bGUuaG90LmFjY2VwdChmdW5jdGlvbiAoZXJyKSB7IGlmIChlcnIpIHsgY29uc29sZS5lcnJvcihcIkNhbm5vdCBub3QgYXBwbHkgaG90IHVwZGF0ZSB0byBcIiArIFwiYXBwLmpzXCIgKyBcIjogXCIgKyBlcnIubWVzc2FnZSk7IH0gfSk7IH0gfSB9KSgpOyB9XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KShtb2R1bGUpKSlcblxuLyoqKi8gfSxcbi8qIDEwNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKG1vZHVsZSkgey8qIFJFQUNUIEhPVCBMT0FERVIgKi8gaWYgKHRydWUpIHsgKGZ1bmN0aW9uICgpIHsgdmFyIFJlYWN0SG90QVBJID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMiksIFJvb3RJbnN0YW5jZVByb3ZpZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCksIFJlYWN0TW91bnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpOyBtb2R1bGUubWFrZUhvdCA9IG1vZHVsZS5ob3QuZGF0YSA/IG1vZHVsZS5ob3QuZGF0YS5tYWtlSG90IDogUmVhY3RIb3RBUEkoZnVuY3Rpb24gKCkgeyByZXR1cm4gUm9vdEluc3RhbmNlUHJvdmlkZXIuZ2V0Um9vdEluc3RhbmNlcyhSZWFjdE1vdW50KTsgfSk7IH0pKCk7IH0gKGZ1bmN0aW9uICgpIHtcblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIF9pbnRlcm9wUmVxdWlyZSA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmo7IH07XG5cdFxuXHR2YXIganNvbnAgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXyg5NikpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0ICBjb25zb2xlLmxvZyhcImdldHRpbmcgZGF0YSFcIik7XG5cdCAganNvbnAoXCJodHRwczovL3NwcmVhZHNoZWV0cy5nb29nbGUuY29tL2ZlZWRzL2xpc3QvMUhhQnBPZ2JvMHVIRURjM3pmRkp4X1h3STR5NlpHa1g5STJXdGlpMFZobUUvMS9wdWJsaWMvdmFsdWVzP2FsdD1qc29uLWluLXNjcmlwdFwiLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG5cdCAgICBjb25zb2xlLmxvZyhkYXRhKTtcblx0XG5cdCAgICB2YXIgZW50cmllcyA9IGRhdGEuZmVlZC5lbnRyeS5tYXAoZnVuY3Rpb24gKGdvb2dsZUVudHJ5KSB7XG5cdCAgICAgIHZhciBlbnRyeSA9IHtcblx0ICAgICAgICBuYW1lOiBnb29nbGVFbnRyeS5nc3gkbmF2bi4kdFxuXHQgICAgICB9O1xuXHRcblx0ICAgICAgdmFyIG1lZGFscyA9IE9iamVjdC5rZXlzKGdvb2dsZUVudHJ5KS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuXHQgICAgICAgIHJldHVybiBrZXkuaW5kZXhPZihcImdzeCRwbGFzc19cIikgIT0gLTE7XG5cdCAgICAgIH0pLm1hcChmdW5jdGlvbiAoa2V5KSB7XG5cdCAgICAgICAgcmV0dXJuIGdvb2dsZUVudHJ5W2tleV0uJHQ7XG5cdCAgICAgIH0pO1xuXHRcblx0ICAgICAgZW50cnkuYmV0cyA9IFtdO1xuXHQgICAgICB3aGlsZSAobWVkYWxzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICBlbnRyeS5iZXRzLnB1c2goe1xuXHQgICAgICAgICAgMTogbWVkYWxzWzBdLFxuXHQgICAgICAgICAgMjogbWVkYWxzWzFdLFxuXHQgICAgICAgICAgMzogbWVkYWxzWzJdXG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgIG1lZGFscyA9IG1lZGFscy5zbGljZSgzKTtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgZW50cnkubWVkYWxDb3VudCA9IHtcblx0ICAgICAgICBnb2xkOiBnb29nbGVFbnRyeS5nc3gkYW50YWxsZ3VsbC4kdCxcblx0ICAgICAgICBzaWx2ZXI6IGdvb2dsZUVudHJ5LmdzeCRhbnRhbGxzw7hsdi4kdCxcblx0ICAgICAgICBicm9uemU6IGdvb2dsZUVudHJ5LmdzeCRhbnRhbGxicm9uc2UuJHRcblx0ICAgICAgfTtcblx0XG5cdCAgICAgIHJldHVybiBlbnRyeTtcblx0ICAgIH0pO1xuXHRcblx0ICAgIGNhbGxiYWNrKHtcblx0ICAgICAgZW50cmllczogZW50cmllc1xuXHQgICAgfSk7XG5cdCAgfSk7XG5cdH07XG5cdFxuXHQvKiBSRUFDVCBIT1QgTE9BREVSICovIH0pKCk7IGlmICh0cnVlKSB7IChmdW5jdGlvbiAoKSB7IG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkgeyBkYXRhLm1ha2VIb3QgPSBtb2R1bGUubWFrZUhvdDsgfSk7IGlmIChtb2R1bGUuZXhwb3J0cyAmJiBtb2R1bGUubWFrZUhvdCkgeyB2YXIgbWFrZUV4cG9ydHNIb3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKSwgZm91bmRSZWFjdENsYXNzZXMgPSBmYWxzZTsgaWYgKG1ha2VFeHBvcnRzSG90KG1vZHVsZSkpIHsgZm91bmRSZWFjdENsYXNzZXMgPSB0cnVlOyB9IHZhciBzaG91bGRBY2NlcHRNb2R1bGUgPSB0cnVlICYmIGZvdW5kUmVhY3RDbGFzc2VzOyBpZiAoc2hvdWxkQWNjZXB0TW9kdWxlKSB7IG1vZHVsZS5ob3QuYWNjZXB0KGZ1bmN0aW9uIChlcnIpIHsgaWYgKGVycikgeyBjb25zb2xlLmVycm9yKFwiQ2Fubm90IG5vdCBhcHBseSBob3QgdXBkYXRlIHRvIFwiICsgXCJnb29nbGVEYXRhLmpzXCIgKyBcIjogXCIgKyBlcnIubWVzc2FnZSk7IH0gfSk7IH0gfSB9KSgpOyB9XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KShtb2R1bGUpKSlcblxuLyoqKi8gfSxcbi8qIDEwNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKG1vZHVsZSkgey8qIFJFQUNUIEhPVCBMT0FERVIgKi8gaWYgKHRydWUpIHsgKGZ1bmN0aW9uICgpIHsgdmFyIFJlYWN0SG90QVBJID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMiksIFJvb3RJbnN0YW5jZVByb3ZpZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCksIFJlYWN0TW91bnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpOyBtb2R1bGUubWFrZUhvdCA9IG1vZHVsZS5ob3QuZGF0YSA/IG1vZHVsZS5ob3QuZGF0YS5tYWtlSG90IDogUmVhY3RIb3RBUEkoZnVuY3Rpb24gKCkgeyByZXR1cm4gUm9vdEluc3RhbmNlUHJvdmlkZXIuZ2V0Um9vdEluc3RhbmNlcyhSZWFjdE1vdW50KTsgfSk7IH0pKCk7IH0gKGZ1bmN0aW9uICgpIHtcblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIF9pbnRlcm9wUmVxdWlyZSA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmo7IH07XG5cdFxuXHR2YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXygzOSkpO1xuXHRcblx0dmFyIGNvbXBvbmVudCA9IF9pbnRlcm9wUmVxdWlyZShfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKSk7XG5cdFxuXHR2YXIgaW1tc3RydWN0ID0gX2ludGVyb3BSZXF1aXJlKF9fd2VicGFja19yZXF1aXJlX18oODkpKTtcblx0XG5cdHZhciBJbW11dGFibGUgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXyg5NSkpO1xuXHRcblx0dmFyIEdvb2dsZURhdGEgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXygxMDUpKTtcblx0XG5cdHZhciBBcHAgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXygxMDQpKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTg0KTtcblx0XG5cdHZhciBkYXRhID0gaW1tc3RydWN0KHtcblx0ICBlbnRyaWVzOiBbXVxuXHR9KTtcblx0XG5cdEdvb2dsZURhdGEoZnVuY3Rpb24gKGdvb2dsZURhdGEpIHtcblx0ICBkYXRhLmN1cnNvcigpLnVwZGF0ZShmdW5jdGlvbiAoKSB7XG5cdCAgICByZXR1cm4gSW1tdXRhYmxlLmZyb21KUyhnb29nbGVEYXRhKTtcblx0ICB9KTtcblx0fSk7XG5cdFxuXHR2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiBSZWFjdC5yZW5kZXIoQXBwKHsgZW50cmllczogZGF0YS5jdXJzb3IoXCJlbnRyaWVzXCIpIH0pLCBkb2N1bWVudC5ib2R5KTtcblx0fTtcblx0XG5cdHJlbmRlcigpO1xuXHRkYXRhLm9uKFwic3dhcFwiLCByZW5kZXIpO1xuXHRcblx0Ly8gc2V0SW50ZXJ2YWwoXG5cdC8vICAgKCkgPT4gZGF0YS5jdXJzb3IoKS51cGRhdGUoJ2NvdW50ZXInLCBpID0+IGkgKyAxKSxcblx0Ly8gICAxMDAwKTtcblxuXHQvKiBSRUFDVCBIT1QgTE9BREVSICovIH0pKCk7IGlmICh0cnVlKSB7IChmdW5jdGlvbiAoKSB7IG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkgeyBkYXRhLm1ha2VIb3QgPSBtb2R1bGUubWFrZUhvdDsgfSk7IGlmIChtb2R1bGUuZXhwb3J0cyAmJiBtb2R1bGUubWFrZUhvdCkgeyB2YXIgbWFrZUV4cG9ydHNIb3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKSwgZm91bmRSZWFjdENsYXNzZXMgPSBmYWxzZTsgaWYgKG1ha2VFeHBvcnRzSG90KG1vZHVsZSkpIHsgZm91bmRSZWFjdENsYXNzZXMgPSB0cnVlOyB9IHZhciBzaG91bGRBY2NlcHRNb2R1bGUgPSB0cnVlICYmIGZvdW5kUmVhY3RDbGFzc2VzOyBpZiAoc2hvdWxkQWNjZXB0TW9kdWxlKSB7IG1vZHVsZS5ob3QuYWNjZXB0KGZ1bmN0aW9uIChlcnIpIHsgaWYgKGVycikgeyBjb25zb2xlLmVycm9yKFwiQ2Fubm90IG5vdCBhcHBseSBob3QgdXBkYXRlIHRvIFwiICsgXCJpbmRleC5qc1wiICsgXCI6IFwiICsgZXJyLm1lc3NhZ2UpOyB9IH0pOyB9IH0gfSkoKTsgfVxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygyOSkobW9kdWxlKSkpXG5cbi8qKiovIH0sXG4vKiAxMDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihtb2R1bGUpIHsvKiBSRUFDVCBIT1QgTE9BREVSICovIGlmICh0cnVlKSB7IChmdW5jdGlvbiAoKSB7IHZhciBSZWFjdEhvdEFQSSA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpLCBSb290SW5zdGFuY2VQcm92aWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMzApLCBSZWFjdE1vdW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTsgbW9kdWxlLm1ha2VIb3QgPSBtb2R1bGUuaG90LmRhdGEgPyBtb2R1bGUuaG90LmRhdGEubWFrZUhvdCA6IFJlYWN0SG90QVBJKGZ1bmN0aW9uICgpIHsgcmV0dXJuIFJvb3RJbnN0YW5jZVByb3ZpZGVyLmdldFJvb3RJbnN0YW5jZXMoUmVhY3RNb3VudCk7IH0pOyB9KSgpOyB9IChmdW5jdGlvbiAoKSB7XG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBfaW50ZXJvcFJlcXVpcmUgPSBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqOyB9O1xuXHRcblx0dmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlKF9fd2VicGFja19yZXF1aXJlX18oMzkpKTtcblx0XG5cdHZhciBjb21wb25lbnQgPSBfaW50ZXJvcFJlcXVpcmUoX193ZWJwYWNrX3JlcXVpcmVfXyg0MSkpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBjb21wb25lbnQoXCJVc2VyXCIsIGZ1bmN0aW9uIChfcmVmKSB7XG5cdCAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG5cdCAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICBcImRpdlwiLFxuXHQgICAgeyBjbGFzc05hbWU6IFwidXNlclwiIH0sXG5cdCAgICBuYW1lXG5cdCAgKTtcblx0fSk7XG5cdFxuXHQvKiBSRUFDVCBIT1QgTE9BREVSICovIH0pKCk7IGlmICh0cnVlKSB7IChmdW5jdGlvbiAoKSB7IG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkgeyBkYXRhLm1ha2VIb3QgPSBtb2R1bGUubWFrZUhvdDsgfSk7IGlmIChtb2R1bGUuZXhwb3J0cyAmJiBtb2R1bGUubWFrZUhvdCkgeyB2YXIgbWFrZUV4cG9ydHNIb3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKSwgZm91bmRSZWFjdENsYXNzZXMgPSBmYWxzZTsgaWYgKG1ha2VFeHBvcnRzSG90KG1vZHVsZSkpIHsgZm91bmRSZWFjdENsYXNzZXMgPSB0cnVlOyB9IHZhciBzaG91bGRBY2NlcHRNb2R1bGUgPSB0cnVlICYmIGZvdW5kUmVhY3RDbGFzc2VzOyBpZiAoc2hvdWxkQWNjZXB0TW9kdWxlKSB7IG1vZHVsZS5ob3QuYWNjZXB0KGZ1bmN0aW9uIChlcnIpIHsgaWYgKGVycikgeyBjb25zb2xlLmVycm9yKFwiQ2Fubm90IG5vdCBhcHBseSBob3QgdXBkYXRlIHRvIFwiICsgXCJ1c2VyLmpzXCIgKyBcIjogXCIgKyBlcnIubWVzc2FnZSk7IH0gfSk7IH0gfSB9KSgpOyB9XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KShtb2R1bGUpKSlcblxuLyoqKi8gfSxcbi8qIDEwOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGlzUmVhY3RDbGFzc2lzaCA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpO1xuXHRcblx0ZnVuY3Rpb24gaXNSZWFjdEVsZW1lbnRpc2gob2JqKSB7XG5cdCAgaWYgKCFvYmopIHtcblx0ICAgIHJldHVybiBmYWxzZTtcblx0ICB9XG5cdFxuXHQgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqLnByb3BzKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiZcblx0ICAgICAgICAgaXNSZWFjdENsYXNzaXNoKG9iai50eXBlKTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBpc1JlYWN0RWxlbWVudGlzaDtcblxuLyoqKi8gfSxcbi8qIDEwOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0LyoqXG5cdCAqIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL21hc3Rlci9zcmMvY2xhc3MvUmVhY3RDbGFzcy5qcyNMNjM3XG5cdCAqL1xuXHRmdW5jdGlvbiBiaW5kQXV0b0JpbmRNZXRob2QoY29tcG9uZW50LCBtZXRob2QpIHtcblx0ICB2YXIgYm91bmRNZXRob2QgPSBtZXRob2QuYmluZChjb21wb25lbnQpO1xuXHRcblx0ICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRDb250ZXh0ID0gY29tcG9uZW50O1xuXHQgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZE1ldGhvZCA9IG1ldGhvZDtcblx0ICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRBcmd1bWVudHMgPSBudWxsO1xuXHRcblx0ICB2YXIgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSxcblx0ICAgICAgX2JpbmQgPSBib3VuZE1ldGhvZC5iaW5kO1xuXHRcblx0ICBib3VuZE1ldGhvZC5iaW5kID0gZnVuY3Rpb24gKG5ld1RoaXMpIHtcblx0ICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblx0ICAgIGlmIChuZXdUaGlzICE9PSBjb21wb25lbnQgJiYgbmV3VGhpcyAhPT0gbnVsbCkge1xuXHQgICAgICBjb25zb2xlLndhcm4oXG5cdCAgICAgICAgJ2JpbmQoKTogUmVhY3QgY29tcG9uZW50IG1ldGhvZHMgbWF5IG9ubHkgYmUgYm91bmQgdG8gdGhlICcgK1xuXHQgICAgICAgICdjb21wb25lbnQgaW5zdGFuY2UuIFNlZSAnICsgY29tcG9uZW50TmFtZVxuXHQgICAgICApO1xuXHQgICAgfSBlbHNlIGlmICghYXJncy5sZW5ndGgpIHtcblx0ICAgICAgY29uc29sZS53YXJuKFxuXHQgICAgICAgICdiaW5kKCk6IFlvdSBhcmUgYmluZGluZyBhIGNvbXBvbmVudCBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC4gJyArXG5cdCAgICAgICAgJ1JlYWN0IGRvZXMgdGhpcyBmb3IgeW91IGF1dG9tYXRpY2FsbHkgaW4gYSBoaWdoLXBlcmZvcm1hbmNlICcgK1xuXHQgICAgICAgICd3YXksIHNvIHlvdSBjYW4gc2FmZWx5IHJlbW92ZSB0aGlzIGNhbGwuIFNlZSAnICsgY29tcG9uZW50TmFtZVxuXHQgICAgICApO1xuXHQgICAgICByZXR1cm4gYm91bmRNZXRob2Q7XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIHJlYm91bmRNZXRob2QgPSBfYmluZC5hcHBseShib3VuZE1ldGhvZCwgYXJndW1lbnRzKTtcblx0ICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQ29udGV4dCA9IGNvbXBvbmVudDtcblx0ICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuXHQgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRBcmd1bWVudHMgPSBhcmdzO1xuXHRcblx0ICAgIHJldHVybiByZWJvdW5kTWV0aG9kO1xuXHQgIH07XG5cdFxuXHQgIHJldHVybiBib3VuZE1ldGhvZDtcblx0fVxuXHRcblx0LyoqXG5cdCAqIFBlcmZvcm1zIGF1dG8tYmluZGluZyBzaW1pbGFyIHRvIGhvdyBSZWFjdCBkb2VzIGl0LlxuXHQgKiBTa2lwcyBhbHJlYWR5IGF1dG8tYm91bmQgbWV0aG9kcy5cblx0ICogQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvbWFzdGVyL3NyYy9jbGFzcy9SZWFjdENsYXNzLmpzI0w2NzkuXG5cdCAqL1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZHMoY29tcG9uZW50KSB7XG5cdCAgZm9yICh2YXIgYXV0b0JpbmRLZXkgaW4gY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZE1hcCkge1xuXHQgICAgaWYgKCFjb21wb25lbnQuX19yZWFjdEF1dG9CaW5kTWFwLmhhc093blByb3BlcnR5KGF1dG9CaW5kS2V5KSkge1xuXHQgICAgICBjb250aW51ZTtcblx0ICAgIH1cblx0XG5cdCAgICAvLyBTa2lwIGFscmVhZHkgYm91bmQgbWV0aG9kc1xuXHQgICAgaWYgKGNvbXBvbmVudC5oYXNPd25Qcm9wZXJ0eShhdXRvQmluZEtleSkgJiZcblx0ICAgICAgICBjb21wb25lbnRbYXV0b0JpbmRLZXldLl9fcmVhY3RCb3VuZENvbnRleHQgPT09IGNvbXBvbmVudCkge1xuXHQgICAgICBjb250aW51ZTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgbWV0aG9kID0gY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZE1hcFthdXRvQmluZEtleV07XG5cdCAgICBjb21wb25lbnRbYXV0b0JpbmRLZXldID0gYmluZEF1dG9CaW5kTWV0aG9kKGNvbXBvbmVudCwgbWV0aG9kKTtcblx0ICB9XG5cdH07XG5cbi8qKiovIH0sXG4vKiAxMTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBiaW5kQXV0b0JpbmRNZXRob2RzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDkpO1xuXHRcblx0LyoqXG5cdCAqIFVwZGF0ZXMgYSBSZWFjdCBjb21wb25lbnQgcmVjdXJzaXZlbHksIHNvIGV2ZW4gaWYgY2hpbGRyZW4gZGVmaW5lIGZ1bmt5XG5cdCAqIGBzaG91bGRDb21wb25lbnRVcGRhdGVgLCB0aGV5IGFyZSBmb3JjZWQgdG8gcmUtcmVuZGVyLlxuXHQgKiBNYWtlcyBzdXJlIHRoYXQgYW55IG5ld2x5IGFkZGVkIG1ldGhvZHMgYXJlIHByb3Blcmx5IGF1dG8tYm91bmQuXG5cdCAqL1xuXHRmdW5jdGlvbiBkZWVwRm9yY2VVcGRhdGUoY29tcG9uZW50KSB7XG5cdCAgaWYgKGNvbXBvbmVudC5faW5zdGFuY2UpIHtcblx0ICAgIC8vIFJlYWN0IDAuMTNcblx0ICAgIGNvbXBvbmVudCA9IGNvbXBvbmVudC5faW5zdGFuY2U7XG5cdCAgfVxuXHRcblx0ICBiaW5kQXV0b0JpbmRNZXRob2RzKGNvbXBvbmVudCk7XG5cdFxuXHQgIGlmIChjb21wb25lbnQuZm9yY2VVcGRhdGUpIHtcblx0ICAgIGNvbXBvbmVudC5mb3JjZVVwZGF0ZSgpO1xuXHQgIH1cblx0XG5cdCAgaWYgKGNvbXBvbmVudC5fcmVuZGVyZWRDb21wb25lbnQpIHtcblx0ICAgIGRlZXBGb3JjZVVwZGF0ZShjb21wb25lbnQuX3JlbmRlcmVkQ29tcG9uZW50KTtcblx0ICB9XG5cdFxuXHQgIGZvciAodmFyIGtleSBpbiBjb21wb25lbnQuX3JlbmRlcmVkQ2hpbGRyZW4pIHtcblx0ICAgIGRlZXBGb3JjZVVwZGF0ZShjb21wb25lbnQuX3JlbmRlcmVkQ2hpbGRyZW5ba2V5XSk7XG5cdCAgfVxuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGRlZXBGb3JjZVVwZGF0ZTtcblxuLyoqKi8gfSxcbi8qIDExMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0LyoqXG5cdCAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGVzdGFibGlzaGVzIHRoZSBmaXJzdCBwcm90b3R5cGUgcGFzc2VkIHRvIGl0XG5cdCAqIGFzIHRoZSBcInNvdXJjZSBvZiB0cnV0aFwiIGFuZCBwYXRjaGVzIGl0cyBtZXRob2RzIG9uIHN1YnNlcXVlbnQgaW52b2NhdGlvbnMsXG5cdCAqIGFsc28gcGF0Y2hpbmcgY3VycmVudCBhbmQgcHJldmlvdXMgcHJvdG90eXBlcyB0byBmb3J3YXJkIGNhbGxzIHRvIGl0LlxuXHQgKi9cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtYWtlQXNzaW1pbGF0ZVByb3RvdHlwZSgpIHtcblx0ICB2YXIgc3RvcmVkUHJvdG90eXBlLFxuXHQgICAgICBrbm93blByb3RvdHlwZXMgPSBbXTtcblx0XG5cdCAgZnVuY3Rpb24gd3JhcE1ldGhvZChrZXkpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIGlmIChzdG9yZWRQcm90b3R5cGVba2V5XSkge1xuXHQgICAgICAgIHJldHVybiBzdG9yZWRQcm90b3R5cGVba2V5XS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gcGF0Y2hQcm9wZXJ0eShwcm90bywga2V5KSB7XG5cdCAgICBwcm90b1trZXldID0gc3RvcmVkUHJvdG90eXBlW2tleV07XG5cdFxuXHQgICAgaWYgKHR5cGVvZiBwcm90b1trZXldICE9PSAnZnVuY3Rpb24nIHx8XG5cdCAgICAgIGtleSA9PT0gJ3R5cGUnIHx8XG5cdCAgICAgIGtleSA9PT0gJ2NvbnN0cnVjdG9yJykge1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdFxuXHQgICAgcHJvdG9ba2V5XSA9IHdyYXBNZXRob2Qoa2V5KTtcblx0XG5cdCAgICBpZiAoc3RvcmVkUHJvdG90eXBlW2tleV0uaXNSZWFjdENsYXNzQXBwcm92ZWQpIHtcblx0ICAgICAgcHJvdG9ba2V5XS5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA9IHN0b3JlZFByb3RvdHlwZVtrZXldLmlzUmVhY3RDbGFzc0FwcHJvdmVkO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmIChwcm90by5fX3JlYWN0QXV0b0JpbmRNYXAgJiYgcHJvdG8uX19yZWFjdEF1dG9CaW5kTWFwW2tleV0pIHtcblx0ICAgICAgcHJvdG8uX19yZWFjdEF1dG9CaW5kTWFwW2tleV0gPSBwcm90b1trZXldO1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gdXBkYXRlU3RvcmVkUHJvdG90eXBlKGZyZXNoUHJvdG90eXBlKSB7XG5cdCAgICBzdG9yZWRQcm90b3R5cGUgPSB7fTtcblx0XG5cdCAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhmcmVzaFByb3RvdHlwZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdCAgICAgIHN0b3JlZFByb3RvdHlwZVtrZXldID0gZnJlc2hQcm90b3R5cGVba2V5XTtcblx0ICAgIH0pO1xuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gcmVjb25jaWxlV2l0aFN0b3JlZFByb3RvdHlwZXMoZnJlc2hQcm90b3R5cGUpIHtcblx0ICAgIGtub3duUHJvdG90eXBlcy5wdXNoKGZyZXNoUHJvdG90eXBlKTtcblx0ICAgIGtub3duUHJvdG90eXBlcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm90bykge1xuXHQgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzdG9yZWRQcm90b3R5cGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHQgICAgICAgIHBhdGNoUHJvcGVydHkocHJvdG8sIGtleSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfSk7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gZnVuY3Rpb24gYXNzaW1pbGF0ZVByb3RvdHlwZShmcmVzaFByb3RvdHlwZSkge1xuXHQgICAgaWYgKGZyZXNoUHJvdG90eXBlLl9faXNBc3NpbWlsYXRlZEJ5UmVhY3RIb3RBUEkpIHtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHRcblx0ICAgIHVwZGF0ZVN0b3JlZFByb3RvdHlwZShmcmVzaFByb3RvdHlwZSk7XG5cdCAgICByZWNvbmNpbGVXaXRoU3RvcmVkUHJvdG90eXBlcyhmcmVzaFByb3RvdHlwZSk7XG5cdCAgICBmcmVzaFByb3RvdHlwZS5fX2lzQXNzaW1pbGF0ZWRCeVJlYWN0SG90QVBJID0gdHJ1ZTtcblx0ICB9O1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMTEyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgbWFrZVBhdGNoUmVhY3RDbGFzcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEzKTtcblx0XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBpbnZva2VkLCBwYXRjaGVzIGEgUmVhY3QgY2xhc3Mgd2l0aCBhIG5ld1xuXHQgKiB2ZXJzaW9uIG9mIGl0c2VsZi4gVG8gcGF0Y2ggZGlmZmVyZW50IGNsYXNzZXMsIHBhc3MgZGlmZmVyZW50IElEcy5cblx0ICovXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWFrZU1ha2VIb3QoZ2V0Um9vdEluc3RhbmNlcykge1xuXHQgIGlmICh0eXBlb2YgZ2V0Um9vdEluc3RhbmNlcyAhPT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBnZXRSb290SW5zdGFuY2VzIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG5cdCAgfVxuXHRcblx0ICB2YXIgcGF0Y2hlcnMgPSB7fTtcblx0XG5cdCAgcmV0dXJuIGZ1bmN0aW9uIG1ha2VIb3QoTmV4dENsYXNzLCBwZXJzaXN0ZW50SWQpIHtcblx0ICAgIHBlcnNpc3RlbnRJZCA9IHBlcnNpc3RlbnRJZCB8fCBOZXh0Q2xhc3MuZGlzcGxheU5hbWUgfHwgTmV4dENsYXNzLm5hbWU7XG5cdFxuXHQgICAgaWYgKCFwZXJzaXN0ZW50SWQpIHtcblx0ICAgICAgY29uc29sZS5lcnJvcihcblx0ICAgICAgICAnSG90IHJlbG9hZCBpcyBkaXNhYmxlZCBmb3Igb25lIG9mIHlvdXIgdHlwZXMuIFRvIGVuYWJsZSBpdCwgcGFzcyBhICcgK1xuXHQgICAgICAgICdzdHJpbmcgdW5pcXVlbHkgaWRlbnRpZnlpbmcgdGhpcyBjbGFzcyB3aXRoaW4gdGhpcyBjdXJyZW50IG1vZHVsZSAnICtcblx0ICAgICAgICAnYXMgYSBzZWNvbmQgcGFyYW1ldGVyIHRvIG1ha2VIb3QuJ1xuXHQgICAgICApO1xuXHQgICAgICByZXR1cm4gTmV4dENsYXNzO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmICghcGF0Y2hlcnNbcGVyc2lzdGVudElkXSkge1xuXHQgICAgICBwYXRjaGVyc1twZXJzaXN0ZW50SWRdID0gbWFrZVBhdGNoUmVhY3RDbGFzcyhnZXRSb290SW5zdGFuY2VzKTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgcGF0Y2hSZWFjdENsYXNzID0gcGF0Y2hlcnNbcGVyc2lzdGVudElkXTtcblx0ICAgIHJldHVybiBwYXRjaFJlYWN0Q2xhc3MoTmV4dENsYXNzKTtcblx0ICB9O1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMTEzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgbWFrZUFzc2ltaWxhdGVQcm90b3R5cGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMSksXG5cdCAgICByZXF1ZXN0Rm9yY2VVcGRhdGVBbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExNCk7XG5cdFxuXHRmdW5jdGlvbiBoYXNOb25TdHViVHlwZVByb3BlcnR5KFJlYWN0Q2xhc3MpIHtcblx0ICBpZiAoIVJlYWN0Q2xhc3MuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0XG5cdCAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFJlYWN0Q2xhc3MsICd0eXBlJyk7XG5cdCAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHRydWU7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldFByb3RvdHlwZShSZWFjdENsYXNzKSB7XG5cdCAgdmFyIHByb3RvdHlwZSA9IFJlYWN0Q2xhc3MucHJvdG90eXBlLFxuXHQgICAgICBzZWVtc0xlZ2l0ID0gcHJvdG90eXBlICYmIHR5cGVvZiBwcm90b3R5cGUucmVuZGVyID09PSAnZnVuY3Rpb24nO1xuXHRcblx0ICBpZiAoIXNlZW1zTGVnaXQgJiYgaGFzTm9uU3R1YlR5cGVQcm9wZXJ0eShSZWFjdENsYXNzKSkge1xuXHQgICAgcHJvdG90eXBlID0gUmVhY3RDbGFzcy50eXBlLnByb3RvdHlwZTtcblx0ICB9XG5cdFxuXHQgIHJldHVybiBwcm90b3R5cGU7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIHBhdGNoIFJlYWN0IGNsYXNzIHdpdGggbmV3IHZlcnNpb25zIG9mIGl0c2VsZlxuXHQgKiBvbiBzdWJzZXF1ZW50IGludm9jYXRpb25zLiBCb3RoIGxlZ2FjeSBhbmQgRVM2IHN0eWxlIGNsYXNzZXMgYXJlIHN1cHBvcnRlZC5cblx0ICovXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWFrZVBhdGNoUmVhY3RDbGFzcyhnZXRSb290SW5zdGFuY2VzKSB7XG5cdCAgdmFyIGFzc2ltaWxhdGVQcm90b3R5cGUgPSBtYWtlQXNzaW1pbGF0ZVByb3RvdHlwZSgpLFxuXHQgICAgICBGaXJzdENsYXNzID0gbnVsbDtcblx0XG5cdCAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoUmVhY3RDbGFzcyhOZXh0Q2xhc3MpIHtcblx0ICAgIHZhciBuZXh0UHJvdG90eXBlID0gZ2V0UHJvdG90eXBlKE5leHRDbGFzcyk7XG5cdCAgICBhc3NpbWlsYXRlUHJvdG90eXBlKG5leHRQcm90b3R5cGUpO1xuXHRcblx0ICAgIGlmIChGaXJzdENsYXNzKSB7XG5cdCAgICAgIHJlcXVlc3RGb3JjZVVwZGF0ZUFsbChnZXRSb290SW5zdGFuY2VzKTtcblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gRmlyc3RDbGFzcyB8fCAoRmlyc3RDbGFzcyA9IE5leHRDbGFzcyk7XG5cdCAgfTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDExNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGRlZXBGb3JjZVVwZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEwKTtcblx0XG5cdHZhciBpc1JlcXVlc3RQZW5kaW5nID0gZmFsc2U7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcXVlc3RGb3JjZVVwZGF0ZUFsbChnZXRSb290SW5zdGFuY2VzKSB7XG5cdCAgaWYgKGlzUmVxdWVzdFBlbmRpbmcpIHtcblx0ICAgIHJldHVybjtcblx0ICB9XG5cdFxuXHQgIC8qKlxuXHQgICAqIEZvcmNlcyBkZWVwIHJlLXJlbmRlciBvZiBhbGwgbW91bnRlZCBSZWFjdCBjb21wb25lbnRzLlxuXHQgICAqIEhhdCdzIG9mZiB0byBPbWFyIFNrYWxsaSAoQENoZXRhbmUpIGZvciBzdWdnZXN0aW5nIHRoaXMgYXBwcm9hY2g6XG5cdCAgICogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQ2hldGFuZS85YTIzMGE5ZmRjZGNhMjFhNGUyOVxuXHQgICAqL1xuXHQgIGZ1bmN0aW9uIGZvcmNlVXBkYXRlQWxsKCkge1xuXHQgICAgaXNSZXF1ZXN0UGVuZGluZyA9IGZhbHNlO1xuXHRcblx0ICAgIHZhciByb290SW5zdGFuY2VzID0gZ2V0Um9vdEluc3RhbmNlcygpLFxuXHQgICAgICAgIHJvb3RJbnN0YW5jZTtcblx0XG5cdCAgICBmb3IgKHZhciBrZXkgaW4gcm9vdEluc3RhbmNlcykge1xuXHQgICAgICBpZiAocm9vdEluc3RhbmNlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdCAgICAgICAgZGVlcEZvcmNlVXBkYXRlKHJvb3RJbnN0YW5jZXNba2V5XSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHNldFRpbWVvdXQoZm9yY2VVcGRhdGVBbGwpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMTE1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cblx0ICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBFdmVudENvbnN0YW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBFdmVudFByb3BhZ2F0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cdHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdHZhciBTeW50aGV0aWNJbnB1dEV2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTgpO1xuXHRcblx0dmFyIGtleU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cdFxuXHR2YXIgY2FuVXNlVGV4dElucHV0RXZlbnQgPSAoXG5cdCAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmXG5cdCAgJ1RleHRFdmVudCcgaW4gd2luZG93ICYmXG5cdCAgISgnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCB8fCBpc1ByZXN0bygpKVxuXHQpO1xuXHRcblx0LyoqXG5cdCAqIE9wZXJhIDw9IDEyIGluY2x1ZGVzIFRleHRFdmVudCBpbiB3aW5kb3csIGJ1dCBkb2VzIG5vdCBmaXJlXG5cdCAqIHRleHQgaW5wdXQgZXZlbnRzLiBSZWx5IG9uIGtleXByZXNzIGluc3RlYWQuXG5cdCAqL1xuXHRmdW5jdGlvbiBpc1ByZXN0bygpIHtcblx0ICB2YXIgb3BlcmEgPSB3aW5kb3cub3BlcmE7XG5cdCAgcmV0dXJuIChcblx0ICAgIHR5cGVvZiBvcGVyYSA9PT0gJ29iamVjdCcgJiZcblx0ICAgIHR5cGVvZiBvcGVyYS52ZXJzaW9uID09PSAnZnVuY3Rpb24nICYmXG5cdCAgICBwYXJzZUludChvcGVyYS52ZXJzaW9uKCksIDEwKSA8PSAxMlxuXHQgICk7XG5cdH1cblx0XG5cdHZhciBTUEFDRUJBUl9DT0RFID0gMzI7XG5cdHZhciBTUEFDRUJBUl9DSEFSID0gU3RyaW5nLmZyb21DaGFyQ29kZShTUEFDRUJBUl9DT0RFKTtcblx0XG5cdHZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblx0XG5cdC8vIEV2ZW50cyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSBuYW1lcy5cblx0dmFyIGV2ZW50VHlwZXMgPSB7XG5cdCAgYmVmb3JlSW5wdXQ6IHtcblx0ICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG5cdCAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkJlZm9yZUlucHV0OiBudWxsfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25CZWZvcmVJbnB1dENhcHR1cmU6IG51bGx9KVxuXHQgICAgfSxcblx0ICAgIGRlcGVuZGVuY2llczogW1xuXHQgICAgICB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kLFxuXHQgICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzLFxuXHQgICAgICB0b3BMZXZlbFR5cGVzLnRvcFRleHRJbnB1dCxcblx0ICAgICAgdG9wTGV2ZWxUeXBlcy50b3BQYXN0ZVxuXHQgICAgXVxuXHQgIH1cblx0fTtcblx0XG5cdC8vIFRyYWNrIGNoYXJhY3RlcnMgaW5zZXJ0ZWQgdmlhIGtleXByZXNzIGFuZCBjb21wb3NpdGlvbiBldmVudHMuXG5cdHZhciBmYWxsYmFja0NoYXJzID0gbnVsbDtcblx0XG5cdC8vIFRyYWNrIHdoZXRoZXIgd2UndmUgZXZlciBoYW5kbGVkIGEga2V5cHJlc3Mgb24gdGhlIHNwYWNlIGtleS5cblx0dmFyIGhhc1NwYWNlS2V5cHJlc3MgPSBmYWxzZTtcblx0XG5cdC8qKlxuXHQgKiBSZXR1cm4gd2hldGhlciBhIG5hdGl2ZSBrZXlwcmVzcyBldmVudCBpcyBhc3N1bWVkIHRvIGJlIGEgY29tbWFuZC5cblx0ICogVGhpcyBpcyByZXF1aXJlZCBiZWNhdXNlIEZpcmVmb3ggZmlyZXMgYGtleXByZXNzYCBldmVudHMgZm9yIGtleSBjb21tYW5kc1xuXHQgKiAoY3V0LCBjb3B5LCBzZWxlY3QtYWxsLCBldGMuKSBldmVuIHRob3VnaCBubyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQuXG5cdCAqL1xuXHRmdW5jdGlvbiBpc0tleXByZXNzQ29tbWFuZChuYXRpdmVFdmVudCkge1xuXHQgIHJldHVybiAoXG5cdCAgICAobmF0aXZlRXZlbnQuY3RybEtleSB8fCBuYXRpdmVFdmVudC5hbHRLZXkgfHwgbmF0aXZlRXZlbnQubWV0YUtleSkgJiZcblx0ICAgIC8vIGN0cmxLZXkgJiYgYWx0S2V5IGlzIGVxdWl2YWxlbnQgdG8gQWx0R3IsIGFuZCBpcyBub3QgYSBjb21tYW5kLlxuXHQgICAgIShuYXRpdmVFdmVudC5jdHJsS2V5ICYmIG5hdGl2ZUV2ZW50LmFsdEtleSlcblx0ICApO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQ3JlYXRlIGFuIGBvbkJlZm9yZUlucHV0YCBldmVudCB0byBtYXRjaFxuXHQgKiBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDEzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDEzMTEwNS8jZXZlbnRzLWlucHV0ZXZlbnRzLlxuXHQgKlxuXHQgKiBUaGlzIGV2ZW50IHBsdWdpbiBpcyBiYXNlZCBvbiB0aGUgbmF0aXZlIGB0ZXh0SW5wdXRgIGV2ZW50XG5cdCAqIGF2YWlsYWJsZSBpbiBDaHJvbWUsIFNhZmFyaSwgT3BlcmEsIGFuZCBJRS4gVGhpcyBldmVudCBmaXJlcyBhZnRlclxuXHQgKiBgb25LZXlQcmVzc2AgYW5kIGBvbkNvbXBvc2l0aW9uRW5kYCwgYnV0IGJlZm9yZSBgb25JbnB1dGAuXG5cdCAqXG5cdCAqIGBiZWZvcmVJbnB1dGAgaXMgc3BlYydkIGJ1dCBub3QgaW1wbGVtZW50ZWQgaW4gYW55IGJyb3dzZXJzLCBhbmRcblx0ICogdGhlIGBpbnB1dGAgZXZlbnQgZG9lcyBub3QgcHJvdmlkZSBhbnkgdXNlZnVsIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgaGFzXG5cdCAqIGFjdHVhbGx5IGJlZW4gYWRkZWQsIGNvbnRyYXJ5IHRvIHRoZSBzcGVjLiBUaHVzLCBgdGV4dElucHV0YCBpcyB0aGUgYmVzdFxuXHQgKiBhdmFpbGFibGUgZXZlbnQgdG8gaWRlbnRpZnkgdGhlIGNoYXJhY3RlcnMgdGhhdCBoYXZlIGFjdHVhbGx5IGJlZW4gaW5zZXJ0ZWRcblx0ICogaW50byB0aGUgdGFyZ2V0IG5vZGUuXG5cdCAqL1xuXHR2YXIgQmVmb3JlSW5wdXRFdmVudFBsdWdpbiA9IHtcblx0XG5cdCAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblx0XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuXHQgICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuXHQgICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cblx0ICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cblx0ICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuXHQgICAqL1xuXHQgIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKFxuXHQgICAgICB0b3BMZXZlbFR5cGUsXG5cdCAgICAgIHRvcExldmVsVGFyZ2V0LFxuXHQgICAgICB0b3BMZXZlbFRhcmdldElELFxuXHQgICAgICBuYXRpdmVFdmVudCkge1xuXHRcblx0ICAgIHZhciBjaGFycztcblx0XG5cdCAgICBpZiAoY2FuVXNlVGV4dElucHV0RXZlbnQpIHtcblx0ICAgICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcblx0ICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3M6XG5cdCAgICAgICAgICAvKipcblx0ICAgICAgICAgICAqIElmIG5hdGl2ZSBgdGV4dElucHV0YCBldmVudHMgYXJlIGF2YWlsYWJsZSwgb3VyIGdvYWwgaXMgdG8gbWFrZVxuXHQgICAgICAgICAgICogdXNlIG9mIHRoZW0uIEhvd2V2ZXIsIHRoZXJlIGlzIGEgc3BlY2lhbCBjYXNlOiB0aGUgc3BhY2ViYXIga2V5LlxuXHQgICAgICAgICAgICogSW4gV2Via2l0LCBwcmV2ZW50aW5nIGRlZmF1bHQgb24gYSBzcGFjZWJhciBgdGV4dElucHV0YCBldmVudFxuXHQgICAgICAgICAgICogY2FuY2VscyBjaGFyYWN0ZXIgaW5zZXJ0aW9uLCBidXQgaXQgKmFsc28qIGNhdXNlcyB0aGUgYnJvd3NlclxuXHQgICAgICAgICAgICogdG8gZmFsbCBiYWNrIHRvIGl0cyBkZWZhdWx0IHNwYWNlYmFyIGJlaGF2aW9yIG9mIHNjcm9sbGluZyB0aGVcblx0ICAgICAgICAgICAqIHBhZ2UuXG5cdCAgICAgICAgICAgKlxuXHQgICAgICAgICAgICogVHJhY2tpbmcgYXQ6XG5cdCAgICAgICAgICAgKiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MzU1MTAzXG5cdCAgICAgICAgICAgKlxuXHQgICAgICAgICAgICogVG8gYXZvaWQgdGhpcyBpc3N1ZSwgdXNlIHRoZSBrZXlwcmVzcyBldmVudCBhcyBpZiBubyBgdGV4dElucHV0YFxuXHQgICAgICAgICAgICogZXZlbnQgaXMgYXZhaWxhYmxlLlxuXHQgICAgICAgICAgICovXG5cdCAgICAgICAgICB2YXIgd2hpY2ggPSBuYXRpdmVFdmVudC53aGljaDtcblx0ICAgICAgICAgIGlmICh3aGljaCAhPT0gU1BBQ0VCQVJfQ09ERSkge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgaGFzU3BhY2VLZXlwcmVzcyA9IHRydWU7XG5cdCAgICAgICAgICBjaGFycyA9IFNQQUNFQkFSX0NIQVI7XG5cdCAgICAgICAgICBicmVhaztcblx0XG5cdCAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRleHRJbnB1dDpcblx0ICAgICAgICAgIC8vIFJlY29yZCB0aGUgY2hhcmFjdGVycyB0byBiZSBhZGRlZCB0byB0aGUgRE9NLlxuXHQgICAgICAgICAgY2hhcnMgPSBuYXRpdmVFdmVudC5kYXRhO1xuXHRcblx0ICAgICAgICAgIC8vIElmIGl0J3MgYSBzcGFjZWJhciBjaGFyYWN0ZXIsIGFzc3VtZSB0aGF0IHdlIGhhdmUgYWxyZWFkeSBoYW5kbGVkXG5cdCAgICAgICAgICAvLyBpdCBhdCB0aGUga2V5cHJlc3MgbGV2ZWwgYW5kIGJhaWwgaW1tZWRpYXRlbHkuIEFuZHJvaWQgQ2hyb21lXG5cdCAgICAgICAgICAvLyBkb2Vzbid0IGdpdmUgdXMga2V5Y29kZXMsIHNvIHdlIG5lZWQgdG8gYmxhY2tsaXN0IGl0LlxuXHQgICAgICAgICAgaWYgKGNoYXJzID09PSBTUEFDRUJBUl9DSEFSICYmIGhhc1NwYWNlS2V5cHJlc3MpIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgIC8vIE90aGVyd2lzZSwgY2Fycnkgb24uXG5cdCAgICAgICAgICBicmVhaztcblx0XG5cdCAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgIC8vIEZvciBvdGhlciBuYXRpdmUgZXZlbnQgdHlwZXMsIGRvIG5vdGhpbmcuXG5cdCAgICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG5cdCAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBhc3RlOlxuXHQgICAgICAgICAgLy8gSWYgYSBwYXN0ZSBldmVudCBvY2N1cnMgYWZ0ZXIgYSBrZXlwcmVzcywgdGhyb3cgb3V0IHRoZSBpbnB1dFxuXHQgICAgICAgICAgLy8gY2hhcnMuIFBhc3RlIGV2ZW50cyBzaG91bGQgbm90IGxlYWQgdG8gQmVmb3JlSW5wdXQgZXZlbnRzLlxuXHQgICAgICAgICAgZmFsbGJhY2tDaGFycyA9IG51bGw7XG5cdCAgICAgICAgICBicmVhaztcblx0ICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3M6XG5cdCAgICAgICAgICAvKipcblx0ICAgICAgICAgICAqIEFzIG9mIHYyNywgRmlyZWZveCBtYXkgZmlyZSBrZXlwcmVzcyBldmVudHMgZXZlbiB3aGVuIG5vIGNoYXJhY3RlclxuXHQgICAgICAgICAgICogd2lsbCBiZSBpbnNlcnRlZC4gQSBmZXcgcG9zc2liaWxpdGllczpcblx0ICAgICAgICAgICAqXG5cdCAgICAgICAgICAgKiAtIGB3aGljaGAgaXMgYDBgLiBBcnJvdyBrZXlzLCBFc2Mga2V5LCBldGMuXG5cdCAgICAgICAgICAgKlxuXHQgICAgICAgICAgICogLSBgd2hpY2hgIGlzIHRoZSBwcmVzc2VkIGtleSBjb2RlLCBidXQgbm8gY2hhciBpcyBhdmFpbGFibGUuXG5cdCAgICAgICAgICAgKiAgIEV4OiAnQWx0R3IgKyBkYCBpbiBQb2xpc2guIFRoZXJlIGlzIG5vIG1vZGlmaWVkIGNoYXJhY3RlciBmb3Jcblx0ICAgICAgICAgICAqICAgdGhpcyBrZXkgY29tYmluYXRpb24gYW5kIG5vIGNoYXJhY3RlciBpcyBpbnNlcnRlZCBpbnRvIHRoZVxuXHQgICAgICAgICAgICogICBkb2N1bWVudCwgYnV0IEZGIGZpcmVzIHRoZSBrZXlwcmVzcyBmb3IgY2hhciBjb2RlIGAxMDBgIGFueXdheS5cblx0ICAgICAgICAgICAqICAgTm8gYGlucHV0YCBldmVudCB3aWxsIG9jY3VyLlxuXHQgICAgICAgICAgICpcblx0ICAgICAgICAgICAqIC0gYHdoaWNoYCBpcyB0aGUgcHJlc3NlZCBrZXkgY29kZSwgYnV0IGEgY29tbWFuZCBjb21iaW5hdGlvbiBpc1xuXHQgICAgICAgICAgICogICBiZWluZyB1c2VkLiBFeDogYENtZCtDYC4gTm8gY2hhcmFjdGVyIGlzIGluc2VydGVkLCBhbmQgbm9cblx0ICAgICAgICAgICAqICAgYGlucHV0YCBldmVudCB3aWxsIG9jY3VyLlxuXHQgICAgICAgICAgICovXG5cdCAgICAgICAgICBpZiAobmF0aXZlRXZlbnQud2hpY2ggJiYgIWlzS2V5cHJlc3NDb21tYW5kKG5hdGl2ZUV2ZW50KSkge1xuXHQgICAgICAgICAgICBmYWxsYmFja0NoYXJzID0gU3RyaW5nLmZyb21DaGFyQ29kZShuYXRpdmVFdmVudC53aGljaCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBicmVhaztcblx0ICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQ6XG5cdCAgICAgICAgICBmYWxsYmFja0NoYXJzID0gbmF0aXZlRXZlbnQuZGF0YTtcblx0ICAgICAgICAgIGJyZWFrO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICAvLyBJZiBubyBjaGFuZ2VzIGhhdmUgb2NjdXJyZWQgdG8gdGhlIGZhbGxiYWNrIHN0cmluZywgbm8gcmVsZXZhbnRcblx0ICAgICAgLy8gZXZlbnQgaGFzIGZpcmVkIGFuZCB3ZSdyZSBkb25lLlxuXHQgICAgICBpZiAoZmFsbGJhY2tDaGFycyA9PT0gbnVsbCkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgY2hhcnMgPSBmYWxsYmFja0NoYXJzO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIElmIG5vIGNoYXJhY3RlcnMgYXJlIGJlaW5nIGluc2VydGVkLCBubyBCZWZvcmVJbnB1dCBldmVudCBzaG91bGRcblx0ICAgIC8vIGJlIGZpcmVkLlxuXHQgICAgaWYgKCFjaGFycykge1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIGV2ZW50ID0gU3ludGhldGljSW5wdXRFdmVudC5nZXRQb29sZWQoXG5cdCAgICAgIGV2ZW50VHlwZXMuYmVmb3JlSW5wdXQsXG5cdCAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG5cdCAgICAgIG5hdGl2ZUV2ZW50XG5cdCAgICApO1xuXHRcblx0ICAgIGV2ZW50LmRhdGEgPSBjaGFycztcblx0ICAgIGZhbGxiYWNrQ2hhcnMgPSBudWxsO1xuXHQgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcblx0ICAgIHJldHVybiBldmVudDtcblx0ICB9XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IEJlZm9yZUlucHV0RXZlbnRQbHVnaW47XG5cblxuLyoqKi8gfSxcbi8qIDExNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBDaGFuZ2VFdmVudFBsdWdpblxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIEV2ZW50Q29uc3RhbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIEV2ZW50UGx1Z2luSHViID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cdHZhciBFdmVudFByb3BhZ2F0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cdHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdHZhciBSZWFjdFVwZGF0ZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0dmFyIFN5bnRoZXRpY0V2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cdFxuXHR2YXIgaXNFdmVudFN1cHBvcnRlZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTYpO1xuXHR2YXIgaXNUZXh0SW5wdXRFbGVtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4Myk7XG5cdHZhciBrZXlPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXHRcblx0dmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXHRcblx0dmFyIGV2ZW50VHlwZXMgPSB7XG5cdCAgY2hhbmdlOiB7XG5cdCAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuXHQgICAgICBidWJibGVkOiBrZXlPZih7b25DaGFuZ2U6IG51bGx9KSxcblx0ICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNoYW5nZUNhcHR1cmU6IG51bGx9KVxuXHQgICAgfSxcblx0ICAgIGRlcGVuZGVuY2llczogW1xuXHQgICAgICB0b3BMZXZlbFR5cGVzLnRvcEJsdXIsXG5cdCAgICAgIHRvcExldmVsVHlwZXMudG9wQ2hhbmdlLFxuXHQgICAgICB0b3BMZXZlbFR5cGVzLnRvcENsaWNrLFxuXHQgICAgICB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzLFxuXHQgICAgICB0b3BMZXZlbFR5cGVzLnRvcElucHV0LFxuXHQgICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sXG5cdCAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5VXAsXG5cdCAgICAgIHRvcExldmVsVHlwZXMudG9wU2VsZWN0aW9uQ2hhbmdlXG5cdCAgICBdXG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIEZvciBJRSBzaGltc1xuXHQgKi9cblx0dmFyIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuXHR2YXIgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcblx0dmFyIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IG51bGw7XG5cdHZhciBhY3RpdmVFbGVtZW50VmFsdWVQcm9wID0gbnVsbDtcblx0XG5cdC8qKlxuXHQgKiBTRUNUSU9OOiBoYW5kbGUgYGNoYW5nZWAgZXZlbnRcblx0ICovXG5cdGZ1bmN0aW9uIHNob3VsZFVzZUNoYW5nZUV2ZW50KGVsZW0pIHtcblx0ICByZXR1cm4gKFxuXHQgICAgZWxlbS5ub2RlTmFtZSA9PT0gJ1NFTEVDVCcgfHxcblx0ICAgIChlbGVtLm5vZGVOYW1lID09PSAnSU5QVVQnICYmIGVsZW0udHlwZSA9PT0gJ2ZpbGUnKVxuXHQgICk7XG5cdH1cblx0XG5cdHZhciBkb2VzQ2hhbmdlRXZlbnRCdWJibGUgPSBmYWxzZTtcblx0aWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuXHQgIC8vIFNlZSBgaGFuZGxlQ2hhbmdlYCBjb21tZW50IGJlbG93XG5cdCAgZG9lc0NoYW5nZUV2ZW50QnViYmxlID0gaXNFdmVudFN1cHBvcnRlZCgnY2hhbmdlJykgJiYgKFxuXHQgICAgISgnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOFxuXHQgICk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQobmF0aXZlRXZlbnQpIHtcblx0ICB2YXIgZXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoXG5cdCAgICBldmVudFR5cGVzLmNoYW5nZSxcblx0ICAgIGFjdGl2ZUVsZW1lbnRJRCxcblx0ICAgIG5hdGl2ZUV2ZW50XG5cdCAgKTtcblx0ICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuXHRcblx0ICAvLyBJZiBjaGFuZ2UgYW5kIHByb3BlcnR5Y2hhbmdlIGJ1YmJsZWQsIHdlJ2QganVzdCBiaW5kIHRvIGl0IGxpa2UgYWxsIHRoZVxuXHQgIC8vIG90aGVyIGV2ZW50cyBhbmQgaGF2ZSBpdCBnbyB0aHJvdWdoIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci4gU2luY2UgaXRcblx0ICAvLyBkb2Vzbid0LCB3ZSBtYW51YWxseSBsaXN0ZW4gZm9yIHRoZSBldmVudHMgYW5kIHNvIHdlIGhhdmUgdG8gZW5xdWV1ZSBhbmRcblx0ICAvLyBwcm9jZXNzIHRoZSBhYnN0cmFjdCBldmVudCBtYW51YWxseS5cblx0ICAvL1xuXHQgIC8vIEJhdGNoaW5nIGlzIG5lY2Vzc2FyeSBoZXJlIGluIG9yZGVyIHRvIGVuc3VyZSB0aGF0IGFsbCBldmVudCBoYW5kbGVycyBydW5cblx0ICAvLyBiZWZvcmUgdGhlIG5leHQgcmVyZW5kZXIgKGluY2x1ZGluZyBldmVudCBoYW5kbGVycyBhdHRhY2hlZCB0byBhbmNlc3RvclxuXHQgIC8vIGVsZW1lbnRzIGluc3RlYWQgb2YgZGlyZWN0bHkgb24gdGhlIGlucHV0KS4gV2l0aG91dCB0aGlzLCBjb250cm9sbGVkXG5cdCAgLy8gY29tcG9uZW50cyBkb24ndCB3b3JrIHByb3Blcmx5IGluIGNvbmp1bmN0aW9uIHdpdGggZXZlbnQgYnViYmxpbmcgYmVjYXVzZVxuXHQgIC8vIHRoZSBjb21wb25lbnQgaXMgcmVyZW5kZXJlZCBhbmQgdGhlIHZhbHVlIHJldmVydGVkIGJlZm9yZSBhbGwgdGhlIGV2ZW50XG5cdCAgLy8gaGFuZGxlcnMgY2FuIHJ1bi4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzA4LlxuXHQgIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyhydW5FdmVudEluQmF0Y2gsIGV2ZW50KTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gcnVuRXZlbnRJbkJhdGNoKGV2ZW50KSB7XG5cdCAgRXZlbnRQbHVnaW5IdWIuZW5xdWV1ZUV2ZW50cyhldmVudCk7XG5cdCAgRXZlbnRQbHVnaW5IdWIucHJvY2Vzc0V2ZW50UXVldWUoKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gc3RhcnRXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KHRhcmdldCwgdGFyZ2V0SUQpIHtcblx0ICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0O1xuXHQgIGFjdGl2ZUVsZW1lbnRJRCA9IHRhcmdldElEO1xuXHQgIGFjdGl2ZUVsZW1lbnQuYXR0YWNoRXZlbnQoJ29uY2hhbmdlJywgbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudCk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCkge1xuXHQgIGlmICghYWN0aXZlRWxlbWVudCkge1xuXHQgICAgcmV0dXJuO1xuXHQgIH1cblx0ICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbmNoYW5nZScsIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQpO1xuXHQgIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuXHQgIGFjdGl2ZUVsZW1lbnRJRCA9IG51bGw7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldFRhcmdldElERm9yQ2hhbmdlRXZlbnQoXG5cdCAgICB0b3BMZXZlbFR5cGUsXG5cdCAgICB0b3BMZXZlbFRhcmdldCxcblx0ICAgIHRvcExldmVsVGFyZ2V0SUQpIHtcblx0ICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENoYW5nZSkge1xuXHQgICAgcmV0dXJuIHRvcExldmVsVGFyZ2V0SUQ7XG5cdCAgfVxuXHR9XG5cdGZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvckNoYW5nZUV2ZW50SUU4KFxuXHQgICAgdG9wTGV2ZWxUeXBlLFxuXHQgICAgdG9wTGV2ZWxUYXJnZXQsXG5cdCAgICB0b3BMZXZlbFRhcmdldElEKSB7XG5cdCAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BGb2N1cykge1xuXHQgICAgLy8gc3RvcFdhdGNoaW5nKCkgc2hvdWxkIGJlIGEgbm9vcCBoZXJlIGJ1dCB3ZSBjYWxsIGl0IGp1c3QgaW4gY2FzZSB3ZVxuXHQgICAgLy8gbWlzc2VkIGEgYmx1ciBldmVudCBzb21laG93LlxuXHQgICAgc3RvcFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgoKTtcblx0ICAgIHN0YXJ0V2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCh0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCk7XG5cdCAgfSBlbHNlIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQmx1cikge1xuXHQgICAgc3RvcFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgoKTtcblx0ICB9XG5cdH1cblx0XG5cdFxuXHQvKipcblx0ICogU0VDVElPTjogaGFuZGxlIGBpbnB1dGAgZXZlbnRcblx0ICovXG5cdHZhciBpc0lucHV0RXZlbnRTdXBwb3J0ZWQgPSBmYWxzZTtcblx0aWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuXHQgIC8vIElFOSBjbGFpbXMgdG8gc3VwcG9ydCB0aGUgaW5wdXQgZXZlbnQgYnV0IGZhaWxzIHRvIHRyaWdnZXIgaXQgd2hlblxuXHQgIC8vIGRlbGV0aW5nIHRleHQsIHNvIHdlIGlnbm9yZSBpdHMgaW5wdXQgZXZlbnRzXG5cdCAgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gaXNFdmVudFN1cHBvcnRlZCgnaW5wdXQnKSAmJiAoXG5cdCAgICAhKCdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50KSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPiA5XG5cdCAgKTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIChGb3Igb2xkIElFLikgUmVwbGFjZW1lbnQgZ2V0dGVyL3NldHRlciBmb3IgdGhlIGB2YWx1ZWAgcHJvcGVydHkgdGhhdCBnZXRzXG5cdCAqIHNldCBvbiB0aGUgYWN0aXZlIGVsZW1lbnQuXG5cdCAqL1xuXHR2YXIgbmV3VmFsdWVQcm9wID0gIHtcblx0ICBnZXQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AuZ2V0LmNhbGwodGhpcyk7XG5cdCAgfSxcblx0ICBzZXQ6IGZ1bmN0aW9uKHZhbCkge1xuXHQgICAgLy8gQ2FzdCB0byBhIHN0cmluZyBzbyB3ZSBjYW4gZG8gZXF1YWxpdHkgY2hlY2tzLlxuXHQgICAgYWN0aXZlRWxlbWVudFZhbHVlID0gJycgKyB2YWw7XG5cdCAgICBhY3RpdmVFbGVtZW50VmFsdWVQcm9wLnNldC5jYWxsKHRoaXMsIHZhbCk7XG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIChGb3Igb2xkIElFLikgU3RhcnRzIHRyYWNraW5nIHByb3BlcnR5Y2hhbmdlIGV2ZW50cyBvbiB0aGUgcGFzc2VkLWluIGVsZW1lbnRcblx0ICogYW5kIG92ZXJyaWRlIHRoZSB2YWx1ZSBwcm9wZXJ0eSBzbyB0aGF0IHdlIGNhbiBkaXN0aW5ndWlzaCB1c2VyIGV2ZW50cyBmcm9tXG5cdCAqIHZhbHVlIGNoYW5nZXMgaW4gSlMuXG5cdCAqL1xuXHRmdW5jdGlvbiBzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UodGFyZ2V0LCB0YXJnZXRJRCkge1xuXHQgIGFjdGl2ZUVsZW1lbnQgPSB0YXJnZXQ7XG5cdCAgYWN0aXZlRWxlbWVudElEID0gdGFyZ2V0SUQ7XG5cdCAgYWN0aXZlRWxlbWVudFZhbHVlID0gdGFyZ2V0LnZhbHVlO1xuXHQgIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuXHQgICAgdGFyZ2V0LmNvbnN0cnVjdG9yLnByb3RvdHlwZSxcblx0ICAgICd2YWx1ZSdcblx0ICApO1xuXHRcblx0ICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYWN0aXZlRWxlbWVudCwgJ3ZhbHVlJywgbmV3VmFsdWVQcm9wKTtcblx0ICBhY3RpdmVFbGVtZW50LmF0dGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UpO1xuXHR9XG5cdFxuXHQvKipcblx0ICogKEZvciBvbGQgSUUuKSBSZW1vdmVzIHRoZSBldmVudCBsaXN0ZW5lcnMgZnJvbSB0aGUgY3VycmVudGx5LXRyYWNrZWQgZWxlbWVudCxcblx0ICogaWYgYW55IGV4aXN0cy5cblx0ICovXG5cdGZ1bmN0aW9uIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCkge1xuXHQgIGlmICghYWN0aXZlRWxlbWVudCkge1xuXHQgICAgcmV0dXJuO1xuXHQgIH1cblx0XG5cdCAgLy8gZGVsZXRlIHJlc3RvcmVzIHRoZSBvcmlnaW5hbCBwcm9wZXJ0eSBkZWZpbml0aW9uXG5cdCAgZGVsZXRlIGFjdGl2ZUVsZW1lbnQudmFsdWU7XG5cdCAgYWN0aXZlRWxlbWVudC5kZXRhY2hFdmVudCgnb25wcm9wZXJ0eWNoYW5nZScsIGhhbmRsZVByb3BlcnR5Q2hhbmdlKTtcblx0XG5cdCAgYWN0aXZlRWxlbWVudCA9IG51bGw7XG5cdCAgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcblx0ICBhY3RpdmVFbGVtZW50VmFsdWUgPSBudWxsO1xuXHQgIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AgPSBudWxsO1xuXHR9XG5cdFxuXHQvKipcblx0ICogKEZvciBvbGQgSUUuKSBIYW5kbGVzIGEgcHJvcGVydHljaGFuZ2UgZXZlbnQsIHNlbmRpbmcgYSBgY2hhbmdlYCBldmVudCBpZlxuXHQgKiB0aGUgdmFsdWUgb2YgdGhlIGFjdGl2ZSBlbGVtZW50IGhhcyBjaGFuZ2VkLlxuXHQgKi9cblx0ZnVuY3Rpb24gaGFuZGxlUHJvcGVydHlDaGFuZ2UobmF0aXZlRXZlbnQpIHtcblx0ICBpZiAobmF0aXZlRXZlbnQucHJvcGVydHlOYW1lICE9PSAndmFsdWUnKSB7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIHZhciB2YWx1ZSA9IG5hdGl2ZUV2ZW50LnNyY0VsZW1lbnQudmFsdWU7XG5cdCAgaWYgKHZhbHVlID09PSBhY3RpdmVFbGVtZW50VmFsdWUpIHtcblx0ICAgIHJldHVybjtcblx0ICB9XG5cdCAgYWN0aXZlRWxlbWVudFZhbHVlID0gdmFsdWU7XG5cdFxuXHQgIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQobmF0aXZlRXZlbnQpO1xuXHR9XG5cdFxuXHQvKipcblx0ICogSWYgYSBgY2hhbmdlYCBldmVudCBzaG91bGQgYmUgZmlyZWQsIHJldHVybnMgdGhlIHRhcmdldCdzIElELlxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50KFxuXHQgICAgdG9wTGV2ZWxUeXBlLFxuXHQgICAgdG9wTGV2ZWxUYXJnZXQsXG5cdCAgICB0b3BMZXZlbFRhcmdldElEKSB7XG5cdCAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BJbnB1dCkge1xuXHQgICAgLy8gSW4gbW9kZXJuIGJyb3dzZXJzIChpLmUuLCBub3QgSUU4IG9yIElFOSksIHRoZSBpbnB1dCBldmVudCBpcyBleGFjdGx5XG5cdCAgICAvLyB3aGF0IHdlIHdhbnQgc28gZmFsbCB0aHJvdWdoIGhlcmUgYW5kIHRyaWdnZXIgYW4gYWJzdHJhY3QgZXZlbnRcblx0ICAgIHJldHVybiB0b3BMZXZlbFRhcmdldElEO1xuXHQgIH1cblx0fVxuXHRcblx0Ly8gRm9yIElFOCBhbmQgSUU5LlxuXHRmdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUUoXG5cdCAgICB0b3BMZXZlbFR5cGUsXG5cdCAgICB0b3BMZXZlbFRhcmdldCxcblx0ICAgIHRvcExldmVsVGFyZ2V0SUQpIHtcblx0ICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzKSB7XG5cdCAgICAvLyBJbiBJRTgsIHdlIGNhbiBjYXB0dXJlIGFsbW9zdCBhbGwgLnZhbHVlIGNoYW5nZXMgYnkgYWRkaW5nIGFcblx0ICAgIC8vIHByb3BlcnR5Y2hhbmdlIGhhbmRsZXIgYW5kIGxvb2tpbmcgZm9yIGV2ZW50cyB3aXRoIHByb3BlcnR5TmFtZVxuXHQgICAgLy8gZXF1YWwgdG8gJ3ZhbHVlJ1xuXHQgICAgLy8gSW4gSUU5LCBwcm9wZXJ0eWNoYW5nZSBmaXJlcyBmb3IgbW9zdCBpbnB1dCBldmVudHMgYnV0IGlzIGJ1Z2d5IGFuZFxuXHQgICAgLy8gZG9lc24ndCBmaXJlIHdoZW4gdGV4dCBpcyBkZWxldGVkLCBidXQgY29udmVuaWVudGx5LCBzZWxlY3Rpb25jaGFuZ2Vcblx0ICAgIC8vIGFwcGVhcnMgdG8gZmlyZSBpbiBhbGwgb2YgdGhlIHJlbWFpbmluZyBjYXNlcyBzbyB3ZSBjYXRjaCB0aG9zZSBhbmRcblx0ICAgIC8vIGZvcndhcmQgdGhlIGV2ZW50IGlmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZFxuXHQgICAgLy8gSW4gZWl0aGVyIGNhc2UsIHdlIGRvbid0IHdhbnQgdG8gY2FsbCB0aGUgZXZlbnQgaGFuZGxlciBpZiB0aGUgdmFsdWVcblx0ICAgIC8vIGlzIGNoYW5nZWQgZnJvbSBKUyBzbyB3ZSByZWRlZmluZSBhIHNldHRlciBmb3IgYC52YWx1ZWAgdGhhdCB1cGRhdGVzXG5cdCAgICAvLyBvdXIgYWN0aXZlRWxlbWVudFZhbHVlIHZhcmlhYmxlLCBhbGxvd2luZyB1cyB0byBpZ25vcmUgdGhvc2UgY2hhbmdlc1xuXHQgICAgLy9cblx0ICAgIC8vIHN0b3BXYXRjaGluZygpIHNob3VsZCBiZSBhIG5vb3AgaGVyZSBidXQgd2UgY2FsbCBpdCBqdXN0IGluIGNhc2Ugd2Vcblx0ICAgIC8vIG1pc3NlZCBhIGJsdXIgZXZlbnQgc29tZWhvdy5cblx0ICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG5cdCAgICBzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UodG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQpO1xuXHQgIH0gZWxzZSBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEJsdXIpIHtcblx0ICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG5cdCAgfVxuXHR9XG5cdFxuXHQvLyBGb3IgSUU4IGFuZCBJRTkuXG5cdGZ1bmN0aW9uIGdldFRhcmdldElERm9ySW5wdXRFdmVudElFKFxuXHQgICAgdG9wTGV2ZWxUeXBlLFxuXHQgICAgdG9wTGV2ZWxUYXJnZXQsXG5cdCAgICB0b3BMZXZlbFRhcmdldElEKSB7XG5cdCAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BTZWxlY3Rpb25DaGFuZ2UgfHxcblx0ICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEtleVVwIHx8XG5cdCAgICAgIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duKSB7XG5cdCAgICAvLyBPbiB0aGUgc2VsZWN0aW9uY2hhbmdlIGV2ZW50LCB0aGUgdGFyZ2V0IGlzIGp1c3QgZG9jdW1lbnQgd2hpY2ggaXNuJ3Rcblx0ICAgIC8vIGhlbHBmdWwgZm9yIHVzIHNvIGp1c3QgY2hlY2sgYWN0aXZlRWxlbWVudCBpbnN0ZWFkLlxuXHQgICAgLy9cblx0ICAgIC8vIDk5JSBvZiB0aGUgdGltZSwga2V5ZG93biBhbmQga2V5dXAgYXJlbid0IG5lY2Vzc2FyeS4gSUU4IGZhaWxzIHRvIGZpcmVcblx0ICAgIC8vIHByb3BlcnR5Y2hhbmdlIG9uIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhZnRlciBzZXR0aW5nIGB2YWx1ZWAgZnJvbSBhXG5cdCAgICAvLyBzY3JpcHQgYW5kIGZpcmVzIG9ubHkga2V5ZG93biwga2V5cHJlc3MsIGtleXVwLiBDYXRjaGluZyBrZXl1cCB1c3VhbGx5XG5cdCAgICAvLyBnZXRzIGl0IGFuZCBjYXRjaGluZyBrZXlkb3duIGxldHMgdXMgZmlyZSBhbiBldmVudCBmb3IgdGhlIGZpcnN0XG5cdCAgICAvLyBrZXlzdHJva2UgaWYgdXNlciBkb2VzIGEga2V5IHJlcGVhdCAoaXQnbGwgYmUgYSBsaXR0bGUgZGVsYXllZDogcmlnaHRcblx0ICAgIC8vIGJlZm9yZSB0aGUgc2Vjb25kIGtleXN0cm9rZSkuIE90aGVyIGlucHV0IG1ldGhvZHMgKGUuZy4sIHBhc3RlKSBzZWVtIHRvXG5cdCAgICAvLyBmaXJlIHNlbGVjdGlvbmNoYW5nZSBub3JtYWxseS5cblx0ICAgIGlmIChhY3RpdmVFbGVtZW50ICYmIGFjdGl2ZUVsZW1lbnQudmFsdWUgIT09IGFjdGl2ZUVsZW1lbnRWYWx1ZSkge1xuXHQgICAgICBhY3RpdmVFbGVtZW50VmFsdWUgPSBhY3RpdmVFbGVtZW50LnZhbHVlO1xuXHQgICAgICByZXR1cm4gYWN0aXZlRWxlbWVudElEO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0XG5cdC8qKlxuXHQgKiBTRUNUSU9OOiBoYW5kbGUgYGNsaWNrYCBldmVudFxuXHQgKi9cblx0ZnVuY3Rpb24gc2hvdWxkVXNlQ2xpY2tFdmVudChlbGVtKSB7XG5cdCAgLy8gVXNlIHRoZSBgY2xpY2tgIGV2ZW50IHRvIGRldGVjdCBjaGFuZ2VzIHRvIGNoZWNrYm94IGFuZCByYWRpbyBpbnB1dHMuXG5cdCAgLy8gVGhpcyBhcHByb2FjaCB3b3JrcyBhY3Jvc3MgYWxsIGJyb3dzZXJzLCB3aGVyZWFzIGBjaGFuZ2VgIGRvZXMgbm90IGZpcmVcblx0ICAvLyB1bnRpbCBgYmx1cmAgaW4gSUU4LlxuXHQgIHJldHVybiAoXG5cdCAgICBlbGVtLm5vZGVOYW1lID09PSAnSU5QVVQnICYmXG5cdCAgICAoZWxlbS50eXBlID09PSAnY2hlY2tib3gnIHx8IGVsZW0udHlwZSA9PT0gJ3JhZGlvJylcblx0ICApO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBnZXRUYXJnZXRJREZvckNsaWNrRXZlbnQoXG5cdCAgICB0b3BMZXZlbFR5cGUsXG5cdCAgICB0b3BMZXZlbFRhcmdldCxcblx0ICAgIHRvcExldmVsVGFyZ2V0SUQpIHtcblx0ICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENsaWNrKSB7XG5cdCAgICByZXR1cm4gdG9wTGV2ZWxUYXJnZXRJRDtcblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBUaGlzIHBsdWdpbiBjcmVhdGVzIGFuIGBvbkNoYW5nZWAgZXZlbnQgdGhhdCBub3JtYWxpemVzIGNoYW5nZSBldmVudHNcblx0ICogYWNyb3NzIGZvcm0gZWxlbWVudHMuIFRoaXMgZXZlbnQgZmlyZXMgYXQgYSB0aW1lIHdoZW4gaXQncyBwb3NzaWJsZSB0b1xuXHQgKiBjaGFuZ2UgdGhlIGVsZW1lbnQncyB2YWx1ZSB3aXRob3V0IHNlZWluZyBhIGZsaWNrZXIuXG5cdCAqXG5cdCAqIFN1cHBvcnRlZCBlbGVtZW50cyBhcmU6XG5cdCAqIC0gaW5wdXQgKHNlZSBgaXNUZXh0SW5wdXRFbGVtZW50YClcblx0ICogLSB0ZXh0YXJlYVxuXHQgKiAtIHNlbGVjdFxuXHQgKi9cblx0dmFyIENoYW5nZUV2ZW50UGx1Z2luID0ge1xuXHRcblx0ICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXHRcblx0ICAvKipcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG5cdCAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG5cdCAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuXHQgICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuXHQgICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG5cdCAgICovXG5cdCAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG5cdCAgICAgIHRvcExldmVsVHlwZSxcblx0ICAgICAgdG9wTGV2ZWxUYXJnZXQsXG5cdCAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG5cdCAgICAgIG5hdGl2ZUV2ZW50KSB7XG5cdFxuXHQgICAgdmFyIGdldFRhcmdldElERnVuYywgaGFuZGxlRXZlbnRGdW5jO1xuXHQgICAgaWYgKHNob3VsZFVzZUNoYW5nZUV2ZW50KHRvcExldmVsVGFyZ2V0KSkge1xuXHQgICAgICBpZiAoZG9lc0NoYW5nZUV2ZW50QnViYmxlKSB7XG5cdCAgICAgICAgZ2V0VGFyZ2V0SURGdW5jID0gZ2V0VGFyZ2V0SURGb3JDaGFuZ2VFdmVudDtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBoYW5kbGVFdmVudEZ1bmMgPSBoYW5kbGVFdmVudHNGb3JDaGFuZ2VFdmVudElFODtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIGlmIChpc1RleHRJbnB1dEVsZW1lbnQodG9wTGV2ZWxUYXJnZXQpKSB7XG5cdCAgICAgIGlmIChpc0lucHV0RXZlbnRTdXBwb3J0ZWQpIHtcblx0ICAgICAgICBnZXRUYXJnZXRJREZ1bmMgPSBnZXRUYXJnZXRJREZvcklucHV0RXZlbnQ7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgZ2V0VGFyZ2V0SURGdW5jID0gZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50SUU7XG5cdCAgICAgICAgaGFuZGxlRXZlbnRGdW5jID0gaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudElFO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2UgaWYgKHNob3VsZFVzZUNsaWNrRXZlbnQodG9wTGV2ZWxUYXJnZXQpKSB7XG5cdCAgICAgIGdldFRhcmdldElERnVuYyA9IGdldFRhcmdldElERm9yQ2xpY2tFdmVudDtcblx0ICAgIH1cblx0XG5cdCAgICBpZiAoZ2V0VGFyZ2V0SURGdW5jKSB7XG5cdCAgICAgIHZhciB0YXJnZXRJRCA9IGdldFRhcmdldElERnVuYyhcblx0ICAgICAgICB0b3BMZXZlbFR5cGUsXG5cdCAgICAgICAgdG9wTGV2ZWxUYXJnZXQsXG5cdCAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRFxuXHQgICAgICApO1xuXHQgICAgICBpZiAodGFyZ2V0SUQpIHtcblx0ICAgICAgICB2YXIgZXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoXG5cdCAgICAgICAgICBldmVudFR5cGVzLmNoYW5nZSxcblx0ICAgICAgICAgIHRhcmdldElELFxuXHQgICAgICAgICAgbmF0aXZlRXZlbnRcblx0ICAgICAgICApO1xuXHQgICAgICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG5cdCAgICAgICAgcmV0dXJuIGV2ZW50O1xuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKGhhbmRsZUV2ZW50RnVuYykge1xuXHQgICAgICBoYW5kbGVFdmVudEZ1bmMoXG5cdCAgICAgICAgdG9wTGV2ZWxUeXBlLFxuXHQgICAgICAgIHRvcExldmVsVGFyZ2V0LFxuXHQgICAgICAgIHRvcExldmVsVGFyZ2V0SURcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBDaGFuZ2VFdmVudFBsdWdpbjtcblxuXG4vKioqLyB9LFxuLyogMTE3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIENsaWVudFJlYWN0Um9vdEluZGV4XG5cdCAqIEB0eXBlY2hlY2tzXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgbmV4dFJlYWN0Um9vdEluZGV4ID0gMDtcblx0XG5cdHZhciBDbGllbnRSZWFjdFJvb3RJbmRleCA9IHtcblx0ICBjcmVhdGVSZWFjdFJvb3RJbmRleDogZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gbmV4dFJlYWN0Um9vdEluZGV4Kys7XG5cdCAgfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBDbGllbnRSZWFjdFJvb3RJbmRleDtcblxuXG4vKioqLyB9LFxuLyogMTE4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIENvbXBvc2l0aW9uRXZlbnRQbHVnaW5cblx0ICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBFdmVudENvbnN0YW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBFdmVudFByb3BhZ2F0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cdHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdHZhciBSZWFjdElucHV0U2VsZWN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nyk7XG5cdHZhciBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTUpO1xuXHRcblx0dmFyIGdldFRleHRDb250ZW50QWNjZXNzb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1KTtcblx0dmFyIGtleU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cdFxuXHR2YXIgRU5EX0tFWUNPREVTID0gWzksIDEzLCAyNywgMzJdOyAvLyBUYWIsIFJldHVybiwgRXNjLCBTcGFjZVxuXHR2YXIgU1RBUlRfS0VZQ09ERSA9IDIyOTtcblx0XG5cdHZhciB1c2VDb21wb3NpdGlvbkV2ZW50ID0gKFxuXHQgIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJlxuXHQgICdDb21wb3NpdGlvbkV2ZW50JyBpbiB3aW5kb3dcblx0KTtcblx0XG5cdC8vIEluIElFOSssIHdlIGhhdmUgYWNjZXNzIHRvIGNvbXBvc2l0aW9uIGV2ZW50cywgYnV0IHRoZSBkYXRhIHN1cHBsaWVkXG5cdC8vIGJ5IHRoZSBuYXRpdmUgY29tcG9zaXRpb25lbmQgZXZlbnQgbWF5IGJlIGluY29ycmVjdC4gSW4gS29yZWFuLCBmb3IgZXhhbXBsZSxcblx0Ly8gdGhlIGNvbXBvc2l0aW9uZW5kIGV2ZW50IGNvbnRhaW5zIG9ubHkgb25lIGNoYXJhY3RlciByZWdhcmRsZXNzIG9mXG5cdC8vIGhvdyBtYW55IGNoYXJhY3RlcnMgaGF2ZSBiZWVuIGNvbXBvc2VkIHNpbmNlIGNvbXBvc2l0aW9uc3RhcnQuXG5cdC8vIFdlIHRoZXJlZm9yZSB1c2UgdGhlIGZhbGxiYWNrIGRhdGEgd2hpbGUgc3RpbGwgdXNpbmcgdGhlIG5hdGl2ZVxuXHQvLyBldmVudHMgYXMgdHJpZ2dlcnMuXG5cdHZhciB1c2VGYWxsYmFja0RhdGEgPSAoXG5cdCAgIXVzZUNvbXBvc2l0aW9uRXZlbnQgfHxcblx0ICAoXG5cdCAgICAnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCAmJlxuXHQgICAgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOCAmJlxuXHQgICAgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDw9IDExXG5cdCAgKVxuXHQpO1xuXHRcblx0dmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXHR2YXIgY3VycmVudENvbXBvc2l0aW9uID0gbnVsbDtcblx0XG5cdC8vIEV2ZW50cyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSBuYW1lcy5cblx0dmFyIGV2ZW50VHlwZXMgPSB7XG5cdCAgY29tcG9zaXRpb25FbmQ6IHtcblx0ICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG5cdCAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uRW5kOiBudWxsfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Db21wb3NpdGlvbkVuZENhcHR1cmU6IG51bGx9KVxuXHQgICAgfSxcblx0ICAgIGRlcGVuZGVuY2llczogW1xuXHQgICAgICB0b3BMZXZlbFR5cGVzLnRvcEJsdXIsXG5cdCAgICAgIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQsXG5cdCAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5RG93bixcblx0ICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcyxcblx0ICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCxcblx0ICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25cblx0ICAgIF1cblx0ICB9LFxuXHQgIGNvbXBvc2l0aW9uU3RhcnQ6IHtcblx0ICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG5cdCAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uU3RhcnQ6IG51bGx9KSxcblx0ICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlOiBudWxsfSlcblx0ICAgIH0sXG5cdCAgICBkZXBlbmRlbmNpZXM6IFtcblx0ICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuXHQgICAgICB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uU3RhcnQsXG5cdCAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5RG93bixcblx0ICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcyxcblx0ICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCxcblx0ICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25cblx0ICAgIF1cblx0ICB9LFxuXHQgIGNvbXBvc2l0aW9uVXBkYXRlOiB7XG5cdCAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuXHQgICAgICBidWJibGVkOiBrZXlPZih7b25Db21wb3NpdGlvblVwZGF0ZTogbnVsbH0pLFxuXHQgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlOiBudWxsfSlcblx0ICAgIH0sXG5cdCAgICBkZXBlbmRlbmNpZXM6IFtcblx0ICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuXHQgICAgICB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uVXBkYXRlLFxuXHQgICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sXG5cdCAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3MsXG5cdCAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5VXAsXG5cdCAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duXG5cdCAgICBdXG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIFRyYW5zbGF0ZSBuYXRpdmUgdG9wIGxldmVsIGV2ZW50cyBpbnRvIGV2ZW50IHR5cGVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlXG5cdCAqIEByZXR1cm4ge29iamVjdH1cblx0ICovXG5cdGZ1bmN0aW9uIGdldENvbXBvc2l0aW9uRXZlbnRUeXBlKHRvcExldmVsVHlwZSkge1xuXHQgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG5cdCAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25TdGFydDpcblx0ICAgICAgcmV0dXJuIGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydDtcblx0ICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZDpcblx0ICAgICAgcmV0dXJuIGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQ7XG5cdCAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25VcGRhdGU6XG5cdCAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uVXBkYXRlO1xuXHQgIH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIERvZXMgb3VyIGZhbGxiYWNrIGJlc3QtZ3Vlc3MgbW9kZWwgdGhpbmsgdGhpcyBldmVudCBzaWduaWZpZXMgdGhhdFxuXHQgKiBjb21wb3NpdGlvbiBoYXMgYmVndW4/XG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcblx0ICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRmdW5jdGlvbiBpc0ZhbGxiYWNrU3RhcnQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuXHQgIHJldHVybiAoXG5cdCAgICB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wS2V5RG93biAmJlxuXHQgICAgbmF0aXZlRXZlbnQua2V5Q29kZSA9PT0gU1RBUlRfS0VZQ09ERVxuXHQgICk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBEb2VzIG91ciBmYWxsYmFjayBtb2RlIHRoaW5rIHRoYXQgdGhpcyBldmVudCBpcyB0aGUgZW5kIG9mIGNvbXBvc2l0aW9uP1xuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuXHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHQgKi9cblx0ZnVuY3Rpb24gaXNGYWxsYmFja0VuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG5cdCAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcblx0ICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcDpcblx0ICAgICAgLy8gQ29tbWFuZCBrZXlzIGluc2VydCBvciBjbGVhciBJTUUgaW5wdXQuXG5cdCAgICAgIHJldHVybiAoRU5EX0tFWUNPREVTLmluZGV4T2YobmF0aXZlRXZlbnQua2V5Q29kZSkgIT09IC0xKTtcblx0ICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duOlxuXHQgICAgICAvLyBFeHBlY3QgSU1FIGtleUNvZGUgb24gZWFjaCBrZXlkb3duLiBJZiB3ZSBnZXQgYW55IG90aGVyXG5cdCAgICAgIC8vIGNvZGUgd2UgbXVzdCBoYXZlIGV4aXRlZCBlYXJsaWVyLlxuXHQgICAgICByZXR1cm4gKG5hdGl2ZUV2ZW50LmtleUNvZGUgIT09IFNUQVJUX0tFWUNPREUpO1xuXHQgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuXHQgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bjpcblx0ICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BCbHVyOlxuXHQgICAgICAvLyBFdmVudHMgYXJlIG5vdCBwb3NzaWJsZSB3aXRob3V0IGNhbmNlbGxpbmcgSU1FLlxuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIGRlZmF1bHQ6XG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBIZWxwZXIgY2xhc3Mgc3RvcmVzIGluZm9ybWF0aW9uIGFib3V0IHNlbGVjdGlvbiBhbmQgZG9jdW1lbnQgc3RhdGVcblx0ICogc28gd2UgY2FuIGZpZ3VyZSBvdXQgd2hhdCBjaGFuZ2VkIGF0IGEgbGF0ZXIgZGF0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gcm9vdFxuXHQgKi9cblx0ZnVuY3Rpb24gRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlKHJvb3QpIHtcblx0ICB0aGlzLnJvb3QgPSByb290O1xuXHQgIHRoaXMuc3RhcnRTZWxlY3Rpb24gPSBSZWFjdElucHV0U2VsZWN0aW9uLmdldFNlbGVjdGlvbihyb290KTtcblx0ICB0aGlzLnN0YXJ0VmFsdWUgPSB0aGlzLmdldFRleHQoKTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIEdldCBjdXJyZW50IHRleHQgb2YgaW5wdXQuXG5cdCAqXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5wcm90b3R5cGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiB0aGlzLnJvb3QudmFsdWUgfHwgdGhpcy5yb290W2dldFRleHRDb250ZW50QWNjZXNzb3IoKV07XG5cdH07XG5cdFxuXHQvKipcblx0ICogVGV4dCB0aGF0IGhhcyBjaGFuZ2VkIHNpbmNlIHRoZSBzdGFydCBvZiBjb21wb3NpdGlvbi5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0RmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24oKSB7XG5cdCAgdmFyIGVuZFZhbHVlID0gdGhpcy5nZXRUZXh0KCk7XG5cdCAgdmFyIHByZWZpeExlbmd0aCA9IHRoaXMuc3RhcnRTZWxlY3Rpb24uc3RhcnQ7XG5cdCAgdmFyIHN1ZmZpeExlbmd0aCA9IHRoaXMuc3RhcnRWYWx1ZS5sZW5ndGggLSB0aGlzLnN0YXJ0U2VsZWN0aW9uLmVuZDtcblx0XG5cdCAgcmV0dXJuIGVuZFZhbHVlLnN1YnN0cihcblx0ICAgIHByZWZpeExlbmd0aCxcblx0ICAgIGVuZFZhbHVlLmxlbmd0aCAtIHN1ZmZpeExlbmd0aCAtIHByZWZpeExlbmd0aFxuXHQgICk7XG5cdH07XG5cdFxuXHQvKipcblx0ICogVGhpcyBwbHVnaW4gY3JlYXRlcyBgb25Db21wb3NpdGlvblN0YXJ0YCwgYG9uQ29tcG9zaXRpb25VcGRhdGVgIGFuZFxuXHQgKiBgb25Db21wb3NpdGlvbkVuZGAgZXZlbnRzIG9uIGlucHV0cywgdGV4dGFyZWFzIGFuZCBjb250ZW50RWRpdGFibGVcblx0ICogbm9kZXMuXG5cdCAqL1xuXHR2YXIgQ29tcG9zaXRpb25FdmVudFBsdWdpbiA9IHtcblx0XG5cdCAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblx0XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuXHQgICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuXHQgICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cblx0ICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cblx0ICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuXHQgICAqL1xuXHQgIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKFxuXHQgICAgICB0b3BMZXZlbFR5cGUsXG5cdCAgICAgIHRvcExldmVsVGFyZ2V0LFxuXHQgICAgICB0b3BMZXZlbFRhcmdldElELFxuXHQgICAgICBuYXRpdmVFdmVudCkge1xuXHRcblx0ICAgIHZhciBldmVudFR5cGU7XG5cdCAgICB2YXIgZGF0YTtcblx0XG5cdCAgICBpZiAodXNlQ29tcG9zaXRpb25FdmVudCkge1xuXHQgICAgICBldmVudFR5cGUgPSBnZXRDb21wb3NpdGlvbkV2ZW50VHlwZSh0b3BMZXZlbFR5cGUpO1xuXHQgICAgfSBlbHNlIGlmICghY3VycmVudENvbXBvc2l0aW9uKSB7XG5cdCAgICAgIGlmIChpc0ZhbGxiYWNrU3RhcnQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcblx0ICAgICAgICBldmVudFR5cGUgPSBldmVudFR5cGVzLmNvbXBvc2l0aW9uU3RhcnQ7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSBpZiAoaXNGYWxsYmFja0VuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSkge1xuXHQgICAgICBldmVudFR5cGUgPSBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmICh1c2VGYWxsYmFja0RhdGEpIHtcblx0ICAgICAgLy8gVGhlIGN1cnJlbnQgY29tcG9zaXRpb24gaXMgc3RvcmVkIHN0YXRpY2FsbHkgYW5kIG11c3Qgbm90IGJlXG5cdCAgICAgIC8vIG92ZXJ3cml0dGVuIHdoaWxlIGNvbXBvc2l0aW9uIGNvbnRpbnVlcy5cblx0ICAgICAgaWYgKCFjdXJyZW50Q29tcG9zaXRpb24gJiYgZXZlbnRUeXBlID09PSBldmVudFR5cGVzLmNvbXBvc2l0aW9uU3RhcnQpIHtcblx0ICAgICAgICBjdXJyZW50Q29tcG9zaXRpb24gPSBuZXcgRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlKHRvcExldmVsVGFyZ2V0KTtcblx0ICAgICAgfSBlbHNlIGlmIChldmVudFR5cGUgPT09IGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQpIHtcblx0ICAgICAgICBpZiAoY3VycmVudENvbXBvc2l0aW9uKSB7XG5cdCAgICAgICAgICBkYXRhID0gY3VycmVudENvbXBvc2l0aW9uLmdldERhdGEoKTtcblx0ICAgICAgICAgIGN1cnJlbnRDb21wb3NpdGlvbiA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKGV2ZW50VHlwZSkge1xuXHQgICAgICB2YXIgZXZlbnQgPSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LmdldFBvb2xlZChcblx0ICAgICAgICBldmVudFR5cGUsXG5cdCAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcblx0ICAgICAgICBuYXRpdmVFdmVudFxuXHQgICAgICApO1xuXHQgICAgICBpZiAoZGF0YSkge1xuXHQgICAgICAgIC8vIEluamVjdCBkYXRhIGdlbmVyYXRlZCBmcm9tIGZhbGxiYWNrIHBhdGggaW50byB0aGUgc3ludGhldGljIGV2ZW50LlxuXHQgICAgICAgIC8vIFRoaXMgbWF0Y2hlcyB0aGUgcHJvcGVydHkgb2YgbmF0aXZlIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UuXG5cdCAgICAgICAgZXZlbnQuZGF0YSA9IGRhdGE7XG5cdCAgICAgIH1cblx0ICAgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcblx0ICAgICAgcmV0dXJuIGV2ZW50O1xuXHQgICAgfVxuXHQgIH1cblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gQ29tcG9zaXRpb25FdmVudFBsdWdpbjtcblxuXG4vKioqLyB9LFxuLyogMTE5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgRE9NQ2hpbGRyZW5PcGVyYXRpb25zXG5cdCAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgRGFuZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjApO1xuXHR2YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY3KTtcblx0XG5cdHZhciBnZXRUZXh0Q29udGVudEFjY2Vzc29yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NSk7XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0LyoqXG5cdCAqIFRoZSBET00gcHJvcGVydHkgdG8gdXNlIHdoZW4gc2V0dGluZyB0ZXh0IGNvbnRlbnQuXG5cdCAqXG5cdCAqIEB0eXBlIHtzdHJpbmd9XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHR2YXIgdGV4dENvbnRlbnRBY2Nlc3NvciA9IGdldFRleHRDb250ZW50QWNjZXNzb3IoKTtcblx0XG5cdC8qKlxuXHQgKiBJbnNlcnRzIGBjaGlsZE5vZGVgIGFzIGEgY2hpbGQgb2YgYHBhcmVudE5vZGVgIGF0IHRoZSBgaW5kZXhgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudE5vZGUgUGFyZW50IG5vZGUgaW4gd2hpY2ggdG8gaW5zZXJ0LlxuXHQgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNoaWxkTm9kZSBDaGlsZCBub2RlIHRvIGluc2VydC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IGF0IHdoaWNoIHRvIGluc2VydCB0aGUgY2hpbGQuXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0ZnVuY3Rpb24gaW5zZXJ0Q2hpbGRBdChwYXJlbnROb2RlLCBjaGlsZE5vZGUsIGluZGV4KSB7XG5cdCAgLy8gQnkgZXhwbG9pdGluZyBhcnJheXMgcmV0dXJuaW5nIGB1bmRlZmluZWRgIGZvciBhbiB1bmRlZmluZWQgaW5kZXgsIHdlIGNhblxuXHQgIC8vIHJlbHkgZXhjbHVzaXZlbHkgb24gYGluc2VydEJlZm9yZShub2RlLCBudWxsKWAgaW5zdGVhZCBvZiBhbHNvIHVzaW5nXG5cdCAgLy8gYGFwcGVuZENoaWxkKG5vZGUpYC4gSG93ZXZlciwgdXNpbmcgYHVuZGVmaW5lZGAgaXMgbm90IGFsbG93ZWQgYnkgYWxsXG5cdCAgLy8gYnJvd3NlcnMgc28gd2UgbXVzdCByZXBsYWNlIGl0IHdpdGggYG51bGxgLlxuXHQgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKFxuXHQgICAgY2hpbGROb2RlLFxuXHQgICAgcGFyZW50Tm9kZS5jaGlsZE5vZGVzW2luZGV4XSB8fCBudWxsXG5cdCAgKTtcblx0fVxuXHRcblx0dmFyIHVwZGF0ZVRleHRDb250ZW50O1xuXHRpZiAodGV4dENvbnRlbnRBY2Nlc3NvciA9PT0gJ3RleHRDb250ZW50Jykge1xuXHQgIC8qKlxuXHQgICAqIFNldHMgdGhlIHRleHQgY29udGVudCBvZiBgbm9kZWAgdG8gYHRleHRgLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlIE5vZGUgdG8gY2hhbmdlXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgTmV3IHRleHQgY29udGVudFxuXHQgICAqL1xuXHQgIHVwZGF0ZVRleHRDb250ZW50ID0gZnVuY3Rpb24obm9kZSwgdGV4dCkge1xuXHQgICAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG5cdCAgfTtcblx0fSBlbHNlIHtcblx0ICAvKipcblx0ICAgKiBTZXRzIHRoZSB0ZXh0IGNvbnRlbnQgb2YgYG5vZGVgIHRvIGB0ZXh0YC5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZSBOb2RlIHRvIGNoYW5nZVxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IE5ldyB0ZXh0IGNvbnRlbnRcblx0ICAgKi9cblx0ICB1cGRhdGVUZXh0Q29udGVudCA9IGZ1bmN0aW9uKG5vZGUsIHRleHQpIHtcblx0ICAgIC8vIEluIG9yZGVyIHRvIHByZXNlcnZlIG5ld2xpbmVzIGNvcnJlY3RseSwgd2UgY2FuJ3QgdXNlIC5pbm5lclRleHQgdG8gc2V0XG5cdCAgICAvLyB0aGUgY29udGVudHMgKHNlZSAjMTA4MCksIHNvIHdlIGVtcHR5IHRoZSBlbGVtZW50IHRoZW4gYXBwZW5kIGEgdGV4dCBub2RlXG5cdCAgICB3aGlsZSAobm9kZS5maXJzdENoaWxkKSB7XG5cdCAgICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5maXJzdENoaWxkKTtcblx0ICAgIH1cblx0ICAgIGlmICh0ZXh0KSB7XG5cdCAgICAgIHZhciBkb2MgPSBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG5cdCAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoZG9jLmNyZWF0ZVRleHROb2RlKHRleHQpKTtcblx0ICAgIH1cblx0ICB9O1xuXHR9XG5cdFxuXHQvKipcblx0ICogT3BlcmF0aW9ucyBmb3IgdXBkYXRpbmcgd2l0aCBET00gY2hpbGRyZW4uXG5cdCAqL1xuXHR2YXIgRE9NQ2hpbGRyZW5PcGVyYXRpb25zID0ge1xuXHRcblx0ICBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cDogRGFuZ2VyLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwLFxuXHRcblx0ICB1cGRhdGVUZXh0Q29udGVudDogdXBkYXRlVGV4dENvbnRlbnQsXG5cdFxuXHQgIC8qKlxuXHQgICAqIFVwZGF0ZXMgYSBjb21wb25lbnQncyBjaGlsZHJlbiBieSBwcm9jZXNzaW5nIGEgc2VyaWVzIG9mIHVwZGF0ZXMuIFRoZVxuXHQgICAqIHVwZGF0ZSBjb25maWd1cmF0aW9ucyBhcmUgZWFjaCBleHBlY3RlZCB0byBoYXZlIGEgYHBhcmVudE5vZGVgIHByb3BlcnR5LlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHthcnJheTxvYmplY3Q+fSB1cGRhdGVzIExpc3Qgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuXHQgICAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gbWFya3VwTGlzdCBMaXN0IG9mIG1hcmt1cCBzdHJpbmdzLlxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIHByb2Nlc3NVcGRhdGVzOiBmdW5jdGlvbih1cGRhdGVzLCBtYXJrdXBMaXN0KSB7XG5cdCAgICB2YXIgdXBkYXRlO1xuXHQgICAgLy8gTWFwcGluZyBmcm9tIHBhcmVudCBJRHMgdG8gaW5pdGlhbCBjaGlsZCBvcmRlcmluZ3MuXG5cdCAgICB2YXIgaW5pdGlhbENoaWxkcmVuID0gbnVsbDtcblx0ICAgIC8vIExpc3Qgb2YgY2hpbGRyZW4gdGhhdCB3aWxsIGJlIG1vdmVkIG9yIHJlbW92ZWQuXG5cdCAgICB2YXIgdXBkYXRlZENoaWxkcmVuID0gbnVsbDtcblx0XG5cdCAgICBmb3IgKHZhciBpID0gMDsgdXBkYXRlID0gdXBkYXRlc1tpXTsgaSsrKSB7XG5cdCAgICAgIGlmICh1cGRhdGUudHlwZSA9PT0gUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuTU9WRV9FWElTVElORyB8fFxuXHQgICAgICAgICAgdXBkYXRlLnR5cGUgPT09IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlJFTU9WRV9OT0RFKSB7XG5cdCAgICAgICAgdmFyIHVwZGF0ZWRJbmRleCA9IHVwZGF0ZS5mcm9tSW5kZXg7XG5cdCAgICAgICAgdmFyIHVwZGF0ZWRDaGlsZCA9IHVwZGF0ZS5wYXJlbnROb2RlLmNoaWxkTm9kZXNbdXBkYXRlZEluZGV4XTtcblx0ICAgICAgICB2YXIgcGFyZW50SUQgPSB1cGRhdGUucGFyZW50SUQ7XG5cdFxuXHQgICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgICAgICB1cGRhdGVkQ2hpbGQsXG5cdCAgICAgICAgICAncHJvY2Vzc1VwZGF0ZXMoKTogVW5hYmxlIHRvIGZpbmQgY2hpbGQgJXMgb2YgZWxlbWVudC4gVGhpcyAnICtcblx0ICAgICAgICAgICdwcm9iYWJseSBtZWFucyB0aGUgRE9NIHdhcyB1bmV4cGVjdGVkbHkgbXV0YXRlZCAoZS5nLiwgYnkgdGhlICcgK1xuXHQgICAgICAgICAgJ2Jyb3dzZXIpLCB1c3VhbGx5IGR1ZSB0byBmb3JnZXR0aW5nIGEgPHRib2R5PiB3aGVuIHVzaW5nIHRhYmxlcywgJyArXG5cdCAgICAgICAgICAnbmVzdGluZyB0YWdzIGxpa2UgPGZvcm0+LCA8cD4sIG9yIDxhPiwgb3IgdXNpbmcgbm9uLVNWRyBlbGVtZW50cyAnK1xuXHQgICAgICAgICAgJ2luIGFuIDxzdmc+IHBhcmVudC4gVHJ5IGluc3BlY3RpbmcgdGhlIGNoaWxkIG5vZGVzIG9mIHRoZSBlbGVtZW50ICcgK1xuXHQgICAgICAgICAgJ3dpdGggUmVhY3QgSUQgYCVzYC4nLFxuXHQgICAgICAgICAgdXBkYXRlZEluZGV4LFxuXHQgICAgICAgICAgcGFyZW50SURcblx0ICAgICAgICApIDogaW52YXJpYW50KHVwZGF0ZWRDaGlsZCkpO1xuXHRcblx0ICAgICAgICBpbml0aWFsQ2hpbGRyZW4gPSBpbml0aWFsQ2hpbGRyZW4gfHwge307XG5cdCAgICAgICAgaW5pdGlhbENoaWxkcmVuW3BhcmVudElEXSA9IGluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF0gfHwgW107XG5cdCAgICAgICAgaW5pdGlhbENoaWxkcmVuW3BhcmVudElEXVt1cGRhdGVkSW5kZXhdID0gdXBkYXRlZENoaWxkO1xuXHRcblx0ICAgICAgICB1cGRhdGVkQ2hpbGRyZW4gPSB1cGRhdGVkQ2hpbGRyZW4gfHwgW107XG5cdCAgICAgICAgdXBkYXRlZENoaWxkcmVuLnB1c2godXBkYXRlZENoaWxkKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIHZhciByZW5kZXJlZE1hcmt1cCA9IERhbmdlci5kYW5nZXJvdXNseVJlbmRlck1hcmt1cChtYXJrdXBMaXN0KTtcblx0XG5cdCAgICAvLyBSZW1vdmUgdXBkYXRlZCBjaGlsZHJlbiBmaXJzdCBzbyB0aGF0IGB0b0luZGV4YCBpcyBjb25zaXN0ZW50LlxuXHQgICAgaWYgKHVwZGF0ZWRDaGlsZHJlbikge1xuXHQgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHVwZGF0ZWRDaGlsZHJlbi5sZW5ndGg7IGorKykge1xuXHQgICAgICAgIHVwZGF0ZWRDaGlsZHJlbltqXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHVwZGF0ZWRDaGlsZHJlbltqXSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBmb3IgKHZhciBrID0gMDsgdXBkYXRlID0gdXBkYXRlc1trXTsgaysrKSB7XG5cdCAgICAgIHN3aXRjaCAodXBkYXRlLnR5cGUpIHtcblx0ICAgICAgICBjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLklOU0VSVF9NQVJLVVA6XG5cdCAgICAgICAgICBpbnNlcnRDaGlsZEF0KFxuXHQgICAgICAgICAgICB1cGRhdGUucGFyZW50Tm9kZSxcblx0ICAgICAgICAgICAgcmVuZGVyZWRNYXJrdXBbdXBkYXRlLm1hcmt1cEluZGV4XSxcblx0ICAgICAgICAgICAgdXBkYXRlLnRvSW5kZXhcblx0ICAgICAgICAgICk7XG5cdCAgICAgICAgICBicmVhaztcblx0ICAgICAgICBjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLk1PVkVfRVhJU1RJTkc6XG5cdCAgICAgICAgICBpbnNlcnRDaGlsZEF0KFxuXHQgICAgICAgICAgICB1cGRhdGUucGFyZW50Tm9kZSxcblx0ICAgICAgICAgICAgaW5pdGlhbENoaWxkcmVuW3VwZGF0ZS5wYXJlbnRJRF1bdXBkYXRlLmZyb21JbmRleF0sXG5cdCAgICAgICAgICAgIHVwZGF0ZS50b0luZGV4XG5cdCAgICAgICAgICApO1xuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5URVhUX0NPTlRFTlQ6XG5cdCAgICAgICAgICB1cGRhdGVUZXh0Q29udGVudChcblx0ICAgICAgICAgICAgdXBkYXRlLnBhcmVudE5vZGUsXG5cdCAgICAgICAgICAgIHVwZGF0ZS50ZXh0Q29udGVudFxuXHQgICAgICAgICAgKTtcblx0ICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREU6XG5cdCAgICAgICAgICAvLyBBbHJlYWR5IHJlbW92ZWQgYnkgdGhlIGZvci1sb29wIGFib3ZlLlxuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdFxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBET01DaGlsZHJlbk9wZXJhdGlvbnM7XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiAxMjAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBEYW5nZXJcblx0ICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcblx0ICovXG5cdFxuXHQvKmpzbGludCBldmlsOiB0cnVlLCBzdWI6IHRydWUgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdHZhciBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2Nyk7XG5cdHZhciBlbXB0eUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cdHZhciBnZXRNYXJrdXBXcmFwID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MCk7XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIE9QRU5fVEFHX05BTUVfRVhQID0gL14oPFteIFxcLz5dKykvO1xuXHR2YXIgUkVTVUxUX0lOREVYX0FUVFIgPSAnZGF0YS1kYW5nZXItaW5kZXgnO1xuXHRcblx0LyoqXG5cdCAqIEV4dHJhY3RzIHRoZSBgbm9kZU5hbWVgIGZyb20gYSBzdHJpbmcgb2YgbWFya3VwLlxuXHQgKlxuXHQgKiBOT1RFOiBFeHRyYWN0aW5nIHRoZSBgbm9kZU5hbWVgIGRvZXMgbm90IHJlcXVpcmUgYSByZWd1bGFyIGV4cHJlc3Npb24gbWF0Y2hcblx0ICogYmVjYXVzZSB3ZSBtYWtlIGFzc3VtcHRpb25zIGFib3V0IFJlYWN0LWdlbmVyYXRlZCBtYXJrdXAgKGkuZS4gdGhlcmUgYXJlIG5vXG5cdCAqIHNwYWNlcyBzdXJyb3VuZGluZyB0aGUgb3BlbmluZyB0YWcgYW5kIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBhdHRyaWJ1dGUpLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIFN0cmluZyBvZiBtYXJrdXAuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gTm9kZSBuYW1lIG9mIHRoZSBzdXBwbGllZCBtYXJrdXAuXG5cdCAqIEBzZWUgaHR0cDovL2pzcGVyZi5jb20vZXh0cmFjdC1ub2RlbmFtZVxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0Tm9kZU5hbWUobWFya3VwKSB7XG5cdCAgcmV0dXJuIG1hcmt1cC5zdWJzdHJpbmcoMSwgbWFya3VwLmluZGV4T2YoJyAnKSk7XG5cdH1cblx0XG5cdHZhciBEYW5nZXIgPSB7XG5cdFxuXHQgIC8qKlxuXHQgICAqIFJlbmRlcnMgbWFya3VwIGludG8gYW4gYXJyYXkgb2Ygbm9kZXMuIFRoZSBtYXJrdXAgaXMgZXhwZWN0ZWQgdG8gcmVuZGVyXG5cdCAgICogaW50byBhIGxpc3Qgb2Ygcm9vdCBub2Rlcy4gQWxzbywgdGhlIGxlbmd0aCBvZiBgcmVzdWx0TGlzdGAgYW5kXG5cdCAgICogYG1hcmt1cExpc3RgIHNob3VsZCBiZSB0aGUgc2FtZS5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gbWFya3VwTGlzdCBMaXN0IG9mIG1hcmt1cCBzdHJpbmdzIHRvIHJlbmRlci5cblx0ICAgKiBAcmV0dXJuIHthcnJheTxET01FbGVtZW50Pn0gTGlzdCBvZiByZW5kZXJlZCBub2Rlcy5cblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKi9cblx0ICBkYW5nZXJvdXNseVJlbmRlck1hcmt1cDogZnVuY3Rpb24obWFya3VwTGlzdCkge1xuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NLFxuXHQgICAgICAnZGFuZ2Vyb3VzbHlSZW5kZXJNYXJrdXAoLi4uKTogQ2Fubm90IHJlbmRlciBtYXJrdXAgaW4gYSB3b3JrZXIgJyArXG5cdCAgICAgICd0aHJlYWQuIE1ha2Ugc3VyZSBgd2luZG93YCBhbmQgYGRvY3VtZW50YCBhcmUgYXZhaWxhYmxlIGdsb2JhbGx5ICcgK1xuXHQgICAgICAnYmVmb3JlIHJlcXVpcmluZyBSZWFjdCB3aGVuIHVuaXQgdGVzdGluZyBvciB1c2UgJyArXG5cdCAgICAgICdSZWFjdC5yZW5kZXJUb1N0cmluZyBmb3Igc2VydmVyIHJlbmRlcmluZy4nXG5cdCAgICApIDogaW52YXJpYW50KEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkpO1xuXHQgICAgdmFyIG5vZGVOYW1lO1xuXHQgICAgdmFyIG1hcmt1cEJ5Tm9kZU5hbWUgPSB7fTtcblx0ICAgIC8vIEdyb3VwIG1hcmt1cCBieSBgbm9kZU5hbWVgIGlmIGEgd3JhcCBpcyBuZWNlc3NhcnksIGVsc2UgYnkgJyonLlxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXJrdXBMaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgICAgbWFya3VwTGlzdFtpXSxcblx0ICAgICAgICAnZGFuZ2Vyb3VzbHlSZW5kZXJNYXJrdXAoLi4uKTogTWlzc2luZyBtYXJrdXAuJ1xuXHQgICAgICApIDogaW52YXJpYW50KG1hcmt1cExpc3RbaV0pKTtcblx0ICAgICAgbm9kZU5hbWUgPSBnZXROb2RlTmFtZShtYXJrdXBMaXN0W2ldKTtcblx0ICAgICAgbm9kZU5hbWUgPSBnZXRNYXJrdXBXcmFwKG5vZGVOYW1lKSA/IG5vZGVOYW1lIDogJyonO1xuXHQgICAgICBtYXJrdXBCeU5vZGVOYW1lW25vZGVOYW1lXSA9IG1hcmt1cEJ5Tm9kZU5hbWVbbm9kZU5hbWVdIHx8IFtdO1xuXHQgICAgICBtYXJrdXBCeU5vZGVOYW1lW25vZGVOYW1lXVtpXSA9IG1hcmt1cExpc3RbaV07XG5cdCAgICB9XG5cdCAgICB2YXIgcmVzdWx0TGlzdCA9IFtdO1xuXHQgICAgdmFyIHJlc3VsdExpc3RBc3NpZ25tZW50Q291bnQgPSAwO1xuXHQgICAgZm9yIChub2RlTmFtZSBpbiBtYXJrdXBCeU5vZGVOYW1lKSB7XG5cdCAgICAgIGlmICghbWFya3VwQnlOb2RlTmFtZS5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcblx0ICAgICAgICBjb250aW51ZTtcblx0ICAgICAgfVxuXHQgICAgICB2YXIgbWFya3VwTGlzdEJ5Tm9kZU5hbWUgPSBtYXJrdXBCeU5vZGVOYW1lW25vZGVOYW1lXTtcblx0XG5cdCAgICAgIC8vIFRoaXMgZm9yLWluIGxvb3Agc2tpcHMgdGhlIGhvbGVzIG9mIHRoZSBzcGFyc2UgYXJyYXkuIFRoZSBvcmRlciBvZlxuXHQgICAgICAvLyBpdGVyYXRpb24gc2hvdWxkIGZvbGxvdyB0aGUgb3JkZXIgb2YgYXNzaWdubWVudCwgd2hpY2ggaGFwcGVucyB0byBtYXRjaFxuXHQgICAgICAvLyBudW1lcmljYWwgaW5kZXggb3JkZXIsIGJ1dCB3ZSBkb24ndCByZWx5IG9uIHRoYXQuXG5cdCAgICAgIGZvciAodmFyIHJlc3VsdEluZGV4IGluIG1hcmt1cExpc3RCeU5vZGVOYW1lKSB7XG5cdCAgICAgICAgaWYgKG1hcmt1cExpc3RCeU5vZGVOYW1lLmhhc093blByb3BlcnR5KHJlc3VsdEluZGV4KSkge1xuXHQgICAgICAgICAgdmFyIG1hcmt1cCA9IG1hcmt1cExpc3RCeU5vZGVOYW1lW3Jlc3VsdEluZGV4XTtcblx0XG5cdCAgICAgICAgICAvLyBQdXNoIHRoZSByZXF1ZXN0ZWQgbWFya3VwIHdpdGggYW4gYWRkaXRpb25hbCBSRVNVTFRfSU5ERVhfQVRUUlxuXHQgICAgICAgICAgLy8gYXR0cmlidXRlLiAgSWYgdGhlIG1hcmt1cCBkb2VzIG5vdCBzdGFydCB3aXRoIGEgPCBjaGFyYWN0ZXIsIGl0XG5cdCAgICAgICAgICAvLyB3aWxsIGJlIGRpc2NhcmRlZCBiZWxvdyAod2l0aCBhbiBhcHByb3ByaWF0ZSBjb25zb2xlLmVycm9yKS5cblx0ICAgICAgICAgIG1hcmt1cExpc3RCeU5vZGVOYW1lW3Jlc3VsdEluZGV4XSA9IG1hcmt1cC5yZXBsYWNlKFxuXHQgICAgICAgICAgICBPUEVOX1RBR19OQU1FX0VYUCxcblx0ICAgICAgICAgICAgLy8gVGhpcyBpbmRleCB3aWxsIGJlIHBhcnNlZCBiYWNrIG91dCBiZWxvdy5cblx0ICAgICAgICAgICAgJyQxICcgKyBSRVNVTFRfSU5ERVhfQVRUUiArICc9XCInICsgcmVzdWx0SW5kZXggKyAnXCIgJ1xuXHQgICAgICAgICAgKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIC8vIFJlbmRlciBlYWNoIGdyb3VwIG9mIG1hcmt1cCB3aXRoIHNpbWlsYXIgd3JhcHBpbmcgYG5vZGVOYW1lYC5cblx0ICAgICAgdmFyIHJlbmRlck5vZGVzID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwKFxuXHQgICAgICAgIG1hcmt1cExpc3RCeU5vZGVOYW1lLmpvaW4oJycpLFxuXHQgICAgICAgIGVtcHR5RnVuY3Rpb24gLy8gRG8gbm90aGluZyBzcGVjaWFsIHdpdGggPHNjcmlwdD4gdGFncy5cblx0ICAgICAgKTtcblx0XG5cdCAgICAgIGZvciAoaSA9IDA7IGkgPCByZW5kZXJOb2Rlcy5sZW5ndGg7ICsraSkge1xuXHQgICAgICAgIHZhciByZW5kZXJOb2RlID0gcmVuZGVyTm9kZXNbaV07XG5cdCAgICAgICAgaWYgKHJlbmRlck5vZGUuaGFzQXR0cmlidXRlICYmXG5cdCAgICAgICAgICAgIHJlbmRlck5vZGUuaGFzQXR0cmlidXRlKFJFU1VMVF9JTkRFWF9BVFRSKSkge1xuXHRcblx0ICAgICAgICAgIHJlc3VsdEluZGV4ID0gK3JlbmRlck5vZGUuZ2V0QXR0cmlidXRlKFJFU1VMVF9JTkRFWF9BVFRSKTtcblx0ICAgICAgICAgIHJlbmRlck5vZGUucmVtb3ZlQXR0cmlidXRlKFJFU1VMVF9JTkRFWF9BVFRSKTtcblx0XG5cdCAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICAgICAgICAhcmVzdWx0TGlzdC5oYXNPd25Qcm9wZXJ0eShyZXN1bHRJbmRleCksXG5cdCAgICAgICAgICAgICdEYW5nZXI6IEFzc2lnbmluZyB0byBhbiBhbHJlYWR5LW9jY3VwaWVkIHJlc3VsdCBpbmRleC4nXG5cdCAgICAgICAgICApIDogaW52YXJpYW50KCFyZXN1bHRMaXN0Lmhhc093blByb3BlcnR5KHJlc3VsdEluZGV4KSkpO1xuXHRcblx0ICAgICAgICAgIHJlc3VsdExpc3RbcmVzdWx0SW5kZXhdID0gcmVuZGVyTm9kZTtcblx0XG5cdCAgICAgICAgICAvLyBUaGlzIHNob3VsZCBtYXRjaCByZXN1bHRMaXN0Lmxlbmd0aCBhbmQgbWFya3VwTGlzdC5sZW5ndGggd2hlblxuXHQgICAgICAgICAgLy8gd2UncmUgZG9uZS5cblx0ICAgICAgICAgIHJlc3VsdExpc3RBc3NpZ25tZW50Q291bnQgKz0gMTtcblx0XG5cdCAgICAgICAgfSBlbHNlIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG5cdCAgICAgICAgICAgIFwiRGFuZ2VyOiBEaXNjYXJkaW5nIHVuZXhwZWN0ZWQgbm9kZTpcIixcblx0ICAgICAgICAgICAgcmVuZGVyTm9kZVxuXHQgICAgICAgICAgKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICAvLyBBbHRob3VnaCByZXN1bHRMaXN0IHdhcyBwb3B1bGF0ZWQgb3V0IG9mIG9yZGVyLCBpdCBzaG91bGQgbm93IGJlIGEgZGVuc2Vcblx0ICAgIC8vIGFycmF5LlxuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgcmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCA9PT0gcmVzdWx0TGlzdC5sZW5ndGgsXG5cdCAgICAgICdEYW5nZXI6IERpZCBub3QgYXNzaWduIHRvIGV2ZXJ5IGluZGV4IG9mIHJlc3VsdExpc3QuJ1xuXHQgICAgKSA6IGludmFyaWFudChyZXN1bHRMaXN0QXNzaWdubWVudENvdW50ID09PSByZXN1bHRMaXN0Lmxlbmd0aCkpO1xuXHRcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgIHJlc3VsdExpc3QubGVuZ3RoID09PSBtYXJrdXBMaXN0Lmxlbmd0aCxcblx0ICAgICAgJ0RhbmdlcjogRXhwZWN0ZWQgbWFya3VwIHRvIHJlbmRlciAlcyBub2RlcywgYnV0IHJlbmRlcmVkICVzLicsXG5cdCAgICAgIG1hcmt1cExpc3QubGVuZ3RoLFxuXHQgICAgICByZXN1bHRMaXN0Lmxlbmd0aFxuXHQgICAgKSA6IGludmFyaWFudChyZXN1bHRMaXN0Lmxlbmd0aCA9PT0gbWFya3VwTGlzdC5sZW5ndGgpKTtcblx0XG5cdCAgICByZXR1cm4gcmVzdWx0TGlzdDtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBSZXBsYWNlcyBhIG5vZGUgd2l0aCBhIHN0cmluZyBvZiBtYXJrdXAgYXQgaXRzIGN1cnJlbnQgcG9zaXRpb24gd2l0aGluIGl0c1xuXHQgICAqIHBhcmVudC4gVGhlIG1hcmt1cCBtdXN0IHJlbmRlciBpbnRvIGEgc2luZ2xlIHJvb3Qgbm9kZS5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gb2xkQ2hpbGQgQ2hpbGQgbm9kZSB0byByZXBsYWNlLlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHRvIHJlbmRlciBpbiBwbGFjZSBvZiB0aGUgY2hpbGQgbm9kZS5cblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKi9cblx0ICBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cDogZnVuY3Rpb24ob2xkQ2hpbGQsIG1hcmt1cCkge1xuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NLFxuXHQgICAgICAnZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAoLi4uKTogQ2Fubm90IHJlbmRlciBtYXJrdXAgaW4gYSAnICtcblx0ICAgICAgJ3dvcmtlciB0aHJlYWQuIE1ha2Ugc3VyZSBgd2luZG93YCBhbmQgYGRvY3VtZW50YCBhcmUgYXZhaWxhYmxlICcgK1xuXHQgICAgICAnZ2xvYmFsbHkgYmVmb3JlIHJlcXVpcmluZyBSZWFjdCB3aGVuIHVuaXQgdGVzdGluZyBvciB1c2UgJyArXG5cdCAgICAgICdSZWFjdC5yZW5kZXJUb1N0cmluZyBmb3Igc2VydmVyIHJlbmRlcmluZy4nXG5cdCAgICApIDogaW52YXJpYW50KEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkpO1xuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChtYXJrdXAsICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBNaXNzaW5nIG1hcmt1cC4nKSA6IGludmFyaWFudChtYXJrdXApKTtcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgIG9sZENoaWxkLnRhZ05hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2h0bWwnLFxuXHQgICAgICAnZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAoLi4uKTogQ2Fubm90IHJlcGxhY2UgbWFya3VwIG9mIHRoZSAnICtcblx0ICAgICAgJzxodG1sPiBub2RlLiBUaGlzIGlzIGJlY2F1c2UgYnJvd3NlciBxdWlya3MgbWFrZSB0aGlzIHVucmVsaWFibGUgJyArXG5cdCAgICAgICdhbmQvb3Igc2xvdy4gSWYgeW91IHdhbnQgdG8gcmVuZGVyIHRvIHRoZSByb290IHlvdSBtdXN0IHVzZSAnICtcblx0ICAgICAgJ3NlcnZlciByZW5kZXJpbmcuIFNlZSByZW5kZXJDb21wb25lbnRUb1N0cmluZygpLidcblx0ICAgICkgOiBpbnZhcmlhbnQob2xkQ2hpbGQudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnaHRtbCcpKTtcblx0XG5cdCAgICB2YXIgbmV3Q2hpbGQgPSBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAobWFya3VwLCBlbXB0eUZ1bmN0aW9uKVswXTtcblx0ICAgIG9sZENoaWxkLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5ld0NoaWxkLCBvbGRDaGlsZCk7XG5cdCAgfVxuXHRcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gRGFuZ2VyO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogMTIxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQgdmFyIGtleU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cdFxuXHQvKipcblx0ICogTW9kdWxlIHRoYXQgaXMgaW5qZWN0YWJsZSBpbnRvIGBFdmVudFBsdWdpbkh1YmAsIHRoYXQgc3BlY2lmaWVzIGFcblx0ICogZGV0ZXJtaW5pc3RpYyBvcmRlcmluZyBvZiBgRXZlbnRQbHVnaW5gcy4gQSBjb252ZW5pZW50IHdheSB0byByZWFzb24gYWJvdXRcblx0ICogcGx1Z2lucywgd2l0aG91dCBoYXZpbmcgdG8gcGFja2FnZSBldmVyeSBvbmUgb2YgdGhlbS4gVGhpcyBpcyBiZXR0ZXIgdGhhblxuXHQgKiBoYXZpbmcgcGx1Z2lucyBiZSBvcmRlcmVkIGluIHRoZSBzYW1lIG9yZGVyIHRoYXQgdGhleSBhcmUgaW5qZWN0ZWQgYmVjYXVzZVxuXHQgKiB0aGF0IG9yZGVyaW5nIHdvdWxkIGJlIGluZmx1ZW5jZWQgYnkgdGhlIHBhY2thZ2luZyBvcmRlci5cblx0ICogYFJlc3BvbmRlckV2ZW50UGx1Z2luYCBtdXN0IG9jY3VyIGJlZm9yZSBgU2ltcGxlRXZlbnRQbHVnaW5gIHNvIHRoYXRcblx0ICogcHJldmVudGluZyBkZWZhdWx0IG9uIGV2ZW50cyBpcyBjb252ZW5pZW50IGluIGBTaW1wbGVFdmVudFBsdWdpbmAgaGFuZGxlcnMuXG5cdCAqL1xuXHR2YXIgRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIgPSBbXG5cdCAga2V5T2Yoe1Jlc3BvbmRlckV2ZW50UGx1Z2luOiBudWxsfSksXG5cdCAga2V5T2Yoe1NpbXBsZUV2ZW50UGx1Z2luOiBudWxsfSksXG5cdCAga2V5T2Yoe1RhcEV2ZW50UGx1Z2luOiBudWxsfSksXG5cdCAga2V5T2Yoe0VudGVyTGVhdmVFdmVudFBsdWdpbjogbnVsbH0pLFxuXHQgIGtleU9mKHtDaGFuZ2VFdmVudFBsdWdpbjogbnVsbH0pLFxuXHQgIGtleU9mKHtTZWxlY3RFdmVudFBsdWdpbjogbnVsbH0pLFxuXHQgIGtleU9mKHtDb21wb3NpdGlvbkV2ZW50UGx1Z2luOiBudWxsfSksXG5cdCAga2V5T2Yoe0JlZm9yZUlucHV0RXZlbnRQbHVnaW46IG51bGx9KSxcblx0ICBrZXlPZih7QW5hbHl0aWNzRXZlbnRQbHVnaW46IG51bGx9KSxcblx0ICBrZXlPZih7TW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpbjogbnVsbH0pXG5cdF07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IERlZmF1bHRFdmVudFBsdWdpbk9yZGVyO1xuXG5cbi8qKiovIH0sXG4vKiAxMjIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luXG5cdCAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgRXZlbnRDb25zdGFudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgRXZlbnRQcm9wYWdhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXHR2YXIgU3ludGhldGljTW91c2VFdmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xuXHRcblx0dmFyIFJlYWN0TW91bnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHR2YXIga2V5T2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblx0XG5cdHZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblx0dmFyIGdldEZpcnN0UmVhY3RET00gPSBSZWFjdE1vdW50LmdldEZpcnN0UmVhY3RET007XG5cdFxuXHR2YXIgZXZlbnRUeXBlcyA9IHtcblx0ICBtb3VzZUVudGVyOiB7XG5cdCAgICByZWdpc3RyYXRpb25OYW1lOiBrZXlPZih7b25Nb3VzZUVudGVyOiBudWxsfSksXG5cdCAgICBkZXBlbmRlbmNpZXM6IFtcblx0ICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCxcblx0ICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXJcblx0ICAgIF1cblx0ICB9LFxuXHQgIG1vdXNlTGVhdmU6IHtcblx0ICAgIHJlZ2lzdHJhdGlvbk5hbWU6IGtleU9mKHtvbk1vdXNlTGVhdmU6IG51bGx9KSxcblx0ICAgIGRlcGVuZGVuY2llczogW1xuXHQgICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0LFxuXHQgICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3ZlclxuXHQgICAgXVxuXHQgIH1cblx0fTtcblx0XG5cdHZhciBleHRyYWN0ZWRFdmVudHMgPSBbbnVsbCwgbnVsbF07XG5cdFxuXHR2YXIgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luID0ge1xuXHRcblx0ICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXHRcblx0ICAvKipcblx0ICAgKiBGb3IgYWxtb3N0IGV2ZXJ5IGludGVyYWN0aW9uIHdlIGNhcmUgYWJvdXQsIHRoZXJlIHdpbGwgYmUgYm90aCBhIHRvcC1sZXZlbFxuXHQgICAqIGBtb3VzZW92ZXJgIGFuZCBgbW91c2VvdXRgIGV2ZW50IHRoYXQgb2NjdXJzLiBPbmx5IHVzZSBgbW91c2VvdXRgIHNvIHRoYXRcblx0ICAgKiB3ZSBkbyBub3QgZXh0cmFjdCBkdXBsaWNhdGUgZXZlbnRzLiBIb3dldmVyLCBtb3ZpbmcgdGhlIG1vdXNlIGludG8gdGhlXG5cdCAgICogYnJvd3NlciBmcm9tIG91dHNpZGUgd2lsbCBub3QgZmlyZSBhIGBtb3VzZW91dGAgZXZlbnQuIEluIHRoaXMgY2FzZSwgd2UgdXNlXG5cdCAgICogdGhlIGBtb3VzZW92ZXJgIHRvcC1sZXZlbCBldmVudC5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cblx0ICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cblx0ICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG5cdCAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG5cdCAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cblx0ICAgKi9cblx0ICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcblx0ICAgICAgdG9wTGV2ZWxUeXBlLFxuXHQgICAgICB0b3BMZXZlbFRhcmdldCxcblx0ICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcblx0ICAgICAgbmF0aXZlRXZlbnQpIHtcblx0ICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdmVyICYmXG5cdCAgICAgICAgKG5hdGl2ZUV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbmF0aXZlRXZlbnQuZnJvbUVsZW1lbnQpKSB7XG5cdCAgICAgIHJldHVybiBudWxsO1xuXHQgICAgfVxuXHQgICAgaWYgKHRvcExldmVsVHlwZSAhPT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCAmJlxuXHQgICAgICAgIHRvcExldmVsVHlwZSAhPT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXIpIHtcblx0ICAgICAgLy8gTXVzdCBub3QgYmUgYSBtb3VzZSBpbiBvciBtb3VzZSBvdXQgLSBpZ25vcmluZy5cblx0ICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIHdpbjtcblx0ICAgIGlmICh0b3BMZXZlbFRhcmdldC53aW5kb3cgPT09IHRvcExldmVsVGFyZ2V0KSB7XG5cdCAgICAgIC8vIGB0b3BMZXZlbFRhcmdldGAgaXMgcHJvYmFibHkgYSB3aW5kb3cgb2JqZWN0LlxuXHQgICAgICB3aW4gPSB0b3BMZXZlbFRhcmdldDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IGBvd25lckRvY3VtZW50YCBpcyBzb21ldGltZXMgdW5kZWZpbmVkIGluIElFOC5cblx0ICAgICAgdmFyIGRvYyA9IHRvcExldmVsVGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG5cdCAgICAgIGlmIChkb2MpIHtcblx0ICAgICAgICB3aW4gPSBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdztcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB3aW4gPSB3aW5kb3c7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICB2YXIgZnJvbSwgdG87XG5cdCAgICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0KSB7XG5cdCAgICAgIGZyb20gPSB0b3BMZXZlbFRhcmdldDtcblx0ICAgICAgdG8gPVxuXHQgICAgICAgIGdldEZpcnN0UmVhY3RET00obmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC50b0VsZW1lbnQpIHx8XG5cdCAgICAgICAgd2luO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZnJvbSA9IHdpbjtcblx0ICAgICAgdG8gPSB0b3BMZXZlbFRhcmdldDtcblx0ICAgIH1cblx0XG5cdCAgICBpZiAoZnJvbSA9PT0gdG8pIHtcblx0ICAgICAgLy8gTm90aGluZyBwZXJ0YWlucyB0byBvdXIgbWFuYWdlZCBjb21wb25lbnRzLlxuXHQgICAgICByZXR1cm4gbnVsbDtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgZnJvbUlEID0gZnJvbSA/IFJlYWN0TW91bnQuZ2V0SUQoZnJvbSkgOiAnJztcblx0ICAgIHZhciB0b0lEID0gdG8gPyBSZWFjdE1vdW50LmdldElEKHRvKSA6ICcnO1xuXHRcblx0ICAgIHZhciBsZWF2ZSA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZ2V0UG9vbGVkKFxuXHQgICAgICBldmVudFR5cGVzLm1vdXNlTGVhdmUsXG5cdCAgICAgIGZyb21JRCxcblx0ICAgICAgbmF0aXZlRXZlbnRcblx0ICAgICk7XG5cdCAgICBsZWF2ZS50eXBlID0gJ21vdXNlbGVhdmUnO1xuXHQgICAgbGVhdmUudGFyZ2V0ID0gZnJvbTtcblx0ICAgIGxlYXZlLnJlbGF0ZWRUYXJnZXQgPSB0bztcblx0XG5cdCAgICB2YXIgZW50ZXIgPSBTeW50aGV0aWNNb3VzZUV2ZW50LmdldFBvb2xlZChcblx0ICAgICAgZXZlbnRUeXBlcy5tb3VzZUVudGVyLFxuXHQgICAgICB0b0lELFxuXHQgICAgICBuYXRpdmVFdmVudFxuXHQgICAgKTtcblx0ICAgIGVudGVyLnR5cGUgPSAnbW91c2VlbnRlcic7XG5cdCAgICBlbnRlci50YXJnZXQgPSB0bztcblx0ICAgIGVudGVyLnJlbGF0ZWRUYXJnZXQgPSBmcm9tO1xuXHRcblx0ICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzKGxlYXZlLCBlbnRlciwgZnJvbUlELCB0b0lEKTtcblx0XG5cdCAgICBleHRyYWN0ZWRFdmVudHNbMF0gPSBsZWF2ZTtcblx0ICAgIGV4dHJhY3RlZEV2ZW50c1sxXSA9IGVudGVyO1xuXHRcblx0ICAgIHJldHVybiBleHRyYWN0ZWRFdmVudHM7XG5cdCAgfVxuXHRcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luO1xuXG5cbi8qKiovIH0sXG4vKiAxMjMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQgRmFjZWJvb2ssIEluYy5cblx0ICpcblx0ICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcblx0ICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuXHQgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblx0ICpcblx0ICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cdCAqXG5cdCAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcblx0ICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuXHQgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cblx0ICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuXHQgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIEV2ZW50TGlzdGVuZXJcblx0ICogQHR5cGVjaGVja3Ncblx0ICovXG5cdFxuXHR2YXIgZW1wdHlGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXHRcblx0LyoqXG5cdCAqIFVwc3RyZWFtIHZlcnNpb24gb2YgZXZlbnQgbGlzdGVuZXIuIERvZXMgbm90IHRha2UgaW50byBhY2NvdW50IHNwZWNpZmljXG5cdCAqIG5hdHVyZSBvZiBwbGF0Zm9ybS5cblx0ICovXG5cdHZhciBFdmVudExpc3RlbmVyID0ge1xuXHQgIC8qKlxuXHQgICAqIExpc3RlbiB0byBET00gZXZlbnRzIGR1cmluZyB0aGUgYnViYmxlIHBoYXNlLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdGFyZ2V0IERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGxpc3RlbmVyIG9uLlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgRXZlbnQgdHlwZSwgZS5nLiAnY2xpY2snIG9yICdtb3VzZW92ZXInLlxuXHQgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuXHQgICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggYSBgcmVtb3ZlYCBtZXRob2QuXG5cdCAgICovXG5cdCAgbGlzdGVuOiBmdW5jdGlvbih0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcblx0ICAgIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuXHQgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cdCAgICB9IGVsc2UgaWYgKHRhcmdldC5hdHRhY2hFdmVudCkge1xuXHQgICAgICB0YXJnZXQuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICB0YXJnZXQuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuXHQgICAgICAgIH1cblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2UuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0YXJnZXQgRE9NIGVsZW1lbnQgdG8gcmVnaXN0ZXIgbGlzdGVuZXIgb24uXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG5cdCAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG5cdCAgICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCBhIGByZW1vdmVgIG1ldGhvZC5cblx0ICAgKi9cblx0ICBjYXB0dXJlOiBmdW5jdGlvbih0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcblx0ICAgIGlmICghdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0ICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuXHQgICAgICAgIGNvbnNvbGUuZXJyb3IoXG5cdCAgICAgICAgICAnQXR0ZW1wdGVkIHRvIGxpc3RlbiB0byBldmVudHMgZHVyaW5nIHRoZSBjYXB0dXJlIHBoYXNlIG9uIGEgJyArXG5cdCAgICAgICAgICAnYnJvd3NlciB0aGF0IGRvZXMgbm90IHN1cHBvcnQgdGhlIGNhcHR1cmUgcGhhc2UuIFlvdXIgYXBwbGljYXRpb24gJyArXG5cdCAgICAgICAgICAnd2lsbCBub3QgcmVjZWl2ZSBzb21lIGV2ZW50cy4nXG5cdCAgICAgICAgKTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIHJlbW92ZTogZW1wdHlGdW5jdGlvblxuXHQgICAgICB9O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgdHJ1ZSk7XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIHRydWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICByZWdpc3RlckRlZmF1bHQ6IGZ1bmN0aW9uKCkge31cblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gRXZlbnRMaXN0ZW5lcjtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDEyNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBIVE1MRE9NUHJvcGVydHlDb25maWdcblx0ICovXG5cdFxuXHQvKmpzbGludCBiaXR3aXNlOiB0cnVlKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIERPTVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cdHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFxuXHR2YXIgTVVTVF9VU0VfQVRUUklCVVRFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLk1VU1RfVVNFX0FUVFJJQlVURTtcblx0dmFyIE1VU1RfVVNFX1BST1BFUlRZID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLk1VU1RfVVNFX1BST1BFUlRZO1xuXHR2YXIgSEFTX0JPT0xFQU5fVkFMVUUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX0JPT0xFQU5fVkFMVUU7XG5cdHZhciBIQVNfU0lERV9FRkZFQ1RTID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19TSURFX0VGRkVDVFM7XG5cdHZhciBIQVNfTlVNRVJJQ19WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfTlVNRVJJQ19WQUxVRTtcblx0dmFyIEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFID1cblx0ICBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUU7XG5cdHZhciBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFID1cblx0ICBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRTtcblx0XG5cdHZhciBoYXNTVkc7XG5cdGlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcblx0ICB2YXIgaW1wbGVtZW50YXRpb24gPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbjtcblx0ICBoYXNTVkcgPSAoXG5cdCAgICBpbXBsZW1lbnRhdGlvbiAmJlxuXHQgICAgaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSAmJlxuXHQgICAgaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShcblx0ICAgICAgJ2h0dHA6Ly93d3cudzMub3JnL1RSL1NWRzExL2ZlYXR1cmUjQmFzaWNTdHJ1Y3R1cmUnLFxuXHQgICAgICAnMS4xJ1xuXHQgICAgKVxuXHQgICk7XG5cdH1cblx0XG5cdFxuXHR2YXIgSFRNTERPTVByb3BlcnR5Q29uZmlnID0ge1xuXHQgIGlzQ3VzdG9tQXR0cmlidXRlOiBSZWdFeHAucHJvdG90eXBlLnRlc3QuYmluZChcblx0ICAgIC9eKGRhdGF8YXJpYSktW2Etel9dW2EtelxcZF8uXFwtXSokL1xuXHQgICksXG5cdCAgUHJvcGVydGllczoge1xuXHQgICAgLyoqXG5cdCAgICAgKiBTdGFuZGFyZCBQcm9wZXJ0aWVzXG5cdCAgICAgKi9cblx0ICAgIGFjY2VwdDogbnVsbCxcblx0ICAgIGFjY2VwdENoYXJzZXQ6IG51bGwsXG5cdCAgICBhY2Nlc3NLZXk6IG51bGwsXG5cdCAgICBhY3Rpb246IG51bGwsXG5cdCAgICBhbGxvd0Z1bGxTY3JlZW46IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuXHQgICAgYWxsb3dUcmFuc3BhcmVuY3k6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIGFsdDogbnVsbCxcblx0ICAgIGFzeW5jOiBIQVNfQk9PTEVBTl9WQUxVRSxcblx0ICAgIGF1dG9Db21wbGV0ZTogbnVsbCxcblx0ICAgIC8vIGF1dG9Gb2N1cyBpcyBwb2x5ZmlsbGVkL25vcm1hbGl6ZWQgYnkgQXV0b0ZvY3VzTWl4aW5cblx0ICAgIC8vIGF1dG9Gb2N1czogSEFTX0JPT0xFQU5fVkFMVUUsXG5cdCAgICBhdXRvUGxheTogSEFTX0JPT0xFQU5fVkFMVUUsXG5cdCAgICBjZWxsUGFkZGluZzogbnVsbCxcblx0ICAgIGNlbGxTcGFjaW5nOiBudWxsLFxuXHQgICAgY2hhclNldDogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHQgICAgY2hlY2tlZDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcblx0ICAgIGNsYXNzSUQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIC8vIFRvIHNldCBjbGFzc05hbWUgb24gU1ZHIGVsZW1lbnRzLCBpdCdzIG5lY2Vzc2FyeSB0byB1c2UgLnNldEF0dHJpYnV0ZTtcblx0ICAgIC8vIHRoaXMgd29ya3Mgb24gSFRNTCBlbGVtZW50cyB0b28gaW4gYWxsIGJyb3dzZXJzIGV4Y2VwdCBJRTguIENvbnZlbmllbnRseSxcblx0ICAgIC8vIElFOCBkb2Vzbid0IHN1cHBvcnQgU1ZHIGFuZCBzbyB3ZSBjYW4gc2ltcGx5IHVzZSB0aGUgYXR0cmlidXRlIGluXG5cdCAgICAvLyBicm93c2VycyB0aGF0IHN1cHBvcnQgU1ZHIGFuZCB0aGUgcHJvcGVydHkgaW4gYnJvd3NlcnMgdGhhdCBkb24ndCxcblx0ICAgIC8vIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGUgZWxlbWVudCBpcyBIVE1MIG9yIFNWRy5cblx0ICAgIGNsYXNzTmFtZTogaGFzU1ZHID8gTVVTVF9VU0VfQVRUUklCVVRFIDogTVVTVF9VU0VfUFJPUEVSVFksXG5cdCAgICBjb2xzOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcblx0ICAgIGNvbFNwYW46IG51bGwsXG5cdCAgICBjb250ZW50OiBudWxsLFxuXHQgICAgY29udGVudEVkaXRhYmxlOiBudWxsLFxuXHQgICAgY29udGV4dE1lbnU6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIGNvbnRyb2xzOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuXHQgICAgY29vcmRzOiBudWxsLFxuXHQgICAgY3Jvc3NPcmlnaW46IG51bGwsXG5cdCAgICBkYXRhOiBudWxsLCAvLyBGb3IgYDxvYmplY3QgLz5gIGFjdHMgYXMgYHNyY2AuXG5cdCAgICBkYXRlVGltZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHQgICAgZGVmZXI6IEhBU19CT09MRUFOX1ZBTFVFLFxuXHQgICAgZGlyOiBudWxsLFxuXHQgICAgZGlzYWJsZWQ6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuXHQgICAgZG93bmxvYWQ6IEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUsXG5cdCAgICBkcmFnZ2FibGU6IG51bGwsXG5cdCAgICBlbmNUeXBlOiBudWxsLFxuXHQgICAgZm9ybTogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHQgICAgZm9ybUFjdGlvbjogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHQgICAgZm9ybUVuY1R5cGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIGZvcm1NZXRob2Q6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIGZvcm1Ob1ZhbGlkYXRlOiBIQVNfQk9PTEVBTl9WQUxVRSxcblx0ICAgIGZvcm1UYXJnZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIGZyYW1lQm9yZGVyOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICBoZWlnaHQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIGhpZGRlbjogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG5cdCAgICBocmVmOiBudWxsLFxuXHQgICAgaHJlZkxhbmc6IG51bGwsXG5cdCAgICBodG1sRm9yOiBudWxsLFxuXHQgICAgaHR0cEVxdWl2OiBudWxsLFxuXHQgICAgaWNvbjogbnVsbCxcblx0ICAgIGlkOiBNVVNUX1VTRV9QUk9QRVJUWSxcblx0ICAgIGxhYmVsOiBudWxsLFxuXHQgICAgbGFuZzogbnVsbCxcblx0ICAgIGxpc3Q6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIGxvb3A6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG5cdCAgICBtYW5pZmVzdDogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHQgICAgbWFyZ2luSGVpZ2h0OiBudWxsLFxuXHQgICAgbWFyZ2luV2lkdGg6IG51bGwsXG5cdCAgICBtYXg6IG51bGwsXG5cdCAgICBtYXhMZW5ndGg6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIG1lZGlhOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICBtZWRpYUdyb3VwOiBudWxsLFxuXHQgICAgbWV0aG9kOiBudWxsLFxuXHQgICAgbWluOiBudWxsLFxuXHQgICAgbXVsdGlwbGU6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG5cdCAgICBtdXRlZDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcblx0ICAgIG5hbWU6IG51bGwsXG5cdCAgICBub1ZhbGlkYXRlOiBIQVNfQk9PTEVBTl9WQUxVRSxcblx0ICAgIG9wZW46IG51bGwsXG5cdCAgICBwYXR0ZXJuOiBudWxsLFxuXHQgICAgcGxhY2Vob2xkZXI6IG51bGwsXG5cdCAgICBwb3N0ZXI6IG51bGwsXG5cdCAgICBwcmVsb2FkOiBudWxsLFxuXHQgICAgcmFkaW9Hcm91cDogbnVsbCxcblx0ICAgIHJlYWRPbmx5OiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuXHQgICAgcmVsOiBudWxsLFxuXHQgICAgcmVxdWlyZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuXHQgICAgcm9sZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHQgICAgcm93czogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG5cdCAgICByb3dTcGFuOiBudWxsLFxuXHQgICAgc2FuZGJveDogbnVsbCxcblx0ICAgIHNjb3BlOiBudWxsLFxuXHQgICAgc2Nyb2xsaW5nOiBudWxsLFxuXHQgICAgc2VhbWxlc3M6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuXHQgICAgc2VsZWN0ZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG5cdCAgICBzaGFwZTogbnVsbCxcblx0ICAgIHNpemU6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuXHQgICAgc2l6ZXM6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIHNwYW46IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuXHQgICAgc3BlbGxDaGVjazogbnVsbCxcblx0ICAgIHNyYzogbnVsbCxcblx0ICAgIHNyY0RvYzogTVVTVF9VU0VfUFJPUEVSVFksXG5cdCAgICBzcmNTZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIHN0YXJ0OiBIQVNfTlVNRVJJQ19WQUxVRSxcblx0ICAgIHN0ZXA6IG51bGwsXG5cdCAgICBzdHlsZTogbnVsbCxcblx0ICAgIHRhYkluZGV4OiBudWxsLFxuXHQgICAgdGFyZ2V0OiBudWxsLFxuXHQgICAgdGl0bGU6IG51bGwsXG5cdCAgICB0eXBlOiBudWxsLFxuXHQgICAgdXNlTWFwOiBudWxsLFxuXHQgICAgdmFsdWU6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX1NJREVfRUZGRUNUUyxcblx0ICAgIHdpZHRoOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICB3bW9kZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogTm9uLXN0YW5kYXJkIFByb3BlcnRpZXNcblx0ICAgICAqL1xuXHQgICAgYXV0b0NhcGl0YWxpemU6IG51bGwsIC8vIFN1cHBvcnRlZCBpbiBNb2JpbGUgU2FmYXJpIGZvciBrZXlib2FyZCBoaW50c1xuXHQgICAgYXV0b0NvcnJlY3Q6IG51bGwsIC8vIFN1cHBvcnRlZCBpbiBNb2JpbGUgU2FmYXJpIGZvciBrZXlib2FyZCBoaW50c1xuXHQgICAgaXRlbVByb3A6IE1VU1RfVVNFX0FUVFJJQlVURSwgLy8gTWljcm9kYXRhOiBodHRwOi8vc2NoZW1hLm9yZy9kb2NzL2dzLmh0bWxcblx0ICAgIGl0ZW1TY29wZTogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX0JPT0xFQU5fVkFMVUUsIC8vIE1pY3JvZGF0YTogaHR0cDovL3NjaGVtYS5vcmcvZG9jcy9ncy5odG1sXG5cdCAgICBpdGVtVHlwZTogTVVTVF9VU0VfQVRUUklCVVRFLCAvLyBNaWNyb2RhdGE6IGh0dHA6Ly9zY2hlbWEub3JnL2RvY3MvZ3MuaHRtbFxuXHQgICAgcHJvcGVydHk6IG51bGwgLy8gU3VwcG9ydHMgT0cgaW4gbWV0YSB0YWdzXG5cdCAgfSxcblx0ICBET01BdHRyaWJ1dGVOYW1lczoge1xuXHQgICAgYWNjZXB0Q2hhcnNldDogJ2FjY2VwdC1jaGFyc2V0Jyxcblx0ICAgIGNsYXNzTmFtZTogJ2NsYXNzJyxcblx0ICAgIGh0bWxGb3I6ICdmb3InLFxuXHQgICAgaHR0cEVxdWl2OiAnaHR0cC1lcXVpdidcblx0ICB9LFxuXHQgIERPTVByb3BlcnR5TmFtZXM6IHtcblx0ICAgIGF1dG9DYXBpdGFsaXplOiAnYXV0b2NhcGl0YWxpemUnLFxuXHQgICAgYXV0b0NvbXBsZXRlOiAnYXV0b2NvbXBsZXRlJyxcblx0ICAgIGF1dG9Db3JyZWN0OiAnYXV0b2NvcnJlY3QnLFxuXHQgICAgYXV0b0ZvY3VzOiAnYXV0b2ZvY3VzJyxcblx0ICAgIGF1dG9QbGF5OiAnYXV0b3BsYXknLFxuXHQgICAgZW5jVHlwZTogJ2VuY3R5cGUnLFxuXHQgICAgaHJlZkxhbmc6ICdocmVmbGFuZycsXG5cdCAgICByYWRpb0dyb3VwOiAncmFkaW9ncm91cCcsXG5cdCAgICBzcGVsbENoZWNrOiAnc3BlbGxjaGVjaycsXG5cdCAgICBzcmNEb2M6ICdzcmNkb2MnLFxuXHQgICAgc3JjU2V0OiAnc3Jjc2V0J1xuXHQgIH1cblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gSFRNTERPTVByb3BlcnR5Q29uZmlnO1xuXG5cbi8qKiovIH0sXG4vKiAxMjUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgTW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpblxuXHQgKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIEV2ZW50Q29uc3RhbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0XG5cdHZhciBlbXB0eUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cdFxuXHR2YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cdFxuXHQvKipcblx0ICogTW9iaWxlIFNhZmFyaSBkb2VzIG5vdCBmaXJlIHByb3Blcmx5IGJ1YmJsZSBjbGljayBldmVudHMgb24gbm9uLWludGVyYWN0aXZlXG5cdCAqIGVsZW1lbnRzLCB3aGljaCBtZWFucyBkZWxlZ2F0ZWQgY2xpY2sgbGlzdGVuZXJzIGRvIG5vdCBmaXJlLiBUaGUgd29ya2Fyb3VuZFxuXHQgKiBmb3IgdGhpcyBidWcgaW52b2x2ZXMgYXR0YWNoaW5nIGFuIGVtcHR5IGNsaWNrIGxpc3RlbmVyIG9uIHRoZSB0YXJnZXQgbm9kZS5cblx0ICpcblx0ICogVGhpcyBwYXJ0aWN1bGFyIHBsdWdpbiB3b3JrcyBhcm91bmQgdGhlIGJ1ZyBieSBhdHRhY2hpbmcgYW4gZW1wdHkgY2xpY2tcblx0ICogbGlzdGVuZXIgb24gYHRvdWNoc3RhcnRgICh3aGljaCBkb2VzIGZpcmUgb24gZXZlcnkgZWxlbWVudCkuXG5cdCAqL1xuXHR2YXIgTW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpbiA9IHtcblx0XG5cdCAgZXZlbnRUeXBlczogbnVsbCxcblx0XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuXHQgICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuXHQgICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cblx0ICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cblx0ICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuXHQgICAqL1xuXHQgIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKFxuXHQgICAgICB0b3BMZXZlbFR5cGUsXG5cdCAgICAgIHRvcExldmVsVGFyZ2V0LFxuXHQgICAgICB0b3BMZXZlbFRhcmdldElELFxuXHQgICAgICBuYXRpdmVFdmVudCkge1xuXHQgICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BUb3VjaFN0YXJ0KSB7XG5cdCAgICAgIHZhciB0YXJnZXQgPSBuYXRpdmVFdmVudC50YXJnZXQ7XG5cdCAgICAgIGlmICh0YXJnZXQgJiYgIXRhcmdldC5vbmNsaWNrKSB7XG5cdCAgICAgICAgdGFyZ2V0Lm9uY2xpY2sgPSBlbXB0eUZ1bmN0aW9uO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHRcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gTW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpbjtcblxuXG4vKioqLyB9LFxuLyogMTI2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3Rcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblx0dmFyIEV2ZW50UGx1Z2luVXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKTtcblx0dmFyIFJlYWN0Q2hpbGRyZW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNyk7XG5cdHZhciBSZWFjdENvbXBvbmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXHR2YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHR2YXIgUmVhY3RDb250ZXh0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NSk7XG5cdHZhciBSZWFjdEN1cnJlbnRPd25lciA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXHR2YXIgUmVhY3RFbGVtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0dmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oNDYpO1xuXHR2YXIgUmVhY3RET00gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblx0dmFyIFJlYWN0RE9NQ29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NCk7XG5cdHZhciBSZWFjdERlZmF1bHRJbmplY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzOSk7XG5cdHZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xuXHR2YXIgUmVhY3RMZWdhY3lFbGVtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cdHZhciBSZWFjdE1vdW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblx0dmFyIFJlYWN0TXVsdGlDaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18oNjYpO1xuXHR2YXIgUmVhY3RQZXJmID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdHZhciBSZWFjdFByb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oNzIpO1xuXHR2YXIgUmVhY3RTZXJ2ZXJSZW5kZXJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0OCk7XG5cdHZhciBSZWFjdFRleHRDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc1KTtcblx0XG5cdHZhciBhc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgZGVwcmVjYXRlZCA9IF9fd2VicGFja19yZXF1aXJlX18oNDkpO1xuXHR2YXIgb25seUNoaWxkID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzgpO1xuXHRcblx0UmVhY3REZWZhdWx0SW5qZWN0aW9uLmluamVjdCgpO1xuXHRcblx0dmFyIGNyZWF0ZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudDtcblx0dmFyIGNyZWF0ZUZhY3RvcnkgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeTtcblx0XG5cdGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICBjcmVhdGVFbGVtZW50ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUVsZW1lbnQ7XG5cdCAgY3JlYXRlRmFjdG9yeSA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVGYWN0b3J5O1xuXHR9XG5cdFxuXHQvLyBUT0RPOiBEcm9wIGxlZ2FjeSBlbGVtZW50cyBvbmNlIGNsYXNzZXMgbm8gbG9uZ2VyIGV4cG9ydCB0aGVzZSBmYWN0b3JpZXNcblx0Y3JlYXRlRWxlbWVudCA9IFJlYWN0TGVnYWN5RWxlbWVudC53cmFwQ3JlYXRlRWxlbWVudChcblx0ICBjcmVhdGVFbGVtZW50XG5cdCk7XG5cdGNyZWF0ZUZhY3RvcnkgPSBSZWFjdExlZ2FjeUVsZW1lbnQud3JhcENyZWF0ZUZhY3RvcnkoXG5cdCAgY3JlYXRlRmFjdG9yeVxuXHQpO1xuXHRcblx0dmFyIHJlbmRlciA9IFJlYWN0UGVyZi5tZWFzdXJlKCdSZWFjdCcsICdyZW5kZXInLCBSZWFjdE1vdW50LnJlbmRlcik7XG5cdFxuXHR2YXIgUmVhY3QgPSB7XG5cdCAgQ2hpbGRyZW46IHtcblx0ICAgIG1hcDogUmVhY3RDaGlsZHJlbi5tYXAsXG5cdCAgICBmb3JFYWNoOiBSZWFjdENoaWxkcmVuLmZvckVhY2gsXG5cdCAgICBjb3VudDogUmVhY3RDaGlsZHJlbi5jb3VudCxcblx0ICAgIG9ubHk6IG9ubHlDaGlsZFxuXHQgIH0sXG5cdCAgRE9NOiBSZWFjdERPTSxcblx0ICBQcm9wVHlwZXM6IFJlYWN0UHJvcFR5cGVzLFxuXHQgIGluaXRpYWxpemVUb3VjaEV2ZW50czogZnVuY3Rpb24oc2hvdWxkVXNlVG91Y2gpIHtcblx0ICAgIEV2ZW50UGx1Z2luVXRpbHMudXNlVG91Y2hFdmVudHMgPSBzaG91bGRVc2VUb3VjaDtcblx0ICB9LFxuXHQgIGNyZWF0ZUNsYXNzOiBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5jcmVhdGVDbGFzcyxcblx0ICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50LFxuXHQgIGNyZWF0ZUZhY3Rvcnk6IGNyZWF0ZUZhY3RvcnksXG5cdCAgY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50OiBSZWFjdE1vdW50LmNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudCxcblx0ICBjb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnRCeUlEOiBSZWFjdE1vdW50LmNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudEJ5SUQsXG5cdCAgcmVuZGVyOiByZW5kZXIsXG5cdCAgcmVuZGVyVG9TdHJpbmc6IFJlYWN0U2VydmVyUmVuZGVyaW5nLnJlbmRlclRvU3RyaW5nLFxuXHQgIHJlbmRlclRvU3RhdGljTWFya3VwOiBSZWFjdFNlcnZlclJlbmRlcmluZy5yZW5kZXJUb1N0YXRpY01hcmt1cCxcblx0ICB1bm1vdW50Q29tcG9uZW50QXROb2RlOiBSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRBdE5vZGUsXG5cdCAgaXNWYWxpZENsYXNzOiBSZWFjdExlZ2FjeUVsZW1lbnQuaXNWYWxpZENsYXNzLFxuXHQgIGlzVmFsaWRFbGVtZW50OiBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQsXG5cdCAgd2l0aENvbnRleHQ6IFJlYWN0Q29udGV4dC53aXRoQ29udGV4dCxcblx0XG5cdCAgLy8gSG9vayBmb3IgSlNYIHNwcmVhZCwgZG9uJ3QgdXNlIHRoaXMgZm9yIGFueXRoaW5nIGVsc2UuXG5cdCAgX19zcHJlYWQ6IGFzc2lnbixcblx0XG5cdCAgLy8gRGVwcmVjYXRpb25zIChyZW1vdmUgZm9yIDAuMTMpXG5cdCAgcmVuZGVyQ29tcG9uZW50OiBkZXByZWNhdGVkKFxuXHQgICAgJ1JlYWN0Jyxcblx0ICAgICdyZW5kZXJDb21wb25lbnQnLFxuXHQgICAgJ3JlbmRlcicsXG5cdCAgICB0aGlzLFxuXHQgICAgcmVuZGVyXG5cdCAgKSxcblx0ICByZW5kZXJDb21wb25lbnRUb1N0cmluZzogZGVwcmVjYXRlZChcblx0ICAgICdSZWFjdCcsXG5cdCAgICAncmVuZGVyQ29tcG9uZW50VG9TdHJpbmcnLFxuXHQgICAgJ3JlbmRlclRvU3RyaW5nJyxcblx0ICAgIHRoaXMsXG5cdCAgICBSZWFjdFNlcnZlclJlbmRlcmluZy5yZW5kZXJUb1N0cmluZ1xuXHQgICksXG5cdCAgcmVuZGVyQ29tcG9uZW50VG9TdGF0aWNNYXJrdXA6IGRlcHJlY2F0ZWQoXG5cdCAgICAnUmVhY3QnLFxuXHQgICAgJ3JlbmRlckNvbXBvbmVudFRvU3RhdGljTWFya3VwJyxcblx0ICAgICdyZW5kZXJUb1N0YXRpY01hcmt1cCcsXG5cdCAgICB0aGlzLFxuXHQgICAgUmVhY3RTZXJ2ZXJSZW5kZXJpbmcucmVuZGVyVG9TdGF0aWNNYXJrdXBcblx0ICApLFxuXHQgIGlzVmFsaWRDb21wb25lbnQ6IGRlcHJlY2F0ZWQoXG5cdCAgICAnUmVhY3QnLFxuXHQgICAgJ2lzVmFsaWRDb21wb25lbnQnLFxuXHQgICAgJ2lzVmFsaWRFbGVtZW50Jyxcblx0ICAgIHRoaXMsXG5cdCAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnRcblx0ICApXG5cdH07XG5cdFxuXHQvLyBJbmplY3QgdGhlIHJ1bnRpbWUgaW50byBhIGRldnRvb2xzIGdsb2JhbCBob29rIHJlZ2FyZGxlc3Mgb2YgYnJvd3Nlci5cblx0Ly8gQWxsb3dzIGZvciBkZWJ1Z2dpbmcgd2hlbiB0aGUgaG9vayBpcyBpbmplY3RlZCBvbiB0aGUgcGFnZS5cblx0aWYgKFxuXHQgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gIT09ICd1bmRlZmluZWQnICYmXG5cdCAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5pbmplY3QgPT09ICdmdW5jdGlvbicpIHtcblx0ICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uaW5qZWN0KHtcblx0ICAgIENvbXBvbmVudDogUmVhY3RDb21wb25lbnQsXG5cdCAgICBDdXJyZW50T3duZXI6IFJlYWN0Q3VycmVudE93bmVyLFxuXHQgICAgRE9NQ29tcG9uZW50OiBSZWFjdERPTUNvbXBvbmVudCxcblx0ICAgIERPTVByb3BlcnR5T3BlcmF0aW9uczogRE9NUHJvcGVydHlPcGVyYXRpb25zLFxuXHQgICAgSW5zdGFuY2VIYW5kbGVzOiBSZWFjdEluc3RhbmNlSGFuZGxlcyxcblx0ICAgIE1vdW50OiBSZWFjdE1vdW50LFxuXHQgICAgTXVsdGlDaGlsZDogUmVhY3RNdWx0aUNoaWxkLFxuXHQgICAgVGV4dENvbXBvbmVudDogUmVhY3RUZXh0Q29tcG9uZW50XG5cdCAgfSk7XG5cdH1cblx0XG5cdGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICB2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHQgIGlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgd2luZG93LnRvcCA9PT0gd2luZG93LnNlbGYpIHtcblx0XG5cdCAgICAvLyBJZiB3ZSdyZSBpbiBDaHJvbWUsIGxvb2sgZm9yIHRoZSBkZXZ0b29scyBtYXJrZXIgYW5kIHByb3ZpZGUgYSBkb3dubG9hZFxuXHQgICAgLy8gbGluayBpZiBub3QgaW5zdGFsbGVkLlxuXHQgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lJykgPiAtMSkge1xuXHQgICAgICBpZiAodHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICBjb25zb2xlLmRlYnVnKFxuXHQgICAgICAgICAgJ0Rvd25sb2FkIHRoZSBSZWFjdCBEZXZUb29scyBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTogJyArXG5cdCAgICAgICAgICAnaHR0cDovL2ZiLm1lL3JlYWN0LWRldnRvb2xzJ1xuXHQgICAgICAgICk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICB2YXIgZXhwZWN0ZWRGZWF0dXJlcyA9IFtcblx0ICAgICAgLy8gc2hpbXNcblx0ICAgICAgQXJyYXkuaXNBcnJheSxcblx0ICAgICAgQXJyYXkucHJvdG90eXBlLmV2ZXJ5LFxuXHQgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCxcblx0ICAgICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2YsXG5cdCAgICAgIEFycmF5LnByb3RvdHlwZS5tYXAsXG5cdCAgICAgIERhdGUubm93LFxuXHQgICAgICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCxcblx0ICAgICAgT2JqZWN0LmtleXMsXG5cdCAgICAgIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsXG5cdCAgICAgIFN0cmluZy5wcm90b3R5cGUudHJpbSxcblx0XG5cdCAgICAgIC8vIHNoYW1zXG5cdCAgICAgIE9iamVjdC5jcmVhdGUsXG5cdCAgICAgIE9iamVjdC5mcmVlemVcblx0ICAgIF07XG5cdFxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHBlY3RlZEZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIGlmICghZXhwZWN0ZWRGZWF0dXJlc1tpXSkge1xuXHQgICAgICAgIGNvbnNvbGUuZXJyb3IoXG5cdCAgICAgICAgICAnT25lIG9yIG1vcmUgRVM1IHNoaW0vc2hhbXMgZXhwZWN0ZWQgYnkgUmVhY3QgYXJlIG5vdCBhdmFpbGFibGU6ICcgK1xuXHQgICAgICAgICAgJ2h0dHA6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLXBvbHlmaWxscydcblx0ICAgICAgICApO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHQvLyBWZXJzaW9uIGV4aXN0cyBvbmx5IGluIHRoZSBvcGVuLXNvdXJjZSB2ZXJzaW9uIG9mIFJlYWN0LCBub3QgaW4gRmFjZWJvb2snc1xuXHQvLyBpbnRlcm5hbCB2ZXJzaW9uLlxuXHRSZWFjdC52ZXJzaW9uID0gJzAuMTIuMic7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0O1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogMTI3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDaGlsZHJlblxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIFBvb2xlZENsYXNzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cdFxuXHR2YXIgdHJhdmVyc2VBbGxDaGlsZHJlbiA9IF9fd2VicGFja19yZXF1aXJlX18oODcpO1xuXHR2YXIgd2FybmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdFxuXHR2YXIgdHdvQXJndW1lbnRQb29sZXIgPSBQb29sZWRDbGFzcy50d29Bcmd1bWVudFBvb2xlcjtcblx0dmFyIHRocmVlQXJndW1lbnRQb29sZXIgPSBQb29sZWRDbGFzcy50aHJlZUFyZ3VtZW50UG9vbGVyO1xuXHRcblx0LyoqXG5cdCAqIFBvb2xlZENsYXNzIHJlcHJlc2VudGluZyB0aGUgYm9va2tlZXBpbmcgYXNzb2NpYXRlZCB3aXRoIHBlcmZvcm1pbmcgYSBjaGlsZFxuXHQgKiB0cmF2ZXJzYWwuIEFsbG93cyBhdm9pZGluZyBiaW5kaW5nIGNhbGxiYWNrcy5cblx0ICpcblx0ICogQGNvbnN0cnVjdG9yIEZvckVhY2hCb29rS2VlcGluZ1xuXHQgKiBAcGFyYW0geyFmdW5jdGlvbn0gZm9yRWFjaEZ1bmN0aW9uIEZ1bmN0aW9uIHRvIHBlcmZvcm0gdHJhdmVyc2FsIHdpdGguXG5cdCAqIEBwYXJhbSB7Pyp9IGZvckVhY2hDb250ZXh0IENvbnRleHQgdG8gcGVyZm9ybSBjb250ZXh0IHdpdGguXG5cdCAqL1xuXHRmdW5jdGlvbiBGb3JFYWNoQm9va0tlZXBpbmcoZm9yRWFjaEZ1bmN0aW9uLCBmb3JFYWNoQ29udGV4dCkge1xuXHQgIHRoaXMuZm9yRWFjaEZ1bmN0aW9uID0gZm9yRWFjaEZ1bmN0aW9uO1xuXHQgIHRoaXMuZm9yRWFjaENvbnRleHQgPSBmb3JFYWNoQ29udGV4dDtcblx0fVxuXHRQb29sZWRDbGFzcy5hZGRQb29saW5nVG8oRm9yRWFjaEJvb2tLZWVwaW5nLCB0d29Bcmd1bWVudFBvb2xlcik7XG5cdFxuXHRmdW5jdGlvbiBmb3JFYWNoU2luZ2xlQ2hpbGQodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSwgaSkge1xuXHQgIHZhciBmb3JFYWNoQm9va0tlZXBpbmcgPSB0cmF2ZXJzZUNvbnRleHQ7XG5cdCAgZm9yRWFjaEJvb2tLZWVwaW5nLmZvckVhY2hGdW5jdGlvbi5jYWxsKFxuXHQgICAgZm9yRWFjaEJvb2tLZWVwaW5nLmZvckVhY2hDb250ZXh0LCBjaGlsZCwgaSk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBJdGVyYXRlcyB0aHJvdWdoIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC5cblx0ICpcblx0ICogVGhlIHByb3ZpZGVkIGZvckVhY2hGdW5jKGNoaWxkLCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcblx0ICogbGVhZiBjaGlsZC5cblx0ICpcblx0ICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24oKiwgaW50KX0gZm9yRWFjaEZ1bmMuXG5cdCAqIEBwYXJhbSB7Kn0gZm9yRWFjaENvbnRleHQgQ29udGV4dCBmb3IgZm9yRWFjaENvbnRleHQuXG5cdCAqL1xuXHRmdW5jdGlvbiBmb3JFYWNoQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hGdW5jLCBmb3JFYWNoQ29udGV4dCkge1xuXHQgIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG5cdCAgICByZXR1cm4gY2hpbGRyZW47XG5cdCAgfVxuXHRcblx0ICB2YXIgdHJhdmVyc2VDb250ZXh0ID1cblx0ICAgIEZvckVhY2hCb29rS2VlcGluZy5nZXRQb29sZWQoZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KTtcblx0ICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGQsIHRyYXZlcnNlQ29udGV4dCk7XG5cdCAgRm9yRWFjaEJvb2tLZWVwaW5nLnJlbGVhc2UodHJhdmVyc2VDb250ZXh0KTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIFBvb2xlZENsYXNzIHJlcHJlc2VudGluZyB0aGUgYm9va2tlZXBpbmcgYXNzb2NpYXRlZCB3aXRoIHBlcmZvcm1pbmcgYSBjaGlsZFxuXHQgKiBtYXBwaW5nLiBBbGxvd3MgYXZvaWRpbmcgYmluZGluZyBjYWxsYmFja3MuXG5cdCAqXG5cdCAqIEBjb25zdHJ1Y3RvciBNYXBCb29rS2VlcGluZ1xuXHQgKiBAcGFyYW0geyEqfSBtYXBSZXN1bHQgT2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9yZGVyZWQgbWFwIG9mIHJlc3VsdHMuXG5cdCAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBtYXBGdW5jdGlvbiBGdW5jdGlvbiB0byBwZXJmb3JtIG1hcHBpbmcgd2l0aC5cblx0ICogQHBhcmFtIHs/Kn0gbWFwQ29udGV4dCBDb250ZXh0IHRvIHBlcmZvcm0gbWFwcGluZyB3aXRoLlxuXHQgKi9cblx0ZnVuY3Rpb24gTWFwQm9va0tlZXBpbmcobWFwUmVzdWx0LCBtYXBGdW5jdGlvbiwgbWFwQ29udGV4dCkge1xuXHQgIHRoaXMubWFwUmVzdWx0ID0gbWFwUmVzdWx0O1xuXHQgIHRoaXMubWFwRnVuY3Rpb24gPSBtYXBGdW5jdGlvbjtcblx0ICB0aGlzLm1hcENvbnRleHQgPSBtYXBDb250ZXh0O1xuXHR9XG5cdFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhNYXBCb29rS2VlcGluZywgdGhyZWVBcmd1bWVudFBvb2xlcik7XG5cdFxuXHRmdW5jdGlvbiBtYXBTaW5nbGVDaGlsZEludG9Db250ZXh0KHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUsIGkpIHtcblx0ICB2YXIgbWFwQm9va0tlZXBpbmcgPSB0cmF2ZXJzZUNvbnRleHQ7XG5cdCAgdmFyIG1hcFJlc3VsdCA9IG1hcEJvb2tLZWVwaW5nLm1hcFJlc3VsdDtcblx0XG5cdCAgdmFyIGtleVVuaXF1ZSA9ICFtYXBSZXN1bHQuaGFzT3duUHJvcGVydHkobmFtZSk7XG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG5cdCAgICBrZXlVbmlxdWUsXG5cdCAgICAnUmVhY3RDaGlsZHJlbi5tYXAoLi4uKTogRW5jb3VudGVyZWQgdHdvIGNoaWxkcmVuIHdpdGggdGhlIHNhbWUga2V5LCAnICtcblx0ICAgICdgJXNgLiBDaGlsZCBrZXlzIG11c3QgYmUgdW5pcXVlOyB3aGVuIHR3byBjaGlsZHJlbiBzaGFyZSBhIGtleSwgb25seSAnICtcblx0ICAgICd0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSB1c2VkLicsXG5cdCAgICBuYW1lXG5cdCAgKSA6IG51bGwpO1xuXHRcblx0ICBpZiAoa2V5VW5pcXVlKSB7XG5cdCAgICB2YXIgbWFwcGVkQ2hpbGQgPVxuXHQgICAgICBtYXBCb29rS2VlcGluZy5tYXBGdW5jdGlvbi5jYWxsKG1hcEJvb2tLZWVwaW5nLm1hcENvbnRleHQsIGNoaWxkLCBpKTtcblx0ICAgIG1hcFJlc3VsdFtuYW1lXSA9IG1hcHBlZENoaWxkO1xuXHQgIH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIE1hcHMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLlxuXHQgKlxuXHQgKiBUaGUgcHJvdmlkZWQgbWFwRnVuY3Rpb24oY2hpbGQsIGtleSwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG5cdCAqIGxlYWYgY2hpbGQuXG5cdCAqXG5cdCAqIFRPRE86IFRoaXMgbWF5IGxpa2VseSBicmVhayBhbnkgY2FsbHMgdG8gYFJlYWN0Q2hpbGRyZW4ubWFwYCB0aGF0IHdlcmVcblx0ICogcHJldmlvdXNseSByZWx5aW5nIG9uIHRoZSBmYWN0IHRoYXQgd2UgZ3VhcmRlZCBhZ2FpbnN0IG51bGwgY2hpbGRyZW4uXG5cdCAqXG5cdCAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IG1hcEZ1bmN0aW9uLlxuXHQgKiBAcGFyYW0geyp9IG1hcENvbnRleHQgQ29udGV4dCBmb3IgbWFwRnVuY3Rpb24uXG5cdCAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9yZGVyZWQgbWFwIG9mIHJlc3VsdHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXBDaGlsZHJlbihjaGlsZHJlbiwgZnVuYywgY29udGV4dCkge1xuXHQgIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG5cdCAgICByZXR1cm4gY2hpbGRyZW47XG5cdCAgfVxuXHRcblx0ICB2YXIgbWFwUmVzdWx0ID0ge307XG5cdCAgdmFyIHRyYXZlcnNlQ29udGV4dCA9IE1hcEJvb2tLZWVwaW5nLmdldFBvb2xlZChtYXBSZXN1bHQsIGZ1bmMsIGNvbnRleHQpO1xuXHQgIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQsIHRyYXZlcnNlQ29udGV4dCk7XG5cdCAgTWFwQm9va0tlZXBpbmcucmVsZWFzZSh0cmF2ZXJzZUNvbnRleHQpO1xuXHQgIHJldHVybiBtYXBSZXN1bHQ7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZER1bW15KHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUsIGkpIHtcblx0ICByZXR1cm4gbnVsbDtcblx0fVxuXHRcblx0LyoqXG5cdCAqIENvdW50IHRoZSBudW1iZXIgb2YgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhc1xuXHQgKiBgcHJvcHMuY2hpbGRyZW5gLlxuXHQgKlxuXHQgKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuLlxuXHQgKi9cblx0ZnVuY3Rpb24gY291bnRDaGlsZHJlbihjaGlsZHJlbiwgY29udGV4dCkge1xuXHQgIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSwgbnVsbCk7XG5cdH1cblx0XG5cdHZhciBSZWFjdENoaWxkcmVuID0ge1xuXHQgIGZvckVhY2g6IGZvckVhY2hDaGlsZHJlbixcblx0ICBtYXA6IG1hcENoaWxkcmVuLFxuXHQgIGNvdW50OiBjb3VudENoaWxkcmVuXG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q2hpbGRyZW47XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiAxMjggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudFxuXHQgKi9cblx0XG5cdC8qanNsaW50IGV2aWw6IHRydWUgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIFJlYWN0RE9NSURPcGVyYXRpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzEpO1xuXHR2YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IF9fd2VicGFja19yZXF1aXJlX18oNjUpO1xuXHR2YXIgUmVhY3RNb3VudCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdHZhciBSZWFjdFBlcmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcblx0dmFyIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0Nyk7XG5cdFxuXHR2YXIgZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MSk7XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgc2V0SW5uZXJIVE1MID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4Nik7XG5cdFxuXHRcblx0dmFyIEVMRU1FTlRfTk9ERV9UWVBFID0gMTtcblx0dmFyIERPQ19OT0RFX1RZUEUgPSA5O1xuXHRcblx0XG5cdC8qKlxuXHQgKiBBYnN0cmFjdHMgYXdheSBhbGwgZnVuY3Rpb25hbGl0eSBvZiBgUmVhY3RDb21wb25lbnRgIHJlcXVpcmVzIGtub3dsZWRnZSBvZlxuXHQgKiB0aGUgYnJvd3NlciBjb250ZXh0LlxuXHQgKi9cblx0dmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID0ge1xuXHQgIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb246IFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24sXG5cdFxuXHQgIEJhY2tlbmRJRE9wZXJhdGlvbnM6IFJlYWN0RE9NSURPcGVyYXRpb25zLFxuXHRcblx0ICAvKipcblx0ICAgKiBJZiBhIHBhcnRpY3VsYXIgZW52aXJvbm1lbnQgcmVxdWlyZXMgdGhhdCBzb21lIHJlc291cmNlcyBiZSBjbGVhbmVkIHVwLFxuXHQgICAqIHNwZWNpZnkgdGhpcyBpbiB0aGUgaW5qZWN0ZWQgTWl4aW4uIEluIHRoZSBET00sIHdlIHdvdWxkIGxpa2VseSB3YW50IHRvXG5cdCAgICogcHVyZ2UgYW55IGNhY2hlZCBub2RlIElEIGxvb2t1cHMuXG5cdCAgICpcblx0ICAgKiBAcHJpdmF0ZVxuXHQgICAqL1xuXHQgIHVubW91bnRJREZyb21FbnZpcm9ubWVudDogZnVuY3Rpb24ocm9vdE5vZGVJRCkge1xuXHQgICAgUmVhY3RNb3VudC5wdXJnZUlEKHJvb3ROb2RlSUQpO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHN0cmluZyB0byBwbGFjZSBpbnRvIHRoZSBET00gRWxlbWVudC5cblx0ICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gRWxlbWVudCB0byBpbnNlcnQgbWFya3VwIGludG8uXG5cdCAgICogQHBhcmFtIHtib29sZWFufSBzaG91bGRSZXVzZU1hcmt1cCBTaG91bGQgcmV1c2UgdGhlIGV4aXN0aW5nIG1hcmt1cCBpbiB0aGVcblx0ICAgKiBjb250YWluZXIgaWYgcG9zc2libGUuXG5cdCAgICovXG5cdCAgbW91bnRJbWFnZUludG9Ob2RlOiBSZWFjdFBlcmYubWVhc3VyZShcblx0ICAgICdSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCcsXG5cdCAgICAnbW91bnRJbWFnZUludG9Ob2RlJyxcblx0ICAgIGZ1bmN0aW9uKG1hcmt1cCwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCkge1xuXHQgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICAgIGNvbnRhaW5lciAmJiAoXG5cdCAgICAgICAgICBjb250YWluZXIubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERV9UWVBFIHx8XG5cdCAgICAgICAgICAgIGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRVxuXHQgICAgICAgICksXG5cdCAgICAgICAgJ21vdW50Q29tcG9uZW50SW50b05vZGUoLi4uKTogVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgdmFsaWQuJ1xuXHQgICAgICApIDogaW52YXJpYW50KGNvbnRhaW5lciAmJiAoXG5cdCAgICAgICAgY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fFxuXHQgICAgICAgICAgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFXG5cdCAgICAgICkpKTtcblx0XG5cdCAgICAgIGlmIChzaG91bGRSZXVzZU1hcmt1cCkge1xuXHQgICAgICAgIGlmIChSZWFjdE1hcmt1cENoZWNrc3VtLmNhblJldXNlTWFya3VwKFxuXHQgICAgICAgICAgbWFya3VwLFxuXHQgICAgICAgICAgZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcikpKSB7XG5cdCAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgICAgICAgIGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSxcblx0ICAgICAgICAgICAgJ1lvdVxcJ3JlIHRyeWluZyB0byByZW5kZXIgYSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IHVzaW5nICcgK1xuXHQgICAgICAgICAgICAnc2VydmVyIHJlbmRlcmluZyBidXQgdGhlIGNoZWNrc3VtIHdhcyBpbnZhbGlkLiBUaGlzIHVzdWFsbHkgJyArXG5cdCAgICAgICAgICAgICdtZWFucyB5b3UgcmVuZGVyZWQgYSBkaWZmZXJlbnQgY29tcG9uZW50IHR5cGUgb3IgcHJvcHMgb24gJyArXG5cdCAgICAgICAgICAgICd0aGUgY2xpZW50IGZyb20gdGhlIG9uZSBvbiB0aGUgc2VydmVyLCBvciB5b3VyIHJlbmRlcigpICcgK1xuXHQgICAgICAgICAgICAnbWV0aG9kcyBhcmUgaW1wdXJlLiBSZWFjdCBjYW5ub3QgaGFuZGxlIHRoaXMgY2FzZSBkdWUgdG8gJyArXG5cdCAgICAgICAgICAgICdjcm9zcy1icm93c2VyIHF1aXJrcyBieSByZW5kZXJpbmcgYXQgdGhlIGRvY3VtZW50IHJvb3QuIFlvdSAnICtcblx0ICAgICAgICAgICAgJ3Nob3VsZCBsb29rIGZvciBlbnZpcm9ubWVudCBkZXBlbmRlbnQgY29kZSBpbiB5b3VyIGNvbXBvbmVudHMgJyArXG5cdCAgICAgICAgICAgICdhbmQgZW5zdXJlIHRoZSBwcm9wcyBhcmUgdGhlIHNhbWUgY2xpZW50IGFuZCBzZXJ2ZXIgc2lkZS4nXG5cdCAgICAgICAgICApIDogaW52YXJpYW50KGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSkpO1xuXHRcblx0ICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgICAgICAgY29uc29sZS53YXJuKFxuXHQgICAgICAgICAgICAgICdSZWFjdCBhdHRlbXB0ZWQgdG8gdXNlIHJldXNlIG1hcmt1cCBpbiBhIGNvbnRhaW5lciBidXQgdGhlICcgK1xuXHQgICAgICAgICAgICAgICdjaGVja3N1bSB3YXMgaW52YWxpZC4gVGhpcyBnZW5lcmFsbHkgbWVhbnMgdGhhdCB5b3UgYXJlICcgK1xuXHQgICAgICAgICAgICAgICd1c2luZyBzZXJ2ZXIgcmVuZGVyaW5nIGFuZCB0aGUgbWFya3VwIGdlbmVyYXRlZCBvbiB0aGUgJyArXG5cdCAgICAgICAgICAgICAgJ3NlcnZlciB3YXMgbm90IHdoYXQgdGhlIGNsaWVudCB3YXMgZXhwZWN0aW5nLiBSZWFjdCBpbmplY3RlZCAnICtcblx0ICAgICAgICAgICAgICAnbmV3IG1hcmt1cCB0byBjb21wZW5zYXRlIHdoaWNoIHdvcmtzIGJ1dCB5b3UgaGF2ZSBsb3N0IG1hbnkgJyArXG5cdCAgICAgICAgICAgICAgJ29mIHRoZSBiZW5lZml0cyBvZiBzZXJ2ZXIgcmVuZGVyaW5nLiBJbnN0ZWFkLCBmaWd1cmUgb3V0ICcgK1xuXHQgICAgICAgICAgICAgICd3aHkgdGhlIG1hcmt1cCBiZWluZyBnZW5lcmF0ZWQgaXMgZGlmZmVyZW50IG9uIHRoZSBjbGllbnQgJyArXG5cdCAgICAgICAgICAgICAgJ29yIHNlcnZlci4nXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICAgIGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSxcblx0ICAgICAgICAnWW91XFwncmUgdHJ5aW5nIHRvIHJlbmRlciBhIGNvbXBvbmVudCB0byB0aGUgZG9jdW1lbnQgYnV0ICcgK1xuXHQgICAgICAgICAgJ3lvdSBkaWRuXFwndCB1c2Ugc2VydmVyIHJlbmRlcmluZy4gV2UgY2FuXFwndCBkbyB0aGlzICcgK1xuXHQgICAgICAgICAgJ3dpdGhvdXQgdXNpbmcgc2VydmVyIHJlbmRlcmluZyBkdWUgdG8gY3Jvc3MtYnJvd3NlciBxdWlya3MuICcgK1xuXHQgICAgICAgICAgJ1NlZSByZW5kZXJDb21wb25lbnRUb1N0cmluZygpIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLidcblx0ICAgICAgKSA6IGludmFyaWFudChjb250YWluZXIubm9kZVR5cGUgIT09IERPQ19OT0RFX1RZUEUpKTtcblx0XG5cdCAgICAgIHNldElubmVySFRNTChjb250YWluZXIsIG1hcmt1cCk7XG5cdCAgICB9XG5cdCAgKVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudDtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDEyOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUJ1dHRvblxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIEF1dG9Gb2N1c01peGluID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cdHZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHR2YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHR2YXIgUmVhY3RFbGVtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0dmFyIFJlYWN0RE9NID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cdFxuXHR2YXIga2V5TWlycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cdFxuXHQvLyBTdG9yZSBhIHJlZmVyZW5jZSB0byB0aGUgPGJ1dHRvbj4gYFJlYWN0RE9NQ29tcG9uZW50YC4gVE9ETzogdXNlIHN0cmluZ1xuXHR2YXIgYnV0dG9uID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoUmVhY3RET00uYnV0dG9uLnR5cGUpO1xuXHRcblx0dmFyIG1vdXNlTGlzdGVuZXJOYW1lcyA9IGtleU1pcnJvcih7XG5cdCAgb25DbGljazogdHJ1ZSxcblx0ICBvbkRvdWJsZUNsaWNrOiB0cnVlLFxuXHQgIG9uTW91c2VEb3duOiB0cnVlLFxuXHQgIG9uTW91c2VNb3ZlOiB0cnVlLFxuXHQgIG9uTW91c2VVcDogdHJ1ZSxcblx0ICBvbkNsaWNrQ2FwdHVyZTogdHJ1ZSxcblx0ICBvbkRvdWJsZUNsaWNrQ2FwdHVyZTogdHJ1ZSxcblx0ICBvbk1vdXNlRG93bkNhcHR1cmU6IHRydWUsXG5cdCAgb25Nb3VzZU1vdmVDYXB0dXJlOiB0cnVlLFxuXHQgIG9uTW91c2VVcENhcHR1cmU6IHRydWVcblx0fSk7XG5cdFxuXHQvKipcblx0ICogSW1wbGVtZW50cyBhIDxidXR0b24+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCBkb2VzIG5vdCByZWNlaXZlIG1vdXNlIGV2ZW50c1xuXHQgKiB3aGVuIGBkaXNhYmxlZGAgaXMgc2V0LlxuXHQgKi9cblx0dmFyIFJlYWN0RE9NQnV0dG9uID0gUmVhY3RDb21wb3NpdGVDb21wb25lbnQuY3JlYXRlQ2xhc3Moe1xuXHQgIGRpc3BsYXlOYW1lOiAnUmVhY3RET01CdXR0b24nLFxuXHRcblx0ICBtaXhpbnM6IFtBdXRvRm9jdXNNaXhpbiwgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5dLFxuXHRcblx0ICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHByb3BzID0ge307XG5cdFxuXHQgICAgLy8gQ29weSB0aGUgcHJvcHM7IGV4Y2VwdCB0aGUgbW91c2UgbGlzdGVuZXJzIGlmIHdlJ3JlIGRpc2FibGVkXG5cdCAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5wcm9wcykge1xuXHQgICAgICBpZiAodGhpcy5wcm9wcy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmXG5cdCAgICAgICAgICAoIXRoaXMucHJvcHMuZGlzYWJsZWQgfHwgIW1vdXNlTGlzdGVuZXJOYW1lc1trZXldKSkge1xuXHQgICAgICAgIHByb3BzW2tleV0gPSB0aGlzLnByb3BzW2tleV07XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gYnV0dG9uKHByb3BzLCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcblx0ICB9XG5cdFxuXHR9KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01CdXR0b247XG5cblxuLyoqKi8gfSxcbi8qIDEzMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUZvcm1cblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBFdmVudENvbnN0YW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBMb2NhbEV2ZW50VHJhcE1peGluID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Myk7XG5cdHZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHR2YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHR2YXIgUmVhY3RFbGVtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0dmFyIFJlYWN0RE9NID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cdFxuXHQvLyBTdG9yZSBhIHJlZmVyZW5jZSB0byB0aGUgPGZvcm0+IGBSZWFjdERPTUNvbXBvbmVudGAuIFRPRE86IHVzZSBzdHJpbmdcblx0dmFyIGZvcm0gPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeShSZWFjdERPTS5mb3JtLnR5cGUpO1xuXHRcblx0LyoqXG5cdCAqIFNpbmNlIG9uU3VibWl0IGRvZXNuJ3QgYnViYmxlIE9SIGNhcHR1cmUgb24gdGhlIHRvcCBsZXZlbCBpbiBJRTgsIHdlIG5lZWRcblx0ICogdG8gY2FwdHVyZSBpdCBvbiB0aGUgPGZvcm0+IGVsZW1lbnQgaXRzZWxmLiBUaGVyZSBhcmUgbG90cyBvZiBoYWNrcyB3ZSBjb3VsZFxuXHQgKiBkbyB0byBhY2NvbXBsaXNoIHRoaXMsIGJ1dCB0aGUgbW9zdCByZWxpYWJsZSBpcyB0byBtYWtlIDxmb3JtPiBhXG5cdCAqIGNvbXBvc2l0ZSBjb21wb25lbnQgYW5kIHVzZSBgY29tcG9uZW50RGlkTW91bnRgIHRvIGF0dGFjaCB0aGUgZXZlbnQgaGFuZGxlcnMuXG5cdCAqL1xuXHR2YXIgUmVhY3RET01Gb3JtID0gUmVhY3RDb21wb3NpdGVDb21wb25lbnQuY3JlYXRlQ2xhc3Moe1xuXHQgIGRpc3BsYXlOYW1lOiAnUmVhY3RET01Gb3JtJyxcblx0XG5cdCAgbWl4aW5zOiBbUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4sIExvY2FsRXZlbnRUcmFwTWl4aW5dLFxuXHRcblx0ICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuXHQgICAgLy8gVE9ETzogSW5zdGVhZCBvZiB1c2luZyBgUmVhY3RET01gIGRpcmVjdGx5LCB3ZSBzaG91bGQgdXNlIEpTWC4gSG93ZXZlcixcblx0ICAgIC8vIGBqc2hpbnRgIGZhaWxzIHRvIHBhcnNlIEpTWCBzbyBpbiBvcmRlciBmb3IgbGludGluZyB0byB3b3JrIGluIHRoZSBvcGVuXG5cdCAgICAvLyBzb3VyY2UgcmVwbywgd2UgbmVlZCB0byBqdXN0IHVzZSBgUmVhY3RET00uZm9ybWAuXG5cdCAgICByZXR1cm4gZm9ybSh0aGlzLnByb3BzKTtcblx0ICB9LFxuXHRcblx0ICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BSZXNldCwgJ3Jlc2V0Jyk7XG5cdCAgICB0aGlzLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BTdWJtaXQsICdzdWJtaXQnKTtcblx0ICB9XG5cdH0pO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUZvcm07XG5cblxuLyoqKi8gfSxcbi8qIDEzMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NSURPcGVyYXRpb25zXG5cdCAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG5cdCAqL1xuXHRcblx0Lypqc2xpbnQgZXZpbDogdHJ1ZSAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgQ1NTUHJvcGVydHlPcGVyYXRpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MSk7XG5cdHZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExOSk7XG5cdHZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblx0dmFyIFJlYWN0TW91bnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHR2YXIgUmVhY3RQZXJmID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdFxuXHR2YXIgaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIHNldElubmVySFRNTCA9IF9fd2VicGFja19yZXF1aXJlX18oODYpO1xuXHRcblx0LyoqXG5cdCAqIEVycm9ycyBmb3IgcHJvcGVydGllcyB0aGF0IHNob3VsZCBub3QgYmUgdXBkYXRlZCB3aXRoIGB1cGRhdGVQcm9wZXJ0eUJ5SWQoKWAuXG5cdCAqXG5cdCAqIEB0eXBlIHtvYmplY3R9XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHR2YXIgSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMgPSB7XG5cdCAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6XG5cdCAgICAnYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBtdXN0IGJlIHNldCB1c2luZyBgdXBkYXRlSW5uZXJIVE1MQnlJRCgpYC4nLFxuXHQgIHN0eWxlOiAnYHN0eWxlYCBtdXN0IGJlIHNldCB1c2luZyBgdXBkYXRlU3R5bGVzQnlJRCgpYC4nXG5cdH07XG5cdFxuXHQvKipcblx0ICogT3BlcmF0aW9ucyB1c2VkIHRvIHByb2Nlc3MgdXBkYXRlcyB0byBET00gbm9kZXMuIFRoaXMgaXMgbWFkZSBpbmplY3RhYmxlIHZpYVxuXHQgKiBgUmVhY3RDb21wb25lbnQuQmFja2VuZElET3BlcmF0aW9uc2AuXG5cdCAqL1xuXHR2YXIgUmVhY3RET01JRE9wZXJhdGlvbnMgPSB7XG5cdFxuXHQgIC8qKlxuXHQgICAqIFVwZGF0ZXMgYSBET00gbm9kZSB3aXRoIG5ldyBwcm9wZXJ0eSB2YWx1ZXMuIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCB0b1xuXHQgICAqIHVwZGF0ZSBET00gcHJvcGVydGllcyBpbiBgRE9NUHJvcGVydHlgLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBub2RlIHRvIHVwZGF0ZS5cblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBIHZhbGlkIHByb3BlcnR5IG5hbWUsIHNlZSBgRE9NUHJvcGVydHlgLlxuXHQgICAqIEBwYXJhbSB7Kn0gdmFsdWUgTmV3IHZhbHVlIG9mIHRoZSBwcm9wZXJ0eS5cblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKi9cblx0ICB1cGRhdGVQcm9wZXJ0eUJ5SUQ6IFJlYWN0UGVyZi5tZWFzdXJlKFxuXHQgICAgJ1JlYWN0RE9NSURPcGVyYXRpb25zJyxcblx0ICAgICd1cGRhdGVQcm9wZXJ0eUJ5SUQnLFxuXHQgICAgZnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlKSB7XG5cdCAgICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcblx0ICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgICAhSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMuaGFzT3duUHJvcGVydHkobmFtZSksXG5cdCAgICAgICAgJ3VwZGF0ZVByb3BlcnR5QnlJRCguLi4pOiAlcycsXG5cdCAgICAgICAgSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlNbbmFtZV1cblx0ICAgICAgKSA6IGludmFyaWFudCghSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMuaGFzT3duUHJvcGVydHkobmFtZSkpKTtcblx0XG5cdCAgICAgIC8vIElmIHdlJ3JlIHVwZGF0aW5nIHRvIG51bGwgb3IgdW5kZWZpbmVkLCB3ZSBzaG91bGQgcmVtb3ZlIHRoZSBwcm9wZXJ0eVxuXHQgICAgICAvLyBmcm9tIHRoZSBET00gbm9kZSBpbnN0ZWFkIG9mIGluYWR2ZXJ0YW50bHkgc2V0dGluZyB0byBhIHN0cmluZy4gVGhpc1xuXHQgICAgICAvLyBicmluZ3MgdXMgaW4gbGluZSB3aXRoIHRoZSBzYW1lIGJlaGF2aW9yIHdlIGhhdmUgb24gaW5pdGlhbCByZW5kZXIuXG5cdCAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdCAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkobm9kZSwgbmFtZSwgdmFsdWUpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgKSxcblx0XG5cdCAgLyoqXG5cdCAgICogVXBkYXRlcyBhIERPTSBub2RlIHRvIHJlbW92ZSBhIHByb3BlcnR5LiBUaGlzIHNob3VsZCBvbmx5IGJlIHVzZWQgdG8gcmVtb3ZlXG5cdCAgICogRE9NIHByb3BlcnRpZXMgaW4gYERPTVByb3BlcnR5YC5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgbm9kZSB0byB1cGRhdGUuXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSBwcm9wZXJ0eSBuYW1lIHRvIHJlbW92ZSwgc2VlIGBET01Qcm9wZXJ0eWAuXG5cdCAgICogQGludGVybmFsXG5cdCAgICovXG5cdCAgZGVsZXRlUHJvcGVydHlCeUlEOiBSZWFjdFBlcmYubWVhc3VyZShcblx0ICAgICdSZWFjdERPTUlET3BlcmF0aW9ucycsXG5cdCAgICAnZGVsZXRlUHJvcGVydHlCeUlEJyxcblx0ICAgIGZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuXHQgICAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG5cdCAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgICAgIUlOVkFMSURfUFJPUEVSVFlfRVJST1JTLmhhc093blByb3BlcnR5KG5hbWUpLFxuXHQgICAgICAgICd1cGRhdGVQcm9wZXJ0eUJ5SUQoLi4uKTogJXMnLFxuXHQgICAgICAgIElOVkFMSURfUFJPUEVSVFlfRVJST1JTW25hbWVdXG5cdCAgICAgICkgOiBpbnZhcmlhbnQoIUlOVkFMSURfUFJPUEVSVFlfRVJST1JTLmhhc093blByb3BlcnR5KG5hbWUpKSk7XG5cdCAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUsIHZhbHVlKTtcblx0ICAgIH1cblx0ICApLFxuXHRcblx0ICAvKipcblx0ICAgKiBVcGRhdGVzIGEgRE9NIG5vZGUgd2l0aCBuZXcgc3R5bGUgdmFsdWVzLiBJZiBhIHZhbHVlIGlzIHNwZWNpZmllZCBhcyAnJyxcblx0ICAgKiB0aGUgY29ycmVzcG9uZGluZyBzdHlsZSBwcm9wZXJ0eSB3aWxsIGJlIHVuc2V0LlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBub2RlIHRvIHVwZGF0ZS5cblx0ICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzIE1hcHBpbmcgZnJvbSBzdHlsZXMgdG8gdmFsdWVzLlxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIHVwZGF0ZVN0eWxlc0J5SUQ6IFJlYWN0UGVyZi5tZWFzdXJlKFxuXHQgICAgJ1JlYWN0RE9NSURPcGVyYXRpb25zJyxcblx0ICAgICd1cGRhdGVTdHlsZXNCeUlEJyxcblx0ICAgIGZ1bmN0aW9uKGlkLCBzdHlsZXMpIHtcblx0ICAgICAgdmFyIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUoaWQpO1xuXHQgICAgICBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JTdHlsZXMobm9kZSwgc3R5bGVzKTtcblx0ICAgIH1cblx0ICApLFxuXHRcblx0ICAvKipcblx0ICAgKiBVcGRhdGVzIGEgRE9NIG5vZGUncyBpbm5lckhUTUwuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIG5vZGUgdG8gdXBkYXRlLlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBodG1sIEFuIEhUTUwgc3RyaW5nLlxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIHVwZGF0ZUlubmVySFRNTEJ5SUQ6IFJlYWN0UGVyZi5tZWFzdXJlKFxuXHQgICAgJ1JlYWN0RE9NSURPcGVyYXRpb25zJyxcblx0ICAgICd1cGRhdGVJbm5lckhUTUxCeUlEJyxcblx0ICAgIGZ1bmN0aW9uKGlkLCBodG1sKSB7XG5cdCAgICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcblx0ICAgICAgc2V0SW5uZXJIVE1MKG5vZGUsIGh0bWwpO1xuXHQgICAgfVxuXHQgICksXG5cdFxuXHQgIC8qKlxuXHQgICAqIFVwZGF0ZXMgYSBET00gbm9kZSdzIHRleHQgY29udGVudCBzZXQgYnkgYHByb3BzLmNvbnRlbnRgLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBub2RlIHRvIHVwZGF0ZS5cblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCBUZXh0IGNvbnRlbnQuXG5cdCAgICogQGludGVybmFsXG5cdCAgICovXG5cdCAgdXBkYXRlVGV4dENvbnRlbnRCeUlEOiBSZWFjdFBlcmYubWVhc3VyZShcblx0ICAgICdSZWFjdERPTUlET3BlcmF0aW9ucycsXG5cdCAgICAndXBkYXRlVGV4dENvbnRlbnRCeUlEJyxcblx0ICAgIGZ1bmN0aW9uKGlkLCBjb250ZW50KSB7XG5cdCAgICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcblx0ICAgICAgRE9NQ2hpbGRyZW5PcGVyYXRpb25zLnVwZGF0ZVRleHRDb250ZW50KG5vZGUsIGNvbnRlbnQpO1xuXHQgICAgfVxuXHQgICksXG5cdFxuXHQgIC8qKlxuXHQgICAqIFJlcGxhY2VzIGEgRE9NIG5vZGUgdGhhdCBleGlzdHMgaW4gdGhlIGRvY3VtZW50IHdpdGggbWFya3VwLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIGNoaWxkIHRvIGJlIHJlcGxhY2VkLlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgRGFuZ2Vyb3VzIG1hcmt1cCB0byBpbmplY3QgaW4gcGxhY2Ugb2YgY2hpbGQuXG5cdCAgICogQGludGVybmFsXG5cdCAgICogQHNlZSB7RGFuZ2VyLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwfVxuXHQgICAqL1xuXHQgIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRDogUmVhY3RQZXJmLm1lYXN1cmUoXG5cdCAgICAnUmVhY3RET01JRE9wZXJhdGlvbnMnLFxuXHQgICAgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRCcsXG5cdCAgICBmdW5jdGlvbihpZCwgbWFya3VwKSB7XG5cdCAgICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcblx0ICAgICAgRE9NQ2hpbGRyZW5PcGVyYXRpb25zLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKG5vZGUsIG1hcmt1cCk7XG5cdCAgICB9XG5cdCAgKSxcblx0XG5cdCAgLyoqXG5cdCAgICogVXBkYXRlcyBhIGNvbXBvbmVudCdzIGNoaWxkcmVuIGJ5IHByb2Nlc3NpbmcgYSBzZXJpZXMgb2YgdXBkYXRlcy5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7YXJyYXk8b2JqZWN0Pn0gdXBkYXRlcyBMaXN0IG9mIHVwZGF0ZSBjb25maWd1cmF0aW9ucy5cblx0ICAgKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IG1hcmt1cCBMaXN0IG9mIG1hcmt1cCBzdHJpbmdzLlxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIGRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlczogUmVhY3RQZXJmLm1lYXN1cmUoXG5cdCAgICAnUmVhY3RET01JRE9wZXJhdGlvbnMnLFxuXHQgICAgJ2Rhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlcycsXG5cdCAgICBmdW5jdGlvbih1cGRhdGVzLCBtYXJrdXApIHtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1cGRhdGVzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgdXBkYXRlc1tpXS5wYXJlbnROb2RlID0gUmVhY3RNb3VudC5nZXROb2RlKHVwZGF0ZXNbaV0ucGFyZW50SUQpO1xuXHQgICAgICB9XG5cdCAgICAgIERPTUNoaWxkcmVuT3BlcmF0aW9ucy5wcm9jZXNzVXBkYXRlcyh1cGRhdGVzLCBtYXJrdXApO1xuXHQgICAgfVxuXHQgIClcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JRE9wZXJhdGlvbnM7XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiAxMzIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01JbWdcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBFdmVudENvbnN0YW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBMb2NhbEV2ZW50VHJhcE1peGluID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Myk7XG5cdHZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHR2YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHR2YXIgUmVhY3RFbGVtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0dmFyIFJlYWN0RE9NID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cdFxuXHQvLyBTdG9yZSBhIHJlZmVyZW5jZSB0byB0aGUgPGltZz4gYFJlYWN0RE9NQ29tcG9uZW50YC4gVE9ETzogdXNlIHN0cmluZ1xuXHR2YXIgaW1nID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoUmVhY3RET00uaW1nLnR5cGUpO1xuXHRcblx0LyoqXG5cdCAqIFNpbmNlIG9uTG9hZCBkb2Vzbid0IGJ1YmJsZSBPUiBjYXB0dXJlIG9uIHRoZSB0b3AgbGV2ZWwgaW4gSUU4LCB3ZSBuZWVkIHRvXG5cdCAqIGNhcHR1cmUgaXQgb24gdGhlIDxpbWc+IGVsZW1lbnQgaXRzZWxmLiBUaGVyZSBhcmUgbG90cyBvZiBoYWNrcyB3ZSBjb3VsZCBkb1xuXHQgKiB0byBhY2NvbXBsaXNoIHRoaXMsIGJ1dCB0aGUgbW9zdCByZWxpYWJsZSBpcyB0byBtYWtlIDxpbWc+IGEgY29tcG9zaXRlXG5cdCAqIGNvbXBvbmVudCBhbmQgdXNlIGBjb21wb25lbnREaWRNb3VudGAgdG8gYXR0YWNoIHRoZSBldmVudCBoYW5kbGVycy5cblx0ICovXG5cdHZhciBSZWFjdERPTUltZyA9IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50LmNyZWF0ZUNsYXNzKHtcblx0ICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NSW1nJyxcblx0ICB0YWdOYW1lOiAnSU1HJyxcblx0XG5cdCAgbWl4aW5zOiBbUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4sIExvY2FsRXZlbnRUcmFwTWl4aW5dLFxuXHRcblx0ICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGltZyh0aGlzLnByb3BzKTtcblx0ICB9LFxuXHRcblx0ICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BMb2FkLCAnbG9hZCcpO1xuXHQgICAgdGhpcy50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wRXJyb3IsICdlcnJvcicpO1xuXHQgIH1cblx0fSk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NSW1nO1xuXG5cbi8qKiovIH0sXG4vKiAxMzMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUlucHV0XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgQXV0b0ZvY3VzTWl4aW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTtcblx0dmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXHR2YXIgTGlua2VkVmFsdWVVdGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNDQpO1xuXHR2YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblx0dmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblx0dmFyIFJlYWN0RWxlbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdHZhciBSZWFjdERPTSA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXHR2YXIgUmVhY3RNb3VudCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdHZhciBSZWFjdFVwZGF0ZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0XG5cdHZhciBhc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdC8vIFN0b3JlIGEgcmVmZXJlbmNlIHRvIHRoZSA8aW5wdXQ+IGBSZWFjdERPTUNvbXBvbmVudGAuIFRPRE86IHVzZSBzdHJpbmdcblx0dmFyIGlucHV0ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoUmVhY3RET00uaW5wdXQudHlwZSk7XG5cdFxuXHR2YXIgaW5zdGFuY2VzQnlSZWFjdElEID0ge307XG5cdFxuXHRmdW5jdGlvbiBmb3JjZVVwZGF0ZUlmTW91bnRlZCgpIHtcblx0ICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuXHQgIGlmICh0aGlzLmlzTW91bnRlZCgpKSB7XG5cdCAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG5cdCAgfVxuXHR9XG5cdFxuXHQvKipcblx0ICogSW1wbGVtZW50cyBhbiA8aW5wdXQ+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCBhbGxvd3Mgc2V0dGluZyB0aGVzZSBvcHRpb25hbFxuXHQgKiBwcm9wczogYGNoZWNrZWRgLCBgdmFsdWVgLCBgZGVmYXVsdENoZWNrZWRgLCBhbmQgYGRlZmF1bHRWYWx1ZWAuXG5cdCAqXG5cdCAqIElmIGBjaGVja2VkYCBvciBgdmFsdWVgIGFyZSBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zXG5cdCAqIHRoYXQgYWZmZWN0IHRoZSBjaGVja2VkIHN0YXRlIG9yIHZhbHVlIHdpbGwgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LlxuXHQgKlxuXHQgKiBJZiB0aGV5IGFyZSBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGwgbm90XG5cdCAqIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC4gSW5zdGVhZCwgdGhlIHByb3BzIG11c3QgY2hhbmdlIGluIG9yZGVyIGZvclxuXHQgKiB0aGUgcmVuZGVyZWQgZWxlbWVudCB0byBiZSB1cGRhdGVkLlxuXHQgKlxuXHQgKiBUaGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsIGJlIGluaXRpYWxpemVkIGFzIHVuY2hlY2tlZCAob3IgYGRlZmF1bHRDaGVja2VkYClcblx0ICogd2l0aCBhbiBlbXB0eSB2YWx1ZSAob3IgYGRlZmF1bHRWYWx1ZWApLlxuXHQgKlxuXHQgKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTIvV0QtaHRtbDUtMjAxMjEwMjUvdGhlLWlucHV0LWVsZW1lbnQuaHRtbFxuXHQgKi9cblx0dmFyIFJlYWN0RE9NSW5wdXQgPSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5jcmVhdGVDbGFzcyh7XG5cdCAgZGlzcGxheU5hbWU6ICdSZWFjdERPTUlucHV0Jyxcblx0XG5cdCAgbWl4aW5zOiBbQXV0b0ZvY3VzTWl4aW4sIExpbmtlZFZhbHVlVXRpbHMuTWl4aW4sIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXSxcblx0XG5cdCAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBkZWZhdWx0VmFsdWUgPSB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZTtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIGluaXRpYWxDaGVja2VkOiB0aGlzLnByb3BzLmRlZmF1bHRDaGVja2VkIHx8IGZhbHNlLFxuXHQgICAgICBpbml0aWFsVmFsdWU6IGRlZmF1bHRWYWx1ZSAhPSBudWxsID8gZGVmYXVsdFZhbHVlIDogbnVsbFxuXHQgICAgfTtcblx0ICB9LFxuXHRcblx0ICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuXHQgICAgLy8gQ2xvbmUgYHRoaXMucHJvcHNgIHNvIHdlIGRvbid0IG11dGF0ZSB0aGUgaW5wdXQuXG5cdCAgICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIHRoaXMucHJvcHMpO1xuXHRcblx0ICAgIHByb3BzLmRlZmF1bHRDaGVja2VkID0gbnVsbDtcblx0ICAgIHByb3BzLmRlZmF1bHRWYWx1ZSA9IG51bGw7XG5cdFxuXHQgICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZSh0aGlzKTtcblx0ICAgIHByb3BzLnZhbHVlID0gdmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogdGhpcy5zdGF0ZS5pbml0aWFsVmFsdWU7XG5cdFxuXHQgICAgdmFyIGNoZWNrZWQgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldENoZWNrZWQodGhpcyk7XG5cdCAgICBwcm9wcy5jaGVja2VkID0gY2hlY2tlZCAhPSBudWxsID8gY2hlY2tlZCA6IHRoaXMuc3RhdGUuaW5pdGlhbENoZWNrZWQ7XG5cdFxuXHQgICAgcHJvcHMub25DaGFuZ2UgPSB0aGlzLl9oYW5kbGVDaGFuZ2U7XG5cdFxuXHQgICAgcmV0dXJuIGlucHV0KHByb3BzLCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcblx0ICB9LFxuXHRcblx0ICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgaWQgPSBSZWFjdE1vdW50LmdldElEKHRoaXMuZ2V0RE9NTm9kZSgpKTtcblx0ICAgIGluc3RhbmNlc0J5UmVhY3RJRFtpZF0gPSB0aGlzO1xuXHQgIH0sXG5cdFxuXHQgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcblx0ICAgIHZhciByb290Tm9kZSA9IHRoaXMuZ2V0RE9NTm9kZSgpO1xuXHQgICAgdmFyIGlkID0gUmVhY3RNb3VudC5nZXRJRChyb290Tm9kZSk7XG5cdCAgICBkZWxldGUgaW5zdGFuY2VzQnlSZWFjdElEW2lkXTtcblx0ICB9LFxuXHRcblx0ICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uKHByZXZQcm9wcywgcHJldlN0YXRlLCBwcmV2Q29udGV4dCkge1xuXHQgICAgdmFyIHJvb3ROb2RlID0gdGhpcy5nZXRET01Ob2RlKCk7XG5cdCAgICBpZiAodGhpcy5wcm9wcy5jaGVja2VkICE9IG51bGwpIHtcblx0ICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkoXG5cdCAgICAgICAgcm9vdE5vZGUsXG5cdCAgICAgICAgJ2NoZWNrZWQnLFxuXHQgICAgICAgIHRoaXMucHJvcHMuY2hlY2tlZCB8fCBmYWxzZVxuXHQgICAgICApO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG5cdCAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuXHQgICAgICAvLyBDYXN0IGB2YWx1ZWAgdG8gYSBzdHJpbmcgdG8gZW5zdXJlIHRoZSB2YWx1ZSBpcyBzZXQgY29ycmVjdGx5LiBXaGlsZVxuXHQgICAgICAvLyBicm93c2VycyB0eXBpY2FsbHkgZG8gdGhpcyBhcyBuZWNlc3NhcnksIGpzZG9tIGRvZXNuJ3QuXG5cdCAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KHJvb3ROb2RlLCAndmFsdWUnLCAnJyArIHZhbHVlKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICBfaGFuZGxlQ2hhbmdlOiBmdW5jdGlvbihldmVudCkge1xuXHQgICAgdmFyIHJldHVyblZhbHVlO1xuXHQgICAgdmFyIG9uQ2hhbmdlID0gTGlua2VkVmFsdWVVdGlscy5nZXRPbkNoYW5nZSh0aGlzKTtcblx0ICAgIGlmIChvbkNoYW5nZSkge1xuXHQgICAgICByZXR1cm5WYWx1ZSA9IG9uQ2hhbmdlLmNhbGwodGhpcywgZXZlbnQpO1xuXHQgICAgfVxuXHQgICAgLy8gSGVyZSB3ZSB1c2UgYXNhcCB0byB3YWl0IHVudGlsIGFsbCB1cGRhdGVzIGhhdmUgcHJvcGFnYXRlZCwgd2hpY2hcblx0ICAgIC8vIGlzIGltcG9ydGFudCB3aGVuIHVzaW5nIGNvbnRyb2xsZWQgY29tcG9uZW50cyB3aXRoaW4gbGF5ZXJzOlxuXHQgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNjk4XG5cdCAgICBSZWFjdFVwZGF0ZXMuYXNhcChmb3JjZVVwZGF0ZUlmTW91bnRlZCwgdGhpcyk7XG5cdFxuXHQgICAgdmFyIG5hbWUgPSB0aGlzLnByb3BzLm5hbWU7XG5cdCAgICBpZiAodGhpcy5wcm9wcy50eXBlID09PSAncmFkaW8nICYmIG5hbWUgIT0gbnVsbCkge1xuXHQgICAgICB2YXIgcm9vdE5vZGUgPSB0aGlzLmdldERPTU5vZGUoKTtcblx0ICAgICAgdmFyIHF1ZXJ5Um9vdCA9IHJvb3ROb2RlO1xuXHRcblx0ICAgICAgd2hpbGUgKHF1ZXJ5Um9vdC5wYXJlbnROb2RlKSB7XG5cdCAgICAgICAgcXVlcnlSb290ID0gcXVlcnlSb290LnBhcmVudE5vZGU7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIC8vIElmIGByb290Tm9kZS5mb3JtYCB3YXMgbm9uLW51bGwsIHRoZW4gd2UgY291bGQgdHJ5IGBmb3JtLmVsZW1lbnRzYCxcblx0ICAgICAgLy8gYnV0IHRoYXQgc29tZXRpbWVzIGJlaGF2ZXMgc3RyYW5nZWx5IGluIElFOC4gV2UgY291bGQgYWxzbyB0cnkgdXNpbmdcblx0ICAgICAgLy8gYGZvcm0uZ2V0RWxlbWVudHNCeU5hbWVgLCBidXQgdGhhdCB3aWxsIG9ubHkgcmV0dXJuIGRpcmVjdCBjaGlsZHJlblxuXHQgICAgICAvLyBhbmQgd29uJ3QgaW5jbHVkZSBpbnB1dHMgdGhhdCB1c2UgdGhlIEhUTUw1IGBmb3JtPWAgYXR0cmlidXRlLiBTaW5jZVxuXHQgICAgICAvLyB0aGUgaW5wdXQgbWlnaHQgbm90IGV2ZW4gYmUgaW4gYSBmb3JtLCBsZXQncyBqdXN0IHVzZSB0aGUgZ2xvYmFsXG5cdCAgICAgIC8vIGBxdWVyeVNlbGVjdG9yQWxsYCB0byBlbnN1cmUgd2UgZG9uJ3QgbWlzcyBhbnl0aGluZy5cblx0ICAgICAgdmFyIGdyb3VwID0gcXVlcnlSb290LnF1ZXJ5U2VsZWN0b3JBbGwoXG5cdCAgICAgICAgJ2lucHV0W25hbWU9JyArIEpTT04uc3RyaW5naWZ5KCcnICsgbmFtZSkgKyAnXVt0eXBlPVwicmFkaW9cIl0nKTtcblx0XG5cdCAgICAgIGZvciAodmFyIGkgPSAwLCBncm91cExlbiA9IGdyb3VwLmxlbmd0aDsgaSA8IGdyb3VwTGVuOyBpKyspIHtcblx0ICAgICAgICB2YXIgb3RoZXJOb2RlID0gZ3JvdXBbaV07XG5cdCAgICAgICAgaWYgKG90aGVyTm9kZSA9PT0gcm9vdE5vZGUgfHxcblx0ICAgICAgICAgICAgb3RoZXJOb2RlLmZvcm0gIT09IHJvb3ROb2RlLmZvcm0pIHtcblx0ICAgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgb3RoZXJJRCA9IFJlYWN0TW91bnQuZ2V0SUQob3RoZXJOb2RlKTtcblx0ICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICAgICAgb3RoZXJJRCxcblx0ICAgICAgICAgICdSZWFjdERPTUlucHV0OiBNaXhpbmcgUmVhY3QgYW5kIG5vbi1SZWFjdCByYWRpbyBpbnB1dHMgd2l0aCB0aGUgJyArXG5cdCAgICAgICAgICAnc2FtZSBgbmFtZWAgaXMgbm90IHN1cHBvcnRlZC4nXG5cdCAgICAgICAgKSA6IGludmFyaWFudChvdGhlcklEKSk7XG5cdCAgICAgICAgdmFyIG90aGVySW5zdGFuY2UgPSBpbnN0YW5jZXNCeVJlYWN0SURbb3RoZXJJRF07XG5cdCAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgICAgIG90aGVySW5zdGFuY2UsXG5cdCAgICAgICAgICAnUmVhY3RET01JbnB1dDogVW5rbm93biByYWRpbyBidXR0b24gSUQgJXMuJyxcblx0ICAgICAgICAgIG90aGVySURcblx0ICAgICAgICApIDogaW52YXJpYW50KG90aGVySW5zdGFuY2UpKTtcblx0ICAgICAgICAvLyBJZiB0aGlzIGlzIGEgY29udHJvbGxlZCByYWRpbyBidXR0b24gZ3JvdXAsIGZvcmNpbmcgdGhlIGlucHV0IHRoYXRcblx0ICAgICAgICAvLyB3YXMgcHJldmlvdXNseSBjaGVja2VkIHRvIHVwZGF0ZSB3aWxsIGNhdXNlIGl0IHRvIGJlIGNvbWUgcmUtY2hlY2tlZFxuXHQgICAgICAgIC8vIGFzIGFwcHJvcHJpYXRlLlxuXHQgICAgICAgIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCBvdGhlckluc3RhbmNlKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIHJldHVybiByZXR1cm5WYWx1ZTtcblx0ICB9XG5cdFxuXHR9KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JbnB1dDtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDEzNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NT3B0aW9uXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblx0dmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblx0dmFyIFJlYWN0RWxlbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdHZhciBSZWFjdERPTSA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXHRcblx0dmFyIHdhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXHRcblx0Ly8gU3RvcmUgYSByZWZlcmVuY2UgdG8gdGhlIDxvcHRpb24+IGBSZWFjdERPTUNvbXBvbmVudGAuIFRPRE86IHVzZSBzdHJpbmdcblx0dmFyIG9wdGlvbiA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KFJlYWN0RE9NLm9wdGlvbi50eXBlKTtcblx0XG5cdC8qKlxuXHQgKiBJbXBsZW1lbnRzIGFuIDxvcHRpb24+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCB3YXJucyB3aGVuIGBzZWxlY3RlZGAgaXMgc2V0LlxuXHQgKi9cblx0dmFyIFJlYWN0RE9NT3B0aW9uID0gUmVhY3RDb21wb3NpdGVDb21wb25lbnQuY3JlYXRlQ2xhc3Moe1xuXHQgIGRpc3BsYXlOYW1lOiAnUmVhY3RET01PcHRpb24nLFxuXHRcblx0ICBtaXhpbnM6IFtSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbl0sXG5cdFxuXHQgIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24oKSB7XG5cdCAgICAvLyBUT0RPICh5dW5nc3RlcnMpOiBSZW1vdmUgc3VwcG9ydCBmb3IgYHNlbGVjdGVkYCBpbiA8b3B0aW9uPi5cblx0ICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG5cdCAgICAgICAgdGhpcy5wcm9wcy5zZWxlY3RlZCA9PSBudWxsLFxuXHQgICAgICAgICdVc2UgdGhlIGBkZWZhdWx0VmFsdWVgIG9yIGB2YWx1ZWAgcHJvcHMgb24gPHNlbGVjdD4gaW5zdGVhZCBvZiAnICtcblx0ICAgICAgICAnc2V0dGluZyBgc2VsZWN0ZWRgIG9uIDxvcHRpb24+Lidcblx0ICAgICAgKSA6IG51bGwpO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gb3B0aW9uKHRoaXMucHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuXHQgIH1cblx0XG5cdH0pO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTU9wdGlvbjtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDEzNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVNlbGVjdFxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIEF1dG9Gb2N1c01peGluID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cdHZhciBMaW5rZWRWYWx1ZVV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NCk7XG5cdHZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHR2YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHR2YXIgUmVhY3RFbGVtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0dmFyIFJlYWN0RE9NID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cdHZhciBSZWFjdFVwZGF0ZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0XG5cdHZhciBhc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0Ly8gU3RvcmUgYSByZWZlcmVuY2UgdG8gdGhlIDxzZWxlY3Q+IGBSZWFjdERPTUNvbXBvbmVudGAuIFRPRE86IHVzZSBzdHJpbmdcblx0dmFyIHNlbGVjdCA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KFJlYWN0RE9NLnNlbGVjdC50eXBlKTtcblx0XG5cdGZ1bmN0aW9uIHVwZGF0ZVdpdGhQZW5kaW5nVmFsdWVJZk1vdW50ZWQoKSB7XG5cdCAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cblx0ICBpZiAodGhpcy5pc01vdW50ZWQoKSkge1xuXHQgICAgdGhpcy5zZXRTdGF0ZSh7dmFsdWU6IHRoaXMuX3BlbmRpbmdWYWx1ZX0pO1xuXHQgICAgdGhpcy5fcGVuZGluZ1ZhbHVlID0gMDtcblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBWYWxpZGF0aW9uIGZ1bmN0aW9uIGZvciBgdmFsdWVgIGFuZCBgZGVmYXVsdFZhbHVlYC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIHNlbGVjdFZhbHVlVHlwZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcblx0ICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcblx0ICAgIHJldHVybjtcblx0ICB9XG5cdCAgaWYgKHByb3BzLm11bHRpcGxlKSB7XG5cdCAgICBpZiAoIUFycmF5LmlzQXJyYXkocHJvcHNbcHJvcE5hbWVdKSkge1xuXHQgICAgICByZXR1cm4gbmV3IEVycm9yKFxuXHQgICAgICAgIChcIlRoZSBgXCIgKyBwcm9wTmFtZSArIFwiYCBwcm9wIHN1cHBsaWVkIHRvIDxzZWxlY3Q+IG11c3QgYmUgYW4gYXJyYXkgaWYgXCIpICtcblx0ICAgICAgICAoXCJgbXVsdGlwbGVgIGlzIHRydWUuXCIpXG5cdCAgICAgICk7XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BzW3Byb3BOYW1lXSkpIHtcblx0ICAgICAgcmV0dXJuIG5ldyBFcnJvcihcblx0ICAgICAgICAoXCJUaGUgYFwiICsgcHJvcE5hbWUgKyBcImAgcHJvcCBzdXBwbGllZCB0byA8c2VsZWN0PiBtdXN0IGJlIGEgc2NhbGFyIFwiKSArXG5cdCAgICAgICAgKFwidmFsdWUgaWYgYG11bHRpcGxlYCBpcyBmYWxzZS5cIilcblx0ICAgICAgKTtcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBJZiBgdmFsdWVgIGlzIHN1cHBsaWVkLCB1cGRhdGVzIDxvcHRpb24+IGVsZW1lbnRzIG9uIG1vdW50IGFuZCB1cGRhdGUuXG5cdCAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBJbnN0YW5jZSBvZiBSZWFjdERPTVNlbGVjdFxuXHQgKiBAcGFyYW0gez8qfSBwcm9wVmFsdWUgRm9yIHVuY29udHJvbGxlZCBjb21wb25lbnRzLCBudWxsL3VuZGVmaW5lZC4gRm9yXG5cdCAqIGNvbnRyb2xsZWQgY29tcG9uZW50cywgYSBzdHJpbmcgKG9yIHdpdGggYG11bHRpcGxlYCwgYSBsaXN0IG9mIHN0cmluZ3MpLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gdXBkYXRlT3B0aW9ucyhjb21wb25lbnQsIHByb3BWYWx1ZSkge1xuXHQgIHZhciBtdWx0aXBsZSA9IGNvbXBvbmVudC5wcm9wcy5tdWx0aXBsZTtcblx0ICB2YXIgdmFsdWUgPSBwcm9wVmFsdWUgIT0gbnVsbCA/IHByb3BWYWx1ZSA6IGNvbXBvbmVudC5zdGF0ZS52YWx1ZTtcblx0ICB2YXIgb3B0aW9ucyA9IGNvbXBvbmVudC5nZXRET01Ob2RlKCkub3B0aW9ucztcblx0ICB2YXIgc2VsZWN0ZWRWYWx1ZSwgaSwgbDtcblx0ICBpZiAobXVsdGlwbGUpIHtcblx0ICAgIHNlbGVjdGVkVmFsdWUgPSB7fTtcblx0ICAgIGZvciAoaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcblx0ICAgICAgc2VsZWN0ZWRWYWx1ZVsnJyArIHZhbHVlW2ldXSA9IHRydWU7XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIHNlbGVjdGVkVmFsdWUgPSAnJyArIHZhbHVlO1xuXHQgIH1cblx0ICBmb3IgKGkgPSAwLCBsID0gb3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgIHZhciBzZWxlY3RlZCA9IG11bHRpcGxlID9cblx0ICAgICAgc2VsZWN0ZWRWYWx1ZS5oYXNPd25Qcm9wZXJ0eShvcHRpb25zW2ldLnZhbHVlKSA6XG5cdCAgICAgIG9wdGlvbnNbaV0udmFsdWUgPT09IHNlbGVjdGVkVmFsdWU7XG5cdFxuXHQgICAgaWYgKHNlbGVjdGVkICE9PSBvcHRpb25zW2ldLnNlbGVjdGVkKSB7XG5cdCAgICAgIG9wdGlvbnNbaV0uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBJbXBsZW1lbnRzIGEgPHNlbGVjdD4gbmF0aXZlIGNvbXBvbmVudCB0aGF0IGFsbG93cyBvcHRpb25hbGx5IHNldHRpbmcgdGhlXG5cdCAqIHByb3BzIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLiBJZiBgbXVsdGlwbGVgIGlzIGZhbHNlLCB0aGUgcHJvcCBtdXN0IGJlIGFcblx0ICogc3RyaW5nLiBJZiBgbXVsdGlwbGVgIGlzIHRydWUsIHRoZSBwcm9wIG11c3QgYmUgYW4gYXJyYXkgb2Ygc3RyaW5ncy5cblx0ICpcblx0ICogSWYgYHZhbHVlYCBpcyBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zIHRoYXQgY2hhbmdlIHRoZVxuXHQgKiBzZWxlY3RlZCBvcHRpb24gd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG5cdCAqXG5cdCAqIElmIGl0IGlzIHN1cHBsaWVkIChhbmQgbm90IG51bGwvdW5kZWZpbmVkKSwgdGhlIHJlbmRlcmVkIG9wdGlvbnMgd2lsbCBub3Rcblx0ICogdXBkYXRlIGluIHJlc3BvbnNlIHRvIHVzZXIgYWN0aW9ucy4gSW5zdGVhZCwgdGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGNoYW5nZSBpblxuXHQgKiBvcmRlciBmb3IgdGhlIHJlbmRlcmVkIG9wdGlvbnMgdG8gdXBkYXRlLlxuXHQgKlxuXHQgKiBJZiBgZGVmYXVsdFZhbHVlYCBpcyBwcm92aWRlZCwgYW55IG9wdGlvbnMgd2l0aCB0aGUgc3VwcGxpZWQgdmFsdWVzIHdpbGwgYmVcblx0ICogc2VsZWN0ZWQuXG5cdCAqL1xuXHR2YXIgUmVhY3RET01TZWxlY3QgPSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5jcmVhdGVDbGFzcyh7XG5cdCAgZGlzcGxheU5hbWU6ICdSZWFjdERPTVNlbGVjdCcsXG5cdFxuXHQgIG1peGluczogW0F1dG9Gb2N1c01peGluLCBMaW5rZWRWYWx1ZVV0aWxzLk1peGluLCBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbl0sXG5cdFxuXHQgIHByb3BUeXBlczoge1xuXHQgICAgZGVmYXVsdFZhbHVlOiBzZWxlY3RWYWx1ZVR5cGUsXG5cdCAgICB2YWx1ZTogc2VsZWN0VmFsdWVUeXBlXG5cdCAgfSxcblx0XG5cdCAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiB7dmFsdWU6IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlIHx8ICh0aGlzLnByb3BzLm11bHRpcGxlID8gW10gOiAnJyl9O1xuXHQgIH0sXG5cdFxuXHQgIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLl9wZW5kaW5nVmFsdWUgPSBudWxsO1xuXHQgIH0sXG5cdFxuXHQgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uKG5leHRQcm9wcykge1xuXHQgICAgaWYgKCF0aGlzLnByb3BzLm11bHRpcGxlICYmIG5leHRQcm9wcy5tdWx0aXBsZSkge1xuXHQgICAgICB0aGlzLnNldFN0YXRlKHt2YWx1ZTogW3RoaXMuc3RhdGUudmFsdWVdfSk7XG5cdCAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMubXVsdGlwbGUgJiYgIW5leHRQcm9wcy5tdWx0aXBsZSkge1xuXHQgICAgICB0aGlzLnNldFN0YXRlKHt2YWx1ZTogdGhpcy5zdGF0ZS52YWx1ZVswXX0pO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG5cdCAgICAvLyBDbG9uZSBgdGhpcy5wcm9wc2Agc28gd2UgZG9uJ3QgbXV0YXRlIHRoZSBpbnB1dC5cblx0ICAgIHZhciBwcm9wcyA9IGFzc2lnbih7fSwgdGhpcy5wcm9wcyk7XG5cdFxuXHQgICAgcHJvcHMub25DaGFuZ2UgPSB0aGlzLl9oYW5kbGVDaGFuZ2U7XG5cdCAgICBwcm9wcy52YWx1ZSA9IG51bGw7XG5cdFxuXHQgICAgcmV0dXJuIHNlbGVjdChwcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cdCAgfSxcblx0XG5cdCAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgdXBkYXRlT3B0aW9ucyh0aGlzLCBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHRoaXMpKTtcblx0ICB9LFxuXHRcblx0ICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uKHByZXZQcm9wcykge1xuXHQgICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZSh0aGlzKTtcblx0ICAgIHZhciBwcmV2TXVsdGlwbGUgPSAhIXByZXZQcm9wcy5tdWx0aXBsZTtcblx0ICAgIHZhciBtdWx0aXBsZSA9ICEhdGhpcy5wcm9wcy5tdWx0aXBsZTtcblx0ICAgIGlmICh2YWx1ZSAhPSBudWxsIHx8IHByZXZNdWx0aXBsZSAhPT0gbXVsdGlwbGUpIHtcblx0ICAgICAgdXBkYXRlT3B0aW9ucyh0aGlzLCB2YWx1ZSk7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgX2hhbmRsZUNoYW5nZTogZnVuY3Rpb24oZXZlbnQpIHtcblx0ICAgIHZhciByZXR1cm5WYWx1ZTtcblx0ICAgIHZhciBvbkNoYW5nZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0T25DaGFuZ2UodGhpcyk7XG5cdCAgICBpZiAob25DaGFuZ2UpIHtcblx0ICAgICAgcmV0dXJuVmFsdWUgPSBvbkNoYW5nZS5jYWxsKHRoaXMsIGV2ZW50KTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgc2VsZWN0ZWRWYWx1ZTtcblx0ICAgIGlmICh0aGlzLnByb3BzLm11bHRpcGxlKSB7XG5cdCAgICAgIHNlbGVjdGVkVmFsdWUgPSBbXTtcblx0ICAgICAgdmFyIG9wdGlvbnMgPSBldmVudC50YXJnZXQub3B0aW9ucztcblx0ICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHQgICAgICAgIGlmIChvcHRpb25zW2ldLnNlbGVjdGVkKSB7XG5cdCAgICAgICAgICBzZWxlY3RlZFZhbHVlLnB1c2gob3B0aW9uc1tpXS52YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBzZWxlY3RlZFZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXHQgICAgfVxuXHRcblx0ICAgIHRoaXMuX3BlbmRpbmdWYWx1ZSA9IHNlbGVjdGVkVmFsdWU7XG5cdCAgICBSZWFjdFVwZGF0ZXMuYXNhcCh1cGRhdGVXaXRoUGVuZGluZ1ZhbHVlSWZNb3VudGVkLCB0aGlzKTtcblx0ICAgIHJldHVybiByZXR1cm5WYWx1ZTtcblx0ICB9XG5cdFxuXHR9KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01TZWxlY3Q7XG5cblxuLyoqKi8gfSxcbi8qIDEzNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVNlbGVjdGlvblxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdHZhciBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzIpO1xuXHR2YXIgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvciA9IF9fd2VicGFja19yZXF1aXJlX18oNTUpO1xuXHRcblx0LyoqXG5cdCAqIFdoaWxlIGBpc0NvbGxhcHNlZGAgaXMgYXZhaWxhYmxlIG9uIHRoZSBTZWxlY3Rpb24gb2JqZWN0IGFuZCBgY29sbGFwc2VkYFxuXHQgKiBpcyBhdmFpbGFibGUgb24gdGhlIFJhbmdlIG9iamVjdCwgSUUxMSBzb21ldGltZXMgZ2V0cyB0aGVtIHdyb25nLlxuXHQgKiBJZiB0aGUgYW5jaG9yL2ZvY3VzIG5vZGVzIGFuZCBvZmZzZXRzIGFyZSB0aGUgc2FtZSwgdGhlIHJhbmdlIGlzIGNvbGxhcHNlZC5cblx0ICovXG5cdGZ1bmN0aW9uIGlzQ29sbGFwc2VkKGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCwgZm9jdXNOb2RlLCBmb2N1c09mZnNldCkge1xuXHQgIHJldHVybiBhbmNob3JOb2RlID09PSBmb2N1c05vZGUgJiYgYW5jaG9yT2Zmc2V0ID09PSBmb2N1c09mZnNldDtcblx0fVxuXHRcblx0LyoqXG5cdCAqIEdldCB0aGUgYXBwcm9wcmlhdGUgYW5jaG9yIGFuZCBmb2N1cyBub2RlL29mZnNldCBwYWlycyBmb3IgSUUuXG5cdCAqXG5cdCAqIFRoZSBjYXRjaCBoZXJlIGlzIHRoYXQgSUUncyBzZWxlY3Rpb24gQVBJIGRvZXNuJ3QgcHJvdmlkZSBpbmZvcm1hdGlvblxuXHQgKiBhYm91dCB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gaXMgZm9yd2FyZCBvciBiYWNrd2FyZCwgc28gd2UgaGF2ZSB0b1xuXHQgKiBiZWhhdmUgYXMgdGhvdWdoIGl0J3MgYWx3YXlzIGZvcndhcmQuXG5cdCAqXG5cdCAqIElFIHRleHQgZGlmZmVycyBmcm9tIG1vZGVybiBzZWxlY3Rpb24gaW4gdGhhdCBpdCBiZWhhdmVzIGFzIHRob3VnaFxuXHQgKiBibG9jayBlbGVtZW50cyBlbmQgd2l0aCBhIG5ldyBsaW5lLiBUaGlzIG1lYW5zIGNoYXJhY3RlciBvZmZzZXRzIHdpbGxcblx0ICogZGlmZmVyIGJldHdlZW4gdGhlIHR3byBBUElzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcblx0ICogQHJldHVybiB7b2JqZWN0fVxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0SUVPZmZzZXRzKG5vZGUpIHtcblx0ICB2YXIgc2VsZWN0aW9uID0gZG9jdW1lbnQuc2VsZWN0aW9uO1xuXHQgIHZhciBzZWxlY3RlZFJhbmdlID0gc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG5cdCAgdmFyIHNlbGVjdGVkTGVuZ3RoID0gc2VsZWN0ZWRSYW5nZS50ZXh0Lmxlbmd0aDtcblx0XG5cdCAgLy8gRHVwbGljYXRlIHNlbGVjdGlvbiBzbyB3ZSBjYW4gbW92ZSByYW5nZSB3aXRob3V0IGJyZWFraW5nIHVzZXIgc2VsZWN0aW9uLlxuXHQgIHZhciBmcm9tU3RhcnQgPSBzZWxlY3RlZFJhbmdlLmR1cGxpY2F0ZSgpO1xuXHQgIGZyb21TdGFydC5tb3ZlVG9FbGVtZW50VGV4dChub2RlKTtcblx0ICBmcm9tU3RhcnQuc2V0RW5kUG9pbnQoJ0VuZFRvU3RhcnQnLCBzZWxlY3RlZFJhbmdlKTtcblx0XG5cdCAgdmFyIHN0YXJ0T2Zmc2V0ID0gZnJvbVN0YXJ0LnRleHQubGVuZ3RoO1xuXHQgIHZhciBlbmRPZmZzZXQgPSBzdGFydE9mZnNldCArIHNlbGVjdGVkTGVuZ3RoO1xuXHRcblx0ICByZXR1cm4ge1xuXHQgICAgc3RhcnQ6IHN0YXJ0T2Zmc2V0LFxuXHQgICAgZW5kOiBlbmRPZmZzZXRcblx0ICB9O1xuXHR9XG5cdFxuXHQvKipcblx0ICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG5cdCAqIEByZXR1cm4gez9vYmplY3R9XG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRNb2Rlcm5PZmZzZXRzKG5vZGUpIHtcblx0ICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbiAmJiB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5cdFxuXHQgIGlmICghc2VsZWN0aW9uIHx8IHNlbGVjdGlvbi5yYW5nZUNvdW50ID09PSAwKSB7XG5cdCAgICByZXR1cm4gbnVsbDtcblx0ICB9XG5cdFxuXHQgIHZhciBhbmNob3JOb2RlID0gc2VsZWN0aW9uLmFuY2hvck5vZGU7XG5cdCAgdmFyIGFuY2hvck9mZnNldCA9IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQ7XG5cdCAgdmFyIGZvY3VzTm9kZSA9IHNlbGVjdGlvbi5mb2N1c05vZGU7XG5cdCAgdmFyIGZvY3VzT2Zmc2V0ID0gc2VsZWN0aW9uLmZvY3VzT2Zmc2V0O1xuXHRcblx0ICB2YXIgY3VycmVudFJhbmdlID0gc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG5cdFxuXHQgIC8vIElmIHRoZSBub2RlIGFuZCBvZmZzZXQgdmFsdWVzIGFyZSB0aGUgc2FtZSwgdGhlIHNlbGVjdGlvbiBpcyBjb2xsYXBzZWQuXG5cdCAgLy8gYFNlbGVjdGlvbi5pc0NvbGxhcHNlZGAgaXMgYXZhaWxhYmxlIG5hdGl2ZWx5LCBidXQgSUUgc29tZXRpbWVzIGdldHNcblx0ICAvLyB0aGlzIHZhbHVlIHdyb25nLlxuXHQgIHZhciBpc1NlbGVjdGlvbkNvbGxhcHNlZCA9IGlzQ29sbGFwc2VkKFxuXHQgICAgc2VsZWN0aW9uLmFuY2hvck5vZGUsXG5cdCAgICBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuXHQgICAgc2VsZWN0aW9uLmZvY3VzTm9kZSxcblx0ICAgIHNlbGVjdGlvbi5mb2N1c09mZnNldFxuXHQgICk7XG5cdFxuXHQgIHZhciByYW5nZUxlbmd0aCA9IGlzU2VsZWN0aW9uQ29sbGFwc2VkID8gMCA6IGN1cnJlbnRSYW5nZS50b1N0cmluZygpLmxlbmd0aDtcblx0XG5cdCAgdmFyIHRlbXBSYW5nZSA9IGN1cnJlbnRSYW5nZS5jbG9uZVJhbmdlKCk7XG5cdCAgdGVtcFJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhub2RlKTtcblx0ICB0ZW1wUmFuZ2Uuc2V0RW5kKGN1cnJlbnRSYW5nZS5zdGFydENvbnRhaW5lciwgY3VycmVudFJhbmdlLnN0YXJ0T2Zmc2V0KTtcblx0XG5cdCAgdmFyIGlzVGVtcFJhbmdlQ29sbGFwc2VkID0gaXNDb2xsYXBzZWQoXG5cdCAgICB0ZW1wUmFuZ2Uuc3RhcnRDb250YWluZXIsXG5cdCAgICB0ZW1wUmFuZ2Uuc3RhcnRPZmZzZXQsXG5cdCAgICB0ZW1wUmFuZ2UuZW5kQ29udGFpbmVyLFxuXHQgICAgdGVtcFJhbmdlLmVuZE9mZnNldFxuXHQgICk7XG5cdFxuXHQgIHZhciBzdGFydCA9IGlzVGVtcFJhbmdlQ29sbGFwc2VkID8gMCA6IHRlbXBSYW5nZS50b1N0cmluZygpLmxlbmd0aDtcblx0ICB2YXIgZW5kID0gc3RhcnQgKyByYW5nZUxlbmd0aDtcblx0XG5cdCAgLy8gRGV0ZWN0IHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBpcyBiYWNrd2FyZC5cblx0ICB2YXIgZGV0ZWN0aW9uUmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuXHQgIGRldGVjdGlvblJhbmdlLnNldFN0YXJ0KGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCk7XG5cdCAgZGV0ZWN0aW9uUmFuZ2Uuc2V0RW5kKGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpO1xuXHQgIHZhciBpc0JhY2t3YXJkID0gZGV0ZWN0aW9uUmFuZ2UuY29sbGFwc2VkO1xuXHRcblx0ICByZXR1cm4ge1xuXHQgICAgc3RhcnQ6IGlzQmFja3dhcmQgPyBlbmQgOiBzdGFydCxcblx0ICAgIGVuZDogaXNCYWNrd2FyZCA/IHN0YXJ0IDogZW5kXG5cdCAgfTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuXHQgKiBAcGFyYW0ge29iamVjdH0gb2Zmc2V0c1xuXHQgKi9cblx0ZnVuY3Rpb24gc2V0SUVPZmZzZXRzKG5vZGUsIG9mZnNldHMpIHtcblx0ICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKS5kdXBsaWNhdGUoKTtcblx0ICB2YXIgc3RhcnQsIGVuZDtcblx0XG5cdCAgaWYgKHR5cGVvZiBvZmZzZXRzLmVuZCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIHN0YXJ0ID0gb2Zmc2V0cy5zdGFydDtcblx0ICAgIGVuZCA9IHN0YXJ0O1xuXHQgIH0gZWxzZSBpZiAob2Zmc2V0cy5zdGFydCA+IG9mZnNldHMuZW5kKSB7XG5cdCAgICBzdGFydCA9IG9mZnNldHMuZW5kO1xuXHQgICAgZW5kID0gb2Zmc2V0cy5zdGFydDtcblx0ICB9IGVsc2Uge1xuXHQgICAgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuXHQgICAgZW5kID0gb2Zmc2V0cy5lbmQ7XG5cdCAgfVxuXHRcblx0ICByYW5nZS5tb3ZlVG9FbGVtZW50VGV4dChub2RlKTtcblx0ICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIHN0YXJ0KTtcblx0ICByYW5nZS5zZXRFbmRQb2ludCgnRW5kVG9TdGFydCcsIHJhbmdlKTtcblx0ICByYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCBlbmQgLSBzdGFydCk7XG5cdCAgcmFuZ2Uuc2VsZWN0KCk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBJbiBtb2Rlcm4gbm9uLUlFIGJyb3dzZXJzLCB3ZSBjYW4gc3VwcG9ydCBib3RoIGZvcndhcmQgYW5kIGJhY2t3YXJkXG5cdCAqIHNlbGVjdGlvbnMuXG5cdCAqXG5cdCAqIE5vdGU6IElFMTArIHN1cHBvcnRzIHRoZSBTZWxlY3Rpb24gb2JqZWN0LCBidXQgaXQgZG9lcyBub3Qgc3VwcG9ydFxuXHQgKiB0aGUgYGV4dGVuZGAgbWV0aG9kLCB3aGljaCBtZWFucyB0aGF0IGV2ZW4gaW4gbW9kZXJuIElFLCBpdCdzIG5vdCBwb3NzaWJsZVxuXHQgKiB0byBwcm9ncmFtYXRpY2FsbHkgY3JlYXRlIGEgYmFja3dhcmQgc2VsZWN0aW9uLiBUaHVzLCBmb3IgYWxsIElFXG5cdCAqIHZlcnNpb25zLCB3ZSB1c2UgdGhlIG9sZCBJRSBBUEkgdG8gY3JlYXRlIG91ciBzZWxlY3Rpb25zLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcblx0ICogQHBhcmFtIHtvYmplY3R9IG9mZnNldHNcblx0ICovXG5cdGZ1bmN0aW9uIHNldE1vZGVybk9mZnNldHMobm9kZSwgb2Zmc2V0cykge1xuXHQgIGlmICghd2luZG93LmdldFNlbGVjdGlvbikge1xuXHQgICAgcmV0dXJuO1xuXHQgIH1cblx0XG5cdCAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcblx0ICB2YXIgbGVuZ3RoID0gbm9kZVtnZXRUZXh0Q29udGVudEFjY2Vzc29yKCldLmxlbmd0aDtcblx0ICB2YXIgc3RhcnQgPSBNYXRoLm1pbihvZmZzZXRzLnN0YXJ0LCBsZW5ndGgpO1xuXHQgIHZhciBlbmQgPSB0eXBlb2Ygb2Zmc2V0cy5lbmQgPT09ICd1bmRlZmluZWQnID9cblx0ICAgICAgICAgICAgc3RhcnQgOiBNYXRoLm1pbihvZmZzZXRzLmVuZCwgbGVuZ3RoKTtcblx0XG5cdCAgLy8gSUUgMTEgdXNlcyBtb2Rlcm4gc2VsZWN0aW9uLCBidXQgZG9lc24ndCBzdXBwb3J0IHRoZSBleHRlbmQgbWV0aG9kLlxuXHQgIC8vIEZsaXAgYmFja3dhcmQgc2VsZWN0aW9ucywgc28gd2UgY2FuIHNldCB3aXRoIGEgc2luZ2xlIHJhbmdlLlxuXHQgIGlmICghc2VsZWN0aW9uLmV4dGVuZCAmJiBzdGFydCA+IGVuZCkge1xuXHQgICAgdmFyIHRlbXAgPSBlbmQ7XG5cdCAgICBlbmQgPSBzdGFydDtcblx0ICAgIHN0YXJ0ID0gdGVtcDtcblx0ICB9XG5cdFxuXHQgIHZhciBzdGFydE1hcmtlciA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQobm9kZSwgc3RhcnQpO1xuXHQgIHZhciBlbmRNYXJrZXIgPSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KG5vZGUsIGVuZCk7XG5cdFxuXHQgIGlmIChzdGFydE1hcmtlciAmJiBlbmRNYXJrZXIpIHtcblx0ICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG5cdCAgICByYW5nZS5zZXRTdGFydChzdGFydE1hcmtlci5ub2RlLCBzdGFydE1hcmtlci5vZmZzZXQpO1xuXHQgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuXHRcblx0ICAgIGlmIChzdGFydCA+IGVuZCkge1xuXHQgICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuXHQgICAgICBzZWxlY3Rpb24uZXh0ZW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJhbmdlLnNldEVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG5cdCAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHR2YXIgdXNlSUVPZmZzZXRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmIGRvY3VtZW50LnNlbGVjdGlvbjtcblx0XG5cdHZhciBSZWFjdERPTVNlbGVjdGlvbiA9IHtcblx0ICAvKipcblx0ICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcblx0ICAgKi9cblx0ICBnZXRPZmZzZXRzOiB1c2VJRU9mZnNldHMgPyBnZXRJRU9mZnNldHMgOiBnZXRNb2Rlcm5PZmZzZXRzLFxuXHRcblx0ICAvKipcblx0ICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcblx0ICAgKiBAcGFyYW0ge29iamVjdH0gb2Zmc2V0c1xuXHQgICAqL1xuXHQgIHNldE9mZnNldHM6IHVzZUlFT2Zmc2V0cyA/IHNldElFT2Zmc2V0cyA6IHNldE1vZGVybk9mZnNldHNcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01TZWxlY3Rpb247XG5cblxuLyoqKi8gfSxcbi8qIDEzNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NVGV4dGFyZWFcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBBdXRvRm9jdXNNaXhpbiA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpO1xuXHR2YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cdHZhciBMaW5rZWRWYWx1ZVV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NCk7XG5cdHZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHR2YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHR2YXIgUmVhY3RFbGVtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0dmFyIFJlYWN0RE9NID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cdHZhciBSZWFjdFVwZGF0ZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0XG5cdHZhciBhc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciB3YXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdC8vIFN0b3JlIGEgcmVmZXJlbmNlIHRvIHRoZSA8dGV4dGFyZWE+IGBSZWFjdERPTUNvbXBvbmVudGAuIFRPRE86IHVzZSBzdHJpbmdcblx0dmFyIHRleHRhcmVhID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoUmVhY3RET00udGV4dGFyZWEudHlwZSk7XG5cdFxuXHRmdW5jdGlvbiBmb3JjZVVwZGF0ZUlmTW91bnRlZCgpIHtcblx0ICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuXHQgIGlmICh0aGlzLmlzTW91bnRlZCgpKSB7XG5cdCAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG5cdCAgfVxuXHR9XG5cdFxuXHQvKipcblx0ICogSW1wbGVtZW50cyBhIDx0ZXh0YXJlYT4gbmF0aXZlIGNvbXBvbmVudCB0aGF0IGFsbG93cyBzZXR0aW5nIGB2YWx1ZWAsIGFuZFxuXHQgKiBgZGVmYXVsdFZhbHVlYC4gVGhpcyBkaWZmZXJzIGZyb20gdGhlIHRyYWRpdGlvbmFsIERPTSBBUEkgYmVjYXVzZSB2YWx1ZSBpc1xuXHQgKiB1c3VhbGx5IHNldCBhcyBQQ0RBVEEgY2hpbGRyZW4uXG5cdCAqXG5cdCAqIElmIGB2YWx1ZWAgaXMgbm90IHN1cHBsaWVkIChvciBudWxsL3VuZGVmaW5lZCksIHVzZXIgYWN0aW9ucyB0aGF0IGFmZmVjdCB0aGVcblx0ICogdmFsdWUgd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuXG5cdCAqXG5cdCAqIElmIGB2YWx1ZWAgaXMgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsXG5cdCAqIG5vdCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuIEluc3RlYWQsIHRoZSBgdmFsdWVgIHByb3AgbXVzdCBjaGFuZ2UgaW5cblx0ICogb3JkZXIgZm9yIHRoZSByZW5kZXJlZCBlbGVtZW50IHRvIGJlIHVwZGF0ZWQuXG5cdCAqXG5cdCAqIFRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGwgYmUgaW5pdGlhbGl6ZWQgd2l0aCBhbiBlbXB0eSB2YWx1ZSwgdGhlIHByb3Bcblx0ICogYGRlZmF1bHRWYWx1ZWAgaWYgc3BlY2lmaWVkLCBvciB0aGUgY2hpbGRyZW4gY29udGVudCAoZGVwcmVjYXRlZCkuXG5cdCAqL1xuXHR2YXIgUmVhY3RET01UZXh0YXJlYSA9IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50LmNyZWF0ZUNsYXNzKHtcblx0ICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NVGV4dGFyZWEnLFxuXHRcblx0ICBtaXhpbnM6IFtBdXRvRm9jdXNNaXhpbiwgTGlua2VkVmFsdWVVdGlscy5NaXhpbiwgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5dLFxuXHRcblx0ICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlO1xuXHQgICAgLy8gVE9ETyAoeXVuZ3N0ZXJzKTogUmVtb3ZlIHN1cHBvcnQgZm9yIGNoaWxkcmVuIGNvbnRlbnQgaW4gPHRleHRhcmVhPi5cblx0ICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cdCAgICBpZiAoY2hpbGRyZW4gIT0gbnVsbCkge1xuXHQgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG5cdCAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG5cdCAgICAgICAgICBmYWxzZSxcblx0ICAgICAgICAgICdVc2UgdGhlIGBkZWZhdWx0VmFsdWVgIG9yIGB2YWx1ZWAgcHJvcHMgaW5zdGVhZCBvZiBzZXR0aW5nICcgK1xuXHQgICAgICAgICAgJ2NoaWxkcmVuIG9uIDx0ZXh0YXJlYT4uJ1xuXHQgICAgICAgICkgOiBudWxsKTtcblx0ICAgICAgfVxuXHQgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICAgIGRlZmF1bHRWYWx1ZSA9PSBudWxsLFxuXHQgICAgICAgICdJZiB5b3Ugc3VwcGx5IGBkZWZhdWx0VmFsdWVgIG9uIGEgPHRleHRhcmVhPiwgZG8gbm90IHBhc3MgY2hpbGRyZW4uJ1xuXHQgICAgICApIDogaW52YXJpYW50KGRlZmF1bHRWYWx1ZSA9PSBudWxsKSk7XG5cdCAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuXHQgICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgICAgICBjaGlsZHJlbi5sZW5ndGggPD0gMSxcblx0ICAgICAgICAgICc8dGV4dGFyZWE+IGNhbiBvbmx5IGhhdmUgYXQgbW9zdCBvbmUgY2hpbGQuJ1xuXHQgICAgICAgICkgOiBpbnZhcmlhbnQoY2hpbGRyZW4ubGVuZ3RoIDw9IDEpKTtcblx0ICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuWzBdO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBkZWZhdWx0VmFsdWUgPSAnJyArIGNoaWxkcmVuO1xuXHQgICAgfVxuXHQgICAgaWYgKGRlZmF1bHRWYWx1ZSA9PSBudWxsKSB7XG5cdCAgICAgIGRlZmF1bHRWYWx1ZSA9ICcnO1xuXHQgICAgfVxuXHQgICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZSh0aGlzKTtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIC8vIFdlIHNhdmUgdGhlIGluaXRpYWwgdmFsdWUgc28gdGhhdCBgUmVhY3RET01Db21wb25lbnRgIGRvZXNuJ3QgdXBkYXRlXG5cdCAgICAgIC8vIGB0ZXh0Q29udGVudGAgKHVubmVjZXNzYXJ5IHNpbmNlIHdlIHVwZGF0ZSB2YWx1ZSkuXG5cdCAgICAgIC8vIFRoZSBpbml0aWFsIHZhbHVlIGNhbiBiZSBhIGJvb2xlYW4gb3Igb2JqZWN0IHNvIHRoYXQncyB3aHkgaXQnc1xuXHQgICAgICAvLyBmb3JjZWQgdG8gYmUgYSBzdHJpbmcuXG5cdCAgICAgIGluaXRpYWxWYWx1ZTogJycgKyAodmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogZGVmYXVsdFZhbHVlKVxuXHQgICAgfTtcblx0ICB9LFxuXHRcblx0ICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuXHQgICAgLy8gQ2xvbmUgYHRoaXMucHJvcHNgIHNvIHdlIGRvbid0IG11dGF0ZSB0aGUgaW5wdXQuXG5cdCAgICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIHRoaXMucHJvcHMpO1xuXHRcblx0ICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09IG51bGwsXG5cdCAgICAgICdgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgIGRvZXMgbm90IG1ha2Ugc2Vuc2Ugb24gPHRleHRhcmVhPi4nXG5cdCAgICApIDogaW52YXJpYW50KHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09IG51bGwpKTtcblx0XG5cdCAgICBwcm9wcy5kZWZhdWx0VmFsdWUgPSBudWxsO1xuXHQgICAgcHJvcHMudmFsdWUgPSBudWxsO1xuXHQgICAgcHJvcHMub25DaGFuZ2UgPSB0aGlzLl9oYW5kbGVDaGFuZ2U7XG5cdFxuXHQgICAgLy8gQWx3YXlzIHNldCBjaGlsZHJlbiB0byB0aGUgc2FtZSB0aGluZy4gSW4gSUU5LCB0aGUgc2VsZWN0aW9uIHJhbmdlIHdpbGxcblx0ICAgIC8vIGdldCByZXNldCBpZiBgdGV4dENvbnRlbnRgIGlzIG11dGF0ZWQuXG5cdCAgICByZXR1cm4gdGV4dGFyZWEocHJvcHMsIHRoaXMuc3RhdGUuaW5pdGlhbFZhbHVlKTtcblx0ICB9LFxuXHRcblx0ICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uKHByZXZQcm9wcywgcHJldlN0YXRlLCBwcmV2Q29udGV4dCkge1xuXHQgICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZSh0aGlzKTtcblx0ICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdCAgICAgIHZhciByb290Tm9kZSA9IHRoaXMuZ2V0RE9NTm9kZSgpO1xuXHQgICAgICAvLyBDYXN0IGB2YWx1ZWAgdG8gYSBzdHJpbmcgdG8gZW5zdXJlIHRoZSB2YWx1ZSBpcyBzZXQgY29ycmVjdGx5LiBXaGlsZVxuXHQgICAgICAvLyBicm93c2VycyB0eXBpY2FsbHkgZG8gdGhpcyBhcyBuZWNlc3NhcnksIGpzZG9tIGRvZXNuJ3QuXG5cdCAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KHJvb3ROb2RlLCAndmFsdWUnLCAnJyArIHZhbHVlKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICBfaGFuZGxlQ2hhbmdlOiBmdW5jdGlvbihldmVudCkge1xuXHQgICAgdmFyIHJldHVyblZhbHVlO1xuXHQgICAgdmFyIG9uQ2hhbmdlID0gTGlua2VkVmFsdWVVdGlscy5nZXRPbkNoYW5nZSh0aGlzKTtcblx0ICAgIGlmIChvbkNoYW5nZSkge1xuXHQgICAgICByZXR1cm5WYWx1ZSA9IG9uQ2hhbmdlLmNhbGwodGhpcywgZXZlbnQpO1xuXHQgICAgfVxuXHQgICAgUmVhY3RVcGRhdGVzLmFzYXAoZm9yY2VVcGRhdGVJZk1vdW50ZWQsIHRoaXMpO1xuXHQgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuXHQgIH1cblx0XG5cdH0pO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVRleHRhcmVhO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogMTM4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBSZWFjdFVwZGF0ZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0dmFyIFRyYW5zYWN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7XG5cdFxuXHR2YXIgYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0dmFyIGVtcHR5RnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblx0XG5cdHZhciBSRVNFVF9CQVRDSEVEX1VQREFURVMgPSB7XG5cdCAgaW5pdGlhbGl6ZTogZW1wdHlGdW5jdGlvbixcblx0ICBjbG9zZTogZnVuY3Rpb24oKSB7XG5cdCAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID0gZmFsc2U7XG5cdCAgfVxuXHR9O1xuXHRcblx0dmFyIEZMVVNIX0JBVENIRURfVVBEQVRFUyA9IHtcblx0ICBpbml0aWFsaXplOiBlbXB0eUZ1bmN0aW9uLFxuXHQgIGNsb3NlOiBSZWFjdFVwZGF0ZXMuZmx1c2hCYXRjaGVkVXBkYXRlcy5iaW5kKFJlYWN0VXBkYXRlcylcblx0fTtcblx0XG5cdHZhciBUUkFOU0FDVElPTl9XUkFQUEVSUyA9IFtGTFVTSF9CQVRDSEVEX1VQREFURVMsIFJFU0VUX0JBVENIRURfVVBEQVRFU107XG5cdFxuXHRmdW5jdGlvbiBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24oKSB7XG5cdCAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xuXHR9XG5cdFxuXHRhc3NpZ24oXG5cdCAgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uLnByb3RvdHlwZSxcblx0ICBUcmFuc2FjdGlvbi5NaXhpbixcblx0ICB7XG5cdCAgICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTO1xuXHQgICAgfVxuXHQgIH1cblx0KTtcblx0XG5cdHZhciB0cmFuc2FjdGlvbiA9IG5ldyBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24oKTtcblx0XG5cdHZhciBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5ID0ge1xuXHQgIGlzQmF0Y2hpbmdVcGRhdGVzOiBmYWxzZSxcblx0XG5cdCAgLyoqXG5cdCAgICogQ2FsbCB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gaW4gYSBjb250ZXh0IHdpdGhpbiB3aGljaCBjYWxscyB0byBgc2V0U3RhdGVgXG5cdCAgICogYW5kIGZyaWVuZHMgYXJlIGJhdGNoZWQgc3VjaCB0aGF0IGNvbXBvbmVudHMgYXJlbid0IHVwZGF0ZWQgdW5uZWNlc3NhcmlseS5cblx0ICAgKi9cblx0ICBiYXRjaGVkVXBkYXRlczogZnVuY3Rpb24oY2FsbGJhY2ssIGEsIGIpIHtcblx0ICAgIHZhciBhbHJlYWR5QmF0Y2hpbmdVcGRhdGVzID0gUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcztcblx0XG5cdCAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID0gdHJ1ZTtcblx0XG5cdCAgICAvLyBUaGUgY29kZSBpcyB3cml0dGVuIHRoaXMgd2F5IHRvIGF2b2lkIGV4dHJhIGFsbG9jYXRpb25zXG5cdCAgICBpZiAoYWxyZWFkeUJhdGNoaW5nVXBkYXRlcykge1xuXHQgICAgICBjYWxsYmFjayhhLCBiKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRyYW5zYWN0aW9uLnBlcmZvcm0oY2FsbGJhY2ssIG51bGwsIGEsIGIpO1xuXHQgICAgfVxuXHQgIH1cblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneTtcblxuXG4vKioqLyB9LFxuLyogMTM5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3REZWZhdWx0SW5qZWN0aW9uXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgQmVmb3JlSW5wdXRFdmVudFBsdWdpbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTE1KTtcblx0dmFyIENoYW5nZUV2ZW50UGx1Z2luID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTYpO1xuXHR2YXIgQ2xpZW50UmVhY3RSb290SW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExNyk7XG5cdHZhciBDb21wb3NpdGlvbkV2ZW50UGx1Z2luID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTgpO1xuXHR2YXIgRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMSk7XG5cdHZhciBFbnRlckxlYXZlRXZlbnRQbHVnaW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMik7XG5cdHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdHZhciBIVE1MRE9NUHJvcGVydHlDb25maWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNCk7XG5cdHZhciBNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjUpO1xuXHR2YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblx0dmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID1cblx0ICBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyOCk7XG5cdHZhciBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzgpO1xuXHR2YXIgUmVhY3RET01Db21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY0KTtcblx0dmFyIFJlYWN0RE9NQnV0dG9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjkpO1xuXHR2YXIgUmVhY3RET01Gb3JtID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzApO1xuXHR2YXIgUmVhY3RET01JbWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMik7XG5cdHZhciBSZWFjdERPTUlucHV0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzMpO1xuXHR2YXIgUmVhY3RET01PcHRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzNCk7XG5cdHZhciBSZWFjdERPTVNlbGVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTM1KTtcblx0dmFyIFJlYWN0RE9NVGV4dGFyZWEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzNyk7XG5cdHZhciBSZWFjdEV2ZW50TGlzdGVuZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0NCk7XG5cdHZhciBSZWFjdEluamVjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTQ1KTtcblx0dmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cdHZhciBSZWFjdE1vdW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblx0dmFyIFNlbGVjdEV2ZW50UGx1Z2luID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTEpO1xuXHR2YXIgU2VydmVyUmVhY3RSb290SW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1Mik7XG5cdHZhciBTaW1wbGVFdmVudFBsdWdpbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTUzKTtcblx0dmFyIFNWR0RPTVByb3BlcnR5Q29uZmlnID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTApO1xuXHRcblx0dmFyIGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjYpO1xuXHRcblx0ZnVuY3Rpb24gaW5qZWN0KCkge1xuXHQgIFJlYWN0SW5qZWN0aW9uLkV2ZW50RW1pdHRlci5pbmplY3RSZWFjdEV2ZW50TGlzdGVuZXIoXG5cdCAgICBSZWFjdEV2ZW50TGlzdGVuZXJcblx0ICApO1xuXHRcblx0ICAvKipcblx0ICAgKiBJbmplY3QgbW9kdWxlcyBmb3IgcmVzb2x2aW5nIERPTSBoaWVyYXJjaHkgYW5kIHBsdWdpbiBvcmRlcmluZy5cblx0ICAgKi9cblx0ICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RFdmVudFBsdWdpbk9yZGVyKERlZmF1bHRFdmVudFBsdWdpbk9yZGVyKTtcblx0ICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RJbnN0YW5jZUhhbmRsZShSZWFjdEluc3RhbmNlSGFuZGxlcyk7XG5cdCAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0TW91bnQoUmVhY3RNb3VudCk7XG5cdFxuXHQgIC8qKlxuXHQgICAqIFNvbWUgaW1wb3J0YW50IGV2ZW50IHBsdWdpbnMgaW5jbHVkZWQgYnkgZGVmYXVsdCAod2l0aG91dCBoYXZpbmcgdG8gcmVxdWlyZVxuXHQgICAqIHRoZW0pLlxuXHQgICAqL1xuXHQgIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7XG5cdCAgICBTaW1wbGVFdmVudFBsdWdpbjogU2ltcGxlRXZlbnRQbHVnaW4sXG5cdCAgICBFbnRlckxlYXZlRXZlbnRQbHVnaW46IEVudGVyTGVhdmVFdmVudFBsdWdpbixcblx0ICAgIENoYW5nZUV2ZW50UGx1Z2luOiBDaGFuZ2VFdmVudFBsdWdpbixcblx0ICAgIENvbXBvc2l0aW9uRXZlbnRQbHVnaW46IENvbXBvc2l0aW9uRXZlbnRQbHVnaW4sXG5cdCAgICBNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luOiBNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luLFxuXHQgICAgU2VsZWN0RXZlbnRQbHVnaW46IFNlbGVjdEV2ZW50UGx1Z2luLFxuXHQgICAgQmVmb3JlSW5wdXRFdmVudFBsdWdpbjogQmVmb3JlSW5wdXRFdmVudFBsdWdpblxuXHQgIH0pO1xuXHRcblx0ICBSZWFjdEluamVjdGlvbi5OYXRpdmVDb21wb25lbnQuaW5qZWN0R2VuZXJpY0NvbXBvbmVudENsYXNzKFxuXHQgICAgUmVhY3RET01Db21wb25lbnRcblx0ICApO1xuXHRcblx0ICBSZWFjdEluamVjdGlvbi5OYXRpdmVDb21wb25lbnQuaW5qZWN0Q29tcG9uZW50Q2xhc3Nlcyh7XG5cdCAgICAnYnV0dG9uJzogUmVhY3RET01CdXR0b24sXG5cdCAgICAnZm9ybSc6IFJlYWN0RE9NRm9ybSxcblx0ICAgICdpbWcnOiBSZWFjdERPTUltZyxcblx0ICAgICdpbnB1dCc6IFJlYWN0RE9NSW5wdXQsXG5cdCAgICAnb3B0aW9uJzogUmVhY3RET01PcHRpb24sXG5cdCAgICAnc2VsZWN0JzogUmVhY3RET01TZWxlY3QsXG5cdCAgICAndGV4dGFyZWEnOiBSZWFjdERPTVRleHRhcmVhLFxuXHRcblx0ICAgICdodG1sJzogY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQoJ2h0bWwnKSxcblx0ICAgICdoZWFkJzogY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQoJ2hlYWQnKSxcblx0ICAgICdib2R5JzogY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQoJ2JvZHknKVxuXHQgIH0pO1xuXHRcblx0ICAvLyBUaGlzIG5lZWRzIHRvIGhhcHBlbiBhZnRlciBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudCgpIG90aGVyd2lzZSB0aGUgbWl4aW5cblx0ICAvLyBnZXRzIGRvdWJsZSBpbmplY3RlZC5cblx0ICBSZWFjdEluamVjdGlvbi5Db21wb3NpdGVDb21wb25lbnQuaW5qZWN0TWl4aW4oUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4pO1xuXHRcblx0ICBSZWFjdEluamVjdGlvbi5ET01Qcm9wZXJ0eS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhIVE1MRE9NUHJvcGVydHlDb25maWcpO1xuXHQgIFJlYWN0SW5qZWN0aW9uLkRPTVByb3BlcnR5LmluamVjdERPTVByb3BlcnR5Q29uZmlnKFNWR0RPTVByb3BlcnR5Q29uZmlnKTtcblx0XG5cdCAgUmVhY3RJbmplY3Rpb24uRW1wdHlDb21wb25lbnQuaW5qZWN0RW1wdHlDb21wb25lbnQoJ25vc2NyaXB0Jyk7XG5cdFxuXHQgIFJlYWN0SW5qZWN0aW9uLlVwZGF0ZXMuaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb24oXG5cdCAgICBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudC5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uXG5cdCAgKTtcblx0ICBSZWFjdEluamVjdGlvbi5VcGRhdGVzLmluamVjdEJhdGNoaW5nU3RyYXRlZ3koXG5cdCAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5XG5cdCAgKTtcblx0XG5cdCAgUmVhY3RJbmplY3Rpb24uUm9vdEluZGV4LmluamVjdENyZWF0ZVJlYWN0Um9vdEluZGV4KFxuXHQgICAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID9cblx0ICAgICAgQ2xpZW50UmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXggOlxuXHQgICAgICBTZXJ2ZXJSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleFxuXHQgICk7XG5cdFxuXHQgIFJlYWN0SW5qZWN0aW9uLkNvbXBvbmVudC5pbmplY3RFbnZpcm9ubWVudChSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCk7XG5cdFxuXHQgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgIHZhciB1cmwgPSAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmKSB8fCAnJztcblx0ICAgIGlmICgoL1s/Jl1yZWFjdF9wZXJmXFxiLykudGVzdCh1cmwpKSB7XG5cdCAgICAgIHZhciBSZWFjdERlZmF1bHRQZXJmID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDApO1xuXHQgICAgICBSZWFjdERlZmF1bHRQZXJmLnN0YXJ0KCk7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IHtcblx0ICBpbmplY3Q6IGluamVjdFxuXHR9O1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogMTQwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RGVmYXVsdFBlcmZcblx0ICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBET01Qcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXHR2YXIgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDEpO1xuXHR2YXIgUmVhY3RNb3VudCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdHZhciBSZWFjdFBlcmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcblx0XG5cdHZhciBwZXJmb3JtYW5jZU5vdyA9IF9fd2VicGFja19yZXF1aXJlX18oMTgwKTtcblx0XG5cdGZ1bmN0aW9uIHJvdW5kRmxvYXQodmFsKSB7XG5cdCAgcmV0dXJuIE1hdGguZmxvb3IodmFsICogMTAwKSAvIDEwMDtcblx0fVxuXHRcblx0ZnVuY3Rpb24gYWRkVmFsdWUob2JqLCBrZXksIHZhbCkge1xuXHQgIG9ialtrZXldID0gKG9ialtrZXldIHx8IDApICsgdmFsO1xuXHR9XG5cdFxuXHR2YXIgUmVhY3REZWZhdWx0UGVyZiA9IHtcblx0ICBfYWxsTWVhc3VyZW1lbnRzOiBbXSwgLy8gbGFzdCBpdGVtIGluIHRoZSBsaXN0IGlzIHRoZSBjdXJyZW50IG9uZVxuXHQgIF9tb3VudFN0YWNrOiBbMF0sXG5cdCAgX2luamVjdGVkOiBmYWxzZSxcblx0XG5cdCAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgaWYgKCFSZWFjdERlZmF1bHRQZXJmLl9pbmplY3RlZCkge1xuXHQgICAgICBSZWFjdFBlcmYuaW5qZWN0aW9uLmluamVjdE1lYXN1cmUoUmVhY3REZWZhdWx0UGVyZi5tZWFzdXJlKTtcblx0ICAgIH1cblx0XG5cdCAgICBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHMubGVuZ3RoID0gMDtcblx0ICAgIFJlYWN0UGVyZi5lbmFibGVNZWFzdXJlID0gdHJ1ZTtcblx0ICB9LFxuXHRcblx0ICBzdG9wOiBmdW5jdGlvbigpIHtcblx0ICAgIFJlYWN0UGVyZi5lbmFibGVNZWFzdXJlID0gZmFsc2U7XG5cdCAgfSxcblx0XG5cdCAgZ2V0TGFzdE1lYXN1cmVtZW50czogZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuXHQgIH0sXG5cdFxuXHQgIHByaW50RXhjbHVzaXZlOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcblx0ICAgIG1lYXN1cmVtZW50cyA9IG1lYXN1cmVtZW50cyB8fCBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHM7XG5cdCAgICB2YXIgc3VtbWFyeSA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRFeGNsdXNpdmVTdW1tYXJ5KG1lYXN1cmVtZW50cyk7XG5cdCAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAnQ29tcG9uZW50IGNsYXNzIG5hbWUnOiBpdGVtLmNvbXBvbmVudE5hbWUsXG5cdCAgICAgICAgJ1RvdGFsIGluY2x1c2l2ZSB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0uaW5jbHVzaXZlKSxcblx0ICAgICAgICAnRXhjbHVzaXZlIG1vdW50IHRpbWUgKG1zKSc6IHJvdW5kRmxvYXQoaXRlbS5leGNsdXNpdmUpLFxuXHQgICAgICAgICdFeGNsdXNpdmUgcmVuZGVyIHRpbWUgKG1zKSc6IHJvdW5kRmxvYXQoaXRlbS5yZW5kZXIpLFxuXHQgICAgICAgICdNb3VudCB0aW1lIHBlciBpbnN0YW5jZSAobXMpJzogcm91bmRGbG9hdChpdGVtLmV4Y2x1c2l2ZSAvIGl0ZW0uY291bnQpLFxuXHQgICAgICAgICdSZW5kZXIgdGltZSBwZXIgaW5zdGFuY2UgKG1zKSc6IHJvdW5kRmxvYXQoaXRlbS5yZW5kZXIgLyBpdGVtLmNvdW50KSxcblx0ICAgICAgICAnSW5zdGFuY2VzJzogaXRlbS5jb3VudFxuXHQgICAgICB9O1xuXHQgICAgfSkpO1xuXHQgICAgLy8gVE9ETzogUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldFRvdGFsVGltZSgpIGRvZXMgbm90IHJldHVybiB0aGUgY29ycmVjdFxuXHQgICAgLy8gbnVtYmVyLlxuXHQgIH0sXG5cdFxuXHQgIHByaW50SW5jbHVzaXZlOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcblx0ICAgIG1lYXN1cmVtZW50cyA9IG1lYXN1cmVtZW50cyB8fCBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHM7XG5cdCAgICB2YXIgc3VtbWFyeSA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRJbmNsdXNpdmVTdW1tYXJ5KG1lYXN1cmVtZW50cyk7XG5cdCAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAnT3duZXIgPiBjb21wb25lbnQnOiBpdGVtLmNvbXBvbmVudE5hbWUsXG5cdCAgICAgICAgJ0luY2x1c2l2ZSB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0udGltZSksXG5cdCAgICAgICAgJ0luc3RhbmNlcyc6IGl0ZW0uY291bnRcblx0ICAgICAgfTtcblx0ICAgIH0pKTtcblx0ICAgIGNvbnNvbGUubG9nKFxuXHQgICAgICAnVG90YWwgdGltZTonLFxuXHQgICAgICBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykudG9GaXhlZCgyKSArICcgbXMnXG5cdCAgICApO1xuXHQgIH0sXG5cdFxuXHQgIGdldE1lYXN1cmVtZW50c1N1bW1hcnlNYXA6IGZ1bmN0aW9uKG1lYXN1cmVtZW50cykge1xuXHQgICAgdmFyIHN1bW1hcnkgPSBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0SW5jbHVzaXZlU3VtbWFyeShcblx0ICAgICAgbWVhc3VyZW1lbnRzLFxuXHQgICAgICB0cnVlXG5cdCAgICApO1xuXHQgICAgcmV0dXJuIHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAnT3duZXIgPiBjb21wb25lbnQnOiBpdGVtLmNvbXBvbmVudE5hbWUsXG5cdCAgICAgICAgJ1dhc3RlZCB0aW1lIChtcyknOiBpdGVtLnRpbWUsXG5cdCAgICAgICAgJ0luc3RhbmNlcyc6IGl0ZW0uY291bnRcblx0ICAgICAgfTtcblx0ICAgIH0pO1xuXHQgIH0sXG5cdFxuXHQgIHByaW50V2FzdGVkOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcblx0ICAgIG1lYXN1cmVtZW50cyA9IG1lYXN1cmVtZW50cyB8fCBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHM7XG5cdCAgICBjb25zb2xlLnRhYmxlKFJlYWN0RGVmYXVsdFBlcmYuZ2V0TWVhc3VyZW1lbnRzU3VtbWFyeU1hcChtZWFzdXJlbWVudHMpKTtcblx0ICAgIGNvbnNvbGUubG9nKFxuXHQgICAgICAnVG90YWwgdGltZTonLFxuXHQgICAgICBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykudG9GaXhlZCgyKSArICcgbXMnXG5cdCAgICApO1xuXHQgIH0sXG5cdFxuXHQgIHByaW50RE9NOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcblx0ICAgIG1lYXN1cmVtZW50cyA9IG1lYXN1cmVtZW50cyB8fCBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHM7XG5cdCAgICB2YXIgc3VtbWFyeSA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRET01TdW1tYXJ5KG1lYXN1cmVtZW50cyk7XG5cdCAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcblx0ICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuXHQgICAgICByZXN1bHRbRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUVdID0gaXRlbS5pZDtcblx0ICAgICAgcmVzdWx0Wyd0eXBlJ10gPSBpdGVtLnR5cGU7XG5cdCAgICAgIHJlc3VsdFsnYXJncyddID0gSlNPTi5zdHJpbmdpZnkoaXRlbS5hcmdzKTtcblx0ICAgICAgcmV0dXJuIHJlc3VsdDtcblx0ICAgIH0pKTtcblx0ICAgIGNvbnNvbGUubG9nKFxuXHQgICAgICAnVG90YWwgdGltZTonLFxuXHQgICAgICBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykudG9GaXhlZCgyKSArICcgbXMnXG5cdCAgICApO1xuXHQgIH0sXG5cdFxuXHQgIF9yZWNvcmRXcml0ZTogZnVuY3Rpb24oaWQsIGZuTmFtZSwgdG90YWxUaW1lLCBhcmdzKSB7XG5cdCAgICAvLyBUT0RPOiB0b3RhbFRpbWUgaXNuJ3QgdGhhdCB1c2VmdWwgc2luY2UgaXQgZG9lc24ndCBjb3VudCBwYWludHMvcmVmbG93c1xuXHQgICAgdmFyIHdyaXRlcyA9XG5cdCAgICAgIFJlYWN0RGVmYXVsdFBlcmZcblx0ICAgICAgICAuX2FsbE1lYXN1cmVtZW50c1tSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHMubGVuZ3RoIC0gMV1cblx0ICAgICAgICAud3JpdGVzO1xuXHQgICAgd3JpdGVzW2lkXSA9IHdyaXRlc1tpZF0gfHwgW107XG5cdCAgICB3cml0ZXNbaWRdLnB1c2goe1xuXHQgICAgICB0eXBlOiBmbk5hbWUsXG5cdCAgICAgIHRpbWU6IHRvdGFsVGltZSxcblx0ICAgICAgYXJnczogYXJnc1xuXHQgICAgfSk7XG5cdCAgfSxcblx0XG5cdCAgbWVhc3VyZTogZnVuY3Rpb24obW9kdWxlTmFtZSwgZm5OYW1lLCBmdW5jKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24oKSB7Zm9yICh2YXIgYXJncz1bXSwkX18wPTAsJF9fMT1hcmd1bWVudHMubGVuZ3RoOyRfXzA8JF9fMTskX18wKyspIGFyZ3MucHVzaChhcmd1bWVudHNbJF9fMF0pO1xuXHQgICAgICB2YXIgdG90YWxUaW1lO1xuXHQgICAgICB2YXIgcnY7XG5cdCAgICAgIHZhciBzdGFydDtcblx0XG5cdCAgICAgIGlmIChmbk5hbWUgPT09ICdfcmVuZGVyTmV3Um9vdENvbXBvbmVudCcgfHxcblx0ICAgICAgICAgIGZuTmFtZSA9PT0gJ2ZsdXNoQmF0Y2hlZFVwZGF0ZXMnKSB7XG5cdCAgICAgICAgLy8gQSBcIm1lYXN1cmVtZW50XCIgaXMgYSBzZXQgb2YgbWV0cmljcyByZWNvcmRlZCBmb3IgZWFjaCBmbHVzaC4gV2Ugd2FudFxuXHQgICAgICAgIC8vIHRvIGdyb3VwIHRoZSBtZXRyaWNzIGZvciBhIGdpdmVuIGZsdXNoIHRvZ2V0aGVyIHNvIHdlIGNhbiBsb29rIGF0IHRoZVxuXHQgICAgICAgIC8vIGNvbXBvbmVudHMgdGhhdCByZW5kZXJlZCBhbmQgdGhlIERPTSBvcGVyYXRpb25zIHRoYXQgYWN0dWFsbHlcblx0ICAgICAgICAvLyBoYXBwZW5lZCB0byBkZXRlcm1pbmUgdGhlIGFtb3VudCBvZiBcIndhc3RlZCB3b3JrXCIgcGVyZm9ybWVkLlxuXHQgICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5wdXNoKHtcblx0ICAgICAgICAgIGV4Y2x1c2l2ZToge30sXG5cdCAgICAgICAgICBpbmNsdXNpdmU6IHt9LFxuXHQgICAgICAgICAgcmVuZGVyOiB7fSxcblx0ICAgICAgICAgIGNvdW50czoge30sXG5cdCAgICAgICAgICB3cml0ZXM6IHt9LFxuXHQgICAgICAgICAgZGlzcGxheU5hbWVzOiB7fSxcblx0ICAgICAgICAgIHRvdGFsVGltZTogMFxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHN0YXJ0ID0gcGVyZm9ybWFuY2VOb3coKTtcblx0ICAgICAgICBydiA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG5cdCAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzW1xuXHQgICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCAtIDFcblx0ICAgICAgICBdLnRvdGFsVGltZSA9IHBlcmZvcm1hbmNlTm93KCkgLSBzdGFydDtcblx0ICAgICAgICByZXR1cm4gcnY7XG5cdCAgICAgIH0gZWxzZSBpZiAobW9kdWxlTmFtZSA9PT0gJ1JlYWN0RE9NSURPcGVyYXRpb25zJyB8fFxuXHQgICAgICAgIG1vZHVsZU5hbWUgPT09ICdSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCcpIHtcblx0ICAgICAgICBzdGFydCA9IHBlcmZvcm1hbmNlTm93KCk7XG5cdCAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHQgICAgICAgIHRvdGFsVGltZSA9IHBlcmZvcm1hbmNlTm93KCkgLSBzdGFydDtcblx0XG5cdCAgICAgICAgaWYgKGZuTmFtZSA9PT0gJ21vdW50SW1hZ2VJbnRvTm9kZScpIHtcblx0ICAgICAgICAgIHZhciBtb3VudElEID0gUmVhY3RNb3VudC5nZXRJRChhcmdzWzFdKTtcblx0ICAgICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX3JlY29yZFdyaXRlKG1vdW50SUQsIGZuTmFtZSwgdG90YWxUaW1lLCBhcmdzWzBdKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKGZuTmFtZSA9PT0gJ2Rhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlcycpIHtcblx0ICAgICAgICAgIC8vIHNwZWNpYWwgZm9ybWF0XG5cdCAgICAgICAgICBhcmdzWzBdLmZvckVhY2goZnVuY3Rpb24odXBkYXRlKSB7XG5cdCAgICAgICAgICAgIHZhciB3cml0ZUFyZ3MgPSB7fTtcblx0ICAgICAgICAgICAgaWYgKHVwZGF0ZS5mcm9tSW5kZXggIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICB3cml0ZUFyZ3MuZnJvbUluZGV4ID0gdXBkYXRlLmZyb21JbmRleDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAodXBkYXRlLnRvSW5kZXggIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICB3cml0ZUFyZ3MudG9JbmRleCA9IHVwZGF0ZS50b0luZGV4O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICh1cGRhdGUudGV4dENvbnRlbnQgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICB3cml0ZUFyZ3MudGV4dENvbnRlbnQgPSB1cGRhdGUudGV4dENvbnRlbnQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKHVwZGF0ZS5tYXJrdXBJbmRleCAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgIHdyaXRlQXJncy5tYXJrdXAgPSBhcmdzWzFdW3VwZGF0ZS5tYXJrdXBJbmRleF07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fcmVjb3JkV3JpdGUoXG5cdCAgICAgICAgICAgICAgdXBkYXRlLnBhcmVudElELFxuXHQgICAgICAgICAgICAgIHVwZGF0ZS50eXBlLFxuXHQgICAgICAgICAgICAgIHRvdGFsVGltZSxcblx0ICAgICAgICAgICAgICB3cml0ZUFyZ3Ncblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAvLyBiYXNpYyBmb3JtYXRcblx0ICAgICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX3JlY29yZFdyaXRlKFxuXHQgICAgICAgICAgICBhcmdzWzBdLFxuXHQgICAgICAgICAgICBmbk5hbWUsXG5cdCAgICAgICAgICAgIHRvdGFsVGltZSxcblx0ICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncywgMSlcblx0ICAgICAgICAgICk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBydjtcblx0ICAgICAgfSBlbHNlIGlmIChtb2R1bGVOYW1lID09PSAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnICYmIChcblx0ICAgICAgICBmbk5hbWUgPT09ICdtb3VudENvbXBvbmVudCcgfHxcblx0ICAgICAgICBmbk5hbWUgPT09ICd1cGRhdGVDb21wb25lbnQnIHx8IC8vIFRPRE86IHJlY2VpdmVDb21wb25lbnQoKT9cblx0ICAgICAgICBmbk5hbWUgPT09ICdfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50JykpIHtcblx0XG5cdCAgICAgICAgdmFyIHJvb3ROb2RlSUQgPSBmbk5hbWUgPT09ICdtb3VudENvbXBvbmVudCcgP1xuXHQgICAgICAgICAgYXJnc1swXSA6XG5cdCAgICAgICAgICB0aGlzLl9yb290Tm9kZUlEO1xuXHQgICAgICAgIHZhciBpc1JlbmRlciA9IGZuTmFtZSA9PT0gJ19yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQnO1xuXHQgICAgICAgIHZhciBpc01vdW50ID0gZm5OYW1lID09PSAnbW91bnRDb21wb25lbnQnO1xuXHRcblx0ICAgICAgICB2YXIgbW91bnRTdGFjayA9IFJlYWN0RGVmYXVsdFBlcmYuX21vdW50U3RhY2s7XG5cdCAgICAgICAgdmFyIGVudHJ5ID0gUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzW1xuXHQgICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCAtIDFcblx0ICAgICAgICBdO1xuXHRcblx0ICAgICAgICBpZiAoaXNSZW5kZXIpIHtcblx0ICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LmNvdW50cywgcm9vdE5vZGVJRCwgMSk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChpc01vdW50KSB7XG5cdCAgICAgICAgICBtb3VudFN0YWNrLnB1c2goMCk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBzdGFydCA9IHBlcmZvcm1hbmNlTm93KCk7XG5cdCAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHQgICAgICAgIHRvdGFsVGltZSA9IHBlcmZvcm1hbmNlTm93KCkgLSBzdGFydDtcblx0XG5cdCAgICAgICAgaWYgKGlzUmVuZGVyKSB7XG5cdCAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5yZW5kZXIsIHJvb3ROb2RlSUQsIHRvdGFsVGltZSk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChpc01vdW50KSB7XG5cdCAgICAgICAgICB2YXIgc3ViTW91bnRUaW1lID0gbW91bnRTdGFjay5wb3AoKTtcblx0ICAgICAgICAgIG1vdW50U3RhY2tbbW91bnRTdGFjay5sZW5ndGggLSAxXSArPSB0b3RhbFRpbWU7XG5cdCAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5leGNsdXNpdmUsIHJvb3ROb2RlSUQsIHRvdGFsVGltZSAtIHN1Yk1vdW50VGltZSk7XG5cdCAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5pbmNsdXNpdmUsIHJvb3ROb2RlSUQsIHRvdGFsVGltZSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LmluY2x1c2l2ZSwgcm9vdE5vZGVJRCwgdG90YWxUaW1lKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGVudHJ5LmRpc3BsYXlOYW1lc1tyb290Tm9kZUlEXSA9IHtcblx0ICAgICAgICAgIGN1cnJlbnQ6IHRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWUsXG5cdCAgICAgICAgICBvd25lcjogdGhpcy5fb3duZXIgPyB0aGlzLl9vd25lci5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSA6ICc8cm9vdD4nXG5cdCAgICAgICAgfTtcblx0XG5cdCAgICAgICAgcmV0dXJuIHJ2O1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIH1cblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3REZWZhdWx0UGVyZjtcblxuXG4vKioqLyB9LFxuLyogMTQxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpc1xuXHQgKi9cblx0XG5cdHZhciBhc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0Ly8gRG9uJ3QgdHJ5IHRvIHNhdmUgdXNlcnMgbGVzcyB0aGFuIDEuMm1zIChhIG51bWJlciBJIG1hZGUgdXApXG5cdHZhciBET05UX0NBUkVfVEhSRVNIT0xEID0gMS4yO1xuXHR2YXIgRE9NX09QRVJBVElPTl9UWVBFUyA9IHtcblx0ICAnbW91bnRJbWFnZUludG9Ob2RlJzogJ3NldCBpbm5lckhUTUwnLFxuXHQgIElOU0VSVF9NQVJLVVA6ICdzZXQgaW5uZXJIVE1MJyxcblx0ICBNT1ZFX0VYSVNUSU5HOiAnbW92ZScsXG5cdCAgUkVNT1ZFX05PREU6ICdyZW1vdmUnLFxuXHQgIFRFWFRfQ09OVEVOVDogJ3NldCB0ZXh0Q29udGVudCcsXG5cdCAgJ3VwZGF0ZVByb3BlcnR5QnlJRCc6ICd1cGRhdGUgYXR0cmlidXRlJyxcblx0ICAnZGVsZXRlUHJvcGVydHlCeUlEJzogJ2RlbGV0ZSBhdHRyaWJ1dGUnLFxuXHQgICd1cGRhdGVTdHlsZXNCeUlEJzogJ3VwZGF0ZSBzdHlsZXMnLFxuXHQgICd1cGRhdGVJbm5lckhUTUxCeUlEJzogJ3NldCBpbm5lckhUTUwnLFxuXHQgICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQnOiAncmVwbGFjZSdcblx0fTtcblx0XG5cdGZ1bmN0aW9uIGdldFRvdGFsVGltZShtZWFzdXJlbWVudHMpIHtcblx0ICAvLyBUT0RPOiByZXR1cm4gbnVtYmVyIG9mIERPTSBvcHM/IGNvdWxkIGJlIG1pc2xlYWRpbmcuXG5cdCAgLy8gVE9ETzogbWVhc3VyZSBkcm9wcGVkIGZyYW1lcyBhZnRlciByZWNvbmNpbGU/XG5cdCAgLy8gVE9ETzogbG9nIHRvdGFsIHRpbWUgb2YgZWFjaCByZWNvbmNpbGUgYW5kIHRoZSB0b3AtbGV2ZWwgY29tcG9uZW50XG5cdCAgLy8gY2xhc3MgdGhhdCB0cmlnZ2VyZWQgaXQuXG5cdCAgdmFyIHRvdGFsVGltZSA9IDA7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWFzdXJlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0ICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcblx0ICAgIHRvdGFsVGltZSArPSBtZWFzdXJlbWVudC50b3RhbFRpbWU7XG5cdCAgfVxuXHQgIHJldHVybiB0b3RhbFRpbWU7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldERPTVN1bW1hcnkobWVhc3VyZW1lbnRzKSB7XG5cdCAgdmFyIGl0ZW1zID0gW107XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWFzdXJlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0ICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcblx0ICAgIHZhciBpZDtcblx0XG5cdCAgICBmb3IgKGlkIGluIG1lYXN1cmVtZW50LndyaXRlcykge1xuXHQgICAgICBtZWFzdXJlbWVudC53cml0ZXNbaWRdLmZvckVhY2goZnVuY3Rpb24od3JpdGUpIHtcblx0ICAgICAgICBpdGVtcy5wdXNoKHtcblx0ICAgICAgICAgIGlkOiBpZCxcblx0ICAgICAgICAgIHR5cGU6IERPTV9PUEVSQVRJT05fVFlQRVNbd3JpdGUudHlwZV0gfHwgd3JpdGUudHlwZSxcblx0ICAgICAgICAgIGFyZ3M6IHdyaXRlLmFyZ3Ncblx0ICAgICAgICB9KTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBpdGVtcztcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2V0RXhjbHVzaXZlU3VtbWFyeShtZWFzdXJlbWVudHMpIHtcblx0ICB2YXIgY2FuZGlkYXRlcyA9IHt9O1xuXHQgIHZhciBkaXNwbGF5TmFtZTtcblx0XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWFzdXJlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0ICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcblx0ICAgIHZhciBhbGxJRHMgPSBhc3NpZ24oXG5cdCAgICAgIHt9LFxuXHQgICAgICBtZWFzdXJlbWVudC5leGNsdXNpdmUsXG5cdCAgICAgIG1lYXN1cmVtZW50LmluY2x1c2l2ZVxuXHQgICAgKTtcblx0XG5cdCAgICBmb3IgKHZhciBpZCBpbiBhbGxJRHMpIHtcblx0ICAgICAgZGlzcGxheU5hbWUgPSBtZWFzdXJlbWVudC5kaXNwbGF5TmFtZXNbaWRdLmN1cnJlbnQ7XG5cdFxuXHQgICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXSA9IGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdIHx8IHtcblx0ICAgICAgICBjb21wb25lbnROYW1lOiBkaXNwbGF5TmFtZSxcblx0ICAgICAgICBpbmNsdXNpdmU6IDAsXG5cdCAgICAgICAgZXhjbHVzaXZlOiAwLFxuXHQgICAgICAgIHJlbmRlcjogMCxcblx0ICAgICAgICBjb3VudDogMFxuXHQgICAgICB9O1xuXHQgICAgICBpZiAobWVhc3VyZW1lbnQucmVuZGVyW2lkXSkge1xuXHQgICAgICAgIGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLnJlbmRlciArPSBtZWFzdXJlbWVudC5yZW5kZXJbaWRdO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChtZWFzdXJlbWVudC5leGNsdXNpdmVbaWRdKSB7XG5cdCAgICAgICAgY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0uZXhjbHVzaXZlICs9IG1lYXN1cmVtZW50LmV4Y2x1c2l2ZVtpZF07XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKG1lYXN1cmVtZW50LmluY2x1c2l2ZVtpZF0pIHtcblx0ICAgICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5pbmNsdXNpdmUgKz0gbWVhc3VyZW1lbnQuaW5jbHVzaXZlW2lkXTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAobWVhc3VyZW1lbnQuY291bnRzW2lkXSkge1xuXHQgICAgICAgIGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLmNvdW50ICs9IG1lYXN1cmVtZW50LmNvdW50c1tpZF07XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIC8vIE5vdyBtYWtlIGEgc29ydGVkIGFycmF5IHdpdGggdGhlIHJlc3VsdHMuXG5cdCAgdmFyIGFyciA9IFtdO1xuXHQgIGZvciAoZGlzcGxheU5hbWUgaW4gY2FuZGlkYXRlcykge1xuXHQgICAgaWYgKGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLmV4Y2x1c2l2ZSA+PSBET05UX0NBUkVfVEhSRVNIT0xEKSB7XG5cdCAgICAgIGFyci5wdXNoKGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdKTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIGFyci5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0ICAgIHJldHVybiBiLmV4Y2x1c2l2ZSAtIGEuZXhjbHVzaXZlO1xuXHQgIH0pO1xuXHRcblx0ICByZXR1cm4gYXJyO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBnZXRJbmNsdXNpdmVTdW1tYXJ5KG1lYXN1cmVtZW50cywgb25seUNsZWFuKSB7XG5cdCAgdmFyIGNhbmRpZGF0ZXMgPSB7fTtcblx0ICB2YXIgaW5jbHVzaXZlS2V5O1xuXHRcblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IG1lYXN1cmVtZW50cy5sZW5ndGg7IGkrKykge1xuXHQgICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuXHQgICAgdmFyIGFsbElEcyA9IGFzc2lnbihcblx0ICAgICAge30sXG5cdCAgICAgIG1lYXN1cmVtZW50LmV4Y2x1c2l2ZSxcblx0ICAgICAgbWVhc3VyZW1lbnQuaW5jbHVzaXZlXG5cdCAgICApO1xuXHQgICAgdmFyIGNsZWFuQ29tcG9uZW50cztcblx0XG5cdCAgICBpZiAob25seUNsZWFuKSB7XG5cdCAgICAgIGNsZWFuQ29tcG9uZW50cyA9IGdldFVuY2hhbmdlZENvbXBvbmVudHMobWVhc3VyZW1lbnQpO1xuXHQgICAgfVxuXHRcblx0ICAgIGZvciAodmFyIGlkIGluIGFsbElEcykge1xuXHQgICAgICBpZiAob25seUNsZWFuICYmICFjbGVhbkNvbXBvbmVudHNbaWRdKSB7XG5cdCAgICAgICAgY29udGludWU7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZhciBkaXNwbGF5TmFtZSA9IG1lYXN1cmVtZW50LmRpc3BsYXlOYW1lc1tpZF07XG5cdFxuXHQgICAgICAvLyBJbmNsdXNpdmUgdGltZSBpcyBub3QgdXNlZnVsIGZvciBtYW55IGNvbXBvbmVudHMgd2l0aG91dCBrbm93aW5nIHdoZXJlXG5cdCAgICAgIC8vIHRoZXkgYXJlIGluc3RhbnRpYXRlZC4gU28gd2UgYWdncmVnYXRlIGluY2x1c2l2ZSB0aW1lIHdpdGggYm90aCB0aGVcblx0ICAgICAgLy8gb3duZXIgYW5kIGN1cnJlbnQgZGlzcGxheU5hbWUgYXMgdGhlIGtleS5cblx0ICAgICAgaW5jbHVzaXZlS2V5ID0gZGlzcGxheU5hbWUub3duZXIgKyAnID4gJyArIGRpc3BsYXlOYW1lLmN1cnJlbnQ7XG5cdFxuXHQgICAgICBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0gPSBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0gfHwge1xuXHQgICAgICAgIGNvbXBvbmVudE5hbWU6IGluY2x1c2l2ZUtleSxcblx0ICAgICAgICB0aW1lOiAwLFxuXHQgICAgICAgIGNvdW50OiAwXG5cdCAgICAgIH07XG5cdFxuXHQgICAgICBpZiAobWVhc3VyZW1lbnQuaW5jbHVzaXZlW2lkXSkge1xuXHQgICAgICAgIGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XS50aW1lICs9IG1lYXN1cmVtZW50LmluY2x1c2l2ZVtpZF07XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKG1lYXN1cmVtZW50LmNvdW50c1tpZF0pIHtcblx0ICAgICAgICBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0uY291bnQgKz0gbWVhc3VyZW1lbnQuY291bnRzW2lkXTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgLy8gTm93IG1ha2UgYSBzb3J0ZWQgYXJyYXkgd2l0aCB0aGUgcmVzdWx0cy5cblx0ICB2YXIgYXJyID0gW107XG5cdCAgZm9yIChpbmNsdXNpdmVLZXkgaW4gY2FuZGlkYXRlcykge1xuXHQgICAgaWYgKGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XS50aW1lID49IERPTlRfQ0FSRV9USFJFU0hPTEQpIHtcblx0ICAgICAgYXJyLnB1c2goY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldKTtcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIGFyci5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0ICAgIHJldHVybiBiLnRpbWUgLSBhLnRpbWU7XG5cdCAgfSk7XG5cdFxuXHQgIHJldHVybiBhcnI7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldFVuY2hhbmdlZENvbXBvbmVudHMobWVhc3VyZW1lbnQpIHtcblx0ICAvLyBGb3IgYSBnaXZlbiByZWNvbmNpbGUsIGxvb2sgYXQgd2hpY2ggY29tcG9uZW50cyBkaWQgbm90IGFjdHVhbGx5XG5cdCAgLy8gcmVuZGVyIGFueXRoaW5nIHRvIHRoZSBET00gYW5kIHJldHVybiBhIG1hcHBpbmcgb2YgdGhlaXIgSUQgdG9cblx0ICAvLyB0aGUgYW1vdW50IG9mIHRpbWUgaXQgdG9vayB0byByZW5kZXIgdGhlIGVudGlyZSBzdWJ0cmVlLlxuXHQgIHZhciBjbGVhbkNvbXBvbmVudHMgPSB7fTtcblx0ICB2YXIgZGlydHlMZWFmSURzID0gT2JqZWN0LmtleXMobWVhc3VyZW1lbnQud3JpdGVzKTtcblx0ICB2YXIgYWxsSURzID0gYXNzaWduKHt9LCBtZWFzdXJlbWVudC5leGNsdXNpdmUsIG1lYXN1cmVtZW50LmluY2x1c2l2ZSk7XG5cdFxuXHQgIGZvciAodmFyIGlkIGluIGFsbElEcykge1xuXHQgICAgdmFyIGlzRGlydHkgPSBmYWxzZTtcblx0ICAgIC8vIEZvciBlYWNoIGNvbXBvbmVudCB0aGF0IHJlbmRlcmVkLCBzZWUgaWYgYSBjb21wb25lbnQgdGhhdCB0cmlnZ2VyZWRcblx0ICAgIC8vIGEgRE9NIG9wIGlzIGluIGl0cyBzdWJ0cmVlLlxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJ0eUxlYWZJRHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgaWYgKGRpcnR5TGVhZklEc1tpXS5pbmRleE9mKGlkKSA9PT0gMCkge1xuXHQgICAgICAgIGlzRGlydHkgPSB0cnVlO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAoIWlzRGlydHkgJiYgbWVhc3VyZW1lbnQuY291bnRzW2lkXSA+IDApIHtcblx0ICAgICAgY2xlYW5Db21wb25lbnRzW2lkXSA9IHRydWU7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBjbGVhbkNvbXBvbmVudHM7XG5cdH1cblx0XG5cdHZhciBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMgPSB7XG5cdCAgZ2V0RXhjbHVzaXZlU3VtbWFyeTogZ2V0RXhjbHVzaXZlU3VtbWFyeSxcblx0ICBnZXRJbmNsdXNpdmVTdW1tYXJ5OiBnZXRJbmNsdXNpdmVTdW1tYXJ5LFxuXHQgIGdldERPTVN1bW1hcnk6IGdldERPTVN1bW1hcnksXG5cdCAgZ2V0VG90YWxUaW1lOiBnZXRUb3RhbFRpbWVcblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzO1xuXG5cbi8qKiovIH0sXG4vKiAxNDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFcnJvclV0aWxzXG5cdCAqIEB0eXBlY2hlY2tzXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgUmVhY3RFcnJvclV0aWxzID0ge1xuXHQgIC8qKlxuXHQgICAqIENyZWF0ZXMgYSBndWFyZGVkIHZlcnNpb24gb2YgYSBmdW5jdGlvbi4gVGhpcyBpcyBzdXBwb3NlZCB0byBtYWtlIGRlYnVnZ2luZ1xuXHQgICAqIG9mIGV2ZW50IGhhbmRsZXJzIGVhc2llci4gVG8gYWlkIGRlYnVnZ2luZyB3aXRoIHRoZSBicm93c2VyJ3MgZGVidWdnZXIsXG5cdCAgICogdGhpcyBjdXJyZW50bHkgc2ltcGx5IHJldHVybnMgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuYyBGdW5jdGlvbiB0byBiZSBleGVjdXRlZFxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBndWFyZFxuXHQgICAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuXHQgICAqL1xuXHQgIGd1YXJkOiBmdW5jdGlvbihmdW5jLCBuYW1lKSB7XG5cdCAgICByZXR1cm4gZnVuYztcblx0ICB9XG5cdH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXJyb3JVdGlscztcblxuXG4vKioqLyB9LFxuLyogMTQzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW5cblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBFdmVudFBsdWdpbkh1YiA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXHRcblx0ZnVuY3Rpb24gcnVuRXZlbnRRdWV1ZUluQmF0Y2goZXZlbnRzKSB7XG5cdCAgRXZlbnRQbHVnaW5IdWIuZW5xdWV1ZUV2ZW50cyhldmVudHMpO1xuXHQgIEV2ZW50UGx1Z2luSHViLnByb2Nlc3NFdmVudFF1ZXVlKCk7XG5cdH1cblx0XG5cdHZhciBSZWFjdEV2ZW50RW1pdHRlck1peGluID0ge1xuXHRcblx0ICAvKipcblx0ICAgKiBTdHJlYW1zIGEgZmlyZWQgdG9wLWxldmVsIGV2ZW50IHRvIGBFdmVudFBsdWdpbkh1YmAgd2hlcmUgcGx1Z2lucyBoYXZlIHRoZVxuXHQgICAqIG9wcG9ydHVuaXR5IHRvIGNyZWF0ZSBgUmVhY3RFdmVudGBzIHRvIGJlIGRpc3BhdGNoZWQuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG5cdCAgICogQHBhcmFtIHtvYmplY3R9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuXHQgICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgZW52aXJvbm1lbnQgZXZlbnQuXG5cdCAgICovXG5cdCAgaGFuZGxlVG9wTGV2ZWw6IGZ1bmN0aW9uKFxuXHQgICAgICB0b3BMZXZlbFR5cGUsXG5cdCAgICAgIHRvcExldmVsVGFyZ2V0LFxuXHQgICAgICB0b3BMZXZlbFRhcmdldElELFxuXHQgICAgICBuYXRpdmVFdmVudCkge1xuXHQgICAgdmFyIGV2ZW50cyA9IEV2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHMoXG5cdCAgICAgIHRvcExldmVsVHlwZSxcblx0ICAgICAgdG9wTGV2ZWxUYXJnZXQsXG5cdCAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG5cdCAgICAgIG5hdGl2ZUV2ZW50XG5cdCAgICApO1xuXHRcblx0ICAgIHJ1bkV2ZW50UXVldWVJbkJhdGNoKGV2ZW50cyk7XG5cdCAgfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdEV2ZW50RW1pdHRlck1peGluO1xuXG5cbi8qKiovIH0sXG4vKiAxNDQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFdmVudExpc3RlbmVyXG5cdCAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgRXZlbnRMaXN0ZW5lciA9IF9fd2VicGFja19yZXF1aXJlX18oMTIzKTtcblx0dmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0dmFyIFBvb2xlZENsYXNzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cdHZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xuXHR2YXIgUmVhY3RNb3VudCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdHZhciBSZWFjdFVwZGF0ZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0XG5cdHZhciBhc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgZ2V0RXZlbnRUYXJnZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU0KTtcblx0dmFyIGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4Mik7XG5cdFxuXHQvKipcblx0ICogRmluZHMgdGhlIHBhcmVudCBSZWFjdCBjb21wb25lbnQgb2YgYG5vZGVgLlxuXHQgKlxuXHQgKiBAcGFyYW0geyp9IG5vZGVcblx0ICogQHJldHVybiB7P0RPTUV2ZW50VGFyZ2V0fSBQYXJlbnQgY29udGFpbmVyLCBvciBgbnVsbGAgaWYgdGhlIHNwZWNpZmllZCBub2RlXG5cdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgbm90IG5lc3RlZC5cblx0ICovXG5cdGZ1bmN0aW9uIGZpbmRQYXJlbnQobm9kZSkge1xuXHQgIC8vIFRPRE86IEl0IG1heSBiZSBhIGdvb2QgaWRlYSB0byBjYWNoZSB0aGlzIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgRE9NXG5cdCAgLy8gdHJhdmVyc2FsLCBidXQgY2FjaGluZyBpcyBkaWZmaWN1bHQgdG8gZG8gY29ycmVjdGx5IHdpdGhvdXQgdXNpbmcgYVxuXHQgIC8vIG11dGF0aW9uIG9ic2VydmVyIHRvIGxpc3RlbiBmb3IgYWxsIERPTSBjaGFuZ2VzLlxuXHQgIHZhciBub2RlSUQgPSBSZWFjdE1vdW50LmdldElEKG5vZGUpO1xuXHQgIHZhciByb290SUQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5nZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQobm9kZUlEKTtcblx0ICB2YXIgY29udGFpbmVyID0gUmVhY3RNb3VudC5maW5kUmVhY3RDb250YWluZXJGb3JJRChyb290SUQpO1xuXHQgIHZhciBwYXJlbnQgPSBSZWFjdE1vdW50LmdldEZpcnN0UmVhY3RET00oY29udGFpbmVyKTtcblx0ICByZXR1cm4gcGFyZW50O1xuXHR9XG5cdFxuXHQvLyBVc2VkIHRvIHN0b3JlIGFuY2VzdG9yIGhpZXJhcmNoeSBpbiB0b3AgbGV2ZWwgY2FsbGJhY2tcblx0ZnVuY3Rpb24gVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcblx0ICB0aGlzLnRvcExldmVsVHlwZSA9IHRvcExldmVsVHlwZTtcblx0ICB0aGlzLm5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQ7XG5cdCAgdGhpcy5hbmNlc3RvcnMgPSBbXTtcblx0fVxuXHRhc3NpZ24oVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLnByb3RvdHlwZSwge1xuXHQgIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy50b3BMZXZlbFR5cGUgPSBudWxsO1xuXHQgICAgdGhpcy5uYXRpdmVFdmVudCA9IG51bGw7XG5cdCAgICB0aGlzLmFuY2VzdG9ycy5sZW5ndGggPSAwO1xuXHQgIH1cblx0fSk7XG5cdFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhcblx0ICBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcsXG5cdCAgUG9vbGVkQ2xhc3MudHdvQXJndW1lbnRQb29sZXJcblx0KTtcblx0XG5cdGZ1bmN0aW9uIGhhbmRsZVRvcExldmVsSW1wbChib29rS2VlcGluZykge1xuXHQgIHZhciB0b3BMZXZlbFRhcmdldCA9IFJlYWN0TW91bnQuZ2V0Rmlyc3RSZWFjdERPTShcblx0ICAgIGdldEV2ZW50VGFyZ2V0KGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50KVxuXHQgICkgfHwgd2luZG93O1xuXHRcblx0ICAvLyBMb29wIHRocm91Z2ggdGhlIGhpZXJhcmNoeSwgaW4gY2FzZSB0aGVyZSdzIGFueSBuZXN0ZWQgY29tcG9uZW50cy5cblx0ICAvLyBJdCdzIGltcG9ydGFudCB0aGF0IHdlIGJ1aWxkIHRoZSBhcnJheSBvZiBhbmNlc3RvcnMgYmVmb3JlIGNhbGxpbmcgYW55XG5cdCAgLy8gZXZlbnQgaGFuZGxlcnMsIGJlY2F1c2UgZXZlbnQgaGFuZGxlcnMgY2FuIG1vZGlmeSB0aGUgRE9NLCBsZWFkaW5nIHRvXG5cdCAgLy8gaW5jb25zaXN0ZW5jaWVzIHdpdGggUmVhY3RNb3VudCdzIG5vZGUgY2FjaGUuIFNlZSAjMTEwNS5cblx0ICB2YXIgYW5jZXN0b3IgPSB0b3BMZXZlbFRhcmdldDtcblx0ICB3aGlsZSAoYW5jZXN0b3IpIHtcblx0ICAgIGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5wdXNoKGFuY2VzdG9yKTtcblx0ICAgIGFuY2VzdG9yID0gZmluZFBhcmVudChhbmNlc3Rvcik7XG5cdCAgfVxuXHRcblx0ICBmb3IgKHZhciBpID0gMCwgbCA9IGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgIHRvcExldmVsVGFyZ2V0ID0gYm9va0tlZXBpbmcuYW5jZXN0b3JzW2ldO1xuXHQgICAgdmFyIHRvcExldmVsVGFyZ2V0SUQgPSBSZWFjdE1vdW50LmdldElEKHRvcExldmVsVGFyZ2V0KSB8fCAnJztcblx0ICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5faGFuZGxlVG9wTGV2ZWwoXG5cdCAgICAgIGJvb2tLZWVwaW5nLnRvcExldmVsVHlwZSxcblx0ICAgICAgdG9wTGV2ZWxUYXJnZXQsXG5cdCAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG5cdCAgICAgIGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50XG5cdCAgICApO1xuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gc2Nyb2xsVmFsdWVNb25pdG9yKGNiKSB7XG5cdCAgdmFyIHNjcm9sbFBvc2l0aW9uID0gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24od2luZG93KTtcblx0ICBjYihzY3JvbGxQb3NpdGlvbik7XG5cdH1cblx0XG5cdHZhciBSZWFjdEV2ZW50TGlzdGVuZXIgPSB7XG5cdCAgX2VuYWJsZWQ6IHRydWUsXG5cdCAgX2hhbmRsZVRvcExldmVsOiBudWxsLFxuXHRcblx0ICBXSU5ET1dfSEFORExFOiBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyB3aW5kb3cgOiBudWxsLFxuXHRcblx0ICBzZXRIYW5kbGVUb3BMZXZlbDogZnVuY3Rpb24oaGFuZGxlVG9wTGV2ZWwpIHtcblx0ICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5faGFuZGxlVG9wTGV2ZWwgPSBoYW5kbGVUb3BMZXZlbDtcblx0ICB9LFxuXHRcblx0ICBzZXRFbmFibGVkOiBmdW5jdGlvbihlbmFibGVkKSB7XG5cdCAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQgPSAhIWVuYWJsZWQ7XG5cdCAgfSxcblx0XG5cdCAgaXNFbmFibGVkOiBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQ7XG5cdCAgfSxcblx0XG5cdFxuXHQgIC8qKlxuXHQgICAqIFRyYXBzIHRvcC1sZXZlbCBldmVudHMgYnkgdXNpbmcgZXZlbnQgYnViYmxpbmcuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IGhhbmRsZXJCYXNlTmFtZSBFdmVudCBuYW1lIChlLmcuIFwiY2xpY2tcIikuXG5cdCAgICogQHBhcmFtIHtvYmplY3R9IGhhbmRsZSBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cblx0ICAgKiBAcmV0dXJuIHtvYmplY3R9IEFuIG9iamVjdCB3aXRoIGEgcmVtb3ZlIGZ1bmN0aW9uIHdoaWNoIHdpbGwgZm9yY2VmdWxseVxuXHQgICAqICAgICAgICAgICAgICAgICAgcmVtb3ZlIHRoZSBsaXN0ZW5lci5cblx0ICAgKiBAaW50ZXJuYWxcblx0ICAgKi9cblx0ICB0cmFwQnViYmxlZEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG5cdCAgICB2YXIgZWxlbWVudCA9IGhhbmRsZTtcblx0ICAgIGlmICghZWxlbWVudCkge1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgICByZXR1cm4gRXZlbnRMaXN0ZW5lci5saXN0ZW4oXG5cdCAgICAgIGVsZW1lbnQsXG5cdCAgICAgIGhhbmRsZXJCYXNlTmFtZSxcblx0ICAgICAgUmVhY3RFdmVudExpc3RlbmVyLmRpc3BhdGNoRXZlbnQuYmluZChudWxsLCB0b3BMZXZlbFR5cGUpXG5cdCAgICApO1xuXHQgIH0sXG5cdFxuXHQgIC8qKlxuXHQgICAqIFRyYXBzIGEgdG9wLWxldmVsIGV2ZW50IGJ5IHVzaW5nIGV2ZW50IGNhcHR1cmluZy5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlckJhc2VOYW1lIEV2ZW50IG5hbWUgKGUuZy4gXCJjbGlja1wiKS5cblx0ICAgKiBAcGFyYW0ge29iamVjdH0gaGFuZGxlIEVsZW1lbnQgb24gd2hpY2ggdG8gYXR0YWNoIGxpc3RlbmVyLlxuXHQgICAqIEByZXR1cm4ge29iamVjdH0gQW4gb2JqZWN0IHdpdGggYSByZW1vdmUgZnVuY3Rpb24gd2hpY2ggd2lsbCBmb3JjZWZ1bGx5XG5cdCAgICogICAgICAgICAgICAgICAgICByZW1vdmUgdGhlIGxpc3RlbmVyLlxuXHQgICAqIEBpbnRlcm5hbFxuXHQgICAqL1xuXHQgIHRyYXBDYXB0dXJlZEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG5cdCAgICB2YXIgZWxlbWVudCA9IGhhbmRsZTtcblx0ICAgIGlmICghZWxlbWVudCkge1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgICByZXR1cm4gRXZlbnRMaXN0ZW5lci5jYXB0dXJlKFxuXHQgICAgICBlbGVtZW50LFxuXHQgICAgICBoYW5kbGVyQmFzZU5hbWUsXG5cdCAgICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5kaXNwYXRjaEV2ZW50LmJpbmQobnVsbCwgdG9wTGV2ZWxUeXBlKVxuXHQgICAgKTtcblx0ICB9LFxuXHRcblx0ICBtb25pdG9yU2Nyb2xsVmFsdWU6IGZ1bmN0aW9uKHJlZnJlc2gpIHtcblx0ICAgIHZhciBjYWxsYmFjayA9IHNjcm9sbFZhbHVlTW9uaXRvci5iaW5kKG51bGwsIHJlZnJlc2gpO1xuXHQgICAgRXZlbnRMaXN0ZW5lci5saXN0ZW4od2luZG93LCAnc2Nyb2xsJywgY2FsbGJhY2spO1xuXHQgICAgRXZlbnRMaXN0ZW5lci5saXN0ZW4od2luZG93LCAncmVzaXplJywgY2FsbGJhY2spO1xuXHQgIH0sXG5cdFxuXHQgIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcblx0ICAgIGlmICghUmVhY3RFdmVudExpc3RlbmVyLl9lbmFibGVkKSB7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgYm9va0tlZXBpbmcgPSBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcuZ2V0UG9vbGVkKFxuXHQgICAgICB0b3BMZXZlbFR5cGUsXG5cdCAgICAgIG5hdGl2ZUV2ZW50XG5cdCAgICApO1xuXHQgICAgdHJ5IHtcblx0ICAgICAgLy8gRXZlbnQgcXVldWUgYmVpbmcgcHJvY2Vzc2VkIGluIHRoZSBzYW1lIGN5Y2xlIGFsbG93c1xuXHQgICAgICAvLyBgcHJldmVudERlZmF1bHRgLlxuXHQgICAgICBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMoaGFuZGxlVG9wTGV2ZWxJbXBsLCBib29rS2VlcGluZyk7XG5cdCAgICB9IGZpbmFsbHkge1xuXHQgICAgICBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcucmVsZWFzZShib29rS2VlcGluZyk7XG5cdCAgICB9XG5cdCAgfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdEV2ZW50TGlzdGVuZXI7XG5cblxuLyoqKi8gfSxcbi8qIDE0NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEluamVjdGlvblxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIERPTVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cdHZhciBFdmVudFBsdWdpbkh1YiA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXHR2YXIgUmVhY3RDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcblx0dmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblx0dmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTtcblx0dmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpO1xuXHR2YXIgUmVhY3ROYXRpdmVDb21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4KTtcblx0dmFyIFJlYWN0UGVyZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXHR2YXIgUmVhY3RSb290SW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0KTtcblx0dmFyIFJlYWN0VXBkYXRlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHRcblx0dmFyIFJlYWN0SW5qZWN0aW9uID0ge1xuXHQgIENvbXBvbmVudDogUmVhY3RDb21wb25lbnQuaW5qZWN0aW9uLFxuXHQgIENvbXBvc2l0ZUNvbXBvbmVudDogUmVhY3RDb21wb3NpdGVDb21wb25lbnQuaW5qZWN0aW9uLFxuXHQgIERPTVByb3BlcnR5OiBET01Qcm9wZXJ0eS5pbmplY3Rpb24sXG5cdCAgRW1wdHlDb21wb25lbnQ6IFJlYWN0RW1wdHlDb21wb25lbnQuaW5qZWN0aW9uLFxuXHQgIEV2ZW50UGx1Z2luSHViOiBFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24sXG5cdCAgRXZlbnRFbWl0dGVyOiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuaW5qZWN0aW9uLFxuXHQgIE5hdGl2ZUNvbXBvbmVudDogUmVhY3ROYXRpdmVDb21wb25lbnQuaW5qZWN0aW9uLFxuXHQgIFBlcmY6IFJlYWN0UGVyZi5pbmplY3Rpb24sXG5cdCAgUm9vdEluZGV4OiBSZWFjdFJvb3RJbmRleC5pbmplY3Rpb24sXG5cdCAgVXBkYXRlczogUmVhY3RVcGRhdGVzLmluamVjdGlvblxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdEluamVjdGlvbjtcblxuXG4vKioqLyB9LFxuLyogMTQ2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RQcm9wVHJhbnNmZXJlclxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIGFzc2lnbiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdHZhciBlbXB0eUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgam9pbkNsYXNzZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3Nyk7XG5cdHZhciB3YXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdHZhciBkaWRXYXJuID0gZmFsc2U7XG5cdFxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHRyYW5zZmVyIHN0cmF0ZWd5IHRoYXQgd2lsbCBtZXJnZSBwcm9wIHZhbHVlcyB1c2luZyB0aGUgc3VwcGxpZWRcblx0ICogYG1lcmdlU3RyYXRlZ3lgLiBJZiBhIHByb3Agd2FzIHByZXZpb3VzbHkgdW5zZXQsIHRoaXMganVzdCBzZXRzIGl0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXJnZVN0cmF0ZWd5XG5cdCAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuXHQgKi9cblx0ZnVuY3Rpb24gY3JlYXRlVHJhbnNmZXJTdHJhdGVneShtZXJnZVN0cmF0ZWd5KSB7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uKHByb3BzLCBrZXksIHZhbHVlKSB7XG5cdCAgICBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0ICAgICAgcHJvcHNba2V5XSA9IHZhbHVlO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcHJvcHNba2V5XSA9IG1lcmdlU3RyYXRlZ3kocHJvcHNba2V5XSwgdmFsdWUpO1xuXHQgICAgfVxuXHQgIH07XG5cdH1cblx0XG5cdHZhciB0cmFuc2ZlclN0cmF0ZWd5TWVyZ2UgPSBjcmVhdGVUcmFuc2ZlclN0cmF0ZWd5KGZ1bmN0aW9uKGEsIGIpIHtcblx0ICAvLyBgbWVyZ2VgIG92ZXJyaWRlcyB0aGUgZmlyc3Qgb2JqZWN0J3MgKGBwcm9wc1trZXldYCBhYm92ZSkga2V5cyB1c2luZyB0aGVcblx0ICAvLyBzZWNvbmQgb2JqZWN0J3MgKGB2YWx1ZWApIGtleXMuIEFuIG9iamVjdCdzIHN0eWxlJ3MgZXhpc3RpbmcgYHByb3BBYCB3b3VsZFxuXHQgIC8vIGdldCBvdmVycmlkZGVuLiBGbGlwIHRoZSBvcmRlciBoZXJlLlxuXHQgIHJldHVybiBhc3NpZ24oe30sIGIsIGEpO1xuXHR9KTtcblx0XG5cdC8qKlxuXHQgKiBUcmFuc2ZlciBzdHJhdGVnaWVzIGRpY3RhdGUgaG93IHByb3BzIGFyZSB0cmFuc2ZlcnJlZCBieSBgdHJhbnNmZXJQcm9wc1RvYC5cblx0ICogTk9URTogaWYgeW91IGFkZCBhbnkgbW9yZSBleGNlcHRpb25zIHRvIHRoaXMgbGlzdCB5b3Ugc2hvdWxkIGJlIHN1cmUgdG9cblx0ICogdXBkYXRlIGBjbG9uZVdpdGhQcm9wcygpYCBhY2NvcmRpbmdseS5cblx0ICovXG5cdHZhciBUcmFuc2ZlclN0cmF0ZWdpZXMgPSB7XG5cdCAgLyoqXG5cdCAgICogTmV2ZXIgdHJhbnNmZXIgYGNoaWxkcmVuYC5cblx0ICAgKi9cblx0ICBjaGlsZHJlbjogZW1wdHlGdW5jdGlvbixcblx0ICAvKipcblx0ICAgKiBUcmFuc2ZlciB0aGUgYGNsYXNzTmFtZWAgcHJvcCBieSBtZXJnaW5nIHRoZW0uXG5cdCAgICovXG5cdCAgY2xhc3NOYW1lOiBjcmVhdGVUcmFuc2ZlclN0cmF0ZWd5KGpvaW5DbGFzc2VzKSxcblx0ICAvKipcblx0ICAgKiBUcmFuc2ZlciB0aGUgYHN0eWxlYCBwcm9wICh3aGljaCBpcyBhbiBvYmplY3QpIGJ5IG1lcmdpbmcgdGhlbS5cblx0ICAgKi9cblx0ICBzdHlsZTogdHJhbnNmZXJTdHJhdGVneU1lcmdlXG5cdH07XG5cdFxuXHQvKipcblx0ICogTXV0YXRlcyB0aGUgZmlyc3QgYXJndW1lbnQgYnkgdHJhbnNmZXJyaW5nIHRoZSBwcm9wZXJ0aWVzIGZyb20gdGhlIHNlY29uZFxuXHQgKiBhcmd1bWVudC5cblx0ICpcblx0ICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBuZXdQcm9wc1xuXHQgKiBAcmV0dXJuIHtvYmplY3R9XG5cdCAqL1xuXHRmdW5jdGlvbiB0cmFuc2ZlckludG8ocHJvcHMsIG5ld1Byb3BzKSB7XG5cdCAgZm9yICh2YXIgdGhpc0tleSBpbiBuZXdQcm9wcykge1xuXHQgICAgaWYgKCFuZXdQcm9wcy5oYXNPd25Qcm9wZXJ0eSh0aGlzS2V5KSkge1xuXHQgICAgICBjb250aW51ZTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgdHJhbnNmZXJTdHJhdGVneSA9IFRyYW5zZmVyU3RyYXRlZ2llc1t0aGlzS2V5XTtcblx0XG5cdCAgICBpZiAodHJhbnNmZXJTdHJhdGVneSAmJiBUcmFuc2ZlclN0cmF0ZWdpZXMuaGFzT3duUHJvcGVydHkodGhpc0tleSkpIHtcblx0ICAgICAgdHJhbnNmZXJTdHJhdGVneShwcm9wcywgdGhpc0tleSwgbmV3UHJvcHNbdGhpc0tleV0pO1xuXHQgICAgfSBlbHNlIGlmICghcHJvcHMuaGFzT3duUHJvcGVydHkodGhpc0tleSkpIHtcblx0ICAgICAgcHJvcHNbdGhpc0tleV0gPSBuZXdQcm9wc1t0aGlzS2V5XTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHByb3BzO1xuXHR9XG5cdFxuXHQvKipcblx0ICogUmVhY3RQcm9wVHJhbnNmZXJlciBhcmUgY2FwYWJsZSBvZiB0cmFuc2ZlcnJpbmcgcHJvcHMgdG8gYW5vdGhlciBjb21wb25lbnRcblx0ICogdXNpbmcgYSBgdHJhbnNmZXJQcm9wc1RvYCBtZXRob2QuXG5cdCAqXG5cdCAqIEBjbGFzcyBSZWFjdFByb3BUcmFuc2ZlcmVyXG5cdCAqL1xuXHR2YXIgUmVhY3RQcm9wVHJhbnNmZXJlciA9IHtcblx0XG5cdCAgVHJhbnNmZXJTdHJhdGVnaWVzOiBUcmFuc2ZlclN0cmF0ZWdpZXMsXG5cdFxuXHQgIC8qKlxuXHQgICAqIE1lcmdlIHR3byBwcm9wcyBvYmplY3RzIHVzaW5nIFRyYW5zZmVyU3RyYXRlZ2llcy5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7b2JqZWN0fSBvbGRQcm9wcyBvcmlnaW5hbCBwcm9wcyAodGhleSB0YWtlIHByZWNlZGVuY2UpXG5cdCAgICogQHBhcmFtIHtvYmplY3R9IG5ld1Byb3BzIG5ldyBwcm9wcyB0byBtZXJnZSBpblxuXHQgICAqIEByZXR1cm4ge29iamVjdH0gYSBuZXcgb2JqZWN0IGNvbnRhaW5pbmcgYm90aCBzZXRzIG9mIHByb3BzIG1lcmdlZC5cblx0ICAgKi9cblx0ICBtZXJnZVByb3BzOiBmdW5jdGlvbihvbGRQcm9wcywgbmV3UHJvcHMpIHtcblx0ICAgIHJldHVybiB0cmFuc2ZlckludG8oYXNzaWduKHt9LCBvbGRQcm9wcyksIG5ld1Byb3BzKTtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBAbGVuZHMge1JlYWN0UHJvcFRyYW5zZmVyZXIucHJvdG90eXBlfVxuXHQgICAqL1xuXHQgIE1peGluOiB7XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBUcmFuc2ZlciBwcm9wcyBmcm9tIHRoaXMgY29tcG9uZW50IHRvIGEgdGFyZ2V0IGNvbXBvbmVudC5cblx0ICAgICAqXG5cdCAgICAgKiBQcm9wcyB0aGF0IGRvIG5vdCBoYXZlIGFuIGV4cGxpY2l0IHRyYW5zZmVyIHN0cmF0ZWd5IHdpbGwgYmUgdHJhbnNmZXJyZWRcblx0ICAgICAqIG9ubHkgaWYgdGhlIHRhcmdldCBjb21wb25lbnQgZG9lcyBub3QgYWxyZWFkeSBoYXZlIHRoZSBwcm9wIHNldC5cblx0ICAgICAqXG5cdCAgICAgKiBUaGlzIGlzIHVzdWFsbHkgdXNlZCB0byBwYXNzIGRvd24gcHJvcHMgdG8gYSByZXR1cm5lZCByb290IGNvbXBvbmVudC5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBDb21wb25lbnQgcmVjZWl2aW5nIHRoZSBwcm9wZXJ0aWVzLlxuXHQgICAgICogQHJldHVybiB7UmVhY3RFbGVtZW50fSBUaGUgc3VwcGxpZWQgYGNvbXBvbmVudGAuXG5cdCAgICAgKiBAZmluYWxcblx0ICAgICAqIEBwcm90ZWN0ZWRcblx0ICAgICAqL1xuXHQgICAgdHJhbnNmZXJQcm9wc1RvOiBmdW5jdGlvbihlbGVtZW50KSB7XG5cdCAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICAgICAgZWxlbWVudC5fb3duZXIgPT09IHRoaXMsXG5cdCAgICAgICAgJyVzOiBZb3UgY2FuXFwndCBjYWxsIHRyYW5zZmVyUHJvcHNUbygpIG9uIGEgY29tcG9uZW50IHRoYXQgeW91ICcgK1xuXHQgICAgICAgICdkb25cXCd0IG93biwgJXMuIFRoaXMgdXN1YWxseSBtZWFucyB5b3UgYXJlIGNhbGxpbmcgJyArXG5cdCAgICAgICAgJ3RyYW5zZmVyUHJvcHNUbygpIG9uIGEgY29tcG9uZW50IHBhc3NlZCBpbiBhcyBwcm9wcyBvciBjaGlsZHJlbi4nLFxuXHQgICAgICAgIHRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWUsXG5cdCAgICAgICAgdHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycgP1xuXHQgICAgICAgIGVsZW1lbnQudHlwZSA6XG5cdCAgICAgICAgZWxlbWVudC50eXBlLmRpc3BsYXlOYW1lXG5cdCAgICAgICkgOiBpbnZhcmlhbnQoZWxlbWVudC5fb3duZXIgPT09IHRoaXMpKTtcblx0XG5cdCAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICAgICAgICBpZiAoIWRpZFdhcm4pIHtcblx0ICAgICAgICAgIGRpZFdhcm4gPSB0cnVlO1xuXHQgICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG5cdCAgICAgICAgICAgIGZhbHNlLFxuXHQgICAgICAgICAgICAndHJhbnNmZXJQcm9wc1RvIGlzIGRlcHJlY2F0ZWQuICcgK1xuXHQgICAgICAgICAgICAnU2VlIGh0dHA6Ly9mYi5tZS9yZWFjdC10cmFuc2ZlcnByb3BzdG8gZm9yIG1vcmUgaW5mb3JtYXRpb24uJ1xuXHQgICAgICAgICAgKSA6IG51bGwpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHRcblx0ICAgICAgLy8gQmVjYXVzZSBlbGVtZW50cyBhcmUgaW1tdXRhYmxlIHdlIGhhdmUgdG8gbWVyZ2UgaW50byB0aGUgZXhpc3Rpbmdcblx0ICAgICAgLy8gcHJvcHMgb2JqZWN0IHJhdGhlciB0aGFuIGNsb25lIGl0LlxuXHQgICAgICB0cmFuc2ZlckludG8oZWxlbWVudC5wcm9wcywgdGhpcy5wcm9wcyk7XG5cdFxuXHQgICAgICByZXR1cm4gZWxlbWVudDtcblx0ICAgIH1cblx0XG5cdCAgfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUcmFuc2ZlcmVyO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogMTQ3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb25cblx0ICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBDYWxsYmFja1F1ZXVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Mik7XG5cdHZhciBQb29sZWRDbGFzcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXHR2YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cdHZhciBSZWFjdElucHV0U2VsZWN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nyk7XG5cdHZhciBSZWFjdFB1dExpc3RlbmVyUXVldWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczKTtcblx0dmFyIFRyYW5zYWN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7XG5cdFxuXHR2YXIgYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdC8qKlxuXHQgKiBFbnN1cmVzIHRoYXQsIHdoZW4gcG9zc2libGUsIHRoZSBzZWxlY3Rpb24gcmFuZ2UgKGN1cnJlbnRseSBzZWxlY3RlZCB0ZXh0XG5cdCAqIGlucHV0KSBpcyBub3QgZGlzdHVyYmVkIGJ5IHBlcmZvcm1pbmcgdGhlIHRyYW5zYWN0aW9uLlxuXHQgKi9cblx0dmFyIFNFTEVDVElPTl9SRVNUT1JBVElPTiA9IHtcblx0ICAvKipcblx0ICAgKiBAcmV0dXJuIHtTZWxlY3Rpb259IFNlbGVjdGlvbiBpbmZvcm1hdGlvbi5cblx0ICAgKi9cblx0ICBpbml0aWFsaXplOiBSZWFjdElucHV0U2VsZWN0aW9uLmdldFNlbGVjdGlvbkluZm9ybWF0aW9uLFxuXHQgIC8qKlxuXHQgICAqIEBwYXJhbSB7U2VsZWN0aW9ufSBzZWwgU2VsZWN0aW9uIGluZm9ybWF0aW9uIHJldHVybmVkIGZyb20gYGluaXRpYWxpemVgLlxuXHQgICAqL1xuXHQgIGNsb3NlOiBSZWFjdElucHV0U2VsZWN0aW9uLnJlc3RvcmVTZWxlY3Rpb25cblx0fTtcblx0XG5cdC8qKlxuXHQgKiBTdXBwcmVzc2VzIGV2ZW50cyAoYmx1ci9mb2N1cykgdGhhdCBjb3VsZCBiZSBpbmFkdmVydGVudGx5IGRpc3BhdGNoZWQgZHVlIHRvXG5cdCAqIGhpZ2ggbGV2ZWwgRE9NIG1hbmlwdWxhdGlvbnMgKGxpa2UgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgYSB0ZXh0IGlucHV0IGZyb20gdGhlXG5cdCAqIERPTSkuXG5cdCAqL1xuXHR2YXIgRVZFTlRfU1VQUFJFU1NJT04gPSB7XG5cdCAgLyoqXG5cdCAgICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIGVuYWJsZWQgc3RhdHVzIG9mIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGJlZm9yZVxuXHQgICAqIHRoZSByZWNvbmNpbGlhdGlvbi5cblx0ICAgKi9cblx0ICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBjdXJyZW50bHlFbmFibGVkID0gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmlzRW5hYmxlZCgpO1xuXHQgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnNldEVuYWJsZWQoZmFsc2UpO1xuXHQgICAgcmV0dXJuIGN1cnJlbnRseUVuYWJsZWQ7XG5cdCAgfSxcblx0XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtIHtib29sZWFufSBwcmV2aW91c2x5RW5hYmxlZCBFbmFibGVkIHN0YXR1cyBvZlxuXHQgICAqICAgYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgYmVmb3JlIHRoZSByZWNvbmNpbGlhdGlvbiBvY2N1cmVkLiBgY2xvc2VgXG5cdCAgICogICByZXN0b3JlcyB0aGUgcHJldmlvdXMgdmFsdWUuXG5cdCAgICovXG5cdCAgY2xvc2U6IGZ1bmN0aW9uKHByZXZpb3VzbHlFbmFibGVkKSB7XG5cdCAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuc2V0RW5hYmxlZChwcmV2aW91c2x5RW5hYmxlZCk7XG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIFByb3ZpZGVzIGEgcXVldWUgZm9yIGNvbGxlY3RpbmcgYGNvbXBvbmVudERpZE1vdW50YCBhbmRcblx0ICogYGNvbXBvbmVudERpZFVwZGF0ZWAgY2FsbGJhY2tzIGR1cmluZyB0aGUgdGhlIHRyYW5zYWN0aW9uLlxuXHQgKi9cblx0dmFyIE9OX0RPTV9SRUFEWV9RVUVVRUlORyA9IHtcblx0ICAvKipcblx0ICAgKiBJbml0aWFsaXplcyB0aGUgaW50ZXJuYWwgYG9uRE9NUmVhZHlgIHF1ZXVlLlxuXHQgICAqL1xuXHQgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5yZWFjdE1vdW50UmVhZHkucmVzZXQoKTtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBBZnRlciBET00gaXMgZmx1c2hlZCwgaW52b2tlIGFsbCByZWdpc3RlcmVkIGBvbkRPTVJlYWR5YCBjYWxsYmFja3MuXG5cdCAgICovXG5cdCAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5yZWFjdE1vdW50UmVhZHkubm90aWZ5QWxsKCk7XG5cdCAgfVxuXHR9O1xuXHRcblx0dmFyIFBVVF9MSVNURU5FUl9RVUVVRUlORyA9IHtcblx0ICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMucHV0TGlzdGVuZXJRdWV1ZS5yZXNldCgpO1xuXHQgIH0sXG5cdFxuXHQgIGNsb3NlOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMucHV0TGlzdGVuZXJRdWV1ZS5wdXRMaXN0ZW5lcnMoKTtcblx0ICB9XG5cdH07XG5cdFxuXHQvKipcblx0ICogRXhlY3V0ZWQgd2l0aGluIHRoZSBzY29wZSBvZiB0aGUgYFRyYW5zYWN0aW9uYCBpbnN0YW5jZS4gQ29uc2lkZXIgdGhlc2UgYXNcblx0ICogYmVpbmcgbWVtYmVyIG1ldGhvZHMsIGJ1dCB3aXRoIGFuIGltcGxpZWQgb3JkZXJpbmcgd2hpbGUgYmVpbmcgaXNvbGF0ZWQgZnJvbVxuXHQgKiBlYWNoIG90aGVyLlxuXHQgKi9cblx0dmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW1xuXHQgIFBVVF9MSVNURU5FUl9RVUVVRUlORyxcblx0ICBTRUxFQ1RJT05fUkVTVE9SQVRJT04sXG5cdCAgRVZFTlRfU1VQUFJFU1NJT04sXG5cdCAgT05fRE9NX1JFQURZX1FVRVVFSU5HXG5cdF07XG5cdFxuXHQvKipcblx0ICogQ3VycmVudGx5OlxuXHQgKiAtIFRoZSBvcmRlciB0aGF0IHRoZXNlIGFyZSBsaXN0ZWQgaW4gdGhlIHRyYW5zYWN0aW9uIGlzIGNyaXRpY2FsOlxuXHQgKiAtIFN1cHByZXNzZXMgZXZlbnRzLlxuXHQgKiAtIFJlc3RvcmVzIHNlbGVjdGlvbiByYW5nZS5cblx0ICpcblx0ICogRnV0dXJlOlxuXHQgKiAtIFJlc3RvcmUgZG9jdW1lbnQvb3ZlcmZsb3cgc2Nyb2xsIHBvc2l0aW9ucyB0aGF0IHdlcmUgdW5pbnRlbnRpb25hbGx5XG5cdCAqICAgbW9kaWZpZWQgdmlhIERPTSBpbnNlcnRpb25zIGFib3ZlIHRoZSB0b3Agdmlld3BvcnQgYm91bmRhcnkuXG5cdCAqIC0gSW1wbGVtZW50L2ludGVncmF0ZSB3aXRoIGN1c3RvbWl6ZWQgY29uc3RyYWludCBiYXNlZCBsYXlvdXQgc3lzdGVtIGFuZCBrZWVwXG5cdCAqICAgdHJhY2sgb2Ygd2hpY2ggZGltZW5zaW9ucyBtdXN0IGJlIHJlbWVhc3VyZWQuXG5cdCAqXG5cdCAqIEBjbGFzcyBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uXG5cdCAqL1xuXHRmdW5jdGlvbiBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uKCkge1xuXHQgIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcblx0ICAvLyBPbmx5IHNlcnZlci1zaWRlIHJlbmRlcmluZyByZWFsbHkgbmVlZHMgdGhpcyBvcHRpb24gKHNlZVxuXHQgIC8vIGBSZWFjdFNlcnZlclJlbmRlcmluZ2ApLCBidXQgc2VydmVyLXNpZGUgdXNlc1xuXHQgIC8vIGBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uYCBpbnN0ZWFkLiBUaGlzIG9wdGlvbiBpcyBoZXJlIHNvIHRoYXQgaXQnc1xuXHQgIC8vIGFjY2Vzc2libGUgYW5kIGRlZmF1bHRzIHRvIGZhbHNlIHdoZW4gYFJlYWN0RE9NQ29tcG9uZW50YCBhbmRcblx0ICAvLyBgUmVhY3RUZXh0Q29tcG9uZW50YCBjaGVja3MgaXQgaW4gYG1vdW50Q29tcG9uZW50YC5gXG5cdCAgdGhpcy5yZW5kZXJUb1N0YXRpY01hcmt1cCA9IGZhbHNlO1xuXHQgIHRoaXMucmVhY3RNb3VudFJlYWR5ID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQobnVsbCk7XG5cdCAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlID0gUmVhY3RQdXRMaXN0ZW5lclF1ZXVlLmdldFBvb2xlZCgpO1xuXHR9XG5cdFxuXHR2YXIgTWl4aW4gPSB7XG5cdCAgLyoqXG5cdCAgICogQHNlZSBUcmFuc2FjdGlvblxuXHQgICAqIEBhYnN0cmFjdFxuXHQgICAqIEBmaW5hbFxuXHQgICAqIEByZXR1cm4ge2FycmF5PG9iamVjdD59IExpc3Qgb2Ygb3BlcmF0aW9uIHdyYXAgcHJvY2VlZHVyZXMuXG5cdCAgICogICBUT0RPOiBjb252ZXJ0IHRvIGFycmF5PFRyYW5zYWN0aW9uV3JhcHBlcj5cblx0ICAgKi9cblx0ICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBxdWV1ZSB0byBjb2xsZWN0IGBvbkRPTVJlYWR5YCBjYWxsYmFja3Mgd2l0aC5cblx0ICAgKi9cblx0ICBnZXRSZWFjdE1vdW50UmVhZHk6IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIHRoaXMucmVhY3RNb3VudFJlYWR5O1xuXHQgIH0sXG5cdFxuXHQgIGdldFB1dExpc3RlbmVyUXVldWU6IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIHRoaXMucHV0TGlzdGVuZXJRdWV1ZTtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciB0aGlzLCBhbmQgd2lsbCBpbnZva2UgdGhpcyBiZWZvcmUgYWxsb3dpbmcgdGhpc1xuXHQgICAqIGluc3RhbmNlIHRvIGJlIHJlc3VzZWQuXG5cdCAgICovXG5cdCAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG5cdCAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5yZWFjdE1vdW50UmVhZHkpO1xuXHQgICAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBudWxsO1xuXHRcblx0ICAgIFJlYWN0UHV0TGlzdGVuZXJRdWV1ZS5yZWxlYXNlKHRoaXMucHV0TGlzdGVuZXJRdWV1ZSk7XG5cdCAgICB0aGlzLnB1dExpc3RlbmVyUXVldWUgPSBudWxsO1xuXHQgIH1cblx0fTtcblx0XG5cdFxuXHRhc3NpZ24oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5wcm90b3R5cGUsIFRyYW5zYWN0aW9uLk1peGluLCBNaXhpbik7XG5cdFxuXHRQb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbik7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb247XG5cblxuLyoqKi8gfSxcbi8qIDE0OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcblx0ICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0U2VydmVyUmVuZGVyaW5nXG5cdCAqL1xuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBSZWFjdEVsZW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHR2YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcblx0dmFyIFJlYWN0TWFya3VwQ2hlY2tzdW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1KTtcblx0dmFyIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24gPVxuXHQgIF9fd2VicGFja19yZXF1aXJlX18oMTQ5KTtcblx0XG5cdHZhciBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNyk7XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0LyoqXG5cdCAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG5cdCAqIEByZXR1cm4ge3N0cmluZ30gdGhlIEhUTUwgbWFya3VwXG5cdCAqL1xuXHRmdW5jdGlvbiByZW5kZXJUb1N0cmluZyhlbGVtZW50KSB7XG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSxcblx0ICAgICdyZW5kZXJUb1N0cmluZygpOiBZb3UgbXVzdCBwYXNzIGEgdmFsaWQgUmVhY3RFbGVtZW50Lidcblx0ICApIDogaW52YXJpYW50KFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkpO1xuXHRcblx0ICB2YXIgdHJhbnNhY3Rpb247XG5cdCAgdHJ5IHtcblx0ICAgIHZhciBpZCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0Um9vdElEKCk7XG5cdCAgICB0cmFuc2FjdGlvbiA9IFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKGZhbHNlKTtcblx0XG5cdCAgICByZXR1cm4gdHJhbnNhY3Rpb24ucGVyZm9ybShmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChlbGVtZW50LCBudWxsKTtcblx0ICAgICAgdmFyIG1hcmt1cCA9IGNvbXBvbmVudEluc3RhbmNlLm1vdW50Q29tcG9uZW50KGlkLCB0cmFuc2FjdGlvbiwgMCk7XG5cdCAgICAgIHJldHVybiBSZWFjdE1hcmt1cENoZWNrc3VtLmFkZENoZWNrc3VtVG9NYXJrdXAobWFya3VwKTtcblx0ICAgIH0sIG51bGwpO1xuXHQgIH0gZmluYWxseSB7XG5cdCAgICBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuXHQgIH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG5cdCAqIEByZXR1cm4ge3N0cmluZ30gdGhlIEhUTUwgbWFya3VwLCB3aXRob3V0IHRoZSBleHRyYSBSZWFjdCBJRCBhbmQgY2hlY2tzdW1cblx0ICogKGZvciBnZW5lcmF0aW5nIHN0YXRpYyBwYWdlcylcblx0ICovXG5cdGZ1bmN0aW9uIHJlbmRlclRvU3RhdGljTWFya3VwKGVsZW1lbnQpIHtcblx0ICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpLFxuXHQgICAgJ3JlbmRlclRvU3RhdGljTWFya3VwKCk6IFlvdSBtdXN0IHBhc3MgYSB2YWxpZCBSZWFjdEVsZW1lbnQuJ1xuXHQgICkgOiBpbnZhcmlhbnQoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSk7XG5cdFxuXHQgIHZhciB0cmFuc2FjdGlvbjtcblx0ICB0cnkge1xuXHQgICAgdmFyIGlkID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RSb290SUQoKTtcblx0ICAgIHRyYW5zYWN0aW9uID0gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5nZXRQb29sZWQodHJ1ZSk7XG5cdFxuXHQgICAgcmV0dXJuIHRyYW5zYWN0aW9uLnBlcmZvcm0oZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoZWxlbWVudCwgbnVsbCk7XG5cdCAgICAgIHJldHVybiBjb21wb25lbnRJbnN0YW5jZS5tb3VudENvbXBvbmVudChpZCwgdHJhbnNhY3Rpb24sIDApO1xuXHQgICAgfSwgbnVsbCk7XG5cdCAgfSBmaW5hbGx5IHtcblx0ICAgIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG5cdCAgfVxuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IHtcblx0ICByZW5kZXJUb1N0cmluZzogcmVuZGVyVG9TdHJpbmcsXG5cdCAgcmVuZGVyVG9TdGF0aWNNYXJrdXA6IHJlbmRlclRvU3RhdGljTWFya3VwXG5cdH07XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiAxNDkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb25cblx0ICogQHR5cGVjaGVja3Ncblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBQb29sZWRDbGFzcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXHR2YXIgQ2FsbGJhY2tRdWV1ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDIpO1xuXHR2YXIgUmVhY3RQdXRMaXN0ZW5lclF1ZXVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Myk7XG5cdHZhciBUcmFuc2FjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xuXHRcblx0dmFyIGFzc2lnbiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdHZhciBlbXB0eUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cdFxuXHQvKipcblx0ICogUHJvdmlkZXMgYSBgQ2FsbGJhY2tRdWV1ZWAgcXVldWUgZm9yIGNvbGxlY3RpbmcgYG9uRE9NUmVhZHlgIGNhbGxiYWNrc1xuXHQgKiBkdXJpbmcgdGhlIHBlcmZvcm1pbmcgb2YgdGhlIHRyYW5zYWN0aW9uLlxuXHQgKi9cblx0dmFyIE9OX0RPTV9SRUFEWV9RVUVVRUlORyA9IHtcblx0ICAvKipcblx0ICAgKiBJbml0aWFsaXplcyB0aGUgaW50ZXJuYWwgYG9uRE9NUmVhZHlgIHF1ZXVlLlxuXHQgICAqL1xuXHQgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5yZWFjdE1vdW50UmVhZHkucmVzZXQoKTtcblx0ICB9LFxuXHRcblx0ICBjbG9zZTogZW1wdHlGdW5jdGlvblxuXHR9O1xuXHRcblx0dmFyIFBVVF9MSVNURU5FUl9RVUVVRUlORyA9IHtcblx0ICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMucHV0TGlzdGVuZXJRdWV1ZS5yZXNldCgpO1xuXHQgIH0sXG5cdFxuXHQgIGNsb3NlOiBlbXB0eUZ1bmN0aW9uXG5cdH07XG5cdFxuXHQvKipcblx0ICogRXhlY3V0ZWQgd2l0aGluIHRoZSBzY29wZSBvZiB0aGUgYFRyYW5zYWN0aW9uYCBpbnN0YW5jZS4gQ29uc2lkZXIgdGhlc2UgYXNcblx0ICogYmVpbmcgbWVtYmVyIG1ldGhvZHMsIGJ1dCB3aXRoIGFuIGltcGxpZWQgb3JkZXJpbmcgd2hpbGUgYmVpbmcgaXNvbGF0ZWQgZnJvbVxuXHQgKiBlYWNoIG90aGVyLlxuXHQgKi9cblx0dmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW1xuXHQgIFBVVF9MSVNURU5FUl9RVUVVRUlORyxcblx0ICBPTl9ET01fUkVBRFlfUVVFVUVJTkdcblx0XTtcblx0XG5cdC8qKlxuXHQgKiBAY2xhc3MgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvblxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHJlbmRlclRvU3RhdGljTWFya3VwXG5cdCAqL1xuXHRmdW5jdGlvbiBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uKHJlbmRlclRvU3RhdGljTWFya3VwKSB7XG5cdCAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xuXHQgIHRoaXMucmVuZGVyVG9TdGF0aWNNYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cDtcblx0ICB0aGlzLnJlYWN0TW91bnRSZWFkeSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKG51bGwpO1xuXHQgIHRoaXMucHV0TGlzdGVuZXJRdWV1ZSA9IFJlYWN0UHV0TGlzdGVuZXJRdWV1ZS5nZXRQb29sZWQoKTtcblx0fVxuXHRcblx0dmFyIE1peGluID0ge1xuXHQgIC8qKlxuXHQgICAqIEBzZWUgVHJhbnNhY3Rpb25cblx0ICAgKiBAYWJzdHJhY3Rcblx0ICAgKiBAZmluYWxcblx0ICAgKiBAcmV0dXJuIHthcnJheX0gRW1wdHkgbGlzdCBvZiBvcGVyYXRpb24gd3JhcCBwcm9jZWVkdXJlcy5cblx0ICAgKi9cblx0ICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBxdWV1ZSB0byBjb2xsZWN0IGBvbkRPTVJlYWR5YCBjYWxsYmFja3Mgd2l0aC5cblx0ICAgKi9cblx0ICBnZXRSZWFjdE1vdW50UmVhZHk6IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIHRoaXMucmVhY3RNb3VudFJlYWR5O1xuXHQgIH0sXG5cdFxuXHQgIGdldFB1dExpc3RlbmVyUXVldWU6IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIHRoaXMucHV0TGlzdGVuZXJRdWV1ZTtcblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciB0aGlzLCBhbmQgd2lsbCBpbnZva2UgdGhpcyBiZWZvcmUgYWxsb3dpbmcgdGhpc1xuXHQgICAqIGluc3RhbmNlIHRvIGJlIHJlc3VzZWQuXG5cdCAgICovXG5cdCAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG5cdCAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5yZWFjdE1vdW50UmVhZHkpO1xuXHQgICAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBudWxsO1xuXHRcblx0ICAgIFJlYWN0UHV0TGlzdGVuZXJRdWV1ZS5yZWxlYXNlKHRoaXMucHV0TGlzdGVuZXJRdWV1ZSk7XG5cdCAgICB0aGlzLnB1dExpc3RlbmVyUXVldWUgPSBudWxsO1xuXHQgIH1cblx0fTtcblx0XG5cdFxuXHRhc3NpZ24oXG5cdCAgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5wcm90b3R5cGUsXG5cdCAgVHJhbnNhY3Rpb24uTWl4aW4sXG5cdCAgTWl4aW5cblx0KTtcblx0XG5cdFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbjtcblxuXG4vKioqLyB9LFxuLyogMTUwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFNWR0RPTVByb3BlcnR5Q29uZmlnXG5cdCAqL1xuXHRcblx0Lypqc2xpbnQgYml0d2lzZTogdHJ1ZSovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBET01Qcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXHRcblx0dmFyIE1VU1RfVVNFX0FUVFJJQlVURSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5NVVNUX1VTRV9BVFRSSUJVVEU7XG5cdFxuXHR2YXIgU1ZHRE9NUHJvcGVydHlDb25maWcgPSB7XG5cdCAgUHJvcGVydGllczoge1xuXHQgICAgY3g6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIGN5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICBkOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICBkeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHQgICAgZHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIGZpbGw6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIGZpbGxPcGFjaXR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICBmb250RmFtaWx5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICBmb250U2l6ZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHQgICAgZng6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIGZ5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICBncmFkaWVudFRyYW5zZm9ybTogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHQgICAgZ3JhZGllbnRVbml0czogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHQgICAgbWFya2VyRW5kOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICBtYXJrZXJNaWQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIG1hcmtlclN0YXJ0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICBvZmZzZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIG9wYWNpdHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIHBhdHRlcm5Db250ZW50VW5pdHM6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIHBhdHRlcm5Vbml0czogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHQgICAgcG9pbnRzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICByOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICByeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHQgICAgcnk6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIHNwcmVhZE1ldGhvZDogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHQgICAgc3RvcENvbG9yOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICBzdG9wT3BhY2l0eTogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHQgICAgc3Ryb2tlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICBzdHJva2VEYXNoYXJyYXk6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIHN0cm9rZUxpbmVjYXA6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIHN0cm9rZU9wYWNpdHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIHN0cm9rZVdpZHRoOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICB0ZXh0QW5jaG9yOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICB0cmFuc2Zvcm06IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIHZlcnNpb246IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIHZpZXdCb3g6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIHgxOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICB4MjogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHQgICAgeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuXHQgICAgeTE6IE1VU1RfVVNFX0FUVFJJQlVURSxcblx0ICAgIHkyOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cdCAgICB5OiBNVVNUX1VTRV9BVFRSSUJVVEVcblx0ICB9LFxuXHQgIERPTUF0dHJpYnV0ZU5hbWVzOiB7XG5cdCAgICBmaWxsT3BhY2l0eTogJ2ZpbGwtb3BhY2l0eScsXG5cdCAgICBmb250RmFtaWx5OiAnZm9udC1mYW1pbHknLFxuXHQgICAgZm9udFNpemU6ICdmb250LXNpemUnLFxuXHQgICAgZ3JhZGllbnRUcmFuc2Zvcm06ICdncmFkaWVudFRyYW5zZm9ybScsXG5cdCAgICBncmFkaWVudFVuaXRzOiAnZ3JhZGllbnRVbml0cycsXG5cdCAgICBtYXJrZXJFbmQ6ICdtYXJrZXItZW5kJyxcblx0ICAgIG1hcmtlck1pZDogJ21hcmtlci1taWQnLFxuXHQgICAgbWFya2VyU3RhcnQ6ICdtYXJrZXItc3RhcnQnLFxuXHQgICAgcGF0dGVybkNvbnRlbnRVbml0czogJ3BhdHRlcm5Db250ZW50VW5pdHMnLFxuXHQgICAgcGF0dGVyblVuaXRzOiAncGF0dGVyblVuaXRzJyxcblx0ICAgIHByZXNlcnZlQXNwZWN0UmF0aW86ICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJyxcblx0ICAgIHNwcmVhZE1ldGhvZDogJ3NwcmVhZE1ldGhvZCcsXG5cdCAgICBzdG9wQ29sb3I6ICdzdG9wLWNvbG9yJyxcblx0ICAgIHN0b3BPcGFjaXR5OiAnc3RvcC1vcGFjaXR5Jyxcblx0ICAgIHN0cm9rZURhc2hhcnJheTogJ3N0cm9rZS1kYXNoYXJyYXknLFxuXHQgICAgc3Ryb2tlTGluZWNhcDogJ3N0cm9rZS1saW5lY2FwJyxcblx0ICAgIHN0cm9rZU9wYWNpdHk6ICdzdHJva2Utb3BhY2l0eScsXG5cdCAgICBzdHJva2VXaWR0aDogJ3N0cm9rZS13aWR0aCcsXG5cdCAgICB0ZXh0QW5jaG9yOiAndGV4dC1hbmNob3InLFxuXHQgICAgdmlld0JveDogJ3ZpZXdCb3gnXG5cdCAgfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBTVkdET01Qcm9wZXJ0eUNvbmZpZztcblxuXG4vKioqLyB9LFxuLyogMTUxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFNlbGVjdEV2ZW50UGx1Z2luXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgRXZlbnRDb25zdGFudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgRXZlbnRQcm9wYWdhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXHR2YXIgUmVhY3RJbnB1dFNlbGVjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNDcpO1xuXHR2YXIgU3ludGhldGljRXZlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblx0XG5cdHZhciBnZXRBY3RpdmVFbGVtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OSk7XG5cdHZhciBpc1RleHRJbnB1dEVsZW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgzKTtcblx0dmFyIGtleU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cdHZhciBzaGFsbG93RXF1YWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4MSk7XG5cdFxuXHR2YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cdFxuXHR2YXIgZXZlbnRUeXBlcyA9IHtcblx0ICBzZWxlY3Q6IHtcblx0ICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG5cdCAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblNlbGVjdDogbnVsbH0pLFxuXHQgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uU2VsZWN0Q2FwdHVyZTogbnVsbH0pXG5cdCAgICB9LFxuXHQgICAgZGVwZW5kZW5jaWVzOiBbXG5cdCAgICAgIHRvcExldmVsVHlwZXMudG9wQmx1cixcblx0ICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDb250ZXh0TWVudSxcblx0ICAgICAgdG9wTGV2ZWxUeXBlcy50b3BGb2N1cyxcblx0ICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLFxuXHQgICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bixcblx0ICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZVVwLFxuXHQgICAgICB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZVxuXHQgICAgXVxuXHQgIH1cblx0fTtcblx0XG5cdHZhciBhY3RpdmVFbGVtZW50ID0gbnVsbDtcblx0dmFyIGFjdGl2ZUVsZW1lbnRJRCA9IG51bGw7XG5cdHZhciBsYXN0U2VsZWN0aW9uID0gbnVsbDtcblx0dmFyIG1vdXNlRG93biA9IGZhbHNlO1xuXHRcblx0LyoqXG5cdCAqIEdldCBhbiBvYmplY3Qgd2hpY2ggaXMgYSB1bmlxdWUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGN1cnJlbnQgc2VsZWN0aW9uLlxuXHQgKlxuXHQgKiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgbm90IGJlIGNvbnNpc3RlbnQgYWNyb3NzIG5vZGVzIG9yIGJyb3dzZXJzLCBidXRcblx0ICogdHdvIGlkZW50aWNhbCBzZWxlY3Rpb25zIG9uIHRoZSBzYW1lIG5vZGUgd2lsbCByZXR1cm4gaWRlbnRpY2FsIG9iamVjdHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuXHQgKiBAcGFyYW0ge29iamVjdH1cblx0ICovXG5cdGZ1bmN0aW9uIGdldFNlbGVjdGlvbihub2RlKSB7XG5cdCAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gbm9kZSAmJlxuXHQgICAgICBSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhub2RlKSkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgc3RhcnQ6IG5vZGUuc2VsZWN0aW9uU3RhcnQsXG5cdCAgICAgIGVuZDogbm9kZS5zZWxlY3Rpb25FbmRcblx0ICAgIH07XG5cdCAgfSBlbHNlIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG5cdCAgICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgYW5jaG9yTm9kZTogc2VsZWN0aW9uLmFuY2hvck5vZGUsXG5cdCAgICAgIGFuY2hvck9mZnNldDogc2VsZWN0aW9uLmFuY2hvck9mZnNldCxcblx0ICAgICAgZm9jdXNOb2RlOiBzZWxlY3Rpb24uZm9jdXNOb2RlLFxuXHQgICAgICBmb2N1c09mZnNldDogc2VsZWN0aW9uLmZvY3VzT2Zmc2V0XG5cdCAgICB9O1xuXHQgIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uKSB7XG5cdCAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIHBhcmVudEVsZW1lbnQ6IHJhbmdlLnBhcmVudEVsZW1lbnQoKSxcblx0ICAgICAgdGV4dDogcmFuZ2UudGV4dCxcblx0ICAgICAgdG9wOiByYW5nZS5ib3VuZGluZ1RvcCxcblx0ICAgICAgbGVmdDogcmFuZ2UuYm91bmRpbmdMZWZ0XG5cdCAgICB9O1xuXHQgIH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIFBvbGwgc2VsZWN0aW9uIHRvIHNlZSB3aGV0aGVyIGl0J3MgY2hhbmdlZC5cblx0ICpcblx0ICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG5cdCAqIEByZXR1cm4gez9TeW50aGV0aWNFdmVudH1cblx0ICovXG5cdGZ1bmN0aW9uIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50KSB7XG5cdCAgLy8gRW5zdXJlIHdlIGhhdmUgdGhlIHJpZ2h0IGVsZW1lbnQsIGFuZCB0aGF0IHRoZSB1c2VyIGlzIG5vdCBkcmFnZ2luZyBhXG5cdCAgLy8gc2VsZWN0aW9uICh0aGlzIG1hdGNoZXMgbmF0aXZlIGBzZWxlY3RgIGV2ZW50IGJlaGF2aW9yKS4gSW4gSFRNTDUsIHNlbGVjdFxuXHQgIC8vIGZpcmVzIG9ubHkgb24gaW5wdXQgYW5kIHRleHRhcmVhIHRodXMgaWYgdGhlcmUncyBubyBmb2N1c2VkIGVsZW1lbnQgd2Vcblx0ICAvLyB3b24ndCBkaXNwYXRjaC5cblx0ICBpZiAobW91c2VEb3duIHx8XG5cdCAgICAgIGFjdGl2ZUVsZW1lbnQgPT0gbnVsbCB8fFxuXHQgICAgICBhY3RpdmVFbGVtZW50ICE9IGdldEFjdGl2ZUVsZW1lbnQoKSkge1xuXHQgICAgcmV0dXJuO1xuXHQgIH1cblx0XG5cdCAgLy8gT25seSBmaXJlIHdoZW4gc2VsZWN0aW9uIGhhcyBhY3R1YWxseSBjaGFuZ2VkLlxuXHQgIHZhciBjdXJyZW50U2VsZWN0aW9uID0gZ2V0U2VsZWN0aW9uKGFjdGl2ZUVsZW1lbnQpO1xuXHQgIGlmICghbGFzdFNlbGVjdGlvbiB8fCAhc2hhbGxvd0VxdWFsKGxhc3RTZWxlY3Rpb24sIGN1cnJlbnRTZWxlY3Rpb24pKSB7XG5cdCAgICBsYXN0U2VsZWN0aW9uID0gY3VycmVudFNlbGVjdGlvbjtcblx0XG5cdCAgICB2YXIgc3ludGhldGljRXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoXG5cdCAgICAgIGV2ZW50VHlwZXMuc2VsZWN0LFxuXHQgICAgICBhY3RpdmVFbGVtZW50SUQsXG5cdCAgICAgIG5hdGl2ZUV2ZW50XG5cdCAgICApO1xuXHRcblx0ICAgIHN5bnRoZXRpY0V2ZW50LnR5cGUgPSAnc2VsZWN0Jztcblx0ICAgIHN5bnRoZXRpY0V2ZW50LnRhcmdldCA9IGFjdGl2ZUVsZW1lbnQ7XG5cdFxuXHQgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKHN5bnRoZXRpY0V2ZW50KTtcblx0XG5cdCAgICByZXR1cm4gc3ludGhldGljRXZlbnQ7XG5cdCAgfVxuXHR9XG5cdFxuXHQvKipcblx0ICogVGhpcyBwbHVnaW4gY3JlYXRlcyBhbiBgb25TZWxlY3RgIGV2ZW50IHRoYXQgbm9ybWFsaXplcyBzZWxlY3QgZXZlbnRzXG5cdCAqIGFjcm9zcyBmb3JtIGVsZW1lbnRzLlxuXHQgKlxuXHQgKiBTdXBwb3J0ZWQgZWxlbWVudHMgYXJlOlxuXHQgKiAtIGlucHV0IChzZWUgYGlzVGV4dElucHV0RWxlbWVudGApXG5cdCAqIC0gdGV4dGFyZWFcblx0ICogLSBjb250ZW50RWRpdGFibGVcblx0ICpcblx0ICogVGhpcyBkaWZmZXJzIGZyb20gbmF0aXZlIGJyb3dzZXIgaW1wbGVtZW50YXRpb25zIGluIHRoZSBmb2xsb3dpbmcgd2F5czpcblx0ICogLSBGaXJlcyBvbiBjb250ZW50RWRpdGFibGUgZmllbGRzIGFzIHdlbGwgYXMgaW5wdXRzLlxuXHQgKiAtIEZpcmVzIGZvciBjb2xsYXBzZWQgc2VsZWN0aW9uLlxuXHQgKiAtIEZpcmVzIGFmdGVyIHVzZXIgaW5wdXQuXG5cdCAqL1xuXHR2YXIgU2VsZWN0RXZlbnRQbHVnaW4gPSB7XG5cdFxuXHQgIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cdFxuXHQgIC8qKlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cblx0ICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cblx0ICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG5cdCAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG5cdCAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cblx0ICAgKi9cblx0ICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcblx0ICAgICAgdG9wTGV2ZWxUeXBlLFxuXHQgICAgICB0b3BMZXZlbFRhcmdldCxcblx0ICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcblx0ICAgICAgbmF0aXZlRXZlbnQpIHtcblx0XG5cdCAgICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuXHQgICAgICAvLyBUcmFjayB0aGUgaW5wdXQgbm9kZSB0aGF0IGhhcyBmb2N1cy5cblx0ICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzOlxuXHQgICAgICAgIGlmIChpc1RleHRJbnB1dEVsZW1lbnQodG9wTGV2ZWxUYXJnZXQpIHx8XG5cdCAgICAgICAgICAgIHRvcExldmVsVGFyZ2V0LmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnKSB7XG5cdCAgICAgICAgICBhY3RpdmVFbGVtZW50ID0gdG9wTGV2ZWxUYXJnZXQ7XG5cdCAgICAgICAgICBhY3RpdmVFbGVtZW50SUQgPSB0b3BMZXZlbFRhcmdldElEO1xuXHQgICAgICAgICAgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQmx1cjpcblx0ICAgICAgICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcblx0ICAgICAgICBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xuXHQgICAgICAgIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xuXHQgICAgICAgIGJyZWFrO1xuXHRcblx0ICAgICAgLy8gRG9uJ3QgZmlyZSB0aGUgZXZlbnQgd2hpbGUgdGhlIHVzZXIgaXMgZHJhZ2dpbmcuIFRoaXMgbWF0Y2hlcyB0aGVcblx0ICAgICAgLy8gc2VtYW50aWNzIG9mIHRoZSBuYXRpdmUgc2VsZWN0IGV2ZW50LlxuXHQgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duOlxuXHQgICAgICAgIG1vdXNlRG93biA9IHRydWU7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb250ZXh0TWVudTpcblx0ICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXA6XG5cdCAgICAgICAgbW91c2VEb3duID0gZmFsc2U7XG5cdCAgICAgICAgcmV0dXJuIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50KTtcblx0XG5cdCAgICAgIC8vIENocm9tZSBhbmQgSUUgZmlyZSBub24tc3RhbmRhcmQgZXZlbnQgd2hlbiBzZWxlY3Rpb24gaXMgY2hhbmdlZCAoYW5kXG5cdCAgICAgIC8vIHNvbWV0aW1lcyB3aGVuIGl0IGhhc24ndCkuXG5cdCAgICAgIC8vIEZpcmVmb3ggZG9lc24ndCBzdXBwb3J0IHNlbGVjdGlvbmNoYW5nZSwgc28gY2hlY2sgc2VsZWN0aW9uIHN0YXR1c1xuXHQgICAgICAvLyBhZnRlciBlYWNoIGtleSBlbnRyeS4gVGhlIHNlbGVjdGlvbiBjaGFuZ2VzIGFmdGVyIGtleWRvd24gYW5kIGJlZm9yZVxuXHQgICAgICAvLyBrZXl1cCwgYnV0IHdlIGNoZWNrIG9uIGtleWRvd24gYXMgd2VsbCBpbiB0aGUgY2FzZSBvZiBob2xkaW5nIGRvd24gYVxuXHQgICAgICAvLyBrZXksIHdoZW4gbXVsdGlwbGUga2V5ZG93biBldmVudHMgYXJlIGZpcmVkIGJ1dCBvbmx5IG9uZSBrZXl1cCBpcy5cblx0ICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZTpcblx0ICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd246XG5cdCAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcDpcblx0ICAgICAgICByZXR1cm4gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQpO1xuXHQgICAgfVxuXHQgIH1cblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gU2VsZWN0RXZlbnRQbHVnaW47XG5cblxuLyoqKi8gfSxcbi8qIDE1MiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBTZXJ2ZXJSZWFjdFJvb3RJbmRleFxuXHQgKiBAdHlwZWNoZWNrc1xuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0LyoqXG5cdCAqIFNpemUgb2YgdGhlIHJlYWN0Um9vdCBJRCBzcGFjZS4gV2UgZ2VuZXJhdGUgcmFuZG9tIG51bWJlcnMgZm9yIFJlYWN0IHJvb3Rcblx0ICogSURzIGFuZCBpZiB0aGVyZSdzIGEgY29sbGlzaW9uIHRoZSBldmVudHMgYW5kIERPTSB1cGRhdGUgc3lzdGVtIHdpbGxcblx0ICogZ2V0IGNvbmZ1c2VkLiBJbiB0aGUgZnV0dXJlIHdlIG5lZWQgYSB3YXkgdG8gZ2VuZXJhdGUgR1VJRHMgYnV0IGZvclxuXHQgKiBub3cgdGhpcyB3aWxsIHdvcmsgb24gYSBzbWFsbGVyIHNjYWxlLlxuXHQgKi9cblx0dmFyIEdMT0JBTF9NT1VOVF9QT0lOVF9NQVggPSBNYXRoLnBvdygyLCA1Myk7XG5cdFxuXHR2YXIgU2VydmVyUmVhY3RSb290SW5kZXggPSB7XG5cdCAgY3JlYXRlUmVhY3RSb290SW5kZXg6IGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogR0xPQkFMX01PVU5UX1BPSU5UX01BWCk7XG5cdCAgfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBTZXJ2ZXJSZWFjdFJvb3RJbmRleDtcblxuXG4vKioqLyB9LFxuLyogMTUzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgU2ltcGxlRXZlbnRQbHVnaW5cblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBFdmVudENvbnN0YW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdHZhciBFdmVudFBsdWdpblV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Myk7XG5cdHZhciBFdmVudFByb3BhZ2F0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XG5cdHZhciBTeW50aGV0aWNDbGlwYm9hcmRFdmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMTU0KTtcblx0dmFyIFN5bnRoZXRpY0V2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cdHZhciBTeW50aGV0aWNGb2N1c0V2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTcpO1xuXHR2YXIgU3ludGhldGljS2V5Ym9hcmRFdmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMTU5KTtcblx0dmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcblx0dmFyIFN5bnRoZXRpY0RyYWdFdmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMTU2KTtcblx0dmFyIFN5bnRoZXRpY1RvdWNoRXZlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2MCk7XG5cdHZhciBTeW50aGV0aWNVSUV2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cdHZhciBTeW50aGV0aWNXaGVlbEV2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjEpO1xuXHRcblx0dmFyIGdldEV2ZW50Q2hhckNvZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyKTtcblx0XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIga2V5T2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblx0dmFyIHdhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXHRcblx0dmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXHRcblx0dmFyIGV2ZW50VHlwZXMgPSB7XG5cdCAgYmx1cjoge1xuXHQgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcblx0ICAgICAgYnViYmxlZDoga2V5T2Yoe29uQmx1cjogdHJ1ZX0pLFxuXHQgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQmx1ckNhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgY2xpY2s6IHtcblx0ICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG5cdCAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNsaWNrOiB0cnVlfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25DbGlja0NhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgY29udGV4dE1lbnU6IHtcblx0ICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG5cdCAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvbnRleHRNZW51OiB0cnVlfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Db250ZXh0TWVudUNhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgY29weToge1xuXHQgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcblx0ICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ29weTogdHJ1ZX0pLFxuXHQgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ29weUNhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgY3V0OiB7XG5cdCAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuXHQgICAgICBidWJibGVkOiBrZXlPZih7b25DdXQ6IHRydWV9KSxcblx0ICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkN1dENhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgZG91YmxlQ2xpY2s6IHtcblx0ICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG5cdCAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRvdWJsZUNsaWNrOiB0cnVlfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Eb3VibGVDbGlja0NhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgZHJhZzoge1xuXHQgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcblx0ICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJhZzogdHJ1ZX0pLFxuXHQgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ0NhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgZHJhZ0VuZDoge1xuXHQgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcblx0ICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJhZ0VuZDogdHJ1ZX0pLFxuXHQgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ0VuZENhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgZHJhZ0VudGVyOiB7XG5cdCAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuXHQgICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnRW50ZXI6IHRydWV9KSxcblx0ICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdFbnRlckNhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgZHJhZ0V4aXQ6IHtcblx0ICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG5cdCAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdFeGl0OiB0cnVlfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnRXhpdENhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgZHJhZ0xlYXZlOiB7XG5cdCAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuXHQgICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnTGVhdmU6IHRydWV9KSxcblx0ICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdMZWF2ZUNhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgZHJhZ092ZXI6IHtcblx0ICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG5cdCAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdPdmVyOiB0cnVlfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnT3ZlckNhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgZHJhZ1N0YXJ0OiB7XG5cdCAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuXHQgICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnU3RhcnQ6IHRydWV9KSxcblx0ICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdTdGFydENhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgZHJvcDoge1xuXHQgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcblx0ICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJvcDogdHJ1ZX0pLFxuXHQgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJvcENhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgZm9jdXM6IHtcblx0ICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG5cdCAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkZvY3VzOiB0cnVlfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Gb2N1c0NhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgaW5wdXQ6IHtcblx0ICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG5cdCAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbklucHV0OiB0cnVlfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25JbnB1dENhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAga2V5RG93bjoge1xuXHQgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcblx0ICAgICAgYnViYmxlZDoga2V5T2Yoe29uS2V5RG93bjogdHJ1ZX0pLFxuXHQgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uS2V5RG93bkNhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAga2V5UHJlc3M6IHtcblx0ICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG5cdCAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbktleVByZXNzOiB0cnVlfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25LZXlQcmVzc0NhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAga2V5VXA6IHtcblx0ICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG5cdCAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbktleVVwOiB0cnVlfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25LZXlVcENhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgbG9hZDoge1xuXHQgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcblx0ICAgICAgYnViYmxlZDoga2V5T2Yoe29uTG9hZDogdHJ1ZX0pLFxuXHQgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTG9hZENhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgZXJyb3I6IHtcblx0ICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG5cdCAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkVycm9yOiB0cnVlfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25FcnJvckNhcHR1cmU6IHRydWV9KVxuXHQgICAgfVxuXHQgIH0sXG5cdCAgLy8gTm90ZTogV2UgZG8gbm90IGFsbG93IGxpc3RlbmluZyB0byBtb3VzZU92ZXIgZXZlbnRzLiBJbnN0ZWFkLCB1c2UgdGhlXG5cdCAgLy8gb25Nb3VzZUVudGVyL29uTW91c2VMZWF2ZSBjcmVhdGVkIGJ5IGBFbnRlckxlYXZlRXZlbnRQbHVnaW5gLlxuXHQgIG1vdXNlRG93bjoge1xuXHQgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcblx0ICAgICAgYnViYmxlZDoga2V5T2Yoe29uTW91c2VEb3duOiB0cnVlfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Nb3VzZURvd25DYXB0dXJlOiB0cnVlfSlcblx0ICAgIH1cblx0ICB9LFxuXHQgIG1vdXNlTW92ZToge1xuXHQgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcblx0ICAgICAgYnViYmxlZDoga2V5T2Yoe29uTW91c2VNb3ZlOiB0cnVlfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Nb3VzZU1vdmVDYXB0dXJlOiB0cnVlfSlcblx0ICAgIH1cblx0ICB9LFxuXHQgIG1vdXNlT3V0OiB7XG5cdCAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuXHQgICAgICBidWJibGVkOiBrZXlPZih7b25Nb3VzZU91dDogdHJ1ZX0pLFxuXHQgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTW91c2VPdXRDYXB0dXJlOiB0cnVlfSlcblx0ICAgIH1cblx0ICB9LFxuXHQgIG1vdXNlT3Zlcjoge1xuXHQgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcblx0ICAgICAgYnViYmxlZDoga2V5T2Yoe29uTW91c2VPdmVyOiB0cnVlfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Nb3VzZU92ZXJDYXB0dXJlOiB0cnVlfSlcblx0ICAgIH1cblx0ICB9LFxuXHQgIG1vdXNlVXA6IHtcblx0ICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG5cdCAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbk1vdXNlVXA6IHRydWV9KSxcblx0ICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbk1vdXNlVXBDYXB0dXJlOiB0cnVlfSlcblx0ICAgIH1cblx0ICB9LFxuXHQgIHBhc3RlOiB7XG5cdCAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuXHQgICAgICBidWJibGVkOiBrZXlPZih7b25QYXN0ZTogdHJ1ZX0pLFxuXHQgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uUGFzdGVDYXB0dXJlOiB0cnVlfSlcblx0ICAgIH1cblx0ICB9LFxuXHQgIHJlc2V0OiB7XG5cdCAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuXHQgICAgICBidWJibGVkOiBrZXlPZih7b25SZXNldDogdHJ1ZX0pLFxuXHQgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uUmVzZXRDYXB0dXJlOiB0cnVlfSlcblx0ICAgIH1cblx0ICB9LFxuXHQgIHNjcm9sbDoge1xuXHQgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcblx0ICAgICAgYnViYmxlZDoga2V5T2Yoe29uU2Nyb2xsOiB0cnVlfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25TY3JvbGxDYXB0dXJlOiB0cnVlfSlcblx0ICAgIH1cblx0ICB9LFxuXHQgIHN1Ym1pdDoge1xuXHQgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcblx0ICAgICAgYnViYmxlZDoga2V5T2Yoe29uU3VibWl0OiB0cnVlfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25TdWJtaXRDYXB0dXJlOiB0cnVlfSlcblx0ICAgIH1cblx0ICB9LFxuXHQgIHRvdWNoQ2FuY2VsOiB7XG5cdCAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuXHQgICAgICBidWJibGVkOiBrZXlPZih7b25Ub3VjaENhbmNlbDogdHJ1ZX0pLFxuXHQgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uVG91Y2hDYW5jZWxDYXB0dXJlOiB0cnVlfSlcblx0ICAgIH1cblx0ICB9LFxuXHQgIHRvdWNoRW5kOiB7XG5cdCAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuXHQgICAgICBidWJibGVkOiBrZXlPZih7b25Ub3VjaEVuZDogdHJ1ZX0pLFxuXHQgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uVG91Y2hFbmRDYXB0dXJlOiB0cnVlfSlcblx0ICAgIH1cblx0ICB9LFxuXHQgIHRvdWNoTW92ZToge1xuXHQgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcblx0ICAgICAgYnViYmxlZDoga2V5T2Yoe29uVG91Y2hNb3ZlOiB0cnVlfSksXG5cdCAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Ub3VjaE1vdmVDYXB0dXJlOiB0cnVlfSlcblx0ICAgIH1cblx0ICB9LFxuXHQgIHRvdWNoU3RhcnQ6IHtcblx0ICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG5cdCAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblRvdWNoU3RhcnQ6IHRydWV9KSxcblx0ICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblRvdWNoU3RhcnRDYXB0dXJlOiB0cnVlfSlcblx0ICAgIH1cblx0ICB9LFxuXHQgIHdoZWVsOiB7XG5cdCAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuXHQgICAgICBidWJibGVkOiBrZXlPZih7b25XaGVlbDogdHJ1ZX0pLFxuXHQgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uV2hlZWxDYXB0dXJlOiB0cnVlfSlcblx0ICAgIH1cblx0ICB9XG5cdH07XG5cdFxuXHR2YXIgdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnID0ge1xuXHQgIHRvcEJsdXI6ICAgICAgICBldmVudFR5cGVzLmJsdXIsXG5cdCAgdG9wQ2xpY2s6ICAgICAgIGV2ZW50VHlwZXMuY2xpY2ssXG5cdCAgdG9wQ29udGV4dE1lbnU6IGV2ZW50VHlwZXMuY29udGV4dE1lbnUsXG5cdCAgdG9wQ29weTogICAgICAgIGV2ZW50VHlwZXMuY29weSxcblx0ICB0b3BDdXQ6ICAgICAgICAgZXZlbnRUeXBlcy5jdXQsXG5cdCAgdG9wRG91YmxlQ2xpY2s6IGV2ZW50VHlwZXMuZG91YmxlQ2xpY2ssXG5cdCAgdG9wRHJhZzogICAgICAgIGV2ZW50VHlwZXMuZHJhZyxcblx0ICB0b3BEcmFnRW5kOiAgICAgZXZlbnRUeXBlcy5kcmFnRW5kLFxuXHQgIHRvcERyYWdFbnRlcjogICBldmVudFR5cGVzLmRyYWdFbnRlcixcblx0ICB0b3BEcmFnRXhpdDogICAgZXZlbnRUeXBlcy5kcmFnRXhpdCxcblx0ICB0b3BEcmFnTGVhdmU6ICAgZXZlbnRUeXBlcy5kcmFnTGVhdmUsXG5cdCAgdG9wRHJhZ092ZXI6ICAgIGV2ZW50VHlwZXMuZHJhZ092ZXIsXG5cdCAgdG9wRHJhZ1N0YXJ0OiAgIGV2ZW50VHlwZXMuZHJhZ1N0YXJ0LFxuXHQgIHRvcERyb3A6ICAgICAgICBldmVudFR5cGVzLmRyb3AsXG5cdCAgdG9wRXJyb3I6ICAgICAgIGV2ZW50VHlwZXMuZXJyb3IsXG5cdCAgdG9wRm9jdXM6ICAgICAgIGV2ZW50VHlwZXMuZm9jdXMsXG5cdCAgdG9wSW5wdXQ6ICAgICAgIGV2ZW50VHlwZXMuaW5wdXQsXG5cdCAgdG9wS2V5RG93bjogICAgIGV2ZW50VHlwZXMua2V5RG93bixcblx0ICB0b3BLZXlQcmVzczogICAgZXZlbnRUeXBlcy5rZXlQcmVzcyxcblx0ICB0b3BLZXlVcDogICAgICAgZXZlbnRUeXBlcy5rZXlVcCxcblx0ICB0b3BMb2FkOiAgICAgICAgZXZlbnRUeXBlcy5sb2FkLFxuXHQgIHRvcE1vdXNlRG93bjogICBldmVudFR5cGVzLm1vdXNlRG93bixcblx0ICB0b3BNb3VzZU1vdmU6ICAgZXZlbnRUeXBlcy5tb3VzZU1vdmUsXG5cdCAgdG9wTW91c2VPdXQ6ICAgIGV2ZW50VHlwZXMubW91c2VPdXQsXG5cdCAgdG9wTW91c2VPdmVyOiAgIGV2ZW50VHlwZXMubW91c2VPdmVyLFxuXHQgIHRvcE1vdXNlVXA6ICAgICBldmVudFR5cGVzLm1vdXNlVXAsXG5cdCAgdG9wUGFzdGU6ICAgICAgIGV2ZW50VHlwZXMucGFzdGUsXG5cdCAgdG9wUmVzZXQ6ICAgICAgIGV2ZW50VHlwZXMucmVzZXQsXG5cdCAgdG9wU2Nyb2xsOiAgICAgIGV2ZW50VHlwZXMuc2Nyb2xsLFxuXHQgIHRvcFN1Ym1pdDogICAgICBldmVudFR5cGVzLnN1Ym1pdCxcblx0ICB0b3BUb3VjaENhbmNlbDogZXZlbnRUeXBlcy50b3VjaENhbmNlbCxcblx0ICB0b3BUb3VjaEVuZDogICAgZXZlbnRUeXBlcy50b3VjaEVuZCxcblx0ICB0b3BUb3VjaE1vdmU6ICAgZXZlbnRUeXBlcy50b3VjaE1vdmUsXG5cdCAgdG9wVG91Y2hTdGFydDogIGV2ZW50VHlwZXMudG91Y2hTdGFydCxcblx0ICB0b3BXaGVlbDogICAgICAgZXZlbnRUeXBlcy53aGVlbFxuXHR9O1xuXHRcblx0Zm9yICh2YXIgdG9wTGV2ZWxUeXBlIGluIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZykge1xuXHQgIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZ1t0b3BMZXZlbFR5cGVdLmRlcGVuZGVuY2llcyA9IFt0b3BMZXZlbFR5cGVdO1xuXHR9XG5cdFxuXHR2YXIgU2ltcGxlRXZlbnRQbHVnaW4gPSB7XG5cdFxuXHQgIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cdFxuXHQgIC8qKlxuXHQgICAqIFNhbWUgYXMgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24sIGV4Y2VwdCBjYW5jZWxzIHRoZSBldmVudCB3aGVuIHJldHVyblxuXHQgICAqIHZhbHVlIGlzIGZhbHNlLiBUaGlzIGJlaGF2aW9yIHdpbGwgYmUgZGlzYWJsZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS5cblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7b2JqZWN0fSBFdmVudCB0byBiZSBkaXNwYXRjaGVkLlxuXHQgICAqIEBwYXJhbSB7ZnVuY3Rpb259IEFwcGxpY2F0aW9uLWxldmVsIGNhbGxiYWNrLlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBkb21JRCBET00gSUQgdG8gcGFzcyB0byB0aGUgY2FsbGJhY2suXG5cdCAgICovXG5cdCAgZXhlY3V0ZURpc3BhdGNoOiBmdW5jdGlvbihldmVudCwgbGlzdGVuZXIsIGRvbUlEKSB7XG5cdCAgICB2YXIgcmV0dXJuVmFsdWUgPSBFdmVudFBsdWdpblV0aWxzLmV4ZWN1dGVEaXNwYXRjaChldmVudCwgbGlzdGVuZXIsIGRvbUlEKTtcblx0XG5cdCAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcblx0ICAgICAgdHlwZW9mIHJldHVyblZhbHVlICE9PSAnYm9vbGVhbicsXG5cdCAgICAgICdSZXR1cm5pbmcgYGZhbHNlYCBmcm9tIGFuIGV2ZW50IGhhbmRsZXIgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSAnICtcblx0ICAgICAgJ2lnbm9yZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gSW5zdGVhZCwgbWFudWFsbHkgY2FsbCAnICtcblx0ICAgICAgJ2Uuc3RvcFByb3BhZ2F0aW9uKCkgb3IgZS5wcmV2ZW50RGVmYXVsdCgpLCBhcyBhcHByb3ByaWF0ZS4nXG5cdCAgICApIDogbnVsbCk7XG5cdFxuXHQgICAgaWYgKHJldHVyblZhbHVlID09PSBmYWxzZSkge1xuXHQgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0ICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICAvKipcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG5cdCAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG5cdCAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuXHQgICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuXHQgICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG5cdCAgICovXG5cdCAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG5cdCAgICAgIHRvcExldmVsVHlwZSxcblx0ICAgICAgdG9wTGV2ZWxUYXJnZXQsXG5cdCAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG5cdCAgICAgIG5hdGl2ZUV2ZW50KSB7XG5cdCAgICB2YXIgZGlzcGF0Y2hDb25maWcgPSB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdG9wTGV2ZWxUeXBlXTtcblx0ICAgIGlmICghZGlzcGF0Y2hDb25maWcpIHtcblx0ICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICB9XG5cdCAgICB2YXIgRXZlbnRDb25zdHJ1Y3Rvcjtcblx0ICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG5cdCAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BJbnB1dDpcblx0ICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcExvYWQ6XG5cdCAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BFcnJvcjpcblx0ICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFJlc2V0OlxuXHQgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU3VibWl0OlxuXHQgICAgICAgIC8vIEhUTUwgRXZlbnRzXG5cdCAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9pbmRleC5odG1sI2V2ZW50cy0wXG5cdCAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0V2ZW50O1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3M6XG5cdCAgICAgICAgLy8gRmlyZUZveCBjcmVhdGVzIGEga2V5cHJlc3MgZXZlbnQgZm9yIGZ1bmN0aW9uIGtleXMgdG9vLiBUaGlzIHJlbW92ZXNcblx0ICAgICAgICAvLyB0aGUgdW53YW50ZWQga2V5cHJlc3MgZXZlbnRzLiBFbnRlciBpcyBob3dldmVyIGJvdGggcHJpbnRhYmxlIGFuZFxuXHQgICAgICAgIC8vIG5vbi1wcmludGFibGUuIE9uZSB3b3VsZCBleHBlY3QgVGFiIHRvIGJlIGFzIHdlbGwgKGJ1dCBpdCBpc24ndCkuXG5cdCAgICAgICAgaWYgKGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpID09PSAwKSB7XG5cdCAgICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuXHQgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5RG93bjpcblx0ICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVVwOlxuXHQgICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQmx1cjpcblx0ICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzOlxuXHQgICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNGb2N1c0V2ZW50O1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ2xpY2s6XG5cdCAgICAgICAgLy8gRmlyZWZveCBjcmVhdGVzIGEgY2xpY2sgZXZlbnQgb24gcmlnaHQgbW91c2UgY2xpY2tzLiBUaGlzIHJlbW92ZXMgdGhlXG5cdCAgICAgICAgLy8gdW53YW50ZWQgY2xpY2sgZXZlbnRzLlxuXHQgICAgICAgIGlmIChuYXRpdmVFdmVudC5idXR0b24gPT09IDIpIHtcblx0ICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG5cdCAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb250ZXh0TWVudTpcblx0ICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERvdWJsZUNsaWNrOlxuXHQgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duOlxuXHQgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VNb3ZlOlxuXHQgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQ6XG5cdCAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXI6XG5cdCAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZVVwOlxuXHQgICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZzpcblx0ICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFbmQ6XG5cdCAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnRW50ZXI6XG5cdCAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnRXhpdDpcblx0ICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdMZWF2ZTpcblx0ICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdPdmVyOlxuXHQgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ1N0YXJ0OlxuXHQgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJvcDpcblx0ICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRHJhZ0V2ZW50O1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hDYW5jZWw6XG5cdCAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaEVuZDpcblx0ICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoTW92ZTpcblx0ICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoU3RhcnQ6XG5cdCAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1RvdWNoRXZlbnQ7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTY3JvbGw6XG5cdCAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1VJRXZlbnQ7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BXaGVlbDpcblx0ICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljV2hlZWxFdmVudDtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvcHk6XG5cdCAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDdXQ6XG5cdCAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQYXN0ZTpcblx0ICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICB9XG5cdCAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuXHQgICAgICBFdmVudENvbnN0cnVjdG9yLFxuXHQgICAgICAnU2ltcGxlRXZlbnRQbHVnaW46IFVuaGFuZGxlZCBldmVudCB0eXBlLCBgJXNgLicsXG5cdCAgICAgIHRvcExldmVsVHlwZVxuXHQgICAgKSA6IGludmFyaWFudChFdmVudENvbnN0cnVjdG9yKSk7XG5cdCAgICB2YXIgZXZlbnQgPSBFdmVudENvbnN0cnVjdG9yLmdldFBvb2xlZChcblx0ICAgICAgZGlzcGF0Y2hDb25maWcsXG5cdCAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG5cdCAgICAgIG5hdGl2ZUV2ZW50XG5cdCAgICApO1xuXHQgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcblx0ICAgIHJldHVybiBldmVudDtcblx0ICB9XG5cdFxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBTaW1wbGVFdmVudFBsdWdpbjtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDE1NCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNDbGlwYm9hcmRFdmVudFxuXHQgKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIFN5bnRoZXRpY0V2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cdFxuXHQvKipcblx0ICogQGludGVyZmFjZSBFdmVudFxuXHQgKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2NsaXBib2FyZC1hcGlzL1xuXHQgKi9cblx0dmFyIENsaXBib2FyZEV2ZW50SW50ZXJmYWNlID0ge1xuXHQgIGNsaXBib2FyZERhdGE6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdCAgICByZXR1cm4gKFxuXHQgICAgICAnY2xpcGJvYXJkRGF0YScgaW4gZXZlbnQgP1xuXHQgICAgICAgIGV2ZW50LmNsaXBib2FyZERhdGEgOlxuXHQgICAgICAgIHdpbmRvdy5jbGlwYm9hcmREYXRhXG5cdCAgICApO1xuXHQgIH1cblx0fTtcblx0XG5cdC8qKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cblx0ICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuXHQgKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cblx0ICovXG5cdGZ1bmN0aW9uIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcblx0ICBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xuXHR9XG5cdFxuXHRTeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljQ2xpcGJvYXJkRXZlbnQsIENsaXBib2FyZEV2ZW50SW50ZXJmYWNlKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG5cdFxuXG5cbi8qKiovIH0sXG4vKiAxNTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljQ29tcG9zaXRpb25FdmVudFxuXHQgKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIFN5bnRoZXRpY0V2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cdFxuXHQvKipcblx0ICogQGludGVyZmFjZSBFdmVudFxuXHQgKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWNvbXBvc2l0aW9uZXZlbnRzXG5cdCAqL1xuXHR2YXIgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSA9IHtcblx0ICBkYXRhOiBudWxsXG5cdH07XG5cdFxuXHQvKipcblx0ICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cblx0ICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG5cdCAqL1xuXHRmdW5jdGlvbiBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50KFxuXHQgIGRpc3BhdGNoQ29uZmlnLFxuXHQgIGRpc3BhdGNoTWFya2VyLFxuXHQgIG5hdGl2ZUV2ZW50KSB7XG5cdCAgU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcblx0fVxuXHRcblx0U3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFxuXHQgIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQsXG5cdCAgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZVxuXHQpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50O1xuXHRcblxuXG4vKioqLyB9LFxuLyogMTU2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0RyYWdFdmVudFxuXHQgKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcblx0XG5cdC8qKlxuXHQgKiBAaW50ZXJmYWNlIERyYWdFdmVudFxuXHQgKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cblx0ICovXG5cdHZhciBEcmFnRXZlbnRJbnRlcmZhY2UgPSB7XG5cdCAgZGF0YVRyYW5zZmVyOiBudWxsXG5cdH07XG5cdFxuXHQvKipcblx0ICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cblx0ICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG5cdCAqL1xuXHRmdW5jdGlvbiBTeW50aGV0aWNEcmFnRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuXHQgIFN5bnRoZXRpY01vdXNlRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcblx0fVxuXHRcblx0U3ludGhldGljTW91c2VFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljRHJhZ0V2ZW50LCBEcmFnRXZlbnRJbnRlcmZhY2UpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNEcmFnRXZlbnQ7XG5cblxuLyoqKi8gfSxcbi8qIDE1NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNGb2N1c0V2ZW50XG5cdCAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgU3ludGhldGljVUlFdmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpO1xuXHRcblx0LyoqXG5cdCAqIEBpbnRlcmZhY2UgRm9jdXNFdmVudFxuXHQgKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cblx0ICovXG5cdHZhciBGb2N1c0V2ZW50SW50ZXJmYWNlID0ge1xuXHQgIHJlbGF0ZWRUYXJnZXQ6IG51bGxcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cblx0ICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuXHQgKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cblx0ICovXG5cdGZ1bmN0aW9uIFN5bnRoZXRpY0ZvY3VzRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuXHQgIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcblx0fVxuXHRcblx0U3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljRm9jdXNFdmVudCwgRm9jdXNFdmVudEludGVyZmFjZSk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG5cblxuLyoqKi8gfSxcbi8qIDE1OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNJbnB1dEV2ZW50XG5cdCAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgU3ludGhldGljRXZlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblx0XG5cdC8qKlxuXHQgKiBAaW50ZXJmYWNlIEV2ZW50XG5cdCAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAxMzExMDVcblx0ICogICAgICAvI2V2ZW50cy1pbnB1dGV2ZW50c1xuXHQgKi9cblx0dmFyIElucHV0RXZlbnRJbnRlcmZhY2UgPSB7XG5cdCAgZGF0YTogbnVsbFxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuXHQgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG5cdCAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuXHQgKi9cblx0ZnVuY3Rpb24gU3ludGhldGljSW5wdXRFdmVudChcblx0ICBkaXNwYXRjaENvbmZpZyxcblx0ICBkaXNwYXRjaE1hcmtlcixcblx0ICBuYXRpdmVFdmVudCkge1xuXHQgIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG5cdH1cblx0XG5cdFN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhcblx0ICBTeW50aGV0aWNJbnB1dEV2ZW50LFxuXHQgIElucHV0RXZlbnRJbnRlcmZhY2Vcblx0KTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gU3ludGhldGljSW5wdXRFdmVudDtcblx0XG5cblxuLyoqKi8gfSxcbi8qIDE1OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNLZXlib2FyZEV2ZW50XG5cdCAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgU3ludGhldGljVUlFdmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpO1xuXHRcblx0dmFyIGdldEV2ZW50Q2hhckNvZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyKTtcblx0dmFyIGdldEV2ZW50S2V5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzEpO1xuXHR2YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Myk7XG5cdFxuXHQvKipcblx0ICogQGludGVyZmFjZSBLZXlib2FyZEV2ZW50XG5cdCAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuXHQgKi9cblx0dmFyIEtleWJvYXJkRXZlbnRJbnRlcmZhY2UgPSB7XG5cdCAga2V5OiBnZXRFdmVudEtleSxcblx0ICBsb2NhdGlvbjogbnVsbCxcblx0ICBjdHJsS2V5OiBudWxsLFxuXHQgIHNoaWZ0S2V5OiBudWxsLFxuXHQgIGFsdEtleTogbnVsbCxcblx0ICBtZXRhS2V5OiBudWxsLFxuXHQgIHJlcGVhdDogbnVsbCxcblx0ICBsb2NhbGU6IG51bGwsXG5cdCAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlLFxuXHQgIC8vIExlZ2FjeSBJbnRlcmZhY2Vcblx0ICBjaGFyQ29kZTogZnVuY3Rpb24oZXZlbnQpIHtcblx0ICAgIC8vIGBjaGFyQ29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleVByZXNzIGV2ZW50IGFuZCByZXByZXNlbnRzIHRoZSB2YWx1ZSBvZlxuXHQgICAgLy8gdGhlIGFjdHVhbCBwcmludGFibGUgY2hhcmFjdGVyLlxuXHRcblx0ICAgIC8vIEtleVByZXNzIGlzIGRlcHJlY2F0ZWQsIGJ1dCBpdHMgcmVwbGFjZW1lbnQgaXMgbm90IHlldCBmaW5hbCBhbmQgbm90XG5cdCAgICAvLyBpbXBsZW1lbnRlZCBpbiBhbnkgbWFqb3IgYnJvd3Nlci4gT25seSBLZXlQcmVzcyBoYXMgY2hhckNvZGUuXG5cdCAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuXHQgICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gMDtcblx0ICB9LFxuXHQgIGtleUNvZGU6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdCAgICAvLyBga2V5Q29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleURvd24vVXAgZXZlbnQgYW5kIHJlcHJlc2VudHMgdGhlIHZhbHVlIG9mXG5cdCAgICAvLyBwaHlzaWNhbCBrZXlib2FyZCBrZXkuXG5cdFxuXHQgICAgLy8gVGhlIGFjdHVhbCBtZWFuaW5nIG9mIHRoZSB2YWx1ZSBkZXBlbmRzIG9uIHRoZSB1c2Vycycga2V5Ym9hcmQgbGF5b3V0XG5cdCAgICAvLyB3aGljaCBjYW5ub3QgYmUgZGV0ZWN0ZWQuIEFzc3VtaW5nIHRoYXQgaXQgaXMgYSBVUyBrZXlib2FyZCBsYXlvdXRcblx0ICAgIC8vIHByb3ZpZGVzIGEgc3VycHJpc2luZ2x5IGFjY3VyYXRlIG1hcHBpbmcgZm9yIFVTIGFuZCBFdXJvcGVhbiB1c2Vycy5cblx0ICAgIC8vIER1ZSB0byB0aGlzLCBpdCBpcyBsZWZ0IHRvIHRoZSB1c2VyIHRvIGltcGxlbWVudCBhdCB0aGlzIHRpbWUuXG5cdCAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleWRvd24nIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcpIHtcblx0ICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGU7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gMDtcblx0ICB9LFxuXHQgIHdoaWNoOiBmdW5jdGlvbihldmVudCkge1xuXHQgICAgLy8gYHdoaWNoYCBpcyBhbiBhbGlhcyBmb3IgZWl0aGVyIGBrZXlDb2RlYCBvciBgY2hhckNvZGVgIGRlcGVuZGluZyBvbiB0aGVcblx0ICAgIC8vIHR5cGUgb2YgdGhlIGV2ZW50LlxuXHQgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcblx0ICAgICAgcmV0dXJuIGdldEV2ZW50Q2hhckNvZGUoZXZlbnQpO1xuXHQgICAgfVxuXHQgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG5cdCAgICAgIHJldHVybiBldmVudC5rZXlDb2RlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIDA7XG5cdCAgfVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuXHQgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG5cdCAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuXHQgKi9cblx0ZnVuY3Rpb24gU3ludGhldGljS2V5Ym9hcmRFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG5cdCAgU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xuXHR9XG5cdFxuXHRTeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNLZXlib2FyZEV2ZW50LCBLZXlib2FyZEV2ZW50SW50ZXJmYWNlKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gU3ludGhldGljS2V5Ym9hcmRFdmVudDtcblxuXG4vKioqLyB9LFxuLyogMTYwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY1RvdWNoRXZlbnRcblx0ICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcblx0ICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBTeW50aGV0aWNVSUV2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cdFxuXHR2YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Myk7XG5cdFxuXHQvKipcblx0ICogQGludGVyZmFjZSBUb3VjaEV2ZW50XG5cdCAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvdG91Y2gtZXZlbnRzL1xuXHQgKi9cblx0dmFyIFRvdWNoRXZlbnRJbnRlcmZhY2UgPSB7XG5cdCAgdG91Y2hlczogbnVsbCxcblx0ICB0YXJnZXRUb3VjaGVzOiBudWxsLFxuXHQgIGNoYW5nZWRUb3VjaGVzOiBudWxsLFxuXHQgIGFsdEtleTogbnVsbCxcblx0ICBtZXRhS2V5OiBudWxsLFxuXHQgIGN0cmxLZXk6IG51bGwsXG5cdCAgc2hpZnRLZXk6IG51bGwsXG5cdCAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlXG5cdH07XG5cdFxuXHQvKipcblx0ICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cblx0ICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG5cdCAqL1xuXHRmdW5jdGlvbiBTeW50aGV0aWNUb3VjaEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcblx0ICBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG5cdH1cblx0XG5cdFN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY1RvdWNoRXZlbnQsIFRvdWNoRXZlbnRJbnRlcmZhY2UpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNUb3VjaEV2ZW50O1xuXG5cbi8qKiovIH0sXG4vKiAxNjEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljV2hlZWxFdmVudFxuXHQgKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcblx0XG5cdC8qKlxuXHQgKiBAaW50ZXJmYWNlIFdoZWVsRXZlbnRcblx0ICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG5cdCAqL1xuXHR2YXIgV2hlZWxFdmVudEludGVyZmFjZSA9IHtcblx0ICBkZWx0YVg6IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdCAgICByZXR1cm4gKFxuXHQgICAgICAnZGVsdGFYJyBpbiBldmVudCA/IGV2ZW50LmRlbHRhWCA6XG5cdCAgICAgIC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhWGAgZm9yIFdlYmtpdCBhbmQgbm9ybWFsaXplIChyaWdodCBpcyBwb3NpdGl2ZSkuXG5cdCAgICAgICd3aGVlbERlbHRhWCcgaW4gZXZlbnQgPyAtZXZlbnQud2hlZWxEZWx0YVggOiAwXG5cdCAgICApO1xuXHQgIH0sXG5cdCAgZGVsdGFZOiBmdW5jdGlvbihldmVudCkge1xuXHQgICAgcmV0dXJuIChcblx0ICAgICAgJ2RlbHRhWScgaW4gZXZlbnQgPyBldmVudC5kZWx0YVkgOlxuXHQgICAgICAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YVlgIGZvciBXZWJraXQgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG5cdCAgICAgICd3aGVlbERlbHRhWScgaW4gZXZlbnQgPyAtZXZlbnQud2hlZWxEZWx0YVkgOlxuXHQgICAgICAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YWAgZm9yIElFPDkgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG5cdCAgICAgICd3aGVlbERlbHRhJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhIDogMFxuXHQgICAgKTtcblx0ICB9LFxuXHQgIGRlbHRhWjogbnVsbCxcblx0XG5cdCAgLy8gQnJvd3NlcnMgd2l0aG91dCBcImRlbHRhTW9kZVwiIGlzIHJlcG9ydGluZyBpbiByYXcgd2hlZWwgZGVsdGEgd2hlcmUgb25lXG5cdCAgLy8gbm90Y2ggb24gdGhlIHNjcm9sbCBpcyBhbHdheXMgKy8tIDEyMCwgcm91Z2hseSBlcXVpdmFsZW50IHRvIHBpeGVscy5cblx0ICAvLyBBIGdvb2QgYXBwcm94aW1hdGlvbiBvZiBET01fREVMVEFfTElORSAoMSkgaXMgNSUgb2Ygdmlld3BvcnQgc2l6ZSBvclxuXHQgIC8vIH40MCBwaXhlbHMsIGZvciBET01fREVMVEFfU0NSRUVOICgyKSBpdCBpcyA4Ny41JSBvZiB2aWV3cG9ydCBzaXplLlxuXHQgIGRlbHRhTW9kZTogbnVsbFxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuXHQgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG5cdCAqIEBleHRlbmRzIHtTeW50aGV0aWNNb3VzZUV2ZW50fVxuXHQgKi9cblx0ZnVuY3Rpb24gU3ludGhldGljV2hlZWxFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG5cdCAgU3ludGhldGljTW91c2VFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xuXHR9XG5cdFxuXHRTeW50aGV0aWNNb3VzZUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNXaGVlbEV2ZW50LCBXaGVlbEV2ZW50SW50ZXJmYWNlKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gU3ludGhldGljV2hlZWxFdmVudDtcblxuXG4vKioqLyB9LFxuLyogMTYyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIGFkbGVyMzJcblx0ICovXG5cdFxuXHQvKiBqc2xpbnQgYml0d2lzZTp0cnVlICovXG5cdFxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdHZhciBNT0QgPSA2NTUyMTtcblx0XG5cdC8vIFRoaXMgaXMgYSBjbGVhbi1yb29tIGltcGxlbWVudGF0aW9uIG9mIGFkbGVyMzIgZGVzaWduZWQgZm9yIGRldGVjdGluZ1xuXHQvLyBpZiBtYXJrdXAgaXMgbm90IHdoYXQgd2UgZXhwZWN0IGl0IHRvIGJlLiBJdCBkb2VzIG5vdCBuZWVkIHRvIGJlXG5cdC8vIGNyeXB0b2dyYXBoaWNhbGx5IHN0cm9uZywgb25seSByZWFzb25hYmx5IGdvb2QgYXQgZGV0ZWN0aW5nIGlmIG1hcmt1cFxuXHQvLyBnZW5lcmF0ZWQgb24gdGhlIHNlcnZlciBpcyBkaWZmZXJlbnQgdGhhbiB0aGF0IG9uIHRoZSBjbGllbnQuXG5cdGZ1bmN0aW9uIGFkbGVyMzIoZGF0YSkge1xuXHQgIHZhciBhID0gMTtcblx0ICB2YXIgYiA9IDA7XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG5cdCAgICBhID0gKGEgKyBkYXRhLmNoYXJDb2RlQXQoaSkpICUgTU9EO1xuXHQgICAgYiA9IChiICsgYSkgJSBNT0Q7XG5cdCAgfVxuXHQgIHJldHVybiBhIHwgKGIgPDwgMTYpO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGFkbGVyMzI7XG5cblxuLyoqKi8gfSxcbi8qIDE2MyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBjYW1lbGl6ZVxuXHQgKiBAdHlwZWNoZWNrc1xuXHQgKi9cblx0XG5cdHZhciBfaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG5cdFxuXHQvKipcblx0ICogQ2FtZWxjYXNlcyBhIGh5cGhlbmF0ZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcblx0ICpcblx0ICogICA+IGNhbWVsaXplKCdiYWNrZ3JvdW5kLWNvbG9yJylcblx0ICogICA8IFwiYmFja2dyb3VuZENvbG9yXCJcblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuXHRmdW5jdGlvbiBjYW1lbGl6ZShzdHJpbmcpIHtcblx0ICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoX2h5cGhlblBhdHRlcm4sIGZ1bmN0aW9uKF8sIGNoYXJhY3Rlcikge1xuXHQgICAgcmV0dXJuIGNoYXJhY3Rlci50b1VwcGVyQ2FzZSgpO1xuXHQgIH0pO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGNhbWVsaXplO1xuXG5cbi8qKiovIH0sXG4vKiAxNjQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIGNhbWVsaXplU3R5bGVOYW1lXG5cdCAqIEB0eXBlY2hlY2tzXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgY2FtZWxpemUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2Myk7XG5cdFxuXHR2YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcblx0XG5cdC8qKlxuXHQgKiBDYW1lbGNhc2VzIGEgaHlwaGVuYXRlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG5cdCAqXG5cdCAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnYmFja2dyb3VuZC1jb2xvcicpXG5cdCAqICAgPCBcImJhY2tncm91bmRDb2xvclwiXG5cdCAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnLW1vei10cmFuc2l0aW9uJylcblx0ICogICA8IFwiTW96VHJhbnNpdGlvblwiXG5cdCAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnLW1zLXRyYW5zaXRpb24nKVxuXHQgKiAgIDwgXCJtc1RyYW5zaXRpb25cIlxuXHQgKlxuXHQgKiBBcyBBbmRpIFNtaXRoIHN1Z2dlc3RzXG5cdCAqIChodHRwOi8vd3d3LmFuZGlzbWl0aC5jb20vYmxvZy8yMDEyLzAyL21vZGVybml6ci1wcmVmaXhlZC8pLCBhbiBgLW1zYCBwcmVmaXhcblx0ICogaXMgY29udmVydGVkIHRvIGxvd2VyY2FzZSBgbXNgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdGZ1bmN0aW9uIGNhbWVsaXplU3R5bGVOYW1lKHN0cmluZykge1xuXHQgIHJldHVybiBjYW1lbGl6ZShzdHJpbmcucmVwbGFjZShtc1BhdHRlcm4sICdtcy0nKSk7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gY2FtZWxpemVTdHlsZU5hbWU7XG5cblxuLyoqKi8gfSxcbi8qIDE2NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBjcmVhdGVBcnJheUZyb21cblx0ICogQHR5cGVjaGVja3Ncblx0ICovXG5cdFxuXHR2YXIgdG9BcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgyKTtcblx0XG5cdC8qKlxuXHQgKiBQZXJmb3JtIGEgaGV1cmlzdGljIHRlc3QgdG8gZGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBcImFycmF5LWxpa2VcIi5cblx0ICpcblx0ICogICBBIG1vbmsgYXNrZWQgSm9zaHUsIGEgWmVuIG1hc3RlciwgXCJIYXMgYSBkb2cgQnVkZGhhIG5hdHVyZT9cIlxuXHQgKiAgIEpvc2h1IHJlcGxpZWQ6IFwiTXUuXCJcblx0ICpcblx0ICogVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGlmIGl0cyBhcmd1bWVudCBoYXMgXCJhcnJheSBuYXR1cmVcIjogaXQgcmV0dXJuc1xuXHQgKiB0cnVlIGlmIHRoZSBhcmd1bWVudCBpcyBhbiBhY3R1YWwgYXJyYXksIGFuIGBhcmd1bWVudHMnIG9iamVjdCwgb3IgYW5cblx0ICogSFRNTENvbGxlY3Rpb24gKGUuZy4gbm9kZS5jaGlsZE5vZGVzIG9yIG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoKSkuXG5cdCAqXG5cdCAqIEl0IHdpbGwgcmV0dXJuIGZhbHNlIGZvciBvdGhlciBhcnJheS1saWtlIG9iamVjdHMgbGlrZSBGaWxlbGlzdC5cblx0ICpcblx0ICogQHBhcmFtIHsqfSBvYmpcblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICovXG5cdGZ1bmN0aW9uIGhhc0FycmF5TmF0dXJlKG9iaikge1xuXHQgIHJldHVybiAoXG5cdCAgICAvLyBub3QgbnVsbC9mYWxzZVxuXHQgICAgISFvYmogJiZcblx0ICAgIC8vIGFycmF5cyBhcmUgb2JqZWN0cywgTm9kZUxpc3RzIGFyZSBmdW5jdGlvbnMgaW4gU2FmYXJpXG5cdCAgICAodHlwZW9mIG9iaiA9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09ICdmdW5jdGlvbicpICYmXG5cdCAgICAvLyBxdWFja3MgbGlrZSBhbiBhcnJheVxuXHQgICAgKCdsZW5ndGgnIGluIG9iaikgJiZcblx0ICAgIC8vIG5vdCB3aW5kb3dcblx0ICAgICEoJ3NldEludGVydmFsJyBpbiBvYmopICYmXG5cdCAgICAvLyBubyBET00gbm9kZSBzaG91bGQgYmUgY29uc2lkZXJlZCBhbiBhcnJheS1saWtlXG5cdCAgICAvLyBhICdzZWxlY3QnIGVsZW1lbnQgaGFzICdsZW5ndGgnIGFuZCAnaXRlbScgcHJvcGVydGllcyBvbiBJRThcblx0ICAgICh0eXBlb2Ygb2JqLm5vZGVUeXBlICE9ICdudW1iZXInKSAmJlxuXHQgICAgKFxuXHQgICAgICAvLyBhIHJlYWwgYXJyYXlcblx0ICAgICAgKC8vIEhUTUxDb2xsZWN0aW9uL05vZGVMaXN0XG5cdCAgICAgIChBcnJheS5pc0FycmF5KG9iaikgfHxcblx0ICAgICAgLy8gYXJndW1lbnRzXG5cdCAgICAgICgnY2FsbGVlJyBpbiBvYmopIHx8ICdpdGVtJyBpbiBvYmopKVxuXHQgICAgKVxuXHQgICk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBFbnN1cmUgdGhhdCB0aGUgYXJndW1lbnQgaXMgYW4gYXJyYXkgYnkgd3JhcHBpbmcgaXQgaW4gYW4gYXJyYXkgaWYgaXQgaXMgbm90LlxuXHQgKiBDcmVhdGVzIGEgY29weSBvZiB0aGUgYXJndW1lbnQgaWYgaXQgaXMgYWxyZWFkeSBhbiBhcnJheS5cblx0ICpcblx0ICogVGhpcyBpcyBtb3N0bHkgdXNlZnVsIGlkaW9tYXRpY2FsbHk6XG5cdCAqXG5cdCAqICAgdmFyIGNyZWF0ZUFycmF5RnJvbSA9IHJlcXVpcmUoJ2NyZWF0ZUFycmF5RnJvbScpO1xuXHQgKlxuXHQgKiAgIGZ1bmN0aW9uIHRha2VzT25lT3JNb3JlVGhpbmdzKHRoaW5ncykge1xuXHQgKiAgICAgdGhpbmdzID0gY3JlYXRlQXJyYXlGcm9tKHRoaW5ncyk7XG5cdCAqICAgICAuLi5cblx0ICogICB9XG5cdCAqXG5cdCAqIFRoaXMgYWxsb3dzIHlvdSB0byB0cmVhdCBgdGhpbmdzJyBhcyBhbiBhcnJheSwgYnV0IGFjY2VwdCBzY2FsYXJzIGluIHRoZSBBUEkuXG5cdCAqXG5cdCAqIElmIHlvdSBuZWVkIHRvIGNvbnZlcnQgYW4gYXJyYXktbGlrZSBvYmplY3QsIGxpa2UgYGFyZ3VtZW50c2AsIGludG8gYW4gYXJyYXlcblx0ICogdXNlIHRvQXJyYXkgaW5zdGVhZC5cblx0ICpcblx0ICogQHBhcmFtIHsqfSBvYmpcblx0ICogQHJldHVybiB7YXJyYXl9XG5cdCAqL1xuXHRmdW5jdGlvbiBjcmVhdGVBcnJheUZyb20ob2JqKSB7XG5cdCAgaWYgKCFoYXNBcnJheU5hdHVyZShvYmopKSB7XG5cdCAgICByZXR1cm4gW29ial07XG5cdCAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcblx0ICAgIHJldHVybiBvYmouc2xpY2UoKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgcmV0dXJuIHRvQXJyYXkob2JqKTtcblx0ICB9XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gY3JlYXRlQXJyYXlGcm9tO1xuXG5cbi8qKiovIH0sXG4vKiAxNjYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudFxuXHQgKiBAdHlwZWNoZWNrc1xuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0Ly8gRGVmZWF0IGNpcmN1bGFyIHJlZmVyZW5jZXMgYnkgcmVxdWlyaW5nIHRoaXMgZGlyZWN0bHkuXG5cdHZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdHZhciBSZWFjdEVsZW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHRcblx0dmFyIGludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHQvKipcblx0ICogQ3JlYXRlIGEgY29tcG9uZW50IHRoYXQgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gd2hlbiB1bm1vdW50ZWQuXG5cdCAqXG5cdCAqIENvbXBvbmVudHMgbGlrZSA8aHRtbD4gPGhlYWQ+IGFuZCA8Ym9keT4gY2FuJ3QgYmUgcmVtb3ZlZCBvciBhZGRlZFxuXHQgKiBlYXNpbHkgaW4gYSBjcm9zcy1icm93c2VyIHdheSwgaG93ZXZlciBpdCdzIHZhbHVhYmxlIHRvIGJlIGFibGUgdG9cblx0ICogdGFrZSBhZHZhbnRhZ2Ugb2YgUmVhY3QncyByZWNvbmNpbGlhdGlvbiBmb3Igc3R5bGluZyBhbmQgPHRpdGxlPlxuXHQgKiBtYW5hZ2VtZW50LiBTbyB3ZSBqdXN0IGRvY3VtZW50IGl0IGFuZCB0aHJvdyBpbiBkYW5nZXJvdXMgY2FzZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIHRhZyB0byB3cmFwXG5cdCAqIEByZXR1cm4ge2Z1bmN0aW9ufSBjb252ZW5pZW5jZSBjb25zdHJ1Y3RvciBvZiBuZXcgY29tcG9uZW50XG5cdCAqL1xuXHRmdW5jdGlvbiBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudCh0YWcpIHtcblx0ICB2YXIgZWxlbWVudEZhY3RvcnkgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSh0YWcpO1xuXHRcblx0ICB2YXIgRnVsbFBhZ2VDb21wb25lbnQgPSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5jcmVhdGVDbGFzcyh7XG5cdCAgICBkaXNwbGF5TmFtZTogJ1JlYWN0RnVsbFBhZ2VDb21wb25lbnQnICsgdGFnLFxuXHRcblx0ICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcblx0ICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgICBmYWxzZSxcblx0ICAgICAgICAnJXMgdHJpZWQgdG8gdW5tb3VudC4gQmVjYXVzZSBvZiBjcm9zcy1icm93c2VyIHF1aXJrcyBpdCBpcyAnICtcblx0ICAgICAgICAnaW1wb3NzaWJsZSB0byB1bm1vdW50IHNvbWUgdG9wLWxldmVsIGNvbXBvbmVudHMgKGVnIDxodG1sPiwgPGhlYWQ+LCAnICtcblx0ICAgICAgICAnYW5kIDxib2R5PikgcmVsaWFibHkgYW5kIGVmZmljaWVudGx5LiBUbyBmaXggdGhpcywgaGF2ZSBhIHNpbmdsZSAnICtcblx0ICAgICAgICAndG9wLWxldmVsIGNvbXBvbmVudCB0aGF0IG5ldmVyIHVubW91bnRzIHJlbmRlciB0aGVzZSBlbGVtZW50cy4nLFxuXHQgICAgICAgIHRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWVcblx0ICAgICAgKSA6IGludmFyaWFudChmYWxzZSkpO1xuXHQgICAgfSxcblx0XG5cdCAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuXHQgICAgICByZXR1cm4gZWxlbWVudEZhY3RvcnkodGhpcy5wcm9wcyk7XG5cdCAgICB9XG5cdCAgfSk7XG5cdFxuXHQgIHJldHVybiBGdWxsUGFnZUNvbXBvbmVudDtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudDtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDE2NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cFxuXHQgKiBAdHlwZWNoZWNrc1xuXHQgKi9cblx0XG5cdC8qanNsaW50IGV2aWw6IHRydWUsIHN1YjogdHJ1ZSAqL1xuXHRcblx0dmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdHZhciBjcmVhdGVBcnJheUZyb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2NSk7XG5cdHZhciBnZXRNYXJrdXBXcmFwID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MCk7XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0LyoqXG5cdCAqIER1bW15IGNvbnRhaW5lciB1c2VkIHRvIHJlbmRlciBhbGwgbWFya3VwLlxuXHQgKi9cblx0dmFyIGR1bW15Tm9kZSA9XG5cdCAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuXHRcblx0LyoqXG5cdCAqIFBhdHRlcm4gdXNlZCBieSBgZ2V0Tm9kZU5hbWVgLlxuXHQgKi9cblx0dmFyIG5vZGVOYW1lUGF0dGVybiA9IC9eXFxzKjwoXFx3KykvO1xuXHRcblx0LyoqXG5cdCAqIEV4dHJhY3RzIHRoZSBgbm9kZU5hbWVgIG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIGEgc3RyaW5nIG9mIG1hcmt1cC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBTdHJpbmcgb2YgbWFya3VwLlxuXHQgKiBAcmV0dXJuIHs/c3RyaW5nfSBOb2RlIG5hbWUgb2YgdGhlIHN1cHBsaWVkIG1hcmt1cC5cblx0ICovXG5cdGZ1bmN0aW9uIGdldE5vZGVOYW1lKG1hcmt1cCkge1xuXHQgIHZhciBub2RlTmFtZU1hdGNoID0gbWFya3VwLm1hdGNoKG5vZGVOYW1lUGF0dGVybik7XG5cdCAgcmV0dXJuIG5vZGVOYW1lTWF0Y2ggJiYgbm9kZU5hbWVNYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBub2RlcyByZW5kZXJlZCBmcm9tIHRoZSBzdXBwbGllZCBtYXJrdXAuIFRoZVxuXHQgKiBvcHRpb25hbGx5IHN1cHBsaWVkIGBoYW5kbGVTY3JpcHRgIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCBvbmNlIGZvciBlYWNoXG5cdCAqIDxzY3JpcHQ+IGVsZW1lbnQgdGhhdCBpcyByZW5kZXJlZC4gSWYgbm8gYGhhbmRsZVNjcmlwdGAgZnVuY3Rpb24gaXMgc3VwcGxpZWQsXG5cdCAqIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gaWYgYW55IDxzY3JpcHQ+IGVsZW1lbnRzIGFyZSByZW5kZXJlZC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBBIHN0cmluZyBvZiB2YWxpZCBIVE1MIG1hcmt1cC5cblx0ICogQHBhcmFtIHs/ZnVuY3Rpb259IGhhbmRsZVNjcmlwdCBJbnZva2VkIG9uY2UgZm9yIGVhY2ggcmVuZGVyZWQgPHNjcmlwdD4uXG5cdCAqIEByZXR1cm4ge2FycmF5PERPTUVsZW1lbnR8RE9NVGV4dE5vZGU+fSBBbiBhcnJheSBvZiByZW5kZXJlZCBub2Rlcy5cblx0ICovXG5cdGZ1bmN0aW9uIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cChtYXJrdXAsIGhhbmRsZVNjcmlwdCkge1xuXHQgIHZhciBub2RlID0gZHVtbXlOb2RlO1xuXHQgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoISFkdW1teU5vZGUsICdjcmVhdGVOb2Rlc0Zyb21NYXJrdXAgZHVtbXkgbm90IGluaXRpYWxpemVkJykgOiBpbnZhcmlhbnQoISFkdW1teU5vZGUpKTtcblx0ICB2YXIgbm9kZU5hbWUgPSBnZXROb2RlTmFtZShtYXJrdXApO1xuXHRcblx0ICB2YXIgd3JhcCA9IG5vZGVOYW1lICYmIGdldE1hcmt1cFdyYXAobm9kZU5hbWUpO1xuXHQgIGlmICh3cmFwKSB7XG5cdCAgICBub2RlLmlubmVySFRNTCA9IHdyYXBbMV0gKyBtYXJrdXAgKyB3cmFwWzJdO1xuXHRcblx0ICAgIHZhciB3cmFwRGVwdGggPSB3cmFwWzBdO1xuXHQgICAgd2hpbGUgKHdyYXBEZXB0aC0tKSB7XG5cdCAgICAgIG5vZGUgPSBub2RlLmxhc3RDaGlsZDtcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgbm9kZS5pbm5lckhUTUwgPSBtYXJrdXA7XG5cdCAgfVxuXHRcblx0ICB2YXIgc2NyaXB0cyA9IG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xuXHQgIGlmIChzY3JpcHRzLmxlbmd0aCkge1xuXHQgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICAgaGFuZGxlU2NyaXB0LFxuXHQgICAgICAnY3JlYXRlTm9kZXNGcm9tTWFya3VwKC4uLik6IFVuZXhwZWN0ZWQgPHNjcmlwdD4gZWxlbWVudCByZW5kZXJlZC4nXG5cdCAgICApIDogaW52YXJpYW50KGhhbmRsZVNjcmlwdCkpO1xuXHQgICAgY3JlYXRlQXJyYXlGcm9tKHNjcmlwdHMpLmZvckVhY2goaGFuZGxlU2NyaXB0KTtcblx0ICB9XG5cdFxuXHQgIHZhciBub2RlcyA9IGNyZWF0ZUFycmF5RnJvbShub2RlLmNoaWxkTm9kZXMpO1xuXHQgIHdoaWxlIChub2RlLmxhc3RDaGlsZCkge1xuXHQgICAgbm9kZS5yZW1vdmVDaGlsZChub2RlLmxhc3RDaGlsZCk7XG5cdCAgfVxuXHQgIHJldHVybiBub2Rlcztcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVOb2Rlc0Zyb21NYXJrdXA7XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiAxNjggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgZGFuZ2Vyb3VzU3R5bGVWYWx1ZVxuXHQgKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIENTU1Byb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MCk7XG5cdFxuXHR2YXIgaXNVbml0bGVzc051bWJlciA9IENTU1Byb3BlcnR5LmlzVW5pdGxlc3NOdW1iZXI7XG5cdFxuXHQvKipcblx0ICogQ29udmVydCBhIHZhbHVlIGludG8gdGhlIHByb3BlciBjc3Mgd3JpdGFibGUgdmFsdWUuIFRoZSBzdHlsZSBuYW1lIGBuYW1lYFxuXHQgKiBzaG91bGQgYmUgbG9naWNhbCAobm8gaHlwaGVucyksIGFzIHNwZWNpZmllZFxuXHQgKiBpbiBgQ1NTUHJvcGVydHkuaXNVbml0bGVzc051bWJlcmAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIENTUyBwcm9wZXJ0eSBuYW1lIHN1Y2ggYXMgYHRvcE1hcmdpbmAuXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgQ1NTIHByb3BlcnR5IHZhbHVlIHN1Y2ggYXMgYDEwcHhgLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IE5vcm1hbGl6ZWQgc3R5bGUgdmFsdWUgd2l0aCBkaW1lbnNpb25zIGFwcGxpZWQuXG5cdCAqL1xuXHRmdW5jdGlvbiBkYW5nZXJvdXNTdHlsZVZhbHVlKG5hbWUsIHZhbHVlKSB7XG5cdCAgLy8gTm90ZSB0aGF0IHdlJ3ZlIHJlbW92ZWQgZXNjYXBlVGV4dEZvckJyb3dzZXIoKSBjYWxscyBoZXJlIHNpbmNlIHRoZVxuXHQgIC8vIHdob2xlIHN0cmluZyB3aWxsIGJlIGVzY2FwZWQgd2hlbiB0aGUgYXR0cmlidXRlIGlzIGluamVjdGVkIGludG9cblx0ICAvLyB0aGUgbWFya3VwLiBJZiB5b3UgcHJvdmlkZSB1bnNhZmUgdXNlciBkYXRhIGhlcmUgdGhleSBjYW4gaW5qZWN0XG5cdCAgLy8gYXJiaXRyYXJ5IENTUyB3aGljaCBtYXkgYmUgcHJvYmxlbWF0aWMgKEkgY291bGRuJ3QgcmVwcm8gdGhpcyk6XG5cdCAgLy8gaHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9YU1NfRmlsdGVyX0V2YXNpb25fQ2hlYXRfU2hlZXRcblx0ICAvLyBodHRwOi8vd3d3LnRoZXNwYW5uZXIuY28udWsvMjAwNy8xMS8yNi91bHRpbWF0ZS14c3MtY3NzLWluamVjdGlvbi9cblx0ICAvLyBUaGlzIGlzIG5vdCBhbiBYU1MgaG9sZSBidXQgaW5zdGVhZCBhIHBvdGVudGlhbCBDU1MgaW5qZWN0aW9uIGlzc3VlXG5cdCAgLy8gd2hpY2ggaGFzIGxlYWQgdG8gYSBncmVhdGVyIGRpc2N1c3Npb24gYWJvdXQgaG93IHdlJ3JlIGdvaW5nIHRvXG5cdCAgLy8gdHJ1c3QgVVJMcyBtb3ZpbmcgZm9yd2FyZC4gU2VlICMyMTE1OTAxXG5cdFxuXHQgIHZhciBpc0VtcHR5ID0gdmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyB8fCB2YWx1ZSA9PT0gJyc7XG5cdCAgaWYgKGlzRW1wdHkpIHtcblx0ICAgIHJldHVybiAnJztcblx0ICB9XG5cdFxuXHQgIHZhciBpc05vbk51bWVyaWMgPSBpc05hTih2YWx1ZSk7XG5cdCAgaWYgKGlzTm9uTnVtZXJpYyB8fCB2YWx1ZSA9PT0gMCB8fFxuXHQgICAgICBpc1VuaXRsZXNzTnVtYmVyLmhhc093blByb3BlcnR5KG5hbWUpICYmIGlzVW5pdGxlc3NOdW1iZXJbbmFtZV0pIHtcblx0ICAgIHJldHVybiAnJyArIHZhbHVlOyAvLyBjYXN0IHRvIHN0cmluZ1xuXHQgIH1cblx0XG5cdCAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0ICAgIHZhbHVlID0gdmFsdWUudHJpbSgpO1xuXHQgIH1cblx0ICByZXR1cm4gdmFsdWUgKyAncHgnO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGRhbmdlcm91c1N0eWxlVmFsdWU7XG5cblxuLyoqKi8gfSxcbi8qIDE2OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIGVtcHR5T2JqZWN0XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgZW1wdHlPYmplY3QgPSB7fTtcblx0XG5cdGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcblx0ICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDE3MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIGZsYXR0ZW5DaGlsZHJlblxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIFJlYWN0VGV4dENvbXBvbmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNzUpO1xuXHRcblx0dmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg3KTtcblx0dmFyIHdhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXHRcblx0LyoqXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IHRyYXZlcnNlQ29udGV4dCBDb250ZXh0IHBhc3NlZCB0aHJvdWdoIHRyYXZlcnNhbC5cblx0ICogQHBhcmFtIHs/UmVhY3RDb21wb25lbnR9IGNoaWxkIFJlYWN0IGNoaWxkIGNvbXBvbmVudC5cblx0ICogQHBhcmFtIHshc3RyaW5nfSBuYW1lIFN0cmluZyBuYW1lIG9mIGtleSBwYXRoIHRvIGNoaWxkLlxuXHQgKi9cblx0ZnVuY3Rpb24gZmxhdHRlblNpbmdsZUNoaWxkSW50b0NvbnRleHQodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSkge1xuXHQgIC8vIFdlIGZvdW5kIGEgY29tcG9uZW50IGluc3RhbmNlLlxuXHQgIHZhciByZXN1bHQgPSB0cmF2ZXJzZUNvbnRleHQ7XG5cdCAgdmFyIGtleVVuaXF1ZSA9ICFyZXN1bHQuaGFzT3duUHJvcGVydHkobmFtZSk7XG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG5cdCAgICBrZXlVbmlxdWUsXG5cdCAgICAnZmxhdHRlbkNoaWxkcmVuKC4uLik6IEVuY291bnRlcmVkIHR3byBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIGtleSwgJyArXG5cdCAgICAnYCVzYC4gQ2hpbGQga2V5cyBtdXN0IGJlIHVuaXF1ZTsgd2hlbiB0d28gY2hpbGRyZW4gc2hhcmUgYSBrZXksIG9ubHkgJyArXG5cdCAgICAndGhlIGZpcnN0IGNoaWxkIHdpbGwgYmUgdXNlZC4nLFxuXHQgICAgbmFtZVxuXHQgICkgOiBudWxsKTtcblx0ICBpZiAoa2V5VW5pcXVlICYmIGNoaWxkICE9IG51bGwpIHtcblx0ICAgIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkO1xuXHQgICAgdmFyIG5vcm1hbGl6ZWRWYWx1ZTtcblx0XG5cdCAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgbm9ybWFsaXplZFZhbHVlID0gUmVhY3RUZXh0Q29tcG9uZW50KGNoaWxkKTtcblx0ICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcblx0ICAgICAgbm9ybWFsaXplZFZhbHVlID0gUmVhY3RUZXh0Q29tcG9uZW50KCcnICsgY2hpbGQpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgbm9ybWFsaXplZFZhbHVlID0gY2hpbGQ7XG5cdCAgICB9XG5cdFxuXHQgICAgcmVzdWx0W25hbWVdID0gbm9ybWFsaXplZFZhbHVlO1xuXHQgIH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIEZsYXR0ZW5zIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC4gQW55IG51bGxcblx0ICogY2hpbGRyZW4gd2lsbCBub3QgYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdGluZyBvYmplY3QuXG5cdCAqIEByZXR1cm4geyFvYmplY3R9IGZsYXR0ZW5lZCBjaGlsZHJlbiBrZXllZCBieSBuYW1lLlxuXHQgKi9cblx0ZnVuY3Rpb24gZmxhdHRlbkNoaWxkcmVuKGNoaWxkcmVuKSB7XG5cdCAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcblx0ICAgIHJldHVybiBjaGlsZHJlbjtcblx0ICB9XG5cdCAgdmFyIHJlc3VsdCA9IHt9O1xuXHQgIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0LCByZXN1bHQpO1xuXHQgIHJldHVybiByZXN1bHQ7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkNoaWxkcmVuO1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogMTcxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIGdldEV2ZW50S2V5XG5cdCAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgZ2V0RXZlbnRDaGFyQ29kZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTIpO1xuXHRcblx0LyoqXG5cdCAqIE5vcm1hbGl6YXRpb24gb2YgZGVwcmVjYXRlZCBIVE1MNSBga2V5YCB2YWx1ZXNcblx0ICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudCNLZXlfbmFtZXNcblx0ICovXG5cdHZhciBub3JtYWxpemVLZXkgPSB7XG5cdCAgJ0VzYyc6ICdFc2NhcGUnLFxuXHQgICdTcGFjZWJhcic6ICcgJyxcblx0ICAnTGVmdCc6ICdBcnJvd0xlZnQnLFxuXHQgICdVcCc6ICdBcnJvd1VwJyxcblx0ICAnUmlnaHQnOiAnQXJyb3dSaWdodCcsXG5cdCAgJ0Rvd24nOiAnQXJyb3dEb3duJyxcblx0ICAnRGVsJzogJ0RlbGV0ZScsXG5cdCAgJ1dpbic6ICdPUycsXG5cdCAgJ01lbnUnOiAnQ29udGV4dE1lbnUnLFxuXHQgICdBcHBzJzogJ0NvbnRleHRNZW51Jyxcblx0ICAnU2Nyb2xsJzogJ1Njcm9sbExvY2snLFxuXHQgICdNb3pQcmludGFibGVLZXknOiAnVW5pZGVudGlmaWVkJ1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIFRyYW5zbGF0aW9uIGZyb20gbGVnYWN5IGBrZXlDb2RlYCB0byBIVE1MNSBga2V5YFxuXHQgKiBPbmx5IHNwZWNpYWwga2V5cyBzdXBwb3J0ZWQsIGFsbCBvdGhlcnMgZGVwZW5kIG9uIGtleWJvYXJkIGxheW91dCBvciBicm93c2VyXG5cdCAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQjS2V5X25hbWVzXG5cdCAqL1xuXHR2YXIgdHJhbnNsYXRlVG9LZXkgPSB7XG5cdCAgODogJ0JhY2tzcGFjZScsXG5cdCAgOTogJ1RhYicsXG5cdCAgMTI6ICdDbGVhcicsXG5cdCAgMTM6ICdFbnRlcicsXG5cdCAgMTY6ICdTaGlmdCcsXG5cdCAgMTc6ICdDb250cm9sJyxcblx0ICAxODogJ0FsdCcsXG5cdCAgMTk6ICdQYXVzZScsXG5cdCAgMjA6ICdDYXBzTG9jaycsXG5cdCAgMjc6ICdFc2NhcGUnLFxuXHQgIDMyOiAnICcsXG5cdCAgMzM6ICdQYWdlVXAnLFxuXHQgIDM0OiAnUGFnZURvd24nLFxuXHQgIDM1OiAnRW5kJyxcblx0ICAzNjogJ0hvbWUnLFxuXHQgIDM3OiAnQXJyb3dMZWZ0Jyxcblx0ICAzODogJ0Fycm93VXAnLFxuXHQgIDM5OiAnQXJyb3dSaWdodCcsXG5cdCAgNDA6ICdBcnJvd0Rvd24nLFxuXHQgIDQ1OiAnSW5zZXJ0Jyxcblx0ICA0NjogJ0RlbGV0ZScsXG5cdCAgMTEyOiAnRjEnLCAxMTM6ICdGMicsIDExNDogJ0YzJywgMTE1OiAnRjQnLCAxMTY6ICdGNScsIDExNzogJ0Y2Jyxcblx0ICAxMTg6ICdGNycsIDExOTogJ0Y4JywgMTIwOiAnRjknLCAxMjE6ICdGMTAnLCAxMjI6ICdGMTEnLCAxMjM6ICdGMTInLFxuXHQgIDE0NDogJ051bUxvY2snLFxuXHQgIDE0NTogJ1Njcm9sbExvY2snLFxuXHQgIDIyNDogJ01ldGEnXG5cdH07XG5cdFxuXHQvKipcblx0ICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IE5vcm1hbGl6ZWQgYGtleWAgcHJvcGVydHkuXG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRFdmVudEtleShuYXRpdmVFdmVudCkge1xuXHQgIGlmIChuYXRpdmVFdmVudC5rZXkpIHtcblx0ICAgIC8vIE5vcm1hbGl6ZSBpbmNvbnNpc3RlbnQgdmFsdWVzIHJlcG9ydGVkIGJ5IGJyb3dzZXJzIGR1ZSB0b1xuXHQgICAgLy8gaW1wbGVtZW50YXRpb25zIG9mIGEgd29ya2luZyBkcmFmdCBzcGVjaWZpY2F0aW9uLlxuXHRcblx0ICAgIC8vIEZpcmVGb3ggaW1wbGVtZW50cyBga2V5YCBidXQgcmV0dXJucyBgTW96UHJpbnRhYmxlS2V5YCBmb3IgYWxsXG5cdCAgICAvLyBwcmludGFibGUgY2hhcmFjdGVycyAobm9ybWFsaXplZCB0byBgVW5pZGVudGlmaWVkYCksIGlnbm9yZSBpdC5cblx0ICAgIHZhciBrZXkgPSBub3JtYWxpemVLZXlbbmF0aXZlRXZlbnQua2V5XSB8fCBuYXRpdmVFdmVudC5rZXk7XG5cdCAgICBpZiAoa2V5ICE9PSAnVW5pZGVudGlmaWVkJykge1xuXHQgICAgICByZXR1cm4ga2V5O1xuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgLy8gQnJvd3NlciBkb2VzIG5vdCBpbXBsZW1lbnQgYGtleWAsIHBvbHlmaWxsIGFzIG11Y2ggb2YgaXQgYXMgd2UgY2FuLlxuXHQgIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG5cdCAgICB2YXIgY2hhckNvZGUgPSBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KTtcblx0XG5cdCAgICAvLyBUaGUgZW50ZXIta2V5IGlzIHRlY2huaWNhbGx5IGJvdGggcHJpbnRhYmxlIGFuZCBub24tcHJpbnRhYmxlIGFuZCBjYW5cblx0ICAgIC8vIHRodXMgYmUgY2FwdHVyZWQgYnkgYGtleXByZXNzYCwgbm8gb3RoZXIgbm9uLXByaW50YWJsZSBrZXkgc2hvdWxkLlxuXHQgICAgcmV0dXJuIGNoYXJDb2RlID09PSAxMyA/ICdFbnRlcicgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcblx0ICB9XG5cdCAgaWYgKG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBuYXRpdmVFdmVudC50eXBlID09PSAna2V5dXAnKSB7XG5cdCAgICAvLyBXaGlsZSB1c2VyIGtleWJvYXJkIGxheW91dCBkZXRlcm1pbmVzIHRoZSBhY3R1YWwgbWVhbmluZyBvZiBlYWNoXG5cdCAgICAvLyBga2V5Q29kZWAgdmFsdWUsIGFsbW9zdCBhbGwgZnVuY3Rpb24ga2V5cyBoYXZlIGEgdW5pdmVyc2FsIHZhbHVlLlxuXHQgICAgcmV0dXJuIHRyYW5zbGF0ZVRvS2V5W25hdGl2ZUV2ZW50LmtleUNvZGVdIHx8ICdVbmlkZW50aWZpZWQnO1xuXHQgIH1cblx0ICByZXR1cm4gJyc7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gZ2V0RXZlbnRLZXk7XG5cblxuLyoqKi8gfSxcbi8qIDE3MiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0XG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKipcblx0ICogR2l2ZW4gYW55IG5vZGUgcmV0dXJuIHRoZSBmaXJzdCBsZWFmIG5vZGUgd2l0aG91dCBjaGlsZHJlbi5cblx0ICpcblx0ICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG5cdCAqIEByZXR1cm4ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9XG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRMZWFmTm9kZShub2RlKSB7XG5cdCAgd2hpbGUgKG5vZGUgJiYgbm9kZS5maXJzdENoaWxkKSB7XG5cdCAgICBub2RlID0gbm9kZS5maXJzdENoaWxkO1xuXHQgIH1cblx0ICByZXR1cm4gbm9kZTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIEdldCB0aGUgbmV4dCBzaWJsaW5nIHdpdGhpbiBhIGNvbnRhaW5lci4gVGhpcyB3aWxsIHdhbGsgdXAgdGhlXG5cdCAqIERPTSBpZiBhIG5vZGUncyBzaWJsaW5ncyBoYXZlIGJlZW4gZXhoYXVzdGVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcblx0ICogQHJldHVybiB7P0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9XG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRTaWJsaW5nTm9kZShub2RlKSB7XG5cdCAgd2hpbGUgKG5vZGUpIHtcblx0ICAgIGlmIChub2RlLm5leHRTaWJsaW5nKSB7XG5cdCAgICAgIHJldHVybiBub2RlLm5leHRTaWJsaW5nO1xuXHQgICAgfVxuXHQgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcblx0ICB9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBHZXQgb2JqZWN0IGRlc2NyaWJpbmcgdGhlIG5vZGVzIHdoaWNoIGNvbnRhaW4gY2hhcmFjdGVycyBhdCBvZmZzZXQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gcm9vdFxuXHQgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG5cdCAqIEByZXR1cm4gez9vYmplY3R9XG5cdCAqL1xuXHRmdW5jdGlvbiBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KHJvb3QsIG9mZnNldCkge1xuXHQgIHZhciBub2RlID0gZ2V0TGVhZk5vZGUocm9vdCk7XG5cdCAgdmFyIG5vZGVTdGFydCA9IDA7XG5cdCAgdmFyIG5vZGVFbmQgPSAwO1xuXHRcblx0ICB3aGlsZSAobm9kZSkge1xuXHQgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMykge1xuXHQgICAgICBub2RlRW5kID0gbm9kZVN0YXJ0ICsgbm9kZS50ZXh0Q29udGVudC5sZW5ndGg7XG5cdFxuXHQgICAgICBpZiAobm9kZVN0YXJ0IDw9IG9mZnNldCAmJiBub2RlRW5kID49IG9mZnNldCkge1xuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICBub2RlOiBub2RlLFxuXHQgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgLSBub2RlU3RhcnRcblx0ICAgICAgICB9O1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBub2RlU3RhcnQgPSBub2RlRW5kO1xuXHQgICAgfVxuXHRcblx0ICAgIG5vZGUgPSBnZXRMZWFmTm9kZShnZXRTaWJsaW5nTm9kZShub2RlKSk7XG5cdCAgfVxuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQ7XG5cblxuLyoqKi8gfSxcbi8qIDE3MyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBoeXBoZW5hdGVcblx0ICogQHR5cGVjaGVja3Ncblx0ICovXG5cdFxuXHR2YXIgX3VwcGVyY2FzZVBhdHRlcm4gPSAvKFtBLVpdKS9nO1xuXHRcblx0LyoqXG5cdCAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIHN0cmluZywgZm9yIGV4YW1wbGU6XG5cdCAqXG5cdCAqICAgPiBoeXBoZW5hdGUoJ2JhY2tncm91bmRDb2xvcicpXG5cdCAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuXHQgKlxuXHQgKiBGb3IgQ1NTIHN0eWxlIG5hbWVzLCB1c2UgYGh5cGhlbmF0ZVN0eWxlTmFtZWAgaW5zdGVhZCB3aGljaCB3b3JrcyBwcm9wZXJseVxuXHQgKiB3aXRoIGFsbCB2ZW5kb3IgcHJlZml4ZXMsIGluY2x1ZGluZyBgbXNgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdGZ1bmN0aW9uIGh5cGhlbmF0ZShzdHJpbmcpIHtcblx0ICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoX3VwcGVyY2FzZVBhdHRlcm4sICctJDEnKS50b0xvd2VyQ2FzZSgpO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGh5cGhlbmF0ZTtcblxuXG4vKioqLyB9LFxuLyogMTc0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIGh5cGhlbmF0ZVN0eWxlTmFtZVxuXHQgKiBAdHlwZWNoZWNrc1xuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIGh5cGhlbmF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTczKTtcblx0XG5cdHZhciBtc1BhdHRlcm4gPSAvXm1zLS87XG5cdFxuXHQvKipcblx0ICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGZvciBleGFtcGxlOlxuXHQgKlxuXHQgKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdiYWNrZ3JvdW5kQ29sb3InKVxuXHQgKiAgIDwgXCJiYWNrZ3JvdW5kLWNvbG9yXCJcblx0ICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnTW96VHJhbnNpdGlvbicpXG5cdCAqICAgPCBcIi1tb3otdHJhbnNpdGlvblwiXG5cdCAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ21zVHJhbnNpdGlvbicpXG5cdCAqICAgPCBcIi1tcy10cmFuc2l0aW9uXCJcblx0ICpcblx0ICogQXMgTW9kZXJuaXpyIHN1Z2dlc3RzIChodHRwOi8vbW9kZXJuaXpyLmNvbS9kb2NzLyNwcmVmaXhlZCksIGFuIGBtc2AgcHJlZml4XG5cdCAqIGlzIGNvbnZlcnRlZCB0byBgLW1zLWAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0ZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuXHQgIHJldHVybiBoeXBoZW5hdGUoc3RyaW5nKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBoeXBoZW5hdGVTdHlsZU5hbWU7XG5cblxuLyoqKi8gfSxcbi8qIDE3NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBpc05vZGVcblx0ICogQHR5cGVjaGVja3Ncblx0ICovXG5cdFxuXHQvKipcblx0ICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSBub2RlLlxuXHQgKi9cblx0ZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuXHQgIHJldHVybiAhIShvYmplY3QgJiYgKFxuXHQgICAgdHlwZW9mIE5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBOb2RlIDpcblx0ICAgICAgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcblx0ICAgICAgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiZcblx0ICAgICAgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZydcblx0ICApKTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7XG5cblxuLyoqKi8gfSxcbi8qIDE3NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBpc1RleHROb2RlXG5cdCAqIEB0eXBlY2hlY2tzXG5cdCAqL1xuXHRcblx0dmFyIGlzTm9kZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTc1KTtcblx0XG5cdC8qKlxuXHQgKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIHRleHQgbm9kZS5cblx0ICovXG5cdGZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG5cdCAgcmV0dXJuIGlzTm9kZShvYmplY3QpICYmIG9iamVjdC5ub2RlVHlwZSA9PSAzO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGlzVGV4dE5vZGU7XG5cblxuLyoqKi8gfSxcbi8qIDE3NyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBqb2luQ2xhc3Nlc1xuXHQgKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0LyoqXG5cdCAqIENvbWJpbmVzIG11bHRpcGxlIGNsYXNzTmFtZSBzdHJpbmdzIGludG8gb25lLlxuXHQgKiBodHRwOi8vanNwZXJmLmNvbS9qb2luY2xhc3Nlcy1hcmdzLXZzLWFycmF5XG5cdCAqXG5cdCAqIEBwYXJhbSB7Li4uP3N0cmluZ30gY2xhc3Nlc1xuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuXHRmdW5jdGlvbiBqb2luQ2xhc3NlcyhjbGFzc05hbWUvKiwgLi4uICovKSB7XG5cdCAgaWYgKCFjbGFzc05hbWUpIHtcblx0ICAgIGNsYXNzTmFtZSA9ICcnO1xuXHQgIH1cblx0ICB2YXIgbmV4dENsYXNzO1xuXHQgIHZhciBhcmdMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXHQgIGlmIChhcmdMZW5ndGggPiAxKSB7XG5cdCAgICBmb3IgKHZhciBpaSA9IDE7IGlpIDwgYXJnTGVuZ3RoOyBpaSsrKSB7XG5cdCAgICAgIG5leHRDbGFzcyA9IGFyZ3VtZW50c1tpaV07XG5cdCAgICAgIGlmIChuZXh0Q2xhc3MpIHtcblx0ICAgICAgICBjbGFzc05hbWUgPSAoY2xhc3NOYW1lID8gY2xhc3NOYW1lICsgJyAnIDogJycpICsgbmV4dENsYXNzO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBjbGFzc05hbWU7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gam9pbkNsYXNzZXM7XG5cblxuLyoqKi8gfSxcbi8qIDE3OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICpcblx0ICogQHByb3ZpZGVzTW9kdWxlIG9ubHlDaGlsZFxuXHQgKi9cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgUmVhY3RFbGVtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGZpcnN0IGNoaWxkIGluIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiBhbmQgdmVyaWZpZXMgdGhhdCB0aGVyZVxuXHQgKiBpcyBvbmx5IG9uZSBjaGlsZCBpbiB0aGUgY29sbGVjdGlvbi4gVGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gb2YgdGhpc1xuXHQgKiBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgYSBzaW5nbGUgY2hpbGQgZ2V0cyBwYXNzZWQgd2l0aG91dCBhIHdyYXBwZXIsIGJ1dCB0aGVcblx0ICogcHVycG9zZSBvZiB0aGlzIGhlbHBlciBmdW5jdGlvbiBpcyB0byBhYnN0cmFjdCBhd2F5IHRoZSBwYXJ0aWN1bGFyIHN0cnVjdHVyZVxuXHQgKiBvZiBjaGlsZHJlbi5cblx0ICpcblx0ICogQHBhcmFtIHs/b2JqZWN0fSBjaGlsZHJlbiBDaGlsZCBjb2xsZWN0aW9uIHN0cnVjdHVyZS5cblx0ICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IFRoZSBmaXJzdCBhbmQgb25seSBgUmVhY3RDb21wb25lbnRgIGNvbnRhaW5lZCBpbiB0aGVcblx0ICogc3RydWN0dXJlLlxuXHQgKi9cblx0ZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbiksXG5cdCAgICAnb25seUNoaWxkIG11c3QgYmUgcGFzc2VkIGEgY2hpbGRyZW4gd2l0aCBleGFjdGx5IG9uZSBjaGlsZC4nXG5cdCAgKSA6IGludmFyaWFudChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKSk7XG5cdCAgcmV0dXJuIGNoaWxkcmVuO1xuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IG9ubHlDaGlsZDtcblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDE3OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBwZXJmb3JtYW5jZVxuXHQgKiBAdHlwZWNoZWNrc1xuXHQgKi9cblx0XG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdHZhciBwZXJmb3JtYW5jZTtcblx0XG5cdGlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcblx0ICBwZXJmb3JtYW5jZSA9XG5cdCAgICB3aW5kb3cucGVyZm9ybWFuY2UgfHxcblx0ICAgIHdpbmRvdy5tc1BlcmZvcm1hbmNlIHx8XG5cdCAgICB3aW5kb3cud2Via2l0UGVyZm9ybWFuY2U7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gcGVyZm9ybWFuY2UgfHwge307XG5cblxuLyoqKi8gfSxcbi8qIDE4MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSBwZXJmb3JtYW5jZU5vd1xuXHQgKiBAdHlwZWNoZWNrc1xuXHQgKi9cblx0XG5cdHZhciBwZXJmb3JtYW5jZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTc5KTtcblx0XG5cdC8qKlxuXHQgKiBEZXRlY3QgaWYgd2UgY2FuIHVzZSBgd2luZG93LnBlcmZvcm1hbmNlLm5vdygpYCBhbmQgZ3JhY2VmdWxseSBmYWxsYmFjayB0b1xuXHQgKiBgRGF0ZS5ub3coKWAgaWYgaXQgZG9lc24ndCBleGlzdC4gV2UgbmVlZCB0byBzdXBwb3J0IEZpcmVmb3ggPCAxNSBmb3Igbm93XG5cdCAqIGJlY2F1c2Ugb2YgRmFjZWJvb2sncyB0ZXN0aW5nIGluZnJhc3RydWN0dXJlLlxuXHQgKi9cblx0aWYgKCFwZXJmb3JtYW5jZSB8fCAhcGVyZm9ybWFuY2Uubm93KSB7XG5cdCAgcGVyZm9ybWFuY2UgPSBEYXRlO1xuXHR9XG5cdFxuXHR2YXIgcGVyZm9ybWFuY2VOb3cgPSBwZXJmb3JtYW5jZS5ub3cuYmluZChwZXJmb3JtYW5jZSk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IHBlcmZvcm1hbmNlTm93O1xuXG5cbi8qKiovIH0sXG4vKiAxODEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuXHQgKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQgKlxuXHQgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcblx0ICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG5cdCAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuXHQgKlxuXHQgKiBAcHJvdmlkZXNNb2R1bGUgc2hhbGxvd0VxdWFsXG5cdCAqL1xuXHRcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHQvKipcblx0ICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZ1xuXHQgKiBmYWxzZSB3aGVuIGFueSBrZXkgaGFzIHZhbHVlcyB3aGljaCBhcmUgbm90IHN0cmljdGx5IGVxdWFsIGJldHdlZW5cblx0ICogb2JqQSBhbmQgb2JqQi4gUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG5cdCAqXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdCAqL1xuXHRmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuXHQgIGlmIChvYmpBID09PSBvYmpCKSB7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdCAgdmFyIGtleTtcblx0ICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuXHQgIGZvciAoa2V5IGluIG9iakEpIHtcblx0ICAgIGlmIChvYmpBLmhhc093blByb3BlcnR5KGtleSkgJiZcblx0ICAgICAgICAoIW9iakIuaGFzT3duUHJvcGVydHkoa2V5KSB8fCBvYmpBW2tleV0gIT09IG9iakJba2V5XSkpIHtcblx0ICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXHQgIH1cblx0ICAvLyBUZXN0IGZvciBCJ3Mga2V5cyBtaXNzaW5nIGZyb20gQS5cblx0ICBmb3IgKGtleSBpbiBvYmpCKSB7XG5cdCAgICBpZiAob2JqQi5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICFvYmpBLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0ICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gdHJ1ZTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7XG5cblxuLyoqKi8gfSxcbi8qIDE4MiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHsvKipcblx0ICogQ29weXJpZ2h0IDIwMTQsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqXG5cdCAqIEBwcm92aWRlc01vZHVsZSB0b0FycmF5XG5cdCAqIEB0eXBlY2hlY2tzXG5cdCAqL1xuXHRcblx0dmFyIGludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHQvKipcblx0ICogQ29udmVydCBhcnJheS1saWtlIG9iamVjdHMgdG8gYXJyYXlzLlxuXHQgKlxuXHQgKiBUaGlzIEFQSSBhc3N1bWVzIHRoZSBjYWxsZXIga25vd3MgdGhlIGNvbnRlbnRzIG9mIHRoZSBkYXRhIHR5cGUuIEZvciBsZXNzXG5cdCAqIHdlbGwgZGVmaW5lZCBpbnB1dHMgdXNlIGNyZWF0ZUFycmF5RnJvbS5cblx0ICpcblx0ICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb258ZmlsZWxpc3R9IG9ialxuXHQgKiBAcmV0dXJuIHthcnJheX1cblx0ICovXG5cdGZ1bmN0aW9uIHRvQXJyYXkob2JqKSB7XG5cdCAgdmFyIGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFxuXHQgIC8vIFNvbWUgYnJvd3NlIGJ1aWx0aW4gb2JqZWN0cyBjYW4gcmVwb3J0IHR5cGVvZiAnZnVuY3Rpb24nIChlLmcuIE5vZGVMaXN0IGluXG5cdCAgLy8gb2xkIHZlcnNpb25zIG9mIFNhZmFyaSkuXG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgICFBcnJheS5pc0FycmF5KG9iaikgJiZcblx0ICAgICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSxcblx0ICAgICd0b0FycmF5OiBBcnJheS1saWtlIG9iamVjdCBleHBlY3RlZCdcblx0ICApIDogaW52YXJpYW50KCFBcnJheS5pc0FycmF5KG9iaikgJiZcblx0ICAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykpKTtcblx0XG5cdCAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcblx0ICAgIHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInLFxuXHQgICAgJ3RvQXJyYXk6IE9iamVjdCBuZWVkcyBhIGxlbmd0aCBwcm9wZXJ0eSdcblx0ICApIDogaW52YXJpYW50KHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInKSk7XG5cdFxuXHQgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG5cdCAgICBsZW5ndGggPT09IDAgfHxcblx0ICAgIChsZW5ndGggLSAxKSBpbiBvYmosXG5cdCAgICAndG9BcnJheTogT2JqZWN0IHNob3VsZCBoYXZlIGtleXMgZm9yIGluZGljZXMnXG5cdCAgKSA6IGludmFyaWFudChsZW5ndGggPT09IDAgfHxcblx0ICAobGVuZ3RoIC0gMSkgaW4gb2JqKSk7XG5cdFxuXHQgIC8vIE9sZCBJRSBkb2Vzbid0IGdpdmUgY29sbGVjdGlvbnMgYWNjZXNzIHRvIGhhc093blByb3BlcnR5LiBBc3N1bWUgaW5wdXRzXG5cdCAgLy8gd2l0aG91dCBtZXRob2Qgd2lsbCB0aHJvdyBkdXJpbmcgdGhlIHNsaWNlIGNhbGwgYW5kIHNraXAgc3RyYWlnaHQgdG8gdGhlXG5cdCAgLy8gZmFsbGJhY2suXG5cdCAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eSkge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG9iaik7XG5cdCAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgIC8vIElFIDwgOSBkb2VzIG5vdCBzdXBwb3J0IEFycmF5I3NsaWNlIG9uIGNvbGxlY3Rpb25zIG9iamVjdHNcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIC8vIEZhbGwgYmFjayB0byBjb3B5aW5nIGtleSBieSBrZXkuIFRoaXMgYXNzdW1lcyBhbGwga2V5cyBoYXZlIGEgdmFsdWUsXG5cdCAgLy8gc28gd2lsbCBub3QgcHJlc2VydmUgc3BhcnNlbHkgcG9wdWxhdGVkIGlucHV0cy5cblx0ICB2YXIgcmV0ID0gQXJyYXkobGVuZ3RoKTtcblx0ICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbGVuZ3RoOyBpaSsrKSB7XG5cdCAgICByZXRbaWldID0gb2JqW2lpXTtcblx0ICB9XG5cdCAgcmV0dXJuIHJldDtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSB0b0FycmF5O1xuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogMTgzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKlxyXG5cdFx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRcdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuXHQqL1xyXG5cdHZhciBzdHlsZXNJbkRvbSA9IHt9LFxyXG5cdFx0bWVtb2l6ZSA9IGZ1bmN0aW9uKGZuKSB7XHJcblx0XHRcdHZhciBtZW1vO1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblx0XHRcdFx0cmV0dXJuIG1lbW87XHJcblx0XHRcdH07XHJcblx0XHR9LFxyXG5cdFx0aXNJRTkgPSBtZW1vaXplKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gL21zaWUgOVxcYi8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKTtcclxuXHRcdH0pLFxyXG5cdFx0Z2V0SGVhZEVsZW1lbnQgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xyXG5cdFx0fSksXHJcblx0XHRzaW5nbGV0b25FbGVtZW50ID0gbnVsbCxcclxuXHRcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xyXG5cdFxyXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xyXG5cdFx0aWYoZmFsc2UpIHtcclxuXHRcdFx0aWYodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XHJcblx0XHR9XHJcblx0XHJcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHRcdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU5LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cclxuXHRcdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcclxuXHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gPT09IFwidW5kZWZpbmVkXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNJRTkoKTtcclxuXHRcclxuXHRcdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCk7XHJcblx0XHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xyXG5cdFxyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XHJcblx0XHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xyXG5cdFx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcclxuXHRcdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYobmV3TGlzdCkge1xyXG5cdFx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCk7XHJcblx0XHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xyXG5cdFx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcclxuXHRcdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKylcclxuXHRcdFx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oKTtcclxuXHRcdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpIHtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XHJcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xyXG5cdFx0XHRpZihkb21TdHlsZSkge1xyXG5cdFx0XHRcdGRvbVN0eWxlLnJlZnMrKztcclxuXHRcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHZhciBwYXJ0cyA9IFtdO1xyXG5cdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0ZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QpIHtcclxuXHRcdHZhciBzdHlsZXMgPSBbXTtcclxuXHRcdHZhciBuZXdTdHlsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbGlzdFtpXTtcclxuXHRcdFx0dmFyIGlkID0gaXRlbVswXTtcclxuXHRcdFx0dmFyIGNzcyA9IGl0ZW1bMV07XHJcblx0XHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XHJcblx0XHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xyXG5cdFx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XHJcblx0XHRcdGlmKCFuZXdTdHlsZXNbaWRdKVxyXG5cdFx0XHRcdHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gc3R5bGVzO1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQoKSB7XHJcblx0XHR2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG5cdFx0dmFyIGhlYWQgPSBnZXRIZWFkRWxlbWVudCgpO1xyXG5cdFx0c3R5bGVFbGVtZW50LnR5cGUgPSBcInRleHQvY3NzXCI7XHJcblx0XHRoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0XHRyZXR1cm4gc3R5bGVFbGVtZW50O1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcclxuXHRcdHZhciBzdHlsZUVsZW1lbnQsIHVwZGF0ZSwgcmVtb3ZlO1xyXG5cdFxyXG5cdFx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XHJcblx0XHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQgPSBzaW5nbGV0b25FbGVtZW50IHx8IChzaW5nbGV0b25FbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KCkpO1xyXG5cdFx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCBmYWxzZSk7XHJcblx0XHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQsIHN0eWxlSW5kZXgsIHRydWUpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KCk7XHJcblx0XHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpO1xyXG5cdFx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0c3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHRcclxuXHRcdHVwZGF0ZShvYmopO1xyXG5cdFxyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xyXG5cdFx0XHRpZihuZXdPYmopIHtcclxuXHRcdFx0XHRpZihuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApXHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmVtb3ZlKCk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fVxyXG5cdFxyXG5cdGZ1bmN0aW9uIHJlcGxhY2VUZXh0KHNvdXJjZSwgaWQsIHJlcGxhY2VtZW50KSB7XHJcblx0XHR2YXIgYm91bmRhcmllcyA9IFtcIi8qKiA+PlwiICsgaWQgKyBcIiAqKi9cIiwgXCIvKiogXCIgKyBpZCArIFwiPDwgKiovXCJdO1xyXG5cdFx0dmFyIHN0YXJ0ID0gc291cmNlLmxhc3RJbmRleE9mKGJvdW5kYXJpZXNbMF0pO1xyXG5cdFx0dmFyIHdyYXBwZWRSZXBsYWNlbWVudCA9IHJlcGxhY2VtZW50XHJcblx0XHRcdD8gKGJvdW5kYXJpZXNbMF0gKyByZXBsYWNlbWVudCArIGJvdW5kYXJpZXNbMV0pXHJcblx0XHRcdDogXCJcIjtcclxuXHRcdGlmIChzb3VyY2UubGFzdEluZGV4T2YoYm91bmRhcmllc1swXSkgPj0gMCkge1xyXG5cdFx0XHR2YXIgZW5kID0gc291cmNlLmxhc3RJbmRleE9mKGJvdW5kYXJpZXNbMV0pICsgYm91bmRhcmllc1sxXS5sZW5ndGg7XHJcblx0XHRcdHJldHVybiBzb3VyY2Uuc2xpY2UoMCwgc3RhcnQpICsgd3JhcHBlZFJlcGxhY2VtZW50ICsgc291cmNlLnNsaWNlKGVuZCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gc291cmNlICsgd3JhcHBlZFJlcGxhY2VtZW50O1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XHJcblx0XHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XHJcblx0XHJcblx0XHRpZihzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCwgaW5kZXgsIGNzcyk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XHJcblx0XHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGVFbGVtZW50LmNoaWxkTm9kZXM7XHJcblx0XHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcclxuXHRcdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XHJcblx0XHRcdFx0c3R5bGVFbGVtZW50Lmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGNzc05vZGUpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGVFbGVtZW50LCBvYmopIHtcclxuXHRcdHZhciBjc3MgPSBvYmouY3NzO1xyXG5cdFx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xyXG5cdFx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XHJcblx0XHJcblx0XHRpZihzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpICsgXCIgKi9cIjtcclxuXHRcdFx0XHRjc3MgPSBcIkBpbXBvcnQgdXJsKFxcXCJkYXRhOnRleHQvY3NzO2Jhc2U2NCxcIiArIGJ0b2EoY3NzKSArIFwiXFxcIilcIjtcclxuXHRcdFx0fSBjYXRjaChlKSB7fVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0aWYobWVkaWEpIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0aWYoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHdoaWxlKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XHJcblx0XHRcdFx0c3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XHJcblx0XHR9XHJcblx0fVxyXG5cblxuLyoqKi8gfSxcbi8qIDE4NCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblx0XG5cdC8vIGxvYWQgdGhlIHN0eWxlc1xuXHR2YXIgY29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHRpZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblx0Ly8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxuXHR2YXIgdXBkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODMpKGNvbnRlbnQsIHt9KTtcblx0Ly8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuXHRpZih0cnVlKSB7XG5cdFx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0XHRtb2R1bGUuaG90LmFjY2VwdCg0MCwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNDApO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdFx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRcdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xuXHR9XG5cbi8qKiovIH0sXG4vKiAxODUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihfX3Jlc291cmNlUXVlcnkpIHt2YXIgaW8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4Nik7XHJcblx0dmFyIHNjcmlwdEVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XHJcblx0aW8gPSBpby5jb25uZWN0KHRydWUgP1xyXG5cdFx0X19yZXNvdXJjZVF1ZXJ5LnN1YnN0cigxKSA6XHJcblx0XHRzY3JpcHRFbGVtZW50c1tzY3JpcHRFbGVtZW50cy5sZW5ndGgtMV0uZ2V0QXR0cmlidXRlKFwic3JjXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCJcIilcclxuXHQpO1xyXG5cdFxyXG5cdHZhciBob3QgPSBmYWxzZTtcclxuXHR2YXIgaW5pdGlhbCA9IHRydWU7XHJcblx0dmFyIGN1cnJlbnRIYXNoID0gXCJcIjtcclxuXHRcclxuXHRpby5vbihcImhvdFwiLCBmdW5jdGlvbigpIHtcclxuXHRcdGhvdCA9IHRydWU7XHJcblx0XHRjb25zb2xlLmxvZyhcIltXRFNdIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnQgZW5hYmxlZC5cIik7XHJcblx0fSk7XHJcblx0XHJcblx0aW8ub24oXCJpbnZhbGlkXCIsIGZ1bmN0aW9uKCkge1xyXG5cdFx0Y29uc29sZS5sb2coXCJbV0RTXSBBcHAgdXBkYXRlZC4gUmVjb21waWxpbmcuLi5cIik7XHJcblx0fSk7XHJcblx0XHJcblx0aW8ub24oXCJoYXNoXCIsIGZ1bmN0aW9uKGhhc2gpIHtcclxuXHRcdGN1cnJlbnRIYXNoID0gaGFzaDtcclxuXHR9KTtcclxuXHRcclxuXHRpby5vbihcIm9rXCIsIGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYoaW5pdGlhbCkgcmV0dXJuIGluaXRpYWwgPSBmYWxzZTtcclxuXHRcdHJlbG9hZEFwcCgpO1xyXG5cdH0pO1xyXG5cdFxyXG5cdGlvLm9uKFwid2FybmluZ3NcIiwgZnVuY3Rpb24od2FybmluZ3MpIHtcclxuXHRcdGNvbnNvbGUubG9nKFwiW1dEU10gV2FybmluZ3Mgd2hpbGUgY29tcGlsaW5nLlwiKTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB3YXJuaW5ncy5sZW5ndGg7IGkrKylcclxuXHRcdFx0Y29uc29sZS53YXJuKHdhcm5pbmdzW2ldKTtcclxuXHRcdGlmKGluaXRpYWwpIHJldHVybiBpbml0aWFsID0gZmFsc2U7XHJcblx0XHRyZWxvYWRBcHAoKTtcclxuXHR9KTtcclxuXHRcclxuXHRpby5vbihcImVycm9yc1wiLCBmdW5jdGlvbihlcnJvcnMpIHtcclxuXHRcdGNvbnNvbGUubG9nKFwiW1dEU10gRXJyb3JzIHdoaWxlIGNvbXBpbGluZy5cIik7XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZXJyb3JzLmxlbmd0aDsgaSsrKVxyXG5cdFx0XHRjb25zb2xlLmVycm9yKGVycm9yc1tpXSk7XHJcblx0XHRpZihpbml0aWFsKSByZXR1cm4gaW5pdGlhbCA9IGZhbHNlO1xyXG5cdFx0cmVsb2FkQXBwKCk7XHJcblx0fSk7XHJcblx0XHJcblx0aW8ub24oXCJwcm94eS1lcnJvclwiLCBmdW5jdGlvbihlcnJvcnMpIHtcclxuXHRcdGNvbnNvbGUubG9nKFwiW1dEU10gUHJveHkgZXJyb3IuXCIpO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IGVycm9ycy5sZW5ndGg7IGkrKylcclxuXHRcdFx0Y29uc29sZS5lcnJvcihlcnJvcnNbaV0pO1xyXG5cdFx0aWYoaW5pdGlhbCkgcmV0dXJuIGluaXRpYWwgPSBmYWxzZTtcclxuXHRcdHJlbG9hZEFwcCgpO1xyXG5cdH0pO1xyXG5cdFxyXG5cdGlvLm9uKFwiZGlzY29ubmVjdFwiLCBmdW5jdGlvbigpIHtcclxuXHRcdGNvbnNvbGUuZXJyb3IoXCJbV0RTXSBEaXNjb25uZWN0ZWQhXCIpO1xyXG5cdH0pO1xyXG5cdFxyXG5cdGZ1bmN0aW9uIHJlbG9hZEFwcCgpIHtcclxuXHRcdGlmKGhvdCkge1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcIltXRFNdIEFwcCBob3QgdXBkYXRlLi4uXCIpO1xyXG5cdFx0XHR3aW5kb3cucG9zdE1lc3NhZ2UoXCJ3ZWJwYWNrSG90VXBkYXRlXCIgKyBjdXJyZW50SGFzaCwgXCIqXCIpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJbV0RTXSBBcHAgdXBkYXRlZC4gUmVsb2FkaW5nLi4uXCIpO1xyXG5cdFx0XHR3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcblx0XHR9XHJcblx0fVxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgXCI/aHR0cDovLzAuMC4wLjA6MzAwMFwiKSlcblxuLyoqKi8gfSxcbi8qIDE4NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4Nyk7XHJcblxuXG4vKioqLyB9LFxuLyogMTg3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24obW9kdWxlKSB7LyohIFNvY2tldC5JTy5qcyBidWlsZDowLjkuMTAsIGRldmVsb3BtZW50LiBDb3B5cmlnaHQoYykgMjAxMSBMZWFybkJvb3N0IDxkZXZAbGVhcm5ib29zdC5jb20+IE1JVCBMaWNlbnNlZCAqL1xyXG5cdFxyXG5cdHZhciBpbyA9IChmYWxzZSA/IHt9IDogbW9kdWxlLmV4cG9ydHMpO1xyXG5cdChmdW5jdGlvbigpIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBzb2NrZXQuaW9cclxuXHQgKiBDb3B5cmlnaHQoYykgMjAxMSBMZWFybkJvb3N0IDxkZXZAbGVhcm5ib29zdC5jb20+XHJcblx0ICogTUlUIExpY2Vuc2VkXHJcblx0ICovXHJcblx0XHJcblx0KGZ1bmN0aW9uIChleHBvcnRzLCBnbG9iYWwpIHtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogSU8gbmFtZXNwYWNlLlxyXG5cdCAgICpcclxuXHQgICAqIEBuYW1lc3BhY2VcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgdmFyIGlvID0gZXhwb3J0cztcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogU29ja2V0LklPIHZlcnNpb25cclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICBpby52ZXJzaW9uID0gJzAuOS4xMCc7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIFByb3RvY29sIGltcGxlbWVudGVkLlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIGlvLnByb3RvY29sID0gMTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQXZhaWxhYmxlIHRyYW5zcG9ydHMsIHRoZXNlIHdpbGwgYmUgcG9wdWxhdGVkIHdpdGggdGhlIGF2YWlsYWJsZSB0cmFuc3BvcnRzXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgaW8udHJhbnNwb3J0cyA9IFtdO1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBLZWVwIHRyYWNrIG9mIGpzb25wIGNhbGxiYWNrcy5cclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgaW8uaiA9IFtdO1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBLZWVwIHRyYWNrIG9mIG91ciBpby5Tb2NrZXRzXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHQgIGlvLnNvY2tldHMgPSB7fTtcclxuXHRcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogTWFuYWdlcyBjb25uZWN0aW9ucyB0byBob3N0cy5cclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0ge1N0cmluZ30gdXJpXHJcblx0ICAgKiBAUGFyYW0ge0Jvb2xlYW59IGZvcmNlIGNyZWF0aW9uIG9mIG5ldyBzb2NrZXQgKGRlZmF1bHRzIHRvIGZhbHNlKVxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgaW8uY29ubmVjdCA9IGZ1bmN0aW9uIChob3N0LCBkZXRhaWxzKSB7XHJcblx0ICAgIHZhciB1cmkgPSBpby51dGlsLnBhcnNlVXJpKGhvc3QpXHJcblx0ICAgICAgLCB1dXJpXHJcblx0ICAgICAgLCBzb2NrZXQ7XHJcblx0XHJcblx0ICAgIGlmIChnbG9iYWwgJiYgZ2xvYmFsLmxvY2F0aW9uKSB7XHJcblx0ICAgICAgdXJpLnByb3RvY29sID0gdXJpLnByb3RvY29sIHx8IGdsb2JhbC5sb2NhdGlvbi5wcm90b2NvbC5zbGljZSgwLCAtMSk7XHJcblx0ICAgICAgdXJpLmhvc3QgPSB1cmkuaG9zdCB8fCAoZ2xvYmFsLmRvY3VtZW50XHJcblx0ICAgICAgICA/IGdsb2JhbC5kb2N1bWVudC5kb21haW4gOiBnbG9iYWwubG9jYXRpb24uaG9zdG5hbWUpO1xyXG5cdCAgICAgIHVyaS5wb3J0ID0gdXJpLnBvcnQgfHwgZ2xvYmFsLmxvY2F0aW9uLnBvcnQ7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgdXVyaSA9IGlvLnV0aWwudW5pcXVlVXJpKHVyaSk7XHJcblx0XHJcblx0ICAgIHZhciBvcHRpb25zID0ge1xyXG5cdCAgICAgICAgaG9zdDogdXJpLmhvc3RcclxuXHQgICAgICAsIHNlY3VyZTogJ2h0dHBzJyA9PSB1cmkucHJvdG9jb2xcclxuXHQgICAgICAsIHBvcnQ6IHVyaS5wb3J0IHx8ICgnaHR0cHMnID09IHVyaS5wcm90b2NvbCA/IDQ0MyA6IDgwKVxyXG5cdCAgICAgICwgcXVlcnk6IHVyaS5xdWVyeSB8fCAnJ1xyXG5cdCAgICB9O1xyXG5cdFxyXG5cdCAgICBpby51dGlsLm1lcmdlKG9wdGlvbnMsIGRldGFpbHMpO1xyXG5cdFxyXG5cdCAgICBpZiAob3B0aW9uc1snZm9yY2UgbmV3IGNvbm5lY3Rpb24nXSB8fCAhaW8uc29ja2V0c1t1dXJpXSkge1xyXG5cdCAgICAgIHNvY2tldCA9IG5ldyBpby5Tb2NrZXQob3B0aW9ucyk7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgaWYgKCFvcHRpb25zWydmb3JjZSBuZXcgY29ubmVjdGlvbiddICYmIHNvY2tldCkge1xyXG5cdCAgICAgIGlvLnNvY2tldHNbdXVyaV0gPSBzb2NrZXQ7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgc29ja2V0ID0gc29ja2V0IHx8IGlvLnNvY2tldHNbdXVyaV07XHJcblx0XHJcblx0ICAgIC8vIGlmIHBhdGggaXMgZGlmZmVyZW50IGZyb20gJycgb3IgL1xyXG5cdCAgICByZXR1cm4gc29ja2V0Lm9mKHVyaS5wYXRoLmxlbmd0aCA+IDEgPyB1cmkucGF0aCA6ICcnKTtcclxuXHQgIH07XHJcblx0XHJcblx0fSkodHJ1ZSA/IG1vZHVsZS5leHBvcnRzIDogKHRoaXMuaW8gPSB7fSksIHRoaXMpO1xyXG5cdC8qKlxyXG5cdCAqIHNvY2tldC5pb1xyXG5cdCAqIENvcHlyaWdodChjKSAyMDExIExlYXJuQm9vc3QgPGRldkBsZWFybmJvb3N0LmNvbT5cclxuXHQgKiBNSVQgTGljZW5zZWRcclxuXHQgKi9cclxuXHRcclxuXHQoZnVuY3Rpb24gKGV4cG9ydHMsIGdsb2JhbCkge1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBVdGlsaXRpZXMgbmFtZXNwYWNlLlxyXG5cdCAgICpcclxuXHQgICAqIEBuYW1lc3BhY2VcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgdmFyIHV0aWwgPSBleHBvcnRzLnV0aWwgPSB7fTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogUGFyc2VzIGFuIFVSSVxyXG5cdCAgICpcclxuXHQgICAqIEBhdXRob3IgU3RldmVuIExldml0aGFuIDxzdGV2ZW5sZXZpdGhhbi5jb20+IChNSVQgbGljZW5zZSlcclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIHZhciByZSA9IC9eKD86KD8hW146QF0rOlteOkBcXC9dKkApKFteOlxcLz8jLl0rKTopPyg/OlxcL1xcLyk/KCg/OigoW146QF0qKSg/OjooW146QF0qKSk/KT9AKT8oW146XFwvPyNdKikoPzo6KFxcZCopKT8pKCgoXFwvKD86W14/I10oPyFbXj8jXFwvXSpcXC5bXj8jXFwvLl0rKD86Wz8jXXwkKSkpKlxcLz8pPyhbXj8jXFwvXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pLztcclxuXHRcclxuXHQgIHZhciBwYXJ0cyA9IFsnc291cmNlJywgJ3Byb3RvY29sJywgJ2F1dGhvcml0eScsICd1c2VySW5mbycsICd1c2VyJywgJ3Bhc3N3b3JkJyxcclxuXHQgICAgICAgICAgICAgICAnaG9zdCcsICdwb3J0JywgJ3JlbGF0aXZlJywgJ3BhdGgnLCAnZGlyZWN0b3J5JywgJ2ZpbGUnLCAncXVlcnknLFxyXG5cdCAgICAgICAgICAgICAgICdhbmNob3InXTtcclxuXHRcclxuXHQgIHV0aWwucGFyc2VVcmkgPSBmdW5jdGlvbiAoc3RyKSB7XHJcblx0ICAgIHZhciBtID0gcmUuZXhlYyhzdHIgfHwgJycpXHJcblx0ICAgICAgLCB1cmkgPSB7fVxyXG5cdCAgICAgICwgaSA9IDE0O1xyXG5cdFxyXG5cdCAgICB3aGlsZSAoaS0tKSB7XHJcblx0ICAgICAgdXJpW3BhcnRzW2ldXSA9IG1baV0gfHwgJyc7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgcmV0dXJuIHVyaTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIFByb2R1Y2VzIGEgdW5pcXVlIHVybCB0aGF0IGlkZW50aWZpZXMgYSBTb2NrZXQuSU8gY29ubmVjdGlvbi5cclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0ge09iamVjdH0gdXJpXHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICB1dGlsLnVuaXF1ZVVyaSA9IGZ1bmN0aW9uICh1cmkpIHtcclxuXHQgICAgdmFyIHByb3RvY29sID0gdXJpLnByb3RvY29sXHJcblx0ICAgICAgLCBob3N0ID0gdXJpLmhvc3RcclxuXHQgICAgICAsIHBvcnQgPSB1cmkucG9ydDtcclxuXHRcclxuXHQgICAgaWYgKCdkb2N1bWVudCcgaW4gZ2xvYmFsKSB7XHJcblx0ICAgICAgaG9zdCA9IGhvc3QgfHwgZG9jdW1lbnQuZG9tYWluO1xyXG5cdCAgICAgIHBvcnQgPSBwb3J0IHx8IChwcm90b2NvbCA9PSAnaHR0cHMnXHJcblx0ICAgICAgICAmJiBkb2N1bWVudC5sb2NhdGlvbi5wcm90b2NvbCAhPT0gJ2h0dHBzOicgPyA0NDMgOiBkb2N1bWVudC5sb2NhdGlvbi5wb3J0KTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICBob3N0ID0gaG9zdCB8fCAnbG9jYWxob3N0JztcclxuXHRcclxuXHQgICAgICBpZiAoIXBvcnQgJiYgcHJvdG9jb2wgPT0gJ2h0dHBzJykge1xyXG5cdCAgICAgICAgcG9ydCA9IDQ0MztcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgcmV0dXJuIChwcm90b2NvbCB8fCAnaHR0cCcpICsgJzovLycgKyBob3N0ICsgJzonICsgKHBvcnQgfHwgODApO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogTWVyZ2VzdCAyIHF1ZXJ5IHN0cmluZ3MgaW4gdG8gb25jZSB1bmlxdWUgcXVlcnkgc3RyaW5nXHJcblx0ICAgKlxyXG5cdCAgICogQHBhcmFtIHtTdHJpbmd9IGJhc2VcclxuXHQgICAqIEBwYXJhbSB7U3RyaW5nfSBhZGRpdGlvblxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgdXRpbC5xdWVyeSA9IGZ1bmN0aW9uIChiYXNlLCBhZGRpdGlvbikge1xyXG5cdCAgICB2YXIgcXVlcnkgPSB1dGlsLmNodW5rUXVlcnkoYmFzZSB8fCAnJylcclxuXHQgICAgICAsIGNvbXBvbmVudHMgPSBbXTtcclxuXHRcclxuXHQgICAgdXRpbC5tZXJnZShxdWVyeSwgdXRpbC5jaHVua1F1ZXJ5KGFkZGl0aW9uIHx8ICcnKSk7XHJcblx0ICAgIGZvciAodmFyIHBhcnQgaW4gcXVlcnkpIHtcclxuXHQgICAgICBpZiAocXVlcnkuaGFzT3duUHJvcGVydHkocGFydCkpIHtcclxuXHQgICAgICAgIGNvbXBvbmVudHMucHVzaChwYXJ0ICsgJz0nICsgcXVlcnlbcGFydF0pO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICByZXR1cm4gY29tcG9uZW50cy5sZW5ndGggPyAnPycgKyBjb21wb25lbnRzLmpvaW4oJyYnKSA6ICcnO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogVHJhbnNmb3JtcyBhIHF1ZXJ5c3RyaW5nIGluIHRvIGFuIG9iamVjdFxyXG5cdCAgICpcclxuXHQgICAqIEBwYXJhbSB7U3RyaW5nfSBxc1xyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgdXRpbC5jaHVua1F1ZXJ5ID0gZnVuY3Rpb24gKHFzKSB7XHJcblx0ICAgIHZhciBxdWVyeSA9IHt9XHJcblx0ICAgICAgLCBwYXJhbXMgPSBxcy5zcGxpdCgnJicpXHJcblx0ICAgICAgLCBpID0gMFxyXG5cdCAgICAgICwgbCA9IHBhcmFtcy5sZW5ndGhcclxuXHQgICAgICAsIGt2O1xyXG5cdFxyXG5cdCAgICBmb3IgKDsgaSA8IGw7ICsraSkge1xyXG5cdCAgICAgIGt2ID0gcGFyYW1zW2ldLnNwbGl0KCc9Jyk7XHJcblx0ICAgICAgaWYgKGt2WzBdKSB7XHJcblx0ICAgICAgICBxdWVyeVtrdlswXV0gPSBrdlsxXTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgcmV0dXJuIHF1ZXJ5O1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogRXhlY3V0ZXMgdGhlIGdpdmVuIGZ1bmN0aW9uIHdoZW4gdGhlIHBhZ2UgaXMgbG9hZGVkLlxyXG5cdCAgICpcclxuXHQgICAqICAgICBpby51dGlsLmxvYWQoZnVuY3Rpb24gKCkgeyBjb25zb2xlLmxvZygncGFnZSBsb2FkZWQnKTsgfSk7XHJcblx0ICAgKlxyXG5cdCAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIHZhciBwYWdlTG9hZGVkID0gZmFsc2U7XHJcblx0XHJcblx0ICB1dGlsLmxvYWQgPSBmdW5jdGlvbiAoZm4pIHtcclxuXHQgICAgaWYgKCdkb2N1bWVudCcgaW4gZ2xvYmFsICYmIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScgfHwgcGFnZUxvYWRlZCkge1xyXG5cdCAgICAgIHJldHVybiBmbigpO1xyXG5cdCAgICB9XHJcblx0XHJcblx0ICAgIHV0aWwub24oZ2xvYmFsLCAnbG9hZCcsIGZuLCBmYWxzZSk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBBZGRzIGFuIGV2ZW50LlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICB1dGlsLm9uID0gZnVuY3Rpb24gKGVsZW1lbnQsIGV2ZW50LCBmbiwgY2FwdHVyZSkge1xyXG5cdCAgICBpZiAoZWxlbWVudC5hdHRhY2hFdmVudCkge1xyXG5cdCAgICAgIGVsZW1lbnQuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBmbik7XHJcblx0ICAgIH0gZWxzZSBpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7XHJcblx0ICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmbiwgY2FwdHVyZSk7XHJcblx0ICAgIH1cclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEdlbmVyYXRlcyB0aGUgY29ycmVjdCBgWE1MSHR0cFJlcXVlc3RgIGZvciByZWd1bGFyIGFuZCBjcm9zcyBkb21haW4gcmVxdWVzdHMuXHJcblx0ICAgKlxyXG5cdCAgICogQHBhcmFtIHtCb29sZWFufSBbeGRvbWFpbl0gQ3JlYXRlIGEgcmVxdWVzdCB0aGF0IGNhbiBiZSB1c2VkIGNyb3NzIGRvbWFpbi5cclxuXHQgICAqIEByZXR1cm5zIHtYTUxIdHRwUmVxdWVzdHxmYWxzZX0gSWYgd2UgY2FuIGNyZWF0ZSBhIFhNTEh0dHBSZXF1ZXN0LlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIHV0aWwucmVxdWVzdCA9IGZ1bmN0aW9uICh4ZG9tYWluKSB7XHJcblx0XHJcblx0ICAgIGlmICh4ZG9tYWluICYmICd1bmRlZmluZWQnICE9IHR5cGVvZiBYRG9tYWluUmVxdWVzdCkge1xyXG5cdCAgICAgIHJldHVybiBuZXcgWERvbWFpblJlcXVlc3QoKTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICBpZiAoJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICgheGRvbWFpbiB8fCB1dGlsLnVhLmhhc0NPUlMpKSB7XHJcblx0ICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdCAgICB9XHJcblx0XHJcblx0ICAgIGlmICgheGRvbWFpbikge1xyXG5cdCAgICAgIHRyeSB7XHJcblx0ICAgICAgICByZXR1cm4gbmV3IHdpbmRvd1soWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKSldKCdNaWNyb3NvZnQuWE1MSFRUUCcpO1xyXG5cdCAgICAgIH0gY2F0Y2goZSkgeyB9XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgcmV0dXJuIG51bGw7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBYSFIgYmFzZWQgdHJhbnNwb3J0IGNvbnN0cnVjdG9yLlxyXG5cdCAgICpcclxuXHQgICAqIEBjb25zdHJ1Y3RvclxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBDaGFuZ2UgdGhlIGludGVybmFsIHBhZ2VMb2FkZWQgdmFsdWUuXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIGlmICgndW5kZWZpbmVkJyAhPSB0eXBlb2Ygd2luZG93KSB7XHJcblx0ICAgIHV0aWwubG9hZChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgcGFnZUxvYWRlZCA9IHRydWU7XHJcblx0ICAgIH0pO1xyXG5cdCAgfVxyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBEZWZlcnMgYSBmdW5jdGlvbiB0byBlbnN1cmUgYSBzcGlubmVyIGlzIG5vdCBkaXNwbGF5ZWQgYnkgdGhlIGJyb3dzZXJcclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgdXRpbC5kZWZlciA9IGZ1bmN0aW9uIChmbikge1xyXG5cdCAgICBpZiAoIXV0aWwudWEud2Via2l0IHx8ICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbXBvcnRTY3JpcHRzKSB7XHJcblx0ICAgICAgcmV0dXJuIGZuKCk7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgdXRpbC5sb2FkKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICBzZXRUaW1lb3V0KGZuLCAxMDApO1xyXG5cdCAgICB9KTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIE1lcmdlcyB0d28gb2JqZWN0cy5cclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0ICBcclxuXHQgIHV0aWwubWVyZ2UgPSBmdW5jdGlvbiBtZXJnZSAodGFyZ2V0LCBhZGRpdGlvbmFsLCBkZWVwLCBsYXN0c2Vlbikge1xyXG5cdCAgICB2YXIgc2VlbiA9IGxhc3RzZWVuIHx8IFtdXHJcblx0ICAgICAgLCBkZXB0aCA9IHR5cGVvZiBkZWVwID09ICd1bmRlZmluZWQnID8gMiA6IGRlZXBcclxuXHQgICAgICAsIHByb3A7XHJcblx0XHJcblx0ICAgIGZvciAocHJvcCBpbiBhZGRpdGlvbmFsKSB7XHJcblx0ICAgICAgaWYgKGFkZGl0aW9uYWwuaGFzT3duUHJvcGVydHkocHJvcCkgJiYgdXRpbC5pbmRleE9mKHNlZW4sIHByb3ApIDwgMCkge1xyXG5cdCAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRbcHJvcF0gIT09ICdvYmplY3QnIHx8ICFkZXB0aCkge1xyXG5cdCAgICAgICAgICB0YXJnZXRbcHJvcF0gPSBhZGRpdGlvbmFsW3Byb3BdO1xyXG5cdCAgICAgICAgICBzZWVuLnB1c2goYWRkaXRpb25hbFtwcm9wXSk7XHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICB1dGlsLm1lcmdlKHRhcmdldFtwcm9wXSwgYWRkaXRpb25hbFtwcm9wXSwgZGVwdGggLSAxLCBzZWVuKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgcmV0dXJuIHRhcmdldDtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIE1lcmdlcyBwcm90b3R5cGVzIGZyb20gb2JqZWN0c1xyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHQgIFxyXG5cdCAgdXRpbC5taXhpbiA9IGZ1bmN0aW9uIChjdG9yLCBjdG9yMikge1xyXG5cdCAgICB1dGlsLm1lcmdlKGN0b3IucHJvdG90eXBlLCBjdG9yMi5wcm90b3R5cGUpO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogU2hvcnRjdXQgZm9yIHByb3RvdHlwaWNhbCBhbmQgc3RhdGljIGluaGVyaXRhbmNlLlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICB1dGlsLmluaGVyaXQgPSBmdW5jdGlvbiAoY3RvciwgY3RvcjIpIHtcclxuXHQgICAgZnVuY3Rpb24gZigpIHt9O1xyXG5cdCAgICBmLnByb3RvdHlwZSA9IGN0b3IyLnByb3RvdHlwZTtcclxuXHQgICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgZjtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGFuIEFycmF5LlxyXG5cdCAgICpcclxuXHQgICAqICAgICBpby51dGlsLmlzQXJyYXkoW10pOyAvLyB0cnVlXHJcblx0ICAgKiAgICAgaW8udXRpbC5pc0FycmF5KHt9KTsgLy8gZmFsc2VcclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0gT2JqZWN0IG9ialxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgdXRpbC5pc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAob2JqKSB7XHJcblx0ICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEludGVyc2VjdHMgdmFsdWVzIG9mIHR3byBhcnJheXMgaW50byBhIHRoaXJkXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgdXRpbC5pbnRlcnNlY3QgPSBmdW5jdGlvbiAoYXJyLCBhcnIyKSB7XHJcblx0ICAgIHZhciByZXQgPSBbXVxyXG5cdCAgICAgICwgbG9uZ2VzdCA9IGFyci5sZW5ndGggPiBhcnIyLmxlbmd0aCA/IGFyciA6IGFycjJcclxuXHQgICAgICAsIHNob3J0ZXN0ID0gYXJyLmxlbmd0aCA+IGFycjIubGVuZ3RoID8gYXJyMiA6IGFycjtcclxuXHRcclxuXHQgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzaG9ydGVzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHQgICAgICBpZiAofnV0aWwuaW5kZXhPZihsb25nZXN0LCBzaG9ydGVzdFtpXSkpXHJcblx0ICAgICAgICByZXQucHVzaChzaG9ydGVzdFtpXSk7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgcmV0dXJuIHJldDtcclxuXHQgIH1cclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQXJyYXkgaW5kZXhPZiBjb21wYXRpYmlsaXR5LlxyXG5cdCAgICpcclxuXHQgICAqIEBzZWUgYml0Lmx5L2E1RHhhMlxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgdXRpbC5pbmRleE9mID0gZnVuY3Rpb24gKGFyciwgbywgaSkge1xyXG5cdCAgICBcclxuXHQgICAgZm9yICh2YXIgaiA9IGFyci5sZW5ndGgsIGkgPSBpIDwgMCA/IGkgKyBqIDwgMCA/IDAgOiBpICsgaiA6IGkgfHwgMDsgXHJcblx0ICAgICAgICAgaSA8IGogJiYgYXJyW2ldICE9PSBvOyBpKyspIHt9XHJcblx0XHJcblx0ICAgIHJldHVybiBqIDw9IGkgPyAtMSA6IGk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBDb252ZXJ0cyBlbnVtZXJhYmxlcyB0byBhcnJheS5cclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICB1dGlsLnRvQXJyYXkgPSBmdW5jdGlvbiAoZW51KSB7XHJcblx0ICAgIHZhciBhcnIgPSBbXTtcclxuXHRcclxuXHQgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbnUubGVuZ3RoOyBpIDwgbDsgaSsrKVxyXG5cdCAgICAgIGFyci5wdXNoKGVudVtpXSk7XHJcblx0XHJcblx0ICAgIHJldHVybiBhcnI7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBVQSAvIGVuZ2luZXMgZGV0ZWN0aW9uIG5hbWVzcGFjZS5cclxuXHQgICAqXHJcblx0ICAgKiBAbmFtZXNwYWNlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIHV0aWwudWEgPSB7fTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogV2hldGhlciB0aGUgVUEgc3VwcG9ydHMgQ09SUyBmb3IgWEhSLlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIHV0aWwudWEuaGFzQ09SUyA9ICd1bmRlZmluZWQnICE9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAmJiAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICB0cnkge1xyXG5cdCAgICAgIHZhciBhID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcblx0ICAgIH0gY2F0Y2ggKGUpIHtcclxuXHQgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgcmV0dXJuIGEud2l0aENyZWRlbnRpYWxzICE9IHVuZGVmaW5lZDtcclxuXHQgIH0pKCk7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIERldGVjdCB3ZWJraXQuXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgdXRpbC51YS53ZWJraXQgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgbmF2aWdhdG9yXHJcblx0ICAgICYmIC93ZWJraXQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG5cdFxyXG5cdCAgIC8qKlxyXG5cdCAgICogRGV0ZWN0IGlQYWQvaVBob25lL2lQb2QuXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgdXRpbC51YS5pRGV2aWNlID0gJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIG5hdmlnYXRvclxyXG5cdCAgICAgICYmIC9pUGFkfGlQaG9uZXxpUG9kL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcclxuXHRcclxuXHR9KSgndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5leHBvcnRzLCB0aGlzKTtcclxuXHQvKipcclxuXHQgKiBzb2NrZXQuaW9cclxuXHQgKiBDb3B5cmlnaHQoYykgMjAxMSBMZWFybkJvb3N0IDxkZXZAbGVhcm5ib29zdC5jb20+XHJcblx0ICogTUlUIExpY2Vuc2VkXHJcblx0ICovXHJcblx0XHJcblx0KGZ1bmN0aW9uIChleHBvcnRzLCBpbykge1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBFeHBvc2UgY29uc3RydWN0b3IuXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIGV4cG9ydHMuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBFdmVudCBlbWl0dGVyIGNvbnN0cnVjdG9yLlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHVibGljLlxyXG5cdCAgICovXHJcblx0XHJcblx0ICBmdW5jdGlvbiBFdmVudEVtaXR0ZXIgKCkge307XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEFkZHMgYSBsaXN0ZW5lclxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAobmFtZSwgZm4pIHtcclxuXHQgICAgaWYgKCF0aGlzLiRldmVudHMpIHtcclxuXHQgICAgICB0aGlzLiRldmVudHMgPSB7fTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICBpZiAoIXRoaXMuJGV2ZW50c1tuYW1lXSkge1xyXG5cdCAgICAgIHRoaXMuJGV2ZW50c1tuYW1lXSA9IGZuO1xyXG5cdCAgICB9IGVsc2UgaWYgKGlvLnV0aWwuaXNBcnJheSh0aGlzLiRldmVudHNbbmFtZV0pKSB7XHJcblx0ICAgICAgdGhpcy4kZXZlbnRzW25hbWVdLnB1c2goZm4pO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRoaXMuJGV2ZW50c1tuYW1lXSA9IFt0aGlzLiRldmVudHNbbmFtZV0sIGZuXTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICByZXR1cm4gdGhpcztcclxuXHQgIH07XHJcblx0XHJcblx0ICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbjtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQWRkcyBhIHZvbGF0aWxlIGxpc3RlbmVyLlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIChuYW1lLCBmbikge1xyXG5cdCAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHJcblx0ICAgIGZ1bmN0aW9uIG9uICgpIHtcclxuXHQgICAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKG5hbWUsIG9uKTtcclxuXHQgICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdCAgICB9O1xyXG5cdFxyXG5cdCAgICBvbi5saXN0ZW5lciA9IGZuO1xyXG5cdCAgICB0aGlzLm9uKG5hbWUsIG9uKTtcclxuXHRcclxuXHQgICAgcmV0dXJuIHRoaXM7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBSZW1vdmVzIGEgbGlzdGVuZXIuXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChuYW1lLCBmbikge1xyXG5cdCAgICBpZiAodGhpcy4kZXZlbnRzICYmIHRoaXMuJGV2ZW50c1tuYW1lXSkge1xyXG5cdCAgICAgIHZhciBsaXN0ID0gdGhpcy4kZXZlbnRzW25hbWVdO1xyXG5cdFxyXG5cdCAgICAgIGlmIChpby51dGlsLmlzQXJyYXkobGlzdCkpIHtcclxuXHQgICAgICAgIHZhciBwb3MgPSAtMTtcclxuXHRcclxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHQgICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGZuIHx8IChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGZuKSkge1xyXG5cdCAgICAgICAgICAgIHBvcyA9IGk7XHJcblx0ICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHRcclxuXHQgICAgICAgIGlmIChwb3MgPCAwKSB7XHJcblx0ICAgICAgICAgIHJldHVybiB0aGlzO1xyXG5cdCAgICAgICAgfVxyXG5cdFxyXG5cdCAgICAgICAgbGlzdC5zcGxpY2UocG9zLCAxKTtcclxuXHRcclxuXHQgICAgICAgIGlmICghbGlzdC5sZW5ndGgpIHtcclxuXHQgICAgICAgICAgZGVsZXRlIHRoaXMuJGV2ZW50c1tuYW1lXTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9IGVsc2UgaWYgKGxpc3QgPT09IGZuIHx8IChsaXN0Lmxpc3RlbmVyICYmIGxpc3QubGlzdGVuZXIgPT09IGZuKSkge1xyXG5cdCAgICAgICAgZGVsZXRlIHRoaXMuJGV2ZW50c1tuYW1lXTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgcmV0dXJuIHRoaXM7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBSZW1vdmVzIGFsbCBsaXN0ZW5lcnMgZm9yIGFuIGV2ZW50LlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuXHQgICAgaWYgKG5hbWUgPT09IHVuZGVmaW5lZCkge1xyXG5cdCAgICAgIHRoaXMuJGV2ZW50cyA9IHt9O1xyXG5cdCAgICAgIHJldHVybiB0aGlzO1xyXG5cdCAgICB9XHJcblx0XHJcblx0ICAgIGlmICh0aGlzLiRldmVudHMgJiYgdGhpcy4kZXZlbnRzW25hbWVdKSB7XHJcblx0ICAgICAgdGhpcy4kZXZlbnRzW25hbWVdID0gbnVsbDtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICByZXR1cm4gdGhpcztcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEdldHMgYWxsIGxpc3RlbmVycyBmb3IgYSBjZXJ0YWluIGV2ZW50LlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHVibGNpXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuXHQgICAgaWYgKCF0aGlzLiRldmVudHMpIHtcclxuXHQgICAgICB0aGlzLiRldmVudHMgPSB7fTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICBpZiAoIXRoaXMuJGV2ZW50c1tuYW1lXSkge1xyXG5cdCAgICAgIHRoaXMuJGV2ZW50c1tuYW1lXSA9IFtdO1xyXG5cdCAgICB9XHJcblx0XHJcblx0ICAgIGlmICghaW8udXRpbC5pc0FycmF5KHRoaXMuJGV2ZW50c1tuYW1lXSkpIHtcclxuXHQgICAgICB0aGlzLiRldmVudHNbbmFtZV0gPSBbdGhpcy4kZXZlbnRzW25hbWVdXTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICByZXR1cm4gdGhpcy4kZXZlbnRzW25hbWVdO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogRW1pdHMgYW4gZXZlbnQuXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuXHQgICAgaWYgKCF0aGlzLiRldmVudHMpIHtcclxuXHQgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgdmFyIGhhbmRsZXIgPSB0aGlzLiRldmVudHNbbmFtZV07XHJcblx0XHJcblx0ICAgIGlmICghaGFuZGxlcikge1xyXG5cdCAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcblx0XHJcblx0ICAgIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBoYW5kbGVyKSB7XHJcblx0ICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcclxuXHQgICAgfSBlbHNlIGlmIChpby51dGlsLmlzQXJyYXkoaGFuZGxlcikpIHtcclxuXHQgICAgICB2YXIgbGlzdGVuZXJzID0gaGFuZGxlci5zbGljZSgpO1xyXG5cdFxyXG5cdCAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cdCAgICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgcmV0dXJuIHRydWU7XHJcblx0ICB9O1xyXG5cdFxyXG5cdH0pKFxyXG5cdCAgICAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5leHBvcnRzXHJcblx0ICAsICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLnBhcmVudC5leHBvcnRzXHJcblx0KTtcclxuXHRcclxuXHQvKipcclxuXHQgKiBzb2NrZXQuaW9cclxuXHQgKiBDb3B5cmlnaHQoYykgMjAxMSBMZWFybkJvb3N0IDxkZXZAbGVhcm5ib29zdC5jb20+XHJcblx0ICogTUlUIExpY2Vuc2VkXHJcblx0ICovXHJcblx0XHJcblx0LyoqXHJcblx0ICogQmFzZWQgb24gSlNPTjIgKGh0dHA6Ly93d3cuSlNPTi5vcmcvanMuaHRtbCkuXHJcblx0ICovXHJcblx0XHJcblx0KGZ1bmN0aW9uIChleHBvcnRzLCBuYXRpdmVKU09OKSB7XHJcblx0ICBcInVzZSBzdHJpY3RcIjtcclxuXHRcclxuXHQgIC8vIHVzZSBuYXRpdmUgSlNPTiBpZiBpdCdzIGF2YWlsYWJsZVxyXG5cdCAgaWYgKG5hdGl2ZUpTT04gJiYgbmF0aXZlSlNPTi5wYXJzZSl7XHJcblx0ICAgIHJldHVybiBleHBvcnRzLkpTT04gPSB7XHJcblx0ICAgICAgcGFyc2U6IG5hdGl2ZUpTT04ucGFyc2VcclxuXHQgICAgLCBzdHJpbmdpZnk6IG5hdGl2ZUpTT04uc3RyaW5naWZ5XHJcblx0ICAgIH1cclxuXHQgIH1cclxuXHRcclxuXHQgIHZhciBKU09OID0gZXhwb3J0cy5KU09OID0ge307XHJcblx0XHJcblx0ICBmdW5jdGlvbiBmKG4pIHtcclxuXHQgICAgICAvLyBGb3JtYXQgaW50ZWdlcnMgdG8gaGF2ZSBhdCBsZWFzdCB0d28gZGlnaXRzLlxyXG5cdCAgICAgIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuIDogbjtcclxuXHQgIH1cclxuXHRcclxuXHQgIGZ1bmN0aW9uIGRhdGUoZCwga2V5KSB7XHJcblx0ICAgIHJldHVybiBpc0Zpbml0ZShkLnZhbHVlT2YoKSkgP1xyXG5cdCAgICAgICAgZC5nZXRVVENGdWxsWWVhcigpICAgICArICctJyArXHJcblx0ICAgICAgICBmKGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICtcclxuXHQgICAgICAgIGYoZC5nZXRVVENEYXRlKCkpICAgICAgKyAnVCcgK1xyXG5cdCAgICAgICAgZihkLmdldFVUQ0hvdXJzKCkpICAgICArICc6JyArXHJcblx0ICAgICAgICBmKGQuZ2V0VVRDTWludXRlcygpKSAgICsgJzonICtcclxuXHQgICAgICAgIGYoZC5nZXRVVENTZWNvbmRzKCkpICAgKyAnWicgOiBudWxsO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIHZhciBjeCA9IC9bXFx1MDAwMFxcdTAwYWRcXHUwNjAwLVxcdTA2MDRcXHUwNzBmXFx1MTdiNFxcdTE3YjVcXHUyMDBjLVxcdTIwMGZcXHUyMDI4LVxcdTIwMmZcXHUyMDYwLVxcdTIwNmZcXHVmZWZmXFx1ZmZmMC1cXHVmZmZmXS9nLFxyXG5cdCAgICAgIGVzY2FwYWJsZSA9IC9bXFxcXFxcXCJcXHgwMC1cXHgxZlxceDdmLVxceDlmXFx1MDBhZFxcdTA2MDAtXFx1MDYwNFxcdTA3MGZcXHUxN2I0XFx1MTdiNVxcdTIwMGMtXFx1MjAwZlxcdTIwMjgtXFx1MjAyZlxcdTIwNjAtXFx1MjA2ZlxcdWZlZmZcXHVmZmYwLVxcdWZmZmZdL2csXHJcblx0ICAgICAgZ2FwLFxyXG5cdCAgICAgIGluZGVudCxcclxuXHQgICAgICBtZXRhID0geyAgICAvLyB0YWJsZSBvZiBjaGFyYWN0ZXIgc3Vic3RpdHV0aW9uc1xyXG5cdCAgICAgICAgICAnXFxiJzogJ1xcXFxiJyxcclxuXHQgICAgICAgICAgJ1xcdCc6ICdcXFxcdCcsXHJcblx0ICAgICAgICAgICdcXG4nOiAnXFxcXG4nLFxyXG5cdCAgICAgICAgICAnXFxmJzogJ1xcXFxmJyxcclxuXHQgICAgICAgICAgJ1xccic6ICdcXFxccicsXHJcblx0ICAgICAgICAgICdcIicgOiAnXFxcXFwiJyxcclxuXHQgICAgICAgICAgJ1xcXFwnOiAnXFxcXFxcXFwnXHJcblx0ICAgICAgfSxcclxuXHQgICAgICByZXA7XHJcblx0XHJcblx0XHJcblx0ICBmdW5jdGlvbiBxdW90ZShzdHJpbmcpIHtcclxuXHRcclxuXHQvLyBJZiB0aGUgc3RyaW5nIGNvbnRhaW5zIG5vIGNvbnRyb2wgY2hhcmFjdGVycywgbm8gcXVvdGUgY2hhcmFjdGVycywgYW5kIG5vXHJcblx0Ly8gYmFja3NsYXNoIGNoYXJhY3RlcnMsIHRoZW4gd2UgY2FuIHNhZmVseSBzbGFwIHNvbWUgcXVvdGVzIGFyb3VuZCBpdC5cclxuXHQvLyBPdGhlcndpc2Ugd2UgbXVzdCBhbHNvIHJlcGxhY2UgdGhlIG9mZmVuZGluZyBjaGFyYWN0ZXJzIHdpdGggc2FmZSBlc2NhcGVcclxuXHQvLyBzZXF1ZW5jZXMuXHJcblx0XHJcblx0ICAgICAgZXNjYXBhYmxlLmxhc3RJbmRleCA9IDA7XHJcblx0ICAgICAgcmV0dXJuIGVzY2FwYWJsZS50ZXN0KHN0cmluZykgPyAnXCInICsgc3RyaW5nLnJlcGxhY2UoZXNjYXBhYmxlLCBmdW5jdGlvbiAoYSkge1xyXG5cdCAgICAgICAgICB2YXIgYyA9IG1ldGFbYV07XHJcblx0ICAgICAgICAgIHJldHVybiB0eXBlb2YgYyA9PT0gJ3N0cmluZycgPyBjIDpcclxuXHQgICAgICAgICAgICAgICdcXFxcdScgKyAoJzAwMDAnICsgYS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpO1xyXG5cdCAgICAgIH0pICsgJ1wiJyA6ICdcIicgKyBzdHJpbmcgKyAnXCInO1xyXG5cdCAgfVxyXG5cdFxyXG5cdFxyXG5cdCAgZnVuY3Rpb24gc3RyKGtleSwgaG9sZGVyKSB7XHJcblx0XHJcblx0Ly8gUHJvZHVjZSBhIHN0cmluZyBmcm9tIGhvbGRlcltrZXldLlxyXG5cdFxyXG5cdCAgICAgIHZhciBpLCAgICAgICAgICAvLyBUaGUgbG9vcCBjb3VudGVyLlxyXG5cdCAgICAgICAgICBrLCAgICAgICAgICAvLyBUaGUgbWVtYmVyIGtleS5cclxuXHQgICAgICAgICAgdiwgICAgICAgICAgLy8gVGhlIG1lbWJlciB2YWx1ZS5cclxuXHQgICAgICAgICAgbGVuZ3RoLFxyXG5cdCAgICAgICAgICBtaW5kID0gZ2FwLFxyXG5cdCAgICAgICAgICBwYXJ0aWFsLFxyXG5cdCAgICAgICAgICB2YWx1ZSA9IGhvbGRlcltrZXldO1xyXG5cdFxyXG5cdC8vIElmIHRoZSB2YWx1ZSBoYXMgYSB0b0pTT04gbWV0aG9kLCBjYWxsIGl0IHRvIG9idGFpbiBhIHJlcGxhY2VtZW50IHZhbHVlLlxyXG5cdFxyXG5cdCAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcclxuXHQgICAgICAgICAgdmFsdWUgPSBkYXRlKGtleSk7XHJcblx0ICAgICAgfVxyXG5cdFxyXG5cdC8vIElmIHdlIHdlcmUgY2FsbGVkIHdpdGggYSByZXBsYWNlciBmdW5jdGlvbiwgdGhlbiBjYWxsIHRoZSByZXBsYWNlciB0b1xyXG5cdC8vIG9idGFpbiBhIHJlcGxhY2VtZW50IHZhbHVlLlxyXG5cdFxyXG5cdCAgICAgIGlmICh0eXBlb2YgcmVwID09PSAnZnVuY3Rpb24nKSB7XHJcblx0ICAgICAgICAgIHZhbHVlID0gcmVwLmNhbGwoaG9sZGVyLCBrZXksIHZhbHVlKTtcclxuXHQgICAgICB9XHJcblx0XHJcblx0Ly8gV2hhdCBoYXBwZW5zIG5leHQgZGVwZW5kcyBvbiB0aGUgdmFsdWUncyB0eXBlLlxyXG5cdFxyXG5cdCAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XHJcblx0ICAgICAgY2FzZSAnc3RyaW5nJzpcclxuXHQgICAgICAgICAgcmV0dXJuIHF1b3RlKHZhbHVlKTtcclxuXHRcclxuXHQgICAgICBjYXNlICdudW1iZXInOlxyXG5cdFxyXG5cdC8vIEpTT04gbnVtYmVycyBtdXN0IGJlIGZpbml0ZS4gRW5jb2RlIG5vbi1maW5pdGUgbnVtYmVycyBhcyBudWxsLlxyXG5cdFxyXG5cdCAgICAgICAgICByZXR1cm4gaXNGaW5pdGUodmFsdWUpID8gU3RyaW5nKHZhbHVlKSA6ICdudWxsJztcclxuXHRcclxuXHQgICAgICBjYXNlICdib29sZWFuJzpcclxuXHQgICAgICBjYXNlICdudWxsJzpcclxuXHRcclxuXHQvLyBJZiB0aGUgdmFsdWUgaXMgYSBib29sZWFuIG9yIG51bGwsIGNvbnZlcnQgaXQgdG8gYSBzdHJpbmcuIE5vdGU6XHJcblx0Ly8gdHlwZW9mIG51bGwgZG9lcyBub3QgcHJvZHVjZSAnbnVsbCcuIFRoZSBjYXNlIGlzIGluY2x1ZGVkIGhlcmUgaW5cclxuXHQvLyB0aGUgcmVtb3RlIGNoYW5jZSB0aGF0IHRoaXMgZ2V0cyBmaXhlZCBzb21lZGF5LlxyXG5cdFxyXG5cdCAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcclxuXHRcclxuXHQvLyBJZiB0aGUgdHlwZSBpcyAnb2JqZWN0Jywgd2UgbWlnaHQgYmUgZGVhbGluZyB3aXRoIGFuIG9iamVjdCBvciBhbiBhcnJheSBvclxyXG5cdC8vIG51bGwuXHJcblx0XHJcblx0ICAgICAgY2FzZSAnb2JqZWN0JzpcclxuXHRcclxuXHQvLyBEdWUgdG8gYSBzcGVjaWZpY2F0aW9uIGJsdW5kZXIgaW4gRUNNQVNjcmlwdCwgdHlwZW9mIG51bGwgaXMgJ29iamVjdCcsXHJcblx0Ly8gc28gd2F0Y2ggb3V0IGZvciB0aGF0IGNhc2UuXHJcblx0XHJcblx0ICAgICAgICAgIGlmICghdmFsdWUpIHtcclxuXHQgICAgICAgICAgICAgIHJldHVybiAnbnVsbCc7XHJcblx0ICAgICAgICAgIH1cclxuXHRcclxuXHQvLyBNYWtlIGFuIGFycmF5IHRvIGhvbGQgdGhlIHBhcnRpYWwgcmVzdWx0cyBvZiBzdHJpbmdpZnlpbmcgdGhpcyBvYmplY3QgdmFsdWUuXHJcblx0XHJcblx0ICAgICAgICAgIGdhcCArPSBpbmRlbnQ7XHJcblx0ICAgICAgICAgIHBhcnRpYWwgPSBbXTtcclxuXHRcclxuXHQvLyBJcyB0aGUgdmFsdWUgYW4gYXJyYXk/XHJcblx0XHJcblx0ICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xyXG5cdFxyXG5cdC8vIFRoZSB2YWx1ZSBpcyBhbiBhcnJheS4gU3RyaW5naWZ5IGV2ZXJ5IGVsZW1lbnQuIFVzZSBudWxsIGFzIGEgcGxhY2Vob2xkZXJcclxuXHQvLyBmb3Igbm9uLUpTT04gdmFsdWVzLlxyXG5cdFxyXG5cdCAgICAgICAgICAgICAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xyXG5cdCAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgcGFydGlhbFtpXSA9IHN0cihpLCB2YWx1ZSkgfHwgJ251bGwnO1xyXG5cdCAgICAgICAgICAgICAgfVxyXG5cdFxyXG5cdC8vIEpvaW4gYWxsIG9mIHRoZSBlbGVtZW50cyB0b2dldGhlciwgc2VwYXJhdGVkIHdpdGggY29tbWFzLCBhbmQgd3JhcCB0aGVtIGluXHJcblx0Ly8gYnJhY2tldHMuXHJcblx0XHJcblx0ICAgICAgICAgICAgICB2ID0gcGFydGlhbC5sZW5ndGggPT09IDAgPyAnW10nIDogZ2FwID9cclxuXHQgICAgICAgICAgICAgICAgICAnW1xcbicgKyBnYXAgKyBwYXJ0aWFsLmpvaW4oJyxcXG4nICsgZ2FwKSArICdcXG4nICsgbWluZCArICddJyA6XHJcblx0ICAgICAgICAgICAgICAgICAgJ1snICsgcGFydGlhbC5qb2luKCcsJykgKyAnXSc7XHJcblx0ICAgICAgICAgICAgICBnYXAgPSBtaW5kO1xyXG5cdCAgICAgICAgICAgICAgcmV0dXJuIHY7XHJcblx0ICAgICAgICAgIH1cclxuXHRcclxuXHQvLyBJZiB0aGUgcmVwbGFjZXIgaXMgYW4gYXJyYXksIHVzZSBpdCB0byBzZWxlY3QgdGhlIG1lbWJlcnMgdG8gYmUgc3RyaW5naWZpZWQuXHJcblx0XHJcblx0ICAgICAgICAgIGlmIChyZXAgJiYgdHlwZW9mIHJlcCA9PT0gJ29iamVjdCcpIHtcclxuXHQgICAgICAgICAgICAgIGxlbmd0aCA9IHJlcC5sZW5ndGg7XHJcblx0ICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcclxuXHQgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlcFtpXSA9PT0gJ3N0cmluZycpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgayA9IHJlcFtpXTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgdiA9IHN0cihrLCB2YWx1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgIGlmICh2KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0aWFsLnB1c2gocXVvdGUoaykgKyAoZ2FwID8gJzogJyA6ICc6JykgKyB2KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgfSBlbHNlIHtcclxuXHRcclxuXHQvLyBPdGhlcndpc2UsIGl0ZXJhdGUgdGhyb3VnaCBhbGwgb2YgdGhlIGtleXMgaW4gdGhlIG9iamVjdC5cclxuXHRcclxuXHQgICAgICAgICAgICAgIGZvciAoayBpbiB2YWx1ZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGspKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgIHYgPSBzdHIoaywgdmFsdWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICBpZiAodikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydGlhbC5wdXNoKHF1b3RlKGspICsgKGdhcCA/ICc6ICcgOiAnOicpICsgdik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgIH1cclxuXHRcclxuXHQvLyBKb2luIGFsbCBvZiB0aGUgbWVtYmVyIHRleHRzIHRvZ2V0aGVyLCBzZXBhcmF0ZWQgd2l0aCBjb21tYXMsXHJcblx0Ly8gYW5kIHdyYXAgdGhlbSBpbiBicmFjZXMuXHJcblx0XHJcblx0ICAgICAgICAgIHYgPSBwYXJ0aWFsLmxlbmd0aCA9PT0gMCA/ICd7fScgOiBnYXAgP1xyXG5cdCAgICAgICAgICAgICAgJ3tcXG4nICsgZ2FwICsgcGFydGlhbC5qb2luKCcsXFxuJyArIGdhcCkgKyAnXFxuJyArIG1pbmQgKyAnfScgOlxyXG5cdCAgICAgICAgICAgICAgJ3snICsgcGFydGlhbC5qb2luKCcsJykgKyAnfSc7XHJcblx0ICAgICAgICAgIGdhcCA9IG1pbmQ7XHJcblx0ICAgICAgICAgIHJldHVybiB2O1xyXG5cdCAgICAgIH1cclxuXHQgIH1cclxuXHRcclxuXHQvLyBJZiB0aGUgSlNPTiBvYmplY3QgZG9lcyBub3QgeWV0IGhhdmUgYSBzdHJpbmdpZnkgbWV0aG9kLCBnaXZlIGl0IG9uZS5cclxuXHRcclxuXHQgIEpTT04uc3RyaW5naWZ5ID0gZnVuY3Rpb24gKHZhbHVlLCByZXBsYWNlciwgc3BhY2UpIHtcclxuXHRcclxuXHQvLyBUaGUgc3RyaW5naWZ5IG1ldGhvZCB0YWtlcyBhIHZhbHVlIGFuZCBhbiBvcHRpb25hbCByZXBsYWNlciwgYW5kIGFuIG9wdGlvbmFsXHJcblx0Ly8gc3BhY2UgcGFyYW1ldGVyLCBhbmQgcmV0dXJucyBhIEpTT04gdGV4dC4gVGhlIHJlcGxhY2VyIGNhbiBiZSBhIGZ1bmN0aW9uXHJcblx0Ly8gdGhhdCBjYW4gcmVwbGFjZSB2YWx1ZXMsIG9yIGFuIGFycmF5IG9mIHN0cmluZ3MgdGhhdCB3aWxsIHNlbGVjdCB0aGUga2V5cy5cclxuXHQvLyBBIGRlZmF1bHQgcmVwbGFjZXIgbWV0aG9kIGNhbiBiZSBwcm92aWRlZC4gVXNlIG9mIHRoZSBzcGFjZSBwYXJhbWV0ZXIgY2FuXHJcblx0Ly8gcHJvZHVjZSB0ZXh0IHRoYXQgaXMgbW9yZSBlYXNpbHkgcmVhZGFibGUuXHJcblx0XHJcblx0ICAgICAgdmFyIGk7XHJcblx0ICAgICAgZ2FwID0gJyc7XHJcblx0ICAgICAgaW5kZW50ID0gJyc7XHJcblx0XHJcblx0Ly8gSWYgdGhlIHNwYWNlIHBhcmFtZXRlciBpcyBhIG51bWJlciwgbWFrZSBhbiBpbmRlbnQgc3RyaW5nIGNvbnRhaW5pbmcgdGhhdFxyXG5cdC8vIG1hbnkgc3BhY2VzLlxyXG5cdFxyXG5cdCAgICAgIGlmICh0eXBlb2Ygc3BhY2UgPT09ICdudW1iZXInKSB7XHJcblx0ICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzcGFjZTsgaSArPSAxKSB7XHJcblx0ICAgICAgICAgICAgICBpbmRlbnQgKz0gJyAnO1xyXG5cdCAgICAgICAgICB9XHJcblx0XHJcblx0Ly8gSWYgdGhlIHNwYWNlIHBhcmFtZXRlciBpcyBhIHN0cmluZywgaXQgd2lsbCBiZSB1c2VkIGFzIHRoZSBpbmRlbnQgc3RyaW5nLlxyXG5cdFxyXG5cdCAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlID09PSAnc3RyaW5nJykge1xyXG5cdCAgICAgICAgICBpbmRlbnQgPSBzcGFjZTtcclxuXHQgICAgICB9XHJcblx0XHJcblx0Ly8gSWYgdGhlcmUgaXMgYSByZXBsYWNlciwgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIGFuIGFycmF5LlxyXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3IuXHJcblx0XHJcblx0ICAgICAgcmVwID0gcmVwbGFjZXI7XHJcblx0ICAgICAgaWYgKHJlcGxhY2VyICYmIHR5cGVvZiByZXBsYWNlciAhPT0gJ2Z1bmN0aW9uJyAmJlxyXG5cdCAgICAgICAgICAgICAgKHR5cGVvZiByZXBsYWNlciAhPT0gJ29iamVjdCcgfHxcclxuXHQgICAgICAgICAgICAgIHR5cGVvZiByZXBsYWNlci5sZW5ndGggIT09ICdudW1iZXInKSkge1xyXG5cdCAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0pTT04uc3RyaW5naWZ5Jyk7XHJcblx0ICAgICAgfVxyXG5cdFxyXG5cdC8vIE1ha2UgYSBmYWtlIHJvb3Qgb2JqZWN0IGNvbnRhaW5pbmcgb3VyIHZhbHVlIHVuZGVyIHRoZSBrZXkgb2YgJycuXHJcblx0Ly8gUmV0dXJuIHRoZSByZXN1bHQgb2Ygc3RyaW5naWZ5aW5nIHRoZSB2YWx1ZS5cclxuXHRcclxuXHQgICAgICByZXR1cm4gc3RyKCcnLCB7Jyc6IHZhbHVlfSk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdC8vIElmIHRoZSBKU09OIG9iamVjdCBkb2VzIG5vdCB5ZXQgaGF2ZSBhIHBhcnNlIG1ldGhvZCwgZ2l2ZSBpdCBvbmUuXHJcblx0XHJcblx0ICBKU09OLnBhcnNlID0gZnVuY3Rpb24gKHRleHQsIHJldml2ZXIpIHtcclxuXHQgIC8vIFRoZSBwYXJzZSBtZXRob2QgdGFrZXMgYSB0ZXh0IGFuZCBhbiBvcHRpb25hbCByZXZpdmVyIGZ1bmN0aW9uLCBhbmQgcmV0dXJuc1xyXG5cdCAgLy8gYSBKYXZhU2NyaXB0IHZhbHVlIGlmIHRoZSB0ZXh0IGlzIGEgdmFsaWQgSlNPTiB0ZXh0LlxyXG5cdFxyXG5cdCAgICAgIHZhciBqO1xyXG5cdFxyXG5cdCAgICAgIGZ1bmN0aW9uIHdhbGsoaG9sZGVyLCBrZXkpIHtcclxuXHRcclxuXHQgIC8vIFRoZSB3YWxrIG1ldGhvZCBpcyB1c2VkIHRvIHJlY3Vyc2l2ZWx5IHdhbGsgdGhlIHJlc3VsdGluZyBzdHJ1Y3R1cmUgc29cclxuXHQgIC8vIHRoYXQgbW9kaWZpY2F0aW9ucyBjYW4gYmUgbWFkZS5cclxuXHRcclxuXHQgICAgICAgICAgdmFyIGssIHYsIHZhbHVlID0gaG9sZGVyW2tleV07XHJcblx0ICAgICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcblx0ICAgICAgICAgICAgICBmb3IgKGsgaW4gdmFsdWUpIHtcclxuXHQgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICB2ID0gd2Fsayh2YWx1ZSwgayk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlW2tdID0gdjtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtrXTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgfVxyXG5cdCAgICAgICAgICByZXR1cm4gcmV2aXZlci5jYWxsKGhvbGRlciwga2V5LCB2YWx1ZSk7XHJcblx0ICAgICAgfVxyXG5cdFxyXG5cdFxyXG5cdCAgLy8gUGFyc2luZyBoYXBwZW5zIGluIGZvdXIgc3RhZ2VzLiBJbiB0aGUgZmlyc3Qgc3RhZ2UsIHdlIHJlcGxhY2UgY2VydGFpblxyXG5cdCAgLy8gVW5pY29kZSBjaGFyYWN0ZXJzIHdpdGggZXNjYXBlIHNlcXVlbmNlcy4gSmF2YVNjcmlwdCBoYW5kbGVzIG1hbnkgY2hhcmFjdGVyc1xyXG5cdCAgLy8gaW5jb3JyZWN0bHksIGVpdGhlciBzaWxlbnRseSBkZWxldGluZyB0aGVtLCBvciB0cmVhdGluZyB0aGVtIGFzIGxpbmUgZW5kaW5ncy5cclxuXHRcclxuXHQgICAgICB0ZXh0ID0gU3RyaW5nKHRleHQpO1xyXG5cdCAgICAgIGN4Lmxhc3RJbmRleCA9IDA7XHJcblx0ICAgICAgaWYgKGN4LnRlc3QodGV4dCkpIHtcclxuXHQgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShjeCwgZnVuY3Rpb24gKGEpIHtcclxuXHQgICAgICAgICAgICAgIHJldHVybiAnXFxcXHUnICtcclxuXHQgICAgICAgICAgICAgICAgICAoJzAwMDAnICsgYS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpO1xyXG5cdCAgICAgICAgICB9KTtcclxuXHQgICAgICB9XHJcblx0XHJcblx0ICAvLyBJbiB0aGUgc2Vjb25kIHN0YWdlLCB3ZSBydW4gdGhlIHRleHQgYWdhaW5zdCByZWd1bGFyIGV4cHJlc3Npb25zIHRoYXQgbG9va1xyXG5cdCAgLy8gZm9yIG5vbi1KU09OIHBhdHRlcm5zLiBXZSBhcmUgZXNwZWNpYWxseSBjb25jZXJuZWQgd2l0aCAnKCknIGFuZCAnbmV3J1xyXG5cdCAgLy8gYmVjYXVzZSB0aGV5IGNhbiBjYXVzZSBpbnZvY2F0aW9uLCBhbmQgJz0nIGJlY2F1c2UgaXQgY2FuIGNhdXNlIG11dGF0aW9uLlxyXG5cdCAgLy8gQnV0IGp1c3QgdG8gYmUgc2FmZSwgd2Ugd2FudCB0byByZWplY3QgYWxsIHVuZXhwZWN0ZWQgZm9ybXMuXHJcblx0XHJcblx0ICAvLyBXZSBzcGxpdCB0aGUgc2Vjb25kIHN0YWdlIGludG8gNCByZWdleHAgb3BlcmF0aW9ucyBpbiBvcmRlciB0byB3b3JrIGFyb3VuZFxyXG5cdCAgLy8gY3JpcHBsaW5nIGluZWZmaWNpZW5jaWVzIGluIElFJ3MgYW5kIFNhZmFyaSdzIHJlZ2V4cCBlbmdpbmVzLiBGaXJzdCB3ZVxyXG5cdCAgLy8gcmVwbGFjZSB0aGUgSlNPTiBiYWNrc2xhc2ggcGFpcnMgd2l0aCAnQCcgKGEgbm9uLUpTT04gY2hhcmFjdGVyKS4gU2Vjb25kLCB3ZVxyXG5cdCAgLy8gcmVwbGFjZSBhbGwgc2ltcGxlIHZhbHVlIHRva2VucyB3aXRoICddJyBjaGFyYWN0ZXJzLiBUaGlyZCwgd2UgZGVsZXRlIGFsbFxyXG5cdCAgLy8gb3BlbiBicmFja2V0cyB0aGF0IGZvbGxvdyBhIGNvbG9uIG9yIGNvbW1hIG9yIHRoYXQgYmVnaW4gdGhlIHRleHQuIEZpbmFsbHksXHJcblx0ICAvLyB3ZSBsb29rIHRvIHNlZSB0aGF0IHRoZSByZW1haW5pbmcgY2hhcmFjdGVycyBhcmUgb25seSB3aGl0ZXNwYWNlIG9yICddJyBvclxyXG5cdCAgLy8gJywnIG9yICc6JyBvciAneycgb3IgJ30nLiBJZiB0aGF0IGlzIHNvLCB0aGVuIHRoZSB0ZXh0IGlzIHNhZmUgZm9yIGV2YWwuXHJcblx0XHJcblx0ICAgICAgaWYgKC9eW1xcXSw6e31cXHNdKiQvXHJcblx0ICAgICAgICAgICAgICAudGVzdCh0ZXh0LnJlcGxhY2UoL1xcXFwoPzpbXCJcXFxcXFwvYmZucnRdfHVbMC05YS1mQS1GXXs0fSkvZywgJ0AnKVxyXG5cdCAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cIlteXCJcXFxcXFxuXFxyXSpcInx0cnVlfGZhbHNlfG51bGx8LT9cXGQrKD86XFwuXFxkKik/KD86W2VFXVsrXFwtXT9cXGQrKT8vZywgJ10nKVxyXG5cdCAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oPzpefDp8LCkoPzpcXHMqXFxbKSsvZywgJycpKSkge1xyXG5cdFxyXG5cdCAgLy8gSW4gdGhlIHRoaXJkIHN0YWdlIHdlIHVzZSB0aGUgZXZhbCBmdW5jdGlvbiB0byBjb21waWxlIHRoZSB0ZXh0IGludG8gYVxyXG5cdCAgLy8gSmF2YVNjcmlwdCBzdHJ1Y3R1cmUuIFRoZSAneycgb3BlcmF0b3IgaXMgc3ViamVjdCB0byBhIHN5bnRhY3RpYyBhbWJpZ3VpdHlcclxuXHQgIC8vIGluIEphdmFTY3JpcHQ6IGl0IGNhbiBiZWdpbiBhIGJsb2NrIG9yIGFuIG9iamVjdCBsaXRlcmFsLiBXZSB3cmFwIHRoZSB0ZXh0XHJcblx0ICAvLyBpbiBwYXJlbnMgdG8gZWxpbWluYXRlIHRoZSBhbWJpZ3VpdHkuXHJcblx0XHJcblx0ICAgICAgICAgIGogPSBldmFsKCcoJyArIHRleHQgKyAnKScpO1xyXG5cdFxyXG5cdCAgLy8gSW4gdGhlIG9wdGlvbmFsIGZvdXJ0aCBzdGFnZSwgd2UgcmVjdXJzaXZlbHkgd2FsayB0aGUgbmV3IHN0cnVjdHVyZSwgcGFzc2luZ1xyXG5cdCAgLy8gZWFjaCBuYW1lL3ZhbHVlIHBhaXIgdG8gYSByZXZpdmVyIGZ1bmN0aW9uIGZvciBwb3NzaWJsZSB0cmFuc2Zvcm1hdGlvbi5cclxuXHRcclxuXHQgICAgICAgICAgcmV0dXJuIHR5cGVvZiByZXZpdmVyID09PSAnZnVuY3Rpb24nID9cclxuXHQgICAgICAgICAgICAgIHdhbGsoeycnOiBqfSwgJycpIDogajtcclxuXHQgICAgICB9XHJcblx0XHJcblx0ICAvLyBJZiB0aGUgdGV4dCBpcyBub3QgSlNPTiBwYXJzZWFibGUsIHRoZW4gYSBTeW50YXhFcnJvciBpcyB0aHJvd24uXHJcblx0XHJcblx0ICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdKU09OLnBhcnNlJyk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdH0pKFxyXG5cdCAgICAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5leHBvcnRzXHJcblx0ICAsIHR5cGVvZiBKU09OICE9PSAndW5kZWZpbmVkJyA/IEpTT04gOiB1bmRlZmluZWRcclxuXHQpO1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIHNvY2tldC5pb1xyXG5cdCAqIENvcHlyaWdodChjKSAyMDExIExlYXJuQm9vc3QgPGRldkBsZWFybmJvb3N0LmNvbT5cclxuXHQgKiBNSVQgTGljZW5zZWRcclxuXHQgKi9cclxuXHRcclxuXHQoZnVuY3Rpb24gKGV4cG9ydHMsIGlvKSB7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIFBhcnNlciBuYW1lc3BhY2UuXHJcblx0ICAgKlxyXG5cdCAgICogQG5hbWVzcGFjZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICB2YXIgcGFyc2VyID0gZXhwb3J0cy5wYXJzZXIgPSB7fTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogUGFja2V0IHR5cGVzLlxyXG5cdCAgICovXHJcblx0XHJcblx0ICB2YXIgcGFja2V0cyA9IHBhcnNlci5wYWNrZXRzID0gW1xyXG5cdCAgICAgICdkaXNjb25uZWN0J1xyXG5cdCAgICAsICdjb25uZWN0J1xyXG5cdCAgICAsICdoZWFydGJlYXQnXHJcblx0ICAgICwgJ21lc3NhZ2UnXHJcblx0ICAgICwgJ2pzb24nXHJcblx0ICAgICwgJ2V2ZW50J1xyXG5cdCAgICAsICdhY2snXHJcblx0ICAgICwgJ2Vycm9yJ1xyXG5cdCAgICAsICdub29wJ1xyXG5cdCAgXTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogRXJyb3JzIHJlYXNvbnMuXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIHZhciByZWFzb25zID0gcGFyc2VyLnJlYXNvbnMgPSBbXHJcblx0ICAgICAgJ3RyYW5zcG9ydCBub3Qgc3VwcG9ydGVkJ1xyXG5cdCAgICAsICdjbGllbnQgbm90IGhhbmRzaGFrZW4nXHJcblx0ICAgICwgJ3VuYXV0aG9yaXplZCdcclxuXHQgIF07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEVycm9ycyBhZHZpY2UuXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIHZhciBhZHZpY2UgPSBwYXJzZXIuYWR2aWNlID0gW1xyXG5cdCAgICAgICdyZWNvbm5lY3QnXHJcblx0ICBdO1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBTaG9ydGN1dHMuXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIHZhciBKU09OID0gaW8uSlNPTlxyXG5cdCAgICAsIGluZGV4T2YgPSBpby51dGlsLmluZGV4T2Y7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEVuY29kZXMgYSBwYWNrZXQuXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIHBhcnNlci5lbmNvZGVQYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XHJcblx0ICAgIHZhciB0eXBlID0gaW5kZXhPZihwYWNrZXRzLCBwYWNrZXQudHlwZSlcclxuXHQgICAgICAsIGlkID0gcGFja2V0LmlkIHx8ICcnXHJcblx0ICAgICAgLCBlbmRwb2ludCA9IHBhY2tldC5lbmRwb2ludCB8fCAnJ1xyXG5cdCAgICAgICwgYWNrID0gcGFja2V0LmFja1xyXG5cdCAgICAgICwgZGF0YSA9IG51bGw7XHJcblx0XHJcblx0ICAgIHN3aXRjaCAocGFja2V0LnR5cGUpIHtcclxuXHQgICAgICBjYXNlICdlcnJvcic6XHJcblx0ICAgICAgICB2YXIgcmVhc29uID0gcGFja2V0LnJlYXNvbiA/IGluZGV4T2YocmVhc29ucywgcGFja2V0LnJlYXNvbikgOiAnJ1xyXG5cdCAgICAgICAgICAsIGFkdiA9IHBhY2tldC5hZHZpY2UgPyBpbmRleE9mKGFkdmljZSwgcGFja2V0LmFkdmljZSkgOiAnJztcclxuXHRcclxuXHQgICAgICAgIGlmIChyZWFzb24gIT09ICcnIHx8IGFkdiAhPT0gJycpXHJcblx0ICAgICAgICAgIGRhdGEgPSByZWFzb24gKyAoYWR2ICE9PSAnJyA/ICgnKycgKyBhZHYpIDogJycpO1xyXG5cdFxyXG5cdCAgICAgICAgYnJlYWs7XHJcblx0XHJcblx0ICAgICAgY2FzZSAnbWVzc2FnZSc6XHJcblx0ICAgICAgICBpZiAocGFja2V0LmRhdGEgIT09ICcnKVxyXG5cdCAgICAgICAgICBkYXRhID0gcGFja2V0LmRhdGE7XHJcblx0ICAgICAgICBicmVhaztcclxuXHRcclxuXHQgICAgICBjYXNlICdldmVudCc6XHJcblx0ICAgICAgICB2YXIgZXYgPSB7IG5hbWU6IHBhY2tldC5uYW1lIH07XHJcblx0XHJcblx0ICAgICAgICBpZiAocGFja2V0LmFyZ3MgJiYgcGFja2V0LmFyZ3MubGVuZ3RoKSB7XHJcblx0ICAgICAgICAgIGV2LmFyZ3MgPSBwYWNrZXQuYXJncztcclxuXHQgICAgICAgIH1cclxuXHRcclxuXHQgICAgICAgIGRhdGEgPSBKU09OLnN0cmluZ2lmeShldik7XHJcblx0ICAgICAgICBicmVhaztcclxuXHRcclxuXHQgICAgICBjYXNlICdqc29uJzpcclxuXHQgICAgICAgIGRhdGEgPSBKU09OLnN0cmluZ2lmeShwYWNrZXQuZGF0YSk7XHJcblx0ICAgICAgICBicmVhaztcclxuXHRcclxuXHQgICAgICBjYXNlICdjb25uZWN0JzpcclxuXHQgICAgICAgIGlmIChwYWNrZXQucXMpXHJcblx0ICAgICAgICAgIGRhdGEgPSBwYWNrZXQucXM7XHJcblx0ICAgICAgICBicmVhaztcclxuXHRcclxuXHQgICAgICBjYXNlICdhY2snOlxyXG5cdCAgICAgICAgZGF0YSA9IHBhY2tldC5hY2tJZFxyXG5cdCAgICAgICAgICArIChwYWNrZXQuYXJncyAmJiBwYWNrZXQuYXJncy5sZW5ndGhcclxuXHQgICAgICAgICAgICAgID8gJysnICsgSlNPTi5zdHJpbmdpZnkocGFja2V0LmFyZ3MpIDogJycpO1xyXG5cdCAgICAgICAgYnJlYWs7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgLy8gY29uc3RydWN0IHBhY2tldCB3aXRoIHJlcXVpcmVkIGZyYWdtZW50c1xyXG5cdCAgICB2YXIgZW5jb2RlZCA9IFtcclxuXHQgICAgICAgIHR5cGVcclxuXHQgICAgICAsIGlkICsgKGFjayA9PSAnZGF0YScgPyAnKycgOiAnJylcclxuXHQgICAgICAsIGVuZHBvaW50XHJcblx0ICAgIF07XHJcblx0XHJcblx0ICAgIC8vIGRhdGEgZnJhZ21lbnQgaXMgb3B0aW9uYWxcclxuXHQgICAgaWYgKGRhdGEgIT09IG51bGwgJiYgZGF0YSAhPT0gdW5kZWZpbmVkKVxyXG5cdCAgICAgIGVuY29kZWQucHVzaChkYXRhKTtcclxuXHRcclxuXHQgICAgcmV0dXJuIGVuY29kZWQuam9pbignOicpO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogRW5jb2RlcyBtdWx0aXBsZSBtZXNzYWdlcyAocGF5bG9hZCkuXHJcblx0ICAgKlxyXG5cdCAgICogQHBhcmFtIHtBcnJheX0gbWVzc2FnZXNcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBwYXJzZXIuZW5jb2RlUGF5bG9hZCA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XHJcblx0ICAgIHZhciBkZWNvZGVkID0gJyc7XHJcblx0XHJcblx0ICAgIGlmIChwYWNrZXRzLmxlbmd0aCA9PSAxKVxyXG5cdCAgICAgIHJldHVybiBwYWNrZXRzWzBdO1xyXG5cdFxyXG5cdCAgICBmb3IgKHZhciBpID0gMCwgbCA9IHBhY2tldHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblx0ICAgICAgdmFyIHBhY2tldCA9IHBhY2tldHNbaV07XHJcblx0ICAgICAgZGVjb2RlZCArPSAnXFx1ZmZmZCcgKyBwYWNrZXQubGVuZ3RoICsgJ1xcdWZmZmQnICsgcGFja2V0c1tpXTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICByZXR1cm4gZGVjb2RlZDtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIERlY29kZXMgYSBwYWNrZXRcclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgdmFyIHJlZ2V4cCA9IC8oW146XSspOihbMC05XSspPyhcXCspPzooW146XSspPzo/KFtcXHNcXFNdKik/LztcclxuXHRcclxuXHQgIHBhcnNlci5kZWNvZGVQYWNrZXQgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG5cdCAgICB2YXIgcGllY2VzID0gZGF0YS5tYXRjaChyZWdleHApO1xyXG5cdFxyXG5cdCAgICBpZiAoIXBpZWNlcykgcmV0dXJuIHt9O1xyXG5cdFxyXG5cdCAgICB2YXIgaWQgPSBwaWVjZXNbMl0gfHwgJydcclxuXHQgICAgICAsIGRhdGEgPSBwaWVjZXNbNV0gfHwgJydcclxuXHQgICAgICAsIHBhY2tldCA9IHtcclxuXHQgICAgICAgICAgICB0eXBlOiBwYWNrZXRzW3BpZWNlc1sxXV1cclxuXHQgICAgICAgICAgLCBlbmRwb2ludDogcGllY2VzWzRdIHx8ICcnXHJcblx0ICAgICAgICB9O1xyXG5cdFxyXG5cdCAgICAvLyB3aGV0aGVyIHdlIG5lZWQgdG8gYWNrbm93bGVkZ2UgdGhlIHBhY2tldFxyXG5cdCAgICBpZiAoaWQpIHtcclxuXHQgICAgICBwYWNrZXQuaWQgPSBpZDtcclxuXHQgICAgICBpZiAocGllY2VzWzNdKVxyXG5cdCAgICAgICAgcGFja2V0LmFjayA9ICdkYXRhJztcclxuXHQgICAgICBlbHNlXHJcblx0ICAgICAgICBwYWNrZXQuYWNrID0gdHJ1ZTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICAvLyBoYW5kbGUgZGlmZmVyZW50IHBhY2tldCB0eXBlc1xyXG5cdCAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XHJcblx0ICAgICAgY2FzZSAnZXJyb3InOlxyXG5cdCAgICAgICAgdmFyIHBpZWNlcyA9IGRhdGEuc3BsaXQoJysnKTtcclxuXHQgICAgICAgIHBhY2tldC5yZWFzb24gPSByZWFzb25zW3BpZWNlc1swXV0gfHwgJyc7XHJcblx0ICAgICAgICBwYWNrZXQuYWR2aWNlID0gYWR2aWNlW3BpZWNlc1sxXV0gfHwgJyc7XHJcblx0ICAgICAgICBicmVhaztcclxuXHRcclxuXHQgICAgICBjYXNlICdtZXNzYWdlJzpcclxuXHQgICAgICAgIHBhY2tldC5kYXRhID0gZGF0YSB8fCAnJztcclxuXHQgICAgICAgIGJyZWFrO1xyXG5cdFxyXG5cdCAgICAgIGNhc2UgJ2V2ZW50JzpcclxuXHQgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgIHZhciBvcHRzID0gSlNPTi5wYXJzZShkYXRhKTtcclxuXHQgICAgICAgICAgcGFja2V0Lm5hbWUgPSBvcHRzLm5hbWU7XHJcblx0ICAgICAgICAgIHBhY2tldC5hcmdzID0gb3B0cy5hcmdzO1xyXG5cdCAgICAgICAgfSBjYXRjaCAoZSkgeyB9XHJcblx0XHJcblx0ICAgICAgICBwYWNrZXQuYXJncyA9IHBhY2tldC5hcmdzIHx8IFtdO1xyXG5cdCAgICAgICAgYnJlYWs7XHJcblx0XHJcblx0ICAgICAgY2FzZSAnanNvbic6XHJcblx0ICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICBwYWNrZXQuZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcblx0ICAgICAgICB9IGNhdGNoIChlKSB7IH1cclxuXHQgICAgICAgIGJyZWFrO1xyXG5cdFxyXG5cdCAgICAgIGNhc2UgJ2Nvbm5lY3QnOlxyXG5cdCAgICAgICAgcGFja2V0LnFzID0gZGF0YSB8fCAnJztcclxuXHQgICAgICAgIGJyZWFrO1xyXG5cdFxyXG5cdCAgICAgIGNhc2UgJ2Fjayc6XHJcblx0ICAgICAgICB2YXIgcGllY2VzID0gZGF0YS5tYXRjaCgvXihbMC05XSspKFxcKyk/KC4qKS8pO1xyXG5cdCAgICAgICAgaWYgKHBpZWNlcykge1xyXG5cdCAgICAgICAgICBwYWNrZXQuYWNrSWQgPSBwaWVjZXNbMV07XHJcblx0ICAgICAgICAgIHBhY2tldC5hcmdzID0gW107XHJcblx0XHJcblx0ICAgICAgICAgIGlmIChwaWVjZXNbM10pIHtcclxuXHQgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgcGFja2V0LmFyZ3MgPSBwaWVjZXNbM10gPyBKU09OLnBhcnNlKHBpZWNlc1szXSkgOiBbXTtcclxuXHQgICAgICAgICAgICB9IGNhdGNoIChlKSB7IH1cclxuXHQgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgYnJlYWs7XHJcblx0XHJcblx0ICAgICAgY2FzZSAnZGlzY29ubmVjdCc6XHJcblx0ICAgICAgY2FzZSAnaGVhcnRiZWF0JzpcclxuXHQgICAgICAgIGJyZWFrO1xyXG5cdCAgICB9O1xyXG5cdFxyXG5cdCAgICByZXR1cm4gcGFja2V0O1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogRGVjb2RlcyBkYXRhIHBheWxvYWQuIERldGVjdHMgbXVsdGlwbGUgbWVzc2FnZXNcclxuXHQgICAqXHJcblx0ICAgKiBAcmV0dXJuIHtBcnJheX0gbWVzc2FnZXNcclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIHBhcnNlci5kZWNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuXHQgICAgLy8gSUUgZG9lc24ndCBsaWtlIGRhdGFbaV0gZm9yIHVuaWNvZGUgY2hhcnMsIGNoYXJBdCB3b3JrcyBmaW5lXHJcblx0ICAgIGlmIChkYXRhLmNoYXJBdCgwKSA9PSAnXFx1ZmZmZCcpIHtcclxuXHQgICAgICB2YXIgcmV0ID0gW107XHJcblx0XHJcblx0ICAgICAgZm9yICh2YXIgaSA9IDEsIGxlbmd0aCA9ICcnOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgaWYgKGRhdGEuY2hhckF0KGkpID09ICdcXHVmZmZkJykge1xyXG5cdCAgICAgICAgICByZXQucHVzaChwYXJzZXIuZGVjb2RlUGFja2V0KGRhdGEuc3Vic3RyKGkgKyAxKS5zdWJzdHIoMCwgbGVuZ3RoKSkpO1xyXG5cdCAgICAgICAgICBpICs9IE51bWJlcihsZW5ndGgpICsgMTtcclxuXHQgICAgICAgICAgbGVuZ3RoID0gJyc7XHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICBsZW5ndGggKz0gZGF0YS5jaGFyQXQoaSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgfVxyXG5cdFxyXG5cdCAgICAgIHJldHVybiByZXQ7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgcmV0dXJuIFtwYXJzZXIuZGVjb2RlUGFja2V0KGRhdGEpXTtcclxuXHQgICAgfVxyXG5cdCAgfTtcclxuXHRcclxuXHR9KShcclxuXHQgICAgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGlvID8gaW8gOiBtb2R1bGUuZXhwb3J0c1xyXG5cdCAgLCAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5wYXJlbnQuZXhwb3J0c1xyXG5cdCk7XHJcblx0LyoqXHJcblx0ICogc29ja2V0LmlvXHJcblx0ICogQ29weXJpZ2h0KGMpIDIwMTEgTGVhcm5Cb29zdCA8ZGV2QGxlYXJuYm9vc3QuY29tPlxyXG5cdCAqIE1JVCBMaWNlbnNlZFxyXG5cdCAqL1xyXG5cdFxyXG5cdChmdW5jdGlvbiAoZXhwb3J0cywgaW8pIHtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogRXhwb3NlIGNvbnN0cnVjdG9yLlxyXG5cdCAgICovXHJcblx0XHJcblx0ICBleHBvcnRzLlRyYW5zcG9ydCA9IFRyYW5zcG9ydDtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogVGhpcyBpcyB0aGUgdHJhbnNwb3J0IHRlbXBsYXRlIGZvciBhbGwgc3VwcG9ydGVkIHRyYW5zcG9ydCBtZXRob2RzLlxyXG5cdCAgICpcclxuXHQgICAqIEBjb25zdHJ1Y3RvclxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgZnVuY3Rpb24gVHJhbnNwb3J0IChzb2NrZXQsIHNlc3NpZCkge1xyXG5cdCAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcclxuXHQgICAgdGhpcy5zZXNzaWQgPSBzZXNzaWQ7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBBcHBseSBFdmVudEVtaXR0ZXIgbWl4aW4uXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIGlvLnV0aWwubWl4aW4oVHJhbnNwb3J0LCBpby5FdmVudEVtaXR0ZXIpO1xyXG5cdFxyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBJbmRpY2F0ZXMgd2hldGhlciBoZWFydGJlYXRzIGlzIGVuYWJsZWQgZm9yIHRoaXMgdHJhbnNwb3J0XHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFRyYW5zcG9ydC5wcm90b3R5cGUuaGVhcnRiZWF0cyA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgcmV0dXJuIHRydWU7XHJcblx0ICB9XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEhhbmRsZXMgdGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlci4gV2hlbiBhIG5ldyByZXNwb25zZSBpcyByZWNlaXZlZFxyXG5cdCAgICogaXQgd2lsbCBhdXRvbWF0aWNhbGx5IHVwZGF0ZSB0aGUgdGltZW91dCwgZGVjb2RlIHRoZSBtZXNzYWdlIGFuZFxyXG5cdCAgICogZm9yd2FyZHMgdGhlIHJlc3BvbnNlIHRvIHRoZSBvbk1lc3NhZ2UgZnVuY3Rpb24gZm9yIGZ1cnRoZXIgcHJvY2Vzc2luZy5cclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YSBSZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIuXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG5cdCAgICB0aGlzLmNsZWFyQ2xvc2VUaW1lb3V0KCk7XHJcblx0ICAgIFxyXG5cdCAgICAvLyBJZiB0aGUgY29ubmVjdGlvbiBpbiBjdXJyZW50bHkgb3BlbiAob3IgaW4gYSByZW9wZW5pbmcgc3RhdGUpIHJlc2V0IHRoZSBjbG9zZSBcclxuXHQgICAgLy8gdGltZW91dCBzaW5jZSB3ZSBoYXZlIGp1c3QgcmVjZWl2ZWQgZGF0YS4gVGhpcyBjaGVjayBpcyBuZWNlc3Nhcnkgc29cclxuXHQgICAgLy8gdGhhdCB3ZSBkb24ndCByZXNldCB0aGUgdGltZW91dCBvbiBhbiBleHBsaWNpdGx5IGRpc2Nvbm5lY3RlZCBjb25uZWN0aW9uLlxyXG5cdCAgICBpZiAodGhpcy5zb2NrZXQuY29ubmVjdGVkIHx8IHRoaXMuc29ja2V0LmNvbm5lY3RpbmcgfHwgdGhpcy5zb2NrZXQucmVjb25uZWN0aW5nKSB7XHJcblx0ICAgICAgdGhpcy5zZXRDbG9zZVRpbWVvdXQoKTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICBpZiAoZGF0YSAhPT0gJycpIHtcclxuXHQgICAgICAvLyB0b2RvOiB3ZSBzaG91bGQgb25seSBkbyBkZWNvZGVQYXlsb2FkIGZvciB4aHIgdHJhbnNwb3J0c1xyXG5cdCAgICAgIHZhciBtc2dzID0gaW8ucGFyc2VyLmRlY29kZVBheWxvYWQoZGF0YSk7XHJcblx0XHJcblx0ICAgICAgaWYgKG1zZ3MgJiYgbXNncy5sZW5ndGgpIHtcclxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbXNncy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHQgICAgICAgICAgdGhpcy5vblBhY2tldChtc2dzW2ldKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgcmV0dXJuIHRoaXM7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBIYW5kbGVzIHBhY2tldHMuXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFRyYW5zcG9ydC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XHJcblx0ICAgIHRoaXMuc29ja2V0LnNldEhlYXJ0YmVhdFRpbWVvdXQoKTtcclxuXHRcclxuXHQgICAgaWYgKHBhY2tldC50eXBlID09ICdoZWFydGJlYXQnKSB7XHJcblx0ICAgICAgcmV0dXJuIHRoaXMub25IZWFydGJlYXQoKTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICBpZiAocGFja2V0LnR5cGUgPT0gJ2Nvbm5lY3QnICYmIHBhY2tldC5lbmRwb2ludCA9PSAnJykge1xyXG5cdCAgICAgIHRoaXMub25Db25uZWN0KCk7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgaWYgKHBhY2tldC50eXBlID09ICdlcnJvcicgJiYgcGFja2V0LmFkdmljZSA9PSAncmVjb25uZWN0Jykge1xyXG5cdCAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgdGhpcy5zb2NrZXQub25QYWNrZXQocGFja2V0KTtcclxuXHRcclxuXHQgICAgcmV0dXJuIHRoaXM7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBTZXRzIGNsb3NlIHRpbWVvdXRcclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdCAgXHJcblx0ICBUcmFuc3BvcnQucHJvdG90eXBlLnNldENsb3NlVGltZW91dCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgaWYgKCF0aGlzLmNsb3NlVGltZW91dCkge1xyXG5cdCAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHRcclxuXHQgICAgICB0aGlzLmNsb3NlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgc2VsZi5vbkRpc2Nvbm5lY3QoKTtcclxuXHQgICAgICB9LCB0aGlzLnNvY2tldC5jbG9zZVRpbWVvdXQpO1xyXG5cdCAgICB9XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBDYWxsZWQgd2hlbiB0cmFuc3BvcnQgZGlzY29ubmVjdHMuXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFRyYW5zcG9ydC5wcm90b3R5cGUub25EaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICBpZiAodGhpcy5pc09wZW4pIHRoaXMuY2xvc2UoKTtcclxuXHQgICAgdGhpcy5jbGVhclRpbWVvdXRzKCk7XHJcblx0ICAgIHRoaXMuc29ja2V0Lm9uRGlzY29ubmVjdCgpO1xyXG5cdCAgICByZXR1cm4gdGhpcztcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIENhbGxlZCB3aGVuIHRyYW5zcG9ydCBjb25uZWN0c1xyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBUcmFuc3BvcnQucHJvdG90eXBlLm9uQ29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgdGhpcy5zb2NrZXQub25Db25uZWN0KCk7XHJcblx0ICAgIHJldHVybiB0aGlzO1xyXG5cdCAgfVxyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBDbGVhcnMgY2xvc2UgdGltZW91dFxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBUcmFuc3BvcnQucHJvdG90eXBlLmNsZWFyQ2xvc2VUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICBpZiAodGhpcy5jbG9zZVRpbWVvdXQpIHtcclxuXHQgICAgICBjbGVhclRpbWVvdXQodGhpcy5jbG9zZVRpbWVvdXQpO1xyXG5cdCAgICAgIHRoaXMuY2xvc2VUaW1lb3V0ID0gbnVsbDtcclxuXHQgICAgfVxyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQ2xlYXIgdGltZW91dHNcclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgVHJhbnNwb3J0LnByb3RvdHlwZS5jbGVhclRpbWVvdXRzID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICB0aGlzLmNsZWFyQ2xvc2VUaW1lb3V0KCk7XHJcblx0XHJcblx0ICAgIGlmICh0aGlzLnJlb3BlblRpbWVvdXQpIHtcclxuXHQgICAgICBjbGVhclRpbWVvdXQodGhpcy5yZW9wZW5UaW1lb3V0KTtcclxuXHQgICAgfVxyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogU2VuZHMgYSBwYWNrZXRcclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IG9iamVjdC5cclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBUcmFuc3BvcnQucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcclxuXHQgICAgdGhpcy5zZW5kKGlvLnBhcnNlci5lbmNvZGVQYWNrZXQocGFja2V0KSk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBTZW5kIHRoZSByZWNlaXZlZCBoZWFydGJlYXQgbWVzc2FnZSBiYWNrIHRvIHNlcnZlci4gU28gdGhlIHNlcnZlclxyXG5cdCAgICoga25vd3Mgd2UgYXJlIHN0aWxsIGNvbm5lY3RlZC5cclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0ge1N0cmluZ30gaGVhcnRiZWF0IEhlYXJ0YmVhdCByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIuXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkhlYXJ0YmVhdCA9IGZ1bmN0aW9uIChoZWFydGJlYXQpIHtcclxuXHQgICAgdGhpcy5wYWNrZXQoeyB0eXBlOiAnaGVhcnRiZWF0JyB9KTtcclxuXHQgIH07XHJcblx0IFxyXG5cdCAgLyoqXHJcblx0ICAgKiBDYWxsZWQgd2hlbiB0aGUgdHJhbnNwb3J0IG9wZW5zLlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBUcmFuc3BvcnQucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgdGhpcy5pc09wZW4gPSB0cnVlO1xyXG5cdCAgICB0aGlzLmNsZWFyQ2xvc2VUaW1lb3V0KCk7XHJcblx0ICAgIHRoaXMuc29ja2V0Lm9uT3BlbigpO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogTm90aWZpZXMgdGhlIGJhc2Ugd2hlbiB0aGUgY29ubmVjdGlvbiB3aXRoIHRoZSBTb2NrZXQuSU8gc2VydmVyXHJcblx0ICAgKiBoYXMgYmVlbiBkaXNjb25uZWN0ZWQuXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFRyYW5zcG9ydC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cdFxyXG5cdCAgICAvKiBGSVhNRTogcmVvcGVuIGRlbGF5IGNhdXNpbmcgYSBpbmZpbml0IGxvb3BcclxuXHQgICAgdGhpcy5yZW9wZW5UaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgc2VsZi5vcGVuKCk7XHJcblx0ICAgIH0sIHRoaXMuc29ja2V0Lm9wdGlvbnNbJ3Jlb3BlbiBkZWxheSddKTsqL1xyXG5cdFxyXG5cdCAgICB0aGlzLmlzT3BlbiA9IGZhbHNlO1xyXG5cdCAgICB0aGlzLnNvY2tldC5vbkNsb3NlKCk7XHJcblx0ICAgIHRoaXMub25EaXNjb25uZWN0KCk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBHZW5lcmF0ZXMgYSBjb25uZWN0aW9uIHVybCBiYXNlZCBvbiB0aGUgU29ja2V0LklPIFVSTCBQcm90b2NvbC5cclxuXHQgICAqIFNlZSA8aHR0cHM6Ly9naXRodWIuY29tL2xlYXJuYm9vc3Qvc29ja2V0LmlvLW5vZGUvPiBmb3IgbW9yZSBkZXRhaWxzLlxyXG5cdCAgICpcclxuXHQgICAqIEByZXR1cm5zIHtTdHJpbmd9IENvbm5lY3Rpb24gdXJsXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgVHJhbnNwb3J0LnByb3RvdHlwZS5wcmVwYXJlVXJsID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICB2YXIgb3B0aW9ucyA9IHRoaXMuc29ja2V0Lm9wdGlvbnM7XHJcblx0XHJcblx0ICAgIHJldHVybiB0aGlzLnNjaGVtZSgpICsgJzovLydcclxuXHQgICAgICArIG9wdGlvbnMuaG9zdCArICc6JyArIG9wdGlvbnMucG9ydCArICcvJ1xyXG5cdCAgICAgICsgb3B0aW9ucy5yZXNvdXJjZSArICcvJyArIGlvLnByb3RvY29sXHJcblx0ICAgICAgKyAnLycgKyB0aGlzLm5hbWUgKyAnLycgKyB0aGlzLnNlc3NpZDtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIENoZWNrcyBpZiB0aGUgdHJhbnNwb3J0IGlzIHJlYWR5IHRvIHN0YXJ0IGEgY29ubmVjdGlvbi5cclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0ge1NvY2tldH0gc29ja2V0IFRoZSBzb2NrZXQgaW5zdGFuY2UgdGhhdCBuZWVkcyBhIHRyYW5zcG9ydFxyXG5cdCAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgVHJhbnNwb3J0LnByb3RvdHlwZS5yZWFkeSA9IGZ1bmN0aW9uIChzb2NrZXQsIGZuKSB7XHJcblx0ICAgIGZuLmNhbGwodGhpcyk7XHJcblx0ICB9O1xyXG5cdH0pKFxyXG5cdCAgICAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5leHBvcnRzXHJcblx0ICAsICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLnBhcmVudC5leHBvcnRzXHJcblx0KTtcclxuXHQvKipcclxuXHQgKiBzb2NrZXQuaW9cclxuXHQgKiBDb3B5cmlnaHQoYykgMjAxMSBMZWFybkJvb3N0IDxkZXZAbGVhcm5ib29zdC5jb20+XHJcblx0ICogTUlUIExpY2Vuc2VkXHJcblx0ICovXHJcblx0XHJcblx0KGZ1bmN0aW9uIChleHBvcnRzLCBpbywgZ2xvYmFsKSB7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEV4cG9zZSBjb25zdHJ1Y3Rvci5cclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgZXhwb3J0cy5Tb2NrZXQgPSBTb2NrZXQ7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIENyZWF0ZSBhIG5ldyBgU29ja2V0LklPIGNsaWVudGAgd2hpY2ggY2FuIGVzdGFibGlzaCBhIHBlcnNpc3RlbnRcclxuXHQgICAqIGNvbm5lY3Rpb24gd2l0aCBhIFNvY2tldC5JTyBlbmFibGVkIHNlcnZlci5cclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICBmdW5jdGlvbiBTb2NrZXQgKG9wdGlvbnMpIHtcclxuXHQgICAgdGhpcy5vcHRpb25zID0ge1xyXG5cdCAgICAgICAgcG9ydDogODBcclxuXHQgICAgICAsIHNlY3VyZTogZmFsc2VcclxuXHQgICAgICAsIGRvY3VtZW50OiAnZG9jdW1lbnQnIGluIGdsb2JhbCA/IGRvY3VtZW50IDogZmFsc2VcclxuXHQgICAgICAsIHJlc291cmNlOiAnc29ja2V0LmlvJ1xyXG5cdCAgICAgICwgdHJhbnNwb3J0czogaW8udHJhbnNwb3J0c1xyXG5cdCAgICAgICwgJ2Nvbm5lY3QgdGltZW91dCc6IDEwMDAwXHJcblx0ICAgICAgLCAndHJ5IG11bHRpcGxlIHRyYW5zcG9ydHMnOiB0cnVlXHJcblx0ICAgICAgLCAncmVjb25uZWN0JzogdHJ1ZVxyXG5cdCAgICAgICwgJ3JlY29ubmVjdGlvbiBkZWxheSc6IDUwMFxyXG5cdCAgICAgICwgJ3JlY29ubmVjdGlvbiBsaW1pdCc6IEluZmluaXR5XHJcblx0ICAgICAgLCAncmVvcGVuIGRlbGF5JzogMzAwMFxyXG5cdCAgICAgICwgJ21heCByZWNvbm5lY3Rpb24gYXR0ZW1wdHMnOiAxMFxyXG5cdCAgICAgICwgJ3N5bmMgZGlzY29ubmVjdCBvbiB1bmxvYWQnOiBmYWxzZVxyXG5cdCAgICAgICwgJ2F1dG8gY29ubmVjdCc6IHRydWVcclxuXHQgICAgICAsICdmbGFzaCBwb2xpY3kgcG9ydCc6IDEwODQzXHJcblx0ICAgICAgLCAnbWFudWFsRmx1c2gnOiBmYWxzZVxyXG5cdCAgICB9O1xyXG5cdFxyXG5cdCAgICBpby51dGlsLm1lcmdlKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XHJcblx0XHJcblx0ICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XHJcblx0ICAgIHRoaXMub3BlbiA9IGZhbHNlO1xyXG5cdCAgICB0aGlzLmNvbm5lY3RpbmcgPSBmYWxzZTtcclxuXHQgICAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcclxuXHQgICAgdGhpcy5uYW1lc3BhY2VzID0ge307XHJcblx0ICAgIHRoaXMuYnVmZmVyID0gW107XHJcblx0ICAgIHRoaXMuZG9CdWZmZXIgPSBmYWxzZTtcclxuXHRcclxuXHQgICAgaWYgKHRoaXMub3B0aW9uc1snc3luYyBkaXNjb25uZWN0IG9uIHVubG9hZCddICYmXHJcblx0ICAgICAgICAoIXRoaXMuaXNYRG9tYWluKCkgfHwgaW8udXRpbC51YS5oYXNDT1JTKSkge1xyXG5cdCAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHQgICAgICBpby51dGlsLm9uKGdsb2JhbCwgJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHNlbGYuZGlzY29ubmVjdFN5bmMoKTtcclxuXHQgICAgICB9LCBmYWxzZSk7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgaWYgKHRoaXMub3B0aW9uc1snYXV0byBjb25uZWN0J10pIHtcclxuXHQgICAgICB0aGlzLmNvbm5lY3QoKTtcclxuXHQgICAgfVxyXG5cdH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEFwcGx5IEV2ZW50RW1pdHRlciBtaXhpbi5cclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgaW8udXRpbC5taXhpbihTb2NrZXQsIGlvLkV2ZW50RW1pdHRlcik7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIFJldHVybnMgYSBuYW1lc3BhY2UgbGlzdGVuZXIvZW1pdHRlciBmb3IgdGhpcyBzb2NrZXRcclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICBTb2NrZXQucHJvdG90eXBlLm9mID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuXHQgICAgaWYgKCF0aGlzLm5hbWVzcGFjZXNbbmFtZV0pIHtcclxuXHQgICAgICB0aGlzLm5hbWVzcGFjZXNbbmFtZV0gPSBuZXcgaW8uU29ja2V0TmFtZXNwYWNlKHRoaXMsIG5hbWUpO1xyXG5cdFxyXG5cdCAgICAgIGlmIChuYW1lICE9PSAnJykge1xyXG5cdCAgICAgICAgdGhpcy5uYW1lc3BhY2VzW25hbWVdLnBhY2tldCh7IHR5cGU6ICdjb25uZWN0JyB9KTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgcmV0dXJuIHRoaXMubmFtZXNwYWNlc1tuYW1lXTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEVtaXRzIHRoZSBnaXZlbiBldmVudCB0byB0aGUgU29ja2V0IGFuZCBhbGwgbmFtZXNwYWNlc1xyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBTb2NrZXQucHJvdG90eXBlLnB1Ymxpc2ggPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdFxyXG5cdCAgICB2YXIgbnNwO1xyXG5cdFxyXG5cdCAgICBmb3IgKHZhciBpIGluIHRoaXMubmFtZXNwYWNlcykge1xyXG5cdCAgICAgIGlmICh0aGlzLm5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcclxuXHQgICAgICAgIG5zcCA9IHRoaXMub2YoaSk7XHJcblx0ICAgICAgICBuc3AuJGVtaXQuYXBwbHkobnNwLCBhcmd1bWVudHMpO1xyXG5cdCAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogUGVyZm9ybXMgdGhlIGhhbmRzaGFrZVxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBmdW5jdGlvbiBlbXB0eSAoKSB7IH07XHJcblx0XHJcblx0ICBTb2NrZXQucHJvdG90eXBlLmhhbmRzaGFrZSA9IGZ1bmN0aW9uIChmbikge1xyXG5cdCAgICB2YXIgc2VsZiA9IHRoaXNcclxuXHQgICAgICAsIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XHJcblx0XHJcblx0ICAgIGZ1bmN0aW9uIGNvbXBsZXRlIChkYXRhKSB7XHJcblx0ICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBFcnJvcikge1xyXG5cdCAgICAgICAgc2VsZi5jb25uZWN0aW5nID0gZmFsc2U7XHJcblx0ICAgICAgICBzZWxmLm9uRXJyb3IoZGF0YS5tZXNzYWdlKTtcclxuXHQgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgZm4uYXBwbHkobnVsbCwgZGF0YS5zcGxpdCgnOicpKTtcclxuXHQgICAgICB9XHJcblx0ICAgIH07XHJcblx0XHJcblx0ICAgIHZhciB1cmwgPSBbXHJcblx0ICAgICAgICAgICdodHRwJyArIChvcHRpb25zLnNlY3VyZSA/ICdzJyA6ICcnKSArICc6LydcclxuXHQgICAgICAgICwgb3B0aW9ucy5ob3N0ICsgJzonICsgb3B0aW9ucy5wb3J0XHJcblx0ICAgICAgICAsIG9wdGlvbnMucmVzb3VyY2VcclxuXHQgICAgICAgICwgaW8ucHJvdG9jb2xcclxuXHQgICAgICAgICwgaW8udXRpbC5xdWVyeSh0aGlzLm9wdGlvbnMucXVlcnksICd0PScgKyArbmV3IERhdGUpXHJcblx0ICAgICAgXS5qb2luKCcvJyk7XHJcblx0XHJcblx0ICAgIGlmICh0aGlzLmlzWERvbWFpbigpICYmICFpby51dGlsLnVhLmhhc0NPUlMpIHtcclxuXHQgICAgICB2YXIgaW5zZXJ0QXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF1cclxuXHQgICAgICAgICwgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcblx0XHJcblx0ICAgICAgc2NyaXB0LnNyYyA9IHVybCArICcmanNvbnA9JyArIGlvLmoubGVuZ3RoO1xyXG5cdCAgICAgIGluc2VydEF0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNjcmlwdCwgaW5zZXJ0QXQpO1xyXG5cdFxyXG5cdCAgICAgIGlvLmoucHVzaChmdW5jdGlvbiAoZGF0YSkge1xyXG5cdCAgICAgICAgY29tcGxldGUoZGF0YSk7XHJcblx0ICAgICAgICBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xyXG5cdCAgICAgIH0pO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHZhciB4aHIgPSBpby51dGlsLnJlcXVlc3QoKTtcclxuXHRcclxuXHQgICAgICB4aHIub3BlbignR0VUJywgdXJsLCB0cnVlKTtcclxuXHQgICAgICBpZiAodGhpcy5pc1hEb21haW4oKSkge1xyXG5cdCAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XHJcblx0ICAgICAgfVxyXG5cdCAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gNCkge1xyXG5cdCAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7XHJcblx0XHJcblx0ICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09IDIwMCkge1xyXG5cdCAgICAgICAgICAgIGNvbXBsZXRlKHhoci5yZXNwb25zZVRleHQpO1xyXG5cdCAgICAgICAgICB9IGVsc2UgaWYgKHhoci5zdGF0dXMgPT0gNDAzKSB7XHJcblx0ICAgICAgICAgICAgc2VsZi5vbkVycm9yKHhoci5yZXNwb25zZVRleHQpO1xyXG5cdCAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHNlbGYuY29ubmVjdGluZyA9IGZhbHNlOyAgICAgICAgICAgIFxyXG5cdCAgICAgICAgICAgICFzZWxmLnJlY29ubmVjdGluZyAmJiBzZWxmLm9uRXJyb3IoeGhyLnJlc3BvbnNlVGV4dCk7XHJcblx0ICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9O1xyXG5cdCAgICAgIHhoci5zZW5kKG51bGwpO1xyXG5cdCAgICB9XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBGaW5kIGFuIGF2YWlsYWJsZSB0cmFuc3BvcnQgYmFzZWQgb24gdGhlIG9wdGlvbnMgc3VwcGxpZWQgaW4gdGhlIGNvbnN0cnVjdG9yLlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBTb2NrZXQucHJvdG90eXBlLmdldFRyYW5zcG9ydCA9IGZ1bmN0aW9uIChvdmVycmlkZSkge1xyXG5cdCAgICB2YXIgdHJhbnNwb3J0cyA9IG92ZXJyaWRlIHx8IHRoaXMudHJhbnNwb3J0cywgbWF0Y2g7XHJcblx0XHJcblx0ICAgIGZvciAodmFyIGkgPSAwLCB0cmFuc3BvcnQ7IHRyYW5zcG9ydCA9IHRyYW5zcG9ydHNbaV07IGkrKykge1xyXG5cdCAgICAgIGlmIChpby5UcmFuc3BvcnRbdHJhbnNwb3J0XVxyXG5cdCAgICAgICAgJiYgaW8uVHJhbnNwb3J0W3RyYW5zcG9ydF0uY2hlY2sodGhpcylcclxuXHQgICAgICAgICYmICghdGhpcy5pc1hEb21haW4oKSB8fCBpby5UcmFuc3BvcnRbdHJhbnNwb3J0XS54ZG9tYWluQ2hlY2sodGhpcykpKSB7XHJcblx0ICAgICAgICByZXR1cm4gbmV3IGlvLlRyYW5zcG9ydFt0cmFuc3BvcnRdKHRoaXMsIHRoaXMuc2Vzc2lvbmlkKTtcclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgcmV0dXJuIG51bGw7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBDb25uZWN0cyB0byB0aGUgc2VydmVyLlxyXG5cdCAgICpcclxuXHQgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtmbl0gQ2FsbGJhY2suXHJcblx0ICAgKiBAcmV0dXJucyB7aW8uU29ja2V0fVxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgU29ja2V0LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKGZuKSB7XHJcblx0ICAgIGlmICh0aGlzLmNvbm5lY3RpbmcpIHtcclxuXHQgICAgICByZXR1cm4gdGhpcztcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblx0ICAgIHNlbGYuY29ubmVjdGluZyA9IHRydWU7XHJcblx0ICAgIFxyXG5cdCAgICB0aGlzLmhhbmRzaGFrZShmdW5jdGlvbiAoc2lkLCBoZWFydGJlYXQsIGNsb3NlLCB0cmFuc3BvcnRzKSB7XHJcblx0ICAgICAgc2VsZi5zZXNzaW9uaWQgPSBzaWQ7XHJcblx0ICAgICAgc2VsZi5jbG9zZVRpbWVvdXQgPSBjbG9zZSAqIDEwMDA7XHJcblx0ICAgICAgc2VsZi5oZWFydGJlYXRUaW1lb3V0ID0gaGVhcnRiZWF0ICogMTAwMDtcclxuXHQgICAgICBpZighc2VsZi50cmFuc3BvcnRzKVxyXG5cdCAgICAgICAgICBzZWxmLnRyYW5zcG9ydHMgPSBzZWxmLm9yaWdUcmFuc3BvcnRzID0gKHRyYW5zcG9ydHMgPyBpby51dGlsLmludGVyc2VjdChcclxuXHQgICAgICAgICAgICAgIHRyYW5zcG9ydHMuc3BsaXQoJywnKVxyXG5cdCAgICAgICAgICAgICwgc2VsZi5vcHRpb25zLnRyYW5zcG9ydHNcclxuXHQgICAgICAgICAgKSA6IHNlbGYub3B0aW9ucy50cmFuc3BvcnRzKTtcclxuXHRcclxuXHQgICAgICBzZWxmLnNldEhlYXJ0YmVhdFRpbWVvdXQoKTtcclxuXHRcclxuXHQgICAgICBmdW5jdGlvbiBjb25uZWN0ICh0cmFuc3BvcnRzKXtcclxuXHQgICAgICAgIGlmIChzZWxmLnRyYW5zcG9ydCkgc2VsZi50cmFuc3BvcnQuY2xlYXJUaW1lb3V0cygpO1xyXG5cdFxyXG5cdCAgICAgICAgc2VsZi50cmFuc3BvcnQgPSBzZWxmLmdldFRyYW5zcG9ydCh0cmFuc3BvcnRzKTtcclxuXHQgICAgICAgIGlmICghc2VsZi50cmFuc3BvcnQpIHJldHVybiBzZWxmLnB1Ymxpc2goJ2Nvbm5lY3RfZmFpbGVkJyk7XHJcblx0XHJcblx0ICAgICAgICAvLyBvbmNlIHRoZSB0cmFuc3BvcnQgaXMgcmVhZHlcclxuXHQgICAgICAgIHNlbGYudHJhbnNwb3J0LnJlYWR5KHNlbGYsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgc2VsZi5jb25uZWN0aW5nID0gdHJ1ZTtcclxuXHQgICAgICAgICAgc2VsZi5wdWJsaXNoKCdjb25uZWN0aW5nJywgc2VsZi50cmFuc3BvcnQubmFtZSk7XHJcblx0ICAgICAgICAgIHNlbGYudHJhbnNwb3J0Lm9wZW4oKTtcclxuXHRcclxuXHQgICAgICAgICAgaWYgKHNlbGYub3B0aW9uc1snY29ubmVjdCB0aW1lb3V0J10pIHtcclxuXHQgICAgICAgICAgICBzZWxmLmNvbm5lY3RUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgIGlmICghc2VsZi5jb25uZWN0ZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgc2VsZi5jb25uZWN0aW5nID0gZmFsc2U7XHJcblx0XHJcblx0ICAgICAgICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnNbJ3RyeSBtdWx0aXBsZSB0cmFuc3BvcnRzJ10pIHtcclxuXHQgICAgICAgICAgICAgICAgICB2YXIgcmVtYWluaW5nID0gc2VsZi50cmFuc3BvcnRzO1xyXG5cdFxyXG5cdCAgICAgICAgICAgICAgICAgIHdoaWxlIChyZW1haW5pbmcubGVuZ3RoID4gMCAmJiByZW1haW5pbmcuc3BsaWNlKDAsMSlbMF0gIT1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50cmFuc3BvcnQubmFtZSkge31cclxuXHRcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChyZW1haW5pbmcubGVuZ3RoKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdChyZW1haW5pbmcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wdWJsaXNoKCdjb25uZWN0X2ZhaWxlZCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSwgc2VsZi5vcHRpb25zWydjb25uZWN0IHRpbWVvdXQnXSk7XHJcblx0ICAgICAgICAgIH1cclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgIH1cclxuXHRcclxuXHQgICAgICBjb25uZWN0KHNlbGYudHJhbnNwb3J0cyk7XHJcblx0XHJcblx0ICAgICAgc2VsZi5vbmNlKCdjb25uZWN0JywgZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICBjbGVhclRpbWVvdXQoc2VsZi5jb25uZWN0VGltZW91dFRpbWVyKTtcclxuXHRcclxuXHQgICAgICAgIGZuICYmIHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nICYmIGZuKCk7XHJcblx0ICAgICAgfSk7XHJcblx0ICAgIH0pO1xyXG5cdFxyXG5cdCAgICByZXR1cm4gdGhpcztcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIENsZWFycyBhbmQgc2V0cyBhIG5ldyBoZWFydGJlYXQgdGltZW91dCB1c2luZyB0aGUgdmFsdWUgZ2l2ZW4gYnkgdGhlXHJcblx0ICAgKiBzZXJ2ZXIgZHVyaW5nIHRoZSBoYW5kc2hha2UuXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFNvY2tldC5wcm90b3R5cGUuc2V0SGVhcnRiZWF0VGltZW91dCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgY2xlYXJUaW1lb3V0KHRoaXMuaGVhcnRiZWF0VGltZW91dFRpbWVyKTtcclxuXHQgICAgaWYodGhpcy50cmFuc3BvcnQgJiYgIXRoaXMudHJhbnNwb3J0LmhlYXJ0YmVhdHMoKSkgcmV0dXJuO1xyXG5cdFxyXG5cdCAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblx0ICAgIHRoaXMuaGVhcnRiZWF0VGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgc2VsZi50cmFuc3BvcnQub25DbG9zZSgpO1xyXG5cdCAgICB9LCB0aGlzLmhlYXJ0YmVhdFRpbWVvdXQpO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogU2VuZHMgYSBtZXNzYWdlLlxyXG5cdCAgICpcclxuXHQgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIHBhY2tldC5cclxuXHQgICAqIEByZXR1cm5zIHtpby5Tb2NrZXR9XHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICBTb2NrZXQucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcblx0ICAgIGlmICh0aGlzLmNvbm5lY3RlZCAmJiAhdGhpcy5kb0J1ZmZlcikge1xyXG5cdCAgICAgIHRoaXMudHJhbnNwb3J0LnBhY2tldChkYXRhKTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICB0aGlzLmJ1ZmZlci5wdXNoKGRhdGEpO1xyXG5cdCAgICB9XHJcblx0XHJcblx0ICAgIHJldHVybiB0aGlzO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogU2V0cyBidWZmZXIgc3RhdGVcclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgU29ja2V0LnByb3RvdHlwZS5zZXRCdWZmZXIgPSBmdW5jdGlvbiAodikge1xyXG5cdCAgICB0aGlzLmRvQnVmZmVyID0gdjtcclxuXHRcclxuXHQgICAgaWYgKCF2ICYmIHRoaXMuY29ubmVjdGVkICYmIHRoaXMuYnVmZmVyLmxlbmd0aCkge1xyXG5cdCAgICAgIGlmICghdGhpcy5vcHRpb25zWydtYW51YWxGbHVzaCddKSB7XHJcblx0ICAgICAgICB0aGlzLmZsdXNoQnVmZmVyKCk7XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBGbHVzaGVzIHRoZSBidWZmZXIgZGF0YSBvdmVyIHRoZSB3aXJlLlxyXG5cdCAgICogVG8gYmUgaW52b2tlZCBtYW51YWxseSB3aGVuICdtYW51YWxGbHVzaCcgaXMgc2V0IHRvIHRydWUuXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgU29ja2V0LnByb3RvdHlwZS5mbHVzaEJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xyXG5cdCAgICB0aGlzLnRyYW5zcG9ydC5wYXlsb2FkKHRoaXMuYnVmZmVyKTtcclxuXHQgICAgdGhpcy5idWZmZXIgPSBbXTtcclxuXHQgIH07XHJcblx0ICBcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogRGlzY29ubmVjdCB0aGUgZXN0YWJsaXNoZWQgY29ubmVjdC5cclxuXHQgICAqXHJcblx0ICAgKiBAcmV0dXJucyB7aW8uU29ja2V0fVxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgU29ja2V0LnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICBpZiAodGhpcy5jb25uZWN0ZWQgfHwgdGhpcy5jb25uZWN0aW5nKSB7XHJcblx0ICAgICAgaWYgKHRoaXMub3Blbikge1xyXG5cdCAgICAgICAgdGhpcy5vZignJykucGFja2V0KHsgdHlwZTogJ2Rpc2Nvbm5lY3QnIH0pO1xyXG5cdCAgICAgIH1cclxuXHRcclxuXHQgICAgICAvLyBoYW5kbGUgZGlzY29ubmVjdGlvbiBpbW1lZGlhdGVseVxyXG5cdCAgICAgIHRoaXMub25EaXNjb25uZWN0KCdib290ZWQnKTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICByZXR1cm4gdGhpcztcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIERpc2Nvbm5lY3RzIHRoZSBzb2NrZXQgd2l0aCBhIHN5bmMgWEhSLlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBTb2NrZXQucHJvdG90eXBlLmRpc2Nvbm5lY3RTeW5jID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAvLyBlbnN1cmUgZGlzY29ubmVjdGlvblxyXG5cdCAgICB2YXIgeGhyID0gaW8udXRpbC5yZXF1ZXN0KCk7XHJcblx0ICAgIHZhciB1cmkgPSBbXHJcblx0ICAgICAgICAnaHR0cCcgKyAodGhpcy5vcHRpb25zLnNlY3VyZSA/ICdzJyA6ICcnKSArICc6LydcclxuXHQgICAgICAsIHRoaXMub3B0aW9ucy5ob3N0ICsgJzonICsgdGhpcy5vcHRpb25zLnBvcnRcclxuXHQgICAgICAsIHRoaXMub3B0aW9ucy5yZXNvdXJjZVxyXG5cdCAgICAgICwgaW8ucHJvdG9jb2xcclxuXHQgICAgICAsICcnXHJcblx0ICAgICAgLCB0aGlzLnNlc3Npb25pZFxyXG5cdCAgICBdLmpvaW4oJy8nKSArICcvP2Rpc2Nvbm5lY3Q9MSc7XHJcblx0XHJcblx0ICAgIHhoci5vcGVuKCdHRVQnLCB1cmksIGZhbHNlKTtcclxuXHQgICAgeGhyLnNlbmQobnVsbCk7XHJcblx0XHJcblx0ICAgIC8vIGhhbmRsZSBkaXNjb25uZWN0aW9uIGltbWVkaWF0ZWx5XHJcblx0ICAgIHRoaXMub25EaXNjb25uZWN0KCdib290ZWQnKTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIENoZWNrIGlmIHdlIG5lZWQgdG8gdXNlIGNyb3NzIGRvbWFpbiBlbmFibGVkIHRyYW5zcG9ydHMuIENyb3NzIGRvbWFpbiB3b3VsZFxyXG5cdCAgICogYmUgYSBkaWZmZXJlbnQgcG9ydCBvciBkaWZmZXJlbnQgZG9tYWluIG5hbWUuXHJcblx0ICAgKlxyXG5cdCAgICogQHJldHVybnMge0Jvb2xlYW59XHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgU29ja2V0LnByb3RvdHlwZS5pc1hEb21haW4gPSBmdW5jdGlvbiAoKSB7XHJcblx0XHJcblx0ICAgIHZhciBwb3J0ID0gZ2xvYmFsLmxvY2F0aW9uLnBvcnQgfHxcclxuXHQgICAgICAoJ2h0dHBzOicgPT0gZ2xvYmFsLmxvY2F0aW9uLnByb3RvY29sID8gNDQzIDogODApO1xyXG5cdFxyXG5cdCAgICByZXR1cm4gdGhpcy5vcHRpb25zLmhvc3QgIT09IGdsb2JhbC5sb2NhdGlvbi5ob3N0bmFtZSBcclxuXHQgICAgICB8fCB0aGlzLm9wdGlvbnMucG9ydCAhPSBwb3J0O1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQ2FsbGVkIHVwb24gaGFuZHNoYWtlLlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBTb2NrZXQucHJvdG90eXBlLm9uQ29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgaWYgKCF0aGlzLmNvbm5lY3RlZCkge1xyXG5cdCAgICAgIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTtcclxuXHQgICAgICB0aGlzLmNvbm5lY3RpbmcgPSBmYWxzZTtcclxuXHQgICAgICBpZiAoIXRoaXMuZG9CdWZmZXIpIHtcclxuXHQgICAgICAgIC8vIG1ha2Ugc3VyZSB0byBmbHVzaCB0aGUgYnVmZmVyXHJcblx0ICAgICAgICB0aGlzLnNldEJ1ZmZlcihmYWxzZSk7XHJcblx0ICAgICAgfVxyXG5cdCAgICAgIHRoaXMuZW1pdCgnY29ubmVjdCcpO1xyXG5cdCAgICB9XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBDYWxsZWQgd2hlbiB0aGUgdHJhbnNwb3J0IG9wZW5zXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFNvY2tldC5wcm90b3R5cGUub25PcGVuID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICB0aGlzLm9wZW4gPSB0cnVlO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQ2FsbGVkIHdoZW4gdGhlIHRyYW5zcG9ydCBjbG9zZXMuXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFNvY2tldC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgdGhpcy5vcGVuID0gZmFsc2U7XHJcblx0ICAgIGNsZWFyVGltZW91dCh0aGlzLmhlYXJ0YmVhdFRpbWVvdXRUaW1lcik7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBDYWxsZWQgd2hlbiB0aGUgdHJhbnNwb3J0IGZpcnN0IG9wZW5zIGEgY29ubmVjdGlvblxyXG5cdCAgICpcclxuXHQgICAqIEBwYXJhbSB0ZXh0XHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFNvY2tldC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XHJcblx0ICAgIHRoaXMub2YocGFja2V0LmVuZHBvaW50KS5vblBhY2tldChwYWNrZXQpO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogSGFuZGxlcyBhbiBlcnJvci5cclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgU29ja2V0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKGVycikge1xyXG5cdCAgICBpZiAoZXJyICYmIGVyci5hZHZpY2UpIHtcclxuXHQgICAgICBpZiAoZXJyLmFkdmljZSA9PT0gJ3JlY29ubmVjdCcgJiYgKHRoaXMuY29ubmVjdGVkIHx8IHRoaXMuY29ubmVjdGluZykpIHtcclxuXHQgICAgICAgIHRoaXMuZGlzY29ubmVjdCgpO1xyXG5cdCAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZWNvbm5lY3QpIHtcclxuXHQgICAgICAgICAgdGhpcy5yZWNvbm5lY3QoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgdGhpcy5wdWJsaXNoKCdlcnJvcicsIGVyciAmJiBlcnIucmVhc29uID8gZXJyLnJlYXNvbiA6IGVycik7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBDYWxsZWQgd2hlbiB0aGUgdHJhbnNwb3J0IGRpc2Nvbm5lY3RzLlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBTb2NrZXQucHJvdG90eXBlLm9uRGlzY29ubmVjdCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcclxuXHQgICAgdmFyIHdhc0Nvbm5lY3RlZCA9IHRoaXMuY29ubmVjdGVkXHJcblx0ICAgICAgLCB3YXNDb25uZWN0aW5nID0gdGhpcy5jb25uZWN0aW5nO1xyXG5cdFxyXG5cdCAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xyXG5cdCAgICB0aGlzLmNvbm5lY3RpbmcgPSBmYWxzZTtcclxuXHQgICAgdGhpcy5vcGVuID0gZmFsc2U7XHJcblx0XHJcblx0ICAgIGlmICh3YXNDb25uZWN0ZWQgfHwgd2FzQ29ubmVjdGluZykge1xyXG5cdCAgICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XHJcblx0ICAgICAgdGhpcy50cmFuc3BvcnQuY2xlYXJUaW1lb3V0cygpO1xyXG5cdCAgICAgIGlmICh3YXNDb25uZWN0ZWQpIHtcclxuXHQgICAgICAgIHRoaXMucHVibGlzaCgnZGlzY29ubmVjdCcsIHJlYXNvbik7XHJcblx0XHJcblx0ICAgICAgICBpZiAoJ2Jvb3RlZCcgIT0gcmVhc29uICYmIHRoaXMub3B0aW9ucy5yZWNvbm5lY3QgJiYgIXRoaXMucmVjb25uZWN0aW5nKSB7XHJcblx0ICAgICAgICAgIHRoaXMucmVjb25uZWN0KCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBDYWxsZWQgdXBvbiByZWNvbm5lY3Rpb24uXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFNvY2tldC5wcm90b3R5cGUucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICB0aGlzLnJlY29ubmVjdGluZyA9IHRydWU7XHJcblx0ICAgIHRoaXMucmVjb25uZWN0aW9uQXR0ZW1wdHMgPSAwO1xyXG5cdCAgICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5ID0gdGhpcy5vcHRpb25zWydyZWNvbm5lY3Rpb24gZGVsYXknXTtcclxuXHRcclxuXHQgICAgdmFyIHNlbGYgPSB0aGlzXHJcblx0ICAgICAgLCBtYXhBdHRlbXB0cyA9IHRoaXMub3B0aW9uc1snbWF4IHJlY29ubmVjdGlvbiBhdHRlbXB0cyddXHJcblx0ICAgICAgLCB0cnlNdWx0aXBsZSA9IHRoaXMub3B0aW9uc1sndHJ5IG11bHRpcGxlIHRyYW5zcG9ydHMnXVxyXG5cdCAgICAgICwgbGltaXQgPSB0aGlzLm9wdGlvbnNbJ3JlY29ubmVjdGlvbiBsaW1pdCddO1xyXG5cdFxyXG5cdCAgICBmdW5jdGlvbiByZXNldCAoKSB7XHJcblx0ICAgICAgaWYgKHNlbGYuY29ubmVjdGVkKSB7XHJcblx0ICAgICAgICBmb3IgKHZhciBpIGluIHNlbGYubmFtZXNwYWNlcykge1xyXG5cdCAgICAgICAgICBpZiAoc2VsZi5uYW1lc3BhY2VzLmhhc093blByb3BlcnR5KGkpICYmICcnICE9PSBpKSB7XHJcblx0ICAgICAgICAgICAgICBzZWxmLm5hbWVzcGFjZXNbaV0ucGFja2V0KHsgdHlwZTogJ2Nvbm5lY3QnIH0pO1xyXG5cdCAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBzZWxmLnB1Ymxpc2goJ3JlY29ubmVjdCcsIHNlbGYudHJhbnNwb3J0Lm5hbWUsIHNlbGYucmVjb25uZWN0aW9uQXR0ZW1wdHMpO1xyXG5cdCAgICAgIH1cclxuXHRcclxuXHQgICAgICBjbGVhclRpbWVvdXQoc2VsZi5yZWNvbm5lY3Rpb25UaW1lcik7XHJcblx0XHJcblx0ICAgICAgc2VsZi5yZW1vdmVMaXN0ZW5lcignY29ubmVjdF9mYWlsZWQnLCBtYXliZVJlY29ubmVjdCk7XHJcblx0ICAgICAgc2VsZi5yZW1vdmVMaXN0ZW5lcignY29ubmVjdCcsIG1heWJlUmVjb25uZWN0KTtcclxuXHRcclxuXHQgICAgICBzZWxmLnJlY29ubmVjdGluZyA9IGZhbHNlO1xyXG5cdFxyXG5cdCAgICAgIGRlbGV0ZSBzZWxmLnJlY29ubmVjdGlvbkF0dGVtcHRzO1xyXG5cdCAgICAgIGRlbGV0ZSBzZWxmLnJlY29ubmVjdGlvbkRlbGF5O1xyXG5cdCAgICAgIGRlbGV0ZSBzZWxmLnJlY29ubmVjdGlvblRpbWVyO1xyXG5cdCAgICAgIGRlbGV0ZSBzZWxmLnJlZG9UcmFuc3BvcnRzO1xyXG5cdFxyXG5cdCAgICAgIHNlbGYub3B0aW9uc1sndHJ5IG11bHRpcGxlIHRyYW5zcG9ydHMnXSA9IHRyeU11bHRpcGxlO1xyXG5cdCAgICB9O1xyXG5cdFxyXG5cdCAgICBmdW5jdGlvbiBtYXliZVJlY29ubmVjdCAoKSB7XHJcblx0ICAgICAgaWYgKCFzZWxmLnJlY29ubmVjdGluZykge1xyXG5cdCAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgIH1cclxuXHRcclxuXHQgICAgICBpZiAoc2VsZi5jb25uZWN0ZWQpIHtcclxuXHQgICAgICAgIHJldHVybiByZXNldCgpO1xyXG5cdCAgICAgIH07XHJcblx0XHJcblx0ICAgICAgaWYgKHNlbGYuY29ubmVjdGluZyAmJiBzZWxmLnJlY29ubmVjdGluZykge1xyXG5cdCAgICAgICAgcmV0dXJuIHNlbGYucmVjb25uZWN0aW9uVGltZXIgPSBzZXRUaW1lb3V0KG1heWJlUmVjb25uZWN0LCAxMDAwKTtcclxuXHQgICAgICB9XHJcblx0XHJcblx0ICAgICAgaWYgKHNlbGYucmVjb25uZWN0aW9uQXR0ZW1wdHMrKyA+PSBtYXhBdHRlbXB0cykge1xyXG5cdCAgICAgICAgaWYgKCFzZWxmLnJlZG9UcmFuc3BvcnRzKSB7XHJcblx0ICAgICAgICAgIHNlbGYub24oJ2Nvbm5lY3RfZmFpbGVkJywgbWF5YmVSZWNvbm5lY3QpO1xyXG5cdCAgICAgICAgICBzZWxmLm9wdGlvbnNbJ3RyeSBtdWx0aXBsZSB0cmFuc3BvcnRzJ10gPSB0cnVlO1xyXG5cdCAgICAgICAgICBzZWxmLnRyYW5zcG9ydHMgPSBzZWxmLm9yaWdUcmFuc3BvcnRzO1xyXG5cdCAgICAgICAgICBzZWxmLnRyYW5zcG9ydCA9IHNlbGYuZ2V0VHJhbnNwb3J0KCk7XHJcblx0ICAgICAgICAgIHNlbGYucmVkb1RyYW5zcG9ydHMgPSB0cnVlO1xyXG5cdCAgICAgICAgICBzZWxmLmNvbm5lY3QoKTtcclxuXHQgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgIHNlbGYucHVibGlzaCgncmVjb25uZWN0X2ZhaWxlZCcpO1xyXG5cdCAgICAgICAgICByZXNldCgpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICBpZiAoc2VsZi5yZWNvbm5lY3Rpb25EZWxheSA8IGxpbWl0KSB7XHJcblx0ICAgICAgICAgIHNlbGYucmVjb25uZWN0aW9uRGVsYXkgKj0gMjsgLy8gZXhwb25lbnRpYWwgYmFjayBvZmZcclxuXHQgICAgICAgIH1cclxuXHRcclxuXHQgICAgICAgIHNlbGYuY29ubmVjdCgpO1xyXG5cdCAgICAgICAgc2VsZi5wdWJsaXNoKCdyZWNvbm5lY3RpbmcnLCBzZWxmLnJlY29ubmVjdGlvbkRlbGF5LCBzZWxmLnJlY29ubmVjdGlvbkF0dGVtcHRzKTtcclxuXHQgICAgICAgIHNlbGYucmVjb25uZWN0aW9uVGltZXIgPSBzZXRUaW1lb3V0KG1heWJlUmVjb25uZWN0LCBzZWxmLnJlY29ubmVjdGlvbkRlbGF5KTtcclxuXHQgICAgICB9XHJcblx0ICAgIH07XHJcblx0XHJcblx0ICAgIHRoaXMub3B0aW9uc1sndHJ5IG11bHRpcGxlIHRyYW5zcG9ydHMnXSA9IGZhbHNlO1xyXG5cdCAgICB0aGlzLnJlY29ubmVjdGlvblRpbWVyID0gc2V0VGltZW91dChtYXliZVJlY29ubmVjdCwgdGhpcy5yZWNvbm5lY3Rpb25EZWxheSk7XHJcblx0XHJcblx0ICAgIHRoaXMub24oJ2Nvbm5lY3QnLCBtYXliZVJlY29ubmVjdCk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdH0pKFxyXG5cdCAgICAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5leHBvcnRzXHJcblx0ICAsICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLnBhcmVudC5leHBvcnRzXHJcblx0ICAsIHRoaXNcclxuXHQpO1xyXG5cdC8qKlxyXG5cdCAqIHNvY2tldC5pb1xyXG5cdCAqIENvcHlyaWdodChjKSAyMDExIExlYXJuQm9vc3QgPGRldkBsZWFybmJvb3N0LmNvbT5cclxuXHQgKiBNSVQgTGljZW5zZWRcclxuXHQgKi9cclxuXHRcclxuXHQoZnVuY3Rpb24gKGV4cG9ydHMsIGlvKSB7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEV4cG9zZSBjb25zdHJ1Y3Rvci5cclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgZXhwb3J0cy5Tb2NrZXROYW1lc3BhY2UgPSBTb2NrZXROYW1lc3BhY2U7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIFNvY2tldCBuYW1lc3BhY2UgY29uc3RydWN0b3IuXHJcblx0ICAgKlxyXG5cdCAgICogQGNvbnN0cnVjdG9yXHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICBmdW5jdGlvbiBTb2NrZXROYW1lc3BhY2UgKHNvY2tldCwgbmFtZSkge1xyXG5cdCAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcclxuXHQgICAgdGhpcy5uYW1lID0gbmFtZSB8fCAnJztcclxuXHQgICAgdGhpcy5mbGFncyA9IHt9O1xyXG5cdCAgICB0aGlzLmpzb24gPSBuZXcgRmxhZyh0aGlzLCAnanNvbicpO1xyXG5cdCAgICB0aGlzLmFja1BhY2tldHMgPSAwO1xyXG5cdCAgICB0aGlzLmFja3MgPSB7fTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEFwcGx5IEV2ZW50RW1pdHRlciBtaXhpbi5cclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgaW8udXRpbC5taXhpbihTb2NrZXROYW1lc3BhY2UsIGlvLkV2ZW50RW1pdHRlcik7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIENvcGllcyBlbWl0IHNpbmNlIHdlIG92ZXJyaWRlIGl0XHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFNvY2tldE5hbWVzcGFjZS5wcm90b3R5cGUuJGVtaXQgPSBpby5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQ7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIENyZWF0ZXMgYSBuZXcgbmFtZXNwYWNlLCBieSBwcm94eWluZyB0aGUgcmVxdWVzdCB0byB0aGUgc29ja2V0LiBUaGlzXHJcblx0ICAgKiBhbGxvd3MgdXMgdG8gdXNlIHRoZSBzeW5heCBhcyB3ZSBkbyBvbiB0aGUgc2VydmVyLlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFNvY2tldE5hbWVzcGFjZS5wcm90b3R5cGUub2YgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHJldHVybiB0aGlzLnNvY2tldC5vZi5hcHBseSh0aGlzLnNvY2tldCwgYXJndW1lbnRzKTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIFNlbmRzIGEgcGFja2V0LlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBTb2NrZXROYW1lc3BhY2UucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcclxuXHQgICAgcGFja2V0LmVuZHBvaW50ID0gdGhpcy5uYW1lO1xyXG5cdCAgICB0aGlzLnNvY2tldC5wYWNrZXQocGFja2V0KTtcclxuXHQgICAgdGhpcy5mbGFncyA9IHt9O1xyXG5cdCAgICByZXR1cm4gdGhpcztcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIFNlbmRzIGEgbWVzc2FnZVxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFNvY2tldE5hbWVzcGFjZS5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xyXG5cdCAgICB2YXIgcGFja2V0ID0ge1xyXG5cdCAgICAgICAgdHlwZTogdGhpcy5mbGFncy5qc29uID8gJ2pzb24nIDogJ21lc3NhZ2UnXHJcblx0ICAgICAgLCBkYXRhOiBkYXRhXHJcblx0ICAgIH07XHJcblx0XHJcblx0ICAgIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBmbikge1xyXG5cdCAgICAgIHBhY2tldC5pZCA9ICsrdGhpcy5hY2tQYWNrZXRzO1xyXG5cdCAgICAgIHBhY2tldC5hY2sgPSB0cnVlO1xyXG5cdCAgICAgIHRoaXMuYWNrc1twYWNrZXQuaWRdID0gZm47XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgcmV0dXJuIHRoaXMucGFja2V0KHBhY2tldCk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBFbWl0cyBhbiBldmVudFxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHQgIFxyXG5cdCAgU29ja2V0TmFtZXNwYWNlLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuXHQgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXHJcblx0ICAgICAgLCBsYXN0QXJnID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdXHJcblx0ICAgICAgLCBwYWNrZXQgPSB7XHJcblx0ICAgICAgICAgICAgdHlwZTogJ2V2ZW50J1xyXG5cdCAgICAgICAgICAsIG5hbWU6IG5hbWVcclxuXHQgICAgICAgIH07XHJcblx0XHJcblx0ICAgIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBsYXN0QXJnKSB7XHJcblx0ICAgICAgcGFja2V0LmlkID0gKyt0aGlzLmFja1BhY2tldHM7XHJcblx0ICAgICAgcGFja2V0LmFjayA9ICdkYXRhJztcclxuXHQgICAgICB0aGlzLmFja3NbcGFja2V0LmlkXSA9IGxhc3RBcmc7XHJcblx0ICAgICAgYXJncyA9IGFyZ3Muc2xpY2UoMCwgYXJncy5sZW5ndGggLSAxKTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICBwYWNrZXQuYXJncyA9IGFyZ3M7XHJcblx0XHJcblx0ICAgIHJldHVybiB0aGlzLnBhY2tldChwYWNrZXQpO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogRGlzY29ubmVjdHMgdGhlIG5hbWVzcGFjZVxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBTb2NrZXROYW1lc3BhY2UucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGlmICh0aGlzLm5hbWUgPT09ICcnKSB7XHJcblx0ICAgICAgdGhpcy5zb2NrZXQuZGlzY29ubmVjdCgpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRoaXMucGFja2V0KHsgdHlwZTogJ2Rpc2Nvbm5lY3QnIH0pO1xyXG5cdCAgICAgIHRoaXMuJGVtaXQoJ2Rpc2Nvbm5lY3QnKTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICByZXR1cm4gdGhpcztcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEhhbmRsZXMgYSBwYWNrZXRcclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgU29ja2V0TmFtZXNwYWNlLnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcclxuXHQgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cdFxyXG5cdCAgICBmdW5jdGlvbiBhY2sgKCkge1xyXG5cdCAgICAgIHNlbGYucGFja2V0KHtcclxuXHQgICAgICAgICAgdHlwZTogJ2FjaydcclxuXHQgICAgICAgICwgYXJnczogaW8udXRpbC50b0FycmF5KGFyZ3VtZW50cylcclxuXHQgICAgICAgICwgYWNrSWQ6IHBhY2tldC5pZFxyXG5cdCAgICAgIH0pO1xyXG5cdCAgICB9O1xyXG5cdFxyXG5cdCAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XHJcblx0ICAgICAgY2FzZSAnY29ubmVjdCc6XHJcblx0ICAgICAgICB0aGlzLiRlbWl0KCdjb25uZWN0Jyk7XHJcblx0ICAgICAgICBicmVhaztcclxuXHRcclxuXHQgICAgICBjYXNlICdkaXNjb25uZWN0JzpcclxuXHQgICAgICAgIGlmICh0aGlzLm5hbWUgPT09ICcnKSB7XHJcblx0ICAgICAgICAgIHRoaXMuc29ja2V0Lm9uRGlzY29ubmVjdChwYWNrZXQucmVhc29uIHx8ICdib290ZWQnKTtcclxuXHQgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgIHRoaXMuJGVtaXQoJ2Rpc2Nvbm5lY3QnLCBwYWNrZXQucmVhc29uKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGJyZWFrO1xyXG5cdFxyXG5cdCAgICAgIGNhc2UgJ21lc3NhZ2UnOlxyXG5cdCAgICAgIGNhc2UgJ2pzb24nOlxyXG5cdCAgICAgICAgdmFyIHBhcmFtcyA9IFsnbWVzc2FnZScsIHBhY2tldC5kYXRhXTtcclxuXHRcclxuXHQgICAgICAgIGlmIChwYWNrZXQuYWNrID09ICdkYXRhJykge1xyXG5cdCAgICAgICAgICBwYXJhbXMucHVzaChhY2spO1xyXG5cdCAgICAgICAgfSBlbHNlIGlmIChwYWNrZXQuYWNrKSB7XHJcblx0ICAgICAgICAgIHRoaXMucGFja2V0KHsgdHlwZTogJ2FjaycsIGFja0lkOiBwYWNrZXQuaWQgfSk7XHJcblx0ICAgICAgICB9XHJcblx0XHJcblx0ICAgICAgICB0aGlzLiRlbWl0LmFwcGx5KHRoaXMsIHBhcmFtcyk7XHJcblx0ICAgICAgICBicmVhaztcclxuXHRcclxuXHQgICAgICBjYXNlICdldmVudCc6XHJcblx0ICAgICAgICB2YXIgcGFyYW1zID0gW3BhY2tldC5uYW1lXS5jb25jYXQocGFja2V0LmFyZ3MpO1xyXG5cdFxyXG5cdCAgICAgICAgaWYgKHBhY2tldC5hY2sgPT0gJ2RhdGEnKVxyXG5cdCAgICAgICAgICBwYXJhbXMucHVzaChhY2spO1xyXG5cdFxyXG5cdCAgICAgICAgdGhpcy4kZW1pdC5hcHBseSh0aGlzLCBwYXJhbXMpO1xyXG5cdCAgICAgICAgYnJlYWs7XHJcblx0XHJcblx0ICAgICAgY2FzZSAnYWNrJzpcclxuXHQgICAgICAgIGlmICh0aGlzLmFja3NbcGFja2V0LmFja0lkXSkge1xyXG5cdCAgICAgICAgICB0aGlzLmFja3NbcGFja2V0LmFja0lkXS5hcHBseSh0aGlzLCBwYWNrZXQuYXJncyk7XHJcblx0ICAgICAgICAgIGRlbGV0ZSB0aGlzLmFja3NbcGFja2V0LmFja0lkXTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGJyZWFrO1xyXG5cdFxyXG5cdCAgICAgIGNhc2UgJ2Vycm9yJzpcclxuXHQgICAgICAgIGlmIChwYWNrZXQuYWR2aWNlKXtcclxuXHQgICAgICAgICAgdGhpcy5zb2NrZXQub25FcnJvcihwYWNrZXQpO1xyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgaWYgKHBhY2tldC5yZWFzb24gPT0gJ3VuYXV0aG9yaXplZCcpIHtcclxuXHQgICAgICAgICAgICB0aGlzLiRlbWl0KCdjb25uZWN0X2ZhaWxlZCcsIHBhY2tldC5yZWFzb24pO1xyXG5cdCAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2Vycm9yJywgcGFja2V0LnJlYXNvbik7XHJcblx0ICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGJyZWFrO1xyXG5cdCAgICB9XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBGbGFnIGludGVyZmFjZS5cclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgZnVuY3Rpb24gRmxhZyAobnNwLCBuYW1lKSB7XHJcblx0ICAgIHRoaXMubmFtZXNwYWNlID0gbnNwO1xyXG5cdCAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogU2VuZCBhIG1lc3NhZ2VcclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICBGbGFnLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICB0aGlzLm5hbWVzcGFjZS5mbGFnc1t0aGlzLm5hbWVdID0gdHJ1ZTtcclxuXHQgICAgdGhpcy5uYW1lc3BhY2Uuc2VuZC5hcHBseSh0aGlzLm5hbWVzcGFjZSwgYXJndW1lbnRzKTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEVtaXQgYW4gZXZlbnRcclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICBGbGFnLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICB0aGlzLm5hbWVzcGFjZS5mbGFnc1t0aGlzLm5hbWVdID0gdHJ1ZTtcclxuXHQgICAgdGhpcy5uYW1lc3BhY2UuZW1pdC5hcHBseSh0aGlzLm5hbWVzcGFjZSwgYXJndW1lbnRzKTtcclxuXHQgIH07XHJcblx0XHJcblx0fSkoXHJcblx0ICAgICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLmV4cG9ydHNcclxuXHQgICwgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGlvID8gaW8gOiBtb2R1bGUucGFyZW50LmV4cG9ydHNcclxuXHQpO1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIHNvY2tldC5pb1xyXG5cdCAqIENvcHlyaWdodChjKSAyMDExIExlYXJuQm9vc3QgPGRldkBsZWFybmJvb3N0LmNvbT5cclxuXHQgKiBNSVQgTGljZW5zZWRcclxuXHQgKi9cclxuXHRcclxuXHQoZnVuY3Rpb24gKGV4cG9ydHMsIGlvLCBnbG9iYWwpIHtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogRXhwb3NlIGNvbnN0cnVjdG9yLlxyXG5cdCAgICovXHJcblx0XHJcblx0ICBleHBvcnRzLndlYnNvY2tldCA9IFdTO1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBUaGUgV2ViU29ja2V0IHRyYW5zcG9ydCB1c2VzIHRoZSBIVE1MNSBXZWJTb2NrZXQgQVBJIHRvIGVzdGFibGlzaCBhblxyXG5cdCAgICogcGVyc2lzdGVudCBjb25uZWN0aW9uIHdpdGggdGhlIFNvY2tldC5JTyBzZXJ2ZXIuIFRoaXMgdHJhbnNwb3J0IHdpbGwgYWxzb1xyXG5cdCAgICogYmUgaW5oZXJpdGVkIGJ5IHRoZSBGbGFzaFNvY2tldCBmYWxsYmFjayBhcyBpdCBwcm92aWRlcyBhIEFQSSBjb21wYXRpYmxlXHJcblx0ICAgKiBwb2x5ZmlsbCBmb3IgdGhlIFdlYlNvY2tldHMuXHJcblx0ICAgKlxyXG5cdCAgICogQGNvbnN0cnVjdG9yXHJcblx0ICAgKiBAZXh0ZW5kcyB7aW8uVHJhbnNwb3J0fVxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgZnVuY3Rpb24gV1MgKHNvY2tldCkge1xyXG5cdCAgICBpby5UcmFuc3BvcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEluaGVyaXRzIGZyb20gVHJhbnNwb3J0LlxyXG5cdCAgICovXHJcblx0XHJcblx0ICBpby51dGlsLmluaGVyaXQoV1MsIGlvLlRyYW5zcG9ydCk7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIFRyYW5zcG9ydCBuYW1lXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgV1MucHJvdG90eXBlLm5hbWUgPSAnd2Vic29ja2V0JztcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogSW5pdGlhbGl6ZXMgYSBuZXcgYFdlYlNvY2tldGAgY29ubmVjdGlvbiB3aXRoIHRoZSBTb2NrZXQuSU8gc2VydmVyLiBXZSBhdHRhY2hcclxuXHQgICAqIGFsbCB0aGUgYXBwcm9wcmlhdGUgbGlzdGVuZXJzIHRvIGhhbmRsZSB0aGUgcmVzcG9uc2VzIGZyb20gdGhlIHNlcnZlci5cclxuXHQgICAqXHJcblx0ICAgKiBAcmV0dXJucyB7VHJhbnNwb3J0fVxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgV1MucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHZhciBxdWVyeSA9IGlvLnV0aWwucXVlcnkodGhpcy5zb2NrZXQub3B0aW9ucy5xdWVyeSlcclxuXHQgICAgICAsIHNlbGYgPSB0aGlzXHJcblx0ICAgICAgLCBTb2NrZXRcclxuXHRcclxuXHRcclxuXHQgICAgaWYgKCFTb2NrZXQpIHtcclxuXHQgICAgICBTb2NrZXQgPSBnbG9iYWwuTW96V2ViU29ja2V0IHx8IGdsb2JhbC5XZWJTb2NrZXQ7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgdGhpcy53ZWJzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMucHJlcGFyZVVybCgpICsgcXVlcnkpO1xyXG5cdFxyXG5cdCAgICB0aGlzLndlYnNvY2tldC5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgc2VsZi5vbk9wZW4oKTtcclxuXHQgICAgICBzZWxmLnNvY2tldC5zZXRCdWZmZXIoZmFsc2UpO1xyXG5cdCAgICB9O1xyXG5cdCAgICB0aGlzLndlYnNvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXYpIHtcclxuXHQgICAgICBzZWxmLm9uRGF0YShldi5kYXRhKTtcclxuXHQgICAgfTtcclxuXHQgICAgdGhpcy53ZWJzb2NrZXQub25jbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICBzZWxmLm9uQ2xvc2UoKTtcclxuXHQgICAgICBzZWxmLnNvY2tldC5zZXRCdWZmZXIodHJ1ZSk7XHJcblx0ICAgIH07XHJcblx0ICAgIHRoaXMud2Vic29ja2V0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xyXG5cdCAgICAgIHNlbGYub25FcnJvcihlKTtcclxuXHQgICAgfTtcclxuXHRcclxuXHQgICAgcmV0dXJuIHRoaXM7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBTZW5kIGEgbWVzc2FnZSB0byB0aGUgU29ja2V0LklPIHNlcnZlci4gVGhlIG1lc3NhZ2Ugd2lsbCBhdXRvbWF0aWNhbGx5IGJlXHJcblx0ICAgKiBlbmNvZGVkIGluIHRoZSBjb3JyZWN0IG1lc3NhZ2UgZm9ybWF0LlxyXG5cdCAgICpcclxuXHQgICAqIEByZXR1cm5zIHtUcmFuc3BvcnR9XHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICAvLyBEbyB0byBhIGJ1ZyBpbiB0aGUgY3VycmVudCBJRGV2aWNlcyBicm93c2VyLCB3ZSBuZWVkIHRvIHdyYXAgdGhlIHNlbmQgaW4gYSBcclxuXHQgIC8vIHNldFRpbWVvdXQsIHdoZW4gdGhleSByZXN1bWUgZnJvbSBzbGVlcGluZyB0aGUgYnJvd3NlciB3aWxsIGNyYXNoIGlmIFxyXG5cdCAgLy8gd2UgZG9uJ3QgYWxsb3cgdGhlIGJyb3dzZXIgdGltZSB0byBkZXRlY3QgdGhlIHNvY2tldCBoYXMgYmVlbiBjbG9zZWRcclxuXHQgIGlmIChpby51dGlsLnVhLmlEZXZpY2UpIHtcclxuXHQgICAgV1MucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG5cdCAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHQgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdCAgICAgICAgIHNlbGYud2Vic29ja2V0LnNlbmQoZGF0YSk7XHJcblx0ICAgICAgfSwwKTtcclxuXHQgICAgICByZXR1cm4gdGhpcztcclxuXHQgICAgfTtcclxuXHQgIH0gZWxzZSB7XHJcblx0ICAgIFdTLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuXHQgICAgICB0aGlzLndlYnNvY2tldC5zZW5kKGRhdGEpO1xyXG5cdCAgICAgIHJldHVybiB0aGlzO1xyXG5cdCAgICB9O1xyXG5cdCAgfVxyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBQYXlsb2FkXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFdTLnByb3RvdHlwZS5wYXlsb2FkID0gZnVuY3Rpb24gKGFycikge1xyXG5cdCAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHQgICAgICB0aGlzLnBhY2tldChhcnJbaV0pO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiB0aGlzO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogRGlzY29ubmVjdCB0aGUgZXN0YWJsaXNoZWQgYFdlYlNvY2tldGAgY29ubmVjdGlvbi5cclxuXHQgICAqXHJcblx0ICAgKiBAcmV0dXJucyB7VHJhbnNwb3J0fVxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgV1MucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICB0aGlzLndlYnNvY2tldC5jbG9zZSgpO1xyXG5cdCAgICByZXR1cm4gdGhpcztcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEhhbmRsZSB0aGUgZXJyb3JzIHRoYXQgYFdlYlNvY2tldGAgbWlnaHQgYmUgZ2l2aW5nIHdoZW4gd2VcclxuXHQgICAqIGFyZSBhdHRlbXB0aW5nIHRvIGNvbm5lY3Qgb3Igc2VuZCBtZXNzYWdlcy5cclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0ge0Vycm9yfSBlIFRoZSBlcnJvci5cclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBXUy5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlKSB7XHJcblx0ICAgIHRoaXMuc29ja2V0Lm9uRXJyb3IoZSk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBSZXR1cm5zIHRoZSBhcHByb3ByaWF0ZSBzY2hlbWUgZm9yIHRoZSBVUkkgZ2VuZXJhdGlvbi5cclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdCAgV1MucHJvdG90eXBlLnNjaGVtZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgcmV0dXJuIHRoaXMuc29ja2V0Lm9wdGlvbnMuc2VjdXJlID8gJ3dzcycgOiAnd3MnO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQ2hlY2tzIGlmIHRoZSBicm93c2VyIGhhcyBzdXBwb3J0IGZvciBuYXRpdmUgYFdlYlNvY2tldHNgIGFuZCB0aGF0XHJcblx0ICAgKiBpdCdzIG5vdCB0aGUgcG9seWZpbGwgY3JlYXRlZCBmb3IgdGhlIEZsYXNoU29ja2V0IHRyYW5zcG9ydC5cclxuXHQgICAqXHJcblx0ICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgV1MuY2hlY2sgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHJldHVybiAoJ1dlYlNvY2tldCcgaW4gZ2xvYmFsICYmICEoJ19fYWRkVGFzaycgaW4gV2ViU29ja2V0KSlcclxuXHQgICAgICAgICAgfHwgJ01veldlYlNvY2tldCcgaW4gZ2xvYmFsO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQ2hlY2sgaWYgdGhlIGBXZWJTb2NrZXRgIHRyYW5zcG9ydCBzdXBwb3J0IGNyb3NzIGRvbWFpbiBjb21tdW5pY2F0aW9ucy5cclxuXHQgICAqXHJcblx0ICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFdTLnhkb21haW5DaGVjayA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgcmV0dXJuIHRydWU7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBBZGQgdGhlIHRyYW5zcG9ydCB0byB5b3VyIHB1YmxpYyBpby50cmFuc3BvcnRzIGFycmF5LlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBpby50cmFuc3BvcnRzLnB1c2goJ3dlYnNvY2tldCcpO1xyXG5cdFxyXG5cdH0pKFxyXG5cdCAgICAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpby5UcmFuc3BvcnQgOiBtb2R1bGUuZXhwb3J0c1xyXG5cdCAgLCAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5wYXJlbnQuZXhwb3J0c1xyXG5cdCAgLCB0aGlzXHJcblx0KTtcclxuXHRcclxuXHQvKipcclxuXHQgKiBzb2NrZXQuaW9cclxuXHQgKiBDb3B5cmlnaHQoYykgMjAxMSBMZWFybkJvb3N0IDxkZXZAbGVhcm5ib29zdC5jb20+XHJcblx0ICogTUlUIExpY2Vuc2VkXHJcblx0ICovXHJcblx0XHJcblx0KGZ1bmN0aW9uIChleHBvcnRzLCBpbykge1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBFeHBvc2UgY29uc3RydWN0b3IuXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIGV4cG9ydHMuZmxhc2hzb2NrZXQgPSBGbGFzaHNvY2tldDtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogVGhlIEZsYXNoU29ja2V0IHRyYW5zcG9ydC4gVGhpcyBpcyBhIEFQSSB3cmFwcGVyIGZvciB0aGUgSFRNTDUgV2ViU29ja2V0XHJcblx0ICAgKiBzcGVjaWZpY2F0aW9uLiBJdCB1c2VzIGEgLnN3ZiBmaWxlIHRvIGNvbW11bmljYXRlIHdpdGggdGhlIHNlcnZlci4gSWYgeW91IHdhbnRcclxuXHQgICAqIHRvIHNlcnZlIHRoZSAuc3dmIGZpbGUgZnJvbSBhIG90aGVyIHNlcnZlciB0aGFuIHdoZXJlIHRoZSBTb2NrZXQuSU8gc2NyaXB0IGlzXHJcblx0ICAgKiBjb21pbmcgZnJvbSB5b3UgbmVlZCB0byB1c2UgdGhlIGluc2VjdXJlIHZlcnNpb24gb2YgdGhlIC5zd2YuIE1vcmUgaW5mb3JtYXRpb25cclxuXHQgICAqIGFib3V0IHRoaXMgY2FuIGJlIGZvdW5kIG9uIHRoZSBnaXRodWIgcGFnZS5cclxuXHQgICAqXHJcblx0ICAgKiBAY29uc3RydWN0b3JcclxuXHQgICAqIEBleHRlbmRzIHtpby5UcmFuc3BvcnQud2Vic29ja2V0fVxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgZnVuY3Rpb24gRmxhc2hzb2NrZXQgKCkge1xyXG5cdCAgICBpby5UcmFuc3BvcnQud2Vic29ja2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgaW8udXRpbC5pbmhlcml0KEZsYXNoc29ja2V0LCBpby5UcmFuc3BvcnQud2Vic29ja2V0KTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogVHJhbnNwb3J0IG5hbWVcclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICBGbGFzaHNvY2tldC5wcm90b3R5cGUubmFtZSA9ICdmbGFzaHNvY2tldCc7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIERpc2Nvbm5lY3QgdGhlIGVzdGFibGlzaGVkIGBGbGFzaFNvY2tldGAgY29ubmVjdGlvbi4gVGhpcyBpcyBkb25lIGJ5IGFkZGluZyBhIFxyXG5cdCAgICogbmV3IHRhc2sgdG8gdGhlIEZsYXNoU29ja2V0LiBUaGUgcmVzdCB3aWxsIGJlIGhhbmRsZWQgb2ZmIGJ5IHRoZSBgV2ViU29ja2V0YCBcclxuXHQgICAqIHRyYW5zcG9ydC5cclxuXHQgICAqXHJcblx0ICAgKiBAcmV0dXJucyB7VHJhbnNwb3J0fVxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgRmxhc2hzb2NrZXQucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHZhciBzZWxmID0gdGhpc1xyXG5cdCAgICAgICwgYXJncyA9IGFyZ3VtZW50cztcclxuXHRcclxuXHQgICAgV2ViU29ja2V0Ll9fYWRkVGFzayhmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgaW8uVHJhbnNwb3J0LndlYnNvY2tldC5wcm90b3R5cGUub3Blbi5hcHBseShzZWxmLCBhcmdzKTtcclxuXHQgICAgfSk7XHJcblx0ICAgIHJldHVybiB0aGlzO1xyXG5cdCAgfTtcclxuXHQgIFxyXG5cdCAgLyoqXHJcblx0ICAgKiBTZW5kcyBhIG1lc3NhZ2UgdG8gdGhlIFNvY2tldC5JTyBzZXJ2ZXIuIFRoaXMgaXMgZG9uZSBieSBhZGRpbmcgYSBuZXdcclxuXHQgICAqIHRhc2sgdG8gdGhlIEZsYXNoU29ja2V0LiBUaGUgcmVzdCB3aWxsIGJlIGhhbmRsZWQgb2ZmIGJ5IHRoZSBgV2ViU29ja2V0YCBcclxuXHQgICAqIHRyYW5zcG9ydC5cclxuXHQgICAqXHJcblx0ICAgKiBAcmV0dXJucyB7VHJhbnNwb3J0fVxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgRmxhc2hzb2NrZXQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50cztcclxuXHQgICAgV2ViU29ja2V0Ll9fYWRkVGFzayhmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgaW8uVHJhbnNwb3J0LndlYnNvY2tldC5wcm90b3R5cGUuc2VuZC5hcHBseShzZWxmLCBhcmdzKTtcclxuXHQgICAgfSk7XHJcblx0ICAgIHJldHVybiB0aGlzO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogRGlzY29ubmVjdHMgdGhlIGVzdGFibGlzaGVkIGBGbGFzaFNvY2tldGAgY29ubmVjdGlvbi5cclxuXHQgICAqXHJcblx0ICAgKiBAcmV0dXJucyB7VHJhbnNwb3J0fVxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgRmxhc2hzb2NrZXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICBXZWJTb2NrZXQuX190YXNrcy5sZW5ndGggPSAwO1xyXG5cdCAgICBpby5UcmFuc3BvcnQud2Vic29ja2V0LnByb3RvdHlwZS5jbG9zZS5jYWxsKHRoaXMpO1xyXG5cdCAgICByZXR1cm4gdGhpcztcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIFRoZSBXZWJTb2NrZXQgZmFsbCBiYWNrIG5lZWRzIHRvIGFwcGVuZCB0aGUgZmxhc2ggY29udGFpbmVyIHRvIHRoZSBib2R5XHJcblx0ICAgKiBlbGVtZW50LCBzbyB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB3ZSBoYXZlIGFjY2VzcyB0byBpdC4gT3IgZGVmZXIgdGhlIGNhbGxcclxuXHQgICAqIHVudGlsIHdlIGFyZSBzdXJlIHRoZXJlIGlzIGEgYm9keSBlbGVtZW50LlxyXG5cdCAgICpcclxuXHQgICAqIEBwYXJhbSB7U29ja2V0fSBzb2NrZXQgVGhlIHNvY2tldCBpbnN0YW5jZSB0aGF0IG5lZWRzIGEgdHJhbnNwb3J0XHJcblx0ICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2tcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBGbGFzaHNvY2tldC5wcm90b3R5cGUucmVhZHkgPSBmdW5jdGlvbiAoc29ja2V0LCBmbikge1xyXG5cdCAgICBmdW5jdGlvbiBpbml0ICgpIHtcclxuXHQgICAgICB2YXIgb3B0aW9ucyA9IHNvY2tldC5vcHRpb25zXHJcblx0ICAgICAgICAsIHBvcnQgPSBvcHRpb25zWydmbGFzaCBwb2xpY3kgcG9ydCddXHJcblx0ICAgICAgICAsIHBhdGggPSBbXHJcblx0ICAgICAgICAgICAgICAnaHR0cCcgKyAob3B0aW9ucy5zZWN1cmUgPyAncycgOiAnJykgKyAnOi8nXHJcblx0ICAgICAgICAgICAgLCBvcHRpb25zLmhvc3QgKyAnOicgKyBvcHRpb25zLnBvcnRcclxuXHQgICAgICAgICAgICAsIG9wdGlvbnMucmVzb3VyY2VcclxuXHQgICAgICAgICAgICAsICdzdGF0aWMvZmxhc2hzb2NrZXQnXHJcblx0ICAgICAgICAgICAgLCAnV2ViU29ja2V0TWFpbicgKyAoc29ja2V0LmlzWERvbWFpbigpID8gJ0luc2VjdXJlJyA6ICcnKSArICcuc3dmJ1xyXG5cdCAgICAgICAgICBdO1xyXG5cdFxyXG5cdCAgICAgIC8vIE9ubHkgc3RhcnQgZG93bmxvYWRpbmcgdGhlIHN3ZiBmaWxlIHdoZW4gdGhlIGNoZWNrZWQgdGhhdCB0aGlzIGJyb3dzZXJcclxuXHQgICAgICAvLyBhY3R1YWxseSBzdXBwb3J0cyBpdFxyXG5cdCAgICAgIGlmICghRmxhc2hzb2NrZXQubG9hZGVkKSB7XHJcblx0ICAgICAgICBpZiAodHlwZW9mIFdFQl9TT0NLRVRfU1dGX0xPQ0FUSU9OID09PSAndW5kZWZpbmVkJykge1xyXG5cdCAgICAgICAgICAvLyBTZXQgdGhlIGNvcnJlY3QgZmlsZSBiYXNlZCBvbiB0aGUgWERvbWFpbiBzZXR0aW5nc1xyXG5cdCAgICAgICAgICBXRUJfU09DS0VUX1NXRl9MT0NBVElPTiA9IHBhdGguam9pbignLycpO1xyXG5cdCAgICAgICAgfVxyXG5cdFxyXG5cdCAgICAgICAgaWYgKHBvcnQgIT09IDg0Mykge1xyXG5cdCAgICAgICAgICBXZWJTb2NrZXQubG9hZEZsYXNoUG9saWN5RmlsZSgneG1sc29ja2V0Oi8vJyArIG9wdGlvbnMuaG9zdCArICc6JyArIHBvcnQpO1xyXG5cdCAgICAgICAgfVxyXG5cdFxyXG5cdCAgICAgICAgV2ViU29ja2V0Ll9faW5pdGlhbGl6ZSgpO1xyXG5cdCAgICAgICAgRmxhc2hzb2NrZXQubG9hZGVkID0gdHJ1ZTtcclxuXHQgICAgICB9XHJcblx0XHJcblx0ICAgICAgZm4uY2FsbChzZWxmKTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblx0ICAgIGlmIChkb2N1bWVudC5ib2R5KSByZXR1cm4gaW5pdCgpO1xyXG5cdFxyXG5cdCAgICBpby51dGlsLmxvYWQoaW5pdCk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBDaGVjayBpZiB0aGUgRmxhc2hTb2NrZXQgdHJhbnNwb3J0IGlzIHN1cHBvcnRlZCBhcyBpdCByZXF1aXJlcyB0aGF0IHRoZSBBZG9iZVxyXG5cdCAgICogRmxhc2ggUGxheWVyIHBsdWctaW4gdmVyc2lvbiBgMTAuMC4wYCBvciBncmVhdGVyIGlzIGluc3RhbGxlZC4gQW5kIGFsc28gY2hlY2sgaWZcclxuXHQgICAqIHRoZSBwb2x5ZmlsbCBpcyBjb3JyZWN0bHkgbG9hZGVkLlxyXG5cdCAgICpcclxuXHQgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgRmxhc2hzb2NrZXQuY2hlY2sgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGlmIChcclxuXHQgICAgICAgIHR5cGVvZiBXZWJTb2NrZXQgPT0gJ3VuZGVmaW5lZCdcclxuXHQgICAgICB8fCAhKCdfX2luaXRpYWxpemUnIGluIFdlYlNvY2tldCkgfHwgIXN3Zm9iamVjdFxyXG5cdCAgICApIHJldHVybiBmYWxzZTtcclxuXHRcclxuXHQgICAgcmV0dXJuIHN3Zm9iamVjdC5nZXRGbGFzaFBsYXllclZlcnNpb24oKS5tYWpvciA+PSAxMDtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIENoZWNrIGlmIHRoZSBGbGFzaFNvY2tldCB0cmFuc3BvcnQgY2FuIGJlIHVzZWQgYXMgY3Jvc3MgZG9tYWluIC8gY3Jvc3Mgb3JpZ2luIFxyXG5cdCAgICogdHJhbnNwb3J0LiBCZWNhdXNlIHdlIGNhbid0IHNlZSB3aGljaCB0eXBlIChzZWN1cmUgb3IgaW5zZWN1cmUpIG9mIC5zd2YgaXMgdXNlZFxyXG5cdCAgICogd2Ugd2lsbCBqdXN0IHJldHVybiB0cnVlLlxyXG5cdCAgICpcclxuXHQgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgRmxhc2hzb2NrZXQueGRvbWFpbkNoZWNrID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICByZXR1cm4gdHJ1ZTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIERpc2FibGUgQVVUT19JTklUSUFMSVpBVElPTlxyXG5cdCAgICovXHJcblx0XHJcblx0ICBpZiAodHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJykge1xyXG5cdCAgICBXRUJfU09DS0VUX0RJU0FCTEVfQVVUT19JTklUSUFMSVpBVElPTiA9IHRydWU7XHJcblx0ICB9XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEFkZCB0aGUgdHJhbnNwb3J0IHRvIHlvdXIgcHVibGljIGlvLnRyYW5zcG9ydHMgYXJyYXkuXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIGlvLnRyYW5zcG9ydHMucHVzaCgnZmxhc2hzb2NrZXQnKTtcclxuXHR9KShcclxuXHQgICAgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGlvID8gaW8uVHJhbnNwb3J0IDogbW9kdWxlLmV4cG9ydHNcclxuXHQgICwgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGlvID8gaW8gOiBtb2R1bGUucGFyZW50LmV4cG9ydHNcclxuXHQpO1xyXG5cdC8qXHRTV0ZPYmplY3QgdjIuMiA8aHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL3N3Zm9iamVjdC8+IFxyXG5cdFx0aXMgcmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIDxodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocD4gXHJcblx0Ki9cclxuXHRpZiAoJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIHdpbmRvdykge1xyXG5cdHZhciBzd2ZvYmplY3Q9ZnVuY3Rpb24oKXt2YXIgRD1cInVuZGVmaW5lZFwiLHI9XCJvYmplY3RcIixTPVwiU2hvY2t3YXZlIEZsYXNoXCIsVz1cIlNob2Nrd2F2ZUZsYXNoLlNob2Nrd2F2ZUZsYXNoXCIscT1cImFwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoXCIsUj1cIlNXRk9iamVjdEV4cHJJbnN0XCIseD1cIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLE89d2luZG93LGo9ZG9jdW1lbnQsdD1uYXZpZ2F0b3IsVD1mYWxzZSxVPVtoXSxvPVtdLE49W10sST1bXSxsLFEsRSxCLEo9ZmFsc2UsYT1mYWxzZSxuLEcsbT10cnVlLE09ZnVuY3Rpb24oKXt2YXIgYWE9dHlwZW9mIGouZ2V0RWxlbWVudEJ5SWQhPUQmJnR5cGVvZiBqLmdldEVsZW1lbnRzQnlUYWdOYW1lIT1EJiZ0eXBlb2Ygai5jcmVhdGVFbGVtZW50IT1ELGFoPXQudXNlckFnZW50LnRvTG93ZXJDYXNlKCksWT10LnBsYXRmb3JtLnRvTG93ZXJDYXNlKCksYWU9WT8vd2luLy50ZXN0KFkpOi93aW4vLnRlc3QoYWgpLGFjPVk/L21hYy8udGVzdChZKTovbWFjLy50ZXN0KGFoKSxhZj0vd2Via2l0Ly50ZXN0KGFoKT9wYXJzZUZsb2F0KGFoLnJlcGxhY2UoL14uKndlYmtpdFxcLyhcXGQrKFxcLlxcZCspPykuKiQvLFwiJDFcIikpOmZhbHNlLFg9IStcIlxcdjFcIixhZz1bMCwwLDBdLGFiPW51bGw7aWYodHlwZW9mIHQucGx1Z2lucyE9RCYmdHlwZW9mIHQucGx1Z2luc1tTXT09cil7YWI9dC5wbHVnaW5zW1NdLmRlc2NyaXB0aW9uO2lmKGFiJiYhKHR5cGVvZiB0Lm1pbWVUeXBlcyE9RCYmdC5taW1lVHlwZXNbcV0mJiF0Lm1pbWVUeXBlc1txXS5lbmFibGVkUGx1Z2luKSl7VD10cnVlO1g9ZmFsc2U7YWI9YWIucmVwbGFjZSgvXi4qXFxzKyhcXFMrXFxzK1xcUyskKS8sXCIkMVwiKTthZ1swXT1wYXJzZUludChhYi5yZXBsYWNlKC9eKC4qKVxcLi4qJC8sXCIkMVwiKSwxMCk7YWdbMV09cGFyc2VJbnQoYWIucmVwbGFjZSgvXi4qXFwuKC4qKVxccy4qJC8sXCIkMVwiKSwxMCk7YWdbMl09L1thLXpBLVpdLy50ZXN0KGFiKT9wYXJzZUludChhYi5yZXBsYWNlKC9eLipbYS16QS1aXSsoLiopJC8sXCIkMVwiKSwxMCk6MH19ZWxzZXtpZih0eXBlb2YgT1soWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKSldIT1EKXt0cnl7dmFyIGFkPW5ldyB3aW5kb3dbKFsnQWN0aXZlJ10uY29uY2F0KCdPYmplY3QnKS5qb2luKCdYJykpXShXKTtpZihhZCl7YWI9YWQuR2V0VmFyaWFibGUoXCIkdmVyc2lvblwiKTtpZihhYil7WD10cnVlO2FiPWFiLnNwbGl0KFwiIFwiKVsxXS5zcGxpdChcIixcIik7YWc9W3BhcnNlSW50KGFiWzBdLDEwKSxwYXJzZUludChhYlsxXSwxMCkscGFyc2VJbnQoYWJbMl0sMTApXX19fWNhdGNoKFope319fXJldHVybnt3MzphYSxwdjphZyx3azphZixpZTpYLHdpbjphZSxtYWM6YWN9fSgpLGs9ZnVuY3Rpb24oKXtpZighTS53Myl7cmV0dXJufWlmKCh0eXBlb2Ygai5yZWFkeVN0YXRlIT1EJiZqLnJlYWR5U3RhdGU9PVwiY29tcGxldGVcIil8fCh0eXBlb2Ygai5yZWFkeVN0YXRlPT1EJiYoai5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF18fGouYm9keSkpKXtmKCl9aWYoIUope2lmKHR5cGVvZiBqLmFkZEV2ZW50TGlzdGVuZXIhPUQpe2ouYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixmLGZhbHNlKX1pZihNLmllJiZNLndpbil7ai5hdHRhY2hFdmVudCh4LGZ1bmN0aW9uKCl7aWYoai5yZWFkeVN0YXRlPT1cImNvbXBsZXRlXCIpe2ouZGV0YWNoRXZlbnQoeCxhcmd1bWVudHMuY2FsbGVlKTtmKCl9fSk7aWYoTz09dG9wKXsoZnVuY3Rpb24oKXtpZihKKXtyZXR1cm59dHJ5e2ouZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsKFwibGVmdFwiKX1jYXRjaChYKXtzZXRUaW1lb3V0KGFyZ3VtZW50cy5jYWxsZWUsMCk7cmV0dXJufWYoKX0pKCl9fWlmKE0ud2speyhmdW5jdGlvbigpe2lmKEope3JldHVybn1pZighL2xvYWRlZHxjb21wbGV0ZS8udGVzdChqLnJlYWR5U3RhdGUpKXtzZXRUaW1lb3V0KGFyZ3VtZW50cy5jYWxsZWUsMCk7cmV0dXJufWYoKX0pKCl9cyhmKX19KCk7ZnVuY3Rpb24gZigpe2lmKEope3JldHVybn10cnl7dmFyIFo9ai5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF0uYXBwZW5kQ2hpbGQoQyhcInNwYW5cIikpO1oucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChaKX1jYXRjaChhYSl7cmV0dXJufUo9dHJ1ZTt2YXIgWD1VLmxlbmd0aDtmb3IodmFyIFk9MDtZPFg7WSsrKXtVW1ldKCl9fWZ1bmN0aW9uIEsoWCl7aWYoSil7WCgpfWVsc2V7VVtVLmxlbmd0aF09WH19ZnVuY3Rpb24gcyhZKXtpZih0eXBlb2YgTy5hZGRFdmVudExpc3RlbmVyIT1EKXtPLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsWSxmYWxzZSl9ZWxzZXtpZih0eXBlb2Ygai5hZGRFdmVudExpc3RlbmVyIT1EKXtqLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsWSxmYWxzZSl9ZWxzZXtpZih0eXBlb2YgTy5hdHRhY2hFdmVudCE9RCl7aShPLFwib25sb2FkXCIsWSl9ZWxzZXtpZih0eXBlb2YgTy5vbmxvYWQ9PVwiZnVuY3Rpb25cIil7dmFyIFg9Ty5vbmxvYWQ7Ty5vbmxvYWQ9ZnVuY3Rpb24oKXtYKCk7WSgpfX1lbHNle08ub25sb2FkPVl9fX19fWZ1bmN0aW9uIGgoKXtpZihUKXtWKCl9ZWxzZXtIKCl9fWZ1bmN0aW9uIFYoKXt2YXIgWD1qLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYm9keVwiKVswXTt2YXIgYWE9QyhyKTthYS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIscSk7dmFyIFo9WC5hcHBlbmRDaGlsZChhYSk7aWYoWil7dmFyIFk9MDsoZnVuY3Rpb24oKXtpZih0eXBlb2YgWi5HZXRWYXJpYWJsZSE9RCl7dmFyIGFiPVouR2V0VmFyaWFibGUoXCIkdmVyc2lvblwiKTtpZihhYil7YWI9YWIuc3BsaXQoXCIgXCIpWzFdLnNwbGl0KFwiLFwiKTtNLnB2PVtwYXJzZUludChhYlswXSwxMCkscGFyc2VJbnQoYWJbMV0sMTApLHBhcnNlSW50KGFiWzJdLDEwKV19fWVsc2V7aWYoWTwxMCl7WSsrO3NldFRpbWVvdXQoYXJndW1lbnRzLmNhbGxlZSwxMCk7cmV0dXJufX1YLnJlbW92ZUNoaWxkKGFhKTtaPW51bGw7SCgpfSkoKX1lbHNle0goKX19ZnVuY3Rpb24gSCgpe3ZhciBhZz1vLmxlbmd0aDtpZihhZz4wKXtmb3IodmFyIGFmPTA7YWY8YWc7YWYrKyl7dmFyIFk9b1thZl0uaWQ7dmFyIGFiPW9bYWZdLmNhbGxiYWNrRm47dmFyIGFhPXtzdWNjZXNzOmZhbHNlLGlkOll9O2lmKE0ucHZbMF0+MCl7dmFyIGFlPWMoWSk7aWYoYWUpe2lmKEYob1thZl0uc3dmVmVyc2lvbikmJiEoTS53ayYmTS53azwzMTIpKXt3KFksdHJ1ZSk7aWYoYWIpe2FhLnN1Y2Nlc3M9dHJ1ZTthYS5yZWY9eihZKTthYihhYSl9fWVsc2V7aWYob1thZl0uZXhwcmVzc0luc3RhbGwmJkEoKSl7dmFyIGFpPXt9O2FpLmRhdGE9b1thZl0uZXhwcmVzc0luc3RhbGw7YWkud2lkdGg9YWUuZ2V0QXR0cmlidXRlKFwid2lkdGhcIil8fFwiMFwiO2FpLmhlaWdodD1hZS5nZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIil8fFwiMFwiO2lmKGFlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpKXthaS5zdHlsZWNsYXNzPWFlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfWlmKGFlLmdldEF0dHJpYnV0ZShcImFsaWduXCIpKXthaS5hbGlnbj1hZS5nZXRBdHRyaWJ1dGUoXCJhbGlnblwiKX12YXIgYWg9e307dmFyIFg9YWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwYXJhbVwiKTt2YXIgYWM9WC5sZW5ndGg7Zm9yKHZhciBhZD0wO2FkPGFjO2FkKyspe2lmKFhbYWRdLmdldEF0dHJpYnV0ZShcIm5hbWVcIikudG9Mb3dlckNhc2UoKSE9XCJtb3ZpZVwiKXthaFtYW2FkXS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpXT1YW2FkXS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKX19UChhaSxhaCxZLGFiKX1lbHNle3AoYWUpO2lmKGFiKXthYihhYSl9fX19fWVsc2V7dyhZLHRydWUpO2lmKGFiKXt2YXIgWj16KFkpO2lmKFomJnR5cGVvZiBaLlNldFZhcmlhYmxlIT1EKXthYS5zdWNjZXNzPXRydWU7YWEucmVmPVp9YWIoYWEpfX19fX1mdW5jdGlvbiB6KGFhKXt2YXIgWD1udWxsO3ZhciBZPWMoYWEpO2lmKFkmJlkubm9kZU5hbWU9PVwiT0JKRUNUXCIpe2lmKHR5cGVvZiBZLlNldFZhcmlhYmxlIT1EKXtYPVl9ZWxzZXt2YXIgWj1ZLmdldEVsZW1lbnRzQnlUYWdOYW1lKHIpWzBdO2lmKFope1g9Wn19fXJldHVybiBYfWZ1bmN0aW9uIEEoKXtyZXR1cm4gIWEmJkYoXCI2LjAuNjVcIikmJihNLndpbnx8TS5tYWMpJiYhKE0ud2smJk0ud2s8MzEyKX1mdW5jdGlvbiBQKGFhLGFiLFgsWil7YT10cnVlO0U9Wnx8bnVsbDtCPXtzdWNjZXNzOmZhbHNlLGlkOlh9O3ZhciBhZT1jKFgpO2lmKGFlKXtpZihhZS5ub2RlTmFtZT09XCJPQkpFQ1RcIil7bD1nKGFlKTtRPW51bGx9ZWxzZXtsPWFlO1E9WH1hYS5pZD1SO2lmKHR5cGVvZiBhYS53aWR0aD09RHx8KCEvJSQvLnRlc3QoYWEud2lkdGgpJiZwYXJzZUludChhYS53aWR0aCwxMCk8MzEwKSl7YWEud2lkdGg9XCIzMTBcIn1pZih0eXBlb2YgYWEuaGVpZ2h0PT1EfHwoIS8lJC8udGVzdChhYS5oZWlnaHQpJiZwYXJzZUludChhYS5oZWlnaHQsMTApPDEzNykpe2FhLmhlaWdodD1cIjEzN1wifWoudGl0bGU9ai50aXRsZS5zbGljZSgwLDQ3KStcIiAtIEZsYXNoIFBsYXllciBJbnN0YWxsYXRpb25cIjt2YXIgYWQ9TS5pZSYmTS53aW4/KFsnQWN0aXZlJ10uY29uY2F0KCcnKS5qb2luKCdYJykpOlwiUGx1Z0luXCIsYWM9XCJNTXJlZGlyZWN0VVJMPVwiK08ubG9jYXRpb24udG9TdHJpbmcoKS5yZXBsYWNlKC8mL2csXCIlMjZcIikrXCImTU1wbGF5ZXJUeXBlPVwiK2FkK1wiJk1NZG9jdGl0bGU9XCIrai50aXRsZTtpZih0eXBlb2YgYWIuZmxhc2h2YXJzIT1EKXthYi5mbGFzaHZhcnMrPVwiJlwiK2FjfWVsc2V7YWIuZmxhc2h2YXJzPWFjfWlmKE0uaWUmJk0ud2luJiZhZS5yZWFkeVN0YXRlIT00KXt2YXIgWT1DKFwiZGl2XCIpO1grPVwiU1dGT2JqZWN0TmV3XCI7WS5zZXRBdHRyaWJ1dGUoXCJpZFwiLFgpO2FlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKFksYWUpO2FlLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7KGZ1bmN0aW9uKCl7aWYoYWUucmVhZHlTdGF0ZT09NCl7YWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChhZSl9ZWxzZXtzZXRUaW1lb3V0KGFyZ3VtZW50cy5jYWxsZWUsMTApfX0pKCl9dShhYSxhYixYKX19ZnVuY3Rpb24gcChZKXtpZihNLmllJiZNLndpbiYmWS5yZWFkeVN0YXRlIT00KXt2YXIgWD1DKFwiZGl2XCIpO1kucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoWCxZKTtYLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGcoWSksWCk7WS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiOyhmdW5jdGlvbigpe2lmKFkucmVhZHlTdGF0ZT09NCl7WS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKFkpfWVsc2V7c2V0VGltZW91dChhcmd1bWVudHMuY2FsbGVlLDEwKX19KSgpfWVsc2V7WS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChnKFkpLFkpfX1mdW5jdGlvbiBnKGFiKXt2YXIgYWE9QyhcImRpdlwiKTtpZihNLndpbiYmTS5pZSl7YWEuaW5uZXJIVE1MPWFiLmlubmVySFRNTH1lbHNle3ZhciBZPWFiLmdldEVsZW1lbnRzQnlUYWdOYW1lKHIpWzBdO2lmKFkpe3ZhciBhZD1ZLmNoaWxkTm9kZXM7aWYoYWQpe3ZhciBYPWFkLmxlbmd0aDtmb3IodmFyIFo9MDtaPFg7WisrKXtpZighKGFkW1pdLm5vZGVUeXBlPT0xJiZhZFtaXS5ub2RlTmFtZT09XCJQQVJBTVwiKSYmIShhZFtaXS5ub2RlVHlwZT09OCkpe2FhLmFwcGVuZENoaWxkKGFkW1pdLmNsb25lTm9kZSh0cnVlKSl9fX19fXJldHVybiBhYX1mdW5jdGlvbiB1KGFpLGFnLFkpe3ZhciBYLGFhPWMoWSk7aWYoTS53ayYmTS53azwzMTIpe3JldHVybiBYfWlmKGFhKXtpZih0eXBlb2YgYWkuaWQ9PUQpe2FpLmlkPVl9aWYoTS5pZSYmTS53aW4pe3ZhciBhaD1cIlwiO2Zvcih2YXIgYWUgaW4gYWkpe2lmKGFpW2FlXSE9T2JqZWN0LnByb3RvdHlwZVthZV0pe2lmKGFlLnRvTG93ZXJDYXNlKCk9PVwiZGF0YVwiKXthZy5tb3ZpZT1haVthZV19ZWxzZXtpZihhZS50b0xvd2VyQ2FzZSgpPT1cInN0eWxlY2xhc3NcIil7YWgrPScgY2xhc3M9XCInK2FpW2FlXSsnXCInfWVsc2V7aWYoYWUudG9Mb3dlckNhc2UoKSE9XCJjbGFzc2lkXCIpe2FoKz1cIiBcIithZSsnPVwiJythaVthZV0rJ1wiJ319fX19dmFyIGFmPVwiXCI7Zm9yKHZhciBhZCBpbiBhZyl7aWYoYWdbYWRdIT1PYmplY3QucHJvdG90eXBlW2FkXSl7YWYrPSc8cGFyYW0gbmFtZT1cIicrYWQrJ1wiIHZhbHVlPVwiJythZ1thZF0rJ1wiIC8+J319YWEub3V0ZXJIVE1MPSc8b2JqZWN0IGNsYXNzaWQ9XCJjbHNpZDpEMjdDREI2RS1BRTZELTExY2YtOTZCOC00NDQ1NTM1NDAwMDBcIicrYWgrXCI+XCIrYWYrXCI8L29iamVjdD5cIjtOW04ubGVuZ3RoXT1haS5pZDtYPWMoYWkuaWQpfWVsc2V7dmFyIFo9QyhyKTtaLnNldEF0dHJpYnV0ZShcInR5cGVcIixxKTtmb3IodmFyIGFjIGluIGFpKXtpZihhaVthY10hPU9iamVjdC5wcm90b3R5cGVbYWNdKXtpZihhYy50b0xvd2VyQ2FzZSgpPT1cInN0eWxlY2xhc3NcIil7Wi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGFpW2FjXSl9ZWxzZXtpZihhYy50b0xvd2VyQ2FzZSgpIT1cImNsYXNzaWRcIil7Wi5zZXRBdHRyaWJ1dGUoYWMsYWlbYWNdKX19fX1mb3IodmFyIGFiIGluIGFnKXtpZihhZ1thYl0hPU9iamVjdC5wcm90b3R5cGVbYWJdJiZhYi50b0xvd2VyQ2FzZSgpIT1cIm1vdmllXCIpe2UoWixhYixhZ1thYl0pfX1hYS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChaLGFhKTtYPVp9fXJldHVybiBYfWZ1bmN0aW9uIGUoWixYLFkpe3ZhciBhYT1DKFwicGFyYW1cIik7YWEuc2V0QXR0cmlidXRlKFwibmFtZVwiLFgpO2FhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsWSk7Wi5hcHBlbmRDaGlsZChhYSl9ZnVuY3Rpb24geShZKXt2YXIgWD1jKFkpO2lmKFgmJlgubm9kZU5hbWU9PVwiT0JKRUNUXCIpe2lmKE0uaWUmJk0ud2luKXtYLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7KGZ1bmN0aW9uKCl7aWYoWC5yZWFkeVN0YXRlPT00KXtiKFkpfWVsc2V7c2V0VGltZW91dChhcmd1bWVudHMuY2FsbGVlLDEwKX19KSgpfWVsc2V7WC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKFgpfX19ZnVuY3Rpb24gYihaKXt2YXIgWT1jKFopO2lmKFkpe2Zvcih2YXIgWCBpbiBZKXtpZih0eXBlb2YgWVtYXT09XCJmdW5jdGlvblwiKXtZW1hdPW51bGx9fVkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChZKX19ZnVuY3Rpb24gYyhaKXt2YXIgWD1udWxsO3RyeXtYPWouZ2V0RWxlbWVudEJ5SWQoWil9Y2F0Y2goWSl7fXJldHVybiBYfWZ1bmN0aW9uIEMoWCl7cmV0dXJuIGouY3JlYXRlRWxlbWVudChYKX1mdW5jdGlvbiBpKFosWCxZKXtaLmF0dGFjaEV2ZW50KFgsWSk7SVtJLmxlbmd0aF09W1osWCxZXX1mdW5jdGlvbiBGKFope3ZhciBZPU0ucHYsWD1aLnNwbGl0KFwiLlwiKTtYWzBdPXBhcnNlSW50KFhbMF0sMTApO1hbMV09cGFyc2VJbnQoWFsxXSwxMCl8fDA7WFsyXT1wYXJzZUludChYWzJdLDEwKXx8MDtyZXR1cm4oWVswXT5YWzBdfHwoWVswXT09WFswXSYmWVsxXT5YWzFdKXx8KFlbMF09PVhbMF0mJllbMV09PVhbMV0mJllbMl0+PVhbMl0pKT90cnVlOmZhbHNlfWZ1bmN0aW9uIHYoYWMsWSxhZCxhYil7aWYoTS5pZSYmTS5tYWMpe3JldHVybn12YXIgYWE9ai5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07aWYoIWFhKXtyZXR1cm59dmFyIFg9KGFkJiZ0eXBlb2YgYWQ9PVwic3RyaW5nXCIpP2FkOlwic2NyZWVuXCI7aWYoYWIpe249bnVsbDtHPW51bGx9aWYoIW58fEchPVgpe3ZhciBaPUMoXCJzdHlsZVwiKTtaLnNldEF0dHJpYnV0ZShcInR5cGVcIixcInRleHQvY3NzXCIpO1ouc2V0QXR0cmlidXRlKFwibWVkaWFcIixYKTtuPWFhLmFwcGVuZENoaWxkKFopO2lmKE0uaWUmJk0ud2luJiZ0eXBlb2Ygai5zdHlsZVNoZWV0cyE9RCYmai5zdHlsZVNoZWV0cy5sZW5ndGg+MCl7bj1qLnN0eWxlU2hlZXRzW2ouc3R5bGVTaGVldHMubGVuZ3RoLTFdfUc9WH1pZihNLmllJiZNLndpbil7aWYobiYmdHlwZW9mIG4uYWRkUnVsZT09cil7bi5hZGRSdWxlKGFjLFkpfX1lbHNle2lmKG4mJnR5cGVvZiBqLmNyZWF0ZVRleHROb2RlIT1EKXtuLmFwcGVuZENoaWxkKGouY3JlYXRlVGV4dE5vZGUoYWMrXCIge1wiK1krXCJ9XCIpKX19fWZ1bmN0aW9uIHcoWixYKXtpZighbSl7cmV0dXJufXZhciBZPVg/XCJ2aXNpYmxlXCI6XCJoaWRkZW5cIjtpZihKJiZjKFopKXtjKFopLnN0eWxlLnZpc2liaWxpdHk9WX1lbHNle3YoXCIjXCIrWixcInZpc2liaWxpdHk6XCIrWSl9fWZ1bmN0aW9uIEwoWSl7dmFyIFo9L1tcXFxcXFxcIjw+XFwuO10vO3ZhciBYPVouZXhlYyhZKSE9bnVsbDtyZXR1cm4gWCYmdHlwZW9mIGVuY29kZVVSSUNvbXBvbmVudCE9RD9lbmNvZGVVUklDb21wb25lbnQoWSk6WX12YXIgZD1mdW5jdGlvbigpe2lmKE0uaWUmJk0ud2luKXt3aW5kb3cuYXR0YWNoRXZlbnQoXCJvbnVubG9hZFwiLGZ1bmN0aW9uKCl7dmFyIGFjPUkubGVuZ3RoO2Zvcih2YXIgYWI9MDthYjxhYzthYisrKXtJW2FiXVswXS5kZXRhY2hFdmVudChJW2FiXVsxXSxJW2FiXVsyXSl9dmFyIFo9Ti5sZW5ndGg7Zm9yKHZhciBhYT0wO2FhPFo7YWErKyl7eShOW2FhXSl9Zm9yKHZhciBZIGluIE0pe01bWV09bnVsbH1NPW51bGw7Zm9yKHZhciBYIGluIHN3Zm9iamVjdCl7c3dmb2JqZWN0W1hdPW51bGx9c3dmb2JqZWN0PW51bGx9KX19KCk7cmV0dXJue3JlZ2lzdGVyT2JqZWN0OmZ1bmN0aW9uKGFiLFgsYWEsWil7aWYoTS53MyYmYWImJlgpe3ZhciBZPXt9O1kuaWQ9YWI7WS5zd2ZWZXJzaW9uPVg7WS5leHByZXNzSW5zdGFsbD1hYTtZLmNhbGxiYWNrRm49WjtvW28ubGVuZ3RoXT1ZO3coYWIsZmFsc2UpfWVsc2V7aWYoWil7Wih7c3VjY2VzczpmYWxzZSxpZDphYn0pfX19LGdldE9iamVjdEJ5SWQ6ZnVuY3Rpb24oWCl7aWYoTS53Myl7cmV0dXJuIHooWCl9fSxlbWJlZFNXRjpmdW5jdGlvbihhYixhaCxhZSxhZyxZLGFhLFosYWQsYWYsYWMpe3ZhciBYPXtzdWNjZXNzOmZhbHNlLGlkOmFofTtpZihNLnczJiYhKE0ud2smJk0ud2s8MzEyKSYmYWImJmFoJiZhZSYmYWcmJlkpe3coYWgsZmFsc2UpO0soZnVuY3Rpb24oKXthZSs9XCJcIjthZys9XCJcIjt2YXIgYWo9e307aWYoYWYmJnR5cGVvZiBhZj09PXIpe2Zvcih2YXIgYWwgaW4gYWYpe2FqW2FsXT1hZlthbF19fWFqLmRhdGE9YWI7YWoud2lkdGg9YWU7YWouaGVpZ2h0PWFnO3ZhciBhbT17fTtpZihhZCYmdHlwZW9mIGFkPT09cil7Zm9yKHZhciBhayBpbiBhZCl7YW1bYWtdPWFkW2FrXX19aWYoWiYmdHlwZW9mIFo9PT1yKXtmb3IodmFyIGFpIGluIFope2lmKHR5cGVvZiBhbS5mbGFzaHZhcnMhPUQpe2FtLmZsYXNodmFycys9XCImXCIrYWkrXCI9XCIrWlthaV19ZWxzZXthbS5mbGFzaHZhcnM9YWkrXCI9XCIrWlthaV19fX1pZihGKFkpKXt2YXIgYW49dShhaixhbSxhaCk7aWYoYWouaWQ9PWFoKXt3KGFoLHRydWUpfVguc3VjY2Vzcz10cnVlO1gucmVmPWFufWVsc2V7aWYoYWEmJkEoKSl7YWouZGF0YT1hYTtQKGFqLGFtLGFoLGFjKTtyZXR1cm59ZWxzZXt3KGFoLHRydWUpfX1pZihhYyl7YWMoWCl9fSl9ZWxzZXtpZihhYyl7YWMoWCl9fX0sc3dpdGNoT2ZmQXV0b0hpZGVTaG93OmZ1bmN0aW9uKCl7bT1mYWxzZX0sdWE6TSxnZXRGbGFzaFBsYXllclZlcnNpb246ZnVuY3Rpb24oKXtyZXR1cm57bWFqb3I6TS5wdlswXSxtaW5vcjpNLnB2WzFdLHJlbGVhc2U6TS5wdlsyXX19LGhhc0ZsYXNoUGxheWVyVmVyc2lvbjpGLGNyZWF0ZVNXRjpmdW5jdGlvbihaLFksWCl7aWYoTS53Myl7cmV0dXJuIHUoWixZLFgpfWVsc2V7cmV0dXJuIHVuZGVmaW5lZH19LHNob3dFeHByZXNzSW5zdGFsbDpmdW5jdGlvbihaLGFhLFgsWSl7aWYoTS53MyYmQSgpKXtQKFosYWEsWCxZKX19LHJlbW92ZVNXRjpmdW5jdGlvbihYKXtpZihNLnczKXt5KFgpfX0sY3JlYXRlQ1NTOmZ1bmN0aW9uKGFhLFosWSxYKXtpZihNLnczKXt2KGFhLFosWSxYKX19LGFkZERvbUxvYWRFdmVudDpLLGFkZExvYWRFdmVudDpzLGdldFF1ZXJ5UGFyYW1WYWx1ZTpmdW5jdGlvbihhYSl7dmFyIFo9ai5sb2NhdGlvbi5zZWFyY2h8fGoubG9jYXRpb24uaGFzaDtpZihaKXtpZigvXFw/Ly50ZXN0KFopKXtaPVouc3BsaXQoXCI/XCIpWzFdfWlmKGFhPT1udWxsKXtyZXR1cm4gTChaKX12YXIgWT1aLnNwbGl0KFwiJlwiKTtmb3IodmFyIFg9MDtYPFkubGVuZ3RoO1grKyl7aWYoWVtYXS5zdWJzdHJpbmcoMCxZW1hdLmluZGV4T2YoXCI9XCIpKT09YWEpe3JldHVybiBMKFlbWF0uc3Vic3RyaW5nKChZW1hdLmluZGV4T2YoXCI9XCIpKzEpKSl9fX1yZXR1cm5cIlwifSxleHByZXNzSW5zdGFsbENhbGxiYWNrOmZ1bmN0aW9uKCl7aWYoYSl7dmFyIFg9YyhSKTtpZihYJiZsKXtYLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGwsWCk7aWYoUSl7dyhRLHRydWUpO2lmKE0uaWUmJk0ud2luKXtsLnN0eWxlLmRpc3BsYXk9XCJibG9ja1wifX1pZihFKXtFKEIpfX1hPWZhbHNlfX19fSgpO1xyXG5cdH1cclxuXHQvLyBDb3B5cmlnaHQ6IEhpcm9zaGkgSWNoaWthd2EgPGh0dHA6Ly9naW1pdGUubmV0L2VuLz5cclxuXHQvLyBMaWNlbnNlOiBOZXcgQlNEIExpY2Vuc2VcclxuXHQvLyBSZWZlcmVuY2U6IGh0dHA6Ly9kZXYudzMub3JnL2h0bWw1L3dlYnNvY2tldHMvXHJcblx0Ly8gUmVmZXJlbmNlOiBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1oaXhpZS10aGV3ZWJzb2NrZXRwcm90b2NvbFxyXG5cdFxyXG5cdChmdW5jdGlvbigpIHtcclxuXHQgIFxyXG5cdCAgaWYgKCd1bmRlZmluZWQnID09IHR5cGVvZiB3aW5kb3cgfHwgd2luZG93LldlYlNvY2tldCkgcmV0dXJuO1xyXG5cdFxyXG5cdCAgdmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcclxuXHQgIGlmICghY29uc29sZSB8fCAhY29uc29sZS5sb2cgfHwgIWNvbnNvbGUuZXJyb3IpIHtcclxuXHQgICAgY29uc29sZSA9IHtsb2c6IGZ1bmN0aW9uKCl7IH0sIGVycm9yOiBmdW5jdGlvbigpeyB9fTtcclxuXHQgIH1cclxuXHQgIFxyXG5cdCAgaWYgKCFzd2ZvYmplY3QuaGFzRmxhc2hQbGF5ZXJWZXJzaW9uKFwiMTAuMC4wXCIpKSB7XHJcblx0ICAgIGNvbnNvbGUuZXJyb3IoXCJGbGFzaCBQbGF5ZXIgPj0gMTAuMC4wIGlzIHJlcXVpcmVkLlwiKTtcclxuXHQgICAgcmV0dXJuO1xyXG5cdCAgfVxyXG5cdCAgaWYgKGxvY2F0aW9uLnByb3RvY29sID09IFwiZmlsZTpcIikge1xyXG5cdCAgICBjb25zb2xlLmVycm9yKFxyXG5cdCAgICAgIFwiV0FSTklORzogd2ViLXNvY2tldC1qcyBkb2Vzbid0IHdvcmsgaW4gZmlsZTovLy8uLi4gVVJMIFwiICtcclxuXHQgICAgICBcInVubGVzcyB5b3Ugc2V0IEZsYXNoIFNlY3VyaXR5IFNldHRpbmdzIHByb3Blcmx5LiBcIiArXHJcblx0ICAgICAgXCJPcGVuIHRoZSBwYWdlIHZpYSBXZWIgc2VydmVyIGkuZS4gaHR0cDovLy4uLlwiKTtcclxuXHQgIH1cclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgZmF1eCB3ZWIgc29ja2V0LlxyXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxyXG5cdCAgICogQHBhcmFtIHthcnJheSBvciBzdHJpbmd9IHByb3RvY29sc1xyXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHByb3h5SG9zdFxyXG5cdCAgICogQHBhcmFtIHtpbnR9IHByb3h5UG9ydFxyXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IGhlYWRlcnNcclxuXHQgICAqL1xyXG5cdCAgV2ViU29ja2V0ID0gZnVuY3Rpb24odXJsLCBwcm90b2NvbHMsIHByb3h5SG9zdCwgcHJveHlQb3J0LCBoZWFkZXJzKSB7XHJcblx0ICAgIHZhciBzZWxmID0gdGhpcztcclxuXHQgICAgc2VsZi5fX2lkID0gV2ViU29ja2V0Ll9fbmV4dElkKys7XHJcblx0ICAgIFdlYlNvY2tldC5fX2luc3RhbmNlc1tzZWxmLl9faWRdID0gc2VsZjtcclxuXHQgICAgc2VsZi5yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNPTk5FQ1RJTkc7XHJcblx0ICAgIHNlbGYuYnVmZmVyZWRBbW91bnQgPSAwO1xyXG5cdCAgICBzZWxmLl9fZXZlbnRzID0ge307XHJcblx0ICAgIGlmICghcHJvdG9jb2xzKSB7XHJcblx0ICAgICAgcHJvdG9jb2xzID0gW107XHJcblx0ICAgIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvY29scyA9PSBcInN0cmluZ1wiKSB7XHJcblx0ICAgICAgcHJvdG9jb2xzID0gW3Byb3RvY29sc107XHJcblx0ICAgIH1cclxuXHQgICAgLy8gVXNlcyBzZXRUaW1lb3V0KCkgdG8gbWFrZSBzdXJlIF9fY3JlYXRlRmxhc2goKSBydW5zIGFmdGVyIHRoZSBjYWxsZXIgc2V0cyB3cy5vbm9wZW4gZXRjLlxyXG5cdCAgICAvLyBPdGhlcndpc2UsIHdoZW4gb25vcGVuIGZpcmVzIGltbWVkaWF0ZWx5LCBvbm9wZW4gaXMgY2FsbGVkIGJlZm9yZSBpdCBpcyBzZXQuXHJcblx0ICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0ICAgICAgV2ViU29ja2V0Ll9fYWRkVGFzayhmdW5jdGlvbigpIHtcclxuXHQgICAgICAgIFdlYlNvY2tldC5fX2ZsYXNoLmNyZWF0ZShcclxuXHQgICAgICAgICAgICBzZWxmLl9faWQsIHVybCwgcHJvdG9jb2xzLCBwcm94eUhvc3QgfHwgbnVsbCwgcHJveHlQb3J0IHx8IDAsIGhlYWRlcnMgfHwgbnVsbCk7XHJcblx0ICAgICAgfSk7XHJcblx0ICAgIH0sIDApO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogU2VuZCBkYXRhIHRvIHRoZSB3ZWIgc29ja2V0LlxyXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgIFRoZSBkYXRhIHRvIHNlbmQgdG8gdGhlIHNvY2tldC5cclxuXHQgICAqIEByZXR1cm4ge2Jvb2xlYW59ICBUcnVlIGZvciBzdWNjZXNzLCBmYWxzZSBmb3IgZmFpbHVyZS5cclxuXHQgICAqL1xyXG5cdCAgV2ViU29ja2V0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oZGF0YSkge1xyXG5cdCAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09IFdlYlNvY2tldC5DT05ORUNUSU5HKSB7XHJcblx0ICAgICAgdGhyb3cgXCJJTlZBTElEX1NUQVRFX0VSUjogV2ViIFNvY2tldCBjb25uZWN0aW9uIGhhcyBub3QgYmVlbiBlc3RhYmxpc2hlZFwiO1xyXG5cdCAgICB9XHJcblx0ICAgIC8vIFdlIHVzZSBlbmNvZGVVUklDb21wb25lbnQoKSBoZXJlLCBiZWNhdXNlIEZBQnJpZGdlIGRvZXNuJ3Qgd29yayBpZlxyXG5cdCAgICAvLyB0aGUgYXJndW1lbnQgaW5jbHVkZXMgc29tZSBjaGFyYWN0ZXJzLiBXZSBkb24ndCB1c2UgZXNjYXBlKCkgaGVyZVxyXG5cdCAgICAvLyBiZWNhdXNlIG9mIHRoaXM6XHJcblx0ICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0NvcmVfSmF2YVNjcmlwdF8xLjVfR3VpZGUvRnVuY3Rpb25zI2VzY2FwZV9hbmRfdW5lc2NhcGVfRnVuY3Rpb25zXHJcblx0ICAgIC8vIEJ1dCBpdCBsb29rcyBkZWNvZGVVUklDb21wb25lbnQoZW5jb2RlVVJJQ29tcG9uZW50KHMpKSBkb2Vzbid0XHJcblx0ICAgIC8vIHByZXNlcnZlIGFsbCBVbmljb2RlIGNoYXJhY3RlcnMgZWl0aGVyIGUuZy4gXCJcXHVmZmZmXCIgaW4gRmlyZWZveC5cclxuXHQgICAgLy8gTm90ZSBieSB3dHJpdGNoOiBIb3BlZnVsbHkgdGhpcyB3aWxsIG5vdCBiZSBuZWNlc3NhcnkgdXNpbmcgRXh0ZXJuYWxJbnRlcmZhY2UuICBXaWxsIHJlcXVpcmVcclxuXHQgICAgLy8gYWRkaXRpb25hbCB0ZXN0aW5nLlxyXG5cdCAgICB2YXIgcmVzdWx0ID0gV2ViU29ja2V0Ll9fZmxhc2guc2VuZCh0aGlzLl9faWQsIGVuY29kZVVSSUNvbXBvbmVudChkYXRhKSk7XHJcblx0ICAgIGlmIChyZXN1bHQgPCAwKSB7IC8vIHN1Y2Nlc3NcclxuXHQgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICB0aGlzLmJ1ZmZlcmVkQW1vdW50ICs9IHJlc3VsdDtcclxuXHQgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgIH1cclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIENsb3NlIHRoaXMgd2ViIHNvY2tldCBncmFjZWZ1bGx5LlxyXG5cdCAgICovXHJcblx0ICBXZWJTb2NrZXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XHJcblx0ICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT0gV2ViU29ja2V0LkNMT1NFRCB8fCB0aGlzLnJlYWR5U3RhdGUgPT0gV2ViU29ja2V0LkNMT1NJTkcpIHtcclxuXHQgICAgICByZXR1cm47XHJcblx0ICAgIH1cclxuXHQgICAgdGhpcy5yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNMT1NJTkc7XHJcblx0ICAgIFdlYlNvY2tldC5fX2ZsYXNoLmNsb3NlKHRoaXMuX19pZCk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBJbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgPGEgaHJlZj1cImh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLUV2ZW50cy9ldmVudHMuaHRtbCNFdmVudHMtcmVnaXN0cmF0aW9uXCI+RE9NIDIgRXZlbnRUYXJnZXQgSW50ZXJmYWNlPC9hPn1cclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxyXG5cdCAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXJcclxuXHQgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlQ2FwdHVyZVxyXG5cdCAgICogQHJldHVybiB2b2lkXHJcblx0ICAgKi9cclxuXHQgIFdlYlNvY2tldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKSB7XHJcblx0ICAgIGlmICghKHR5cGUgaW4gdGhpcy5fX2V2ZW50cykpIHtcclxuXHQgICAgICB0aGlzLl9fZXZlbnRzW3R5cGVdID0gW107XHJcblx0ICAgIH1cclxuXHQgICAgdGhpcy5fX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEltcGxlbWVudGF0aW9uIG9mIHtAbGluayA8YSBocmVmPVwiaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItRXZlbnRzL2V2ZW50cy5odG1sI0V2ZW50cy1yZWdpc3RyYXRpb25cIj5ET00gMiBFdmVudFRhcmdldCBJbnRlcmZhY2U8L2E+fVxyXG5cdCAgICpcclxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXHJcblx0ICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lclxyXG5cdCAgICogQHBhcmFtIHtib29sZWFufSB1c2VDYXB0dXJlXHJcblx0ICAgKiBAcmV0dXJuIHZvaWRcclxuXHQgICAqL1xyXG5cdCAgV2ViU29ja2V0LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpIHtcclxuXHQgICAgaWYgKCEodHlwZSBpbiB0aGlzLl9fZXZlbnRzKSkgcmV0dXJuO1xyXG5cdCAgICB2YXIgZXZlbnRzID0gdGhpcy5fX2V2ZW50c1t0eXBlXTtcclxuXHQgICAgZm9yICh2YXIgaSA9IGV2ZW50cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xyXG5cdCAgICAgIGlmIChldmVudHNbaV0gPT09IGxpc3RlbmVyKSB7XHJcblx0ICAgICAgICBldmVudHMuc3BsaWNlKGksIDEpO1xyXG5cdCAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBJbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgPGEgaHJlZj1cImh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLUV2ZW50cy9ldmVudHMuaHRtbCNFdmVudHMtcmVnaXN0cmF0aW9uXCI+RE9NIDIgRXZlbnRUYXJnZXQgSW50ZXJmYWNlPC9hPn1cclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxyXG5cdCAgICogQHJldHVybiB2b2lkXHJcblx0ICAgKi9cclxuXHQgIFdlYlNvY2tldC5wcm90b3R5cGUuZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0ICAgIHZhciBldmVudHMgPSB0aGlzLl9fZXZlbnRzW2V2ZW50LnR5cGVdIHx8IFtdO1xyXG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7ICsraSkge1xyXG5cdCAgICAgIGV2ZW50c1tpXShldmVudCk7XHJcblx0ICAgIH1cclxuXHQgICAgdmFyIGhhbmRsZXIgPSB0aGlzW1wib25cIiArIGV2ZW50LnR5cGVdO1xyXG5cdCAgICBpZiAoaGFuZGxlcikgaGFuZGxlcihldmVudCk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBIYW5kbGVzIGFuIGV2ZW50IGZyb20gRmxhc2guXHJcblx0ICAgKiBAcGFyYW0ge09iamVjdH0gZmxhc2hFdmVudFxyXG5cdCAgICovXHJcblx0ICBXZWJTb2NrZXQucHJvdG90eXBlLl9faGFuZGxlRXZlbnQgPSBmdW5jdGlvbihmbGFzaEV2ZW50KSB7XHJcblx0ICAgIGlmIChcInJlYWR5U3RhdGVcIiBpbiBmbGFzaEV2ZW50KSB7XHJcblx0ICAgICAgdGhpcy5yZWFkeVN0YXRlID0gZmxhc2hFdmVudC5yZWFkeVN0YXRlO1xyXG5cdCAgICB9XHJcblx0ICAgIGlmIChcInByb3RvY29sXCIgaW4gZmxhc2hFdmVudCkge1xyXG5cdCAgICAgIHRoaXMucHJvdG9jb2wgPSBmbGFzaEV2ZW50LnByb3RvY29sO1xyXG5cdCAgICB9XHJcblx0ICAgIFxyXG5cdCAgICB2YXIganNFdmVudDtcclxuXHQgICAgaWYgKGZsYXNoRXZlbnQudHlwZSA9PSBcIm9wZW5cIiB8fCBmbGFzaEV2ZW50LnR5cGUgPT0gXCJlcnJvclwiKSB7XHJcblx0ICAgICAganNFdmVudCA9IHRoaXMuX19jcmVhdGVTaW1wbGVFdmVudChmbGFzaEV2ZW50LnR5cGUpO1xyXG5cdCAgICB9IGVsc2UgaWYgKGZsYXNoRXZlbnQudHlwZSA9PSBcImNsb3NlXCIpIHtcclxuXHQgICAgICAvLyBUT0RPIGltcGxlbWVudCBqc0V2ZW50Lndhc0NsZWFuXHJcblx0ICAgICAganNFdmVudCA9IHRoaXMuX19jcmVhdGVTaW1wbGVFdmVudChcImNsb3NlXCIpO1xyXG5cdCAgICB9IGVsc2UgaWYgKGZsYXNoRXZlbnQudHlwZSA9PSBcIm1lc3NhZ2VcIikge1xyXG5cdCAgICAgIHZhciBkYXRhID0gZGVjb2RlVVJJQ29tcG9uZW50KGZsYXNoRXZlbnQubWVzc2FnZSk7XHJcblx0ICAgICAganNFdmVudCA9IHRoaXMuX19jcmVhdGVNZXNzYWdlRXZlbnQoXCJtZXNzYWdlXCIsIGRhdGEpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRocm93IFwidW5rbm93biBldmVudCB0eXBlOiBcIiArIGZsYXNoRXZlbnQudHlwZTtcclxuXHQgICAgfVxyXG5cdCAgICBcclxuXHQgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGpzRXZlbnQpO1xyXG5cdCAgfTtcclxuXHQgIFxyXG5cdCAgV2ViU29ja2V0LnByb3RvdHlwZS5fX2NyZWF0ZVNpbXBsZUV2ZW50ID0gZnVuY3Rpb24odHlwZSkge1xyXG5cdCAgICBpZiAoZG9jdW1lbnQuY3JlYXRlRXZlbnQgJiYgd2luZG93LkV2ZW50KSB7XHJcblx0ICAgICAgdmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcclxuXHQgICAgICBldmVudC5pbml0RXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlKTtcclxuXHQgICAgICByZXR1cm4gZXZlbnQ7XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgcmV0dXJuIHt0eXBlOiB0eXBlLCBidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2V9O1xyXG5cdCAgICB9XHJcblx0ICB9O1xyXG5cdCAgXHJcblx0ICBXZWJTb2NrZXQucHJvdG90eXBlLl9fY3JlYXRlTWVzc2FnZUV2ZW50ID0gZnVuY3Rpb24odHlwZSwgZGF0YSkge1xyXG5cdCAgICBpZiAoZG9jdW1lbnQuY3JlYXRlRXZlbnQgJiYgd2luZG93Lk1lc3NhZ2VFdmVudCAmJiAhd2luZG93Lm9wZXJhKSB7XHJcblx0ICAgICAgdmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNZXNzYWdlRXZlbnRcIik7XHJcblx0ICAgICAgZXZlbnQuaW5pdE1lc3NhZ2VFdmVudChcIm1lc3NhZ2VcIiwgZmFsc2UsIGZhbHNlLCBkYXRhLCBudWxsLCBudWxsLCB3aW5kb3csIG51bGwpO1xyXG5cdCAgICAgIHJldHVybiBldmVudDtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICAvLyBJRSBhbmQgT3BlcmEsIHRoZSBsYXR0ZXIgb25lIHRydW5jYXRlcyB0aGUgZGF0YSBwYXJhbWV0ZXIgYWZ0ZXIgYW55IDB4MDAgYnl0ZXMuXHJcblx0ICAgICAgcmV0dXJuIHt0eXBlOiB0eXBlLCBkYXRhOiBkYXRhLCBidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2V9O1xyXG5cdCAgICB9XHJcblx0ICB9O1xyXG5cdCAgXHJcblx0ICAvKipcclxuXHQgICAqIERlZmluZSB0aGUgV2ViU29ja2V0IHJlYWR5U3RhdGUgZW51bWVyYXRpb24uXHJcblx0ICAgKi9cclxuXHQgIFdlYlNvY2tldC5DT05ORUNUSU5HID0gMDtcclxuXHQgIFdlYlNvY2tldC5PUEVOID0gMTtcclxuXHQgIFdlYlNvY2tldC5DTE9TSU5HID0gMjtcclxuXHQgIFdlYlNvY2tldC5DTE9TRUQgPSAzO1xyXG5cdFxyXG5cdCAgV2ViU29ja2V0Ll9fZmxhc2ggPSBudWxsO1xyXG5cdCAgV2ViU29ja2V0Ll9faW5zdGFuY2VzID0ge307XHJcblx0ICBXZWJTb2NrZXQuX190YXNrcyA9IFtdO1xyXG5cdCAgV2ViU29ja2V0Ll9fbmV4dElkID0gMDtcclxuXHQgIFxyXG5cdCAgLyoqXHJcblx0ICAgKiBMb2FkIGEgbmV3IGZsYXNoIHNlY3VyaXR5IHBvbGljeSBmaWxlLlxyXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxyXG5cdCAgICovXHJcblx0ICBXZWJTb2NrZXQubG9hZEZsYXNoUG9saWN5RmlsZSA9IGZ1bmN0aW9uKHVybCl7XHJcblx0ICAgIFdlYlNvY2tldC5fX2FkZFRhc2soZnVuY3Rpb24oKSB7XHJcblx0ICAgICAgV2ViU29ja2V0Ll9fZmxhc2gubG9hZE1hbnVhbFBvbGljeUZpbGUodXJsKTtcclxuXHQgICAgfSk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBMb2FkcyBXZWJTb2NrZXRNYWluLnN3ZiBhbmQgY3JlYXRlcyBXZWJTb2NrZXRNYWluIG9iamVjdCBpbiBGbGFzaC5cclxuXHQgICAqL1xyXG5cdCAgV2ViU29ja2V0Ll9faW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdCAgICBpZiAoV2ViU29ja2V0Ll9fZmxhc2gpIHJldHVybjtcclxuXHQgICAgXHJcblx0ICAgIGlmIChXZWJTb2NrZXQuX19zd2ZMb2NhdGlvbikge1xyXG5cdCAgICAgIC8vIEZvciBiYWNrd29yZCBjb21wYXRpYmlsaXR5LlxyXG5cdCAgICAgIHdpbmRvdy5XRUJfU09DS0VUX1NXRl9MT0NBVElPTiA9IFdlYlNvY2tldC5fX3N3ZkxvY2F0aW9uO1xyXG5cdCAgICB9XHJcblx0ICAgIGlmICghd2luZG93LldFQl9TT0NLRVRfU1dGX0xPQ0FUSU9OKSB7XHJcblx0ICAgICAgY29uc29sZS5lcnJvcihcIltXZWJTb2NrZXRdIHNldCBXRUJfU09DS0VUX1NXRl9MT0NBVElPTiB0byBsb2NhdGlvbiBvZiBXZWJTb2NrZXRNYWluLnN3ZlwiKTtcclxuXHQgICAgICByZXR1cm47XHJcblx0ICAgIH1cclxuXHQgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblx0ICAgIGNvbnRhaW5lci5pZCA9IFwid2ViU29ja2V0Q29udGFpbmVyXCI7XHJcblx0ICAgIC8vIEhpZGVzIEZsYXNoIGJveC4gV2UgY2Fubm90IHVzZSBkaXNwbGF5OiBub25lIG9yIHZpc2liaWxpdHk6IGhpZGRlbiBiZWNhdXNlIGl0IHByZXZlbnRzXHJcblx0ICAgIC8vIEZsYXNoIGZyb20gbG9hZGluZyBhdCBsZWFzdCBpbiBJRS4gU28gd2UgbW92ZSBpdCBvdXQgb2YgdGhlIHNjcmVlbiBhdCAoLTEwMCwgLTEwMCkuXHJcblx0ICAgIC8vIEJ1dCB0aGlzIGV2ZW4gZG9lc24ndCB3b3JrIHdpdGggRmxhc2ggTGl0ZSAoZS5nLiBpbiBEcm9pZCBJbmNyZWRpYmxlKS4gU28gd2l0aCBGbGFzaFxyXG5cdCAgICAvLyBMaXRlLCB3ZSBwdXQgaXQgYXQgKDAsIDApLiBUaGlzIHNob3dzIDF4MSBib3ggdmlzaWJsZSBhdCBsZWZ0LXRvcCBjb3JuZXIgYnV0IHRoaXMgaXNcclxuXHQgICAgLy8gdGhlIGJlc3Qgd2UgY2FuIGRvIGFzIGZhciBhcyB3ZSBrbm93IG5vdy5cclxuXHQgICAgY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG5cdCAgICBpZiAoV2ViU29ja2V0Ll9faXNGbGFzaExpdGUoKSkge1xyXG5cdCAgICAgIGNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gXCIwcHhcIjtcclxuXHQgICAgICBjb250YWluZXIuc3R5bGUudG9wID0gXCIwcHhcIjtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICBjb250YWluZXIuc3R5bGUubGVmdCA9IFwiLTEwMHB4XCI7XHJcblx0ICAgICAgY29udGFpbmVyLnN0eWxlLnRvcCA9IFwiLTEwMHB4XCI7XHJcblx0ICAgIH1cclxuXHQgICAgdmFyIGhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblx0ICAgIGhvbGRlci5pZCA9IFwid2ViU29ja2V0Rmxhc2hcIjtcclxuXHQgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGhvbGRlcik7XHJcblx0ICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcclxuXHQgICAgLy8gU2VlIHRoaXMgYXJ0aWNsZSBmb3IgaGFzUHJpb3JpdHk6XHJcblx0ICAgIC8vIGh0dHA6Ly9oZWxwLmFkb2JlLmNvbS9lbl9VUy9hczMvbW9iaWxlL1dTNGJlYmNkNjZhNzQyNzVjMzZjZmI4MTM3MTI0MzE4ZWViYzYtN2ZmZC5odG1sXHJcblx0ICAgIHN3Zm9iamVjdC5lbWJlZFNXRihcclxuXHQgICAgICBXRUJfU09DS0VUX1NXRl9MT0NBVElPTixcclxuXHQgICAgICBcIndlYlNvY2tldEZsYXNoXCIsXHJcblx0ICAgICAgXCIxXCIgLyogd2lkdGggKi8sXHJcblx0ICAgICAgXCIxXCIgLyogaGVpZ2h0ICovLFxyXG5cdCAgICAgIFwiMTAuMC4wXCIgLyogU1dGIHZlcnNpb24gKi8sXHJcblx0ICAgICAgbnVsbCxcclxuXHQgICAgICBudWxsLFxyXG5cdCAgICAgIHtoYXNQcmlvcml0eTogdHJ1ZSwgc3dsaXZlY29ubmVjdCA6IHRydWUsIGFsbG93U2NyaXB0QWNjZXNzOiBcImFsd2F5c1wifSxcclxuXHQgICAgICBudWxsLFxyXG5cdCAgICAgIGZ1bmN0aW9uKGUpIHtcclxuXHQgICAgICAgIGlmICghZS5zdWNjZXNzKSB7XHJcblx0ICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV2ViU29ja2V0XSBzd2ZvYmplY3QuZW1iZWRTV0YgZmFpbGVkXCIpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgIH0pO1xyXG5cdCAgfTtcclxuXHQgIFxyXG5cdCAgLyoqXHJcblx0ICAgKiBDYWxsZWQgYnkgRmxhc2ggdG8gbm90aWZ5IEpTIHRoYXQgaXQncyBmdWxseSBsb2FkZWQgYW5kIHJlYWR5XHJcblx0ICAgKiBmb3IgY29tbXVuaWNhdGlvbi5cclxuXHQgICAqL1xyXG5cdCAgV2ViU29ja2V0Ll9fb25GbGFzaEluaXRpYWxpemVkID0gZnVuY3Rpb24oKSB7XHJcblx0ICAgIC8vIFdlIG5lZWQgdG8gc2V0IGEgdGltZW91dCBoZXJlIHRvIGF2b2lkIHJvdW5kLXRyaXAgY2FsbHNcclxuXHQgICAgLy8gdG8gZmxhc2ggZHVyaW5nIHRoZSBpbml0aWFsaXphdGlvbiBwcm9jZXNzLlxyXG5cdCAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdCAgICAgIFdlYlNvY2tldC5fX2ZsYXNoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3ZWJTb2NrZXRGbGFzaFwiKTtcclxuXHQgICAgICBXZWJTb2NrZXQuX19mbGFzaC5zZXRDYWxsZXJVcmwobG9jYXRpb24uaHJlZik7XHJcblx0ICAgICAgV2ViU29ja2V0Ll9fZmxhc2guc2V0RGVidWcoISF3aW5kb3cuV0VCX1NPQ0tFVF9ERUJVRyk7XHJcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBXZWJTb2NrZXQuX190YXNrcy5sZW5ndGg7ICsraSkge1xyXG5cdCAgICAgICAgV2ViU29ja2V0Ll9fdGFza3NbaV0oKTtcclxuXHQgICAgICB9XHJcblx0ICAgICAgV2ViU29ja2V0Ll9fdGFza3MgPSBbXTtcclxuXHQgICAgfSwgMCk7XHJcblx0ICB9O1xyXG5cdCAgXHJcblx0ICAvKipcclxuXHQgICAqIENhbGxlZCBieSBGbGFzaCB0byBub3RpZnkgV2ViU29ja2V0cyBldmVudHMgYXJlIGZpcmVkLlxyXG5cdCAgICovXHJcblx0ICBXZWJTb2NrZXQuX19vbkZsYXNoRXZlbnQgPSBmdW5jdGlvbigpIHtcclxuXHQgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHQgICAgICB0cnkge1xyXG5cdCAgICAgICAgLy8gR2V0cyBldmVudHMgdXNpbmcgcmVjZWl2ZUV2ZW50cygpIGluc3RlYWQgb2YgZ2V0dGluZyBpdCBmcm9tIGV2ZW50IG9iamVjdFxyXG5cdCAgICAgICAgLy8gb2YgRmxhc2ggZXZlbnQuIFRoaXMgaXMgdG8gbWFrZSBzdXJlIHRvIGtlZXAgbWVzc2FnZSBvcmRlci5cclxuXHQgICAgICAgIC8vIEl0IHNlZW1zIHNvbWV0aW1lcyBGbGFzaCBldmVudHMgZG9uJ3QgYXJyaXZlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZXkgYXJlIHNlbnQuXHJcblx0ICAgICAgICB2YXIgZXZlbnRzID0gV2ViU29ja2V0Ll9fZmxhc2gucmVjZWl2ZUV2ZW50cygpO1xyXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyArK2kpIHtcclxuXHQgICAgICAgICAgV2ViU29ja2V0Ll9faW5zdGFuY2VzW2V2ZW50c1tpXS53ZWJTb2NrZXRJZF0uX19oYW5kbGVFdmVudChldmVudHNbaV0pO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgIH0gY2F0Y2ggKGUpIHtcclxuXHQgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcblx0ICAgICAgfVxyXG5cdCAgICB9LCAwKTtcclxuXHQgICAgcmV0dXJuIHRydWU7XHJcblx0ICB9O1xyXG5cdCAgXHJcblx0ICAvLyBDYWxsZWQgYnkgRmxhc2guXHJcblx0ICBXZWJTb2NrZXQuX19sb2cgPSBmdW5jdGlvbihtZXNzYWdlKSB7XHJcblx0ICAgIGNvbnNvbGUubG9nKGRlY29kZVVSSUNvbXBvbmVudChtZXNzYWdlKSk7XHJcblx0ICB9O1xyXG5cdCAgXHJcblx0ICAvLyBDYWxsZWQgYnkgRmxhc2guXHJcblx0ICBXZWJTb2NrZXQuX19lcnJvciA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcclxuXHQgICAgY29uc29sZS5lcnJvcihkZWNvZGVVUklDb21wb25lbnQobWVzc2FnZSkpO1xyXG5cdCAgfTtcclxuXHQgIFxyXG5cdCAgV2ViU29ja2V0Ll9fYWRkVGFzayA9IGZ1bmN0aW9uKHRhc2spIHtcclxuXHQgICAgaWYgKFdlYlNvY2tldC5fX2ZsYXNoKSB7XHJcblx0ICAgICAgdGFzaygpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIFdlYlNvY2tldC5fX3Rhc2tzLnB1c2godGFzayk7XHJcblx0ICAgIH1cclxuXHQgIH07XHJcblx0ICBcclxuXHQgIC8qKlxyXG5cdCAgICogVGVzdCBpZiB0aGUgYnJvd3NlciBpcyBydW5uaW5nIGZsYXNoIGxpdGUuXHJcblx0ICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGZsYXNoIGxpdGUgaXMgcnVubmluZywgZmFsc2Ugb3RoZXJ3aXNlLlxyXG5cdCAgICovXHJcblx0ICBXZWJTb2NrZXQuX19pc0ZsYXNoTGl0ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdCAgICBpZiAoIXdpbmRvdy5uYXZpZ2F0b3IgfHwgIXdpbmRvdy5uYXZpZ2F0b3IubWltZVR5cGVzKSB7XHJcblx0ICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICB9XHJcblx0ICAgIHZhciBtaW1lVHlwZSA9IHdpbmRvdy5uYXZpZ2F0b3IubWltZVR5cGVzW1wiYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2hcIl07XHJcblx0ICAgIGlmICghbWltZVR5cGUgfHwgIW1pbWVUeXBlLmVuYWJsZWRQbHVnaW4gfHwgIW1pbWVUeXBlLmVuYWJsZWRQbHVnaW4uZmlsZW5hbWUpIHtcclxuXHQgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIG1pbWVUeXBlLmVuYWJsZWRQbHVnaW4uZmlsZW5hbWUubWF0Y2goL2ZsYXNobGl0ZS9pKSA/IHRydWUgOiBmYWxzZTtcclxuXHQgIH07XHJcblx0ICBcclxuXHQgIGlmICghd2luZG93LldFQl9TT0NLRVRfRElTQUJMRV9BVVRPX0lOSVRJQUxJWkFUSU9OKSB7XHJcblx0ICAgIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xyXG5cdCAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgV2ViU29ja2V0Ll9faW5pdGlhbGl6ZSgpO1xyXG5cdCAgICAgIH0sIGZhbHNlKTtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICB3aW5kb3cuYXR0YWNoRXZlbnQoXCJvbmxvYWRcIiwgZnVuY3Rpb24oKXtcclxuXHQgICAgICAgIFdlYlNvY2tldC5fX2luaXRpYWxpemUoKTtcclxuXHQgICAgICB9KTtcclxuXHQgICAgfVxyXG5cdCAgfVxyXG5cdCAgXHJcblx0fSkoKTtcclxuXHRcclxuXHQvKipcclxuXHQgKiBzb2NrZXQuaW9cclxuXHQgKiBDb3B5cmlnaHQoYykgMjAxMSBMZWFybkJvb3N0IDxkZXZAbGVhcm5ib29zdC5jb20+XHJcblx0ICogTUlUIExpY2Vuc2VkXHJcblx0ICovXHJcblx0XHJcblx0KGZ1bmN0aW9uIChleHBvcnRzLCBpbywgZ2xvYmFsKSB7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEV4cG9zZSBjb25zdHJ1Y3Rvci5cclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICBleHBvcnRzLlhIUiA9IFhIUjtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogWEhSIGNvbnN0cnVjdG9yXHJcblx0ICAgKlxyXG5cdCAgICogQGNvc3RydWN0b3JcclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIGZ1bmN0aW9uIFhIUiAoc29ja2V0KSB7XHJcblx0ICAgIGlmICghc29ja2V0KSByZXR1cm47XHJcblx0XHJcblx0ICAgIGlvLlRyYW5zcG9ydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdCAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEluaGVyaXRzIGZyb20gVHJhbnNwb3J0LlxyXG5cdCAgICovXHJcblx0XHJcblx0ICBpby51dGlsLmluaGVyaXQoWEhSLCBpby5UcmFuc3BvcnQpO1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBFc3RhYmxpc2ggYSBjb25uZWN0aW9uXHJcblx0ICAgKlxyXG5cdCAgICogQHJldHVybnMge1RyYW5zcG9ydH1cclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFhIUi5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgdGhpcy5zb2NrZXQuc2V0QnVmZmVyKGZhbHNlKTtcclxuXHQgICAgdGhpcy5vbk9wZW4oKTtcclxuXHQgICAgdGhpcy5nZXQoKTtcclxuXHRcclxuXHQgICAgLy8gd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhlIHJlcXVlc3Qgc3VjY2VlZHMgc2luY2Ugd2UgaGF2ZSBubyBpbmRpY2F0aW9uXHJcblx0ICAgIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3Qgb3BlbmVkIG9yIG5vdCB1bnRpbCBpdCBzdWNjZWVkZWQuXHJcblx0ICAgIHRoaXMuc2V0Q2xvc2VUaW1lb3V0KCk7XHJcblx0XHJcblx0ICAgIHJldHVybiB0aGlzO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQ2hlY2sgaWYgd2UgbmVlZCB0byBzZW5kIGRhdGEgdG8gdGhlIFNvY2tldC5JTyBzZXJ2ZXIsIGlmIHdlIGhhdmUgZGF0YSBpbiBvdXJcclxuXHQgICAqIGJ1ZmZlciB3ZSBlbmNvZGUgaXQgYW5kIGZvcndhcmQgaXQgdG8gdGhlIGBwb3N0YCBtZXRob2QuXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFhIUi5wcm90b3R5cGUucGF5bG9hZCA9IGZ1bmN0aW9uIChwYXlsb2FkKSB7XHJcblx0ICAgIHZhciBtc2dzID0gW107XHJcblx0XHJcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsID0gcGF5bG9hZC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHQgICAgICBtc2dzLnB1c2goaW8ucGFyc2VyLmVuY29kZVBhY2tldChwYXlsb2FkW2ldKSk7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgdGhpcy5zZW5kKGlvLnBhcnNlci5lbmNvZGVQYXlsb2FkKG1zZ3MpKTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIFNlbmQgZGF0YSB0byB0aGUgU29ja2V0LklPIHNlcnZlci5cclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0gZGF0YSBUaGUgbWVzc2FnZVxyXG5cdCAgICogQHJldHVybnMge1RyYW5zcG9ydH1cclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFhIUi5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcblx0ICAgIHRoaXMucG9zdChkYXRhKTtcclxuXHQgICAgcmV0dXJuIHRoaXM7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBQb3N0cyBhIGVuY29kZWQgbWVzc2FnZSB0byB0aGUgU29ja2V0LklPIHNlcnZlci5cclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YSBBIGVuY29kZWQgbWVzc2FnZS5cclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBmdW5jdGlvbiBlbXB0eSAoKSB7IH07XHJcblx0XHJcblx0ICBYSFIucHJvdG90eXBlLnBvc3QgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG5cdCAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblx0ICAgIHRoaXMuc29ja2V0LnNldEJ1ZmZlcih0cnVlKTtcclxuXHRcclxuXHQgICAgZnVuY3Rpb24gc3RhdGVDaGFuZ2UgKCkge1xyXG5cdCAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT0gNCkge1xyXG5cdCAgICAgICAgdGhpcy5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eTtcclxuXHQgICAgICAgIHNlbGYucG9zdGluZyA9IGZhbHNlO1xyXG5cdFxyXG5cdCAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09IDIwMCl7XHJcblx0ICAgICAgICAgIHNlbGYuc29ja2V0LnNldEJ1ZmZlcihmYWxzZSk7XHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICBzZWxmLm9uQ2xvc2UoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgZnVuY3Rpb24gb25sb2FkICgpIHtcclxuXHQgICAgICB0aGlzLm9ubG9hZCA9IGVtcHR5O1xyXG5cdCAgICAgIHNlbGYuc29ja2V0LnNldEJ1ZmZlcihmYWxzZSk7XHJcblx0ICAgIH07XHJcblx0XHJcblx0ICAgIHRoaXMuc2VuZFhIUiA9IHRoaXMucmVxdWVzdCgnUE9TVCcpO1xyXG5cdFxyXG5cdCAgICBpZiAoZ2xvYmFsLlhEb21haW5SZXF1ZXN0ICYmIHRoaXMuc2VuZFhIUiBpbnN0YW5jZW9mIFhEb21haW5SZXF1ZXN0KSB7XHJcblx0ICAgICAgdGhpcy5zZW5kWEhSLm9ubG9hZCA9IHRoaXMuc2VuZFhIUi5vbmVycm9yID0gb25sb2FkO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRoaXMuc2VuZFhIUi5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBzdGF0ZUNoYW5nZTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICB0aGlzLnNlbmRYSFIuc2VuZChkYXRhKTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIERpc2Nvbm5lY3RzIHRoZSBlc3RhYmxpc2hlZCBgWEhSYCBjb25uZWN0aW9uLlxyXG5cdCAgICpcclxuXHQgICAqIEByZXR1cm5zIHtUcmFuc3BvcnR9XHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICBYSFIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICB0aGlzLm9uQ2xvc2UoKTtcclxuXHQgICAgcmV0dXJuIHRoaXM7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBHZW5lcmF0ZXMgYSBjb25maWd1cmVkIFhIUiByZXF1ZXN0XHJcblx0ICAgKlxyXG5cdCAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgdXJsIHRoYXQgbmVlZHMgdG8gYmUgcmVxdWVzdGVkLlxyXG5cdCAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBUaGUgbWV0aG9kIHRoZSByZXF1ZXN0IHNob3VsZCB1c2UuXHJcblx0ICAgKiBAcmV0dXJucyB7WE1MSHR0cFJlcXVlc3R9XHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgWEhSLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKG1ldGhvZCkge1xyXG5cdCAgICB2YXIgcmVxID0gaW8udXRpbC5yZXF1ZXN0KHRoaXMuc29ja2V0LmlzWERvbWFpbigpKVxyXG5cdCAgICAgICwgcXVlcnkgPSBpby51dGlsLnF1ZXJ5KHRoaXMuc29ja2V0Lm9wdGlvbnMucXVlcnksICd0PScgKyArbmV3IERhdGUpO1xyXG5cdFxyXG5cdCAgICByZXEub3BlbihtZXRob2QgfHwgJ0dFVCcsIHRoaXMucHJlcGFyZVVybCgpICsgcXVlcnksIHRydWUpO1xyXG5cdFxyXG5cdCAgICBpZiAobWV0aG9kID09ICdQT1NUJykge1xyXG5cdCAgICAgIHRyeSB7XHJcblx0ICAgICAgICBpZiAocmVxLnNldFJlcXVlc3RIZWFkZXIpIHtcclxuXHQgICAgICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKTtcclxuXHQgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgIC8vIFhEb21haW5SZXF1ZXN0XHJcblx0ICAgICAgICAgIHJlcS5jb250ZW50VHlwZSA9ICd0ZXh0L3BsYWluJztcclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9IGNhdGNoIChlKSB7fVxyXG5cdCAgICB9XHJcblx0XHJcblx0ICAgIHJldHVybiByZXE7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBSZXR1cm5zIHRoZSBzY2hlbWUgdG8gdXNlIGZvciB0aGUgdHJhbnNwb3J0IFVSTHMuXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFhIUi5wcm90b3R5cGUuc2NoZW1lID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICByZXR1cm4gdGhpcy5zb2NrZXQub3B0aW9ucy5zZWN1cmUgPyAnaHR0cHMnIDogJ2h0dHAnO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQ2hlY2sgaWYgdGhlIFhIUiB0cmFuc3BvcnRzIGFyZSBzdXBwb3J0ZWRcclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0ge0Jvb2xlYW59IHhkb21haW4gQ2hlY2sgaWYgd2Ugc3VwcG9ydCBjcm9zcyBkb21haW4gcmVxdWVzdHMuXHJcblx0ICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFhIUi5jaGVjayA9IGZ1bmN0aW9uIChzb2NrZXQsIHhkb21haW4pIHtcclxuXHQgICAgdHJ5IHtcclxuXHQgICAgICB2YXIgcmVxdWVzdCA9IGlvLnV0aWwucmVxdWVzdCh4ZG9tYWluKSxcclxuXHQgICAgICAgICAgdXNlc1hEb21SZXEgPSAoZ2xvYmFsLlhEb21haW5SZXF1ZXN0ICYmIHJlcXVlc3QgaW5zdGFuY2VvZiBYRG9tYWluUmVxdWVzdCksXHJcblx0ICAgICAgICAgIHNvY2tldFByb3RvY29sID0gKHNvY2tldCAmJiBzb2NrZXQub3B0aW9ucyAmJiBzb2NrZXQub3B0aW9ucy5zZWN1cmUgPyAnaHR0cHM6JyA6ICdodHRwOicpLFxyXG5cdCAgICAgICAgICBpc1hQcm90b2NvbCA9IChzb2NrZXRQcm90b2NvbCAhPSBnbG9iYWwubG9jYXRpb24ucHJvdG9jb2wpO1xyXG5cdCAgICAgIGlmIChyZXF1ZXN0ICYmICEodXNlc1hEb21SZXEgJiYgaXNYUHJvdG9jb2wpKSB7XHJcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgICB9XHJcblx0ICAgIH0gY2F0Y2goZSkge31cclxuXHRcclxuXHQgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQ2hlY2sgaWYgdGhlIFhIUiB0cmFuc3BvcnQgc3VwcG9ydHMgY3Jvc3MgZG9tYWluIHJlcXVlc3RzLlxyXG5cdCAgICpcclxuXHQgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgWEhSLnhkb21haW5DaGVjayA9IGZ1bmN0aW9uIChzb2NrZXQpIHtcclxuXHQgICAgcmV0dXJuIFhIUi5jaGVjayhzb2NrZXQsIHRydWUpO1xyXG5cdCAgfTtcclxuXHRcclxuXHR9KShcclxuXHQgICAgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGlvID8gaW8uVHJhbnNwb3J0IDogbW9kdWxlLmV4cG9ydHNcclxuXHQgICwgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGlvID8gaW8gOiBtb2R1bGUucGFyZW50LmV4cG9ydHNcclxuXHQgICwgdGhpc1xyXG5cdCk7XHJcblx0LyoqXHJcblx0ICogc29ja2V0LmlvXHJcblx0ICogQ29weXJpZ2h0KGMpIDIwMTEgTGVhcm5Cb29zdCA8ZGV2QGxlYXJuYm9vc3QuY29tPlxyXG5cdCAqIE1JVCBMaWNlbnNlZFxyXG5cdCAqL1xyXG5cdFxyXG5cdChmdW5jdGlvbiAoZXhwb3J0cywgaW8pIHtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogRXhwb3NlIGNvbnN0cnVjdG9yLlxyXG5cdCAgICovXHJcblx0XHJcblx0ICBleHBvcnRzLmh0bWxmaWxlID0gSFRNTEZpbGU7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIFRoZSBIVE1MRmlsZSB0cmFuc3BvcnQgY3JlYXRlcyBhIGBmb3JldmVyIGlmcmFtZWAgYmFzZWQgdHJhbnNwb3J0XHJcblx0ICAgKiBmb3IgSW50ZXJuZXQgRXhwbG9yZXIuIFJlZ3VsYXIgZm9yZXZlciBpZnJhbWUgaW1wbGVtZW50YXRpb25zIHdpbGwgXHJcblx0ICAgKiBjb250aW51b3VzbHkgdHJpZ2dlciB0aGUgYnJvd3NlcnMgYnV6eSBpbmRpY2F0b3JzLiBJZiB0aGUgZm9yZXZlciBpZnJhbWVcclxuXHQgICAqIGlzIGNyZWF0ZWQgaW5zaWRlIGEgYGh0bWxmaWxlYCB0aGVzZSBpbmRpY2F0b3JzIHdpbGwgbm90IGJlIHRyaWdnZWQuXHJcblx0ICAgKlxyXG5cdCAgICogQGNvbnN0cnVjdG9yXHJcblx0ICAgKiBAZXh0ZW5kcyB7aW8uVHJhbnNwb3J0LlhIUn1cclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIGZ1bmN0aW9uIEhUTUxGaWxlIChzb2NrZXQpIHtcclxuXHQgICAgaW8uVHJhbnNwb3J0LlhIUi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogSW5oZXJpdHMgZnJvbSBYSFIgdHJhbnNwb3J0LlxyXG5cdCAgICovXHJcblx0XHJcblx0ICBpby51dGlsLmluaGVyaXQoSFRNTEZpbGUsIGlvLlRyYW5zcG9ydC5YSFIpO1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBUcmFuc3BvcnQgbmFtZVxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIEhUTUxGaWxlLnByb3RvdHlwZS5uYW1lID0gJ2h0bWxmaWxlJztcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQ3JlYXRlcyBhIG5ldyBBYy4uLmVYIGBodG1sZmlsZWAgd2l0aCBhIGZvcmV2ZXIgbG9hZGluZyBpZnJhbWVcclxuXHQgICAqIHRoYXQgY2FuIGJlIHVzZWQgdG8gbGlzdGVuIHRvIG1lc3NhZ2VzLiBJbnNpZGUgdGhlIGdlbmVyYXRlZFxyXG5cdCAgICogYGh0bWxmaWxlYCBhIHJlZmVyZW5jZSB3aWxsIGJlIG1hZGUgdG8gdGhlIEhUTUxGaWxlIHRyYW5zcG9ydC5cclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgSFRNTEZpbGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgdGhpcy5kb2MgPSBuZXcgd2luZG93WyhbJ0FjdGl2ZSddLmNvbmNhdCgnT2JqZWN0Jykuam9pbignWCcpKV0oJ2h0bWxmaWxlJyk7XHJcblx0ICAgIHRoaXMuZG9jLm9wZW4oKTtcclxuXHQgICAgdGhpcy5kb2Mud3JpdGUoJzxodG1sPjwvaHRtbD4nKTtcclxuXHQgICAgdGhpcy5kb2MuY2xvc2UoKTtcclxuXHQgICAgdGhpcy5kb2MucGFyZW50V2luZG93LnMgPSB0aGlzO1xyXG5cdFxyXG5cdCAgICB2YXIgaWZyYW1lQyA9IHRoaXMuZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdCAgICBpZnJhbWVDLmNsYXNzTmFtZSA9ICdzb2NrZXRpbyc7XHJcblx0XHJcblx0ICAgIHRoaXMuZG9jLmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lQyk7XHJcblx0ICAgIHRoaXMuaWZyYW1lID0gdGhpcy5kb2MuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XHJcblx0XHJcblx0ICAgIGlmcmFtZUMuYXBwZW5kQ2hpbGQodGhpcy5pZnJhbWUpO1xyXG5cdFxyXG5cdCAgICB2YXIgc2VsZiA9IHRoaXNcclxuXHQgICAgICAsIHF1ZXJ5ID0gaW8udXRpbC5xdWVyeSh0aGlzLnNvY2tldC5vcHRpb25zLnF1ZXJ5LCAndD0nKyArbmV3IERhdGUpO1xyXG5cdFxyXG5cdCAgICB0aGlzLmlmcmFtZS5zcmMgPSB0aGlzLnByZXBhcmVVcmwoKSArIHF1ZXJ5O1xyXG5cdFxyXG5cdCAgICBpby51dGlsLm9uKHdpbmRvdywgJ3VubG9hZCcsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICBzZWxmLmRlc3Ryb3koKTtcclxuXHQgICAgfSk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBUaGUgU29ja2V0LklPIHNlcnZlciB3aWxsIHdyaXRlIHNjcmlwdCB0YWdzIGluc2lkZSB0aGUgZm9yZXZlclxyXG5cdCAgICogaWZyYW1lLCB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgdXNlZCBhcyBjYWxsYmFjayBmb3IgdGhlIGluY29taW5nXHJcblx0ICAgKiBpbmZvcm1hdGlvbi5cclxuXHQgICAqXHJcblx0ICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YSBUaGUgbWVzc2FnZVxyXG5cdCAgICogQHBhcmFtIHtkb2N1bWVudH0gZG9jIFJlZmVyZW5jZSB0byB0aGUgY29udGV4dFxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIEhUTUxGaWxlLnByb3RvdHlwZS5fID0gZnVuY3Rpb24gKGRhdGEsIGRvYykge1xyXG5cdCAgICB0aGlzLm9uRGF0YShkYXRhKTtcclxuXHQgICAgdHJ5IHtcclxuXHQgICAgICB2YXIgc2NyaXB0ID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcclxuXHQgICAgICBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xyXG5cdCAgICB9IGNhdGNoIChlKSB7IH1cclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIERlc3Ryb3kgdGhlIGVzdGFibGlzaGVkIGNvbm5lY3Rpb24sIGlmcmFtZSBhbmQgYGh0bWxmaWxlYC5cclxuXHQgICAqIEFuZCBjYWxscyB0aGUgYENvbGxlY3RHYXJiYWdlYCBmdW5jdGlvbiBvZiBJbnRlcm5ldCBFeHBsb3JlclxyXG5cdCAgICogdG8gcmVsZWFzZSB0aGUgbWVtb3J5LlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBIVE1MRmlsZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgaWYgKHRoaXMuaWZyYW1lKXtcclxuXHQgICAgICB0cnkge1xyXG5cdCAgICAgICAgdGhpcy5pZnJhbWUuc3JjID0gJ2Fib3V0OmJsYW5rJztcclxuXHQgICAgICB9IGNhdGNoKGUpe31cclxuXHRcclxuXHQgICAgICB0aGlzLmRvYyA9IG51bGw7XHJcblx0ICAgICAgdGhpcy5pZnJhbWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmlmcmFtZSk7XHJcblx0ICAgICAgdGhpcy5pZnJhbWUgPSBudWxsO1xyXG5cdFxyXG5cdCAgICAgIENvbGxlY3RHYXJiYWdlKCk7XHJcblx0ICAgIH1cclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIERpc2Nvbm5lY3RzIHRoZSBlc3RhYmxpc2hlZCBjb25uZWN0aW9uLlxyXG5cdCAgICpcclxuXHQgICAqIEByZXR1cm5zIHtUcmFuc3BvcnR9IENoYWluaW5nLlxyXG5cdCAgICogQGFwaSBwdWJsaWNcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgSFRNTEZpbGUucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICB0aGlzLmRlc3Ryb3koKTtcclxuXHQgICAgcmV0dXJuIGlvLlRyYW5zcG9ydC5YSFIucHJvdG90eXBlLmNsb3NlLmNhbGwodGhpcyk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBDaGVja3MgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhpcyB0cmFuc3BvcnQuIFRoZSBicm93c2VyXHJcblx0ICAgKiBtdXN0IGhhdmUgYW4gYEFjLi4uZVhPYmplY3RgIGltcGxlbWVudGF0aW9uLlxyXG5cdCAgICpcclxuXHQgICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICBIVE1MRmlsZS5jaGVjayA9IGZ1bmN0aW9uIChzb2NrZXQpIHtcclxuXHQgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT0gXCJ1bmRlZmluZWRcIiAmJiAoWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKSkgaW4gd2luZG93KXtcclxuXHQgICAgICB0cnkge1xyXG5cdCAgICAgICAgdmFyIGEgPSBuZXcgd2luZG93WyhbJ0FjdGl2ZSddLmNvbmNhdCgnT2JqZWN0Jykuam9pbignWCcpKV0oJ2h0bWxmaWxlJyk7XHJcblx0ICAgICAgICByZXR1cm4gYSAmJiBpby5UcmFuc3BvcnQuWEhSLmNoZWNrKHNvY2tldCk7XHJcblx0ICAgICAgfSBjYXRjaChlKXt9XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQ2hlY2sgaWYgY3Jvc3MgZG9tYWluIHJlcXVlc3RzIGFyZSBzdXBwb3J0ZWQuXHJcblx0ICAgKlxyXG5cdCAgICogQHJldHVybnMge0Jvb2xlYW59XHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICBIVE1MRmlsZS54ZG9tYWluQ2hlY2sgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIC8vIHdlIGNhbiBwcm9iYWJseSBkbyBoYW5kbGluZyBmb3Igc3ViLWRvbWFpbnMsIHdlIHNob3VsZFxyXG5cdCAgICAvLyB0ZXN0IHRoYXQgaXQncyBjcm9zcyBkb21haW4gYnV0IGEgc3ViZG9tYWluIGhlcmVcclxuXHQgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQWRkIHRoZSB0cmFuc3BvcnQgdG8geW91ciBwdWJsaWMgaW8udHJhbnNwb3J0cyBhcnJheS5cclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgaW8udHJhbnNwb3J0cy5wdXNoKCdodG1sZmlsZScpO1xyXG5cdFxyXG5cdH0pKFxyXG5cdCAgICAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpby5UcmFuc3BvcnQgOiBtb2R1bGUuZXhwb3J0c1xyXG5cdCAgLCAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5wYXJlbnQuZXhwb3J0c1xyXG5cdCk7XHJcblx0XHJcblx0LyoqXHJcblx0ICogc29ja2V0LmlvXHJcblx0ICogQ29weXJpZ2h0KGMpIDIwMTEgTGVhcm5Cb29zdCA8ZGV2QGxlYXJuYm9vc3QuY29tPlxyXG5cdCAqIE1JVCBMaWNlbnNlZFxyXG5cdCAqL1xyXG5cdFxyXG5cdChmdW5jdGlvbiAoZXhwb3J0cywgaW8sIGdsb2JhbCkge1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBFeHBvc2UgY29uc3RydWN0b3IuXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIGV4cG9ydHNbJ3hoci1wb2xsaW5nJ10gPSBYSFJQb2xsaW5nO1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBUaGUgWEhSLXBvbGxpbmcgdHJhbnNwb3J0IHVzZXMgbG9uZyBwb2xsaW5nIFhIUiByZXF1ZXN0cyB0byBjcmVhdGUgYVxyXG5cdCAgICogXCJwZXJzaXN0ZW50XCIgY29ubmVjdGlvbiB3aXRoIHRoZSBzZXJ2ZXIuXHJcblx0ICAgKlxyXG5cdCAgICogQGNvbnN0cnVjdG9yXHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICBmdW5jdGlvbiBYSFJQb2xsaW5nICgpIHtcclxuXHQgICAgaW8uVHJhbnNwb3J0LlhIUi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogSW5oZXJpdHMgZnJvbSBYSFIgdHJhbnNwb3J0LlxyXG5cdCAgICovXHJcblx0XHJcblx0ICBpby51dGlsLmluaGVyaXQoWEhSUG9sbGluZywgaW8uVHJhbnNwb3J0LlhIUik7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIE1lcmdlIHRoZSBwcm9wZXJ0aWVzIGZyb20gWEhSIHRyYW5zcG9ydFxyXG5cdCAgICovXHJcblx0XHJcblx0ICBpby51dGlsLm1lcmdlKFhIUlBvbGxpbmcsIGlvLlRyYW5zcG9ydC5YSFIpO1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBUcmFuc3BvcnQgbmFtZVxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFhIUlBvbGxpbmcucHJvdG90eXBlLm5hbWUgPSAneGhyLXBvbGxpbmcnO1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBJbmRpY2F0ZXMgd2hldGhlciBoZWFydGJlYXRzIGlzIGVuYWJsZWQgZm9yIHRoaXMgdHJhbnNwb3J0XHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFhIUlBvbGxpbmcucHJvdG90eXBlLmhlYXJ0YmVhdHMgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHJldHVybiBmYWxzZTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKiogXHJcblx0ICAgKiBFc3RhYmxpc2ggYSBjb25uZWN0aW9uLCBmb3IgaVBob25lIGFuZCBBbmRyb2lkIHRoaXMgd2lsbCBiZSBkb25lIG9uY2UgdGhlIHBhZ2VcclxuXHQgICAqIGlzIGxvYWRlZC5cclxuXHQgICAqXHJcblx0ICAgKiBAcmV0dXJucyB7VHJhbnNwb3J0fSBDaGFpbmluZy5cclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIFhIUlBvbGxpbmcucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHZhciBzZWxmID0gdGhpcztcclxuXHRcclxuXHQgICAgaW8uVHJhbnNwb3J0LlhIUi5wcm90b3R5cGUub3Blbi5jYWxsKHNlbGYpO1xyXG5cdCAgICByZXR1cm4gZmFsc2U7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBTdGFydHMgYSBYSFIgcmVxdWVzdCB0byB3YWl0IGZvciBpbmNvbWluZyBtZXNzYWdlcy5cclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgZnVuY3Rpb24gZW1wdHkgKCkge307XHJcblx0XHJcblx0ICBYSFJQb2xsaW5nLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGlmICghdGhpcy5pc09wZW4pIHJldHVybjtcclxuXHRcclxuXHQgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cdFxyXG5cdCAgICBmdW5jdGlvbiBzdGF0ZUNoYW5nZSAoKSB7XHJcblx0ICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PSA0KSB7XHJcblx0ICAgICAgICB0aGlzLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGVtcHR5O1xyXG5cdFxyXG5cdCAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09IDIwMCkge1xyXG5cdCAgICAgICAgICBzZWxmLm9uRGF0YSh0aGlzLnJlc3BvbnNlVGV4dCk7XHJcblx0ICAgICAgICAgIHNlbGYuZ2V0KCk7XHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICBzZWxmLm9uQ2xvc2UoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9XHJcblx0ICAgIH07XHJcblx0XHJcblx0ICAgIGZ1bmN0aW9uIG9ubG9hZCAoKSB7XHJcblx0ICAgICAgdGhpcy5vbmxvYWQgPSBlbXB0eTtcclxuXHQgICAgICB0aGlzLm9uZXJyb3IgPSBlbXB0eTtcclxuXHQgICAgICBzZWxmLm9uRGF0YSh0aGlzLnJlc3BvbnNlVGV4dCk7XHJcblx0ICAgICAgc2VsZi5nZXQoKTtcclxuXHQgICAgfTtcclxuXHRcclxuXHQgICAgZnVuY3Rpb24gb25lcnJvciAoKSB7XHJcblx0ICAgICAgc2VsZi5vbkNsb3NlKCk7XHJcblx0ICAgIH07XHJcblx0XHJcblx0ICAgIHRoaXMueGhyID0gdGhpcy5yZXF1ZXN0KCk7XHJcblx0XHJcblx0ICAgIGlmIChnbG9iYWwuWERvbWFpblJlcXVlc3QgJiYgdGhpcy54aHIgaW5zdGFuY2VvZiBYRG9tYWluUmVxdWVzdCkge1xyXG5cdCAgICAgIHRoaXMueGhyLm9ubG9hZCA9IG9ubG9hZDtcclxuXHQgICAgICB0aGlzLnhoci5vbmVycm9yID0gb25lcnJvcjtcclxuXHQgICAgfSBlbHNlIHtcclxuXHQgICAgICB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBzdGF0ZUNoYW5nZTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICB0aGlzLnhoci5zZW5kKG51bGwpO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogSGFuZGxlIHRoZSB1bmNsZWFuIGNsb3NlIGJlaGF2aW9yLlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBYSFJQb2xsaW5nLnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICBpby5UcmFuc3BvcnQuWEhSLnByb3RvdHlwZS5vbkNsb3NlLmNhbGwodGhpcyk7XHJcblx0XHJcblx0ICAgIGlmICh0aGlzLnhocikge1xyXG5cdCAgICAgIHRoaXMueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHRoaXMueGhyLm9ubG9hZCA9IHRoaXMueGhyLm9uZXJyb3IgPSBlbXB0eTtcclxuXHQgICAgICB0cnkge1xyXG5cdCAgICAgICAgdGhpcy54aHIuYWJvcnQoKTtcclxuXHQgICAgICB9IGNhdGNoKGUpe31cclxuXHQgICAgICB0aGlzLnhociA9IG51bGw7XHJcblx0ICAgIH1cclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIFdlYmtpdCBiYXNlZCBicm93c2VycyBzaG93IGEgaW5maW5pdCBzcGlubmVyIHdoZW4geW91IHN0YXJ0IGEgWEhSIHJlcXVlc3RcclxuXHQgICAqIGJlZm9yZSB0aGUgYnJvd3NlcnMgb25sb2FkIGV2ZW50IGlzIGNhbGxlZCBzbyB3ZSBuZWVkIHRvIGRlZmVyIG9wZW5pbmcgb2ZcclxuXHQgICAqIHRoZSB0cmFuc3BvcnQgdW50aWwgdGhlIG9ubG9hZCBldmVudCBpcyBjYWxsZWQuIFdyYXBwaW5nIHRoZSBjYiBpbiBvdXJcclxuXHQgICAqIGRlZmVyIG1ldGhvZCBzb2x2ZSB0aGlzLlxyXG5cdCAgICpcclxuXHQgICAqIEBwYXJhbSB7U29ja2V0fSBzb2NrZXQgVGhlIHNvY2tldCBpbnN0YW5jZSB0aGF0IG5lZWRzIGEgdHJhbnNwb3J0XHJcblx0ICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2tcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBYSFJQb2xsaW5nLnByb3RvdHlwZS5yZWFkeSA9IGZ1bmN0aW9uIChzb2NrZXQsIGZuKSB7XHJcblx0ICAgIHZhciBzZWxmID0gdGhpcztcclxuXHRcclxuXHQgICAgaW8udXRpbC5kZWZlcihmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgZm4uY2FsbChzZWxmKTtcclxuXHQgICAgfSk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBBZGQgdGhlIHRyYW5zcG9ydCB0byB5b3VyIHB1YmxpYyBpby50cmFuc3BvcnRzIGFycmF5LlxyXG5cdCAgICpcclxuXHQgICAqIEBhcGkgcHJpdmF0ZVxyXG5cdCAgICovXHJcblx0XHJcblx0ICBpby50cmFuc3BvcnRzLnB1c2goJ3hoci1wb2xsaW5nJyk7XHJcblx0XHJcblx0fSkoXHJcblx0ICAgICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvLlRyYW5zcG9ydCA6IG1vZHVsZS5leHBvcnRzXHJcblx0ICAsICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLnBhcmVudC5leHBvcnRzXHJcblx0ICAsIHRoaXNcclxuXHQpO1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIHNvY2tldC5pb1xyXG5cdCAqIENvcHlyaWdodChjKSAyMDExIExlYXJuQm9vc3QgPGRldkBsZWFybmJvb3N0LmNvbT5cclxuXHQgKiBNSVQgTGljZW5zZWRcclxuXHQgKi9cclxuXHRcclxuXHQoZnVuY3Rpb24gKGV4cG9ydHMsIGlvLCBnbG9iYWwpIHtcclxuXHQgIC8qKlxyXG5cdCAgICogVGhlcmUgaXMgYSB3YXkgdG8gaGlkZSB0aGUgbG9hZGluZyBpbmRpY2F0b3IgaW4gRmlyZWZveC4gSWYgeW91IGNyZWF0ZSBhbmRcclxuXHQgICAqIHJlbW92ZSBhIGlmcmFtZSBpdCB3aWxsIHN0b3Agc2hvd2luZyB0aGUgY3VycmVudCBsb2FkaW5nIGluZGljYXRvci5cclxuXHQgICAqIFVuZm9ydHVuYXRlbHkgd2UgY2FuJ3QgZmVhdHVyZSBkZXRlY3QgdGhhdCBhbmQgVUEgc25pZmZpbmcgaXMgZXZpbC5cclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgdmFyIGluZGljYXRvciA9IGdsb2JhbC5kb2N1bWVudCAmJiBcIk1vekFwcGVhcmFuY2VcIiBpblxyXG5cdCAgICBnbG9iYWwuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBFeHBvc2UgY29uc3RydWN0b3IuXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIGV4cG9ydHNbJ2pzb25wLXBvbGxpbmcnXSA9IEpTT05QUG9sbGluZztcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogVGhlIEpTT05QIHRyYW5zcG9ydCBjcmVhdGVzIGFuIHBlcnNpc3RlbnQgY29ubmVjdGlvbiBieSBkeW5hbWljYWxseVxyXG5cdCAgICogaW5zZXJ0aW5nIGEgc2NyaXB0IHRhZyBpbiB0aGUgcGFnZS4gVGhpcyBzY3JpcHQgdGFnIHdpbGwgcmVjZWl2ZSB0aGVcclxuXHQgICAqIGluZm9ybWF0aW9uIG9mIHRoZSBTb2NrZXQuSU8gc2VydmVyLiBXaGVuIG5ldyBpbmZvcm1hdGlvbiBpcyByZWNlaXZlZFxyXG5cdCAgICogaXQgY3JlYXRlcyBhIG5ldyBzY3JpcHQgdGFnIGZvciB0aGUgbmV3IGRhdGEgc3RyZWFtLlxyXG5cdCAgICpcclxuXHQgICAqIEBjb25zdHJ1Y3RvclxyXG5cdCAgICogQGV4dGVuZHMge2lvLlRyYW5zcG9ydC54aHItcG9sbGluZ31cclxuXHQgICAqIEBhcGkgcHVibGljXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIGZ1bmN0aW9uIEpTT05QUG9sbGluZyAoc29ja2V0KSB7XHJcblx0ICAgIGlvLlRyYW5zcG9ydFsneGhyLXBvbGxpbmcnXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdFxyXG5cdCAgICB0aGlzLmluZGV4ID0gaW8uai5sZW5ndGg7XHJcblx0XHJcblx0ICAgIHZhciBzZWxmID0gdGhpcztcclxuXHRcclxuXHQgICAgaW8uai5wdXNoKGZ1bmN0aW9uIChtc2cpIHtcclxuXHQgICAgICBzZWxmLl8obXNnKTtcclxuXHQgICAgfSk7XHJcblx0ICB9O1xyXG5cdFxyXG5cdCAgLyoqXHJcblx0ICAgKiBJbmhlcml0cyBmcm9tIFhIUiBwb2xsaW5nIHRyYW5zcG9ydC5cclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgaW8udXRpbC5pbmhlcml0KEpTT05QUG9sbGluZywgaW8uVHJhbnNwb3J0Wyd4aHItcG9sbGluZyddKTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogVHJhbnNwb3J0IG5hbWVcclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICBKU09OUFBvbGxpbmcucHJvdG90eXBlLm5hbWUgPSAnanNvbnAtcG9sbGluZyc7XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIFBvc3RzIGEgZW5jb2RlZCBtZXNzYWdlIHRvIHRoZSBTb2NrZXQuSU8gc2VydmVyIHVzaW5nIGFuIGlmcmFtZS5cclxuXHQgICAqIFRoZSBpZnJhbWUgaXMgdXNlZCBiZWNhdXNlIHNjcmlwdCB0YWdzIGNhbiBjcmVhdGUgUE9TVCBiYXNlZCByZXF1ZXN0cy5cclxuXHQgICAqIFRoZSBpZnJhbWUgaXMgcG9zaXRpb25lZCBvdXRzaWRlIG9mIHRoZSB2aWV3IHNvIHRoZSB1c2VyIGRvZXMgbm90XHJcblx0ICAgKiBub3RpY2UgaXQncyBleGlzdGVuY2UuXHJcblx0ICAgKlxyXG5cdCAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgQSBlbmNvZGVkIG1lc3NhZ2UuXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5wb3N0ID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuXHQgICAgdmFyIHNlbGYgPSB0aGlzXHJcblx0ICAgICAgLCBxdWVyeSA9IGlvLnV0aWwucXVlcnkoXHJcblx0ICAgICAgICAgICAgIHRoaXMuc29ja2V0Lm9wdGlvbnMucXVlcnlcclxuXHQgICAgICAgICAgLCAndD0nKyAoK25ldyBEYXRlKSArICcmaT0nICsgdGhpcy5pbmRleFxyXG5cdCAgICAgICAgKTtcclxuXHRcclxuXHQgICAgaWYgKCF0aGlzLmZvcm0pIHtcclxuXHQgICAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKVxyXG5cdCAgICAgICAgLCBhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKVxyXG5cdCAgICAgICAgLCBpZCA9IHRoaXMuaWZyYW1lSWQgPSAnc29ja2V0aW9faWZyYW1lXycgKyB0aGlzLmluZGV4XHJcblx0ICAgICAgICAsIGlmcmFtZTtcclxuXHRcclxuXHQgICAgICBmb3JtLmNsYXNzTmFtZSA9ICdzb2NrZXRpbyc7XHJcblx0ICAgICAgZm9ybS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcblx0ICAgICAgZm9ybS5zdHlsZS50b3AgPSAnMHB4JztcclxuXHQgICAgICBmb3JtLnN0eWxlLmxlZnQgPSAnMHB4JztcclxuXHQgICAgICBmb3JtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblx0ICAgICAgZm9ybS50YXJnZXQgPSBpZDtcclxuXHQgICAgICBmb3JtLm1ldGhvZCA9ICdQT1NUJztcclxuXHQgICAgICBmb3JtLnNldEF0dHJpYnV0ZSgnYWNjZXB0LWNoYXJzZXQnLCAndXRmLTgnKTtcclxuXHQgICAgICBhcmVhLm5hbWUgPSAnZCc7XHJcblx0ICAgICAgZm9ybS5hcHBlbmRDaGlsZChhcmVhKTtcclxuXHQgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xyXG5cdFxyXG5cdCAgICAgIHRoaXMuZm9ybSA9IGZvcm07XHJcblx0ICAgICAgdGhpcy5hcmVhID0gYXJlYTtcclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICB0aGlzLmZvcm0uYWN0aW9uID0gdGhpcy5wcmVwYXJlVXJsKCkgKyBxdWVyeTtcclxuXHRcclxuXHQgICAgZnVuY3Rpb24gY29tcGxldGUgKCkge1xyXG5cdCAgICAgIGluaXRJZnJhbWUoKTtcclxuXHQgICAgICBzZWxmLnNvY2tldC5zZXRCdWZmZXIoZmFsc2UpO1xyXG5cdCAgICB9O1xyXG5cdFxyXG5cdCAgICBmdW5jdGlvbiBpbml0SWZyYW1lICgpIHtcclxuXHQgICAgICBpZiAoc2VsZi5pZnJhbWUpIHtcclxuXHQgICAgICAgIHNlbGYuZm9ybS5yZW1vdmVDaGlsZChzZWxmLmlmcmFtZSk7XHJcblx0ICAgICAgfVxyXG5cdFxyXG5cdCAgICAgIHRyeSB7XHJcblx0ICAgICAgICAvLyBpZTYgZHluYW1pYyBpZnJhbWVzIHdpdGggdGFyZ2V0PVwiXCIgc3VwcG9ydCAodGhhbmtzIENocmlzIExhbWJhY2hlcilcclxuXHQgICAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJzxpZnJhbWUgbmFtZT1cIicrIHNlbGYuaWZyYW1lSWQgKydcIj4nKTtcclxuXHQgICAgICB9IGNhdGNoIChlKSB7XHJcblx0ICAgICAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcclxuXHQgICAgICAgIGlmcmFtZS5uYW1lID0gc2VsZi5pZnJhbWVJZDtcclxuXHQgICAgICB9XHJcblx0XHJcblx0ICAgICAgaWZyYW1lLmlkID0gc2VsZi5pZnJhbWVJZDtcclxuXHRcclxuXHQgICAgICBzZWxmLmZvcm0uYXBwZW5kQ2hpbGQoaWZyYW1lKTtcclxuXHQgICAgICBzZWxmLmlmcmFtZSA9IGlmcmFtZTtcclxuXHQgICAgfTtcclxuXHRcclxuXHQgICAgaW5pdElmcmFtZSgpO1xyXG5cdFxyXG5cdCAgICAvLyB3ZSB0ZW1wb3JhcmlseSBzdHJpbmdpZnkgdW50aWwgd2UgZmlndXJlIG91dCBob3cgdG8gcHJldmVudFxyXG5cdCAgICAvLyBicm93c2VycyBmcm9tIHR1cm5pbmcgYFxcbmAgaW50byBgXFxyXFxuYCBpbiBmb3JtIGlucHV0c1xyXG5cdCAgICB0aGlzLmFyZWEudmFsdWUgPSBpby5KU09OLnN0cmluZ2lmeShkYXRhKTtcclxuXHRcclxuXHQgICAgdHJ5IHtcclxuXHQgICAgICB0aGlzLmZvcm0uc3VibWl0KCk7XHJcblx0ICAgIH0gY2F0Y2goZSkge31cclxuXHRcclxuXHQgICAgaWYgKHRoaXMuaWZyYW1lLmF0dGFjaEV2ZW50KSB7XHJcblx0ICAgICAgaWZyYW1lLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIGlmIChzZWxmLmlmcmFtZS5yZWFkeVN0YXRlID09ICdjb21wbGV0ZScpIHtcclxuXHQgICAgICAgICAgY29tcGxldGUoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICB9O1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgIHRoaXMuaWZyYW1lLm9ubG9hZCA9IGNvbXBsZXRlO1xyXG5cdCAgICB9XHJcblx0XHJcblx0ICAgIHRoaXMuc29ja2V0LnNldEJ1ZmZlcih0cnVlKTtcclxuXHQgIH07XHJcblx0ICBcclxuXHQgIC8qKlxyXG5cdCAgICogQ3JlYXRlcyBhIG5ldyBKU09OUCBwb2xsIHRoYXQgY2FuIGJlIHVzZWQgdG8gbGlzdGVuXHJcblx0ICAgKiBmb3IgbWVzc2FnZXMgZnJvbSB0aGUgU29ja2V0LklPIHNlcnZlci5cclxuXHQgICAqXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHZhciBzZWxmID0gdGhpc1xyXG5cdCAgICAgICwgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JylcclxuXHQgICAgICAsIHF1ZXJ5ID0gaW8udXRpbC5xdWVyeShcclxuXHQgICAgICAgICAgICAgdGhpcy5zb2NrZXQub3B0aW9ucy5xdWVyeVxyXG5cdCAgICAgICAgICAsICd0PScrICgrbmV3IERhdGUpICsgJyZpPScgKyB0aGlzLmluZGV4XHJcblx0ICAgICAgICApO1xyXG5cdFxyXG5cdCAgICBpZiAodGhpcy5zY3JpcHQpIHtcclxuXHQgICAgICB0aGlzLnNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0KTtcclxuXHQgICAgICB0aGlzLnNjcmlwdCA9IG51bGw7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcclxuXHQgICAgc2NyaXB0LnNyYyA9IHRoaXMucHJlcGFyZVVybCgpICsgcXVlcnk7XHJcblx0ICAgIHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgIHNlbGYub25DbG9zZSgpO1xyXG5cdCAgICB9O1xyXG5cdFxyXG5cdCAgICB2YXIgaW5zZXJ0QXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF1cclxuXHQgICAgaW5zZXJ0QXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2NyaXB0LCBpbnNlcnRBdCk7XHJcblx0ICAgIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xyXG5cdFxyXG5cdCAgICBpZiAoaW5kaWNhdG9yKSB7XHJcblx0ICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XHJcblx0ICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XHJcblx0ICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7XHJcblx0ICAgICAgfSwgMTAwKTtcclxuXHQgICAgfVxyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZm9yIHRoZSBpbmNvbWluZyBtZXNzYWdlIHN0cmVhbSBmcm9tIHRoZSBTb2NrZXQuSU8gc2VydmVyLlxyXG5cdCAgICpcclxuXHQgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIFRoZSBtZXNzYWdlXHJcblx0ICAgKiBAYXBpIHByaXZhdGVcclxuXHQgICAqL1xyXG5cdFxyXG5cdCAgSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5fID0gZnVuY3Rpb24gKG1zZykge1xyXG5cdCAgICB0aGlzLm9uRGF0YShtc2cpO1xyXG5cdCAgICBpZiAodGhpcy5pc09wZW4pIHtcclxuXHQgICAgICB0aGlzLmdldCgpO1xyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiB0aGlzO1xyXG5cdCAgfTtcclxuXHRcclxuXHQgIC8qKlxyXG5cdCAgICogVGhlIGluZGljYXRvciBoYWNrIG9ubHkgd29ya3MgYWZ0ZXIgb25sb2FkXHJcblx0ICAgKlxyXG5cdCAgICogQHBhcmFtIHtTb2NrZXR9IHNvY2tldCBUaGUgc29ja2V0IGluc3RhbmNlIHRoYXQgbmVlZHMgYSB0cmFuc3BvcnRcclxuXHQgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFja1xyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIEpTT05QUG9sbGluZy5wcm90b3R5cGUucmVhZHkgPSBmdW5jdGlvbiAoc29ja2V0LCBmbikge1xyXG5cdCAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblx0ICAgIGlmICghaW5kaWNhdG9yKSByZXR1cm4gZm4uY2FsbCh0aGlzKTtcclxuXHRcclxuXHQgICAgaW8udXRpbC5sb2FkKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICBmbi5jYWxsKHNlbGYpO1xyXG5cdCAgICB9KTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIENoZWNrcyBpZiBicm93c2VyIHN1cHBvcnRzIHRoaXMgdHJhbnNwb3J0LlxyXG5cdCAgICpcclxuXHQgICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICBKU09OUFBvbGxpbmcuY2hlY2sgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHJldHVybiAnZG9jdW1lbnQnIGluIGdsb2JhbDtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIENoZWNrIGlmIGNyb3NzIGRvbWFpbiByZXF1ZXN0cyBhcmUgc3VwcG9ydGVkXHJcblx0ICAgKlxyXG5cdCAgICogQHJldHVybnMge0Jvb2xlYW59XHJcblx0ICAgKiBAYXBpIHB1YmxpY1xyXG5cdCAgICovXHJcblx0XHJcblx0ICBKU09OUFBvbGxpbmcueGRvbWFpbkNoZWNrID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICByZXR1cm4gdHJ1ZTtcclxuXHQgIH07XHJcblx0XHJcblx0ICAvKipcclxuXHQgICAqIEFkZCB0aGUgdHJhbnNwb3J0IHRvIHlvdXIgcHVibGljIGlvLnRyYW5zcG9ydHMgYXJyYXkuXHJcblx0ICAgKlxyXG5cdCAgICogQGFwaSBwcml2YXRlXHJcblx0ICAgKi9cclxuXHRcclxuXHQgIGlvLnRyYW5zcG9ydHMucHVzaCgnanNvbnAtcG9sbGluZycpO1xyXG5cdFxyXG5cdH0pKFxyXG5cdCAgICAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpby5UcmFuc3BvcnQgOiBtb2R1bGUuZXhwb3J0c1xyXG5cdCAgLCAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5wYXJlbnQuZXhwb3J0c1xyXG5cdCAgLCB0aGlzXHJcblx0KTtcclxuXHRcclxuXHR9KSgpO1xuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygyOSkobW9kdWxlKSkpXG5cbi8qKiovIH0sXG4vKiAxODggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGlmKHRydWUpIHtcblx0XHR2YXIgbGFzdERhdGE7XG5cdFx0dmFyIHVwVG9EYXRlID0gZnVuY3Rpb24gdXBUb0RhdGUoKSB7XG5cdFx0XHRyZXR1cm4gbGFzdERhdGEuaW5kZXhPZihfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSkgPj0gMDtcblx0XHR9O1xuXHRcdHZhciBjaGVjayA9IGZ1bmN0aW9uIGNoZWNrKCkge1xuXHRcdFx0bW9kdWxlLmhvdC5jaGVjayhmdW5jdGlvbihlcnIsIHVwZGF0ZWRNb2R1bGVzKSB7XG5cdFx0XHRcdGlmKGVycikge1xuXHRcdFx0XHRcdGlmKG1vZHVsZS5ob3Quc3RhdHVzKCkgaW4ge2Fib3J0OjEsZmFpbDoxfSkge1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiW0hNUl0gQ2Fubm90IGNoZWNrIGZvciB1cGRhdGUuIE5lZWQgdG8gZG8gYSBmdWxsIHJlbG9hZCFcIik7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIltITVJdIFVwZGF0ZSBjaGVjayBmYWlsZWQ6IFwiICsgZXJyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRpZighdXBkYXRlZE1vZHVsZXMpIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJbSE1SXSBDYW5ub3QgZmluZCB1cGRhdGUuIE5lZWQgdG8gZG8gYSBmdWxsIHJlbG9hZCFcIik7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiW0hNUl0gKFByb3BhYmx5IGJlY2F1c2Ugb2YgcmVzdGFydGluZyB0aGUgd2VicGFjay1kZXYtc2VydmVyKVwiKVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0bW9kdWxlLmhvdC5hcHBseSh7XG5cdFx0XHRcdFx0aWdub3JlVW5hY2NlcHRlZDogdHJ1ZVxuXHRcdFx0XHR9LCBmdW5jdGlvbihlcnIsIHJlbmV3ZWRNb2R1bGVzKSB7XG5cdFx0XHRcdFx0aWYoZXJyKSB7XG5cdFx0XHRcdFx0XHRpZihtb2R1bGUuaG90LnN0YXR1cygpIGluIHthYm9ydDoxLGZhaWw6MX0pIHtcblx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiW0hNUl0gQ2Fubm90IGFwcGx5IHVwZGF0ZSAoTmVlZCB0byBkbyBhIGZ1bGwgcmVsb2FkISk6IFwiICsgZXJyKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIltITVJdIFVwZGF0ZSBmYWlsZWQ6IFwiICsgZXJyKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdGlmKCF1cFRvRGF0ZSgpKSB7XG5cdFx0XHRcdFx0XHRjaGVjaygpO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0dmFyIHVuYWNjZXB0ZWRNb2R1bGVzID0gdXBkYXRlZE1vZHVsZXMuZmlsdGVyKGZ1bmN0aW9uKG1vZHVsZUlkKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVuZXdlZE1vZHVsZXMuaW5kZXhPZihtb2R1bGVJZCkgPCAwO1xuXHRcdFx0XHRcdH0pO1xuXHRcblx0XHRcdFx0XHRpZih1bmFjY2VwdGVkTW9kdWxlcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJbSE1SXSBUaGUgZm9sbG93aW5nIG1vZHVsZXMgY291bGRuJ3QgYmUgaG90IHVwZGF0ZWQ6IChUaGV5IHdvdWxkIG5lZWQgYSBmdWxsIHJlbG9hZCEpXCIpO1xuXHRcdFx0XHRcdFx0dW5hY2NlcHRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbihtb2R1bGVJZCkge1xuXHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJbSE1SXSAgLSBcIiArIG1vZHVsZUlkKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0aWYoIXJlbmV3ZWRNb2R1bGVzIHx8IHJlbmV3ZWRNb2R1bGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCJbSE1SXSBOb3RoaW5nIGhvdCB1cGRhdGVkLlwiKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCJbSE1SXSBVcGRhdGVkIG1vZHVsZXM6XCIpO1xuXHRcdFx0XHRcdFx0cmVuZXdlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbihtb2R1bGVJZCkge1xuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIltITVJdICAtIFwiICsgbW9kdWxlSWQpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKHVwVG9EYXRlKCkpIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiW0hNUl0gQXBwIGlzIHVwIHRvIGRhdGUuXCIpO1xuXHRcdFx0XHRcdH1cblx0XG5cdFxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH07XG5cdFx0dmFyIGFkZEV2ZW50TGlzdGVuZXIgPSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciA/IGZ1bmN0aW9uKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIsIGZhbHNlKTtcblx0XHR9IDogZnVuY3Rpb24gKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcblx0XHRcdHdpbmRvdy5hdHRhY2hFdmVudCgnb24nICsgZXZlbnROYW1lLCBsaXN0ZW5lcik7XG5cdFx0fTtcblx0XHRhZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBmdW5jdGlvbihldmVudCkge1xuXHRcdFx0aWYodHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiYgZXZlbnQuZGF0YS5pbmRleE9mKFwid2VicGFja0hvdFVwZGF0ZVwiKSA9PT0gMCkge1xuXHRcdFx0XHRsYXN0RGF0YSA9IGV2ZW50LmRhdGE7XG5cdFx0XHRcdGlmKCF1cFRvRGF0ZSgpICYmIG1vZHVsZS5ob3Quc3RhdHVzKCkgPT09IFwiaWRsZVwiKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJbSE1SXSBDaGVja2luZyBmb3IgdXBkYXRlcyBvbiB0aGUgc2VydmVyLi4uXCIpO1xuXHRcdFx0XHRcdGNoZWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHRjb25zb2xlLmxvZyhcIltITVJdIFdhaXRpbmcgZm9yIHVwZGF0ZSBzaWduYWwgZnJvbSBXRFMuLi5cIik7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW0hNUl0gSG90IE1vZHVsZSBSZXBsYWNlbWVudCBpcyBkaXNhYmxlZFwiKTtcblx0fVxuXG5cbi8qKiovIH1cbi8qKioqKiovIF0pXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogbWFpbi5lbnRyeS5qc1xuICoqLyIsIiBcdHZhciBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayA9IHRoaXNbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdO1xuIFx0dGhpc1tcIndlYnBhY2tIb3RVcGRhdGVcIl0gPSBcdFx0ZnVuY3Rpb24gd2VicGFja0hvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0XHRob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHRcdFx0XHRpZihwYXJlbnRIb3RVcGRhdGVDYWxsYmFjaykgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0XHRcdH1cblxuIFx0XHRcdGZ1bmN0aW9uIGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRcdFx0dmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuIFx0XHRcdFx0dmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuIFx0XHRcdFx0c2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiBcdFx0XHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04JztcbiBcdFx0XHRcdHNjcmlwdC5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG4gXHRcdFx0XHRoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gXHRcdFx0fVxuXG4gXHRcdFx0ZnVuY3Rpb24gaG90RG93bmxvYWRNYW5pZmVzdChjYWxsYmFjaykge1xuIFx0XHRcdFx0aWYodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSBcInVuZGVmaW5lZFwiKVxuIFx0XHRcdFx0XHRyZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0XCIpKTtcbiBcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gXHRcdFx0XHRcdHZhciByZXF1ZXN0UGF0aCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNvblwiO1xuIFx0XHRcdFx0XHRyZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgcmVxdWVzdFBhdGgsIHRydWUpO1xuIFx0XHRcdFx0XHRyZXF1ZXN0LnRpbWVvdXQgPSAxMDAwMDtcbiBcdFx0XHRcdFx0cmVxdWVzdC5zZW5kKG51bGwpO1xuIFx0XHRcdFx0fSBjYXRjaChlcnIpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIGNhbGxiYWNrKGVycik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRyZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRpZihyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHJldHVybjtcbiBcdFx0XHRcdFx0aWYocmVxdWVzdC5zdGF0dXMgPT09IDApIHtcbiBcdFx0XHRcdFx0XHQvLyB0aW1lb3V0XG4gXHRcdFx0XHRcdFx0Y2FsbGJhY2sobmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgdGltZWQgb3V0LlwiKSk7XG4gXHRcdFx0XHRcdH0gZWxzZSBpZihyZXF1ZXN0LnN0YXR1cyA9PT0gNDA0KSB7XG4gXHRcdFx0XHRcdFx0Ly8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuIFx0XHRcdFx0XHRcdGNhbGxiYWNrKCk7XG4gXHRcdFx0XHRcdH0gZWxzZSBpZihyZXF1ZXN0LnN0YXR1cyAhPT0gMjAwICYmIHJlcXVlc3Quc3RhdHVzICE9PSAzMDQpIHtcbiBcdFx0XHRcdFx0XHQvLyBvdGhlciBmYWlsdXJlXG4gXHRcdFx0XHRcdFx0Y2FsbGJhY2sobmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgZmFpbGVkLlwiKSk7XG4gXHRcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdFx0Ly8gc3VjY2Vzc1xuIFx0XHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0XHR2YXIgdXBkYXRlID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gXHRcdFx0XHRcdFx0fSBjYXRjaChlKSB7XG4gXHRcdFx0XHRcdFx0XHRjYWxsYmFjayhlKTtcbiBcdFx0XHRcdFx0XHRcdHJldHVybjtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0Y2FsbGJhY2sobnVsbCwgdXBkYXRlKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9XG4gXHRcdFxuXG5cbiBcdHZhciBob3RBcHBseU9uVXBkYXRlID0gdHJ1ZTtcbiBcdHZhciBob3RDdXJyZW50SGFzaCA9IFwiYjViNjRhNTVhOTIwMjNkZWNhNjhcIjtcbiBcdHZhciBob3RDdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG5cbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdGlmKCFtZSkgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX187XG4gXHRcdHZhciBmbiA9IGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiBcdFx0XHRpZihtZS5ob3QuYWN0aXZlKSB7XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG4gXHRcdFx0XHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA8IDApXG4gXHRcdFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xuIFx0XHRcdFx0XHRpZihtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpIDwgMClcbiBcdFx0XHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuIFx0XHRcdFx0fSBlbHNlIGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0Y29uc29sZS53YXJuKFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgcmVxdWVzdCArIFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArIG1vZHVsZUlkKTtcbiBcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHJlcXVlc3QpO1xuIFx0XHR9O1xuIFx0XHRmb3IodmFyIG5hbWUgaW4gX193ZWJwYWNrX3JlcXVpcmVfXykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfX3dlYnBhY2tfcmVxdWlyZV9fLCBuYW1lKSkge1xuIFx0XHRcdFx0Zm5bbmFtZV0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRmbi5lID0gZnVuY3Rpb24oY2h1bmtJZCwgY2FsbGJhY2spIHtcbiBcdFx0XHRpZihob3RTdGF0dXMgPT09IFwicmVhZHlcIilcbiBcdFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0aG90Q2h1bmtzTG9hZGluZysrO1xuIFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uZShjaHVua0lkLCBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwobnVsbCwgZm4pO1xuIFx0XHRcdFx0fSBmaW5hbGx5IHtcbiBcdFx0XHRcdFx0ZmluaXNoQ2h1bmtMb2FkaW5nKCk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRmdW5jdGlvbiBmaW5pc2hDaHVua0xvYWRpbmcoKSB7XG4gXHRcdFx0XHRcdGhvdENodW5rc0xvYWRpbmctLTtcbiBcdFx0XHRcdFx0aWYoaG90U3RhdHVzID09PSBcInByZXBhcmVcIikge1xuIFx0XHRcdFx0XHRcdGlmKCFob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZihob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xuIFx0XHRcdFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHRcdHJldHVybiBmbjtcbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBob3QgPSB7XG4gXHRcdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuIFx0XHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcbiBcdFx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcbiBcdFx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcblxuIFx0XHRcdC8vIE1vZHVsZSBBUElcbiBcdFx0XHRhY3RpdmU6IHRydWUsXG4gXHRcdFx0YWNjZXB0OiBmdW5jdGlvbihkZXAsIGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRpZih0eXBlb2YgZGVwID09PSBcInVuZGVmaW5lZFwiKVxuIFx0XHRcdFx0XHRob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIilcbiBcdFx0XHRcdFx0aG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG4gXHRcdFx0XHRlbHNlIGlmKHR5cGVvZiBkZXAgPT09IFwibnVtYmVyXCIpXG4gXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrO1xuIFx0XHRcdFx0ZWxzZSBmb3IodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjaztcbiBcdFx0XHR9LFxuIFx0XHRcdGRlY2xpbmU6IGZ1bmN0aW9uKGRlcCkge1xuIFx0XHRcdFx0aWYodHlwZW9mIGRlcCA9PT0gXCJ1bmRlZmluZWRcIilcbiBcdFx0XHRcdFx0aG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZih0eXBlb2YgZGVwID09PSBcIm51bWJlclwiKVxuIFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBmb3IodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGlzcG9zZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuIFx0XHRcdFx0aWYoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuIFx0XHRcdGNoZWNrOiBob3RDaGVjayxcbiBcdFx0XHRhcHBseTogaG90QXBwbHksXG4gXHRcdFx0c3RhdHVzOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRpZighbCkgcmV0dXJuIGhvdFN0YXR1cztcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG4gXHRcdFx0XHRpZihpZHggPj0gMCkgaG90U3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuIFx0XHRcdGRhdGE6IGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuIFx0XHR9O1xuIFx0XHRyZXR1cm4gaG90O1xuIFx0fVxuXG4gXHR2YXIgaG90U3RhdHVzSGFuZGxlcnMgPSBbXTtcbiBcdHZhciBob3RTdGF0dXMgPSBcImlkbGVcIjtcblxuIFx0ZnVuY3Rpb24gaG90U2V0U3RhdHVzKG5ld1N0YXR1cykge1xuIFx0XHRob3RTdGF0dXMgPSBuZXdTdGF0dXM7XG4gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBob3RTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcbiBcdFx0XHRob3RTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG4gXHR9XG5cbiBcdC8vIHdoaWxlIGRvd25sb2FkaW5nXG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzID0gMDtcbiBcdHZhciBob3RDaHVua3NMb2FkaW5nID0gMDtcbiBcdHZhciBob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdEF2YWlsaWJsZUZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90Q2FsbGJhY2s7XG5cbiBcdC8vIFRoZSB1cGRhdGUgaW5mb1xuIFx0dmFyIGhvdFVwZGF0ZSwgaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0ZnVuY3Rpb24gaG90Q2hlY2soYXBwbHksIGNhbGxiYWNrKSB7XG4gXHRcdGlmKGhvdFN0YXR1cyAhPT0gXCJpZGxlXCIpIHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuIFx0XHRpZih0eXBlb2YgYXBwbHkgPT09IFwiZnVuY3Rpb25cIikge1xuIFx0XHRcdGhvdEFwcGx5T25VcGRhdGUgPSBmYWxzZTtcbiBcdFx0XHRjYWxsYmFjayA9IGFwcGx5O1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdGhvdEFwcGx5T25VcGRhdGUgPSBhcHBseTtcbiBcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKGVycikgeyBpZihlcnIpIHRocm93IGVyciB9O1xuIFx0XHR9XG4gXHRcdGhvdFNldFN0YXR1cyhcImNoZWNrXCIpO1xuIFx0XHRob3REb3dubG9hZE1hbmlmZXN0KGZ1bmN0aW9uKGVyciwgdXBkYXRlKSB7XG4gXHRcdFx0aWYoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiBcdFx0XHRpZighdXBkYXRlKSB7XG4gXHRcdFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRcdFx0Y2FsbGJhY2sobnVsbCwgbnVsbCk7XG4gXHRcdFx0XHRyZXR1cm47XG4gXHRcdFx0fVxuXG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RBdmFpbGlibGVGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCB1cGRhdGUuYy5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdGhvdEF2YWlsaWJsZUZpbGVzTWFwW3VwZGF0ZS5jW2ldXSA9IHRydWU7XG4gXHRcdFx0aG90VXBkYXRlTmV3SGFzaCA9IHVwZGF0ZS5oO1xuXG4gXHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHRob3RDYWxsYmFjayA9IGNhbGxiYWNrO1xuIFx0XHRcdGhvdFVwZGF0ZSA9IHt9O1xuIFx0XHRcdHZhciBjaHVua0lkID0gMDsge1xuIFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHRcdGlmKGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XG4gXHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0fVxuIFx0XHR9KTtcbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHtcbiBcdFx0aWYoIWhvdEF2YWlsaWJsZUZpbGVzTWFwW2NodW5rSWRdIHx8ICFob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSlcbiBcdFx0XHRyZXR1cm47XG4gXHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gZmFsc2U7XG4gXHRcdGZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0aG90VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYoLS1ob3RXYWl0aW5nRmlsZXMgPT09IDAgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCkge1xuIFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdGlmKCFob3RBdmFpbGlibGVGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlcysrO1xuIFx0XHRcdGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90VXBkYXRlRG93bmxvYWRlZCgpIHtcbiBcdFx0aG90U2V0U3RhdHVzKFwicmVhZHlcIik7XG4gXHRcdHZhciBjYWxsYmFjayA9IGhvdENhbGxiYWNrO1xuIFx0XHRob3RDYWxsYmFjayA9IG51bGw7XG4gXHRcdGlmKCFjYWxsYmFjaykgcmV0dXJuO1xuIFx0XHRpZihob3RBcHBseU9uVXBkYXRlKSB7XG4gXHRcdFx0aG90QXBwbHkoaG90QXBwbHlPblVwZGF0ZSwgY2FsbGJhY2spO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0XHRmb3IodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKCtpZCk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHRcdGNhbGxiYWNrKG51bGwsIG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucywgY2FsbGJhY2spIHtcbiBcdFx0aWYoaG90U3RhdHVzICE9PSBcInJlYWR5XCIpIHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcbiBcdFx0aWYodHlwZW9mIG9wdGlvbnMgPT09IFwiZnVuY3Rpb25cIikge1xuIFx0XHRcdGNhbGxiYWNrID0gb3B0aW9ucztcbiBcdFx0XHRvcHRpb25zID0ge307XG4gXHRcdH0gZWxzZSBpZihvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zID09PSBcIm9iamVjdFwiKSB7XG4gXHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbihlcnIpIHsgaWYoZXJyKSB0aHJvdyBlcnIgfTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHRvcHRpb25zID0ge307XG4gXHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbihlcnIpIHsgaWYoZXJyKSB0aHJvdyBlcnIgfTtcbiBcdFx0fVxuIFx0XHRcbiBcdFx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGUpIHtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW21vZHVsZV07XG4gXHRcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG4gXHRcdFx0XG4gXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG4gXHRcdFx0d2hpbGUocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG4gXHRcdFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZighbW9kdWxlIHx8IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZClcbiBcdFx0XHRcdFx0Y29udGludWU7XG4gXHRcdFx0XHRpZihtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIG5ldyBFcnJvcihcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICsgbW9kdWxlSWQpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYobW9kdWxlSWQgPT09IDApIHtcbiBcdFx0XHRcdFx0cmV0dXJuO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50ID0gaW5zdGFsbGVkTW9kdWxlc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdGlmKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdHJldHVybiBuZXcgRXJyb3IoXCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgKyBtb2R1bGVJZCArIFwiIGluIFwiICsgcGFyZW50SWQpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSA+PSAwKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0aWYoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcbiBcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdFx0Y29udGludWU7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuIFx0XHRcdFx0XHRxdWV1ZS5wdXNoKHBhcmVudElkKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdFx0XG4gXHRcdFx0cmV0dXJuIFtvdXRkYXRlZE1vZHVsZXMsIG91dGRhdGVkRGVwZW5kZW5jaWVzXTtcbiBcdFx0fVxuIFx0XHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG4gXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcbiBcdFx0XHRcdGlmKGEuaW5kZXhPZihpdGVtKSA8IDApXG4gXHRcdFx0XHRcdGEucHVzaChpdGVtKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuIFx0XHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG4gXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuIFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG4gXHRcdGZvcih2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSAraWQ7XG4gXHRcdFx0XHR2YXIgcmVzdWx0ID0gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGVJZCk7XG4gXHRcdFx0XHRpZighcmVzdWx0KSB7XG4gXHRcdFx0XHRcdGlmKG9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcbiBcdFx0XHRcdFx0XHRjb250aW51ZTtcbiBcdFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiYWJvcnRcIik7XG4gXHRcdFx0XHRcdHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoXCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiKSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZihyZXN1bHQgaW5zdGFuY2VvZiBFcnJvcikge1xuIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcbiBcdFx0XHRcdFx0cmV0dXJuIGNhbGxiYWNrKHJlc3VsdCk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IGhvdFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdFswXSk7XG4gXHRcdFx0XHRmb3IodmFyIG1vZHVsZUlkIGluIHJlc3VsdFsxXSkge1xuIFx0XHRcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVzdWx0WzFdLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdFx0XHRpZighb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuIFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG4gXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLCByZXN1bHRbMV1bbW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cbiBcdFx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIG1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdICYmIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkKVxuIFx0XHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0XHR9KTtcbiBcdFx0fVxuXG4gXHRcdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuIFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcbiBcdFx0d2hpbGUocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRpZighbW9kdWxlKSBjb250aW51ZTtcblxuIFx0XHRcdHZhciBkYXRhID0ge307XG5cbiBcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcbiBcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuIFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBjYiA9IGRpc3Bvc2VIYW5kbGVyc1tqXVxuIFx0XHRcdFx0Y2IoZGF0YSk7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXSA9IGRhdGE7XG5cbiBcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuIFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cbiBcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcbiBcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuIFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBjaGlsZCA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcbiBcdFx0XHRcdGlmKCFjaGlsZCkgY29udGludWU7XG4gXHRcdFx0XHR2YXIgaWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcbiBcdFx0XHRcdGlmKGlkeCA+PSAwKSB7XG4gXHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHRcdGlmKGNoaWxkLnBhcmVudHMubGVuZ3RoID09PSAwICYmIGNoaWxkLmhvdCAmJiBjaGlsZC5ob3QuX2Rpc3Bvc2VIYW5kbGVycyAmJiBjaGlsZC5ob3QuX2Rpc3Bvc2VIYW5kbGVycy5sZW5ndGggPiAwKSB7XG4gXHRcdFx0XHRcdFx0Ly8gQ2hpbGQgaGFzIGRpc3Bvc2UgaGFuZGxlcnMgYW5kIG5vIG1vcmUgcmVmZXJlbmNlcywgZGlzcG9zZSBpdCB0b29cbiBcdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKGNoaWxkLmlkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG4gXHRcdGZvcih2YXIgbW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRcdHZhciBkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG4gXHRcdFx0XHRcdHZhciBpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcbiBcdFx0XHRcdFx0aWYoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBOb3QgaW4gXCJhcHBseVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG4gXHRcdGhvdEN1cnJlbnRIYXNoID0gaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcbiBcdFx0Zm9yKHZhciBtb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFwcGxpZWRVcGRhdGUsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuIFx0XHR2YXIgZXJyb3IgPSBudWxsO1xuIFx0XHRmb3IodmFyIG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcbiBcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldO1xuIFx0XHRcdFx0XHR2YXIgY2IgPSBtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcbiBcdFx0XHRcdFx0aWYoY2FsbGJhY2tzLmluZGV4T2YoY2IpID49IDApIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChjYik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdHZhciBjYiA9IGNhbGxiYWNrc1tpXTtcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRjYihvdXRkYXRlZERlcGVuZGVuY2llcyk7XG4gXHRcdFx0XHRcdH0gY2F0Y2goZXJyKSB7XG4gXHRcdFx0XHRcdFx0aWYoIWVycm9yKVxuIFx0XHRcdFx0XHRcdFx0ZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbaV07XG4gXHRcdFx0dmFyIG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG4gXHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcbiBcdFx0XHR9IGNhdGNoKGVycikge1xuIFx0XHRcdFx0aWYodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xuIFx0XHRcdFx0XHR9IGNhdGNoKGVycikge1xuIFx0XHRcdFx0XHRcdGlmKCFlcnJvcilcbiBcdFx0XHRcdFx0XHRcdGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9IGVsc2UgaWYoIWVycm9yKVxuIFx0XHRcdFx0XHRlcnJvciA9IGVycjtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuIFx0XHRpZihlcnJvcikge1xuIFx0XHRcdGhvdFNldFN0YXR1cyhcImZhaWxcIik7XG4gXHRcdFx0cmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbiBcdFx0fVxuXG4gXHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdGNhbGxiYWNrKG51bGwsIG91dGRhdGVkTW9kdWxlcyk7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZSxcbiBcdFx0XHRob3Q6IGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCksXG4gXHRcdFx0cGFyZW50czogaG90Q3VycmVudFBhcmVudHMsXG4gXHRcdFx0Y2hpbGRyZW46IFtdXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9idWlsZFwiO1xuXG4gXHQvLyBfX3dlYnBhY2tfaGFzaF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhvdEN1cnJlbnRIYXNoOyB9O1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBob3RDcmVhdGVSZXF1aXJlKDApKDApO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHdlYnBhY2svYm9vdHN0cmFwIGI1YjY0YTU1YTkyMDIzZGVjYTY4XG4gKiovIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxucHJvY2Vzcy5uZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhblNldEltbWVkaWF0ZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnNldEltbWVkaWF0ZTtcbiAgICB2YXIgY2FuTXV0YXRpb25PYnNlcnZlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXI7XG4gICAgdmFyIGNhblBvc3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5wb3N0TWVzc2FnZSAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lclxuICAgIDtcblxuICAgIGlmIChjYW5TZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmKSB7IHJldHVybiB3aW5kb3cuc2V0SW1tZWRpYXRlKGYpIH07XG4gICAgfVxuXG4gICAgdmFyIHF1ZXVlID0gW107XG5cbiAgICBpZiAoY2FuTXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgICB2YXIgaGlkZGVuRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHF1ZXVlTGlzdCA9IHF1ZXVlLnNsaWNlKCk7XG4gICAgICAgICAgICBxdWV1ZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgcXVldWVMaXN0LmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGhpZGRlbkRpdiwgeyBhdHRyaWJ1dGVzOiB0cnVlIH0pO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgICAgICAgICAgaWYgKCFxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBoaWRkZW5EaXYuc2V0QXR0cmlidXRlKCd5ZXMnLCAnbm8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHF1ZXVlLnB1c2goZm4pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGlmIChjYW5Qb3N0KSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gZXYuc291cmNlO1xuICAgICAgICAgICAgaWYgKChzb3VyY2UgPT09IHdpbmRvdyB8fCBzb3VyY2UgPT09IG51bGwpICYmIGV2LmRhdGEgPT09ICdwcm9jZXNzLXRpY2snKSB7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZuID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgICAgICAgICAgcXVldWUucHVzaChmbik7XG4gICAgICAgICAgICB3aW5kb3cucG9zdE1lc3NhZ2UoJ3Byb2Nlc3MtdGljaycsICcqJyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZm4sIDApO1xuICAgIH07XG59KSgpO1xuXG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbi8vIFRPRE8oc2h0eWxtYW4pXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogKHdlYnBhY2spL34vbm9kZS1saWJzLWJyb3dzZXIvfi9wcm9jZXNzL2Jyb3dzZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaW52YXJpYW50XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ0ludmFyaWFudCBWaW9sYXRpb246ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL2ludmFyaWFudC5qc1xuICoqIG1vZHVsZSBpZCA9IDJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgT2JqZWN0LmFzc2lnblxuICovXG5cbi8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1vYmplY3QuYXNzaWduXG5cbmZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZXMpIHtcbiAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiB0YXJnZXQgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gIH1cblxuICB2YXIgdG8gPSBPYmplY3QodGFyZ2V0KTtcbiAgdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuICBmb3IgKHZhciBuZXh0SW5kZXggPSAxOyBuZXh0SW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBuZXh0SW5kZXgrKykge1xuICAgIHZhciBuZXh0U291cmNlID0gYXJndW1lbnRzW25leHRJbmRleF07XG4gICAgaWYgKG5leHRTb3VyY2UgPT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGZyb20gPSBPYmplY3QobmV4dFNvdXJjZSk7XG5cbiAgICAvLyBXZSBkb24ndCBjdXJyZW50bHkgc3VwcG9ydCBhY2Nlc3NvcnMgbm9yIHByb3hpZXMuIFRoZXJlZm9yZSB0aGlzXG4gICAgLy8gY29weSBjYW5ub3QgdGhyb3cuIElmIHdlIGV2ZXIgc3VwcG9ydGVkIHRoaXMgdGhlbiB3ZSBtdXN0IGhhbmRsZVxuICAgIC8vIGV4Y2VwdGlvbnMgYW5kIHNpZGUtZWZmZWN0cy4gV2UgZG9uJ3Qgc3VwcG9ydCBzeW1ib2xzIHNvIHRoZXkgd29uJ3RcbiAgICAvLyBiZSB0cmFuc2ZlcnJlZC5cblxuICAgIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG4gICAgICAgIHRvW2tleV0gPSBmcm9tW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ247XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvT2JqZWN0LmFzc2lnbi5qc1xuICoqIG1vZHVsZSBpZCA9IDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFbGVtZW50XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdENvbnRleHQgPSByZXF1aXJlKFwiLi9SZWFjdENvbnRleHRcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgUkVTRVJWRURfUFJPUFMgPSB7XG4gIGtleTogdHJ1ZSxcbiAgcmVmOiB0cnVlXG59O1xuXG4vKipcbiAqIFdhcm4gZm9yIG11dGF0aW9ucy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqL1xuZnVuY3Rpb24gZGVmaW5lV2FybmluZ1Byb3BlcnR5KG9iamVjdCwga2V5KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5fc3RvcmUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fc3RvcmVba2V5XTtcbiAgICB9LFxuXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnRG9uXFwndCBzZXQgdGhlICcgKyBrZXkgKyAnIHByb3BlcnR5IG9mIHRoZSBjb21wb25lbnQuICcgK1xuICAgICAgICAnTXV0YXRlIHRoZSBleGlzdGluZyBwcm9wcyBvYmplY3QgaW5zdGVhZC4nXG4gICAgICApIDogbnVsbCk7XG4gICAgICB0aGlzLl9zdG9yZVtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gIH0pO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgdXBkYXRlZCB0byB0cnVlIGlmIHRoZSBtZW1icmFuZSBpcyBzdWNjZXNzZnVsbHkgY3JlYXRlZC5cbiAqL1xudmFyIHVzZU11dGF0aW9uTWVtYnJhbmUgPSBmYWxzZTtcblxuLyoqXG4gKiBXYXJuIGZvciBtdXRhdGlvbnMuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICovXG5mdW5jdGlvbiBkZWZpbmVNdXRhdGlvbk1lbWJyYW5lKHByb3RvdHlwZSkge1xuICB0cnkge1xuICAgIHZhciBwc2V1ZG9Gcm96ZW5Qcm9wZXJ0aWVzID0ge1xuICAgICAgcHJvcHM6IHRydWVcbiAgICB9O1xuICAgIGZvciAodmFyIGtleSBpbiBwc2V1ZG9Gcm96ZW5Qcm9wZXJ0aWVzKSB7XG4gICAgICBkZWZpbmVXYXJuaW5nUHJvcGVydHkocHJvdG90eXBlLCBrZXkpO1xuICAgIH1cbiAgICB1c2VNdXRhdGlvbk1lbWJyYW5lID0gdHJ1ZTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIC8vIElFIHdpbGwgZmFpbCBvbiBkZWZpbmVQcm9wZXJ0eVxuICB9XG59XG5cbi8qKlxuICogQmFzZSBjb25zdHJ1Y3RvciBmb3IgYWxsIFJlYWN0IGVsZW1lbnRzLiBUaGlzIGlzIG9ubHkgdXNlZCB0byBtYWtlIHRoaXNcbiAqIHdvcmsgd2l0aCBhIGR5bmFtaWMgaW5zdGFuY2VvZiBjaGVjay4gTm90aGluZyBzaG91bGQgbGl2ZSBvbiB0aGlzIHByb3RvdHlwZS5cbiAqXG4gKiBAcGFyYW0geyp9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gcmVmXG4gKiBAcGFyYW0geyp9IGtleVxuICogQHBhcmFtIHsqfSBwcm9wc1xuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdEVsZW1lbnQgPSBmdW5jdGlvbih0eXBlLCBrZXksIHJlZiwgb3duZXIsIGNvbnRleHQsIHByb3BzKSB7XG4gIC8vIEJ1aWx0LWluIHByb3BlcnRpZXMgdGhhdCBiZWxvbmcgb24gdGhlIGVsZW1lbnRcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5rZXkgPSBrZXk7XG4gIHRoaXMucmVmID0gcmVmO1xuXG4gIC8vIFJlY29yZCB0aGUgY29tcG9uZW50IHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGlzIGVsZW1lbnQuXG4gIHRoaXMuX293bmVyID0gb3duZXI7XG5cbiAgLy8gVE9ETzogRGVwcmVjYXRlIHdpdGhDb250ZXh0LCBhbmQgdGhlbiB0aGUgY29udGV4dCBiZWNvbWVzIGFjY2Vzc2libGVcbiAgLy8gdGhyb3VnaCB0aGUgb3duZXIuXG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuXG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAvLyBUaGUgdmFsaWRhdGlvbiBmbGFnIGFuZCBwcm9wcyBhcmUgY3VycmVudGx5IG11dGF0aXZlLiBXZSBwdXQgdGhlbSBvblxuICAgIC8vIGFuIGV4dGVybmFsIGJhY2tpbmcgc3RvcmUgc28gdGhhdCB3ZSBjYW4gZnJlZXplIHRoZSB3aG9sZSBvYmplY3QuXG4gICAgLy8gVGhpcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCBhIFdlYWtNYXAgb25jZSB0aGV5IGFyZSBpbXBsZW1lbnRlZCBpblxuICAgIC8vIGNvbW1vbmx5IHVzZWQgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzLlxuICAgIHRoaXMuX3N0b3JlID0geyB2YWxpZGF0ZWQ6IGZhbHNlLCBwcm9wczogcHJvcHMgfTtcblxuICAgIC8vIFdlJ3JlIG5vdCBhbGxvd2VkIHRvIHNldCBwcm9wcyBkaXJlY3RseSBvbiB0aGUgb2JqZWN0IHNvIHdlIGVhcmx5XG4gICAgLy8gcmV0dXJuIGFuZCByZWx5IG9uIHRoZSBwcm90b3R5cGUgbWVtYnJhbmUgdG8gZm9yd2FyZCB0byB0aGUgYmFja2luZ1xuICAgIC8vIHN0b3JlLlxuICAgIGlmICh1c2VNdXRhdGlvbk1lbWJyYW5lKSB7XG4gICAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbn07XG5cbi8vIFdlIGludGVudGlvbmFsbHkgZG9uJ3QgZXhwb3NlIHRoZSBmdW5jdGlvbiBvbiB0aGUgY29uc3RydWN0b3IgcHJvcGVydHkuXG4vLyBSZWFjdEVsZW1lbnQgc2hvdWxkIGJlIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYSBwbGFpbiBvYmplY3QuXG5SZWFjdEVsZW1lbnQucHJvdG90eXBlID0ge1xuICBfaXNSZWFjdEVsZW1lbnQ6IHRydWVcbn07XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgZGVmaW5lTXV0YXRpb25NZW1icmFuZShSZWFjdEVsZW1lbnQucHJvdG90eXBlKTtcbn1cblxuUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbih0eXBlLCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIHZhciBwcm9wTmFtZTtcblxuICAvLyBSZXNlcnZlZCBuYW1lcyBhcmUgZXh0cmFjdGVkXG4gIHZhciBwcm9wcyA9IHt9O1xuXG4gIHZhciBrZXkgPSBudWxsO1xuICB2YXIgcmVmID0gbnVsbDtcblxuICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICByZWYgPSBjb25maWcucmVmID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLnJlZjtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgY29uZmlnLmtleSAhPT0gbnVsbCxcbiAgICAgICAgJ2NyZWF0ZUVsZW1lbnQoLi4uKTogRW5jb3VudGVyZWQgY29tcG9uZW50IHdpdGggYSBga2V5YCBvZiBudWxsLiBJbiAnICtcbiAgICAgICAgJ2EgZnV0dXJlIHZlcnNpb24sIHRoaXMgd2lsbCBiZSB0cmVhdGVkIGFzIGVxdWl2YWxlbnQgdG8gdGhlIHN0cmluZyAnICtcbiAgICAgICAgJ1xcJ251bGxcXCc7IGluc3RlYWQsIHByb3ZpZGUgYW4gZXhwbGljaXQga2V5IG9yIHVzZSB1bmRlZmluZWQuJ1xuICAgICAgKSA6IG51bGwpO1xuICAgIH1cbiAgICAvLyBUT0RPOiBDaGFuZ2UgdGhpcyBiYWNrIHRvIGBjb25maWcua2V5ID09PSB1bmRlZmluZWRgXG4gICAga2V5ID0gY29uZmlnLmtleSA9PSBudWxsID8gbnVsbCA6ICcnICsgY29uZmlnLmtleTtcbiAgICAvLyBSZW1haW5pbmcgcHJvcGVydGllcyBhcmUgYWRkZWQgdG8gYSBuZXcgcHJvcHMgb2JqZWN0XG4gICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgIGlmIChjb25maWcuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpICYmXG4gICAgICAgICAgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgfVxuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuXG4gIC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wc1xuICBpZiAodHlwZSAmJiB0eXBlLmRlZmF1bHRQcm9wcykge1xuICAgIHZhciBkZWZhdWx0UHJvcHMgPSB0eXBlLmRlZmF1bHRQcm9wcztcbiAgICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWFjdEVsZW1lbnQoXG4gICAgdHlwZSxcbiAgICBrZXksXG4gICAgcmVmLFxuICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQsXG4gICAgUmVhY3RDb250ZXh0LmN1cnJlbnQsXG4gICAgcHJvcHNcbiAgKTtcbn07XG5cblJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5ID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgZmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50LmJpbmQobnVsbCwgdHlwZSk7XG4gIC8vIEV4cG9zZSB0aGUgdHlwZSBvbiB0aGUgZmFjdG9yeSBhbmQgdGhlIHByb3RvdHlwZSBzbyB0aGF0IGl0IGNhbiBiZVxuICAvLyBlYXNpbHkgYWNjZXNzZWQgb24gZWxlbWVudHMuIEUuZy4gPEZvbyAvPi50eXBlID09PSBGb28udHlwZS5cbiAgLy8gVGhpcyBzaG91bGQgbm90IGJlIG5hbWVkIGBjb25zdHJ1Y3RvcmAgc2luY2UgdGhpcyBtYXkgbm90IGJlIHRoZSBmdW5jdGlvblxuICAvLyB0aGF0IGNyZWF0ZWQgdGhlIGVsZW1lbnQsIGFuZCBpdCBtYXkgbm90IGV2ZW4gYmUgYSBjb25zdHJ1Y3Rvci5cbiAgZmFjdG9yeS50eXBlID0gdHlwZTtcbiAgcmV0dXJuIGZhY3Rvcnk7XG59O1xuXG5SZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlUHJvcHMgPSBmdW5jdGlvbihvbGRFbGVtZW50LCBuZXdQcm9wcykge1xuICB2YXIgbmV3RWxlbWVudCA9IG5ldyBSZWFjdEVsZW1lbnQoXG4gICAgb2xkRWxlbWVudC50eXBlLFxuICAgIG9sZEVsZW1lbnQua2V5LFxuICAgIG9sZEVsZW1lbnQucmVmLFxuICAgIG9sZEVsZW1lbnQuX293bmVyLFxuICAgIG9sZEVsZW1lbnQuX2NvbnRleHQsXG4gICAgbmV3UHJvcHNcbiAgKTtcblxuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgLy8gSWYgdGhlIGtleSBvbiB0aGUgb3JpZ2luYWwgaXMgdmFsaWQsIHRoZW4gdGhlIGNsb25lIGlzIHZhbGlkXG4gICAgbmV3RWxlbWVudC5fc3RvcmUudmFsaWRhdGVkID0gb2xkRWxlbWVudC5fc3RvcmUudmFsaWRhdGVkO1xuICB9XG4gIHJldHVybiBuZXdFbGVtZW50O1xufTtcblxuLyoqXG4gKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqZWN0YCBpcyBhIHZhbGlkIGNvbXBvbmVudC5cbiAqIEBmaW5hbFxuICovXG5SZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgLy8gUmVhY3RUZXN0VXRpbHMgaXMgb2Z0ZW4gdXNlZCBvdXRzaWRlIG9mIGJlZm9yZUVhY2ggd2hlcmUgYXMgUmVhY3QgaXNcbiAgLy8gd2l0aGluIGl0LiBUaGlzIGxlYWRzIHRvIHR3byBkaWZmZXJlbnQgaW5zdGFuY2VzIG9mIFJlYWN0IG9uIHRoZSBzYW1lXG4gIC8vIHBhZ2UuIFRvIGlkZW50aWZ5IGEgZWxlbWVudCBmcm9tIGEgZGlmZmVyZW50IFJlYWN0IGluc3RhbmNlIHdlIHVzZVxuICAvLyBhIGZsYWcgaW5zdGVhZCBvZiBhbiBpbnN0YW5jZW9mIGNoZWNrLlxuICB2YXIgaXNFbGVtZW50ID0gISEob2JqZWN0ICYmIG9iamVjdC5faXNSZWFjdEVsZW1lbnQpO1xuICAvLyBpZiAoaXNFbGVtZW50ICYmICEob2JqZWN0IGluc3RhbmNlb2YgUmVhY3RFbGVtZW50KSkge1xuICAvLyBUaGlzIGlzIGFuIGluZGljYXRvciB0aGF0IHlvdSdyZSB1c2luZyBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBSZWFjdCBhdCB0aGVcbiAgLy8gc2FtZSB0aW1lLiBUaGlzIHdpbGwgc2NyZXcgd2l0aCBvd25lcnNoaXAgYW5kIHN0dWZmLiBGaXggaXQsIHBsZWFzZS5cbiAgLy8gVE9ETzogV2UgY291bGQgcG9zc2libHkgd2FybiBoZXJlLlxuICAvLyB9XG4gIHJldHVybiBpc0VsZW1lbnQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RWxlbWVudDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9SZWFjdEVsZW1lbnQuanNcbiAqKiBtb2R1bGUgaWQgPSA0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXhlY3V0aW9uRW52aXJvbm1lbnRcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgY2FuVXNlRE9NID0gISEoXG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gIHdpbmRvdy5kb2N1bWVudCAmJlxuICB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudFxuKTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOlxuICAgIGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanNcbiAqKiBtb2R1bGUgaWQgPSA1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHdhcm5pbmdcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0ICkge2ZvciAodmFyIGFyZ3M9W10sJF9fMD0yLCRfXzE9YXJndW1lbnRzLmxlbmd0aDskX18wPCRfXzE7JF9fMCsrKSBhcmdzLnB1c2goYXJndW1lbnRzWyRfXzBdKTtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSAge3JldHVybiBhcmdzW2FyZ0luZGV4KytdO30pKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi93YXJuaW5nLmpzXG4gKiogbW9kdWxlIGlkID0gNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TW91bnRcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlcIik7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0TGVnYWN5RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0TGVnYWN5RWxlbWVudFwiKTtcbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzXCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcblxudmFyIGNvbnRhaW5zTm9kZSA9IHJlcXVpcmUoXCIuL2NvbnRhaW5zTm9kZVwiKTtcbnZhciBkZXByZWNhdGVkID0gcmVxdWlyZShcIi4vZGVwcmVjYXRlZFwiKTtcbnZhciBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIgPSByZXF1aXJlKFwiLi9nZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXJcIik7XG52YXIgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciBjcmVhdGVFbGVtZW50ID0gUmVhY3RMZWdhY3lFbGVtZW50LndyYXBDcmVhdGVFbGVtZW50KFxuICBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudFxuKTtcblxudmFyIFNFUEFSQVRPUiA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLlNFUEFSQVRPUjtcblxudmFyIEFUVFJfTkFNRSA9IERPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FO1xudmFyIG5vZGVDYWNoZSA9IHt9O1xuXG52YXIgRUxFTUVOVF9OT0RFX1RZUEUgPSAxO1xudmFyIERPQ19OT0RFX1RZUEUgPSA5O1xuXG4vKiogTWFwcGluZyBmcm9tIHJlYWN0Um9vdElEIHRvIFJlYWN0IGNvbXBvbmVudCBpbnN0YW5jZS4gKi9cbnZhciBpbnN0YW5jZXNCeVJlYWN0Um9vdElEID0ge307XG5cbi8qKiBNYXBwaW5nIGZyb20gcmVhY3RSb290SUQgdG8gYGNvbnRhaW5lcmAgbm9kZXMuICovXG52YXIgY29udGFpbmVyc0J5UmVhY3RSb290SUQgPSB7fTtcblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAvKiogX19ERVZfXy1vbmx5IG1hcHBpbmcgZnJvbSByZWFjdFJvb3RJRCB0byByb290IGVsZW1lbnRzLiAqL1xuICB2YXIgcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRCA9IHt9O1xufVxuXG4vLyBVc2VkIHRvIHN0b3JlIGJyZWFkdGgtZmlyc3Qgc2VhcmNoIHN0YXRlIGluIGZpbmRDb21wb25lbnRSb290LlxudmFyIGZpbmRDb21wb25lbnRSb290UmV1c2FibGVBcnJheSA9IFtdO1xuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRoYXQgbWF5IGNvbnRhaW4gYSBSZWFjdCBjb21wb25lbnQuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBBIFwicmVhY3RSb290XCIgSUQsIGlmIGEgUmVhY3QgY29tcG9uZW50IGlzIHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiBnZXRSZWFjdFJvb3RJRChjb250YWluZXIpIHtcbiAgdmFyIHJvb3RFbGVtZW50ID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gIHJldHVybiByb290RWxlbWVudCAmJiBSZWFjdE1vdW50LmdldElEKHJvb3RFbGVtZW50KTtcbn1cblxuLyoqXG4gKiBBY2Nlc3Npbmcgbm9kZVtBVFRSX05BTUVdIG9yIGNhbGxpbmcgZ2V0QXR0cmlidXRlKEFUVFJfTkFNRSkgb24gYSBmb3JtXG4gKiBlbGVtZW50IGNhbiByZXR1cm4gaXRzIGNvbnRyb2wgd2hvc2UgbmFtZSBvciBJRCBlcXVhbHMgQVRUUl9OQU1FLiBBbGxcbiAqIERPTSBub2RlcyBzdXBwb3J0IGBnZXRBdHRyaWJ1dGVOb2RlYCBidXQgdGhpcyBjYW4gYWxzbyBnZXQgY2FsbGVkIG9uXG4gKiBvdGhlciBvYmplY3RzIHNvIGp1c3QgcmV0dXJuICcnIGlmIHdlJ3JlIGdpdmVuIHNvbWV0aGluZyBvdGhlciB0aGFuIGFcbiAqIERPTSBub2RlIChzdWNoIGFzIHdpbmRvdykuXG4gKlxuICogQHBhcmFtIHs/RE9NRWxlbWVudHxET01XaW5kb3d8RE9NRG9jdW1lbnR8RE9NVGV4dE5vZGV9IG5vZGUgRE9NIG5vZGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IElEIG9mIHRoZSBzdXBwbGllZCBgZG9tTm9kZWAuXG4gKi9cbmZ1bmN0aW9uIGdldElEKG5vZGUpIHtcbiAgdmFyIGlkID0gaW50ZXJuYWxHZXRJRChub2RlKTtcbiAgaWYgKGlkKSB7XG4gICAgaWYgKG5vZGVDYWNoZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIHZhciBjYWNoZWQgPSBub2RlQ2FjaGVbaWRdO1xuICAgICAgaWYgKGNhY2hlZCAhPT0gbm9kZSkge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgICFpc1ZhbGlkKGNhY2hlZCwgaWQpLFxuICAgICAgICAgICdSZWFjdE1vdW50OiBUd28gdmFsaWQgYnV0IHVuZXF1YWwgbm9kZXMgd2l0aCB0aGUgc2FtZSBgJXNgOiAlcycsXG4gICAgICAgICAgQVRUUl9OQU1FLCBpZFxuICAgICAgICApIDogaW52YXJpYW50KCFpc1ZhbGlkKGNhY2hlZCwgaWQpKSk7XG5cbiAgICAgICAgbm9kZUNhY2hlW2lkXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGVDYWNoZVtpZF0gPSBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpZDtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxHZXRJRChub2RlKSB7XG4gIC8vIElmIG5vZGUgaXMgc29tZXRoaW5nIGxpa2UgYSB3aW5kb3csIGRvY3VtZW50LCBvciB0ZXh0IG5vZGUsIG5vbmUgb2ZcbiAgLy8gd2hpY2ggc3VwcG9ydCBhdHRyaWJ1dGVzIG9yIGEgLmdldEF0dHJpYnV0ZSBtZXRob2QsIGdyYWNlZnVsbHkgcmV0dXJuXG4gIC8vIHRoZSBlbXB0eSBzdHJpbmcsIGFzIGlmIHRoZSBhdHRyaWJ1dGUgd2VyZSBtaXNzaW5nLlxuICByZXR1cm4gbm9kZSAmJiBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZShBVFRSX05BTUUpIHx8ICcnO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIFJlYWN0LXNwZWNpZmljIElEIG9mIHRoZSBnaXZlbiBub2RlLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZSBUaGUgRE9NIG5vZGUgd2hvc2UgSUQgd2lsbCBiZSBzZXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIHZhbHVlIG9mIHRoZSBJRCBhdHRyaWJ1dGUuXG4gKi9cbmZ1bmN0aW9uIHNldElEKG5vZGUsIGlkKSB7XG4gIHZhciBvbGRJRCA9IGludGVybmFsR2V0SUQobm9kZSk7XG4gIGlmIChvbGRJRCAhPT0gaWQpIHtcbiAgICBkZWxldGUgbm9kZUNhY2hlW29sZElEXTtcbiAgfVxuICBub2RlLnNldEF0dHJpYnV0ZShBVFRSX05BTUUsIGlkKTtcbiAgbm9kZUNhY2hlW2lkXSA9IG5vZGU7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgUmVhY3QtZ2VuZXJhdGVkIERPTSBJRC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQSBSZWFjdC1nZW5lcmF0ZWQgRE9NIElELlxuICogQHJldHVybiB7RE9NRWxlbWVudH0gRE9NIG5vZGUgd2l0aCB0aGUgc3VwcGxlZCBgaWRgLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGUoaWQpIHtcbiAgaWYgKCFub2RlQ2FjaGUuaGFzT3duUHJvcGVydHkoaWQpIHx8ICFpc1ZhbGlkKG5vZGVDYWNoZVtpZF0sIGlkKSkge1xuICAgIG5vZGVDYWNoZVtpZF0gPSBSZWFjdE1vdW50LmZpbmRSZWFjdE5vZGVCeUlEKGlkKTtcbiAgfVxuICByZXR1cm4gbm9kZUNhY2hlW2lkXTtcbn1cblxuLyoqXG4gKiBBIG5vZGUgaXMgXCJ2YWxpZFwiIGlmIGl0IGlzIGNvbnRhaW5lZCBieSBhIGN1cnJlbnRseSBtb3VudGVkIGNvbnRhaW5lci5cbiAqXG4gKiBUaGlzIG1lYW5zIHRoYXQgdGhlIG5vZGUgZG9lcyBub3QgaGF2ZSB0byBiZSBjb250YWluZWQgYnkgYSBkb2N1bWVudCBpblxuICogb3JkZXIgdG8gYmUgY29uc2lkZXJlZCB2YWxpZC5cbiAqXG4gKiBAcGFyYW0gez9ET01FbGVtZW50fSBub2RlIFRoZSBjYW5kaWRhdGUgRE9NIG5vZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGV4cGVjdGVkIElEIG9mIHRoZSBub2RlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgbm9kZSBpcyBjb250YWluZWQgYnkgYSBtb3VudGVkIGNvbnRhaW5lci5cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZChub2RlLCBpZCkge1xuICBpZiAobm9kZSkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBpbnRlcm5hbEdldElEKG5vZGUpID09PSBpZCxcbiAgICAgICdSZWFjdE1vdW50OiBVbmV4cGVjdGVkIG1vZGlmaWNhdGlvbiBvZiBgJXNgJyxcbiAgICAgIEFUVFJfTkFNRVxuICAgICkgOiBpbnZhcmlhbnQoaW50ZXJuYWxHZXRJRChub2RlKSA9PT0gaWQpKTtcblxuICAgIHZhciBjb250YWluZXIgPSBSZWFjdE1vdW50LmZpbmRSZWFjdENvbnRhaW5lckZvcklEKGlkKTtcbiAgICBpZiAoY29udGFpbmVyICYmIGNvbnRhaW5zTm9kZShjb250YWluZXIsIG5vZGUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ2F1c2VzIHRoZSBjYWNoZSB0byBmb3JnZXQgYWJvdXQgb25lIFJlYWN0LXNwZWNpZmljIElELlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgSUQgdG8gZm9yZ2V0LlxuICovXG5mdW5jdGlvbiBwdXJnZUlEKGlkKSB7XG4gIGRlbGV0ZSBub2RlQ2FjaGVbaWRdO1xufVxuXG52YXIgZGVlcGVzdE5vZGVTb0ZhciA9IG51bGw7XG5mdW5jdGlvbiBmaW5kRGVlcGVzdENhY2hlZEFuY2VzdG9ySW1wbChhbmNlc3RvcklEKSB7XG4gIHZhciBhbmNlc3RvciA9IG5vZGVDYWNoZVthbmNlc3RvcklEXTtcbiAgaWYgKGFuY2VzdG9yICYmIGlzVmFsaWQoYW5jZXN0b3IsIGFuY2VzdG9ySUQpKSB7XG4gICAgZGVlcGVzdE5vZGVTb0ZhciA9IGFuY2VzdG9yO1xuICB9IGVsc2Uge1xuICAgIC8vIFRoaXMgbm9kZSBpc24ndCBwb3B1bGF0ZWQgaW4gdGhlIGNhY2hlLCBzbyBwcmVzdW1hYmx5IG5vbmUgb2YgaXRzXG4gICAgLy8gZGVzY2VuZGFudHMgYXJlLiBCcmVhayBvdXQgb2YgdGhlIGxvb3AuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBkZWVwZXN0IGNhY2hlZCBub2RlIHdob3NlIElEIGlzIGEgcHJlZml4IG9mIGB0YXJnZXRJRGAuXG4gKi9cbmZ1bmN0aW9uIGZpbmREZWVwZXN0Q2FjaGVkQW5jZXN0b3IodGFyZ2V0SUQpIHtcbiAgZGVlcGVzdE5vZGVTb0ZhciA9IG51bGw7XG4gIFJlYWN0SW5zdGFuY2VIYW5kbGVzLnRyYXZlcnNlQW5jZXN0b3JzKFxuICAgIHRhcmdldElELFxuICAgIGZpbmREZWVwZXN0Q2FjaGVkQW5jZXN0b3JJbXBsXG4gICk7XG5cbiAgdmFyIGZvdW5kTm9kZSA9IGRlZXBlc3ROb2RlU29GYXI7XG4gIGRlZXBlc3ROb2RlU29GYXIgPSBudWxsO1xuICByZXR1cm4gZm91bmROb2RlO1xufVxuXG4vKipcbiAqIE1vdW50aW5nIGlzIHRoZSBwcm9jZXNzIG9mIGluaXRpYWxpemluZyBhIFJlYWN0IGNvbXBvbmVudCBieSBjcmVhdGluZ3MgaXRzXG4gKiByZXByZXNlbnRhdGl2ZSBET00gZWxlbWVudHMgYW5kIGluc2VydGluZyB0aGVtIGludG8gYSBzdXBwbGllZCBgY29udGFpbmVyYC5cbiAqIEFueSBwcmlvciBjb250ZW50IGluc2lkZSBgY29udGFpbmVyYCBpcyBkZXN0cm95ZWQgaW4gdGhlIHByb2Nlc3MuXG4gKlxuICogICBSZWFjdE1vdW50LnJlbmRlcihcbiAqICAgICBjb21wb25lbnQsXG4gKiAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhaW5lcicpXG4gKiAgICk7XG4gKlxuICogICA8ZGl2IGlkPVwiY29udGFpbmVyXCI+ICAgICAgICAgICAgICAgICAgIDwtLSBTdXBwbGllZCBgY29udGFpbmVyYC5cbiAqICAgICA8ZGl2IGRhdGEtcmVhY3RpZD1cIi4zXCI+ICAgICAgICAgICAgICA8LS0gUmVuZGVyZWQgcmVhY3RSb290IG9mIFJlYWN0XG4gKiAgICAgICAvLyAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuXG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICpcbiAqIEluc2lkZSBvZiBgY29udGFpbmVyYCwgdGhlIGZpcnN0IGVsZW1lbnQgcmVuZGVyZWQgaXMgdGhlIFwicmVhY3RSb290XCIuXG4gKi9cbnZhciBSZWFjdE1vdW50ID0ge1xuICAvKiogRXhwb3NlZCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzICoqL1xuICBfaW5zdGFuY2VzQnlSZWFjdFJvb3RJRDogaW5zdGFuY2VzQnlSZWFjdFJvb3RJRCxcblxuICAvKipcbiAgICogVGhpcyBpcyBhIGhvb2sgcHJvdmlkZWQgdG8gc3VwcG9ydCByZW5kZXJpbmcgUmVhY3QgY29tcG9uZW50cyB3aGlsZVxuICAgKiBlbnN1cmluZyB0aGF0IHRoZSBhcHBhcmVudCBzY3JvbGwgcG9zaXRpb24gb2YgaXRzIGBjb250YWluZXJgIGRvZXMgbm90XG4gICAqIGNoYW5nZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgVGhlIGBjb250YWluZXJgIGJlaW5nIHJlbmRlcmVkIGludG8uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlbmRlckNhbGxiYWNrIFRoaXMgbXVzdCBiZSBjYWxsZWQgb25jZSB0byBkbyB0aGUgcmVuZGVyLlxuICAgKi9cbiAgc2Nyb2xsTW9uaXRvcjogZnVuY3Rpb24oY29udGFpbmVyLCByZW5kZXJDYWxsYmFjaykge1xuICAgIHJlbmRlckNhbGxiYWNrKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRha2UgYSBjb21wb25lbnQgdGhhdCdzIGFscmVhZHkgbW91bnRlZCBpbnRvIHRoZSBET00gYW5kIHJlcGxhY2UgaXRzIHByb3BzXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IHByZXZDb21wb25lbnQgY29tcG9uZW50IGluc3RhbmNlIGFscmVhZHkgaW4gdGhlIERPTVxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBuZXh0Q29tcG9uZW50IGNvbXBvbmVudCBpbnN0YW5jZSB0byByZW5kZXJcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbiB0cmlnZ2VyZWQgb24gY29tcGxldGlvblxuICAgKi9cbiAgX3VwZGF0ZVJvb3RDb21wb25lbnQ6IGZ1bmN0aW9uKFxuICAgICAgcHJldkNvbXBvbmVudCxcbiAgICAgIG5leHRDb21wb25lbnQsXG4gICAgICBjb250YWluZXIsXG4gICAgICBjYWxsYmFjaykge1xuICAgIHZhciBuZXh0UHJvcHMgPSBuZXh0Q29tcG9uZW50LnByb3BzO1xuICAgIFJlYWN0TW91bnQuc2Nyb2xsTW9uaXRvcihjb250YWluZXIsIGZ1bmN0aW9uKCkge1xuICAgICAgcHJldkNvbXBvbmVudC5yZXBsYWNlUHJvcHMobmV4dFByb3BzLCBjYWxsYmFjayk7XG4gICAgfSk7XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAvLyBSZWNvcmQgdGhlIHJvb3QgZWxlbWVudCBpbiBjYXNlIGl0IGxhdGVyIGdldHMgdHJhbnNwbGFudGVkLlxuICAgICAgcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtnZXRSZWFjdFJvb3RJRChjb250YWluZXIpXSA9XG4gICAgICAgIGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcmV2Q29tcG9uZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGNvbXBvbmVudCBpbnRvIHRoZSBpbnN0YW5jZSBtYXAgYW5kIHN0YXJ0cyBzY3JvbGwgdmFsdWVcbiAgICogbW9uaXRvcmluZ1xuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBuZXh0Q29tcG9uZW50IGNvbXBvbmVudCBpbnN0YW5jZSB0byByZW5kZXJcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvXG4gICAqIEByZXR1cm4ge3N0cmluZ30gcmVhY3RSb290IElEIHByZWZpeFxuICAgKi9cbiAgX3JlZ2lzdGVyQ29tcG9uZW50OiBmdW5jdGlvbihuZXh0Q29tcG9uZW50LCBjb250YWluZXIpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgY29udGFpbmVyICYmIChcbiAgICAgICAgY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fFxuICAgICAgICBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEVcbiAgICAgICksXG4gICAgICAnX3JlZ2lzdGVyQ29tcG9uZW50KC4uLik6IFRhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJ1xuICAgICkgOiBpbnZhcmlhbnQoY29udGFpbmVyICYmIChcbiAgICAgIGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHxcbiAgICAgIGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRVxuICAgICkpKTtcblxuICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5lbnN1cmVTY3JvbGxWYWx1ZU1vbml0b3JpbmcoKTtcblxuICAgIHZhciByZWFjdFJvb3RJRCA9IFJlYWN0TW91bnQucmVnaXN0ZXJDb250YWluZXIoY29udGFpbmVyKTtcbiAgICBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSA9IG5leHRDb21wb25lbnQ7XG4gICAgcmV0dXJuIHJlYWN0Um9vdElEO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgYSBuZXcgY29tcG9uZW50IGludG8gdGhlIERPTS5cbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gbmV4dENvbXBvbmVudCBjb21wb25lbnQgaW5zdGFuY2UgdG8gcmVuZGVyXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIGNvbnRhaW5lciB0byByZW5kZXIgaW50b1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNob3VsZFJldXNlTWFya3VwIGlmIHdlIHNob3VsZCBza2lwIHRoZSBtYXJrdXAgaW5zZXJ0aW9uXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBuZXh0Q29tcG9uZW50XG4gICAqL1xuICBfcmVuZGVyTmV3Um9vdENvbXBvbmVudDogUmVhY3RQZXJmLm1lYXN1cmUoXG4gICAgJ1JlYWN0TW91bnQnLFxuICAgICdfcmVuZGVyTmV3Um9vdENvbXBvbmVudCcsXG4gICAgZnVuY3Rpb24oXG4gICAgICAgIG5leHRDb21wb25lbnQsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgc2hvdWxkUmV1c2VNYXJrdXApIHtcbiAgICAgIC8vIFZhcmlvdXMgcGFydHMgb2Ygb3VyIGNvZGUgKHN1Y2ggYXMgUmVhY3RDb21wb3NpdGVDb21wb25lbnQnc1xuICAgICAgLy8gX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCkgYXNzdW1lIHRoYXQgY2FsbHMgdG8gcmVuZGVyIGFyZW4ndCBuZXN0ZWQ7XG4gICAgICAvLyB2ZXJpZnkgdGhhdCB0aGF0J3MgdGhlIGNhc2UuXG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLFxuICAgICAgICAnX3JlbmRlck5ld1Jvb3RDb21wb25lbnQoKTogUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ29mIHByb3BzIGFuZCBzdGF0ZTsgdHJpZ2dlcmluZyBuZXN0ZWQgY29tcG9uZW50IHVwZGF0ZXMgZnJvbSAnICtcbiAgICAgICAgJ3JlbmRlciBpcyBub3QgYWxsb3dlZC4gSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluICcgK1xuICAgICAgICAnY29tcG9uZW50RGlkVXBkYXRlLidcbiAgICAgICkgOiBudWxsKTtcblxuICAgICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChuZXh0Q29tcG9uZW50LCBudWxsKTtcbiAgICAgIHZhciByZWFjdFJvb3RJRCA9IFJlYWN0TW91bnQuX3JlZ2lzdGVyQ29tcG9uZW50KFxuICAgICAgICBjb21wb25lbnRJbnN0YW5jZSxcbiAgICAgICAgY29udGFpbmVyXG4gICAgICApO1xuICAgICAgY29tcG9uZW50SW5zdGFuY2UubW91bnRDb21wb25lbnRJbnRvTm9kZShcbiAgICAgICAgcmVhY3RSb290SUQsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgc2hvdWxkUmV1c2VNYXJrdXBcbiAgICAgICk7XG5cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgLy8gUmVjb3JkIHRoZSByb290IGVsZW1lbnQgaW4gY2FzZSBpdCBsYXRlciBnZXRzIHRyYW5zcGxhbnRlZC5cbiAgICAgICAgcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF0gPVxuICAgICAgICAgIGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcG9uZW50SW5zdGFuY2U7XG4gICAgfVxuICApLFxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIGEgUmVhY3QgY29tcG9uZW50IGludG8gdGhlIERPTSBpbiB0aGUgc3VwcGxpZWQgYGNvbnRhaW5lcmAuXG4gICAqXG4gICAqIElmIHRoZSBSZWFjdCBjb21wb25lbnQgd2FzIHByZXZpb3VzbHkgcmVuZGVyZWQgaW50byBgY29udGFpbmVyYCwgdGhpcyB3aWxsXG4gICAqIHBlcmZvcm0gYW4gdXBkYXRlIG9uIGl0IGFuZCBvbmx5IG11dGF0ZSB0aGUgRE9NIGFzIG5lY2Vzc2FyeSB0byByZWZsZWN0IHRoZVxuICAgKiBsYXRlc3QgUmVhY3QgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgQ29tcG9uZW50IGVsZW1lbnQgdG8gcmVuZGVyLlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byByZW5kZXIgaW50by5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRyaWdnZXJlZCBvbiBjb21wbGV0aW9uXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBDb21wb25lbnQgaW5zdGFuY2UgcmVuZGVyZWQgaW4gYGNvbnRhaW5lcmAuXG4gICAqL1xuICByZW5kZXI6IGZ1bmN0aW9uKG5leHRFbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChuZXh0RWxlbWVudCksXG4gICAgICAncmVuZGVyQ29tcG9uZW50KCk6IEludmFsaWQgY29tcG9uZW50IGVsZW1lbnQuJXMnLFxuICAgICAgKFxuICAgICAgICB0eXBlb2YgbmV4dEVsZW1lbnQgPT09ICdzdHJpbmcnID9cbiAgICAgICAgICAnIEluc3RlYWQgb2YgcGFzc2luZyBhbiBlbGVtZW50IHN0cmluZywgbWFrZSBzdXJlIHRvIGluc3RhbnRpYXRlICcgK1xuICAgICAgICAgICdpdCBieSBwYXNzaW5nIGl0IHRvIFJlYWN0LmNyZWF0ZUVsZW1lbnQuJyA6XG4gICAgICAgIFJlYWN0TGVnYWN5RWxlbWVudC5pc1ZhbGlkRmFjdG9yeShuZXh0RWxlbWVudCkgP1xuICAgICAgICAgICcgSW5zdGVhZCBvZiBwYXNzaW5nIGEgY29tcG9uZW50IGNsYXNzLCBtYWtlIHN1cmUgdG8gaW5zdGFudGlhdGUgJyArXG4gICAgICAgICAgJ2l0IGJ5IHBhc3NpbmcgaXQgdG8gUmVhY3QuY3JlYXRlRWxlbWVudC4nIDpcbiAgICAgICAgLy8gQ2hlY2sgaWYgaXQgcXVhY2tzIGxpa2UgYSBlbGVtZW50XG4gICAgICAgIHR5cGVvZiBuZXh0RWxlbWVudC5wcm9wcyAhPT0gXCJ1bmRlZmluZWRcIiA/XG4gICAgICAgICAgJyBUaGlzIG1heSBiZSBjYXVzZWQgYnkgdW5pbnRlbnRpb25hbGx5IGxvYWRpbmcgdHdvIGluZGVwZW5kZW50ICcgK1xuICAgICAgICAgICdjb3BpZXMgb2YgUmVhY3QuJyA6XG4gICAgICAgICAgJydcbiAgICAgIClcbiAgICApIDogaW52YXJpYW50KFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChuZXh0RWxlbWVudCkpKTtcblxuICAgIHZhciBwcmV2Q29tcG9uZW50ID0gaW5zdGFuY2VzQnlSZWFjdFJvb3RJRFtnZXRSZWFjdFJvb3RJRChjb250YWluZXIpXTtcblxuICAgIGlmIChwcmV2Q29tcG9uZW50KSB7XG4gICAgICB2YXIgcHJldkVsZW1lbnQgPSBwcmV2Q29tcG9uZW50Ll9jdXJyZW50RWxlbWVudDtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybiBSZWFjdE1vdW50Ll91cGRhdGVSb290Q29tcG9uZW50KFxuICAgICAgICAgIHByZXZDb21wb25lbnQsXG4gICAgICAgICAgbmV4dEVsZW1lbnQsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGNhbGxiYWNrXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRBdE5vZGUoY29udGFpbmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVhY3RSb290RWxlbWVudCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIHZhciBjb250YWluZXJIYXNSZWFjdE1hcmt1cCA9XG4gICAgICByZWFjdFJvb3RFbGVtZW50ICYmIFJlYWN0TW91bnQuaXNSZW5kZXJlZEJ5UmVhY3QocmVhY3RSb290RWxlbWVudCk7XG5cbiAgICB2YXIgc2hvdWxkUmV1c2VNYXJrdXAgPSBjb250YWluZXJIYXNSZWFjdE1hcmt1cCAmJiAhcHJldkNvbXBvbmVudDtcblxuICAgIHZhciBjb21wb25lbnQgPSBSZWFjdE1vdW50Ll9yZW5kZXJOZXdSb290Q29tcG9uZW50KFxuICAgICAgbmV4dEVsZW1lbnQsXG4gICAgICBjb250YWluZXIsXG4gICAgICBzaG91bGRSZXVzZU1hcmt1cFxuICAgICk7XG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2suY2FsbChjb21wb25lbnQpO1xuICAgIHJldHVybiBjb21wb25lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBjb21wb25lbnQgaW5zdGFuY2Ugb2YgYGNvbnN0cnVjdG9yYCB3aXRoIGBpbml0aWFsUHJvcHNgIGFuZFxuICAgKiByZW5kZXJzIGl0IGludG8gdGhlIHN1cHBsaWVkIGBjb250YWluZXJgLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25zdHJ1Y3RvciBSZWFjdCBjb21wb25lbnQgY29uc3RydWN0b3IuXG4gICAqIEBwYXJhbSB7P29iamVjdH0gcHJvcHMgSW5pdGlhbCBwcm9wcyBvZiB0aGUgY29tcG9uZW50IGluc3RhbmNlLlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byByZW5kZXIgaW50by5cbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IENvbXBvbmVudCBpbnN0YW5jZSByZW5kZXJlZCBpbiBgY29udGFpbmVyYC5cbiAgICovXG4gIGNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudDogZnVuY3Rpb24oY29uc3RydWN0b3IsIHByb3BzLCBjb250YWluZXIpIHtcbiAgICB2YXIgZWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoY29uc3RydWN0b3IsIHByb3BzKTtcbiAgICByZXR1cm4gUmVhY3RNb3VudC5yZW5kZXIoZWxlbWVudCwgY29udGFpbmVyKTtcbiAgfSxcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIGNvbXBvbmVudCBpbnN0YW5jZSBvZiBgY29uc3RydWN0b3JgIHdpdGggYGluaXRpYWxQcm9wc2AgYW5kXG4gICAqIHJlbmRlcnMgaXQgaW50byBhIGNvbnRhaW5lciBub2RlIGlkZW50aWZpZWQgYnkgc3VwcGxpZWQgYGlkYC5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcG9uZW50Q29uc3RydWN0b3IgUmVhY3QgY29tcG9uZW50IGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7P29iamVjdH0gcHJvcHMgSW5pdGlhbCBwcm9wcyBvZiB0aGUgY29tcG9uZW50IGluc3RhbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIERPTSBlbGVtZW50IHRvIHJlbmRlciBpbnRvLlxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gQ29tcG9uZW50IGluc3RhbmNlIHJlbmRlcmVkIGluIHRoZSBjb250YWluZXIgbm9kZS5cbiAgICovXG4gIGNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudEJ5SUQ6IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBwcm9wcywgaWQpIHtcbiAgICB2YXIgZG9tTm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgZG9tTm9kZSxcbiAgICAgICdUcmllZCB0byBnZXQgZWxlbWVudCB3aXRoIGlkIG9mIFwiJXNcIiBidXQgaXQgaXMgbm90IHByZXNlbnQgb24gdGhlIHBhZ2UuJyxcbiAgICAgIGlkXG4gICAgKSA6IGludmFyaWFudChkb21Ob2RlKSk7XG4gICAgcmV0dXJuIFJlYWN0TW91bnQuY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50KGNvbnN0cnVjdG9yLCBwcm9wcywgZG9tTm9kZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGNvbnRhaW5lciBub2RlIGludG8gd2hpY2ggUmVhY3QgY29tcG9uZW50cyB3aWxsIGJlIHJlbmRlcmVkLlxuICAgKiBUaGlzIGFsc28gY3JlYXRlcyB0aGUgXCJyZWFjdFJvb3RcIiBJRCB0aGF0IHdpbGwgYmUgYXNzaWduZWQgdG8gdGhlIGVsZW1lbnRcbiAgICogcmVuZGVyZWQgd2l0aGluLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byByZWdpc3RlciBhcyBhIGNvbnRhaW5lci5cbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgXCJyZWFjdFJvb3RcIiBJRCBvZiBlbGVtZW50cyByZW5kZXJlZCB3aXRoaW4uXG4gICAqL1xuICByZWdpc3RlckNvbnRhaW5lcjogZnVuY3Rpb24oY29udGFpbmVyKSB7XG4gICAgdmFyIHJlYWN0Um9vdElEID0gZ2V0UmVhY3RSb290SUQoY29udGFpbmVyKTtcbiAgICBpZiAocmVhY3RSb290SUQpIHtcbiAgICAgIC8vIElmIG9uZSBleGlzdHMsIG1ha2Ugc3VyZSBpdCBpcyBhIHZhbGlkIFwicmVhY3RSb290XCIgSUQuXG4gICAgICByZWFjdFJvb3RJRCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmdldFJlYWN0Um9vdElERnJvbU5vZGVJRChyZWFjdFJvb3RJRCk7XG4gICAgfVxuICAgIGlmICghcmVhY3RSb290SUQpIHtcbiAgICAgIC8vIE5vIHZhbGlkIFwicmVhY3RSb290XCIgSUQgZm91bmQsIGNyZWF0ZSBvbmUuXG4gICAgICByZWFjdFJvb3RJRCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0Um9vdElEKCk7XG4gICAgfVxuICAgIGNvbnRhaW5lcnNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSA9IGNvbnRhaW5lcjtcbiAgICByZXR1cm4gcmVhY3RSb290SUQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVubW91bnRzIGFuZCBkZXN0cm95cyB0aGUgUmVhY3QgY29tcG9uZW50IHJlbmRlcmVkIGluIHRoZSBgY29udGFpbmVyYC5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgY29udGFpbmluZyBhIFJlYWN0IGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhIGNvbXBvbmVudCB3YXMgZm91bmQgaW4gYW5kIHVubW91bnRlZCBmcm9tXG4gICAqICAgICAgICAgICAgICAgICAgIGBjb250YWluZXJgXG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50QXROb2RlOiBmdW5jdGlvbihjb250YWluZXIpIHtcbiAgICAvLyBWYXJpb3VzIHBhcnRzIG9mIG91ciBjb2RlIChzdWNoIGFzIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50J3NcbiAgICAvLyBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KSBhc3N1bWUgdGhhdCBjYWxscyB0byByZW5kZXIgYXJlbid0IG5lc3RlZDtcbiAgICAvLyB2ZXJpZnkgdGhhdCB0aGF0J3MgdGhlIGNhc2UuIChTdHJpY3RseSBzcGVha2luZywgdW5tb3VudGluZyB3b24ndCBjYXVzZSBhXG4gICAgLy8gcmVuZGVyIGJ1dCB3ZSBzdGlsbCBkb24ndCBleHBlY3QgdG8gYmUgaW4gYSByZW5kZXIgY2FsbCBoZXJlLilcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCxcbiAgICAgICd1bm1vdW50Q29tcG9uZW50QXROb2RlKCk6IFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgJyArXG4gICAgICAncHJvcHMgYW5kIHN0YXRlOyB0cmlnZ2VyaW5nIG5lc3RlZCBjb21wb25lbnQgdXBkYXRlcyBmcm9tIHJlbmRlciBpcyAnICtcbiAgICAgICdub3QgYWxsb3dlZC4gSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluICcgK1xuICAgICAgJ2NvbXBvbmVudERpZFVwZGF0ZS4nXG4gICAgKSA6IG51bGwpO1xuXG4gICAgdmFyIHJlYWN0Um9vdElEID0gZ2V0UmVhY3RSb290SUQoY29udGFpbmVyKTtcbiAgICB2YXIgY29tcG9uZW50ID0gaW5zdGFuY2VzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF07XG4gICAgaWYgKCFjb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgUmVhY3RNb3VudC51bm1vdW50Q29tcG9uZW50RnJvbU5vZGUoY29tcG9uZW50LCBjb250YWluZXIpO1xuICAgIGRlbGV0ZSBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcbiAgICBkZWxldGUgY29udGFpbmVyc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIGRlbGV0ZSByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVubW91bnRzIGEgY29tcG9uZW50IGFuZCByZW1vdmVzIGl0IGZyb20gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW5zdGFuY2UgUmVhY3QgY29tcG9uZW50IGluc3RhbmNlLlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byB1bm1vdW50IGZyb20uXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICogQHNlZSB7UmVhY3RNb3VudC51bm1vdW50Q29tcG9uZW50QXROb2RlfVxuICAgKi9cbiAgdW5tb3VudENvbXBvbmVudEZyb21Ob2RlOiBmdW5jdGlvbihpbnN0YW5jZSwgY29udGFpbmVyKSB7XG4gICAgaW5zdGFuY2UudW5tb3VudENvbXBvbmVudCgpO1xuXG4gICAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSkge1xuICAgICAgY29udGFpbmVyID0gY29udGFpbmVyLmRvY3VtZW50RWxlbWVudDtcbiAgICB9XG5cbiAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9lbXB0eWluZy1hLW5vZGVcbiAgICB3aGlsZSAoY29udGFpbmVyLmxhc3RDaGlsZCkge1xuICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRhaW5lci5sYXN0Q2hpbGQpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRmluZHMgdGhlIGNvbnRhaW5lciBET00gZWxlbWVudCB0aGF0IGNvbnRhaW5zIFJlYWN0IGNvbXBvbmVudCB0byB3aGljaCB0aGVcbiAgICogc3VwcGxpZWQgRE9NIGBpZGAgYmVsb25ncy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBJRCBvZiBhbiBlbGVtZW50IHJlbmRlcmVkIGJ5IGEgUmVhY3QgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHs/RE9NRWxlbWVudH0gRE9NIGVsZW1lbnQgdGhhdCBjb250YWlucyB0aGUgYGlkYC5cbiAgICovXG4gIGZpbmRSZWFjdENvbnRhaW5lckZvcklEOiBmdW5jdGlvbihpZCkge1xuICAgIHZhciByZWFjdFJvb3RJRCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmdldFJlYWN0Um9vdElERnJvbU5vZGVJRChpZCk7XG4gICAgdmFyIGNvbnRhaW5lciA9IGNvbnRhaW5lcnNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcblxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHZhciByb290RWxlbWVudCA9IHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuICAgICAgaWYgKHJvb3RFbGVtZW50ICYmIHJvb3RFbGVtZW50LnBhcmVudE5vZGUgIT09IGNvbnRhaW5lcikge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgIC8vIENhbGwgaW50ZXJuYWxHZXRJRCBoZXJlIGJlY2F1c2UgZ2V0SUQgY2FsbHMgaXNWYWxpZCB3aGljaCBjYWxsc1xuICAgICAgICAgIC8vIGZpbmRSZWFjdENvbnRhaW5lckZvcklEICh0aGlzIGZ1bmN0aW9uKS5cbiAgICAgICAgICBpbnRlcm5hbEdldElEKHJvb3RFbGVtZW50KSA9PT0gcmVhY3RSb290SUQsXG4gICAgICAgICAgJ1JlYWN0TW91bnQ6IFJvb3QgZWxlbWVudCBJRCBkaWZmZXJlZCBmcm9tIHJlYWN0Um9vdElELidcbiAgICAgICAgKSA6IGludmFyaWFudCgvLyBDYWxsIGludGVybmFsR2V0SUQgaGVyZSBiZWNhdXNlIGdldElEIGNhbGxzIGlzVmFsaWQgd2hpY2ggY2FsbHNcbiAgICAgICAgLy8gZmluZFJlYWN0Q29udGFpbmVyRm9ySUQgKHRoaXMgZnVuY3Rpb24pLlxuICAgICAgICBpbnRlcm5hbEdldElEKHJvb3RFbGVtZW50KSA9PT0gcmVhY3RSb290SUQpKTtcblxuICAgICAgICB2YXIgY29udGFpbmVyQ2hpbGQgPSBjb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKGNvbnRhaW5lckNoaWxkICYmXG4gICAgICAgICAgICByZWFjdFJvb3RJRCA9PT0gaW50ZXJuYWxHZXRJRChjb250YWluZXJDaGlsZCkpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgY29udGFpbmVyIGhhcyBhIG5ldyBjaGlsZCB3aXRoIHRoZSBzYW1lIElEIGFzIHRoZSBvbGRcbiAgICAgICAgICAvLyByb290IGVsZW1lbnQsIHRoZW4gcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF0gaXNcbiAgICAgICAgICAvLyBqdXN0IHN0YWxlIGFuZCBuZWVkcyB0byBiZSB1cGRhdGVkLiBUaGUgY2FzZSB0aGF0IGRlc2VydmVzIGFcbiAgICAgICAgICAvLyB3YXJuaW5nIGlzIHdoZW4gdGhlIGNvbnRhaW5lciBpcyBlbXB0eS5cbiAgICAgICAgICByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSA9IGNvbnRhaW5lckNoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICdSZWFjdE1vdW50OiBSb290IGVsZW1lbnQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIGl0cyBvcmlnaW5hbCAnICtcbiAgICAgICAgICAgICdjb250YWluZXIuIE5ldyBjb250YWluZXI6Jywgcm9vdEVsZW1lbnQucGFyZW50Tm9kZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udGFpbmVyO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyBhbiBlbGVtZW50IHJlbmRlcmVkIGJ5IFJlYWN0IHdpdGggdGhlIHN1cHBsaWVkIElELlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgYSBET00gbm9kZSBpbiB0aGUgUmVhY3QgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtET01FbGVtZW50fSBSb290IERPTSBub2RlIG9mIHRoZSBSZWFjdCBjb21wb25lbnQuXG4gICAqL1xuICBmaW5kUmVhY3ROb2RlQnlJRDogZnVuY3Rpb24oaWQpIHtcbiAgICB2YXIgcmVhY3RSb290ID0gUmVhY3RNb3VudC5maW5kUmVhY3RDb250YWluZXJGb3JJRChpZCk7XG4gICAgcmV0dXJuIFJlYWN0TW91bnQuZmluZENvbXBvbmVudFJvb3QocmVhY3RSb290LCBpZCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRydWUgaWYgdGhlIHN1cHBsaWVkIGBub2RlYCBpcyByZW5kZXJlZCBieSBSZWFjdC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBub2RlIERPTSBFbGVtZW50IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBET00gRWxlbWVudCBhcHBlYXJzIHRvIGJlIHJlbmRlcmVkIGJ5IFJlYWN0LlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGlzUmVuZGVyZWRCeVJlYWN0OiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IDEpIHtcbiAgICAgIC8vIE5vdCBhIERPTUVsZW1lbnQsIHRoZXJlZm9yZSBub3QgYSBSZWFjdCBjb21wb25lbnRcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGlkID0gUmVhY3RNb3VudC5nZXRJRChub2RlKTtcbiAgICByZXR1cm4gaWQgPyBpZC5jaGFyQXQoMCkgPT09IFNFUEFSQVRPUiA6IGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmF2ZXJzZXMgdXAgdGhlIGFuY2VzdG9ycyBvZiB0aGUgc3VwcGxpZWQgbm9kZSB0byBmaW5kIGEgbm9kZSB0aGF0IGlzIGFcbiAgICogRE9NIHJlcHJlc2VudGF0aW9uIG9mIGEgUmVhY3QgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0geyp9IG5vZGVcbiAgICogQHJldHVybiB7P0RPTUV2ZW50VGFyZ2V0fVxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGdldEZpcnN0UmVhY3RET006IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgY3VycmVudCA9IG5vZGU7XG4gICAgd2hpbGUgKGN1cnJlbnQgJiYgY3VycmVudC5wYXJlbnROb2RlICE9PSBjdXJyZW50KSB7XG4gICAgICBpZiAoUmVhY3RNb3VudC5pc1JlbmRlcmVkQnlSZWFjdChjdXJyZW50KSkge1xuICAgICAgICByZXR1cm4gY3VycmVudDtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudE5vZGU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyBhIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgYHRhcmdldElEYCBpbnNpZGUgb2YgdGhlIHN1cHBsaWVkXG4gICAqIGBhbmNlc3Rvck5vZGVgLiAgRXhwbG9pdHMgdGhlIElEIG5hbWluZyBzY2hlbWUgdG8gcGVyZm9ybSB0aGUgc2VhcmNoXG4gICAqIHF1aWNrbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IGFuY2VzdG9yTm9kZSBTZWFyY2ggZnJvbSB0aGlzIHJvb3QuXG4gICAqIEBwYXJhcm0ge3N0cmluZ30gdGFyZ2V0SUQgSUQgb2YgdGhlIERPTSByZXByZXNlbnRhdGlvbiBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtET01FdmVudFRhcmdldH0gRE9NIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgYHRhcmdldElEYC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBmaW5kQ29tcG9uZW50Um9vdDogZnVuY3Rpb24oYW5jZXN0b3JOb2RlLCB0YXJnZXRJRCkge1xuICAgIHZhciBmaXJzdENoaWxkcmVuID0gZmluZENvbXBvbmVudFJvb3RSZXVzYWJsZUFycmF5O1xuICAgIHZhciBjaGlsZEluZGV4ID0gMDtcblxuICAgIHZhciBkZWVwZXN0QW5jZXN0b3IgPSBmaW5kRGVlcGVzdENhY2hlZEFuY2VzdG9yKHRhcmdldElEKSB8fCBhbmNlc3Rvck5vZGU7XG5cbiAgICBmaXJzdENoaWxkcmVuWzBdID0gZGVlcGVzdEFuY2VzdG9yLmZpcnN0Q2hpbGQ7XG4gICAgZmlyc3RDaGlsZHJlbi5sZW5ndGggPSAxO1xuXG4gICAgd2hpbGUgKGNoaWxkSW5kZXggPCBmaXJzdENoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgdmFyIGNoaWxkID0gZmlyc3RDaGlsZHJlbltjaGlsZEluZGV4KytdO1xuICAgICAgdmFyIHRhcmdldENoaWxkO1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgdmFyIGNoaWxkSUQgPSBSZWFjdE1vdW50LmdldElEKGNoaWxkKTtcbiAgICAgICAgaWYgKGNoaWxkSUQpIHtcbiAgICAgICAgICAvLyBFdmVuIGlmIHdlIGZpbmQgdGhlIG5vZGUgd2UncmUgbG9va2luZyBmb3IsIHdlIGZpbmlzaCBsb29waW5nXG4gICAgICAgICAgLy8gdGhyb3VnaCBpdHMgc2libGluZ3MgdG8gZW5zdXJlIHRoZXkncmUgY2FjaGVkIHNvIHRoYXQgd2UgZG9uJ3QgaGF2ZVxuICAgICAgICAgIC8vIHRvIHJldmlzaXQgdGhpcyBub2RlIGFnYWluLiBPdGhlcndpc2UsIHdlIG1ha2Ugbl4yIGNhbGxzIHRvIGdldElEXG4gICAgICAgICAgLy8gd2hlbiB2aXNpdGluZyB0aGUgbWFueSBjaGlsZHJlbiBvZiBhIHNpbmdsZSBub2RlIGluIG9yZGVyLlxuXG4gICAgICAgICAgaWYgKHRhcmdldElEID09PSBjaGlsZElEKSB7XG4gICAgICAgICAgICB0YXJnZXRDaGlsZCA9IGNoaWxkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoUmVhY3RJbnN0YW5jZUhhbmRsZXMuaXNBbmNlc3RvcklET2YoY2hpbGRJRCwgdGFyZ2V0SUQpKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBmaW5kIGEgY2hpbGQgd2hvc2UgSUQgaXMgYW4gYW5jZXN0b3Igb2YgdGhlIGdpdmVuIElELFxuICAgICAgICAgICAgLy8gdGhlbiB3ZSBjYW4gYmUgc3VyZSB0aGF0IHdlIG9ubHkgd2FudCB0byBzZWFyY2ggdGhlIHN1YnRyZWVcbiAgICAgICAgICAgIC8vIHJvb3RlZCBhdCB0aGlzIGNoaWxkLCBzbyB3ZSBjYW4gdGhyb3cgb3V0IHRoZSByZXN0IG9mIHRoZVxuICAgICAgICAgICAgLy8gc2VhcmNoIHN0YXRlLlxuICAgICAgICAgICAgZmlyc3RDaGlsZHJlbi5sZW5ndGggPSBjaGlsZEluZGV4ID0gMDtcbiAgICAgICAgICAgIGZpcnN0Q2hpbGRyZW4ucHVzaChjaGlsZC5maXJzdENoaWxkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGNoaWxkIGhhZCBubyBJRCwgdGhlbiB0aGVyZSdzIGEgY2hhbmNlIHRoYXQgaXQgd2FzXG4gICAgICAgICAgLy8gaW5qZWN0ZWQgYXV0b21hdGljYWxseSBieSB0aGUgYnJvd3NlciwgYXMgd2hlbiBhIGA8dGFibGU+YFxuICAgICAgICAgIC8vIGVsZW1lbnQgc3Byb3V0cyBhbiBleHRyYSBgPHRib2R5PmAgY2hpbGQgYXMgYSBzaWRlIGVmZmVjdCBvZlxuICAgICAgICAgIC8vIGAuaW5uZXJIVE1MYCBwYXJzaW5nLiBPcHRpbWlzdGljYWxseSBjb250aW51ZSBkb3duIHRoaXNcbiAgICAgICAgICAvLyBicmFuY2gsIGJ1dCBub3QgYmVmb3JlIGV4YW1pbmluZyB0aGUgb3RoZXIgc2libGluZ3MuXG4gICAgICAgICAgZmlyc3RDaGlsZHJlbi5wdXNoKGNoaWxkLmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZztcbiAgICAgIH1cblxuICAgICAgaWYgKHRhcmdldENoaWxkKSB7XG4gICAgICAgIC8vIEVtcHR5aW5nIGZpcnN0Q2hpbGRyZW4vZmluZENvbXBvbmVudFJvb3RSZXVzYWJsZUFycmF5IGlzXG4gICAgICAgIC8vIG5vdCBuZWNlc3NhcnkgZm9yIGNvcnJlY3RuZXNzLCBidXQgaXQgaGVscHMgdGhlIEdDIHJlY2xhaW1cbiAgICAgICAgLy8gYW55IG5vZGVzIHRoYXQgd2VyZSBsZWZ0IGF0IHRoZSBlbmQgb2YgdGhlIHNlYXJjaC5cbiAgICAgICAgZmlyc3RDaGlsZHJlbi5sZW5ndGggPSAwO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXRDaGlsZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IDA7XG5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnZmluZENvbXBvbmVudFJvb3QoLi4uLCAlcyk6IFVuYWJsZSB0byBmaW5kIGVsZW1lbnQuIFRoaXMgcHJvYmFibHkgJyArXG4gICAgICAnbWVhbnMgdGhlIERPTSB3YXMgdW5leHBlY3RlZGx5IG11dGF0ZWQgKGUuZy4sIGJ5IHRoZSBicm93c2VyKSwgJyArXG4gICAgICAndXN1YWxseSBkdWUgdG8gZm9yZ2V0dGluZyBhIDx0Ym9keT4gd2hlbiB1c2luZyB0YWJsZXMsIG5lc3RpbmcgdGFncyAnICtcbiAgICAgICdsaWtlIDxmb3JtPiwgPHA+LCBvciA8YT4sIG9yIHVzaW5nIG5vbi1TVkcgZWxlbWVudHMgaW4gYW4gPHN2Zz4gJyArXG4gICAgICAncGFyZW50LiAnICtcbiAgICAgICdUcnkgaW5zcGVjdGluZyB0aGUgY2hpbGQgbm9kZXMgb2YgdGhlIGVsZW1lbnQgd2l0aCBSZWFjdCBJRCBgJXNgLicsXG4gICAgICB0YXJnZXRJRCxcbiAgICAgIFJlYWN0TW91bnQuZ2V0SUQoYW5jZXN0b3JOb2RlKVxuICAgICkgOiBpbnZhcmlhbnQoZmFsc2UpKTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBSZWFjdCBJRCB1dGlsaXRpZXMuXG4gICAqL1xuXG4gIGdldFJlYWN0Um9vdElEOiBnZXRSZWFjdFJvb3RJRCxcblxuICBnZXRJRDogZ2V0SUQsXG5cbiAgc2V0SUQ6IHNldElELFxuXG4gIGdldE5vZGU6IGdldE5vZGUsXG5cbiAgcHVyZ2VJRDogcHVyZ2VJRFxufTtcblxuLy8gRGVwcmVjYXRpb25zIChyZW1vdmUgZm9yIDAuMTMpXG5SZWFjdE1vdW50LnJlbmRlckNvbXBvbmVudCA9IGRlcHJlY2F0ZWQoXG4gICdSZWFjdE1vdW50JyxcbiAgJ3JlbmRlckNvbXBvbmVudCcsXG4gICdyZW5kZXInLFxuICB0aGlzLFxuICBSZWFjdE1vdW50LnJlbmRlclxuKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE1vdW50O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0TW91bnQuanNcbiAqKiBtb2R1bGUgaWQgPSA3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRDb25zdGFudHNcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoXCIuL2tleU1pcnJvclwiKTtcblxudmFyIFByb3BhZ2F0aW9uUGhhc2VzID0ga2V5TWlycm9yKHtidWJibGVkOiBudWxsLCBjYXB0dXJlZDogbnVsbH0pO1xuXG4vKipcbiAqIFR5cGVzIG9mIHJhdyBzaWduYWxzIGZyb20gdGhlIGJyb3dzZXIgY2F1Z2h0IGF0IHRoZSB0b3AgbGV2ZWwuXG4gKi9cbnZhciB0b3BMZXZlbFR5cGVzID0ga2V5TWlycm9yKHtcbiAgdG9wQmx1cjogbnVsbCxcbiAgdG9wQ2hhbmdlOiBudWxsLFxuICB0b3BDbGljazogbnVsbCxcbiAgdG9wQ29tcG9zaXRpb25FbmQ6IG51bGwsXG4gIHRvcENvbXBvc2l0aW9uU3RhcnQ6IG51bGwsXG4gIHRvcENvbXBvc2l0aW9uVXBkYXRlOiBudWxsLFxuICB0b3BDb250ZXh0TWVudTogbnVsbCxcbiAgdG9wQ29weTogbnVsbCxcbiAgdG9wQ3V0OiBudWxsLFxuICB0b3BEb3VibGVDbGljazogbnVsbCxcbiAgdG9wRHJhZzogbnVsbCxcbiAgdG9wRHJhZ0VuZDogbnVsbCxcbiAgdG9wRHJhZ0VudGVyOiBudWxsLFxuICB0b3BEcmFnRXhpdDogbnVsbCxcbiAgdG9wRHJhZ0xlYXZlOiBudWxsLFxuICB0b3BEcmFnT3ZlcjogbnVsbCxcbiAgdG9wRHJhZ1N0YXJ0OiBudWxsLFxuICB0b3BEcm9wOiBudWxsLFxuICB0b3BFcnJvcjogbnVsbCxcbiAgdG9wRm9jdXM6IG51bGwsXG4gIHRvcElucHV0OiBudWxsLFxuICB0b3BLZXlEb3duOiBudWxsLFxuICB0b3BLZXlQcmVzczogbnVsbCxcbiAgdG9wS2V5VXA6IG51bGwsXG4gIHRvcExvYWQ6IG51bGwsXG4gIHRvcE1vdXNlRG93bjogbnVsbCxcbiAgdG9wTW91c2VNb3ZlOiBudWxsLFxuICB0b3BNb3VzZU91dDogbnVsbCxcbiAgdG9wTW91c2VPdmVyOiBudWxsLFxuICB0b3BNb3VzZVVwOiBudWxsLFxuICB0b3BQYXN0ZTogbnVsbCxcbiAgdG9wUmVzZXQ6IG51bGwsXG4gIHRvcFNjcm9sbDogbnVsbCxcbiAgdG9wU2VsZWN0aW9uQ2hhbmdlOiBudWxsLFxuICB0b3BTdWJtaXQ6IG51bGwsXG4gIHRvcFRleHRJbnB1dDogbnVsbCxcbiAgdG9wVG91Y2hDYW5jZWw6IG51bGwsXG4gIHRvcFRvdWNoRW5kOiBudWxsLFxuICB0b3BUb3VjaE1vdmU6IG51bGwsXG4gIHRvcFRvdWNoU3RhcnQ6IG51bGwsXG4gIHRvcFdoZWVsOiBudWxsXG59KTtcblxudmFyIEV2ZW50Q29uc3RhbnRzID0ge1xuICB0b3BMZXZlbFR5cGVzOiB0b3BMZXZlbFR5cGVzLFxuICBQcm9wYWdhdGlvblBoYXNlczogUHJvcGFnYXRpb25QaGFzZXNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRDb25zdGFudHM7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvRXZlbnRDb25zdGFudHMuanNcbiAqKiBtb2R1bGUgaWQgPSA4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDb21wb3NpdGVDb21wb25lbnRcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRcIik7XG52YXIgUmVhY3RDb250ZXh0ID0gcmVxdWlyZShcIi4vUmVhY3RDb250ZXh0XCIpO1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiKTtcbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbXB0eUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdEVycm9yVXRpbHMgPSByZXF1aXJlKFwiLi9SZWFjdEVycm9yVXRpbHNcIik7XG52YXIgUmVhY3RMZWdhY3lFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RMZWdhY3lFbGVtZW50XCIpO1xudmFyIFJlYWN0T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdE93bmVyXCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcbnZhciBSZWFjdFByb3BUcmFuc2ZlcmVyID0gcmVxdWlyZShcIi4vUmVhY3RQcm9wVHJhbnNmZXJlclwiKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0gcmVxdWlyZShcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uc1wiKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzXCIpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoXCIuL2tleU1pcnJvclwiKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xudmFyIG1vbml0b3JDb2RlVXNlID0gcmVxdWlyZShcIi4vbW9uaXRvckNvZGVVc2VcIik7XG52YXIgbWFwT2JqZWN0ID0gcmVxdWlyZShcIi4vbWFwT2JqZWN0XCIpO1xudmFyIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciBNSVhJTlNfS0VZID0ga2V5T2Yoe21peGluczogbnVsbH0pO1xuXG4vKipcbiAqIFBvbGljaWVzIHRoYXQgZGVzY3JpYmUgbWV0aG9kcyBpbiBgUmVhY3RDb21wb3NpdGVDb21wb25lbnRJbnRlcmZhY2VgLlxuICovXG52YXIgU3BlY1BvbGljeSA9IGtleU1pcnJvcih7XG4gIC8qKlxuICAgKiBUaGVzZSBtZXRob2RzIG1heSBiZSBkZWZpbmVkIG9ubHkgb25jZSBieSB0aGUgY2xhc3Mgc3BlY2lmaWNhdGlvbiBvciBtaXhpbi5cbiAgICovXG4gIERFRklORV9PTkNFOiBudWxsLFxuICAvKipcbiAgICogVGhlc2UgbWV0aG9kcyBtYXkgYmUgZGVmaW5lZCBieSBib3RoIHRoZSBjbGFzcyBzcGVjaWZpY2F0aW9uIGFuZCBtaXhpbnMuXG4gICAqIFN1YnNlcXVlbnQgZGVmaW5pdGlvbnMgd2lsbCBiZSBjaGFpbmVkLiBUaGVzZSBtZXRob2RzIG11c3QgcmV0dXJuIHZvaWQuXG4gICAqL1xuICBERUZJTkVfTUFOWTogbnVsbCxcbiAgLyoqXG4gICAqIFRoZXNlIG1ldGhvZHMgYXJlIG92ZXJyaWRpbmcgdGhlIGJhc2UgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgY2xhc3MuXG4gICAqL1xuICBPVkVSUklERV9CQVNFOiBudWxsLFxuICAvKipcbiAgICogVGhlc2UgbWV0aG9kcyBhcmUgc2ltaWxhciB0byBERUZJTkVfTUFOWSwgZXhjZXB0IHdlIGFzc3VtZSB0aGV5IHJldHVyblxuICAgKiBvYmplY3RzLiBXZSB0cnkgdG8gbWVyZ2UgdGhlIGtleXMgb2YgdGhlIHJldHVybiB2YWx1ZXMgb2YgYWxsIHRoZSBtaXhlZCBpblxuICAgKiBmdW5jdGlvbnMuIElmIHRoZXJlIGlzIGEga2V5IGNvbmZsaWN0IHdlIHRocm93LlxuICAgKi9cbiAgREVGSU5FX01BTllfTUVSR0VEOiBudWxsXG59KTtcblxuXG52YXIgaW5qZWN0ZWRNaXhpbnMgPSBbXTtcblxuLyoqXG4gKiBDb21wb3NpdGUgY29tcG9uZW50cyBhcmUgaGlnaGVyLWxldmVsIGNvbXBvbmVudHMgdGhhdCBjb21wb3NlIG90aGVyIGNvbXBvc2l0ZVxuICogb3IgbmF0aXZlIGNvbXBvbmVudHMuXG4gKlxuICogVG8gY3JlYXRlIGEgbmV3IHR5cGUgb2YgYFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50YCwgcGFzcyBhIHNwZWNpZmljYXRpb24gb2ZcbiAqIHlvdXIgbmV3IGNsYXNzIHRvIGBSZWFjdC5jcmVhdGVDbGFzc2AuIFRoZSBvbmx5IHJlcXVpcmVtZW50IG9mIHlvdXIgY2xhc3NcbiAqIHNwZWNpZmljYXRpb24gaXMgdGhhdCB5b3UgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLlxuICpcbiAqICAgdmFyIE15Q29tcG9uZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gKiAgICAgICByZXR1cm4gPGRpdj5IZWxsbyBXb3JsZDwvZGl2PjtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFRoZSBjbGFzcyBzcGVjaWZpY2F0aW9uIHN1cHBvcnRzIGEgc3BlY2lmaWMgcHJvdG9jb2wgb2YgbWV0aG9kcyB0aGF0IGhhdmVcbiAqIHNwZWNpYWwgbWVhbmluZyAoZS5nLiBgcmVuZGVyYCkuIFNlZSBgUmVhY3RDb21wb3NpdGVDb21wb25lbnRJbnRlcmZhY2VgIGZvclxuICogbW9yZSB0aGUgY29tcHJlaGVuc2l2ZSBwcm90b2NvbC4gQW55IG90aGVyIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgaW4gdGhlXG4gKiBjbGFzcyBzcGVjaWZpY2F0aW9uIHdpbGwgYXZhaWxhYmxlIG9uIHRoZSBwcm90b3R5cGUuXG4gKlxuICogQGludGVyZmFjZSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEludGVyZmFjZVxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEludGVyZmFjZSA9IHtcblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgTWl4aW4gb2JqZWN0cyB0byBpbmNsdWRlIHdoZW4gZGVmaW5pbmcgeW91ciBjb21wb25lbnQuXG4gICAqXG4gICAqIEB0eXBlIHthcnJheX1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBtaXhpbnM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgdGhhdCBzaG91bGQgYmUgZGVmaW5lZCBvblxuICAgKiB0aGUgY29tcG9uZW50J3MgY29uc3RydWN0b3IgaW5zdGVhZCBvZiBpdHMgcHJvdG90eXBlIChzdGF0aWMgbWV0aG9kcykuXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgc3RhdGljczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogRGVmaW5pdGlvbiBvZiBwcm9wIHR5cGVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHR5cGUge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBwcm9wVHlwZXM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIERlZmluaXRpb24gb2YgY29udGV4dCB0eXBlcyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY29udGV4dFR5cGVzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBEZWZpbml0aW9uIG9mIGNvbnRleHQgdHlwZXMgdGhpcyBjb21wb25lbnQgc2V0cyBmb3IgaXRzIGNoaWxkcmVuLlxuICAgKlxuICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNoaWxkQ29udGV4dFR5cGVzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8vID09PT0gRGVmaW5pdGlvbiBtZXRob2RzID09PT1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZC4gVmFsdWVzIGluIHRoZSBtYXBwaW5nIHdpbGwgYmUgc2V0IG9uXG4gICAqIGB0aGlzLnByb3BzYCBpZiB0aGF0IHByb3AgaXMgbm90IHNwZWNpZmllZCAoaS5lLiB1c2luZyBhbiBgaW5gIGNoZWNrKS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgaW52b2tlZCBiZWZvcmUgYGdldEluaXRpYWxTdGF0ZWAgYW5kIHRoZXJlZm9yZSBjYW5ub3QgcmVseVxuICAgKiBvbiBgdGhpcy5zdGF0ZWAgb3IgdXNlIGB0aGlzLnNldFN0YXRlYC5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGdldERlZmF1bHRQcm9wczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG5cbiAgLyoqXG4gICAqIEludm9rZWQgb25jZSBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgYmUgdXNlZFxuICAgKiBhcyB0aGUgaW5pdGlhbCB2YWx1ZSBvZiBgdGhpcy5zdGF0ZWAuXG4gICAqXG4gICAqICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICogICAgIHJldHVybiB7XG4gICAqICAgICAgIGlzT246IGZhbHNlLFxuICAgKiAgICAgICBmb29CYXo6IG5ldyBCYXpGb28oKVxuICAgKiAgICAgfVxuICAgKiAgIH1cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGdldEluaXRpYWxTdGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBnZXRDaGlsZENvbnRleHQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VELFxuXG4gIC8qKlxuICAgKiBVc2VzIHByb3BzIGZyb20gYHRoaXMucHJvcHNgIGFuZCBzdGF0ZSBmcm9tIGB0aGlzLnN0YXRlYCB0byByZW5kZXIgdGhlXG4gICAqIHN0cnVjdHVyZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBObyBndWFyYW50ZWVzIGFyZSBtYWRlIGFib3V0IHdoZW4gb3IgaG93IG9mdGVuIHRoaXMgbWV0aG9kIGlzIGludm9rZWQsIHNvXG4gICAqIGl0IG11c3Qgbm90IGhhdmUgc2lkZSBlZmZlY3RzLlxuICAgKlxuICAgKiAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAqICAgICB2YXIgbmFtZSA9IHRoaXMucHJvcHMubmFtZTtcbiAgICogICAgIHJldHVybiA8ZGl2PkhlbGxvLCB7bmFtZX0hPC9kaXY+O1xuICAgKiAgIH1cbiAgICpcbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9XG4gICAqIEBub3NpZGVlZmZlY3RzXG4gICAqIEByZXF1aXJlZFxuICAgKi9cbiAgcmVuZGVyOiBTcGVjUG9saWN5LkRFRklORV9PTkNFLFxuXG5cblxuICAvLyA9PT09IERlbGVnYXRlIG1ldGhvZHMgPT09PVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBpbml0aWFsbHkgY3JlYXRlZCBhbmQgYWJvdXQgdG8gYmUgbW91bnRlZC5cbiAgICogVGhpcyBtYXkgaGF2ZSBzaWRlIGVmZmVjdHMsIGJ1dCBhbnkgZXh0ZXJuYWwgc3Vic2NyaXB0aW9ucyBvciBkYXRhIGNyZWF0ZWRcbiAgICogYnkgdGhpcyBtZXRob2QgbXVzdCBiZSBjbGVhbmVkIHVwIGluIGBjb21wb25lbnRXaWxsVW5tb3VudGAuXG4gICAqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY29tcG9uZW50V2lsbE1vdW50OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBoYXMgYmVlbiBtb3VudGVkIGFuZCBoYXMgYSBET00gcmVwcmVzZW50YXRpb24uXG4gICAqIEhvd2V2ZXIsIHRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IHRoZSBET00gbm9kZSBpcyBpbiB0aGUgZG9jdW1lbnQuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIG9wZXJhdGUgb24gdGhlIERPTSB3aGVuIHRoZSBjb21wb25lbnQgaGFzXG4gICAqIGJlZW4gbW91bnRlZCAoaW5pdGlhbGl6ZWQgYW5kIHJlbmRlcmVkKSBmb3IgdGhlIGZpcnN0IHRpbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcm9vdE5vZGUgRE9NIGVsZW1lbnQgcmVwcmVzZW50aW5nIHRoZSBjb21wb25lbnQuXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY29tcG9uZW50RGlkTW91bnQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIEludm9rZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgcmVjZWl2ZXMgbmV3IHByb3BzLlxuICAgKlxuICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byByZWFjdCB0byBhIHByb3AgdHJhbnNpdGlvbiBieSB1cGRhdGluZyB0aGVcbiAgICogc3RhdGUgdXNpbmcgYHRoaXMuc2V0U3RhdGVgLiBDdXJyZW50IHByb3BzIGFyZSBhY2Nlc3NlZCB2aWEgYHRoaXMucHJvcHNgLlxuICAgKlxuICAgKiAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICogICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgKiAgICAgICBsaWtlc0luY3JlYXNpbmc6IG5leHRQcm9wcy5saWtlQ291bnQgPiB0aGlzLnByb3BzLmxpa2VDb3VudFxuICAgKiAgICAgfSk7XG4gICAqICAgfVxuICAgKlxuICAgKiBOT1RFOiBUaGVyZSBpcyBubyBlcXVpdmFsZW50IGBjb21wb25lbnRXaWxsUmVjZWl2ZVN0YXRlYC4gQW4gaW5jb21pbmcgcHJvcFxuICAgKiB0cmFuc2l0aW9uIG1heSBjYXVzZSBhIHN0YXRlIGNoYW5nZSwgYnV0IHRoZSBvcHBvc2l0ZSBpcyBub3QgdHJ1ZS4gSWYgeW91XG4gICAqIG5lZWQgaXQsIHlvdSBhcmUgcHJvYmFibHkgbG9va2luZyBmb3IgYGNvbXBvbmVudFdpbGxVcGRhdGVgLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogSW52b2tlZCB3aGlsZSBkZWNpZGluZyBpZiB0aGUgY29tcG9uZW50IHNob3VsZCBiZSB1cGRhdGVkIGFzIGEgcmVzdWx0IG9mXG4gICAqIHJlY2VpdmluZyBuZXcgcHJvcHMsIHN0YXRlIGFuZC9vciBjb250ZXh0LlxuICAgKlxuICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBgcmV0dXJuIGZhbHNlYCB3aGVuIHlvdSdyZSBjZXJ0YWluIHRoYXQgdGhlXG4gICAqIHRyYW5zaXRpb24gdG8gdGhlIG5ldyBwcm9wcy9zdGF0ZS9jb250ZXh0IHdpbGwgbm90IHJlcXVpcmUgYSBjb21wb25lbnRcbiAgICogdXBkYXRlLlxuICAgKlxuICAgKiAgIHNob3VsZENvbXBvbmVudFVwZGF0ZTogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KSB7XG4gICAqICAgICByZXR1cm4gIWVxdWFsKG5leHRQcm9wcywgdGhpcy5wcm9wcykgfHxcbiAgICogICAgICAgIWVxdWFsKG5leHRTdGF0ZSwgdGhpcy5zdGF0ZSkgfHxcbiAgICogICAgICAgIWVxdWFsKG5leHRDb250ZXh0LCB0aGlzLmNvbnRleHQpO1xuICAgKiAgIH1cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRTdGF0ZVxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDb250ZXh0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNvbXBvbmVudCBzaG91bGQgdXBkYXRlLlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfT05DRSxcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYWJvdXQgdG8gdXBkYXRlIGR1ZSB0byBhIHRyYW5zaXRpb24gZnJvbVxuICAgKiBgdGhpcy5wcm9wc2AsIGB0aGlzLnN0YXRlYCBhbmQgYHRoaXMuY29udGV4dGAgdG8gYG5leHRQcm9wc2AsIGBuZXh0U3RhdGVgXG4gICAqIGFuZCBgbmV4dENvbnRleHRgLlxuICAgKlxuICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBwZXJmb3JtIHByZXBhcmF0aW9uIGJlZm9yZSBhbiB1cGRhdGUgb2NjdXJzLlxuICAgKlxuICAgKiBOT1RFOiBZb3UgKipjYW5ub3QqKiB1c2UgYHRoaXMuc2V0U3RhdGUoKWAgaW4gdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0U3RhdGVcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0Q29udGV4dFxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY29tcG9uZW50V2lsbFVwZGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQncyBET00gcmVwcmVzZW50YXRpb24gaGFzIGJlZW4gdXBkYXRlZC5cbiAgICpcbiAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gb3BlcmF0ZSBvbiB0aGUgRE9NIHdoZW4gdGhlIGNvbXBvbmVudCBoYXNcbiAgICogYmVlbiB1cGRhdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJldlByb3BzXG4gICAqIEBwYXJhbSB7P29iamVjdH0gcHJldlN0YXRlXG4gICAqIEBwYXJhbSB7P29iamVjdH0gcHJldkNvbnRleHRcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSByb290Tm9kZSBET00gZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIGNvbXBvbmVudC5cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnREaWRVcGRhdGU6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGFib3V0IHRvIGJlIHJlbW92ZWQgZnJvbSBpdHMgcGFyZW50IGFuZCBoYXZlXG4gICAqIGl0cyBET00gcmVwcmVzZW50YXRpb24gZGVzdHJveWVkLlxuICAgKlxuICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBkZWFsbG9jYXRlIGFueSBleHRlcm5hbCByZXNvdXJjZXMuXG4gICAqXG4gICAqIE5PVEU6IFRoZXJlIGlzIG5vIGBjb21wb25lbnREaWRVbm1vdW50YCBzaW5jZSB5b3VyIGNvbXBvbmVudCB3aWxsIGhhdmUgYmVlblxuICAgKiBkZXN0cm95ZWQgYnkgdGhhdCBwb2ludC5cbiAgICpcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsVW5tb3VudDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuXG5cbiAgLy8gPT09PSBBZHZhbmNlZCBtZXRob2RzID09PT1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgY29tcG9uZW50J3MgY3VycmVudGx5IG1vdW50ZWQgRE9NIHJlcHJlc2VudGF0aW9uLlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCB0aGlzIGltcGxlbWVudHMgUmVhY3QncyByZW5kZXJpbmcgYW5kIHJlY29uY2lsaWF0aW9uIGFsZ29yaXRobS5cbiAgICogU29waGlzdGljYXRlZCBjbGllbnRzIG1heSB3aXNoIHRvIG92ZXJyaWRlIHRoaXMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqIEBvdmVycmlkYWJsZVxuICAgKi9cbiAgdXBkYXRlQ29tcG9uZW50OiBTcGVjUG9saWN5Lk9WRVJSSURFX0JBU0VcblxufTtcblxuLyoqXG4gKiBNYXBwaW5nIGZyb20gY2xhc3Mgc3BlY2lmaWNhdGlvbiBrZXlzIHRvIHNwZWNpYWwgcHJvY2Vzc2luZyBmdW5jdGlvbnMuXG4gKlxuICogQWx0aG91Z2ggdGhlc2UgYXJlIGRlY2xhcmVkIGxpa2UgaW5zdGFuY2UgcHJvcGVydGllcyBpbiB0aGUgc3BlY2lmaWNhdGlvblxuICogd2hlbiBkZWZpbmluZyBjbGFzc2VzIHVzaW5nIGBSZWFjdC5jcmVhdGVDbGFzc2AsIHRoZXkgYXJlIGFjdHVhbGx5IHN0YXRpY1xuICogYW5kIGFyZSBhY2Nlc3NpYmxlIG9uIHRoZSBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIHRoZSBwcm90b3R5cGUuIERlc3BpdGVcbiAqIGJlaW5nIHN0YXRpYywgdGhleSBtdXN0IGJlIGRlZmluZWQgb3V0c2lkZSBvZiB0aGUgXCJzdGF0aWNzXCIga2V5IHVuZGVyXG4gKiB3aGljaCBhbGwgb3RoZXIgc3RhdGljIG1ldGhvZHMgYXJlIGRlZmluZWQuXG4gKi9cbnZhciBSRVNFUlZFRF9TUEVDX0tFWVMgPSB7XG4gIGRpc3BsYXlOYW1lOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgZGlzcGxheU5hbWUpIHtcbiAgICBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICB9LFxuICBtaXhpbnM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBtaXhpbnMpIHtcbiAgICBpZiAobWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1peGlucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3RvciwgbWl4aW5zW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNoaWxkQ29udGV4dFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMpIHtcbiAgICB2YWxpZGF0ZVR5cGVEZWYoXG4gICAgICBDb25zdHJ1Y3RvcixcbiAgICAgIGNoaWxkQ29udGV4dFR5cGVzLFxuICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jaGlsZENvbnRleHRcbiAgICApO1xuICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzID0gYXNzaWduKFxuICAgICAge30sXG4gICAgICBDb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyxcbiAgICAgIGNoaWxkQ29udGV4dFR5cGVzXG4gICAgKTtcbiAgfSxcbiAgY29udGV4dFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgY29udGV4dFR5cGVzKSB7XG4gICAgdmFsaWRhdGVUeXBlRGVmKFxuICAgICAgQ29uc3RydWN0b3IsXG4gICAgICBjb250ZXh0VHlwZXMsXG4gICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25zLmNvbnRleHRcbiAgICApO1xuICAgIENvbnN0cnVjdG9yLmNvbnRleHRUeXBlcyA9IGFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzLFxuICAgICAgY29udGV4dFR5cGVzXG4gICAgKTtcbiAgfSxcbiAgLyoqXG4gICAqIFNwZWNpYWwgY2FzZSBnZXREZWZhdWx0UHJvcHMgd2hpY2ggc2hvdWxkIG1vdmUgaW50byBzdGF0aWNzIGJ1dCByZXF1aXJlc1xuICAgKiBhdXRvbWF0aWMgbWVyZ2luZy5cbiAgICovXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGdldERlZmF1bHRQcm9wcykge1xuICAgIGlmIChDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyA9IGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKFxuICAgICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMsXG4gICAgICAgIGdldERlZmF1bHRQcm9wc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gZ2V0RGVmYXVsdFByb3BzO1xuICAgIH1cbiAgfSxcbiAgcHJvcFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgcHJvcFR5cGVzKSB7XG4gICAgdmFsaWRhdGVUeXBlRGVmKFxuICAgICAgQ29uc3RydWN0b3IsXG4gICAgICBwcm9wVHlwZXMsXG4gICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3BcbiAgICApO1xuICAgIENvbnN0cnVjdG9yLnByb3BUeXBlcyA9IGFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgQ29uc3RydWN0b3IucHJvcFR5cGVzLFxuICAgICAgcHJvcFR5cGVzXG4gICAgKTtcbiAgfSxcbiAgc3RhdGljczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIHN0YXRpY3MpIHtcbiAgICBtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3RhdGljcyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShjb21wb25lbnQpIHtcbiAgdmFyIG93bmVyID0gY29tcG9uZW50Ll9vd25lciB8fCBudWxsO1xuICBpZiAob3duZXIgJiYgb3duZXIuY29uc3RydWN0b3IgJiYgb3duZXIuY29uc3RydWN0b3IuZGlzcGxheU5hbWUpIHtcbiAgICByZXR1cm4gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG93bmVyLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lICtcbiAgICAgICdgLic7XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVR5cGVEZWYoQ29uc3RydWN0b3IsIHR5cGVEZWYsIGxvY2F0aW9uKSB7XG4gIGZvciAodmFyIHByb3BOYW1lIGluIHR5cGVEZWYpIHtcbiAgICBpZiAodHlwZURlZi5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIHR5cGVvZiB0eXBlRGVmW3Byb3BOYW1lXSA9PSAnZnVuY3Rpb24nLFxuICAgICAgICAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSAnICtcbiAgICAgICAgJ1JlYWN0LlByb3BUeXBlcy4nLFxuICAgICAgICBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnLFxuICAgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sXG4gICAgICAgIHByb3BOYW1lXG4gICAgICApIDogaW52YXJpYW50KHR5cGVvZiB0eXBlRGVmW3Byb3BOYW1lXSA9PSAnZnVuY3Rpb24nKSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGUocHJvdG8sIG5hbWUpIHtcbiAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/XG4gICAgUmVhY3RDb21wb3NpdGVDb21wb25lbnRJbnRlcmZhY2VbbmFtZV0gOlxuICAgIG51bGw7XG5cbiAgLy8gRGlzYWxsb3cgb3ZlcnJpZGluZyBvZiBiYXNlIGNsYXNzIG1ldGhvZHMgdW5sZXNzIGV4cGxpY2l0bHkgYWxsb3dlZC5cbiAgaWYgKFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50TWl4aW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5PVkVSUklERV9CQVNFLFxuICAgICAgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50SW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gb3ZlcnJpZGUgJyArXG4gICAgICAnYCVzYCBmcm9tIHlvdXIgY2xhc3Mgc3BlY2lmaWNhdGlvbi4gRW5zdXJlIHRoYXQgeW91ciBtZXRob2QgbmFtZXMgJyArXG4gICAgICAnZG8gbm90IG92ZXJsYXAgd2l0aCBSZWFjdCBtZXRob2RzLicsXG4gICAgICBuYW1lXG4gICAgKSA6IGludmFyaWFudChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5Lk9WRVJSSURFX0JBU0UpKTtcbiAgfVxuXG4gIC8vIERpc2FsbG93IGRlZmluaW5nIG1ldGhvZHMgbW9yZSB0aGFuIG9uY2UgdW5sZXNzIGV4cGxpY2l0bHkgYWxsb3dlZC5cbiAgaWYgKHByb3RvLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkgfHxcbiAgICAgIHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VELFxuICAgICAgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50SW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lICcgK1xuICAgICAgJ2Alc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlIGR1ZSAnICtcbiAgICAgICd0byBhIG1peGluLicsXG4gICAgICBuYW1lXG4gICAgKSA6IGludmFyaWFudChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZIHx8XG4gICAgc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUxpZmVDeWNsZU9uUmVwbGFjZVN0YXRlKGluc3RhbmNlKSB7XG4gIHZhciBjb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9IGluc3RhbmNlLl9jb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBpbnN0YW5jZS5pc01vdW50ZWQoKSB8fFxuICAgICAgY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgPT09IENvbXBvc2l0ZUxpZmVDeWNsZS5NT1VOVElORyxcbiAgICAncmVwbGFjZVN0YXRlKC4uLik6IENhbiBvbmx5IHVwZGF0ZSBhIG1vdW50ZWQgb3IgbW91bnRpbmcgY29tcG9uZW50LidcbiAgKSA6IGludmFyaWFudChpbnN0YW5jZS5pc01vdW50ZWQoKSB8fFxuICAgIGNvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlID09PSBDb21wb3NpdGVMaWZlQ3ljbGUuTU9VTlRJTkcpKTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwsXG4gICAgJ3JlcGxhY2VTdGF0ZSguLi4pOiBDYW5ub3QgdXBkYXRlIGR1cmluZyBhbiBleGlzdGluZyBzdGF0ZSB0cmFuc2l0aW9uICcgK1xuICAgICcoc3VjaCBhcyB3aXRoaW4gYHJlbmRlcmApLiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uICcgK1xuICAgICdvZiBwcm9wcyBhbmQgc3RhdGUuJ1xuICApIDogaW52YXJpYW50KFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCkpO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KGNvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlICE9PSBDb21wb3NpdGVMaWZlQ3ljbGUuVU5NT1VOVElORyxcbiAgICAncmVwbGFjZVN0YXRlKC4uLik6IENhbm5vdCB1cGRhdGUgd2hpbGUgdW5tb3VudGluZyBjb21wb25lbnQuIFRoaXMgJyArXG4gICAgJ3VzdWFsbHkgbWVhbnMgeW91IGNhbGxlZCBzZXRTdGF0ZSgpIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuJ1xuICApIDogaW52YXJpYW50KGNvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlICE9PSBDb21wb3NpdGVMaWZlQ3ljbGUuVU5NT1VOVElORykpO1xufVxuXG4vKipcbiAqIE1peGluIGhlbHBlciB3aGljaCBoYW5kbGVzIHBvbGljeSB2YWxpZGF0aW9uIGFuZCByZXNlcnZlZFxuICogc3BlY2lmaWNhdGlvbiBrZXlzIHdoZW4gYnVpbGRpbmcgYFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50YCBjbGFzc3Nlcy5cbiAqL1xuZnVuY3Rpb24gbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpIHtcbiAgaWYgKCFzcGVjKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAhUmVhY3RMZWdhY3lFbGVtZW50LmlzVmFsaWRGYWN0b3J5KHNwZWMpLFxuICAgICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudDogWW91XFwncmUgYXR0ZW1wdGluZyB0byAnICtcbiAgICAndXNlIGEgY29tcG9uZW50IGNsYXNzIGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgcmVndWxhciBvYmplY3QuJ1xuICApIDogaW52YXJpYW50KCFSZWFjdExlZ2FjeUVsZW1lbnQuaXNWYWxpZEZhY3Rvcnkoc3BlYykpKTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHNwZWMpLFxuICAgICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudDogWW91XFwncmUgYXR0ZW1wdGluZyB0byAnICtcbiAgICAndXNlIGEgY29tcG9uZW50IGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgcmVndWxhciBvYmplY3QuJ1xuICApIDogaW52YXJpYW50KCFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoc3BlYykpKTtcblxuICB2YXIgcHJvdG8gPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgLy8gQnkgaGFuZGxpbmcgbWl4aW5zIGJlZm9yZSBhbnkgb3RoZXIgcHJvcGVydGllcywgd2UgZW5zdXJlIHRoZSBzYW1lXG4gIC8vIGNoYWluaW5nIG9yZGVyIGlzIGFwcGxpZWQgdG8gbWV0aG9kcyB3aXRoIERFRklORV9NQU5ZIHBvbGljeSwgd2hldGhlclxuICAvLyBtaXhpbnMgYXJlIGxpc3RlZCBiZWZvcmUgb3IgYWZ0ZXIgdGhlc2UgbWV0aG9kcyBpbiB0aGUgc3BlYy5cbiAgaWYgKHNwZWMuaGFzT3duUHJvcGVydHkoTUlYSU5TX0tFWSkpIHtcbiAgICBSRVNFUlZFRF9TUEVDX0tFWVMubWl4aW5zKENvbnN0cnVjdG9yLCBzcGVjLm1peGlucyk7XG4gIH1cblxuICBmb3IgKHZhciBuYW1lIGluIHNwZWMpIHtcbiAgICBpZiAoIXNwZWMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChuYW1lID09PSBNSVhJTlNfS0VZKSB7XG4gICAgICAvLyBXZSBoYXZlIGFscmVhZHkgaGFuZGxlZCBtaXhpbnMgaW4gYSBzcGVjaWFsIGNhc2UgYWJvdmVcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBwcm9wZXJ0eSA9IHNwZWNbbmFtZV07XG4gICAgdmFsaWRhdGVNZXRob2RPdmVycmlkZShwcm90bywgbmFtZSk7XG5cbiAgICBpZiAoUkVTRVJWRURfU1BFQ19LRVlTLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBSRVNFUlZFRF9TUEVDX0tFWVNbbmFtZV0oQ29uc3RydWN0b3IsIHByb3BlcnR5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2V0dXAgbWV0aG9kcyBvbiBwcm90b3R5cGU6XG4gICAgICAvLyBUaGUgZm9sbG93aW5nIG1lbWJlciBtZXRob2RzIHNob3VsZCBub3QgYmUgYXV0b21hdGljYWxseSBib3VuZDpcbiAgICAgIC8vIDEuIEV4cGVjdGVkIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50IG1ldGhvZHMgKGluIHRoZSBcImludGVyZmFjZVwiKS5cbiAgICAgIC8vIDIuIE92ZXJyaWRkZW4gbWV0aG9kcyAodGhhdCB3ZXJlIG1peGVkIGluKS5cbiAgICAgIHZhciBpc0NvbXBvc2l0ZUNvbXBvbmVudE1ldGhvZCA9XG4gICAgICAgIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50SW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgICAgdmFyIGlzQWxyZWFkeURlZmluZWQgPSBwcm90by5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgIHZhciBtYXJrZWREb250QmluZCA9IHByb3BlcnR5ICYmIHByb3BlcnR5Ll9fcmVhY3REb250QmluZDtcbiAgICAgIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHByb3BlcnR5ID09PSAnZnVuY3Rpb24nO1xuICAgICAgdmFyIHNob3VsZEF1dG9CaW5kID1cbiAgICAgICAgaXNGdW5jdGlvbiAmJlxuICAgICAgICAhaXNDb21wb3NpdGVDb21wb25lbnRNZXRob2QgJiZcbiAgICAgICAgIWlzQWxyZWFkeURlZmluZWQgJiZcbiAgICAgICAgIW1hcmtlZERvbnRCaW5kO1xuXG4gICAgICBpZiAoc2hvdWxkQXV0b0JpbmQpIHtcbiAgICAgICAgaWYgKCFwcm90by5fX3JlYWN0QXV0b0JpbmRNYXApIHtcbiAgICAgICAgICBwcm90by5fX3JlYWN0QXV0b0JpbmRNYXAgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBwcm90by5fX3JlYWN0QXV0b0JpbmRNYXBbbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEludGVyZmFjZVtuYW1lXTtcblxuICAgICAgICAgIC8vIFRoZXNlIGNhc2VzIHNob3VsZCBhbHJlYWR5IGJlIGNhdWdodCBieSB2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlXG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICAgIGlzQ29tcG9zaXRlQ29tcG9uZW50TWV0aG9kICYmIChcbiAgICAgICAgICAgICAgc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQgfHxcbiAgICAgICAgICAgICAgc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudDogVW5leHBlY3RlZCBzcGVjIHBvbGljeSAlcyBmb3Iga2V5ICVzICcgK1xuICAgICAgICAgICAgJ3doZW4gbWl4aW5nIGluIGNvbXBvbmVudCBzcGVjcy4nLFxuICAgICAgICAgICAgc3BlY1BvbGljeSxcbiAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICApIDogaW52YXJpYW50KGlzQ29tcG9zaXRlQ29tcG9uZW50TWV0aG9kICYmIChcbiAgICAgICAgICAgIHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VEIHx8XG4gICAgICAgICAgICBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZXG4gICAgICAgICAgKSkpO1xuXG4gICAgICAgICAgLy8gRm9yIG1ldGhvZHMgd2hpY2ggYXJlIGRlZmluZWQgbW9yZSB0aGFuIG9uY2UsIGNhbGwgdGhlIGV4aXN0aW5nXG4gICAgICAgICAgLy8gbWV0aG9kcyBiZWZvcmUgY2FsbGluZyB0aGUgbmV3IHByb3BlcnR5LCBtZXJnaW5nIGlmIGFwcHJvcHJpYXRlLlxuICAgICAgICAgIGlmIChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCkge1xuICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihwcm90b1tuYW1lXSwgcHJvcGVydHkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWSkge1xuICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ocHJvdG9bbmFtZV0sIHByb3BlcnR5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgICAgICAvLyBBZGQgdmVyYm9zZSBkaXNwbGF5TmFtZSB0byB0aGUgZnVuY3Rpb24sIHdoaWNoIGhlbHBzIHdoZW4gbG9va2luZ1xuICAgICAgICAgICAgLy8gYXQgcHJvZmlsaW5nIHRvb2xzLlxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJyAmJiBzcGVjLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgICAgICAgIHByb3RvW25hbWVdLmRpc3BsYXlOYW1lID0gc3BlYy5kaXNwbGF5TmFtZSArICdfJyArIG5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gIGlmICghc3RhdGljcykge1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKHZhciBuYW1lIGluIHN0YXRpY3MpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBzdGF0aWNzW25hbWVdO1xuICAgIGlmICghc3RhdGljcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGlzUmVzZXJ2ZWQgPSBuYW1lIGluIFJFU0VSVkVEX1NQRUNfS0VZUztcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIWlzUmVzZXJ2ZWQsXG4gICAgICAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQ6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgYSByZXNlcnZlZCAnICtcbiAgICAgICdwcm9wZXJ0eSwgYCVzYCwgdGhhdCBzaG91bGRuXFwndCBiZSBvbiB0aGUgXCJzdGF0aWNzXCIga2V5LiBEZWZpbmUgaXQgJyArXG4gICAgICAnYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgaW5zdGVhZDsgaXQgd2lsbCBzdGlsbCBiZSBhY2Nlc3NpYmxlIG9uIHRoZSAnICtcbiAgICAgICdjb25zdHJ1Y3Rvci4nLFxuICAgICAgbmFtZVxuICAgICkgOiBpbnZhcmlhbnQoIWlzUmVzZXJ2ZWQpKTtcblxuICAgIHZhciBpc0luaGVyaXRlZCA9IG5hbWUgaW4gQ29uc3RydWN0b3I7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICFpc0luaGVyaXRlZCxcbiAgICAgICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudDogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSAnICtcbiAgICAgICdgJXNgIG9uIHlvdXIgY29tcG9uZW50IG1vcmUgdGhhbiBvbmNlLiBUaGlzIGNvbmZsaWN0IG1heSBiZSAnICtcbiAgICAgICdkdWUgdG8gYSBtaXhpbi4nLFxuICAgICAgbmFtZVxuICAgICkgOiBpbnZhcmlhbnQoIWlzSW5oZXJpdGVkKSk7XG4gICAgQ29uc3RydWN0b3JbbmFtZV0gPSBwcm9wZXJ0eTtcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIHR3byBvYmplY3RzLCBidXQgdGhyb3cgaWYgYm90aCBjb250YWluIHRoZSBzYW1lIGtleS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb25lIFRoZSBmaXJzdCBvYmplY3QsIHdoaWNoIGlzIG11dGF0ZWQuXG4gKiBAcGFyYW0ge29iamVjdH0gdHdvIFRoZSBzZWNvbmQgb2JqZWN0XG4gKiBAcmV0dXJuIHtvYmplY3R9IG9uZSBhZnRlciBpdCBoYXMgYmVlbiBtdXRhdGVkIHRvIGNvbnRhaW4gZXZlcnl0aGluZyBpbiB0d28uXG4gKi9cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0c1dpdGhOb0R1cGxpY2F0ZUtleXMob25lLCB0d28pIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBvbmUgJiYgdHdvICYmIHR5cGVvZiBvbmUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0d28gPT09ICdvYmplY3QnLFxuICAgICdtZXJnZU9iamVjdHNXaXRoTm9EdXBsaWNhdGVLZXlzKCk6IENhbm5vdCBtZXJnZSBub24tb2JqZWN0cydcbiAgKSA6IGludmFyaWFudChvbmUgJiYgdHdvICYmIHR5cGVvZiBvbmUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0d28gPT09ICdvYmplY3QnKSk7XG5cbiAgbWFwT2JqZWN0KHR3bywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBvbmVba2V5XSA9PT0gdW5kZWZpbmVkLFxuICAgICAgJ21lcmdlT2JqZWN0c1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogJyArXG4gICAgICAnVHJpZWQgdG8gbWVyZ2UgdHdvIG9iamVjdHMgd2l0aCB0aGUgc2FtZSBrZXk6IGAlc2AuIFRoaXMgY29uZmxpY3QgJyArXG4gICAgICAnbWF5IGJlIGR1ZSB0byBhIG1peGluOyBpbiBwYXJ0aWN1bGFyLCB0aGlzIG1heSBiZSBjYXVzZWQgYnkgdHdvICcgK1xuICAgICAgJ2dldEluaXRpYWxTdGF0ZSgpIG9yIGdldERlZmF1bHRQcm9wcygpIG1ldGhvZHMgcmV0dXJuaW5nIG9iamVjdHMgJyArXG4gICAgICAnd2l0aCBjbGFzaGluZyBrZXlzLicsXG4gICAgICBrZXlcbiAgICApIDogaW52YXJpYW50KG9uZVtrZXldID09PSB1bmRlZmluZWQpKTtcbiAgICBvbmVba2V5XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIG9uZTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHR3byBmdW5jdGlvbnMgYW5kIG1lcmdlcyB0aGVpciByZXR1cm4gdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uZSBGdW5jdGlvbiB0byBpbnZva2UgZmlyc3QuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0d28gRnVuY3Rpb24gdG8gaW52b2tlIHNlY29uZC5cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBGdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHR3byBhcmd1bWVudCBmdW5jdGlvbnMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihvbmUsIHR3bykge1xuICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkUmVzdWx0KCkge1xuICAgIHZhciBhID0gb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdmFyIGIgPSB0d28uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoYSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYjtcbiAgICB9IGVsc2UgaWYgKGIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZU9iamVjdHNXaXRoTm9EdXBsaWNhdGVLZXlzKGEsIGIpO1xuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdHdvIGZ1bmN0aW9ucyBhbmQgaWdub3JlcyB0aGVpciByZXR1cm4gdmFsZXMuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25lIEZ1bmN0aW9uIHRvIGludm9rZSBmaXJzdC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHR3byBGdW5jdGlvbiB0byBpbnZva2Ugc2Vjb25kLlxuICogQHJldHVybiB7ZnVuY3Rpb259IEZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgdHdvIGFyZ3VtZW50IGZ1bmN0aW9ucy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbihvbmUsIHR3bykge1xuICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgIG9uZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG4vKipcbiAqIGBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudGAgbWFpbnRhaW5zIGFuIGF1eGlsaWFyeSBsaWZlIGN5Y2xlIHN0YXRlIGluXG4gKiBgdGhpcy5fY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGVgICh3aGljaCBjYW4gYmUgbnVsbCkuXG4gKlxuICogVGhpcyBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgbGlmZSBjeWNsZSBzdGF0ZSBtYWludGFpbmVkIGJ5IGBSZWFjdENvbXBvbmVudGAgaW5cbiAqIGB0aGlzLl9saWZlQ3ljbGVTdGF0ZWAuIFRoZSBmb2xsb3dpbmcgZGlhZ3JhbSBzaG93cyBob3cgdGhlIHN0YXRlcyBvdmVybGFwIGluXG4gKiB0aW1lLiBUaGVyZSBhcmUgdGltZXMgd2hlbiB0aGUgQ29tcG9zaXRlTGlmZUN5Y2xlIGlzIG51bGwgLSBhdCB0aG9zZSB0aW1lcyBpdFxuICogaXMgb25seSBtZWFuaW5nZnVsIHRvIGxvb2sgYXQgQ29tcG9uZW50TGlmZUN5Y2xlIGFsb25lLlxuICpcbiAqIFRvcCBSb3c6IFJlYWN0Q29tcG9uZW50LkNvbXBvbmVudExpZmVDeWNsZVxuICogTG93IFJvdzogUmVhY3RDb21wb25lbnQuQ29tcG9zaXRlTGlmZUN5Y2xlXG4gKlxuICogKy0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKy0tLS0tLS0tK1xuICogfCAgVU4gICB8ICAgICAgICAgICAgIE1PVU5URUQgICAgICAgICAgICAgfCAgIFVOICAgfFxuICogfE1PVU5URUR8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNT1VOVEVEfFxuICogKy0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKy0tLS0tLS0tK1xuICogfCAgICAgICBeLS0tLS0tLS0rICAgKy0tLS0tLS0rICAgKy0tLS0tLS0tXiAgICAgICAgfFxuICogfCAgICAgICB8ICAgICAgICB8ICAgfCAgICAgICB8ICAgfCAgICAgICAgfCAgICAgICAgfFxuICogfCAgICAwLS18TU9VTlRJTkd8LTAtfFJFQ0VJVkV8LTAtfCAgIFVOICAgfC0tLT4wICAgfFxuICogfCAgICAgICB8ICAgICAgICB8ICAgfFBST1BTICB8ICAgfE1PVU5USU5HfCAgICAgICAgfFxuICogfCAgICAgICB8ICAgICAgICB8ICAgfCAgICAgICB8ICAgfCAgICAgICAgfCAgICAgICAgfFxuICogfCAgICAgICB8ICAgICAgICB8ICAgfCAgICAgICB8ICAgfCAgICAgICAgfCAgICAgICAgfFxuICogfCAgICAgICArLS0tLS0tLS0rICAgKy0tLS0tLS0rICAgKy0tLS0tLS0tKyAgICAgICAgfFxuICogfCAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgfFxuICogKy0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKy0tLS0tLS0tK1xuICovXG52YXIgQ29tcG9zaXRlTGlmZUN5Y2xlID0ga2V5TWlycm9yKHtcbiAgLyoqXG4gICAqIENvbXBvbmVudHMgaW4gdGhlIHByb2Nlc3Mgb2YgYmVpbmcgbW91bnRlZCByZXNwb25kIHRvIHN0YXRlIGNoYW5nZXNcbiAgICogZGlmZmVyZW50bHkuXG4gICAqL1xuICBNT1VOVElORzogbnVsbCxcbiAgLyoqXG4gICAqIENvbXBvbmVudHMgaW4gdGhlIHByb2Nlc3Mgb2YgYmVpbmcgdW5tb3VudGVkIGFyZSBndWFyZGVkIGFnYWluc3Qgc3RhdGVcbiAgICogY2hhbmdlcy5cbiAgICovXG4gIFVOTU9VTlRJTkc6IG51bGwsXG4gIC8qKlxuICAgKiBDb21wb25lbnRzIHRoYXQgYXJlIG1vdW50ZWQgYW5kIHJlY2VpdmluZyBuZXcgcHJvcHMgcmVzcG9uZCB0byBzdGF0ZVxuICAgKiBjaGFuZ2VzIGRpZmZlcmVudGx5LlxuICAgKi9cbiAgUkVDRUlWSU5HX1BST1BTOiBudWxsXG59KTtcblxuLyoqXG4gKiBAbGVuZHMge1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50LnByb3RvdHlwZX1cbiAqL1xudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50TWl4aW4gPSB7XG5cbiAgLyoqXG4gICAqIEJhc2UgY29uc3RydWN0b3IgZm9yIGFsbCBjb21wb3NpdGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAvLyBDaGlsZHJlbiBjYW4gYmUgZWl0aGVyIGFuIGFycmF5IG9yIG1vcmUgdGhhbiBvbmUgYXJndW1lbnRcbiAgICBSZWFjdENvbXBvbmVudC5NaXhpbi5jb25zdHJ1Y3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBSZWFjdE93bmVyLk1peGluLmNvbnN0cnVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1N0YXRlID0gbnVsbDtcblxuICAgIC8vIFRoaXMgaXMgdGhlIHB1YmxpYyBwb3N0LXByb2Nlc3NlZCBjb250ZXh0LiBUaGUgcmVhbCBjb250ZXh0IGFuZCBwZW5kaW5nXG4gICAgLy8gY29udGV4dCBsaXZlcyBvbiB0aGUgZWxlbWVudC5cbiAgICB0aGlzLmNvbnRleHQgPSBudWxsO1xuXG4gICAgdGhpcy5fY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgdGhpcyBjb21wb3NpdGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgbW91bnRlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBmaW5hbFxuICAgKi9cbiAgaXNNb3VudGVkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gUmVhY3RDb21wb25lbnQuTWl4aW4uaXNNb3VudGVkLmNhbGwodGhpcykgJiZcbiAgICAgIHRoaXMuX2NvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlICE9PSBDb21wb3NpdGVMaWZlQ3ljbGUuTU9VTlRJTkc7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBjb21wb25lbnQsIHJlbmRlcnMgbWFya3VwLCBhbmQgcmVnaXN0ZXJzIGV2ZW50IGxpc3RlbmVycy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBET00gSUQgb2YgdGhlIHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtb3VudERlcHRoIG51bWJlciBvZiBjb21wb25lbnRzIGluIHRoZSBvd25lciBoaWVyYXJjaHlcbiAgICogQHJldHVybiB7P3N0cmluZ30gUmVuZGVyZWQgbWFya3VwIHRvIGJlIGluc2VydGVkIGludG8gdGhlIERPTS5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbW91bnRDb21wb25lbnQ6IFJlYWN0UGVyZi5tZWFzdXJlKFxuICAgICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcsXG4gICAgJ21vdW50Q29tcG9uZW50JyxcbiAgICBmdW5jdGlvbihyb290SUQsIHRyYW5zYWN0aW9uLCBtb3VudERlcHRoKSB7XG4gICAgICBSZWFjdENvbXBvbmVudC5NaXhpbi5tb3VudENvbXBvbmVudC5jYWxsKFxuICAgICAgICB0aGlzLFxuICAgICAgICByb290SUQsXG4gICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICBtb3VudERlcHRoXG4gICAgICApO1xuICAgICAgdGhpcy5fY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgPSBDb21wb3NpdGVMaWZlQ3ljbGUuTU9VTlRJTkc7XG5cbiAgICAgIGlmICh0aGlzLl9fcmVhY3RBdXRvQmluZE1hcCkge1xuICAgICAgICB0aGlzLl9iaW5kQXV0b0JpbmRNZXRob2RzKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuX3Byb2Nlc3NDb250ZXh0KHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9jb250ZXh0KTtcbiAgICAgIHRoaXMucHJvcHMgPSB0aGlzLl9wcm9jZXNzUHJvcHModGhpcy5wcm9wcyk7XG5cbiAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLmdldEluaXRpYWxTdGF0ZSA/IHRoaXMuZ2V0SW5pdGlhbFN0YXRlKCkgOiBudWxsO1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgdHlwZW9mIHRoaXMuc3RhdGUgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHRoaXMuc3RhdGUpLFxuICAgICAgICAnJXMuZ2V0SW5pdGlhbFN0YXRlKCk6IG11c3QgcmV0dXJuIGFuIG9iamVjdCBvciBudWxsJyxcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnXG4gICAgICApIDogaW52YXJpYW50KHR5cGVvZiB0aGlzLnN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh0aGlzLnN0YXRlKSkpO1xuXG4gICAgICB0aGlzLl9wZW5kaW5nU3RhdGUgPSBudWxsO1xuICAgICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLmNvbXBvbmVudFdpbGxNb3VudCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudFdpbGxNb3VudCgpO1xuICAgICAgICAvLyBXaGVuIG1vdW50aW5nLCBjYWxscyB0byBgc2V0U3RhdGVgIGJ5IGBjb21wb25lbnRXaWxsTW91bnRgIHdpbGwgc2V0XG4gICAgICAgIC8vIGB0aGlzLl9wZW5kaW5nU3RhdGVgIHdpdGhvdXQgdHJpZ2dlcmluZyBhIHJlLXJlbmRlci5cbiAgICAgICAgaWYgKHRoaXMuX3BlbmRpbmdTdGF0ZSkge1xuICAgICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLl9wZW5kaW5nU3RhdGU7XG4gICAgICAgICAgdGhpcy5fcGVuZGluZ1N0YXRlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoXG4gICAgICAgIHRoaXMuX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCgpLFxuICAgICAgICB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlIC8vIFRoZSB3cmFwcGluZyB0eXBlXG4gICAgICApO1xuXG4gICAgICAvLyBEb25lIHdpdGggbW91bnRpbmcsIGBzZXRTdGF0ZWAgd2lsbCBub3cgdHJpZ2dlciBVSSBjaGFuZ2VzLlxuICAgICAgdGhpcy5fY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgPSBudWxsO1xuICAgICAgdmFyIG1hcmt1cCA9IHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50Lm1vdW50Q29tcG9uZW50KFxuICAgICAgICByb290SUQsXG4gICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICBtb3VudERlcHRoICsgMVxuICAgICAgKTtcbiAgICAgIGlmICh0aGlzLmNvbXBvbmVudERpZE1vdW50KSB7XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUodGhpcy5jb21wb25lbnREaWRNb3VudCwgdGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFya3VwO1xuICAgIH1cbiAgKSxcblxuICAvKipcbiAgICogUmVsZWFzZXMgYW55IHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgYG1vdW50Q29tcG9uZW50YC5cbiAgICpcbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgPSBDb21wb3NpdGVMaWZlQ3ljbGUuVU5NT1VOVElORztcbiAgICBpZiAodGhpcy5jb21wb25lbnRXaWxsVW5tb3VudCkge1xuICAgICAgdGhpcy5jb21wb25lbnRXaWxsVW5tb3VudCgpO1xuICAgIH1cbiAgICB0aGlzLl9jb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9IG51bGw7XG5cbiAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudC51bm1vdW50Q29tcG9uZW50KCk7XG4gICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSBudWxsO1xuXG4gICAgUmVhY3RDb21wb25lbnQuTWl4aW4udW5tb3VudENvbXBvbmVudC5jYWxsKHRoaXMpO1xuXG4gICAgLy8gU29tZSBleGlzdGluZyBjb21wb25lbnRzIHJlbHkgb24gdGhpcy5wcm9wcyBldmVuIGFmdGVyIHRoZXkndmUgYmVlblxuICAgIC8vIGRlc3Ryb3llZCAoaW4gZXZlbnQgaGFuZGxlcnMpLlxuICAgIC8vIFRPRE86IHRoaXMucHJvcHMgPSBudWxsO1xuICAgIC8vIFRPRE86IHRoaXMuc3RhdGUgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBzdGF0ZS4gQWx3YXlzIHVzZSB0aGlzIG9yIGByZXBsYWNlU3RhdGVgIHRvIG11dGF0ZVxuICAgKiBzdGF0ZS4gWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICAgKlxuICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICAgKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICAgKlxuICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBjYWxscyB0byBgc2V0U3RhdGVgIHdpbGwgcnVuIHN5bmNocm9ub3VzbHksXG4gICAqIGFzIHRoZXkgbWF5IGV2ZW50dWFsbHkgYmUgYmF0Y2hlZCB0b2dldGhlci4gIFlvdSBjYW4gcHJvdmlkZSBhbiBvcHRpb25hbFxuICAgKiBjYWxsYmFjayB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgd2hlbiB0aGUgY2FsbCB0byBzZXRTdGF0ZSBpcyBhY3R1YWxseVxuICAgKiBjb21wbGV0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJ0aWFsU3RhdGUgTmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIHN0YXRlLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gICAqIEBmaW5hbFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBzZXRTdGF0ZTogZnVuY3Rpb24ocGFydGlhbFN0YXRlLCBjYWxsYmFjaykge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnb2JqZWN0JyB8fCBwYXJ0aWFsU3RhdGUgPT0gbnVsbCxcbiAgICAgICdzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZS4nXG4gICAgKSA6IGludmFyaWFudCh0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnb2JqZWN0JyB8fCBwYXJ0aWFsU3RhdGUgPT0gbnVsbCkpO1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpe1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgIHBhcnRpYWxTdGF0ZSAhPSBudWxsLFxuICAgICAgICAnc2V0U3RhdGUoLi4uKTogWW91IHBhc3NlZCBhbiB1bmRlZmluZWQgb3IgbnVsbCBzdGF0ZSBvYmplY3Q7ICcgK1xuICAgICAgICAnaW5zdGVhZCwgdXNlIGZvcmNlVXBkYXRlKCkuJ1xuICAgICAgKSA6IG51bGwpO1xuICAgIH1cbiAgICAvLyBNZXJnZSB3aXRoIGBfcGVuZGluZ1N0YXRlYCBpZiBpdCBleGlzdHMsIG90aGVyd2lzZSB3aXRoIGV4aXN0aW5nIHN0YXRlLlxuICAgIHRoaXMucmVwbGFjZVN0YXRlKFxuICAgICAgYXNzaWduKHt9LCB0aGlzLl9wZW5kaW5nU3RhdGUgfHwgdGhpcy5zdGF0ZSwgcGFydGlhbFN0YXRlKSxcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIG9mIHRoZSBzdGF0ZS4gQWx3YXlzIHVzZSB0aGlzIG9yIGBzZXRTdGF0ZWAgdG8gbXV0YXRlIHN0YXRlLlxuICAgKiBZb3Ugc2hvdWxkIHRyZWF0IGB0aGlzLnN0YXRlYCBhcyBpbW11dGFibGUuXG4gICAqXG4gICAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG4gICAqIGFjY2Vzc2luZyBgdGhpcy5zdGF0ZWAgYWZ0ZXIgY2FsbGluZyB0aGlzIG1ldGhvZCBtYXkgcmV0dXJuIHRoZSBvbGQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wbGV0ZVN0YXRlIE5leHQgc3RhdGUuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgc3RhdGUgaXMgdXBkYXRlZC5cbiAgICogQGZpbmFsXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHJlcGxhY2VTdGF0ZTogZnVuY3Rpb24oY29tcGxldGVTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICB2YWxpZGF0ZUxpZmVDeWNsZU9uUmVwbGFjZVN0YXRlKHRoaXMpO1xuICAgIHRoaXMuX3BlbmRpbmdTdGF0ZSA9IGNvbXBsZXRlU3RhdGU7XG4gICAgaWYgKHRoaXMuX2NvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlICE9PSBDb21wb3NpdGVMaWZlQ3ljbGUuTU9VTlRJTkcpIHtcbiAgICAgIC8vIElmIHdlJ3JlIGluIGEgY29tcG9uZW50V2lsbE1vdW50IGhhbmRsZXIsIGRvbid0IGVucXVldWUgYSByZXJlbmRlclxuICAgICAgLy8gYmVjYXVzZSBSZWFjdFVwZGF0ZXMgYXNzdW1lcyB3ZSdyZSBpbiBhIGJyb3dzZXIgY29udGV4dCAod2hpY2ggaXMgd3JvbmdcbiAgICAgIC8vIGZvciBzZXJ2ZXIgcmVuZGVyaW5nKSBhbmQgd2UncmUgYWJvdXQgdG8gZG8gYSByZW5kZXIgYW55d2F5LlxuICAgICAgLy8gVE9ETzogVGhlIGNhbGxiYWNrIGhlcmUgaXMgaWdub3JlZCB3aGVuIHNldFN0YXRlIGlzIGNhbGxlZCBmcm9tXG4gICAgICAvLyBjb21wb25lbnRXaWxsTW91bnQuIEVpdGhlciBmaXggaXQgb3IgZGlzYWxsb3cgZG9pbmcgc28gY29tcGxldGVseSBpblxuICAgICAgLy8gZmF2b3Igb2YgZ2V0SW5pdGlhbFN0YXRlLlxuICAgICAgUmVhY3RVcGRhdGVzLmVucXVldWVVcGRhdGUodGhpcywgY2FsbGJhY2spO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRmlsdGVycyB0aGUgY29udGV4dCBvYmplY3QgdG8gb25seSBjb250YWluIGtleXMgc3BlY2lmaWVkIGluXG4gICAqIGBjb250ZXh0VHlwZXNgLCBhbmQgYXNzZXJ0cyB0aGF0IHRoZXkgYXJlIHZhbGlkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHs/b2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Byb2Nlc3NDb250ZXh0OiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgdmFyIG1hc2tlZENvbnRleHQgPSBudWxsO1xuICAgIHZhciBjb250ZXh0VHlwZXMgPSB0aGlzLmNvbnN0cnVjdG9yLmNvbnRleHRUeXBlcztcbiAgICBpZiAoY29udGV4dFR5cGVzKSB7XG4gICAgICBtYXNrZWRDb250ZXh0ID0ge307XG4gICAgICBmb3IgKHZhciBjb250ZXh0TmFtZSBpbiBjb250ZXh0VHlwZXMpIHtcbiAgICAgICAgbWFza2VkQ29udGV4dFtjb250ZXh0TmFtZV0gPSBjb250ZXh0W2NvbnRleHROYW1lXTtcbiAgICAgIH1cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tQcm9wVHlwZXMoXG4gICAgICAgICAgY29udGV4dFR5cGVzLFxuICAgICAgICAgIG1hc2tlZENvbnRleHQsXG4gICAgICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXNrZWRDb250ZXh0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY3VycmVudENvbnRleHRcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Byb2Nlc3NDaGlsZENvbnRleHQ6IGZ1bmN0aW9uKGN1cnJlbnRDb250ZXh0KSB7XG4gICAgdmFyIGNoaWxkQ29udGV4dCA9IHRoaXMuZ2V0Q2hpbGRDb250ZXh0ICYmIHRoaXMuZ2V0Q2hpbGRDb250ZXh0KCk7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnO1xuICAgIGlmIChjaGlsZENvbnRleHQpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIHR5cGVvZiB0aGlzLmNvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzID09PSAnb2JqZWN0JyxcbiAgICAgICAgJyVzLmdldENoaWxkQ29udGV4dCgpOiBjaGlsZENvbnRleHRUeXBlcyBtdXN0IGJlIGRlZmluZWQgaW4gb3JkZXIgdG8gJyArXG4gICAgICAgICd1c2UgZ2V0Q2hpbGRDb250ZXh0KCkuJyxcbiAgICAgICAgZGlzcGxheU5hbWVcbiAgICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIHRoaXMuY29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMgPT09ICdvYmplY3QnKSk7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrUHJvcFR5cGVzKFxuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMsXG4gICAgICAgICAgY2hpbGRDb250ZXh0LFxuICAgICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY2hpbGRDb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBuYW1lIGluIGNoaWxkQ29udGV4dCkge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgIG5hbWUgaW4gdGhpcy5jb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyxcbiAgICAgICAgICAnJXMuZ2V0Q2hpbGRDb250ZXh0KCk6IGtleSBcIiVzXCIgaXMgbm90IGRlZmluZWQgaW4gY2hpbGRDb250ZXh0VHlwZXMuJyxcbiAgICAgICAgICBkaXNwbGF5TmFtZSxcbiAgICAgICAgICBuYW1lXG4gICAgICAgICkgOiBpbnZhcmlhbnQobmFtZSBpbiB0aGlzLmNvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXNzaWduKHt9LCBjdXJyZW50Q29udGV4dCwgY2hpbGRDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnRDb250ZXh0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBQcm9jZXNzZXMgcHJvcHMgYnkgc2V0dGluZyBkZWZhdWx0IHZhbHVlcyBmb3IgdW5zcGVjaWZpZWQgcHJvcHMgYW5kXG4gICAqIGFzc2VydGluZyB0aGF0IHRoZSBwcm9wcyBhcmUgdmFsaWQuIERvZXMgbm90IG11dGF0ZSBpdHMgYXJndW1lbnQ7IHJldHVybnNcbiAgICogYSBuZXcgcHJvcHMgb2JqZWN0IHdpdGggZGVmYXVsdHMgbWVyZ2VkIGluLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV3UHJvcHNcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Byb2Nlc3NQcm9wczogZnVuY3Rpb24obmV3UHJvcHMpIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB2YXIgcHJvcFR5cGVzID0gdGhpcy5jb25zdHJ1Y3Rvci5wcm9wVHlwZXM7XG4gICAgICBpZiAocHJvcFR5cGVzKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrUHJvcFR5cGVzKHByb3BUeXBlcywgbmV3UHJvcHMsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdQcm9wcztcbiAgfSxcblxuICAvKipcbiAgICogQXNzZXJ0IHRoYXQgdGhlIHByb3BzIGFyZSB2YWxpZFxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcFR5cGVzIE1hcCBvZiBwcm9wIG5hbWUgdG8gYSBSZWFjdFByb3BUeXBlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gZS5nLiBcInByb3BcIiwgXCJjb250ZXh0XCIsIFwiY2hpbGQgY29udGV4dFwiXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfY2hlY2tQcm9wVHlwZXM6IGZ1bmN0aW9uKHByb3BUeXBlcywgcHJvcHMsIGxvY2F0aW9uKSB7XG4gICAgLy8gVE9ETzogU3RvcCB2YWxpZGF0aW5nIHByb3AgdHlwZXMgaGVyZSBhbmQgb25seSB1c2UgdGhlIGVsZW1lbnRcbiAgICAvLyB2YWxpZGF0aW9uLlxuICAgIHZhciBjb21wb25lbnROYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpIHtcbiAgICAgIGlmIChwcm9wVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHZhciBlcnJvciA9XG4gICAgICAgICAgcHJvcFR5cGVzW3Byb3BOYW1lXShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKTtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAvLyBXZSBtYXkgd2FudCB0byBleHRlbmQgdGhpcyBsb2dpYyBmb3Igc2ltaWxhciBlcnJvcnMgaW5cbiAgICAgICAgICAvLyByZW5kZXJDb21wb25lbnQgY2FsbHMsIHNvIEknbSBhYnN0cmFjdGluZyBpdCBhd2F5IGludG9cbiAgICAgICAgICAvLyBhIGZ1bmN0aW9uIHRvIG1pbmltaXplIHJlZmFjdG9yaW5nIGluIHRoZSBmdXR1cmVcbiAgICAgICAgICB2YXIgYWRkZW5kdW0gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0odGhpcyk7XG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoZmFsc2UsIGVycm9yLm1lc3NhZ2UgKyBhZGRlbmR1bSkgOiBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogSWYgYW55IG9mIGBfcGVuZGluZ0VsZW1lbnRgLCBgX3BlbmRpbmdTdGF0ZWAsIG9yIGBfcGVuZGluZ0ZvcmNlVXBkYXRlYFxuICAgKiBpcyBzZXQsIHVwZGF0ZSB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5OiBmdW5jdGlvbih0cmFuc2FjdGlvbikge1xuICAgIHZhciBjb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9IHRoaXMuX2NvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlO1xuICAgIC8vIERvIG5vdCB0cmlnZ2VyIGEgc3RhdGUgdHJhbnNpdGlvbiBpZiB3ZSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBtb3VudGluZyBvclxuICAgIC8vIHJlY2VpdmluZyBwcm9wcyBiZWNhdXNlIGJvdGggb2YgdGhvc2Ugd2lsbCBhbHJlYWR5IGJlIGRvaW5nIHRoaXMuXG4gICAgaWYgKGNvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlID09PSBDb21wb3NpdGVMaWZlQ3ljbGUuTU9VTlRJTkcgfHxcbiAgICAgICAgY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgPT09IENvbXBvc2l0ZUxpZmVDeWNsZS5SRUNFSVZJTkdfUFJPUFMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ0VsZW1lbnQgPT0gbnVsbCAmJlxuICAgICAgICB0aGlzLl9wZW5kaW5nU3RhdGUgPT0gbnVsbCAmJlxuICAgICAgICAhdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRDb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuICAgIHZhciBuZXh0UHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBuZXh0RWxlbWVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50O1xuICAgIGlmICh0aGlzLl9wZW5kaW5nRWxlbWVudCAhPSBudWxsKSB7XG4gICAgICBuZXh0RWxlbWVudCA9IHRoaXMuX3BlbmRpbmdFbGVtZW50O1xuICAgICAgbmV4dENvbnRleHQgPSB0aGlzLl9wcm9jZXNzQ29udGV4dChuZXh0RWxlbWVudC5fY29udGV4dCk7XG4gICAgICBuZXh0UHJvcHMgPSB0aGlzLl9wcm9jZXNzUHJvcHMobmV4dEVsZW1lbnQucHJvcHMpO1xuICAgICAgdGhpcy5fcGVuZGluZ0VsZW1lbnQgPSBudWxsO1xuXG4gICAgICB0aGlzLl9jb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9IENvbXBvc2l0ZUxpZmVDeWNsZS5SRUNFSVZJTkdfUFJPUFM7XG4gICAgICBpZiAodGhpcy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9jb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9IG51bGw7XG5cbiAgICB2YXIgbmV4dFN0YXRlID0gdGhpcy5fcGVuZGluZ1N0YXRlIHx8IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5fcGVuZGluZ1N0YXRlID0gbnVsbDtcblxuICAgIHZhciBzaG91bGRVcGRhdGUgPVxuICAgICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlIHx8XG4gICAgICAhdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGUgfHxcbiAgICAgIHRoaXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCk7XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICBpZiAodHlwZW9mIHNob3VsZFVwZGF0ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgKHRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgK1xuICAgICAgICAgICcuc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk6IFJldHVybmVkIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIGEgJyArXG4gICAgICAgICAgJ2Jvb2xlYW4gdmFsdWUuIE1ha2Ugc3VyZSB0byByZXR1cm4gdHJ1ZSBvciBmYWxzZS4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gZmFsc2U7XG4gICAgICAvLyBXaWxsIHNldCBgdGhpcy5wcm9wc2AsIGB0aGlzLnN0YXRlYCBhbmQgYHRoaXMuY29udGV4dGAuXG4gICAgICB0aGlzLl9wZXJmb3JtQ29tcG9uZW50VXBkYXRlKFxuICAgICAgICBuZXh0RWxlbWVudCxcbiAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICBuZXh0U3RhdGUsXG4gICAgICAgIG5leHRDb250ZXh0LFxuICAgICAgICB0cmFuc2FjdGlvblxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgaXQncyBkZXRlcm1pbmVkIHRoYXQgYSBjb21wb25lbnQgc2hvdWxkIG5vdCB1cGRhdGUsIHdlIHN0aWxsIHdhbnRcbiAgICAgIC8vIHRvIHNldCBwcm9wcyBhbmQgc3RhdGUuXG4gICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRFbGVtZW50O1xuICAgICAgdGhpcy5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgIHRoaXMuc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgICB0aGlzLmNvbnRleHQgPSBuZXh0Q29udGV4dDtcblxuICAgICAgLy8gT3duZXIgY2Fubm90IGNoYW5nZSBiZWNhdXNlIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50IGRvZXNuJ3QgYWxsb3dcbiAgICAgIC8vIGl0LiBUT0RPOiBSZW1vdmUgdGhpcy5fb3duZXIgY29tcGxldGVseS5cbiAgICAgIHRoaXMuX293bmVyID0gbmV4dEVsZW1lbnQuX293bmVyO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTWVyZ2VzIG5ldyBwcm9wcyBhbmQgc3RhdGUsIG5vdGlmaWVzIGRlbGVnYXRlIG1ldGhvZHMgb2YgdXBkYXRlIGFuZFxuICAgKiBwZXJmb3JtcyB1cGRhdGUuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudCBOZXh0IGVsZW1lbnRcbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wcyBOZXh0IHB1YmxpYyBvYmplY3QgdG8gc2V0IGFzIHByb3BlcnRpZXMuXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlIE5leHQgb2JqZWN0IHRvIHNldCBhcyBzdGF0ZS5cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0Q29udGV4dCBOZXh0IHB1YmxpYyBvYmplY3QgdG8gc2V0IGFzIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wZXJmb3JtQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbihcbiAgICBuZXh0RWxlbWVudCxcbiAgICBuZXh0UHJvcHMsXG4gICAgbmV4dFN0YXRlLFxuICAgIG5leHRDb250ZXh0LFxuICAgIHRyYW5zYWN0aW9uXG4gICkge1xuICAgIHZhciBwcmV2RWxlbWVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50O1xuICAgIHZhciBwcmV2UHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBwcmV2U3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIHZhciBwcmV2Q29udGV4dCA9IHRoaXMuY29udGV4dDtcblxuICAgIGlmICh0aGlzLmNvbXBvbmVudFdpbGxVcGRhdGUpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpO1xuICAgIH1cblxuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dEVsZW1lbnQ7XG4gICAgdGhpcy5wcm9wcyA9IG5leHRQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gbmV4dFN0YXRlO1xuICAgIHRoaXMuY29udGV4dCA9IG5leHRDb250ZXh0O1xuXG4gICAgLy8gT3duZXIgY2Fubm90IGNoYW5nZSBiZWNhdXNlIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50IGRvZXNuJ3QgYWxsb3dcbiAgICAvLyBpdC4gVE9ETzogUmVtb3ZlIHRoaXMuX293bmVyIGNvbXBsZXRlbHkuXG4gICAgdGhpcy5fb3duZXIgPSBuZXh0RWxlbWVudC5fb3duZXI7XG5cbiAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudChcbiAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgcHJldkVsZW1lbnRcbiAgICApO1xuXG4gICAgaWYgKHRoaXMuY29tcG9uZW50RGlkVXBkYXRlKSB7XG4gICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKFxuICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZS5iaW5kKHRoaXMsIHByZXZQcm9wcywgcHJldlN0YXRlLCBwcmV2Q29udGV4dCksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbikge1xuICAgIGlmIChuZXh0RWxlbWVudCA9PT0gdGhpcy5fY3VycmVudEVsZW1lbnQgJiZcbiAgICAgICAgbmV4dEVsZW1lbnQuX293bmVyICE9IG51bGwpIHtcbiAgICAgIC8vIFNpbmNlIGVsZW1lbnRzIGFyZSBpbW11dGFibGUgYWZ0ZXIgdGhlIG93bmVyIGlzIHJlbmRlcmVkLFxuICAgICAgLy8gd2UgY2FuIGRvIGEgY2hlYXAgaWRlbnRpdHkgY29tcGFyZSBoZXJlIHRvIGRldGVybWluZSBpZiB0aGlzIGlzIGFcbiAgICAgIC8vIHN1cGVyZmx1b3VzIHJlY29uY2lsZS4gSXQncyBwb3NzaWJsZSBmb3Igc3RhdGUgdG8gYmUgbXV0YWJsZSBidXQgc3VjaFxuICAgICAgLy8gY2hhbmdlIHNob3VsZCB0cmlnZ2VyIGFuIHVwZGF0ZSBvZiB0aGUgb3duZXIgd2hpY2ggd291bGQgcmVjcmVhdGVcbiAgICAgIC8vIHRoZSBlbGVtZW50LiBXZSBleHBsaWNpdGx5IGNoZWNrIGZvciB0aGUgZXhpc3RlbmNlIG9mIGFuIG93bmVyIHNpbmNlXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIGZvciBhIGVsZW1lbnQgY3JlYXRlZCBvdXRzaWRlIGEgY29tcG9zaXRlIHRvIGJlXG4gICAgICAvLyBkZWVwbHkgbXV0YXRlZCBhbmQgcmV1c2VkLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIFJlYWN0Q29tcG9uZW50Lk1peGluLnJlY2VpdmVDb21wb25lbnQuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICBuZXh0RWxlbWVudCxcbiAgICAgIHRyYW5zYWN0aW9uXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgY29tcG9uZW50J3MgY3VycmVudGx5IG1vdW50ZWQgRE9NIHJlcHJlc2VudGF0aW9uLlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCB0aGlzIGltcGxlbWVudHMgUmVhY3QncyByZW5kZXJpbmcgYW5kIHJlY29uY2lsaWF0aW9uIGFsZ29yaXRobS5cbiAgICogU29waGlzdGljYXRlZCBjbGllbnRzIG1heSB3aXNoIHRvIG92ZXJyaWRlIHRoaXMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IHByZXZFbGVtZW50XG4gICAqIEBpbnRlcm5hbFxuICAgKiBAb3ZlcnJpZGFibGVcbiAgICovXG4gIHVwZGF0ZUNvbXBvbmVudDogUmVhY3RQZXJmLm1lYXN1cmUoXG4gICAgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JyxcbiAgICAndXBkYXRlQ29tcG9uZW50JyxcbiAgICBmdW5jdGlvbih0cmFuc2FjdGlvbiwgcHJldlBhcmVudEVsZW1lbnQpIHtcbiAgICAgIFJlYWN0Q29tcG9uZW50Lk1peGluLnVwZGF0ZUNvbXBvbmVudC5jYWxsKFxuICAgICAgICB0aGlzLFxuICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgcHJldlBhcmVudEVsZW1lbnRcbiAgICAgICk7XG5cbiAgICAgIHZhciBwcmV2Q29tcG9uZW50SW5zdGFuY2UgPSB0aGlzLl9yZW5kZXJlZENvbXBvbmVudDtcbiAgICAgIHZhciBwcmV2RWxlbWVudCA9IHByZXZDb21wb25lbnRJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQ7XG4gICAgICB2YXIgbmV4dEVsZW1lbnQgPSB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQoKTtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpKSB7XG4gICAgICAgIHByZXZDb21wb25lbnRJbnN0YW5jZS5yZWNlaXZlQ29tcG9uZW50KG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGVzZSB0d28gSURzIGFyZSBhY3R1YWxseSB0aGUgc2FtZSEgQnV0IG5vdGhpbmcgc2hvdWxkIHJlbHkgb24gdGhhdC5cbiAgICAgICAgdmFyIHRoaXNJRCA9IHRoaXMuX3Jvb3ROb2RlSUQ7XG4gICAgICAgIHZhciBwcmV2Q29tcG9uZW50SUQgPSBwcmV2Q29tcG9uZW50SW5zdGFuY2UuX3Jvb3ROb2RlSUQ7XG4gICAgICAgIHByZXZDb21wb25lbnRJbnN0YW5jZS51bm1vdW50Q29tcG9uZW50KCk7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChcbiAgICAgICAgICBuZXh0RWxlbWVudCxcbiAgICAgICAgICB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlXG4gICAgICAgICk7XG4gICAgICAgIHZhciBuZXh0TWFya3VwID0gdGhpcy5fcmVuZGVyZWRDb21wb25lbnQubW91bnRDb21wb25lbnQoXG4gICAgICAgICAgdGhpc0lELFxuICAgICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICAgIHRoaXMuX21vdW50RGVwdGggKyAxXG4gICAgICAgICk7XG4gICAgICAgIFJlYWN0Q29tcG9uZW50LkJhY2tlbmRJRE9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEKFxuICAgICAgICAgIHByZXZDb21wb25lbnRJRCxcbiAgICAgICAgICBuZXh0TWFya3VwXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICApLFxuXG4gIC8qKlxuICAgKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gICAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gICAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICAgKlxuICAgKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkVXBkYXRlQ29tcG9uZW50YCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gICAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgdXBkYXRlIGlzIGNvbXBsZXRlLlxuICAgKiBAZmluYWxcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgZm9yY2VVcGRhdGU6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIGNvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlID0gdGhpcy5fY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGU7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHRoaXMuaXNNb3VudGVkKCkgfHxcbiAgICAgICAgY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgPT09IENvbXBvc2l0ZUxpZmVDeWNsZS5NT1VOVElORyxcbiAgICAgICdmb3JjZVVwZGF0ZSguLi4pOiBDYW4gb25seSBmb3JjZSBhbiB1cGRhdGUgb24gbW91bnRlZCBvciBtb3VudGluZyAnICtcbiAgICAgICAgJ2NvbXBvbmVudHMuJ1xuICAgICkgOiBpbnZhcmlhbnQodGhpcy5pc01vdW50ZWQoKSB8fFxuICAgICAgY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgPT09IENvbXBvc2l0ZUxpZmVDeWNsZS5NT1VOVElORykpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBjb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSAhPT0gQ29tcG9zaXRlTGlmZUN5Y2xlLlVOTU9VTlRJTkcgJiZcbiAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCxcbiAgICAgICdmb3JjZVVwZGF0ZSguLi4pOiBDYW5ub3QgZm9yY2UgYW4gdXBkYXRlIHdoaWxlIHVubW91bnRpbmcgY29tcG9uZW50ICcgK1xuICAgICAgJ29yIHdpdGhpbiBhIGByZW5kZXJgIGZ1bmN0aW9uLidcbiAgICApIDogaW52YXJpYW50KGNvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlICE9PSBDb21wb3NpdGVMaWZlQ3ljbGUuVU5NT1VOVElORyAmJlxuICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCkpO1xuICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IHRydWU7XG4gICAgUmVhY3RVcGRhdGVzLmVucXVldWVVcGRhdGUodGhpcywgY2FsbGJhY2spO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudDogUmVhY3RQZXJmLm1lYXN1cmUoXG4gICAgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JyxcbiAgICAnX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCcsXG4gICAgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgICB2YXIgcHJldmlvdXNDb250ZXh0ID0gUmVhY3RDb250ZXh0LmN1cnJlbnQ7XG4gICAgICBSZWFjdENvbnRleHQuY3VycmVudCA9IHRoaXMuX3Byb2Nlc3NDaGlsZENvbnRleHQoXG4gICAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9jb250ZXh0XG4gICAgICApO1xuICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IHRoaXM7XG4gICAgICB0cnkge1xuICAgICAgICByZW5kZXJlZENvbXBvbmVudCA9IHRoaXMucmVuZGVyKCk7XG4gICAgICAgIGlmIChyZW5kZXJlZENvbXBvbmVudCA9PT0gbnVsbCB8fCByZW5kZXJlZENvbXBvbmVudCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZW5kZXJlZENvbXBvbmVudCA9IFJlYWN0RW1wdHlDb21wb25lbnQuZ2V0RW1wdHlDb21wb25lbnQoKTtcbiAgICAgICAgICBSZWFjdEVtcHR5Q29tcG9uZW50LnJlZ2lzdGVyTnVsbENvbXBvbmVudElEKHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFJlYWN0RW1wdHlDb21wb25lbnQuZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRCh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgUmVhY3RDb250ZXh0LmN1cnJlbnQgPSBwcmV2aW91c0NvbnRleHQ7XG4gICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHJlbmRlcmVkQ29tcG9uZW50KSxcbiAgICAgICAgJyVzLnJlbmRlcigpOiBBIHZhbGlkIFJlYWN0Q29tcG9uZW50IG11c3QgYmUgcmV0dXJuZWQuIFlvdSBtYXkgaGF2ZSAnICtcbiAgICAgICAgICAncmV0dXJuZWQgdW5kZWZpbmVkLCBhbiBhcnJheSBvciBzb21lIG90aGVyIGludmFsaWQgb2JqZWN0LicsXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50J1xuICAgICAgKSA6IGludmFyaWFudChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocmVuZGVyZWRDb21wb25lbnQpKSk7XG4gICAgICByZXR1cm4gcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgfVxuICApLFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2JpbmRBdXRvQmluZE1ldGhvZHM6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGF1dG9CaW5kS2V5IGluIHRoaXMuX19yZWFjdEF1dG9CaW5kTWFwKSB7XG4gICAgICBpZiAoIXRoaXMuX19yZWFjdEF1dG9CaW5kTWFwLmhhc093blByb3BlcnR5KGF1dG9CaW5kS2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBtZXRob2QgPSB0aGlzLl9fcmVhY3RBdXRvQmluZE1hcFthdXRvQmluZEtleV07XG4gICAgICB0aGlzW2F1dG9CaW5kS2V5XSA9IHRoaXMuX2JpbmRBdXRvQmluZE1ldGhvZChSZWFjdEVycm9yVXRpbHMuZ3VhcmQoXG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSArICcuJyArIGF1dG9CaW5kS2V5XG4gICAgICApKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEJpbmRzIGEgbWV0aG9kIHRvIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1ldGhvZCBNZXRob2QgdG8gYmUgYm91bmQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYmluZEF1dG9CaW5kTWV0aG9kOiBmdW5jdGlvbihtZXRob2QpIHtcbiAgICB2YXIgY29tcG9uZW50ID0gdGhpcztcbiAgICB2YXIgYm91bmRNZXRob2QgPSBtZXRob2QuYmluZChjb21wb25lbnQpO1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRNZXRob2QgPSBtZXRob2Q7XG4gICAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRBcmd1bWVudHMgPSBudWxsO1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWU7XG4gICAgICB2YXIgX2JpbmQgPSBib3VuZE1ldGhvZC5iaW5kO1xuICAgICAgYm91bmRNZXRob2QuYmluZCA9IGZ1bmN0aW9uKG5ld1RoaXMgKSB7Zm9yICh2YXIgYXJncz1bXSwkX18wPTEsJF9fMT1hcmd1bWVudHMubGVuZ3RoOyRfXzA8JF9fMTskX18wKyspIGFyZ3MucHVzaChhcmd1bWVudHNbJF9fMF0pO1xuICAgICAgICAvLyBVc2VyIGlzIHRyeWluZyB0byBiaW5kKCkgYW4gYXV0b2JvdW5kIG1ldGhvZDsgd2UgZWZmZWN0aXZlbHkgd2lsbFxuICAgICAgICAvLyBpZ25vcmUgdGhlIHZhbHVlIG9mIFwidGhpc1wiIHRoYXQgdGhlIHVzZXIgaXMgdHJ5aW5nIHRvIHVzZSwgc29cbiAgICAgICAgLy8gbGV0J3Mgd2Fybi5cbiAgICAgICAgaWYgKG5ld1RoaXMgIT09IGNvbXBvbmVudCAmJiBuZXdUaGlzICE9PSBudWxsKSB7XG4gICAgICAgICAgbW9uaXRvckNvZGVVc2UoJ3JlYWN0X2JpbmRfd2FybmluZycsIHsgY29tcG9uZW50OiBjb21wb25lbnROYW1lIH0pO1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICdiaW5kKCk6IFJlYWN0IGNvbXBvbmVudCBtZXRob2RzIG1heSBvbmx5IGJlIGJvdW5kIHRvIHRoZSAnICtcbiAgICAgICAgICAgICdjb21wb25lbnQgaW5zdGFuY2UuIFNlZSAnICsgY29tcG9uZW50TmFtZVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgbW9uaXRvckNvZGVVc2UoJ3JlYWN0X2JpbmRfd2FybmluZycsIHsgY29tcG9uZW50OiBjb21wb25lbnROYW1lIH0pO1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICdiaW5kKCk6IFlvdSBhcmUgYmluZGluZyBhIGNvbXBvbmVudCBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC4gJyArXG4gICAgICAgICAgICAnUmVhY3QgZG9lcyB0aGlzIGZvciB5b3UgYXV0b21hdGljYWxseSBpbiBhIGhpZ2gtcGVyZm9ybWFuY2UgJyArXG4gICAgICAgICAgICAnd2F5LCBzbyB5b3UgY2FuIHNhZmVseSByZW1vdmUgdGhpcyBjYWxsLiBTZWUgJyArIGNvbXBvbmVudE5hbWVcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBib3VuZE1ldGhvZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVib3VuZE1ldGhvZCA9IF9iaW5kLmFwcGx5KGJvdW5kTWV0aG9kLCBhcmd1bWVudHMpO1xuICAgICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZEFyZ3VtZW50cyA9IGFyZ3M7XG4gICAgICAgIHJldHVybiByZWJvdW5kTWV0aG9kO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGJvdW5kTWV0aG9kO1xuICB9XG59O1xuXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnRCYXNlID0gZnVuY3Rpb24oKSB7fTtcbmFzc2lnbihcbiAgUmVhY3RDb21wb3NpdGVDb21wb25lbnRCYXNlLnByb3RvdHlwZSxcbiAgUmVhY3RDb21wb25lbnQuTWl4aW4sXG4gIFJlYWN0T3duZXIuTWl4aW4sXG4gIFJlYWN0UHJvcFRyYW5zZmVyZXIuTWl4aW4sXG4gIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50TWl4aW5cbik7XG5cbi8qKlxuICogTW9kdWxlIGZvciBjcmVhdGluZyBjb21wb3NpdGUgY29tcG9uZW50cy5cbiAqXG4gKiBAY2xhc3MgUmVhY3RDb21wb3NpdGVDb21wb25lbnRcbiAqIEBleHRlbmRzIFJlYWN0Q29tcG9uZW50XG4gKiBAZXh0ZW5kcyBSZWFjdE93bmVyXG4gKiBAZXh0ZW5kcyBSZWFjdFByb3BUcmFuc2ZlcmVyXG4gKi9cbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCA9IHtcblxuICBMaWZlQ3ljbGU6IENvbXBvc2l0ZUxpZmVDeWNsZSxcblxuICBCYXNlOiBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEJhc2UsXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBjb21wb3NpdGUgY29tcG9uZW50IGNsYXNzIGdpdmVuIGEgY2xhc3Mgc3BlY2lmaWNhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHNwZWMgQ2xhc3Mgc3BlY2lmaWNhdGlvbiAod2hpY2ggbXVzdCBkZWZpbmUgYHJlbmRlcmApLlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gQ29tcG9uZW50IGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICAgKiBAcHVibGljXG4gICAqL1xuICBjcmVhdGVDbGFzczogZnVuY3Rpb24oc3BlYykge1xuICAgIHZhciBDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICAvLyBUaGlzIGNvbnN0cnVjdG9yIGlzIG92ZXJyaWRkZW4gYnkgbW9ja3MuIFRoZSBhcmd1bWVudCBpcyB1c2VkXG4gICAgICAvLyBieSBtb2NrcyB0byBhc3NlcnQgb24gd2hhdCBnZXRzIG1vdW50ZWQuIFRoaXMgd2lsbCBsYXRlciBiZSB1c2VkXG4gICAgICAvLyBieSB0aGUgc3RhbmQtYWxvbmUgY2xhc3MgaW1wbGVtZW50YXRpb24uXG4gICAgfTtcbiAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBuZXcgUmVhY3RDb21wb3NpdGVDb21wb25lbnRCYXNlKCk7XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG5cbiAgICBpbmplY3RlZE1peGlucy5mb3JFYWNoKFxuICAgICAgbWl4U3BlY0ludG9Db21wb25lbnQuYmluZChudWxsLCBDb25zdHJ1Y3RvcilcbiAgICApO1xuXG4gICAgbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgZGVmYXVsdFByb3BzIHByb3BlcnR5IGFmdGVyIGFsbCBtaXhpbnMgaGF2ZSBiZWVuIG1lcmdlZFxuICAgIGlmIChDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgIENvbnN0cnVjdG9yLmRlZmF1bHRQcm9wcyA9IENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcygpO1xuICAgIH1cblxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUucmVuZGVyLFxuICAgICAgJ2NyZWF0ZUNsYXNzKC4uLik6IENsYXNzIHNwZWNpZmljYXRpb24gbXVzdCBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuJ1xuICAgICkgOiBpbnZhcmlhbnQoQ29uc3RydWN0b3IucHJvdG90eXBlLnJlbmRlcikpO1xuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgaWYgKENvbnN0cnVjdG9yLnByb3RvdHlwZS5jb21wb25lbnRTaG91bGRVcGRhdGUpIHtcbiAgICAgICAgbW9uaXRvckNvZGVVc2UoXG4gICAgICAgICAgJ3JlYWN0X2NvbXBvbmVudF9zaG91bGRfdXBkYXRlX3dhcm5pbmcnLFxuICAgICAgICAgIHsgY29tcG9uZW50OiBzcGVjLmRpc3BsYXlOYW1lIH1cbiAgICAgICAgKTtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIChzcGVjLmRpc3BsYXlOYW1lIHx8ICdBIGNvbXBvbmVudCcpICsgJyBoYXMgYSBtZXRob2QgY2FsbGVkICcgK1xuICAgICAgICAgICdjb21wb25lbnRTaG91bGRVcGRhdGUoKS4gRGlkIHlvdSBtZWFuIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpPyAnICtcbiAgICAgICAgICAnVGhlIG5hbWUgaXMgcGhyYXNlZCBhcyBhIHF1ZXN0aW9uIGJlY2F1c2UgdGhlIGZ1bmN0aW9uIGlzICcgK1xuICAgICAgICAgICdleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS4nXG4gICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlZHVjZSB0aW1lIHNwZW50IGRvaW5nIGxvb2t1cHMgYnkgc2V0dGluZyB0aGVzZSBvbiB0aGUgcHJvdG90eXBlLlxuICAgIGZvciAodmFyIG1ldGhvZE5hbWUgaW4gUmVhY3RDb21wb3NpdGVDb21wb25lbnRJbnRlcmZhY2UpIHtcbiAgICAgIGlmICghQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgcmV0dXJuIFJlYWN0TGVnYWN5RWxlbWVudC53cmFwRmFjdG9yeShcbiAgICAgICAgUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUZhY3RvcnkoQ29uc3RydWN0b3IpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gUmVhY3RMZWdhY3lFbGVtZW50LndyYXBGYWN0b3J5KFxuICAgICAgUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoQ29uc3RydWN0b3IpXG4gICAgKTtcbiAgfSxcblxuICBpbmplY3Rpb246IHtcbiAgICBpbmplY3RNaXhpbjogZnVuY3Rpb24obWl4aW4pIHtcbiAgICAgIGluamVjdGVkTWl4aW5zLnB1c2gobWl4aW4pO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5qc1xuICoqIG1vZHVsZSBpZCA9IDlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RW1wdHlDb21wb25lbnRcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHtcbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIERPTSBub2RlIHJlbmRlcmVkIGJ5IHRoaXMgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtET01FbGVtZW50fSBUaGUgcm9vdCBub2RlIG9mIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZmluYWxcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgZ2V0RE9NTm9kZTogZnVuY3Rpb24oKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHRoaXMuaXNNb3VudGVkKCksXG4gICAgICAnZ2V0RE9NTm9kZSgpOiBBIGNvbXBvbmVudCBtdXN0IGJlIG1vdW50ZWQgdG8gaGF2ZSBhIERPTSBub2RlLidcbiAgICApIDogaW52YXJpYW50KHRoaXMuaXNNb3VudGVkKCkpKTtcbiAgICBpZiAoUmVhY3RFbXB0eUNvbXBvbmVudC5pc051bGxDb21wb25lbnRJRCh0aGlzLl9yb290Tm9kZUlEKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBSZWFjdE1vdW50LmdldE5vZGUodGhpcy5fcm9vdE5vZGVJRCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW47XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4uanNcbiAqKiBtb2R1bGUgaWQgPSAxMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UGVyZlxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBSZWFjdFBlcmYgaXMgYSBnZW5lcmFsIEFPUCBzeXN0ZW0gZGVzaWduZWQgdG8gbWVhc3VyZSBwZXJmb3JtYW5jZS4gVGhpc1xuICogbW9kdWxlIG9ubHkgaGFzIHRoZSBob29rczogc2VlIFJlYWN0RGVmYXVsdFBlcmYgZm9yIHRoZSBhbmFseXNpcyB0b29sLlxuICovXG52YXIgUmVhY3RQZXJmID0ge1xuICAvKipcbiAgICogQm9vbGVhbiB0byBlbmFibGUvZGlzYWJsZSBtZWFzdXJlbWVudC4gU2V0IHRvIGZhbHNlIGJ5IGRlZmF1bHQgdG8gcHJldmVudFxuICAgKiBhY2NpZGVudGFsIGxvZ2dpbmcgYW5kIHBlcmYgbG9zcy5cbiAgICovXG4gIGVuYWJsZU1lYXN1cmU6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBIb2xkcyBvbnRvIHRoZSBtZWFzdXJlIGZ1bmN0aW9uIGluIHVzZS4gQnkgZGVmYXVsdCwgZG9uJ3QgbWVhc3VyZVxuICAgKiBhbnl0aGluZywgYnV0IHdlJ2xsIG92ZXJyaWRlIHRoaXMgaWYgd2UgaW5qZWN0IGEgbWVhc3VyZSBmdW5jdGlvbi5cbiAgICovXG4gIHN0b3JlZE1lYXN1cmU6IF9ub01lYXN1cmUsXG5cbiAgLyoqXG4gICAqIFVzZSB0aGlzIHRvIHdyYXAgbWV0aG9kcyB5b3Ugd2FudCB0byBtZWFzdXJlLiBaZXJvIG92ZXJoZWFkIGluIHByb2R1Y3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmpOYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbk5hbWVcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY1xuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICovXG4gIG1lYXN1cmU6IGZ1bmN0aW9uKG9iak5hbWUsIGZuTmFtZSwgZnVuYykge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHZhciBtZWFzdXJlZEZ1bmMgPSBudWxsO1xuICAgICAgdmFyIHdyYXBwZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKFJlYWN0UGVyZi5lbmFibGVNZWFzdXJlKSB7XG4gICAgICAgICAgaWYgKCFtZWFzdXJlZEZ1bmMpIHtcbiAgICAgICAgICAgIG1lYXN1cmVkRnVuYyA9IFJlYWN0UGVyZi5zdG9yZWRNZWFzdXJlKG9iak5hbWUsIGZuTmFtZSwgZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtZWFzdXJlZEZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIHdyYXBwZXIuZGlzcGxheU5hbWUgPSBvYmpOYW1lICsgJ18nICsgZm5OYW1lO1xuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuICAgIHJldHVybiBmdW5jO1xuICB9LFxuXG4gIGluamVjdGlvbjoge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1lYXN1cmVcbiAgICAgKi9cbiAgICBpbmplY3RNZWFzdXJlOiBmdW5jdGlvbihtZWFzdXJlKSB7XG4gICAgICBSZWFjdFBlcmYuc3RvcmVkTWVhc3VyZSA9IG1lYXN1cmU7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFNpbXBseSBwYXNzZXMgdGhyb3VnaCB0aGUgbWVhc3VyZWQgZnVuY3Rpb24sIHdpdGhvdXQgbWVhc3VyaW5nIGl0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBvYmpOYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gZm5OYW1lXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gX25vTWVhc3VyZShvYmpOYW1lLCBmbk5hbWUsIGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQZXJmO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0UGVyZi5qc1xuICoqIG1vZHVsZSBpZCA9IDExXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RVcGRhdGVzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBDYWxsYmFja1F1ZXVlID0gcmVxdWlyZShcIi4vQ2FsbGJhY2tRdWV1ZVwiKTtcbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIik7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZShcIi4vVHJhbnNhY3Rpb25cIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIGRpcnR5Q29tcG9uZW50cyA9IFtdO1xudmFyIGFzYXBDYWxsYmFja1F1ZXVlID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKTtcbnZhciBhc2FwRW5xdWV1ZWQgPSBmYWxzZTtcblxudmFyIGJhdGNoaW5nU3RyYXRlZ3kgPSBudWxsO1xuXG5mdW5jdGlvbiBlbnN1cmVJbmplY3RlZCgpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiAmJiBiYXRjaGluZ1N0cmF0ZWd5LFxuICAgICdSZWFjdFVwZGF0ZXM6IG11c3QgaW5qZWN0IGEgcmVjb25jaWxlIHRyYW5zYWN0aW9uIGNsYXNzIGFuZCBiYXRjaGluZyAnICtcbiAgICAnc3RyYXRlZ3knXG4gICkgOiBpbnZhcmlhbnQoUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gJiYgYmF0Y2hpbmdTdHJhdGVneSkpO1xufVxuXG52YXIgTkVTVEVEX1VQREFURVMgPSB7XG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gZGlydHlDb21wb25lbnRzLmxlbmd0aDtcbiAgfSxcbiAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCAhPT0gZGlydHlDb21wb25lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gQWRkaXRpb25hbCB1cGRhdGVzIHdlcmUgZW5xdWV1ZWQgYnkgY29tcG9uZW50RGlkVXBkYXRlIGhhbmRsZXJzIG9yXG4gICAgICAvLyBzaW1pbGFyOyBiZWZvcmUgb3VyIG93biBVUERBVEVfUVVFVUVJTkcgd3JhcHBlciBjbG9zZXMsIHdlIHdhbnQgdG8gcnVuXG4gICAgICAvLyB0aGVzZSBuZXcgdXBkYXRlcyBzbyB0aGF0IGlmIEEncyBjb21wb25lbnREaWRVcGRhdGUgY2FsbHMgc2V0U3RhdGUgb25cbiAgICAgIC8vIEIsIEIgd2lsbCB1cGRhdGUgYmVmb3JlIHRoZSBjYWxsYmFjayBBJ3MgdXBkYXRlciBwcm92aWRlZCB3aGVuIGNhbGxpbmdcbiAgICAgIC8vIHNldFN0YXRlLlxuICAgICAgZGlydHlDb21wb25lbnRzLnNwbGljZSgwLCB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCk7XG4gICAgICBmbHVzaEJhdGNoZWRVcGRhdGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpcnR5Q29tcG9uZW50cy5sZW5ndGggPSAwO1xuICAgIH1cbiAgfVxufTtcblxudmFyIFVQREFURV9RVUVVRUlORyA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jYWxsYmFja1F1ZXVlLnJlc2V0KCk7XG4gIH0sXG4gIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNhbGxiYWNrUXVldWUubm90aWZ5QWxsKCk7XG4gIH1cbn07XG5cbnZhciBUUkFOU0FDVElPTl9XUkFQUEVSUyA9IFtORVNURURfVVBEQVRFUywgVVBEQVRFX1FVRVVFSU5HXTtcblxuZnVuY3Rpb24gUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbigpIHtcbiAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xuICB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCA9IG51bGw7XG4gIHRoaXMuY2FsbGJhY2tRdWV1ZSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCk7XG4gIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24gPVxuICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmdldFBvb2xlZCgpO1xufVxuXG5hc3NpZ24oXG4gIFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24ucHJvdG90eXBlLFxuICBUcmFuc2FjdGlvbi5NaXhpbiwge1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gIH0sXG5cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGggPSBudWxsO1xuICAgIENhbGxiYWNrUXVldWUucmVsZWFzZSh0aGlzLmNhbGxiYWNrUXVldWUpO1xuICAgIHRoaXMuY2FsbGJhY2tRdWV1ZSA9IG51bGw7XG4gICAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucmVsZWFzZSh0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uKTtcbiAgICB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uID0gbnVsbDtcbiAgfSxcblxuICBwZXJmb3JtOiBmdW5jdGlvbihtZXRob2QsIHNjb3BlLCBhKSB7XG4gICAgLy8gRXNzZW50aWFsbHkgY2FsbHMgYHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24ucGVyZm9ybShtZXRob2QsIHNjb3BlLCBhKWBcbiAgICAvLyB3aXRoIHRoaXMgdHJhbnNhY3Rpb24ncyB3cmFwcGVycyBhcm91bmQgaXQuXG4gICAgcmV0dXJuIFRyYW5zYWN0aW9uLk1peGluLnBlcmZvcm0uY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uLnBlcmZvcm0sXG4gICAgICB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uLFxuICAgICAgbWV0aG9kLFxuICAgICAgc2NvcGUsXG4gICAgICBhXG4gICAgKTtcbiAgfVxufSk7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uKTtcblxuZnVuY3Rpb24gYmF0Y2hlZFVwZGF0ZXMoY2FsbGJhY2ssIGEsIGIpIHtcbiAgZW5zdXJlSW5qZWN0ZWQoKTtcbiAgYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyhjYWxsYmFjaywgYSwgYik7XG59XG5cbi8qKlxuICogQXJyYXkgY29tcGFyYXRvciBmb3IgUmVhY3RDb21wb25lbnRzIGJ5IG93bmVyIGRlcHRoXG4gKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gYzEgZmlyc3QgY29tcG9uZW50IHlvdSdyZSBjb21wYXJpbmdcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGMyIHNlY29uZCBjb21wb25lbnQgeW91J3JlIGNvbXBhcmluZ1xuICogQHJldHVybiB7bnVtYmVyfSBSZXR1cm4gdmFsdWUgdXNhYmxlIGJ5IEFycmF5LnByb3RvdHlwZS5zb3J0KCkuXG4gKi9cbmZ1bmN0aW9uIG1vdW50RGVwdGhDb21wYXJhdG9yKGMxLCBjMikge1xuICByZXR1cm4gYzEuX21vdW50RGVwdGggLSBjMi5fbW91bnREZXB0aDtcbn1cblxuZnVuY3Rpb24gcnVuQmF0Y2hlZFVwZGF0ZXModHJhbnNhY3Rpb24pIHtcbiAgdmFyIGxlbiA9IHRyYW5zYWN0aW9uLmRpcnR5Q29tcG9uZW50c0xlbmd0aDtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBsZW4gPT09IGRpcnR5Q29tcG9uZW50cy5sZW5ndGgsXG4gICAgJ0V4cGVjdGVkIGZsdXNoIHRyYW5zYWN0aW9uXFwncyBzdG9yZWQgZGlydHktY29tcG9uZW50cyBsZW5ndGggKCVzKSB0byAnICtcbiAgICAnbWF0Y2ggZGlydHktY29tcG9uZW50cyBhcnJheSBsZW5ndGggKCVzKS4nLFxuICAgIGxlbixcbiAgICBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoXG4gICkgOiBpbnZhcmlhbnQobGVuID09PSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoKSk7XG5cbiAgLy8gU2luY2UgcmVjb25jaWxpbmcgYSBjb21wb25lbnQgaGlnaGVyIGluIHRoZSBvd25lciBoaWVyYXJjaHkgdXN1YWxseSAobm90XG4gIC8vIGFsd2F5cyAtLSBzZWUgc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkpIHdpbGwgcmVjb25jaWxlIGNoaWxkcmVuLCByZWNvbmNpbGVcbiAgLy8gdGhlbSBiZWZvcmUgdGhlaXIgY2hpbGRyZW4gYnkgc29ydGluZyB0aGUgYXJyYXkuXG4gIGRpcnR5Q29tcG9uZW50cy5zb3J0KG1vdW50RGVwdGhDb21wYXJhdG9yKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgLy8gSWYgYSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGJlZm9yZSBwZW5kaW5nIGNoYW5nZXMgYXBwbHksIGlnbm9yZSB0aGVtXG4gICAgLy8gVE9ETzogUXVldWUgdW5tb3VudHMgaW4gdGhlIHNhbWUgbGlzdCB0byBhdm9pZCB0aGlzIGhhcHBlbmluZyBhdCBhbGxcbiAgICB2YXIgY29tcG9uZW50ID0gZGlydHlDb21wb25lbnRzW2ldO1xuICAgIGlmIChjb21wb25lbnQuaXNNb3VudGVkKCkpIHtcbiAgICAgIC8vIElmIHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeSBoYXBwZW5zIHRvIGVucXVldWUgYW55IG5ldyB1cGRhdGVzLCB3ZVxuICAgICAgLy8gc2hvdWxkbid0IGV4ZWN1dGUgdGhlIGNhbGxiYWNrcyB1bnRpbCB0aGUgbmV4dCByZW5kZXIgaGFwcGVucywgc29cbiAgICAgIC8vIHN0YXNoIHRoZSBjYWxsYmFja3MgZmlyc3RcbiAgICAgIHZhciBjYWxsYmFja3MgPSBjb21wb25lbnQuX3BlbmRpbmdDYWxsYmFja3M7XG4gICAgICBjb21wb25lbnQuX3BlbmRpbmdDYWxsYmFja3MgPSBudWxsO1xuICAgICAgY29tcG9uZW50LnBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeSh0cmFuc2FjdGlvbi5yZWNvbmNpbGVUcmFuc2FjdGlvbik7XG5cbiAgICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjYWxsYmFja3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5jYWxsYmFja1F1ZXVlLmVucXVldWUoXG4gICAgICAgICAgICBjYWxsYmFja3Nbal0sXG4gICAgICAgICAgICBjb21wb25lbnRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBmbHVzaEJhdGNoZWRVcGRhdGVzID0gUmVhY3RQZXJmLm1lYXN1cmUoXG4gICdSZWFjdFVwZGF0ZXMnLFxuICAnZmx1c2hCYXRjaGVkVXBkYXRlcycsXG4gIGZ1bmN0aW9uKCkge1xuICAgIC8vIFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24ncyB3cmFwcGVycyB3aWxsIGNsZWFyIHRoZSBkaXJ0eUNvbXBvbmVudHNcbiAgICAvLyBhcnJheSBhbmQgcGVyZm9ybSBhbnkgdXBkYXRlcyBlbnF1ZXVlZCBieSBtb3VudC1yZWFkeSBoYW5kbGVycyAoaS5lLixcbiAgICAvLyBjb21wb25lbnREaWRVcGRhdGUpIGJ1dCB3ZSBuZWVkIHRvIGNoZWNrIGhlcmUgdG9vIGluIG9yZGVyIHRvIGNhdGNoXG4gICAgLy8gdXBkYXRlcyBlbnF1ZXVlZCBieSBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIGFzYXAgY2FsbHMuXG4gICAgd2hpbGUgKGRpcnR5Q29tcG9uZW50cy5sZW5ndGggfHwgYXNhcEVucXVldWVkKSB7XG4gICAgICBpZiAoZGlydHlDb21wb25lbnRzLmxlbmd0aCkge1xuICAgICAgICB2YXIgdHJhbnNhY3Rpb24gPSBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLmdldFBvb2xlZCgpO1xuICAgICAgICB0cmFuc2FjdGlvbi5wZXJmb3JtKHJ1bkJhdGNoZWRVcGRhdGVzLCBudWxsLCB0cmFuc2FjdGlvbik7XG4gICAgICAgIFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChhc2FwRW5xdWV1ZWQpIHtcbiAgICAgICAgYXNhcEVucXVldWVkID0gZmFsc2U7XG4gICAgICAgIHZhciBxdWV1ZSA9IGFzYXBDYWxsYmFja1F1ZXVlO1xuICAgICAgICBhc2FwQ2FsbGJhY2tRdWV1ZSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCk7XG4gICAgICAgIHF1ZXVlLm5vdGlmeUFsbCgpO1xuICAgICAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UocXVldWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuKTtcblxuLyoqXG4gKiBNYXJrIGEgY29tcG9uZW50IGFzIG5lZWRpbmcgYSByZXJlbmRlciwgYWRkaW5nIGFuIG9wdGlvbmFsIGNhbGxiYWNrIHRvIGFcbiAqIGxpc3Qgb2YgZnVuY3Rpb25zIHdoaWNoIHdpbGwgYmUgZXhlY3V0ZWQgb25jZSB0aGUgcmVyZW5kZXIgb2NjdXJzLlxuICovXG5mdW5jdGlvbiBlbnF1ZXVlVXBkYXRlKGNvbXBvbmVudCwgY2FsbGJhY2spIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAhY2FsbGJhY2sgfHwgdHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIsXG4gICAgJ2VucXVldWVVcGRhdGUoLi4uKTogWW91IGNhbGxlZCBgc2V0UHJvcHNgLCBgcmVwbGFjZVByb3BzYCwgJyArXG4gICAgJ2BzZXRTdGF0ZWAsIGByZXBsYWNlU3RhdGVgLCBvciBgZm9yY2VVcGRhdGVgIHdpdGggYSBjYWxsYmFjayB0aGF0ICcgK1xuICAgICdpc25cXCd0IGNhbGxhYmxlLidcbiAgKSA6IGludmFyaWFudCghY2FsbGJhY2sgfHwgdHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpKTtcbiAgZW5zdXJlSW5qZWN0ZWQoKTtcblxuICAvLyBWYXJpb3VzIHBhcnRzIG9mIG91ciBjb2RlIChzdWNoIGFzIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50J3NcbiAgLy8gX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCkgYXNzdW1lIHRoYXQgY2FsbHMgdG8gcmVuZGVyIGFyZW4ndCBuZXN0ZWQ7XG4gIC8vIHZlcmlmeSB0aGF0IHRoYXQncyB0aGUgY2FzZS4gKFRoaXMgaXMgY2FsbGVkIGJ5IGVhY2ggdG9wLWxldmVsIHVwZGF0ZVxuICAvLyBmdW5jdGlvbiwgbGlrZSBzZXRQcm9wcywgc2V0U3RhdGUsIGZvcmNlVXBkYXRlLCBldGMuOyBjcmVhdGlvbiBhbmRcbiAgLy8gZGVzdHJ1Y3Rpb24gb2YgdG9wLWxldmVsIGNvbXBvbmVudHMgaXMgZ3VhcmRlZCBpbiBSZWFjdE1vdW50LilcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLFxuICAgICdlbnF1ZXVlVXBkYXRlKCk6IFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgJyArXG4gICAgJ2FuZCBzdGF0ZTsgdHJpZ2dlcmluZyBuZXN0ZWQgY29tcG9uZW50IHVwZGF0ZXMgZnJvbSByZW5kZXIgaXMgbm90ICcgK1xuICAgICdhbGxvd2VkLiBJZiBuZWNlc3NhcnksIHRyaWdnZXIgbmVzdGVkIHVwZGF0ZXMgaW4gJyArXG4gICAgJ2NvbXBvbmVudERpZFVwZGF0ZS4nXG4gICkgOiBudWxsKTtcblxuICBpZiAoIWJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMpIHtcbiAgICBiYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzKGVucXVldWVVcGRhdGUsIGNvbXBvbmVudCwgY2FsbGJhY2spO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRpcnR5Q29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG5cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgaWYgKGNvbXBvbmVudC5fcGVuZGluZ0NhbGxiYWNrcykge1xuICAgICAgY29tcG9uZW50Ll9wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wb25lbnQuX3BlbmRpbmdDYWxsYmFja3MgPSBbY2FsbGJhY2tdO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEVucXVldWUgYSBjYWxsYmFjayB0byBiZSBydW4gYXQgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBiYXRjaGluZyBjeWNsZS4gVGhyb3dzXG4gKiBpZiBubyB1cGRhdGVzIGFyZSBjdXJyZW50bHkgYmVpbmcgcGVyZm9ybWVkLlxuICovXG5mdW5jdGlvbiBhc2FwKGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyxcbiAgICAnUmVhY3RVcGRhdGVzLmFzYXA6IENhblxcJ3QgZW5xdWV1ZSBhbiBhc2FwIGNhbGxiYWNrIGluIGEgY29udGV4dCB3aGVyZScgK1xuICAgICd1cGRhdGVzIGFyZSBub3QgYmVpbmcgYmF0Y2hlZC4nXG4gICkgOiBpbnZhcmlhbnQoYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcykpO1xuICBhc2FwQ2FsbGJhY2tRdWV1ZS5lbnF1ZXVlKGNhbGxiYWNrLCBjb250ZXh0KTtcbiAgYXNhcEVucXVldWVkID0gdHJ1ZTtcbn1cblxudmFyIFJlYWN0VXBkYXRlc0luamVjdGlvbiA9IHtcbiAgaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb246IGZ1bmN0aW9uKFJlY29uY2lsZVRyYW5zYWN0aW9uKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIFJlY29uY2lsZVRyYW5zYWN0aW9uLFxuICAgICAgJ1JlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGEgcmVjb25jaWxlIHRyYW5zYWN0aW9uIGNsYXNzJ1xuICAgICkgOiBpbnZhcmlhbnQoUmVjb25jaWxlVHJhbnNhY3Rpb24pKTtcbiAgICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiA9IFJlY29uY2lsZVRyYW5zYWN0aW9uO1xuICB9LFxuXG4gIGluamVjdEJhdGNoaW5nU3RyYXRlZ3k6IGZ1bmN0aW9uKF9iYXRjaGluZ1N0cmF0ZWd5KSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIF9iYXRjaGluZ1N0cmF0ZWd5LFxuICAgICAgJ1JlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGEgYmF0Y2hpbmcgc3RyYXRlZ3knXG4gICAgKSA6IGludmFyaWFudChfYmF0Y2hpbmdTdHJhdGVneSkpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgX2JhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMgPT09ICdmdW5jdGlvbicsXG4gICAgICAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYSBiYXRjaGVkVXBkYXRlcygpIGZ1bmN0aW9uJ1xuICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIF9iYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzID09PSAnZnVuY3Rpb24nKSk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHR5cGVvZiBfYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyA9PT0gJ2Jvb2xlYW4nLFxuICAgICAgJ1JlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGFuIGlzQmF0Y2hpbmdVcGRhdGVzIGJvb2xlYW4gYXR0cmlidXRlJ1xuICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIF9iYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID09PSAnYm9vbGVhbicpKTtcbiAgICBiYXRjaGluZ1N0cmF0ZWd5ID0gX2JhdGNoaW5nU3RyYXRlZ3k7XG4gIH1cbn07XG5cbnZhciBSZWFjdFVwZGF0ZXMgPSB7XG4gIC8qKlxuICAgKiBSZWFjdCByZWZlcmVuY2VzIGBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uYCB1c2luZyB0aGlzIHByb3BlcnR5IGluIG9yZGVyXG4gICAqIHRvIGFsbG93IGRlcGVuZGVuY3kgaW5qZWN0aW9uLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb246IG51bGwsXG5cbiAgYmF0Y2hlZFVwZGF0ZXM6IGJhdGNoZWRVcGRhdGVzLFxuICBlbnF1ZXVlVXBkYXRlOiBlbnF1ZXVlVXBkYXRlLFxuICBmbHVzaEJhdGNoZWRVcGRhdGVzOiBmbHVzaEJhdGNoZWRVcGRhdGVzLFxuICBpbmplY3Rpb246IFJlYWN0VXBkYXRlc0luamVjdGlvbixcbiAgYXNhcDogYXNhcFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFVwZGF0ZXM7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3RVcGRhdGVzLmpzXG4gKiogbW9kdWxlIGlkID0gMTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlbXB0eUZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbihhcmcpIHsgcmV0dXJuIGFyZzsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL2VtcHR5RnVuY3Rpb24uanNcbiAqKiBtb2R1bGUgaWQgPSAxM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGtleU9mXG4gKi9cblxuLyoqXG4gKiBBbGxvd3MgZXh0cmFjdGlvbiBvZiBhIG1pbmlmaWVkIGtleS4gTGV0J3MgdGhlIGJ1aWxkIHN5c3RlbSBtaW5pZnkga2V5c1xuICogd2l0aG91dCBsb29zaW5nIHRoZSBhYmlsaXR5IHRvIGR5bmFtaWNhbGx5IHVzZSBrZXkgc3RyaW5ncyBhcyB2YWx1ZXNcbiAqIHRoZW1zZWx2ZXMuIFBhc3MgaW4gYW4gb2JqZWN0IHdpdGggYSBzaW5nbGUga2V5L3ZhbCBwYWlyIGFuZCBpdCB3aWxsIHJldHVyblxuICogeW91IHRoZSBzdHJpbmcga2V5IG9mIHRoYXQgc2luZ2xlIHJlY29yZC4gU3VwcG9zZSB5b3Ugd2FudCB0byBncmFiIHRoZVxuICogdmFsdWUgZm9yIGEga2V5ICdjbGFzc05hbWUnIGluc2lkZSBvZiBhbiBvYmplY3QuIEtleS92YWwgbWluaWZpY2F0aW9uIG1heVxuICogaGF2ZSBhbGlhc2VkIHRoYXQga2V5IHRvIGJlICd4YTEyJy4ga2V5T2Yoe2NsYXNzTmFtZTogbnVsbH0pIHdpbGwgcmV0dXJuXG4gKiAneGExMicgaW4gdGhhdCBjYXNlLiBSZXNvbHZlIGtleXMgeW91IHdhbnQgdG8gdXNlIG9uY2UgYXQgc3RhcnR1cCB0aW1lLCB0aGVuXG4gKiByZXVzZSB0aG9zZSByZXNvbHV0aW9ucy5cbiAqL1xudmFyIGtleU9mID0gZnVuY3Rpb24ob25lS2V5T2JqKSB7XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIG9uZUtleU9iaikge1xuICAgIGlmICghb25lS2V5T2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleU9mO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL2tleU9mLmpzXG4gKiogbW9kdWxlIGlkID0gMTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBQb29sZWRDbGFzc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIFN0YXRpYyBwb29sZXJzLiBTZXZlcmFsIGN1c3RvbSB2ZXJzaW9ucyBmb3IgZWFjaCBwb3RlbnRpYWwgbnVtYmVyIG9mXG4gKiBhcmd1bWVudHMuIEEgY29tcGxldGVseSBnZW5lcmljIHBvb2xlciBpcyBlYXN5IHRvIGltcGxlbWVudCwgYnV0IHdvdWxkXG4gKiByZXF1aXJlIGFjY2Vzc2luZyB0aGUgYGFyZ3VtZW50c2Agb2JqZWN0LiBJbiBlYWNoIG9mIHRoZXNlLCBgdGhpc2AgcmVmZXJzIHRvXG4gKiB0aGUgQ2xhc3MgaXRzZWxmLCBub3QgYW4gaW5zdGFuY2UuIElmIGFueSBvdGhlcnMgYXJlIG5lZWRlZCwgc2ltcGx5IGFkZCB0aGVtXG4gKiBoZXJlLCBvciBpbiB0aGVpciBvd24gZmlsZXMuXG4gKi9cbnZhciBvbmVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGNvcHlGaWVsZHNGcm9tKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGNvcHlGaWVsZHNGcm9tKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhjb3B5RmllbGRzRnJvbSk7XG4gIH1cbn07XG5cbnZhciB0d29Bcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMikge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMik7XG4gIH1cbn07XG5cbnZhciB0aHJlZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oYTEsIGEyLCBhMykge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzKTtcbiAgfVxufTtcblxudmFyIGZpdmVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzLCBhNCwgYTUpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gIH1cbn07XG5cbnZhciBzdGFuZGFyZFJlbGVhc2VyID0gZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBpbnN0YW5jZSBpbnN0YW5jZW9mIEtsYXNzLFxuICAgICdUcnlpbmcgdG8gcmVsZWFzZSBhbiBpbnN0YW5jZSBpbnRvIGEgcG9vbCBvZiBhIGRpZmZlcmVudCB0eXBlLidcbiAgKSA6IGludmFyaWFudChpbnN0YW5jZSBpbnN0YW5jZW9mIEtsYXNzKSk7XG4gIGlmIChpbnN0YW5jZS5kZXN0cnVjdG9yKSB7XG4gICAgaW5zdGFuY2UuZGVzdHJ1Y3RvcigpO1xuICB9XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoIDwgS2xhc3MucG9vbFNpemUpIHtcbiAgICBLbGFzcy5pbnN0YW5jZVBvb2wucHVzaChpbnN0YW5jZSk7XG4gIH1cbn07XG5cbnZhciBERUZBVUxUX1BPT0xfU0laRSA9IDEwO1xudmFyIERFRkFVTFRfUE9PTEVSID0gb25lQXJndW1lbnRQb29sZXI7XG5cbi8qKlxuICogQXVnbWVudHMgYENvcHlDb25zdHJ1Y3RvcmAgdG8gYmUgYSBwb29sYWJsZSBjbGFzcywgYXVnbWVudGluZyBvbmx5IHRoZSBjbGFzc1xuICogaXRzZWxmIChzdGF0aWNhbGx5KSBub3QgYWRkaW5nIGFueSBwcm90b3R5cGljYWwgZmllbGRzLiBBbnkgQ29weUNvbnN0cnVjdG9yXG4gKiB5b3UgZ2l2ZSB0aGlzIG1heSBoYXZlIGEgYHBvb2xTaXplYCBwcm9wZXJ0eSwgYW5kIHdpbGwgbG9vayBmb3IgYVxuICogcHJvdG90eXBpY2FsIGBkZXN0cnVjdG9yYCBvbiBpbnN0YW5jZXMgKG9wdGlvbmFsKS5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBDb3B5Q29uc3RydWN0b3IgQ29uc3RydWN0b3IgdGhhdCBjYW4gYmUgdXNlZCB0byByZXNldC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBvb2xlciBDdXN0b21pemFibGUgcG9vbGVyLlxuICovXG52YXIgYWRkUG9vbGluZ1RvID0gZnVuY3Rpb24oQ29weUNvbnN0cnVjdG9yLCBwb29sZXIpIHtcbiAgdmFyIE5ld0tsYXNzID0gQ29weUNvbnN0cnVjdG9yO1xuICBOZXdLbGFzcy5pbnN0YW5jZVBvb2wgPSBbXTtcbiAgTmV3S2xhc3MuZ2V0UG9vbGVkID0gcG9vbGVyIHx8IERFRkFVTFRfUE9PTEVSO1xuICBpZiAoIU5ld0tsYXNzLnBvb2xTaXplKSB7XG4gICAgTmV3S2xhc3MucG9vbFNpemUgPSBERUZBVUxUX1BPT0xfU0laRTtcbiAgfVxuICBOZXdLbGFzcy5yZWxlYXNlID0gc3RhbmRhcmRSZWxlYXNlcjtcbiAgcmV0dXJuIE5ld0tsYXNzO1xufTtcblxudmFyIFBvb2xlZENsYXNzID0ge1xuICBhZGRQb29saW5nVG86IGFkZFBvb2xpbmdUbyxcbiAgb25lQXJndW1lbnRQb29sZXI6IG9uZUFyZ3VtZW50UG9vbGVyLFxuICB0d29Bcmd1bWVudFBvb2xlcjogdHdvQXJndW1lbnRQb29sZXIsXG4gIHRocmVlQXJndW1lbnRQb29sZXI6IHRocmVlQXJndW1lbnRQb29sZXIsXG4gIGZpdmVBcmd1bWVudFBvb2xlcjogZml2ZUFyZ3VtZW50UG9vbGVyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvb2xlZENsYXNzO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1Bvb2xlZENsYXNzLmpzXG4gKiogbW9kdWxlIGlkID0gMTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRWYWxpZGF0b3JcIik7XG52YXIgUmVhY3RMZWdhY3lFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RMZWdhY3lFbGVtZW50XCIpO1xuXG52YXIgbWFwT2JqZWN0ID0gcmVxdWlyZShcIi4vbWFwT2JqZWN0XCIpO1xuXG4vKipcbiAqIENyZWF0ZSBhIGZhY3RvcnkgdGhhdCBjcmVhdGVzIEhUTUwgdGFnIGVsZW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGFnIG5hbWUgKGUuZy4gYGRpdmApLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRE9NRmFjdG9yeSh0YWcpIHtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIHJldHVybiBSZWFjdExlZ2FjeUVsZW1lbnQubWFya05vbkxlZ2FjeUZhY3RvcnkoXG4gICAgICBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeSh0YWcpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gUmVhY3RMZWdhY3lFbGVtZW50Lm1hcmtOb25MZWdhY3lGYWN0b3J5KFxuICAgIFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KHRhZylcbiAgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwcGluZyBmcm9tIHN1cHBvcnRlZCBIVE1MIHRhZ3MgdG8gYFJlYWN0RE9NQ29tcG9uZW50YCBjbGFzc2VzLlxuICogVGhpcyBpcyBhbHNvIGFjY2Vzc2libGUgdmlhIGBSZWFjdC5ET01gLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xudmFyIFJlYWN0RE9NID0gbWFwT2JqZWN0KHtcbiAgYTogJ2EnLFxuICBhYmJyOiAnYWJicicsXG4gIGFkZHJlc3M6ICdhZGRyZXNzJyxcbiAgYXJlYTogJ2FyZWEnLFxuICBhcnRpY2xlOiAnYXJ0aWNsZScsXG4gIGFzaWRlOiAnYXNpZGUnLFxuICBhdWRpbzogJ2F1ZGlvJyxcbiAgYjogJ2InLFxuICBiYXNlOiAnYmFzZScsXG4gIGJkaTogJ2JkaScsXG4gIGJkbzogJ2JkbycsXG4gIGJpZzogJ2JpZycsXG4gIGJsb2NrcXVvdGU6ICdibG9ja3F1b3RlJyxcbiAgYm9keTogJ2JvZHknLFxuICBicjogJ2JyJyxcbiAgYnV0dG9uOiAnYnV0dG9uJyxcbiAgY2FudmFzOiAnY2FudmFzJyxcbiAgY2FwdGlvbjogJ2NhcHRpb24nLFxuICBjaXRlOiAnY2l0ZScsXG4gIGNvZGU6ICdjb2RlJyxcbiAgY29sOiAnY29sJyxcbiAgY29sZ3JvdXA6ICdjb2xncm91cCcsXG4gIGRhdGE6ICdkYXRhJyxcbiAgZGF0YWxpc3Q6ICdkYXRhbGlzdCcsXG4gIGRkOiAnZGQnLFxuICBkZWw6ICdkZWwnLFxuICBkZXRhaWxzOiAnZGV0YWlscycsXG4gIGRmbjogJ2RmbicsXG4gIGRpYWxvZzogJ2RpYWxvZycsXG4gIGRpdjogJ2RpdicsXG4gIGRsOiAnZGwnLFxuICBkdDogJ2R0JyxcbiAgZW06ICdlbScsXG4gIGVtYmVkOiAnZW1iZWQnLFxuICBmaWVsZHNldDogJ2ZpZWxkc2V0JyxcbiAgZmlnY2FwdGlvbjogJ2ZpZ2NhcHRpb24nLFxuICBmaWd1cmU6ICdmaWd1cmUnLFxuICBmb290ZXI6ICdmb290ZXInLFxuICBmb3JtOiAnZm9ybScsXG4gIGgxOiAnaDEnLFxuICBoMjogJ2gyJyxcbiAgaDM6ICdoMycsXG4gIGg0OiAnaDQnLFxuICBoNTogJ2g1JyxcbiAgaDY6ICdoNicsXG4gIGhlYWQ6ICdoZWFkJyxcbiAgaGVhZGVyOiAnaGVhZGVyJyxcbiAgaHI6ICdocicsXG4gIGh0bWw6ICdodG1sJyxcbiAgaTogJ2knLFxuICBpZnJhbWU6ICdpZnJhbWUnLFxuICBpbWc6ICdpbWcnLFxuICBpbnB1dDogJ2lucHV0JyxcbiAgaW5zOiAnaW5zJyxcbiAga2JkOiAna2JkJyxcbiAga2V5Z2VuOiAna2V5Z2VuJyxcbiAgbGFiZWw6ICdsYWJlbCcsXG4gIGxlZ2VuZDogJ2xlZ2VuZCcsXG4gIGxpOiAnbGknLFxuICBsaW5rOiAnbGluaycsXG4gIG1haW46ICdtYWluJyxcbiAgbWFwOiAnbWFwJyxcbiAgbWFyazogJ21hcmsnLFxuICBtZW51OiAnbWVudScsXG4gIG1lbnVpdGVtOiAnbWVudWl0ZW0nLFxuICBtZXRhOiAnbWV0YScsXG4gIG1ldGVyOiAnbWV0ZXInLFxuICBuYXY6ICduYXYnLFxuICBub3NjcmlwdDogJ25vc2NyaXB0JyxcbiAgb2JqZWN0OiAnb2JqZWN0JyxcbiAgb2w6ICdvbCcsXG4gIG9wdGdyb3VwOiAnb3B0Z3JvdXAnLFxuICBvcHRpb246ICdvcHRpb24nLFxuICBvdXRwdXQ6ICdvdXRwdXQnLFxuICBwOiAncCcsXG4gIHBhcmFtOiAncGFyYW0nLFxuICBwaWN0dXJlOiAncGljdHVyZScsXG4gIHByZTogJ3ByZScsXG4gIHByb2dyZXNzOiAncHJvZ3Jlc3MnLFxuICBxOiAncScsXG4gIHJwOiAncnAnLFxuICBydDogJ3J0JyxcbiAgcnVieTogJ3J1YnknLFxuICBzOiAncycsXG4gIHNhbXA6ICdzYW1wJyxcbiAgc2NyaXB0OiAnc2NyaXB0JyxcbiAgc2VjdGlvbjogJ3NlY3Rpb24nLFxuICBzZWxlY3Q6ICdzZWxlY3QnLFxuICBzbWFsbDogJ3NtYWxsJyxcbiAgc291cmNlOiAnc291cmNlJyxcbiAgc3BhbjogJ3NwYW4nLFxuICBzdHJvbmc6ICdzdHJvbmcnLFxuICBzdHlsZTogJ3N0eWxlJyxcbiAgc3ViOiAnc3ViJyxcbiAgc3VtbWFyeTogJ3N1bW1hcnknLFxuICBzdXA6ICdzdXAnLFxuICB0YWJsZTogJ3RhYmxlJyxcbiAgdGJvZHk6ICd0Ym9keScsXG4gIHRkOiAndGQnLFxuICB0ZXh0YXJlYTogJ3RleHRhcmVhJyxcbiAgdGZvb3Q6ICd0Zm9vdCcsXG4gIHRoOiAndGgnLFxuICB0aGVhZDogJ3RoZWFkJyxcbiAgdGltZTogJ3RpbWUnLFxuICB0aXRsZTogJ3RpdGxlJyxcbiAgdHI6ICd0cicsXG4gIHRyYWNrOiAndHJhY2snLFxuICB1OiAndScsXG4gIHVsOiAndWwnLFxuICAndmFyJzogJ3ZhcicsXG4gIHZpZGVvOiAndmlkZW8nLFxuICB3YnI6ICd3YnInLFxuXG4gIC8vIFNWR1xuICBjaXJjbGU6ICdjaXJjbGUnLFxuICBkZWZzOiAnZGVmcycsXG4gIGVsbGlwc2U6ICdlbGxpcHNlJyxcbiAgZzogJ2cnLFxuICBsaW5lOiAnbGluZScsXG4gIGxpbmVhckdyYWRpZW50OiAnbGluZWFyR3JhZGllbnQnLFxuICBtYXNrOiAnbWFzaycsXG4gIHBhdGg6ICdwYXRoJyxcbiAgcGF0dGVybjogJ3BhdHRlcm4nLFxuICBwb2x5Z29uOiAncG9seWdvbicsXG4gIHBvbHlsaW5lOiAncG9seWxpbmUnLFxuICByYWRpYWxHcmFkaWVudDogJ3JhZGlhbEdyYWRpZW50JyxcbiAgcmVjdDogJ3JlY3QnLFxuICBzdG9wOiAnc3RvcCcsXG4gIHN2ZzogJ3N2ZycsXG4gIHRleHQ6ICd0ZXh0JyxcbiAgdHNwYW46ICd0c3BhbidcblxufSwgY3JlYXRlRE9NRmFjdG9yeSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET007XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3RET00uanNcbiAqKiBtb2R1bGUgaWQgPSAxNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERPTVByb3BlcnR5XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbi8qanNsaW50IGJpdHdpc2U6IHRydWUgKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbmZ1bmN0aW9uIGNoZWNrTWFzayh2YWx1ZSwgYml0bWFzaykge1xuICByZXR1cm4gKHZhbHVlICYgYml0bWFzaykgPT09IGJpdG1hc2s7XG59XG5cbnZhciBET01Qcm9wZXJ0eUluamVjdGlvbiA9IHtcbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBub3JtYWxpemVkLCBjYW1lbGNhc2VkIHByb3BlcnR5IG5hbWVzIHRvIGEgY29uZmlndXJhdGlvbiB0aGF0XG4gICAqIHNwZWNpZmllcyBob3cgdGhlIGFzc29jaWF0ZWQgRE9NIHByb3BlcnR5IHNob3VsZCBiZSBhY2Nlc3NlZCBvciByZW5kZXJlZC5cbiAgICovXG4gIE1VU1RfVVNFX0FUVFJJQlVURTogMHgxLFxuICBNVVNUX1VTRV9QUk9QRVJUWTogMHgyLFxuICBIQVNfU0lERV9FRkZFQ1RTOiAweDQsXG4gIEhBU19CT09MRUFOX1ZBTFVFOiAweDgsXG4gIEhBU19OVU1FUklDX1ZBTFVFOiAweDEwLFxuICBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRTogMHgyMCB8IDB4MTAsXG4gIEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU6IDB4NDAsXG5cbiAgLyoqXG4gICAqIEluamVjdCBzb21lIHNwZWNpYWxpemVkIGtub3dsZWRnZSBhYm91dCB0aGUgRE9NLiBUaGlzIHRha2VzIGEgY29uZmlnIG9iamVjdFxuICAgKiB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogaXNDdXN0b21BdHRyaWJ1dGU6IGZ1bmN0aW9uIHRoYXQgZ2l2ZW4gYW4gYXR0cmlidXRlIG5hbWUgd2lsbCByZXR1cm4gdHJ1ZVxuICAgKiBpZiBpdCBjYW4gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NIHZlcmJhdGltLiBVc2VmdWwgZm9yIGRhdGEtKiBvciBhcmlhLSpcbiAgICogYXR0cmlidXRlcyB3aGVyZSBpdCdzIGltcG9zc2libGUgdG8gZW51bWVyYXRlIGFsbCBvZiB0aGUgcG9zc2libGVcbiAgICogYXR0cmlidXRlIG5hbWVzLFxuICAgKlxuICAgKiBQcm9wZXJ0aWVzOiBvYmplY3QgbWFwcGluZyBET00gcHJvcGVydHkgbmFtZSB0byBvbmUgb2YgdGhlXG4gICAqIERPTVByb3BlcnR5SW5qZWN0aW9uIGNvbnN0YW50cyBvciBudWxsLiBJZiB5b3VyIGF0dHJpYnV0ZSBpc24ndCBpbiBoZXJlLFxuICAgKiBpdCB3b24ndCBnZXQgd3JpdHRlbiB0byB0aGUgRE9NLlxuICAgKlxuICAgKiBET01BdHRyaWJ1dGVOYW1lczogb2JqZWN0IG1hcHBpbmcgUmVhY3QgYXR0cmlidXRlIG5hbWUgdG8gdGhlIERPTVxuICAgKiBhdHRyaWJ1dGUgbmFtZS4gQXR0cmlidXRlIG5hbWVzIG5vdCBzcGVjaWZpZWQgdXNlIHRoZSAqKmxvd2VyY2FzZSoqXG4gICAqIG5vcm1hbGl6ZWQgbmFtZS5cbiAgICpcbiAgICogRE9NUHJvcGVydHlOYW1lczogc2ltaWxhciB0byBET01BdHRyaWJ1dGVOYW1lcyBidXQgZm9yIERPTSBwcm9wZXJ0aWVzLlxuICAgKiBQcm9wZXJ0eSBuYW1lcyBub3Qgc3BlY2lmaWVkIHVzZSB0aGUgbm9ybWFsaXplZCBuYW1lLlxuICAgKlxuICAgKiBET01NdXRhdGlvbk1ldGhvZHM6IFByb3BlcnRpZXMgdGhhdCByZXF1aXJlIHNwZWNpYWwgbXV0YXRpb24gbWV0aG9kcy4gSWZcbiAgICogYHZhbHVlYCBpcyB1bmRlZmluZWQsIHRoZSBtdXRhdGlvbiBtZXRob2Qgc2hvdWxkIHVuc2V0IHRoZSBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGRvbVByb3BlcnR5Q29uZmlnIHRoZSBjb25maWcgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgKi9cbiAgaW5qZWN0RE9NUHJvcGVydHlDb25maWc6IGZ1bmN0aW9uKGRvbVByb3BlcnR5Q29uZmlnKSB7XG4gICAgdmFyIFByb3BlcnRpZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5Qcm9wZXJ0aWVzIHx8IHt9O1xuICAgIHZhciBET01BdHRyaWJ1dGVOYW1lcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTUF0dHJpYnV0ZU5hbWVzIHx8IHt9O1xuICAgIHZhciBET01Qcm9wZXJ0eU5hbWVzID0gZG9tUHJvcGVydHlDb25maWcuRE9NUHJvcGVydHlOYW1lcyB8fCB7fTtcbiAgICB2YXIgRE9NTXV0YXRpb25NZXRob2RzID0gZG9tUHJvcGVydHlDb25maWcuRE9NTXV0YXRpb25NZXRob2RzIHx8IHt9O1xuXG4gICAgaWYgKGRvbVByb3BlcnR5Q29uZmlnLmlzQ3VzdG9tQXR0cmlidXRlKSB7XG4gICAgICBET01Qcm9wZXJ0eS5faXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnMucHVzaChcbiAgICAgICAgZG9tUHJvcGVydHlDb25maWcuaXNDdXN0b21BdHRyaWJ1dGVcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gUHJvcGVydGllcykge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgIURPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KHByb3BOYW1lKSxcbiAgICAgICAgJ2luamVjdERPTVByb3BlcnR5Q29uZmlnKC4uLik6IFlvdVxcJ3JlIHRyeWluZyB0byBpbmplY3QgRE9NIHByb3BlcnR5ICcgK1xuICAgICAgICAnXFwnJXNcXCcgd2hpY2ggaGFzIGFscmVhZHkgYmVlbiBpbmplY3RlZC4gWW91IG1heSBiZSBhY2NpZGVudGFsbHkgJyArXG4gICAgICAgICdpbmplY3RpbmcgdGhlIHNhbWUgRE9NIHByb3BlcnR5IGNvbmZpZyB0d2ljZSwgb3IgeW91IG1heSBiZSAnICtcbiAgICAgICAgJ2luamVjdGluZyB0d28gY29uZmlncyB0aGF0IGhhdmUgY29uZmxpY3RpbmcgcHJvcGVydHkgbmFtZXMuJyxcbiAgICAgICAgcHJvcE5hbWVcbiAgICAgICkgOiBpbnZhcmlhbnQoIURPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkpO1xuXG4gICAgICBET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZVtwcm9wTmFtZV0gPSB0cnVlO1xuXG4gICAgICB2YXIgbG93ZXJDYXNlZCA9IHByb3BOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVtsb3dlckNhc2VkXSA9IHByb3BOYW1lO1xuXG4gICAgICBpZiAoRE9NQXR0cmlidXRlTmFtZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gRE9NQXR0cmlidXRlTmFtZXNbcHJvcE5hbWVdO1xuICAgICAgICBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVthdHRyaWJ1dGVOYW1lXSA9IHByb3BOYW1lO1xuICAgICAgICBET01Qcm9wZXJ0eS5nZXRBdHRyaWJ1dGVOYW1lW3Byb3BOYW1lXSA9IGF0dHJpYnV0ZU5hbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBET01Qcm9wZXJ0eS5nZXRBdHRyaWJ1dGVOYW1lW3Byb3BOYW1lXSA9IGxvd2VyQ2FzZWQ7XG4gICAgICB9XG5cbiAgICAgIERPTVByb3BlcnR5LmdldFByb3BlcnR5TmFtZVtwcm9wTmFtZV0gPVxuICAgICAgICBET01Qcm9wZXJ0eU5hbWVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSA/XG4gICAgICAgICAgRE9NUHJvcGVydHlOYW1lc1twcm9wTmFtZV0gOlxuICAgICAgICAgIHByb3BOYW1lO1xuXG4gICAgICBpZiAoRE9NTXV0YXRpb25NZXRob2RzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBET01Qcm9wZXJ0eS5nZXRNdXRhdGlvbk1ldGhvZFtwcm9wTmFtZV0gPSBET01NdXRhdGlvbk1ldGhvZHNbcHJvcE5hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0TXV0YXRpb25NZXRob2RbcHJvcE5hbWVdID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb3BDb25maWcgPSBQcm9wZXJ0aWVzW3Byb3BOYW1lXTtcbiAgICAgIERPTVByb3BlcnR5Lm11c3RVc2VBdHRyaWJ1dGVbcHJvcE5hbWVdID1cbiAgICAgICAgY2hlY2tNYXNrKHByb3BDb25maWcsIERPTVByb3BlcnR5SW5qZWN0aW9uLk1VU1RfVVNFX0FUVFJJQlVURSk7XG4gICAgICBET01Qcm9wZXJ0eS5tdXN0VXNlUHJvcGVydHlbcHJvcE5hbWVdID1cbiAgICAgICAgY2hlY2tNYXNrKHByb3BDb25maWcsIERPTVByb3BlcnR5SW5qZWN0aW9uLk1VU1RfVVNFX1BST1BFUlRZKTtcbiAgICAgIERPTVByb3BlcnR5Lmhhc1NpZGVFZmZlY3RzW3Byb3BOYW1lXSA9XG4gICAgICAgIGNoZWNrTWFzayhwcm9wQ29uZmlnLCBET01Qcm9wZXJ0eUluamVjdGlvbi5IQVNfU0lERV9FRkZFQ1RTKTtcbiAgICAgIERPTVByb3BlcnR5Lmhhc0Jvb2xlYW5WYWx1ZVtwcm9wTmFtZV0gPVxuICAgICAgICBjaGVja01hc2socHJvcENvbmZpZywgRE9NUHJvcGVydHlJbmplY3Rpb24uSEFTX0JPT0xFQU5fVkFMVUUpO1xuICAgICAgRE9NUHJvcGVydHkuaGFzTnVtZXJpY1ZhbHVlW3Byb3BOYW1lXSA9XG4gICAgICAgIGNoZWNrTWFzayhwcm9wQ29uZmlnLCBET01Qcm9wZXJ0eUluamVjdGlvbi5IQVNfTlVNRVJJQ19WQUxVRSk7XG4gICAgICBET01Qcm9wZXJ0eS5oYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZVtwcm9wTmFtZV0gPVxuICAgICAgICBjaGVja01hc2socHJvcENvbmZpZywgRE9NUHJvcGVydHlJbmplY3Rpb24uSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUpO1xuICAgICAgRE9NUHJvcGVydHkuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZVtwcm9wTmFtZV0gPVxuICAgICAgICBjaGVja01hc2socHJvcENvbmZpZywgRE9NUHJvcGVydHlJbmplY3Rpb24uSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSk7XG5cbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICFET01Qcm9wZXJ0eS5tdXN0VXNlQXR0cmlidXRlW3Byb3BOYW1lXSB8fFxuICAgICAgICAgICFET01Qcm9wZXJ0eS5tdXN0VXNlUHJvcGVydHlbcHJvcE5hbWVdLFxuICAgICAgICAnRE9NUHJvcGVydHk6IENhbm5vdCByZXF1aXJlIHVzaW5nIGJvdGggYXR0cmlidXRlIGFuZCBwcm9wZXJ0eTogJXMnLFxuICAgICAgICBwcm9wTmFtZVxuICAgICAgKSA6IGludmFyaWFudCghRE9NUHJvcGVydHkubXVzdFVzZUF0dHJpYnV0ZVtwcm9wTmFtZV0gfHxcbiAgICAgICAgIURPTVByb3BlcnR5Lm11c3RVc2VQcm9wZXJ0eVtwcm9wTmFtZV0pKTtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIERPTVByb3BlcnR5Lm11c3RVc2VQcm9wZXJ0eVtwcm9wTmFtZV0gfHxcbiAgICAgICAgICAhRE9NUHJvcGVydHkuaGFzU2lkZUVmZmVjdHNbcHJvcE5hbWVdLFxuICAgICAgICAnRE9NUHJvcGVydHk6IFByb3BlcnRpZXMgdGhhdCBoYXZlIHNpZGUgZWZmZWN0cyBtdXN0IHVzZSBwcm9wZXJ0eTogJXMnLFxuICAgICAgICBwcm9wTmFtZVxuICAgICAgKSA6IGludmFyaWFudChET01Qcm9wZXJ0eS5tdXN0VXNlUHJvcGVydHlbcHJvcE5hbWVdIHx8XG4gICAgICAgICFET01Qcm9wZXJ0eS5oYXNTaWRlRWZmZWN0c1twcm9wTmFtZV0pKTtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICEhRE9NUHJvcGVydHkuaGFzQm9vbGVhblZhbHVlW3Byb3BOYW1lXSArXG4gICAgICAgICAgISFET01Qcm9wZXJ0eS5oYXNOdW1lcmljVmFsdWVbcHJvcE5hbWVdICtcbiAgICAgICAgICAhIURPTVByb3BlcnR5Lmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWVbcHJvcE5hbWVdIDw9IDEsXG4gICAgICAgICdET01Qcm9wZXJ0eTogVmFsdWUgY2FuIGJlIG9uZSBvZiBib29sZWFuLCBvdmVybG9hZGVkIGJvb2xlYW4sIG9yICcgK1xuICAgICAgICAnbnVtZXJpYyB2YWx1ZSwgYnV0IG5vdCBhIGNvbWJpbmF0aW9uOiAlcycsXG4gICAgICAgIHByb3BOYW1lXG4gICAgICApIDogaW52YXJpYW50KCEhRE9NUHJvcGVydHkuaGFzQm9vbGVhblZhbHVlW3Byb3BOYW1lXSArXG4gICAgICAgICEhRE9NUHJvcGVydHkuaGFzTnVtZXJpY1ZhbHVlW3Byb3BOYW1lXSArXG4gICAgICAgICEhRE9NUHJvcGVydHkuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZVtwcm9wTmFtZV0gPD0gMSkpO1xuICAgIH1cbiAgfVxufTtcbnZhciBkZWZhdWx0VmFsdWVDYWNoZSA9IHt9O1xuXG4vKipcbiAqIERPTVByb3BlcnR5IGV4cG9ydHMgbG9va3VwIG9iamVjdHMgdGhhdCBjYW4gYmUgdXNlZCBsaWtlIGZ1bmN0aW9uczpcbiAqXG4gKiAgID4gRE9NUHJvcGVydHkuaXNWYWxpZFsnaWQnXVxuICogICB0cnVlXG4gKiAgID4gRE9NUHJvcGVydHkuaXNWYWxpZFsnZm9vYmFyJ11cbiAqICAgdW5kZWZpbmVkXG4gKlxuICogQWx0aG91Z2ggdGhpcyBtYXkgYmUgY29uZnVzaW5nLCBpdCBwZXJmb3JtcyBiZXR0ZXIgaW4gZ2VuZXJhbC5cbiAqXG4gKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2tleS1leGlzdHNcbiAqIEBzZWUgaHR0cDovL2pzcGVyZi5jb20va2V5LW1pc3NpbmdcbiAqL1xudmFyIERPTVByb3BlcnR5ID0ge1xuXG4gIElEX0FUVFJJQlVURV9OQU1FOiAnZGF0YS1yZWFjdGlkJyxcblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgYSBwcm9wZXJ0eSBuYW1lIGlzIGEgc3RhbmRhcmQgcHJvcGVydHkuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBpc1N0YW5kYXJkTmFtZToge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBsb3dlcmNhc2UgcHJvcGVydHkgbmFtZXMgdG8gdGhlIHByb3Blcmx5IGNhc2VkIHZlcnNpb24sIHVzZWRcbiAgICogdG8gd2FybiBpbiB0aGUgY2FzZSBvZiBtaXNzaW5nIHByb3BlcnRpZXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBnZXRQb3NzaWJsZVN0YW5kYXJkTmFtZToge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBub3JtYWxpemVkIG5hbWVzIHRvIGF0dHJpYnV0ZSBuYW1lcyB0aGF0IGRpZmZlci4gQXR0cmlidXRlXG4gICAqIG5hbWVzIGFyZSB1c2VkIHdoZW4gcmVuZGVyaW5nIG1hcmt1cCBvciB3aXRoIGAqQXR0cmlidXRlKClgLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0QXR0cmlidXRlTmFtZToge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBub3JtYWxpemVkIG5hbWVzIHRvIHByb3BlcnRpZXMgb24gRE9NIG5vZGUgaW5zdGFuY2VzLlxuICAgKiAoVGhpcyBpbmNsdWRlcyBwcm9wZXJ0aWVzIHRoYXQgbXV0YXRlIGR1ZSB0byBleHRlcm5hbCBmYWN0b3JzLilcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGdldFByb3BlcnR5TmFtZToge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBub3JtYWxpemVkIG5hbWVzIHRvIG11dGF0aW9uIG1ldGhvZHMuIFRoaXMgd2lsbCBvbmx5IGV4aXN0IGlmXG4gICAqIG11dGF0aW9uIGNhbm5vdCBiZSBzZXQgc2ltcGx5IGJ5IHRoZSBwcm9wZXJ0eSBvciBgc2V0QXR0cmlidXRlKClgLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0TXV0YXRpb25NZXRob2Q6IHt9LFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIGFjY2Vzc2VkIGFuZCBtdXRhdGVkIGFzIGFuIG9iamVjdCBwcm9wZXJ0eS5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIG11c3RVc2VBdHRyaWJ1dGU6IHt9LFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIGFjY2Vzc2VkIGFuZCBtdXRhdGVkIHVzaW5nIGAqQXR0cmlidXRlKClgLlxuICAgKiAoVGhpcyBpbmNsdWRlcyBhbnl0aGluZyB0aGF0IGZhaWxzIGA8cHJvcE5hbWU+IGluIDxlbGVtZW50PmAuKVxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgbXVzdFVzZVByb3BlcnR5OiB7fSxcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3Qgc2V0dGluZyBhIHZhbHVlIGNhdXNlcyBzaWRlIGVmZmVjdHMgc3VjaCBhcyB0cmlnZ2VyaW5nXG4gICAqIHJlc291cmNlcyB0byBiZSBsb2FkZWQgb3IgdGV4dCBzZWxlY3Rpb24gY2hhbmdlcy4gV2UgbXVzdCBlbnN1cmUgdGhhdFxuICAgKiB0aGUgdmFsdWUgaXMgb25seSBzZXQgaWYgaXQgaGFzIGNoYW5nZWQuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBoYXNTaWRlRWZmZWN0czoge30sXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHByb3BlcnR5IHNob3VsZCBiZSByZW1vdmVkIHdoZW4gc2V0IHRvIGEgZmFsc2V5IHZhbHVlLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgaGFzQm9vbGVhblZhbHVlOiB7fSxcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBudW1lcmljIG9yIHBhcnNlIGFzIGFcbiAgICogbnVtZXJpYyBhbmQgc2hvdWxkIGJlIHJlbW92ZWQgd2hlbiBzZXQgdG8gYSBmYWxzZXkgdmFsdWUuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBoYXNOdW1lcmljVmFsdWU6IHt9LFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIHBvc2l0aXZlIG51bWVyaWMgb3IgcGFyc2UgYXMgYSBwb3NpdGl2ZVxuICAgKiBudW1lcmljIGFuZCBzaG91bGQgYmUgcmVtb3ZlZCB3aGVuIHNldCB0byBhIGZhbHNleSB2YWx1ZS5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlOiB7fSxcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgcHJvcGVydHkgY2FuIGJlIHVzZWQgYXMgYSBmbGFnIGFzIHdlbGwgYXMgd2l0aCBhIHZhbHVlLiBSZW1vdmVkXG4gICAqIHdoZW4gc3RyaWN0bHkgZXF1YWwgdG8gZmFsc2U7IHByZXNlbnQgd2l0aG91dCBhIHZhbHVlIHdoZW4gc3RyaWN0bHkgZXF1YWxcbiAgICogdG8gdHJ1ZTsgcHJlc2VudCB3aXRoIGEgdmFsdWUgb3RoZXJ3aXNlLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZToge30sXG5cbiAgLyoqXG4gICAqIEFsbCBvZiB0aGUgaXNDdXN0b21BdHRyaWJ1dGUoKSBmdW5jdGlvbnMgdGhhdCBoYXZlIGJlZW4gaW5qZWN0ZWQuXG4gICAqL1xuICBfaXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnM6IFtdLFxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBhIHByb3BlcnR5IG5hbWUgaXMgYSBjdXN0b20gYXR0cmlidXRlLlxuICAgKiBAbWV0aG9kXG4gICAqL1xuICBpc0N1c3RvbUF0dHJpYnV0ZTogZnVuY3Rpb24oYXR0cmlidXRlTmFtZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXNDdXN0b21BdHRyaWJ1dGVGbiA9IERPTVByb3BlcnR5Ll9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9uc1tpXTtcbiAgICAgIGlmIChpc0N1c3RvbUF0dHJpYnV0ZUZuKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRlZmF1bHQgcHJvcGVydHkgdmFsdWUgZm9yIGEgRE9NIHByb3BlcnR5IChpLmUuLCBub3QgYW5cbiAgICogYXR0cmlidXRlKS4gTW9zdCBkZWZhdWx0IHZhbHVlcyBhcmUgJycgb3IgZmFsc2UsIGJ1dCBub3QgYWxsLiBXb3JzZSB5ZXQsXG4gICAqIHNvbWUgKGluIHBhcnRpY3VsYXIsIGB0eXBlYCkgdmFyeSBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2YgZWxlbWVudC5cbiAgICpcbiAgICogVE9ETzogSXMgaXQgYmV0dGVyIHRvIGdyYWIgYWxsIHRoZSBwb3NzaWJsZSBwcm9wZXJ0aWVzIHdoZW4gY3JlYXRpbmcgYW5cbiAgICogZWxlbWVudCB0byBhdm9pZCBoYXZpbmcgdG8gY3JlYXRlIHRoZSBzYW1lIGVsZW1lbnQgdHdpY2U/XG4gICAqL1xuICBnZXREZWZhdWx0VmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24obm9kZU5hbWUsIHByb3ApIHtcbiAgICB2YXIgbm9kZURlZmF1bHRzID0gZGVmYXVsdFZhbHVlQ2FjaGVbbm9kZU5hbWVdO1xuICAgIHZhciB0ZXN0RWxlbWVudDtcbiAgICBpZiAoIW5vZGVEZWZhdWx0cykge1xuICAgICAgZGVmYXVsdFZhbHVlQ2FjaGVbbm9kZU5hbWVdID0gbm9kZURlZmF1bHRzID0ge307XG4gICAgfVxuICAgIGlmICghKHByb3AgaW4gbm9kZURlZmF1bHRzKSkge1xuICAgICAgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5vZGVOYW1lKTtcbiAgICAgIG5vZGVEZWZhdWx0c1twcm9wXSA9IHRlc3RFbGVtZW50W3Byb3BdO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZURlZmF1bHRzW3Byb3BdO1xuICB9LFxuXG4gIGluamVjdGlvbjogRE9NUHJvcGVydHlJbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NUHJvcGVydHk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvRE9NUHJvcGVydHkuanNcbiAqKiBtb2R1bGUgaWQgPSAxN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q3VycmVudE93bmVyXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gKlxuICogVGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIGNvbXBvbmVudCB3aG8gc2hvdWxkIG93biBhbnkgY29tcG9uZW50cyB0aGF0IGFyZVxuICogY3VycmVudGx5IGJlaW5nIGNvbnN0cnVjdGVkLlxuICpcbiAqIFRoZSBkZXB0aCBpbmRpY2F0ZSBob3cgbWFueSBjb21wb3NpdGUgY29tcG9uZW50cyBhcmUgYWJvdmUgdGhpcyByZW5kZXIgbGV2ZWwuXG4gKi9cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEB0eXBlIHtSZWFjdENvbXBvbmVudH1cbiAgICovXG4gIGN1cnJlbnQ6IG51bGxcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEN1cnJlbnRPd25lcjtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9SZWFjdEN1cnJlbnRPd25lci5qc1xuICoqIG1vZHVsZSBpZCA9IDE4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcbnZhciBnZXRFdmVudFRhcmdldCA9IHJlcXVpcmUoXCIuL2dldEV2ZW50VGFyZ2V0XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHR5cGU6IG51bGwsXG4gIHRhcmdldDogZ2V0RXZlbnRUYXJnZXQsXG4gIC8vIGN1cnJlbnRUYXJnZXQgaXMgc2V0IHdoZW4gZGlzcGF0Y2hpbmc7IG5vIHVzZSBpbiBjb3B5aW5nIGl0IGhlcmVcbiAgY3VycmVudFRhcmdldDogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwsXG4gIGV2ZW50UGhhc2U6IG51bGwsXG4gIGJ1YmJsZXM6IG51bGwsXG4gIGNhbmNlbGFibGU6IG51bGwsXG4gIHRpbWVTdGFtcDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG4gIH0sXG4gIGRlZmF1bHRQcmV2ZW50ZWQ6IG51bGwsXG4gIGlzVHJ1c3RlZDogbnVsbFxufTtcblxuLyoqXG4gKiBTeW50aGV0aWMgZXZlbnRzIGFyZSBkaXNwYXRjaGVkIGJ5IGV2ZW50IHBsdWdpbnMsIHR5cGljYWxseSBpbiByZXNwb25zZSB0byBhXG4gKiB0b3AtbGV2ZWwgZXZlbnQgZGVsZWdhdGlvbiBoYW5kbGVyLlxuICpcbiAqIFRoZXNlIHN5c3RlbXMgc2hvdWxkIGdlbmVyYWxseSB1c2UgcG9vbGluZyB0byByZWR1Y2UgdGhlIGZyZXF1ZW5jeSBvZiBnYXJiYWdlXG4gKiBjb2xsZWN0aW9uLiBUaGUgc3lzdGVtIHNob3VsZCBjaGVjayBgaXNQZXJzaXN0ZW50YCB0byBkZXRlcm1pbmUgd2hldGhlciB0aGVcbiAqIGV2ZW50IHNob3VsZCBiZSByZWxlYXNlZCBpbnRvIHRoZSBwb29sIGFmdGVyIGJlaW5nIGRpc3BhdGNoZWQuIFVzZXJzIHRoYXRcbiAqIG5lZWQgYSBwZXJzaXN0ZWQgZXZlbnQgc2hvdWxkIGludm9rZSBgcGVyc2lzdGAuXG4gKlxuICogU3ludGhldGljIGV2ZW50cyAoYW5kIHN1YmNsYXNzZXMpIGltcGxlbWVudCB0aGUgRE9NIExldmVsIDMgRXZlbnRzIEFQSSBieVxuICogbm9ybWFsaXppbmcgYnJvd3NlciBxdWlya3MuIFN1YmNsYXNzZXMgZG8gbm90IG5lY2Vzc2FyaWx5IGhhdmUgdG8gaW1wbGVtZW50IGFcbiAqIERPTSBpbnRlcmZhY2U7IGN1c3RvbSBhcHBsaWNhdGlvbi1zcGVjaWZpYyBldmVudHMgY2FuIGFsc28gc3ViY2xhc3MgdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0V2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcbiAgdGhpcy5kaXNwYXRjaENvbmZpZyA9IGRpc3BhdGNoQ29uZmlnO1xuICB0aGlzLmRpc3BhdGNoTWFya2VyID0gZGlzcGF0Y2hNYXJrZXI7XG4gIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcblxuICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG4gIGZvciAodmFyIHByb3BOYW1lIGluIEludGVyZmFjZSkge1xuICAgIGlmICghSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBub3JtYWxpemUgPSBJbnRlcmZhY2VbcHJvcE5hbWVdO1xuICAgIGlmIChub3JtYWxpemUpIHtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gbm9ybWFsaXplKG5hdGl2ZUV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpc1twcm9wTmFtZV0gPSBuYXRpdmVFdmVudFtwcm9wTmFtZV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkICE9IG51bGwgP1xuICAgIG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgOlxuICAgIG5hdGl2ZUV2ZW50LnJldHVyblZhbHVlID09PSBmYWxzZTtcbiAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlO1xuICB9XG4gIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2U7XG59XG5cbmFzc2lnbihTeW50aGV0aWNFdmVudC5wcm90b3R5cGUsIHtcblxuICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID8gZXZlbnQucHJldmVudERlZmF1bHQoKSA6IGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuICAgIHZhciBldmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uID8gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkgOiBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogV2UgcmVsZWFzZSBhbGwgZGlzcGF0Y2hlZCBgU3ludGhldGljRXZlbnRgcyBhZnRlciBlYWNoIGV2ZW50IGxvb3AsIGFkZGluZ1xuICAgKiB0aGVtIGJhY2sgaW50byB0aGUgcG9vbC4gVGhpcyBhbGxvd3MgYSB3YXkgdG8gaG9sZCBvbnRvIGEgcmVmZXJlbmNlIHRoYXRcbiAgICogd29uJ3QgYmUgYWRkZWQgYmFjayBpbnRvIHRoZSBwb29sLlxuICAgKi9cbiAgcGVyc2lzdDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pc1BlcnNpc3RlbnQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgZXZlbnQgc2hvdWxkIGJlIHJlbGVhc2VkIGJhY2sgaW50byB0aGUgcG9vbC5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGlzIHNob3VsZCBub3QgYmUgcmVsZWFzZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGlzUGVyc2lzdGVudDogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlLFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciBgZGVzdHJ1Y3RvcmAgb24gZWFjaCBpbnN0YW5jZSBpdCByZWxlYXNlcy5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBJbnRlcmZhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBJbnRlcmZhY2UpIHtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5kaXNwYXRjaENvbmZpZyA9IG51bGw7XG4gICAgdGhpcy5kaXNwYXRjaE1hcmtlciA9IG51bGw7XG4gICAgdGhpcy5uYXRpdmVFdmVudCA9IG51bGw7XG4gIH1cblxufSk7XG5cblN5bnRoZXRpY0V2ZW50LkludGVyZmFjZSA9IEV2ZW50SW50ZXJmYWNlO1xuXG4vKipcbiAqIEhlbHBlciB0byByZWR1Y2UgYm9pbGVycGxhdGUgd2hlbiBjcmVhdGluZyBzdWJjbGFzc2VzLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IENsYXNzXG4gKiBAcGFyYW0gez9vYmplY3R9IEludGVyZmFjZVxuICovXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MgPSBmdW5jdGlvbihDbGFzcywgSW50ZXJmYWNlKSB7XG4gIHZhciBTdXBlciA9IHRoaXM7XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgYXNzaWduKHByb3RvdHlwZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgQ2xhc3MucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDbGFzcztcblxuICBDbGFzcy5JbnRlcmZhY2UgPSBhc3NpZ24oe30sIFN1cGVyLkludGVyZmFjZSwgSW50ZXJmYWNlKTtcbiAgQ2xhc3MuYXVnbWVudENsYXNzID0gU3VwZXIuYXVnbWVudENsYXNzO1xuXG4gIFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhDbGFzcywgUG9vbGVkQ2xhc3MudGhyZWVBcmd1bWVudFBvb2xlcik7XG59O1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oU3ludGhldGljRXZlbnQsIFBvb2xlZENsYXNzLnRocmVlQXJndW1lbnRQb29sZXIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0V2ZW50O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1N5bnRoZXRpY0V2ZW50LmpzXG4gKiogbW9kdWxlIGlkID0gMTlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBET01Qcm9wZXJ0eU9wZXJhdGlvbnNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpO1xuXG52YXIgZXNjYXBlVGV4dEZvckJyb3dzZXIgPSByZXF1aXJlKFwiLi9lc2NhcGVUZXh0Rm9yQnJvd3NlclwiKTtcbnZhciBtZW1vaXplU3RyaW5nT25seSA9IHJlcXVpcmUoXCIuL21lbW9pemVTdHJpbmdPbmx5XCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG5mdW5jdGlvbiBzaG91bGRJZ25vcmVWYWx1ZShuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCB8fFxuICAgIChET01Qcm9wZXJ0eS5oYXNCb29sZWFuVmFsdWVbbmFtZV0gJiYgIXZhbHVlKSB8fFxuICAgIChET01Qcm9wZXJ0eS5oYXNOdW1lcmljVmFsdWVbbmFtZV0gJiYgaXNOYU4odmFsdWUpKSB8fFxuICAgIChET01Qcm9wZXJ0eS5oYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZVtuYW1lXSAmJiAodmFsdWUgPCAxKSkgfHxcbiAgICAoRE9NUHJvcGVydHkuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZVtuYW1lXSAmJiB2YWx1ZSA9PT0gZmFsc2UpO1xufVxuXG52YXIgcHJvY2Vzc0F0dHJpYnV0ZU5hbWVBbmRQcmVmaXggPSBtZW1vaXplU3RyaW5nT25seShmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiBlc2NhcGVUZXh0Rm9yQnJvd3NlcihuYW1lKSArICc9XCInO1xufSk7XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgdmFyIHJlYWN0UHJvcHMgPSB7XG4gICAgY2hpbGRyZW46IHRydWUsXG4gICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHRydWUsXG4gICAga2V5OiB0cnVlLFxuICAgIHJlZjogdHJ1ZVxuICB9O1xuICB2YXIgd2FybmVkUHJvcGVydGllcyA9IHt9O1xuXG4gIHZhciB3YXJuVW5rbm93blByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGlmIChyZWFjdFByb3BzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHJlYWN0UHJvcHNbbmFtZV0gfHxcbiAgICAgICAgd2FybmVkUHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkUHJvcGVydGllc1tuYW1lXSA9IHRydWU7XG4gICAgdmFyIGxvd2VyQ2FzZWROYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gZGF0YS0qIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIGxvd2VyY2FzZTsgc3VnZ2VzdCB0aGUgbG93ZXJjYXNlIHZlcnNpb25cbiAgICB2YXIgc3RhbmRhcmROYW1lID0gKFxuICAgICAgRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobG93ZXJDYXNlZE5hbWUpID9cbiAgICAgICAgbG93ZXJDYXNlZE5hbWUgOlxuICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWUuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpID9cbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbbG93ZXJDYXNlZE5hbWVdIDpcbiAgICAgICAgbnVsbFxuICAgICk7XG5cbiAgICAvLyBGb3Igbm93LCBvbmx5IHdhcm4gd2hlbiB3ZSBoYXZlIGEgc3VnZ2VzdGVkIGNvcnJlY3Rpb24uIFRoaXMgcHJldmVudHNcbiAgICAvLyBsb2dnaW5nIHRvbyBtdWNoIHdoZW4gdXNpbmcgdHJhbnNmZXJQcm9wc1RvLlxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgc3RhbmRhcmROYW1lID09IG51bGwsXG4gICAgICAnVW5rbm93biBET00gcHJvcGVydHkgJyArIG5hbWUgKyAnLiBEaWQgeW91IG1lYW4gJyArIHN0YW5kYXJkTmFtZSArICc/J1xuICAgICkgOiBudWxsKTtcblxuICB9O1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIGRlYWxpbmcgd2l0aCBET00gcHJvcGVydGllcy5cbiAqL1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHtcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIHRoZSBJRCBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFVuZXNjYXBlZCBJRC5cbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgc3RyaW5nLlxuICAgKi9cbiAgY3JlYXRlTWFya3VwRm9ySUQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgcmV0dXJuIHByb2Nlc3NBdHRyaWJ1dGVOYW1lQW5kUHJlZml4KERPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FKSArXG4gICAgICBlc2NhcGVUZXh0Rm9yQnJvd3NlcihpZCkgKyAnXCInO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgYSBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBNYXJrdXAgc3RyaW5nLCBvciBudWxsIGlmIHRoZSBwcm9wZXJ0eSB3YXMgaW52YWxpZC5cbiAgICovXG4gIGNyZWF0ZU1hcmt1cEZvclByb3BlcnR5OiBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxuICAgICAgICBET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZVtuYW1lXSkge1xuICAgICAgaWYgKHNob3VsZElnbm9yZVZhbHVlKG5hbWUsIHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IERPTVByb3BlcnR5LmdldEF0dHJpYnV0ZU5hbWVbbmFtZV07XG4gICAgICBpZiAoRE9NUHJvcGVydHkuaGFzQm9vbGVhblZhbHVlW25hbWVdIHx8XG4gICAgICAgICAgKERPTVByb3BlcnR5Lmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWVbbmFtZV0gJiYgdmFsdWUgPT09IHRydWUpKSB7XG4gICAgICAgIHJldHVybiBlc2NhcGVUZXh0Rm9yQnJvd3NlcihhdHRyaWJ1dGVOYW1lKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9jZXNzQXR0cmlidXRlTmFtZUFuZFByZWZpeChhdHRyaWJ1dGVOYW1lKSArXG4gICAgICAgIGVzY2FwZVRleHRGb3JCcm93c2VyKHZhbHVlKSArICdcIic7XG4gICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb2Nlc3NBdHRyaWJ1dGVOYW1lQW5kUHJlZml4KG5hbWUpICtcbiAgICAgICAgZXNjYXBlVGV4dEZvckJyb3dzZXIodmFsdWUpICsgJ1wiJztcbiAgICB9IGVsc2UgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgd2FyblVua25vd25Qcm9wZXJ0eShuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHZhbHVlIGZvciBhIHByb3BlcnR5IG9uIGEgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG4gIHNldFZhbHVlRm9yUHJvcGVydHk6IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KG5hbWUpICYmXG4gICAgICAgIERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lW25hbWVdKSB7XG4gICAgICB2YXIgbXV0YXRpb25NZXRob2QgPSBET01Qcm9wZXJ0eS5nZXRNdXRhdGlvbk1ldGhvZFtuYW1lXTtcbiAgICAgIGlmIChtdXRhdGlvbk1ldGhvZCkge1xuICAgICAgICBtdXRhdGlvbk1ldGhvZChub2RlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHNob3VsZElnbm9yZVZhbHVlKG5hbWUsIHZhbHVlKSkge1xuICAgICAgICB0aGlzLmRlbGV0ZVZhbHVlRm9yUHJvcGVydHkobm9kZSwgbmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKERPTVByb3BlcnR5Lm11c3RVc2VBdHRyaWJ1dGVbbmFtZV0pIHtcbiAgICAgICAgLy8gYHNldEF0dHJpYnV0ZWAgd2l0aCBvYmplY3RzIGJlY29tZXMgb25seSBgW29iamVjdF1gIGluIElFOC85LFxuICAgICAgICAvLyAoJycgKyB2YWx1ZSkgbWFrZXMgaXQgb3V0cHV0IHRoZSBjb3JyZWN0IHRvU3RyaW5nKCktdmFsdWUuXG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKERPTVByb3BlcnR5LmdldEF0dHJpYnV0ZU5hbWVbbmFtZV0sICcnICsgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHByb3BOYW1lID0gRE9NUHJvcGVydHkuZ2V0UHJvcGVydHlOYW1lW25hbWVdO1xuICAgICAgICAvLyBNdXN0IGV4cGxpY2l0bHkgY2FzdCB2YWx1ZXMgZm9yIEhBU19TSURFX0VGRkVDVFMtcHJvcGVydGllcyB0byB0aGVcbiAgICAgICAgLy8gcHJvcGVydHkgdHlwZSBiZWZvcmUgY29tcGFyaW5nOyBvbmx5IGB2YWx1ZWAgZG9lcyBhbmQgaXMgc3RyaW5nLlxuICAgICAgICBpZiAoIURPTVByb3BlcnR5Lmhhc1NpZGVFZmZlY3RzW25hbWVdIHx8XG4gICAgICAgICAgICAoJycgKyBub2RlW3Byb3BOYW1lXSkgIT09ICgnJyArIHZhbHVlKSkge1xuICAgICAgICAgIC8vIENvbnRyYXJ5IHRvIGBzZXRBdHRyaWJ1dGVgLCBvYmplY3QgcHJvcGVydGllcyBhcmUgcHJvcGVybHlcbiAgICAgICAgICAvLyBgdG9TdHJpbmdgZWQgYnkgSUU4LzkuXG4gICAgICAgICAgbm9kZVtwcm9wTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgJycgKyB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHdhcm5Vbmtub3duUHJvcGVydHkobmFtZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEZWxldGVzIHRoZSB2YWx1ZSBmb3IgYSBwcm9wZXJ0eSBvbiBhIG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKi9cbiAgZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICAgIGlmIChET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxuICAgICAgICBET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZVtuYW1lXSkge1xuICAgICAgdmFyIG11dGF0aW9uTWV0aG9kID0gRE9NUHJvcGVydHkuZ2V0TXV0YXRpb25NZXRob2RbbmFtZV07XG4gICAgICBpZiAobXV0YXRpb25NZXRob2QpIHtcbiAgICAgICAgbXV0YXRpb25NZXRob2Qobm9kZSwgdW5kZWZpbmVkKTtcbiAgICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkubXVzdFVzZUF0dHJpYnV0ZVtuYW1lXSkge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShET01Qcm9wZXJ0eS5nZXRBdHRyaWJ1dGVOYW1lW25hbWVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IERPTVByb3BlcnR5LmdldFByb3BlcnR5TmFtZVtuYW1lXTtcbiAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IERPTVByb3BlcnR5LmdldERlZmF1bHRWYWx1ZUZvclByb3BlcnR5KFxuICAgICAgICAgIG5vZGUubm9kZU5hbWUsXG4gICAgICAgICAgcHJvcE5hbWVcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKCFET01Qcm9wZXJ0eS5oYXNTaWRlRWZmZWN0c1tuYW1lXSB8fFxuICAgICAgICAgICAgKCcnICsgbm9kZVtwcm9wTmFtZV0pICE9PSBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICBub2RlW3Byb3BOYW1lXSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIH0gZWxzZSBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB3YXJuVW5rbm93blByb3BlcnR5KG5hbWUpO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTVByb3BlcnR5T3BlcmF0aW9ucztcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnMuanNcbiAqKiBtb2R1bGUgaWQgPSAyMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV2ZW50UHJvcGFnYXRvcnNcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpbkh1YlwiKTtcblxudmFyIGFjY3VtdWxhdGVJbnRvID0gcmVxdWlyZShcIi4vYWNjdW11bGF0ZUludG9cIik7XG52YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gcmVxdWlyZShcIi4vZm9yRWFjaEFjY3VtdWxhdGVkXCIpO1xuXG52YXIgUHJvcGFnYXRpb25QaGFzZXMgPSBFdmVudENvbnN0YW50cy5Qcm9wYWdhdGlvblBoYXNlcztcbnZhciBnZXRMaXN0ZW5lciA9IEV2ZW50UGx1Z2luSHViLmdldExpc3RlbmVyO1xuXG4vKipcbiAqIFNvbWUgZXZlbnQgdHlwZXMgaGF2ZSBhIG5vdGlvbiBvZiBkaWZmZXJlbnQgcmVnaXN0cmF0aW9uIG5hbWVzIGZvciBkaWZmZXJlbnRcbiAqIFwicGhhc2VzXCIgb2YgcHJvcGFnYXRpb24uIFRoaXMgZmluZHMgbGlzdGVuZXJzIGJ5IGEgZ2l2ZW4gcGhhc2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RlbmVyQXRQaGFzZShpZCwgZXZlbnQsIHByb3BhZ2F0aW9uUGhhc2UpIHtcbiAgdmFyIHJlZ2lzdHJhdGlvbk5hbWUgPVxuICAgIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3Byb3BhZ2F0aW9uUGhhc2VdO1xuICByZXR1cm4gZ2V0TGlzdGVuZXIoaWQsIHJlZ2lzdHJhdGlvbk5hbWUpO1xufVxuXG4vKipcbiAqIFRhZ3MgYSBgU3ludGhldGljRXZlbnRgIHdpdGggZGlzcGF0Y2hlZCBsaXN0ZW5lcnMuIENyZWF0aW5nIHRoaXMgZnVuY3Rpb25cbiAqIGhlcmUsIGFsbG93cyB1cyB0byBub3QgaGF2ZSB0byBiaW5kIG9yIGNyZWF0ZSBmdW5jdGlvbnMgZm9yIGVhY2ggZXZlbnQuXG4gKiBNdXRhdGluZyB0aGUgZXZlbnQncyBtZW1iZXJzIGFsbG93cyB1cyB0byBub3QgaGF2ZSB0byBjcmVhdGUgYSB3cmFwcGluZ1xuICogXCJkaXNwYXRjaFwiIG9iamVjdCB0aGF0IHBhaXJzIHRoZSBldmVudCB3aXRoIHRoZSBsaXN0ZW5lci5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcyhkb21JRCwgdXB3YXJkcywgZXZlbnQpIHtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIGlmICghZG9tSUQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGlzcGF0Y2hpbmcgaWQgbXVzdCBub3QgYmUgbnVsbCcpO1xuICAgIH1cbiAgfVxuICB2YXIgcGhhc2UgPSB1cHdhcmRzID8gUHJvcGFnYXRpb25QaGFzZXMuYnViYmxlZCA6IFByb3BhZ2F0aW9uUGhhc2VzLmNhcHR1cmVkO1xuICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lckF0UGhhc2UoZG9tSUQsIGV2ZW50LCBwaGFzZSk7XG4gIGlmIChsaXN0ZW5lcikge1xuICAgIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9XG4gICAgICBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcbiAgICBldmVudC5fZGlzcGF0Y2hJRHMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hJRHMsIGRvbUlEKTtcbiAgfVxufVxuXG4vKipcbiAqIENvbGxlY3QgZGlzcGF0Y2hlcyAobXVzdCBiZSBlbnRpcmVseSBjb2xsZWN0ZWQgYmVmb3JlIGRpc3BhdGNoaW5nIC0gc2VlIHVuaXRcbiAqIHRlc3RzKS4gTGF6aWx5IGFsbG9jYXRlIHRoZSBhcnJheSB0byBjb25zZXJ2ZSBtZW1vcnkuICBXZSBtdXN0IGxvb3AgdGhyb3VnaFxuICogZWFjaCBldmVudCBhbmQgcGVyZm9ybSB0aGUgdHJhdmVyc2FsIGZvciBlYWNoIG9uZS4gV2UgY2FuIG5vdCBwZXJmb3JtIGFcbiAqIHNpbmdsZSB0cmF2ZXJzYWwgZm9yIHRoZSBlbnRpcmUgY29sbGVjdGlvbiBvZiBldmVudHMgYmVjYXVzZSBlYWNoIGV2ZW50IG1heVxuICogaGF2ZSBhIGRpZmZlcmVudCB0YXJnZXQuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgRXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmdldEluc3RhbmNlSGFuZGxlKCkudHJhdmVyc2VUd29QaGFzZShcbiAgICAgIGV2ZW50LmRpc3BhdGNoTWFya2VyLFxuICAgICAgYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcyxcbiAgICAgIGV2ZW50XG4gICAgKTtcbiAgfVxufVxuXG5cbi8qKlxuICogQWNjdW11bGF0ZXMgd2l0aG91dCByZWdhcmQgdG8gZGlyZWN0aW9uLCBkb2VzIG5vdCBsb29rIGZvciBwaGFzZWRcbiAqIHJlZ2lzdHJhdGlvbiBuYW1lcy4gU2FtZSBhcyBgYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGVgIGJ1dCB3aXRob3V0XG4gKiByZXF1aXJpbmcgdGhhdCB0aGUgYGRpc3BhdGNoTWFya2VyYCBiZSB0aGUgc2FtZSBhcyB0aGUgZGlzcGF0Y2hlZCBJRC5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZURpc3BhdGNoZXMoaWQsIGlnbm9yZWREaXJlY3Rpb24sIGV2ZW50KSB7XG4gIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgdmFyIHJlZ2lzdHJhdGlvbk5hbWUgPSBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lO1xuICAgIHZhciBsaXN0ZW5lciA9IGdldExpc3RlbmVyKGlkLCByZWdpc3RyYXRpb25OYW1lKTtcbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9XG4gICAgICAgIGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycywgbGlzdGVuZXIpO1xuICAgICAgZXZlbnQuX2Rpc3BhdGNoSURzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoSURzLCBpZCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjdW11bGF0ZXMgZGlzcGF0Y2hlcyBvbiBhbiBgU3ludGhldGljRXZlbnRgLCBidXQgb25seSBmb3IgdGhlXG4gKiBgZGlzcGF0Y2hNYXJrZXJgLlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnRcbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGUoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICBhY2N1bXVsYXRlRGlzcGF0Y2hlcyhldmVudC5kaXNwYXRjaE1hcmtlciwgbnVsbCwgZXZlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnRzKSB7XG4gIGZvckVhY2hBY2N1bXVsYXRlZChldmVudHMsIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUpO1xufVxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMobGVhdmUsIGVudGVyLCBmcm9tSUQsIHRvSUQpIHtcbiAgRXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmdldEluc3RhbmNlSGFuZGxlKCkudHJhdmVyc2VFbnRlckxlYXZlKFxuICAgIGZyb21JRCxcbiAgICB0b0lELFxuICAgIGFjY3VtdWxhdGVEaXNwYXRjaGVzLFxuICAgIGxlYXZlLFxuICAgIGVudGVyXG4gICk7XG59XG5cblxuZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMoZXZlbnRzKSB7XG4gIGZvckVhY2hBY2N1bXVsYXRlZChldmVudHMsIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlKTtcbn1cblxuXG5cbi8qKlxuICogQSBzbWFsbCBzZXQgb2YgcHJvcGFnYXRpb24gcGF0dGVybnMsIGVhY2ggb2Ygd2hpY2ggd2lsbCBhY2NlcHQgYSBzbWFsbCBhbW91bnRcbiAqIG9mIGluZm9ybWF0aW9uLCBhbmQgZ2VuZXJhdGUgYSBzZXQgb2YgXCJkaXNwYXRjaCByZWFkeSBldmVudCBvYmplY3RzXCIgLSB3aGljaFxuICogYXJlIHNldHMgb2YgZXZlbnRzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gYW5ub3RhdGVkIHdpdGggYSBzZXQgb2YgZGlzcGF0Y2hlZFxuICogbGlzdGVuZXIgZnVuY3Rpb25zL2lkcy4gVGhlIEFQSSBpcyBkZXNpZ25lZCB0aGlzIHdheSB0byBkaXNjb3VyYWdlIHRoZXNlXG4gKiBwcm9wYWdhdGlvbiBzdHJhdGVnaWVzIGZyb20gYWN0dWFsbHkgZXhlY3V0aW5nIHRoZSBkaXNwYXRjaGVzLCBzaW5jZSB3ZVxuICogYWx3YXlzIHdhbnQgdG8gY29sbGVjdCB0aGUgZW50aXJlIHNldCBvZiBkaXNwYXRjaGVzIGJlZm9yZSBleGVjdXRpbmcgZXZlbnQgYVxuICogc2luZ2xlIG9uZS5cbiAqXG4gKiBAY29uc3RydWN0b3IgRXZlbnRQcm9wYWdhdG9yc1xuICovXG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHtcbiAgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczogYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyxcbiAgYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXM6IGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzLFxuICBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6IGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlc1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFByb3BhZ2F0b3JzO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL0V2ZW50UHJvcGFnYXRvcnMuanNcbiAqKiBtb2R1bGUgaWQgPSAyMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlclxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpbkh1YlwiKTtcbnZhciBFdmVudFBsdWdpblJlZ2lzdHJ5ID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5SZWdpc3RyeVwiKTtcbnZhciBSZWFjdEV2ZW50RW1pdHRlck1peGluID0gcmVxdWlyZShcIi4vUmVhY3RFdmVudEVtaXR0ZXJNaXhpblwiKTtcbnZhciBWaWV3cG9ydE1ldHJpY3MgPSByZXF1aXJlKFwiLi9WaWV3cG9ydE1ldHJpY3NcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKFwiLi9pc0V2ZW50U3VwcG9ydGVkXCIpO1xuXG4vKipcbiAqIFN1bW1hcnkgb2YgYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgZXZlbnQgaGFuZGxpbmc6XG4gKlxuICogIC0gVG9wLWxldmVsIGRlbGVnYXRpb24gaXMgdXNlZCB0byB0cmFwIG1vc3QgbmF0aXZlIGJyb3dzZXIgZXZlbnRzLiBUaGlzXG4gKiAgICBtYXkgb25seSBvY2N1ciBpbiB0aGUgbWFpbiB0aHJlYWQgYW5kIGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZlxuICogICAgUmVhY3RFdmVudExpc3RlbmVyLCB3aGljaCBpcyBpbmplY3RlZCBhbmQgY2FuIHRoZXJlZm9yZSBzdXBwb3J0IHBsdWdnYWJsZVxuICogICAgZXZlbnQgc291cmNlcy4gVGhpcyBpcyB0aGUgb25seSB3b3JrIHRoYXQgb2NjdXJzIGluIHRoZSBtYWluIHRocmVhZC5cbiAqXG4gKiAgLSBXZSBub3JtYWxpemUgYW5kIGRlLWR1cGxpY2F0ZSBldmVudHMgdG8gYWNjb3VudCBmb3IgYnJvd3NlciBxdWlya3MuIFRoaXNcbiAqICAgIG1heSBiZSBkb25lIGluIHRoZSB3b3JrZXIgdGhyZWFkLlxuICpcbiAqICAtIEZvcndhcmQgdGhlc2UgbmF0aXZlIGV2ZW50cyAod2l0aCB0aGUgYXNzb2NpYXRlZCB0b3AtbGV2ZWwgdHlwZSB1c2VkIHRvXG4gKiAgICB0cmFwIGl0KSB0byBgRXZlbnRQbHVnaW5IdWJgLCB3aGljaCBpbiB0dXJuIHdpbGwgYXNrIHBsdWdpbnMgaWYgdGhleSB3YW50XG4gKiAgICB0byBleHRyYWN0IGFueSBzeW50aGV0aWMgZXZlbnRzLlxuICpcbiAqICAtIFRoZSBgRXZlbnRQbHVnaW5IdWJgIHdpbGwgdGhlbiBwcm9jZXNzIGVhY2ggZXZlbnQgYnkgYW5ub3RhdGluZyB0aGVtIHdpdGhcbiAqICAgIFwiZGlzcGF0Y2hlc1wiLCBhIHNlcXVlbmNlIG9mIGxpc3RlbmVycyBhbmQgSURzIHRoYXQgY2FyZSBhYm91dCB0aGF0IGV2ZW50LlxuICpcbiAqICAtIFRoZSBgRXZlbnRQbHVnaW5IdWJgIHRoZW4gZGlzcGF0Y2hlcyB0aGUgZXZlbnRzLlxuICpcbiAqIE92ZXJ2aWV3IG9mIFJlYWN0IGFuZCB0aGUgZXZlbnQgc3lzdGVtOlxuICpcbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqIHwgICAgRE9NICAgICB8ICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqICAgICAgIHwgICAgICAgICAgIC5cbiAqICAgICAgIHYgICAgICAgICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqIHwgUmVhY3RFdmVudCB8ICAgIC5cbiAqIHwgIExpc3RlbmVyICB8ICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogICAgICAgfCAgICAgICAgICAgLiAgICAgICAgICAgICAgICstLS0tLS0tLSt8U2ltcGxlRXZlbnR8XG4gKiAgICAgICB8ICAgICAgICAgICAuICAgICAgICAgICAgICAgfCAgICAgICAgIHxQbHVnaW4gICAgIHxcbiAqICstLS0tLXwtLS0tLS0rICAgIC4gICAgICAgICAgICAgICB2ICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58RXZlbnRQbHVnaW5IdWJ8ICAgICAgICAgICAgICAgICAgICB8ICAgIEV2ZW50ICAgfFxuICogfCAgICAgICAgICAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICArLS0tLS0tLS0tLS0rICB8IFByb3BhZ2F0b3JzfFxuICogfCBSZWFjdEV2ZW50IHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICB8VGFwRXZlbnQgICB8ICB8LS0tLS0tLS0tLS0tfFxuICogfCAgRW1pdHRlciAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8PC0tLSt8UGx1Z2luICAgICB8ICB8b3RoZXIgcGx1Z2lufFxuICogfCAgICAgICAgICAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICArLS0tLS0tLS0tLS0rICB8ICB1dGlsaXRpZXMgfFxuICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58ICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rXG4gKiArLS0tLS18LS0tLS0tKyAgICAuICAgICAgICAgICAgICAgIF4gICAgICAgICstLS0tLS0tLS0tLStcbiAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICAgfCAgICAgICAgfEVudGVyL0xlYXZlfFxuICogICAgICAgKyAgICAgICAgICAgLiAgICAgICAgICAgICAgICArLS0tLS0tLSt8UGx1Z2luICAgICB8XG4gKiArLS0tLS0tLS0tLS0tLSsgICAuICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLStcbiAqIHwgYXBwbGljYXRpb24gfCAgIC5cbiAqIHwtLS0tLS0tLS0tLS0tfCAgIC5cbiAqIHwgICAgICAgICAgICAgfCAgIC5cbiAqIHwgICAgICAgICAgICAgfCAgIC5cbiAqICstLS0tLS0tLS0tLS0tKyAgIC5cbiAqICAgICAgICAgICAgICAgICAgIC5cbiAqICAgIFJlYWN0IENvcmUgICAgIC4gIEdlbmVyYWwgUHVycG9zZSBFdmVudCBQbHVnaW4gU3lzdGVtXG4gKi9cblxudmFyIGFscmVhZHlMaXN0ZW5pbmdUbyA9IHt9O1xudmFyIGlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlID0gZmFsc2U7XG52YXIgcmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyID0gMDtcblxuLy8gRm9yIGV2ZW50cyBsaWtlICdzdWJtaXQnIHdoaWNoIGRvbid0IGNvbnNpc3RlbnRseSBidWJibGUgKHdoaWNoIHdlIHRyYXAgYXQgYVxuLy8gbG93ZXIgbm9kZSB0aGFuIGBkb2N1bWVudGApLCBiaW5kaW5nIGF0IGBkb2N1bWVudGAgd291bGQgY2F1c2UgZHVwbGljYXRlXG4vLyBldmVudHMgc28gd2UgZG9uJ3QgaW5jbHVkZSB0aGVtIGhlcmVcbnZhciB0b3BFdmVudE1hcHBpbmcgPSB7XG4gIHRvcEJsdXI6ICdibHVyJyxcbiAgdG9wQ2hhbmdlOiAnY2hhbmdlJyxcbiAgdG9wQ2xpY2s6ICdjbGljaycsXG4gIHRvcENvbXBvc2l0aW9uRW5kOiAnY29tcG9zaXRpb25lbmQnLFxuICB0b3BDb21wb3NpdGlvblN0YXJ0OiAnY29tcG9zaXRpb25zdGFydCcsXG4gIHRvcENvbXBvc2l0aW9uVXBkYXRlOiAnY29tcG9zaXRpb251cGRhdGUnLFxuICB0b3BDb250ZXh0TWVudTogJ2NvbnRleHRtZW51JyxcbiAgdG9wQ29weTogJ2NvcHknLFxuICB0b3BDdXQ6ICdjdXQnLFxuICB0b3BEb3VibGVDbGljazogJ2RibGNsaWNrJyxcbiAgdG9wRHJhZzogJ2RyYWcnLFxuICB0b3BEcmFnRW5kOiAnZHJhZ2VuZCcsXG4gIHRvcERyYWdFbnRlcjogJ2RyYWdlbnRlcicsXG4gIHRvcERyYWdFeGl0OiAnZHJhZ2V4aXQnLFxuICB0b3BEcmFnTGVhdmU6ICdkcmFnbGVhdmUnLFxuICB0b3BEcmFnT3ZlcjogJ2RyYWdvdmVyJyxcbiAgdG9wRHJhZ1N0YXJ0OiAnZHJhZ3N0YXJ0JyxcbiAgdG9wRHJvcDogJ2Ryb3AnLFxuICB0b3BGb2N1czogJ2ZvY3VzJyxcbiAgdG9wSW5wdXQ6ICdpbnB1dCcsXG4gIHRvcEtleURvd246ICdrZXlkb3duJyxcbiAgdG9wS2V5UHJlc3M6ICdrZXlwcmVzcycsXG4gIHRvcEtleVVwOiAna2V5dXAnLFxuICB0b3BNb3VzZURvd246ICdtb3VzZWRvd24nLFxuICB0b3BNb3VzZU1vdmU6ICdtb3VzZW1vdmUnLFxuICB0b3BNb3VzZU91dDogJ21vdXNlb3V0JyxcbiAgdG9wTW91c2VPdmVyOiAnbW91c2VvdmVyJyxcbiAgdG9wTW91c2VVcDogJ21vdXNldXAnLFxuICB0b3BQYXN0ZTogJ3Bhc3RlJyxcbiAgdG9wU2Nyb2xsOiAnc2Nyb2xsJyxcbiAgdG9wU2VsZWN0aW9uQ2hhbmdlOiAnc2VsZWN0aW9uY2hhbmdlJyxcbiAgdG9wVGV4dElucHV0OiAndGV4dElucHV0JyxcbiAgdG9wVG91Y2hDYW5jZWw6ICd0b3VjaGNhbmNlbCcsXG4gIHRvcFRvdWNoRW5kOiAndG91Y2hlbmQnLFxuICB0b3BUb3VjaE1vdmU6ICd0b3VjaG1vdmUnLFxuICB0b3BUb3VjaFN0YXJ0OiAndG91Y2hzdGFydCcsXG4gIHRvcFdoZWVsOiAnd2hlZWwnXG59O1xuXG4vKipcbiAqIFRvIGVuc3VyZSBubyBjb25mbGljdHMgd2l0aCBvdGhlciBwb3RlbnRpYWwgUmVhY3QgaW5zdGFuY2VzIG9uIHRoZSBwYWdlXG4gKi9cbnZhciB0b3BMaXN0ZW5lcnNJREtleSA9IFwiX3JlYWN0TGlzdGVuZXJzSURcIiArIFN0cmluZyhNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtcblxuZnVuY3Rpb24gZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQobW91bnRBdCkge1xuICAvLyBJbiBJRTgsIGBtb3VudEF0YCBpcyBhIGhvc3Qgb2JqZWN0IGFuZCBkb2Vzbid0IGhhdmUgYGhhc093blByb3BlcnR5YFxuICAvLyBkaXJlY3RseS5cbiAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW91bnRBdCwgdG9wTGlzdGVuZXJzSURLZXkpKSB7XG4gICAgbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV0gPSByZWFjdFRvcExpc3RlbmVyc0NvdW50ZXIrKztcbiAgICBhbHJlYWR5TGlzdGVuaW5nVG9bbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV1dID0ge307XG4gIH1cbiAgcmV0dXJuIGFscmVhZHlMaXN0ZW5pbmdUb1ttb3VudEF0W3RvcExpc3RlbmVyc0lES2V5XV07XG59XG5cbi8qKlxuICogYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgaXMgdXNlZCB0byBhdHRhY2ggdG9wLWxldmVsIGV2ZW50IGxpc3RlbmVycy4gRm9yXG4gKiBleGFtcGxlOlxuICpcbiAqICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnB1dExpc3RlbmVyKCdteUlEJywgJ29uQ2xpY2snLCBteUZ1bmN0aW9uKTtcbiAqXG4gKiBUaGlzIHdvdWxkIGFsbG9jYXRlIGEgXCJyZWdpc3RyYXRpb25cIiBvZiBgKCdvbkNsaWNrJywgbXlGdW5jdGlvbilgIG9uICdteUlEJy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IGFzc2lnbih7fSwgUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiwge1xuXG4gIC8qKlxuICAgKiBJbmplY3RhYmxlIGV2ZW50IGJhY2tlbmRcbiAgICovXG4gIFJlYWN0RXZlbnRMaXN0ZW5lcjogbnVsbCxcblxuICBpbmplY3Rpb246IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gUmVhY3RFdmVudExpc3RlbmVyXG4gICAgICovXG4gICAgaW5qZWN0UmVhY3RFdmVudExpc3RlbmVyOiBmdW5jdGlvbihSZWFjdEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5zZXRIYW5kbGVUb3BMZXZlbChcbiAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmhhbmRsZVRvcExldmVsXG4gICAgICApO1xuICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lciA9IFJlYWN0RXZlbnRMaXN0ZW5lcjtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgd2hldGhlciBvciBub3QgYW55IGNyZWF0ZWQgY2FsbGJhY2tzIHNob3VsZCBiZSBlbmFibGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWQgVHJ1ZSBpZiBjYWxsYmFja3Mgc2hvdWxkIGJlIGVuYWJsZWQuXG4gICAqL1xuICBzZXRFbmFibGVkOiBmdW5jdGlvbihlbmFibGVkKSB7XG4gICAgaWYgKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIuc2V0RW5hYmxlZChlbmFibGVkKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgY2FsbGJhY2tzIGFyZSBlbmFibGVkLlxuICAgKi9cbiAgaXNFbmFibGVkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gISEoXG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyICYmXG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLmlzRW5hYmxlZCgpXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogV2UgbGlzdGVuIGZvciBidWJibGVkIHRvdWNoIGV2ZW50cyBvbiB0aGUgZG9jdW1lbnQgb2JqZWN0LlxuICAgKlxuICAgKiBGaXJlZm94IHY4LjAxIChhbmQgcG9zc2libHkgb3RoZXJzKSBleGhpYml0ZWQgc3RyYW5nZSBiZWhhdmlvciB3aGVuXG4gICAqIG1vdW50aW5nIGBvbm1vdXNlbW92ZWAgZXZlbnRzIGF0IHNvbWUgbm9kZSB0aGF0IHdhcyBub3QgdGhlIGRvY3VtZW50XG4gICAqIGVsZW1lbnQuIFRoZSBzeW1wdG9tcyB3ZXJlIHRoYXQgaWYgeW91ciBtb3VzZSBpcyBub3QgbW92aW5nIG92ZXIgc29tZXRoaW5nXG4gICAqIGNvbnRhaW5lZCB3aXRoaW4gdGhhdCBtb3VudCBwb2ludCAoZm9yIGV4YW1wbGUgb24gdGhlIGJhY2tncm91bmQpIHRoZVxuICAgKiB0b3AtbGV2ZWwgbGlzdGVuZXJzIGZvciBgb25tb3VzZW1vdmVgIHdvbid0IGJlIGNhbGxlZC4gSG93ZXZlciwgaWYgeW91XG4gICAqIHJlZ2lzdGVyIHRoZSBgbW91c2Vtb3ZlYCBvbiB0aGUgZG9jdW1lbnQgb2JqZWN0LCB0aGVuIGl0IHdpbGwgb2YgY291cnNlXG4gICAqIGNhdGNoIGFsbCBgbW91c2Vtb3ZlYHMuIFRoaXMgYWxvbmcgd2l0aCBpT1MgcXVpcmtzLCBqdXN0aWZpZXMgcmVzdHJpY3RpbmdcbiAgICogdG9wLWxldmVsIGxpc3RlbmVycyB0byB0aGUgZG9jdW1lbnQgb2JqZWN0IG9ubHksIGF0IGxlYXN0IGZvciB0aGVzZVxuICAgKiBtb3ZlbWVudCB0eXBlcyBvZiBldmVudHMgYW5kIHBvc3NpYmx5IGFsbCBldmVudHMuXG4gICAqXG4gICAqIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTAvMDkvY2xpY2tfZXZlbnRfZGVsLmh0bWxcbiAgICpcbiAgICogQWxzbywgYGtleXVwYC9ga2V5cHJlc3NgL2BrZXlkb3duYCBkbyBub3QgYnViYmxlIHRvIHRoZSB3aW5kb3cgb24gSUUsIGJ1dFxuICAgKiB0aGV5IGJ1YmJsZSB0byBkb2N1bWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGVudERvY3VtZW50SGFuZGxlIERvY3VtZW50IHdoaWNoIG93bnMgdGhlIGNvbnRhaW5lclxuICAgKi9cbiAgbGlzdGVuVG86IGZ1bmN0aW9uKHJlZ2lzdHJhdGlvbk5hbWUsIGNvbnRlbnREb2N1bWVudEhhbmRsZSkge1xuICAgIHZhciBtb3VudEF0ID0gY29udGVudERvY3VtZW50SGFuZGxlO1xuICAgIHZhciBpc0xpc3RlbmluZyA9IGdldExpc3RlbmluZ0ZvckRvY3VtZW50KG1vdW50QXQpO1xuICAgIHZhciBkZXBlbmRlbmNpZXMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LlxuICAgICAgcmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXTtcblxuICAgIHZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGRlcGVuZGVuY2llcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBkZXBlbmRlbmN5ID0gZGVwZW5kZW5jaWVzW2ldO1xuICAgICAgaWYgKCEoXG4gICAgICAgICAgICBpc0xpc3RlbmluZy5oYXNPd25Qcm9wZXJ0eShkZXBlbmRlbmN5KSAmJlxuICAgICAgICAgICAgaXNMaXN0ZW5pbmdbZGVwZW5kZW5jeV1cbiAgICAgICAgICApKSB7XG4gICAgICAgIGlmIChkZXBlbmRlbmN5ID09PSB0b3BMZXZlbFR5cGVzLnRvcFdoZWVsKSB7XG4gICAgICAgICAgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ3doZWVsJykpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BXaGVlbCxcbiAgICAgICAgICAgICAgJ3doZWVsJyxcbiAgICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ21vdXNld2hlZWwnKSkge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcFdoZWVsLFxuICAgICAgICAgICAgICAnbW91c2V3aGVlbCcsXG4gICAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZpcmVmb3ggbmVlZHMgdG8gY2FwdHVyZSBhIGRpZmZlcmVudCBtb3VzZSBzY3JvbGwgZXZlbnQuXG4gICAgICAgICAgICAvLyBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvZG9tL2V2ZW50cy90ZXN0cy9zY3JvbGwuaHRtbFxuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcFdoZWVsLFxuICAgICAgICAgICAgICAnRE9NTW91c2VTY3JvbGwnLFxuICAgICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkZXBlbmRlbmN5ID09PSB0b3BMZXZlbFR5cGVzLnRvcFNjcm9sbCkge1xuXG4gICAgICAgICAgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ3Njcm9sbCcsIHRydWUpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcFNjcm9sbCxcbiAgICAgICAgICAgICAgJ3Njcm9sbCcsXG4gICAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BTY3JvbGwsXG4gICAgICAgICAgICAgICdzY3JvbGwnLFxuICAgICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLldJTkRPV19IQU5ETEVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wRm9jdXMgfHxcbiAgICAgICAgICAgIGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wQmx1cikge1xuXG4gICAgICAgICAgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ2ZvY3VzJywgdHJ1ZSkpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wRm9jdXMsXG4gICAgICAgICAgICAgICdmb2N1cycsXG4gICAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcEJsdXIsXG4gICAgICAgICAgICAgICdibHVyJyxcbiAgICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ2ZvY3VzaW4nKSkge1xuICAgICAgICAgICAgLy8gSUUgaGFzIGBmb2N1c2luYCBhbmQgYGZvY3Vzb3V0YCBldmVudHMgd2hpY2ggYnViYmxlLlxuICAgICAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAwOC8wNC9kZWxlZ2F0aW5nX3RoZS5odG1sXG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wRm9jdXMsXG4gICAgICAgICAgICAgICdmb2N1c2luJyxcbiAgICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgICAgICAgICAnZm9jdXNvdXQnLFxuICAgICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHRvIG1ha2Ugc3VyZSBibHVyIGFuZCBmb2N1cyBldmVudCBsaXN0ZW5lcnMgYXJlIG9ubHkgYXR0YWNoZWQgb25jZVxuICAgICAgICAgIGlzTGlzdGVuaW5nW3RvcExldmVsVHlwZXMudG9wQmx1cl0gPSB0cnVlO1xuICAgICAgICAgIGlzTGlzdGVuaW5nW3RvcExldmVsVHlwZXMudG9wRm9jdXNdID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0b3BFdmVudE1hcHBpbmcuaGFzT3duUHJvcGVydHkoZGVwZW5kZW5jeSkpIHtcbiAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICAgICAgICBkZXBlbmRlbmN5LFxuICAgICAgICAgICAgdG9wRXZlbnRNYXBwaW5nW2RlcGVuZGVuY3ldLFxuICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpc0xpc3RlbmluZ1tkZXBlbmRlbmN5XSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHRyYXBCdWJibGVkRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICByZXR1cm4gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgaGFuZGxlckJhc2VOYW1lLFxuICAgICAgaGFuZGxlXG4gICAgKTtcbiAgfSxcblxuICB0cmFwQ2FwdHVyZWRFdmVudDogZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSkge1xuICAgIHJldHVybiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgaGFuZGxlckJhc2VOYW1lLFxuICAgICAgaGFuZGxlXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogTGlzdGVucyB0byB3aW5kb3cgc2Nyb2xsIGFuZCByZXNpemUgZXZlbnRzLiBXZSBjYWNoZSBzY3JvbGwgdmFsdWVzIHNvIHRoYXRcbiAgICogYXBwbGljYXRpb24gY29kZSBjYW4gYWNjZXNzIHRoZW0gd2l0aG91dCB0cmlnZ2VyaW5nIHJlZmxvd3MuXG4gICAqXG4gICAqIE5PVEU6IFNjcm9sbCBldmVudHMgZG8gbm90IGJ1YmJsZS5cbiAgICpcbiAgICogQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2RvbS9ldmVudHMvc2Nyb2xsLmh0bWxcbiAgICovXG4gIGVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZzogZnVuY3Rpb24oKXtcbiAgICBpZiAoIWlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlKSB7XG4gICAgICB2YXIgcmVmcmVzaCA9IFZpZXdwb3J0TWV0cmljcy5yZWZyZXNoU2Nyb2xsVmFsdWVzO1xuICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5tb25pdG9yU2Nyb2xsVmFsdWUocmVmcmVzaCk7XG4gICAgICBpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSA9IHRydWU7XG4gICAgfVxuICB9LFxuXG4gIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczogRXZlbnRQbHVnaW5IdWIuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLFxuXG4gIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOiBFdmVudFBsdWdpbkh1Yi5yZWdpc3RyYXRpb25OYW1lTW9kdWxlcyxcblxuICBwdXRMaXN0ZW5lcjogRXZlbnRQbHVnaW5IdWIucHV0TGlzdGVuZXIsXG5cbiAgZ2V0TGlzdGVuZXI6IEV2ZW50UGx1Z2luSHViLmdldExpc3RlbmVyLFxuXG4gIGRlbGV0ZUxpc3RlbmVyOiBFdmVudFBsdWdpbkh1Yi5kZWxldGVMaXN0ZW5lcixcblxuICBkZWxldGVBbGxMaXN0ZW5lcnM6IEV2ZW50UGx1Z2luSHViLmRlbGV0ZUFsbExpc3RlbmVyc1xuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXI7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmpzXG4gKiogbW9kdWxlIGlkID0gMjJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvbmVudFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdE93bmVyXCIpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoXCIuL2tleU1pcnJvclwiKTtcblxuLyoqXG4gKiBFdmVyeSBSZWFjdCBjb21wb25lbnQgaXMgaW4gb25lIG9mIHRoZXNlIGxpZmUgY3ljbGVzLlxuICovXG52YXIgQ29tcG9uZW50TGlmZUN5Y2xlID0ga2V5TWlycm9yKHtcbiAgLyoqXG4gICAqIE1vdW50ZWQgY29tcG9uZW50cyBoYXZlIGEgRE9NIG5vZGUgcmVwcmVzZW50YXRpb24gYW5kIGFyZSBjYXBhYmxlIG9mXG4gICAqIHJlY2VpdmluZyBuZXcgcHJvcHMuXG4gICAqL1xuICBNT1VOVEVEOiBudWxsLFxuICAvKipcbiAgICogVW5tb3VudGVkIGNvbXBvbmVudHMgYXJlIGluYWN0aXZlIGFuZCBjYW5ub3QgcmVjZWl2ZSBuZXcgcHJvcHMuXG4gICAqL1xuICBVTk1PVU5URUQ6IG51bGxcbn0pO1xuXG52YXIgaW5qZWN0ZWQgPSBmYWxzZTtcblxuLyoqXG4gKiBPcHRpb25hbGx5IGluamVjdGFibGUgZW52aXJvbm1lbnQgZGVwZW5kZW50IGNsZWFudXAgaG9vay4gKHNlcnZlciB2cy5cbiAqIGJyb3dzZXIgZXRjKS4gRXhhbXBsZTogQSBicm93c2VyIHN5c3RlbSBjYWNoZXMgRE9NIG5vZGVzIGJhc2VkIG9uIGNvbXBvbmVudFxuICogSUQgYW5kIG11c3QgcmVtb3ZlIHRoYXQgY2FjaGUgZW50cnkgd2hlbiB0aGlzIGluc3RhbmNlIGlzIHVubW91bnRlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgdW5tb3VudElERnJvbUVudmlyb25tZW50ID0gbnVsbDtcblxuLyoqXG4gKiBUaGUgXCJpbWFnZVwiIG9mIGEgY29tcG9uZW50IHRyZWUsIGlzIHRoZSBwbGF0Zm9ybSBzcGVjaWZpYyAodHlwaWNhbGx5XG4gKiBzZXJpYWxpemVkKSBkYXRhIHRoYXQgcmVwcmVzZW50cyBhIHRyZWUgb2YgbG93ZXIgbGV2ZWwgVUkgYnVpbGRpbmcgYmxvY2tzLlxuICogT24gdGhlIHdlYiwgdGhpcyBcImltYWdlXCIgaXMgSFRNTCBtYXJrdXAgd2hpY2ggZGVzY3JpYmVzIGEgY29uc3RydWN0aW9uIG9mXG4gKiBsb3cgbGV2ZWwgYGRpdmAgYW5kIGBzcGFuYCBub2Rlcy4gT3RoZXIgcGxhdGZvcm1zIG1heSBoYXZlIGRpZmZlcmVudFxuICogZW5jb2Rpbmcgb2YgdGhpcyBcImltYWdlXCIuIFRoaXMgbXVzdCBiZSBpbmplY3RlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgbW91bnRJbWFnZUludG9Ob2RlID0gbnVsbDtcblxuLyoqXG4gKiBDb21wb25lbnRzIGFyZSB0aGUgYmFzaWMgdW5pdHMgb2YgY29tcG9zaXRpb24gaW4gUmVhY3QuXG4gKlxuICogRXZlcnkgY29tcG9uZW50IGFjY2VwdHMgYSBzZXQgb2Yga2V5ZWQgaW5wdXQgcGFyYW1ldGVycyBrbm93biBhcyBcInByb3BzXCIgdGhhdFxuICogYXJlIGluaXRpYWxpemVkIGJ5IHRoZSBjb25zdHJ1Y3Rvci4gT25jZSBhIGNvbXBvbmVudCBpcyBtb3VudGVkLCB0aGUgcHJvcHNcbiAqIGNhbiBiZSBtdXRhdGVkIHVzaW5nIGBzZXRQcm9wc2Agb3IgYHJlcGxhY2VQcm9wc2AuXG4gKlxuICogRXZlcnkgY29tcG9uZW50IGlzIGNhcGFibGUgb2YgdGhlIGZvbGxvd2luZyBvcGVyYXRpb25zOlxuICpcbiAqICAgYG1vdW50Q29tcG9uZW50YFxuICogICAgIEluaXRpYWxpemVzIHRoZSBjb21wb25lbnQsIHJlbmRlcnMgbWFya3VwLCBhbmQgcmVnaXN0ZXJzIGV2ZW50IGxpc3RlbmVycy5cbiAqXG4gKiAgIGByZWNlaXZlQ29tcG9uZW50YFxuICogICAgIFVwZGF0ZXMgdGhlIHJlbmRlcmVkIERPTSBub2RlcyB0byBtYXRjaCB0aGUgZ2l2ZW4gY29tcG9uZW50LlxuICpcbiAqICAgYHVubW91bnRDb21wb25lbnRgXG4gKiAgICAgUmVsZWFzZXMgYW55IHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgdGhpcyBjb21wb25lbnQuXG4gKlxuICogQ29tcG9uZW50cyBjYW4gYWxzbyBiZSBcIm93bmVkXCIgYnkgb3RoZXIgY29tcG9uZW50cy4gQmVpbmcgb3duZWQgYnkgYW5vdGhlclxuICogY29tcG9uZW50IG1lYW5zIGJlaW5nIGNvbnN0cnVjdGVkIGJ5IHRoYXQgY29tcG9uZW50LiBUaGlzIGlzIGRpZmZlcmVudCBmcm9tXG4gKiBiZWluZyB0aGUgY2hpbGQgb2YgYSBjb21wb25lbnQsIHdoaWNoIG1lYW5zIGhhdmluZyBhIERPTSByZXByZXNlbnRhdGlvbiB0aGF0XG4gKiBpcyBhIGNoaWxkIG9mIHRoZSBET00gcmVwcmVzZW50YXRpb24gb2YgdGhhdCBjb21wb25lbnQuXG4gKlxuICogQGNsYXNzIFJlYWN0Q29tcG9uZW50XG4gKi9cbnZhciBSZWFjdENvbXBvbmVudCA9IHtcblxuICBpbmplY3Rpb246IHtcbiAgICBpbmplY3RFbnZpcm9ubWVudDogZnVuY3Rpb24oUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCkge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgIWluamVjdGVkLFxuICAgICAgICAnUmVhY3RDb21wb25lbnQ6IGluamVjdEVudmlyb25tZW50KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuJ1xuICAgICAgKSA6IGludmFyaWFudCghaW5qZWN0ZWQpKTtcbiAgICAgIG1vdW50SW1hZ2VJbnRvTm9kZSA9IFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQubW91bnRJbWFnZUludG9Ob2RlO1xuICAgICAgdW5tb3VudElERnJvbUVudmlyb25tZW50ID1cbiAgICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC51bm1vdW50SURGcm9tRW52aXJvbm1lbnQ7XG4gICAgICBSZWFjdENvbXBvbmVudC5CYWNrZW5kSURPcGVyYXRpb25zID1cbiAgICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5CYWNrZW5kSURPcGVyYXRpb25zO1xuICAgICAgaW5qZWN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBMaWZlQ3ljbGU6IENvbXBvbmVudExpZmVDeWNsZSxcblxuICAvKipcbiAgICogSW5qZWN0ZWQgbW9kdWxlIHRoYXQgcHJvdmlkZXMgYWJpbGl0eSB0byBtdXRhdGUgaW5kaXZpZHVhbCBwcm9wZXJ0aWVzLlxuICAgKiBJbmplY3RlZCBpbnRvIHRoZSBiYXNlIGNsYXNzIGJlY2F1c2UgbWFueSBkaWZmZXJlbnQgc3ViY2xhc3NlcyBuZWVkIGFjY2Vzc1xuICAgKiB0byB0aGlzLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIEJhY2tlbmRJRE9wZXJhdGlvbnM6IG51bGwsXG5cbiAgLyoqXG4gICAqIEJhc2UgZnVuY3Rpb25hbGl0eSBmb3IgZXZlcnkgUmVhY3RDb21wb25lbnQgY29uc3RydWN0b3IuIE1peGVkIGludG8gdGhlXG4gICAqIGBSZWFjdENvbXBvbmVudGAgcHJvdG90eXBlLCBidXQgZXhwb3NlZCBzdGF0aWNhbGx5IGZvciBlYXN5IGFjY2Vzcy5cbiAgICpcbiAgICogQGxlbmRzIHtSZWFjdENvbXBvbmVudC5wcm90b3R5cGV9XG4gICAqL1xuICBNaXhpbjoge1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IHRoaXMgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKiBAZmluYWxcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgaXNNb3VudGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9saWZlQ3ljbGVTdGF0ZSA9PT0gQ29tcG9uZW50TGlmZUN5Y2xlLk1PVU5URUQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHByb3BzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpYWxQcm9wcyBTdWJzZXQgb2YgdGhlIG5leHQgcHJvcHMuXG4gICAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBwcm9wcyBhcmUgdXBkYXRlZC5cbiAgICAgKiBAZmluYWxcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc2V0UHJvcHM6IGZ1bmN0aW9uKHBhcnRpYWxQcm9wcywgY2FsbGJhY2spIHtcbiAgICAgIC8vIE1lcmdlIHdpdGggdGhlIHBlbmRpbmcgZWxlbWVudCBpZiBpdCBleGlzdHMsIG90aGVyd2lzZSB3aXRoIGV4aXN0aW5nXG4gICAgICAvLyBlbGVtZW50IHByb3BzLlxuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLl9wZW5kaW5nRWxlbWVudCB8fCB0aGlzLl9jdXJyZW50RWxlbWVudDtcbiAgICAgIHRoaXMucmVwbGFjZVByb3BzKFxuICAgICAgICBhc3NpZ24oe30sIGVsZW1lbnQucHJvcHMsIHBhcnRpYWxQcm9wcyksXG4gICAgICAgIGNhbGxiYWNrXG4gICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHByb3BzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHByb3BzIE5ldyBwcm9wcy5cbiAgICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHByb3BzIGFyZSB1cGRhdGVkLlxuICAgICAqIEBmaW5hbFxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICByZXBsYWNlUHJvcHM6IGZ1bmN0aW9uKHByb3BzLCBjYWxsYmFjaykge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgdGhpcy5pc01vdW50ZWQoKSxcbiAgICAgICAgJ3JlcGxhY2VQcm9wcyguLi4pOiBDYW4gb25seSB1cGRhdGUgYSBtb3VudGVkIGNvbXBvbmVudC4nXG4gICAgICApIDogaW52YXJpYW50KHRoaXMuaXNNb3VudGVkKCkpKTtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIHRoaXMuX21vdW50RGVwdGggPT09IDAsXG4gICAgICAgICdyZXBsYWNlUHJvcHMoLi4uKTogWW91IGNhbGxlZCBgc2V0UHJvcHNgIG9yIGByZXBsYWNlUHJvcHNgIG9uIGEgJyArXG4gICAgICAgICdjb21wb25lbnQgd2l0aCBhIHBhcmVudC4gVGhpcyBpcyBhbiBhbnRpLXBhdHRlcm4gc2luY2UgcHJvcHMgd2lsbCAnICtcbiAgICAgICAgJ2dldCByZWFjdGl2ZWx5IHVwZGF0ZWQgd2hlbiByZW5kZXJlZC4gSW5zdGVhZCwgY2hhbmdlIHRoZSBvd25lclxcJ3MgJyArXG4gICAgICAgICdgcmVuZGVyYCBtZXRob2QgdG8gcGFzcyB0aGUgY29ycmVjdCB2YWx1ZSBhcyBwcm9wcyB0byB0aGUgY29tcG9uZW50ICcgK1xuICAgICAgICAnd2hlcmUgaXQgaXMgY3JlYXRlZC4nXG4gICAgICApIDogaW52YXJpYW50KHRoaXMuX21vdW50RGVwdGggPT09IDApKTtcbiAgICAgIC8vIFRoaXMgaXMgYSBkZW9wdGltaXplZCBwYXRoLiBXZSBvcHRpbWl6ZSBmb3IgYWx3YXlzIGhhdmluZyBhIGVsZW1lbnQuXG4gICAgICAvLyBUaGlzIGNyZWF0ZXMgYW4gZXh0cmEgaW50ZXJuYWwgZWxlbWVudC5cbiAgICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzKFxuICAgICAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCB8fCB0aGlzLl9jdXJyZW50RWxlbWVudCxcbiAgICAgICAgcHJvcHNcbiAgICAgICk7XG4gICAgICBSZWFjdFVwZGF0ZXMuZW5xdWV1ZVVwZGF0ZSh0aGlzLCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlIGEgcGFydGlhbCB1cGRhdGUgdG8gdGhlIHByb3BzLiBPbmx5IHVzZWQgZm9yIGludGVybmFsIHRlc3RpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFByb3BzIFN1YnNldCBvZiB0aGUgbmV4dCBwcm9wcy5cbiAgICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHByb3BzIGFyZSB1cGRhdGVkLlxuICAgICAqIEBmaW5hbFxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9zZXRQcm9wc0ludGVybmFsOiBmdW5jdGlvbihwYXJ0aWFsUHJvcHMsIGNhbGxiYWNrKSB7XG4gICAgICAvLyBUaGlzIGlzIGEgZGVvcHRpbWl6ZWQgcGF0aC4gV2Ugb3B0aW1pemUgZm9yIGFsd2F5cyBoYXZpbmcgYSBlbGVtZW50LlxuICAgICAgLy8gVGhpcyBjcmVhdGVzIGFuIGV4dHJhIGludGVybmFsIGVsZW1lbnQuXG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMuX3BlbmRpbmdFbGVtZW50IHx8IHRoaXMuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgdGhpcy5fcGVuZGluZ0VsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlUHJvcHMoXG4gICAgICAgIGVsZW1lbnQsXG4gICAgICAgIGFzc2lnbih7fSwgZWxlbWVudC5wcm9wcywgcGFydGlhbFByb3BzKVxuICAgICAgKTtcbiAgICAgIFJlYWN0VXBkYXRlcy5lbnF1ZXVlVXBkYXRlKHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQmFzZSBjb25zdHJ1Y3RvciBmb3IgYWxsIFJlYWN0IGNvbXBvbmVudHMuXG4gICAgICpcbiAgICAgKiBTdWJjbGFzc2VzIHRoYXQgb3ZlcnJpZGUgdGhpcyBtZXRob2Qgc2hvdWxkIG1ha2Ugc3VyZSB0byBpbnZva2VcbiAgICAgKiBgUmVhY3RDb21wb25lbnQuTWl4aW4uY29uc3RydWN0LmNhbGwodGhpcywgLi4uKWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgLy8gVGhpcyBpcyB0aGUgcHVibGljIGV4cG9zZWQgcHJvcHMgb2JqZWN0IGFmdGVyIGl0IGhhcyBiZWVuIHByb2Nlc3NlZFxuICAgICAgLy8gd2l0aCBkZWZhdWx0IHByb3BzLiBUaGUgZWxlbWVudCdzIHByb3BzIHJlcHJlc2VudHMgdGhlIHRydWUgaW50ZXJuYWxcbiAgICAgIC8vIHN0YXRlIG9mIHRoZSBwcm9wcy5cbiAgICAgIHRoaXMucHJvcHMgPSBlbGVtZW50LnByb3BzO1xuICAgICAgLy8gUmVjb3JkIHRoZSBjb21wb25lbnQgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoaXMgY29tcG9uZW50LlxuICAgICAgLy8gVGhpcyBpcyBhY2Nlc3NpYmxlIHRocm91Z2ggdGhlIGVsZW1lbnQgYnV0IHdlIG1haW50YWluIGFuIGV4dHJhXG4gICAgICAvLyBmaWVsZCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIGRldnRvb2xzIGFuZCBhcyBhIHdheSB0byBtYWtlIGFuXG4gICAgICAvLyBpbmNyZW1lbnRhbCB1cGRhdGUuIFRPRE86IENvbnNpZGVyIGRlcHJlY2F0aW5nIHRoaXMgZmllbGQuXG4gICAgICB0aGlzLl9vd25lciA9IGVsZW1lbnQuX293bmVyO1xuXG4gICAgICAvLyBBbGwgY29tcG9uZW50cyBzdGFydCB1bm1vdW50ZWQuXG4gICAgICB0aGlzLl9saWZlQ3ljbGVTdGF0ZSA9IENvbXBvbmVudExpZmVDeWNsZS5VTk1PVU5URUQ7XG5cbiAgICAgIC8vIFNlZSBSZWFjdFVwZGF0ZXMuXG4gICAgICB0aGlzLl9wZW5kaW5nQ2FsbGJhY2tzID0gbnVsbDtcblxuICAgICAgLy8gV2Uga2VlcCB0aGUgb2xkIGVsZW1lbnQgYW5kIGEgcmVmZXJlbmNlIHRvIHRoZSBwZW5kaW5nIGVsZW1lbnRcbiAgICAgIC8vIHRvIHRyYWNrIHVwZGF0ZXMuXG4gICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBjb21wb25lbnQsIHJlbmRlcnMgbWFya3VwLCBhbmQgcmVnaXN0ZXJzIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoaXMgZG9lcyBub3QgaW5zZXJ0IGFueSBub2RlcyBpbnRvIHRoZSBET00uXG4gICAgICpcbiAgICAgKiBTdWJjbGFzc2VzIHRoYXQgb3ZlcnJpZGUgdGhpcyBtZXRob2Qgc2hvdWxkIG1ha2Ugc3VyZSB0byBpbnZva2VcbiAgICAgKiBgUmVhY3RDb21wb25lbnQuTWl4aW4ubW91bnRDb21wb25lbnQuY2FsbCh0aGlzLCAuLi4pYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1vdW50RGVwdGggbnVtYmVyIG9mIGNvbXBvbmVudHMgaW4gdGhlIG93bmVyIGhpZXJhcmNoeS5cbiAgICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBSZW5kZXJlZCBtYXJrdXAgdG8gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NLlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbihyb290SUQsIHRyYW5zYWN0aW9uLCBtb3VudERlcHRoKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAhdGhpcy5pc01vdW50ZWQoKSxcbiAgICAgICAgJ21vdW50Q29tcG9uZW50KCVzLCAuLi4pOiBDYW4gb25seSBtb3VudCBhbiB1bm1vdW50ZWQgY29tcG9uZW50LiAnICtcbiAgICAgICAgJ01ha2Ugc3VyZSB0byBhdm9pZCBzdG9yaW5nIGNvbXBvbmVudHMgYmV0d2VlbiByZW5kZXJzIG9yIHJldXNpbmcgYSAnICtcbiAgICAgICAgJ3NpbmdsZSBjb21wb25lbnQgaW5zdGFuY2UgaW4gbXVsdGlwbGUgcGxhY2VzLicsXG4gICAgICAgIHJvb3RJRFxuICAgICAgKSA6IGludmFyaWFudCghdGhpcy5pc01vdW50ZWQoKSkpO1xuICAgICAgdmFyIHJlZiA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnJlZjtcbiAgICAgIGlmIChyZWYgIT0gbnVsbCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgICAgIFJlYWN0T3duZXIuYWRkQ29tcG9uZW50QXNSZWZUbyh0aGlzLCByZWYsIG93bmVyKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSByb290SUQ7XG4gICAgICB0aGlzLl9saWZlQ3ljbGVTdGF0ZSA9IENvbXBvbmVudExpZmVDeWNsZS5NT1VOVEVEO1xuICAgICAgdGhpcy5fbW91bnREZXB0aCA9IG1vdW50RGVwdGg7XG4gICAgICAvLyBFZmZlY3RpdmVseTogcmV0dXJuICcnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZWxlYXNlcyBhbnkgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSBgbW91bnRDb21wb25lbnRgLlxuICAgICAqXG4gICAgICogTk9URTogVGhpcyBkb2VzIG5vdCByZW1vdmUgYW55IG5vZGVzIGZyb20gdGhlIERPTS5cbiAgICAgKlxuICAgICAqIFN1YmNsYXNzZXMgdGhhdCBvdmVycmlkZSB0aGlzIG1ldGhvZCBzaG91bGQgbWFrZSBzdXJlIHRvIGludm9rZVxuICAgICAqIGBSZWFjdENvbXBvbmVudC5NaXhpbi51bm1vdW50Q29tcG9uZW50LmNhbGwodGhpcylgLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24oKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICB0aGlzLmlzTW91bnRlZCgpLFxuICAgICAgICAndW5tb3VudENvbXBvbmVudCgpOiBDYW4gb25seSB1bm1vdW50IGEgbW91bnRlZCBjb21wb25lbnQuJ1xuICAgICAgKSA6IGludmFyaWFudCh0aGlzLmlzTW91bnRlZCgpKSk7XG4gICAgICB2YXIgcmVmID0gdGhpcy5fY3VycmVudEVsZW1lbnQucmVmO1xuICAgICAgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgICAgIFJlYWN0T3duZXIucmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tKHRoaXMsIHJlZiwgdGhpcy5fb3duZXIpO1xuICAgICAgfVxuICAgICAgdW5tb3VudElERnJvbUVudmlyb25tZW50KHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gICAgICB0aGlzLl9saWZlQ3ljbGVTdGF0ZSA9IENvbXBvbmVudExpZmVDeWNsZS5VTk1PVU5URUQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY29tcG9uZW50LCB1cGRhdGVzIHRoZSByZW5kZXJlZCBET00gbm9kZXNcbiAgICAgKiBhcyBpZiB0aGF0IGluc3RhbmNlIHdhcyByZW5kZXJlZCBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogU3ViY2xhc3NlcyB0aGF0IG92ZXJyaWRlIHRoaXMgbWV0aG9kIHNob3VsZCBtYWtlIHN1cmUgdG8gaW52b2tlXG4gICAgICogYFJlYWN0Q29tcG9uZW50Lk1peGluLnJlY2VpdmVDb21wb25lbnQuY2FsbCh0aGlzLCAuLi4pYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0Q29tcG9uZW50IE5leHQgc2V0IG9mIHByb3BlcnRpZXMuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbikge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgdGhpcy5pc01vdW50ZWQoKSxcbiAgICAgICAgJ3JlY2VpdmVDb21wb25lbnQoLi4uKTogQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRlZCBjb21wb25lbnQuJ1xuICAgICAgKSA6IGludmFyaWFudCh0aGlzLmlzTW91bnRlZCgpKSk7XG4gICAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IG5leHRFbGVtZW50O1xuICAgICAgdGhpcy5wZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkodHJhbnNhY3Rpb24pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJZiBgX3BlbmRpbmdFbGVtZW50YCBpcyBzZXQsIHVwZGF0ZSB0aGUgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeTogZnVuY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICAgIGlmICh0aGlzLl9wZW5kaW5nRWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBwcmV2RWxlbWVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgdmFyIG5leHRFbGVtZW50ID0gdGhpcy5fcGVuZGluZ0VsZW1lbnQ7XG4gICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRFbGVtZW50O1xuICAgICAgdGhpcy5wcm9wcyA9IG5leHRFbGVtZW50LnByb3BzO1xuICAgICAgdGhpcy5fb3duZXIgPSBuZXh0RWxlbWVudC5fb3duZXI7XG4gICAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudCh0cmFuc2FjdGlvbiwgcHJldkVsZW1lbnQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjb21wb25lbnQncyBjdXJyZW50bHkgbW91bnRlZCByZXByZXNlbnRhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcHJldkVsZW1lbnRcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB1cGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBwcmV2RWxlbWVudCkge1xuICAgICAgdmFyIG5leHRFbGVtZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQ7XG5cbiAgICAgIC8vIElmIGVpdGhlciB0aGUgb3duZXIgb3IgYSBgcmVmYCBoYXMgY2hhbmdlZCwgbWFrZSBzdXJlIHRoZSBuZXdlc3Qgb3duZXJcbiAgICAgIC8vIGhhcyBzdG9yZWQgYSByZWZlcmVuY2UgdG8gYHRoaXNgLCBhbmQgdGhlIHByZXZpb3VzIG93bmVyIChpZiBkaWZmZXJlbnQpXG4gICAgICAvLyBoYXMgZm9yZ290dGVuIHRoZSByZWZlcmVuY2UgdG8gYHRoaXNgLiBXZSB1c2UgdGhlIGVsZW1lbnQgaW5zdGVhZFxuICAgICAgLy8gb2YgdGhlIHB1YmxpYyB0aGlzLnByb3BzIGJlY2F1c2UgdGhlIHBvc3QgcHJvY2Vzc2luZyBjYW5ub3QgZGV0ZXJtaW5lXG4gICAgICAvLyBhIHJlZi4gVGhlIHJlZiBjb25jZXB0dWFsbHkgbGl2ZXMgb24gdGhlIGVsZW1lbnQuXG5cbiAgICAgIC8vIFRPRE86IFNob3VsZCB0aGlzIGV2ZW4gYmUgcG9zc2libGU/IFRoZSBvd25lciBjYW5ub3QgY2hhbmdlIGJlY2F1c2VcbiAgICAgIC8vIGl0J3MgZm9yYmlkZGVuIGJ5IHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50LiBUaGUgcmVmIGNhbiBjaGFuZ2VcbiAgICAgIC8vIGlmIHlvdSBzd2FwIHRoZSBrZXlzIG9mIGJ1dCBub3QgdGhlIHJlZnMuIFJlY29uc2lkZXIgd2hlcmUgdGhpcyBjaGVja1xuICAgICAgLy8gaXMgbWFkZS4gSXQgcHJvYmFibHkgYmVsb25ncyB3aGVyZSB0aGUga2V5IGNoZWNraW5nIGFuZFxuICAgICAgLy8gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCBpcyBkb25lLlxuXG4gICAgICBpZiAobmV4dEVsZW1lbnQuX293bmVyICE9PSBwcmV2RWxlbWVudC5fb3duZXIgfHxcbiAgICAgICAgICBuZXh0RWxlbWVudC5yZWYgIT09IHByZXZFbGVtZW50LnJlZikge1xuICAgICAgICBpZiAocHJldkVsZW1lbnQucmVmICE9IG51bGwpIHtcbiAgICAgICAgICBSZWFjdE93bmVyLnJlbW92ZUNvbXBvbmVudEFzUmVmRnJvbShcbiAgICAgICAgICAgIHRoaXMsIHByZXZFbGVtZW50LnJlZiwgcHJldkVsZW1lbnQuX293bmVyXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDb3JyZWN0LCBldmVuIGlmIHRoZSBvd25lciBpcyB0aGUgc2FtZSwgYW5kIG9ubHkgdGhlIHJlZiBoYXMgY2hhbmdlZC5cbiAgICAgICAgaWYgKG5leHRFbGVtZW50LnJlZiAhPSBudWxsKSB7XG4gICAgICAgICAgUmVhY3RPd25lci5hZGRDb21wb25lbnRBc1JlZlRvKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIG5leHRFbGVtZW50LnJlZixcbiAgICAgICAgICAgIG5leHRFbGVtZW50Ll9vd25lclxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW91bnRzIHRoaXMgY29tcG9uZW50IGFuZCBpbnNlcnRzIGl0IGludG8gdGhlIERPTS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gICAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdG8gbW91bnQgaW50by5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNob3VsZFJldXNlTWFya3VwIElmIHRydWUsIGRvIG5vdCBpbnNlcnQgbWFya3VwXG4gICAgICogQGZpbmFsXG4gICAgICogQGludGVybmFsXG4gICAgICogQHNlZSB7UmVhY3RNb3VudC5yZW5kZXJ9XG4gICAgICovXG4gICAgbW91bnRDb21wb25lbnRJbnRvTm9kZTogZnVuY3Rpb24ocm9vdElELCBjb250YWluZXIsIHNob3VsZFJldXNlTWFya3VwKSB7XG4gICAgICB2YXIgdHJhbnNhY3Rpb24gPSBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5nZXRQb29sZWQoKTtcbiAgICAgIHRyYW5zYWN0aW9uLnBlcmZvcm0oXG4gICAgICAgIHRoaXMuX21vdW50Q29tcG9uZW50SW50b05vZGUsXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHJvb3RJRCxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgc2hvdWxkUmV1c2VNYXJrdXBcbiAgICAgICk7XG4gICAgICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBET00gSUQgb2YgdGhlIHJvb3Qgbm9kZS5cbiAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byBtb3VudCBpbnRvLlxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNob3VsZFJldXNlTWFya3VwIElmIHRydWUsIGRvIG5vdCBpbnNlcnQgbWFya3VwXG4gICAgICogQGZpbmFsXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfbW91bnRDb21wb25lbnRJbnRvTm9kZTogZnVuY3Rpb24oXG4gICAgICAgIHJvb3RJRCxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgc2hvdWxkUmV1c2VNYXJrdXApIHtcbiAgICAgIHZhciBtYXJrdXAgPSB0aGlzLm1vdW50Q29tcG9uZW50KHJvb3RJRCwgdHJhbnNhY3Rpb24sIDApO1xuICAgICAgbW91bnRJbWFnZUludG9Ob2RlKG1hcmt1cCwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGlzIGNvbXBvbmVudCBpcyBvd25lZCBieSB0aGUgc3VwcGxpZWQgYG93bmVyYCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBvd25lciBDb21wb25lbnQgdG8gY2hlY2suXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb3duZXJzYCBvd25zIHRoaXMgY29tcG9uZW50LlxuICAgICAqIEBmaW5hbFxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGlzT3duZWRCeTogZnVuY3Rpb24ob3duZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLl9vd25lciA9PT0gb3duZXI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgYW5vdGhlciBjb21wb25lbnQsIHRoYXQgc2hhcmVzIHRoZSBzYW1lIG93bmVyIGFzIHRoaXMgb25lLCBieSByZWYuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIG9mIGEgc2libGluZyBDb21wb25lbnQuXG4gICAgICogQHJldHVybiB7P1JlYWN0Q29tcG9uZW50fSB0aGUgYWN0dWFsIHNpYmxpbmcgQ29tcG9uZW50LlxuICAgICAqIEBmaW5hbFxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGdldFNpYmxpbmdCeVJlZjogZnVuY3Rpb24ocmVmKSB7XG4gICAgICB2YXIgb3duZXIgPSB0aGlzLl9vd25lcjtcbiAgICAgIGlmICghb3duZXIgfHwgIW93bmVyLnJlZnMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3duZXIucmVmc1tyZWZdO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudC5qc1xuICoqIG1vZHVsZSBpZCA9IDIzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJbnN0YW5jZUhhbmRsZXNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdFJvb3RJbmRleCA9IHJlcXVpcmUoXCIuL1JlYWN0Um9vdEluZGV4XCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG52YXIgU0VQQVJBVE9SID0gJy4nO1xudmFyIFNFUEFSQVRPUl9MRU5HVEggPSBTRVBBUkFUT1IubGVuZ3RoO1xuXG4vKipcbiAqIE1heGltdW0gZGVwdGggb2YgdHJhdmVyc2FscyBiZWZvcmUgd2UgY29uc2lkZXIgdGhlIHBvc3NpYmlsaXR5IG9mIGEgYmFkIElELlxuICovXG52YXIgTUFYX1RSRUVfREVQVEggPSAxMDA7XG5cbi8qKlxuICogQ3JlYXRlcyBhIERPTSBJRCBwcmVmaXggdG8gdXNlIHdoZW4gbW91bnRpbmcgUmVhY3QgY29tcG9uZW50cy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggQSB1bmlxdWUgaW50ZWdlclxuICogQHJldHVybiB7c3RyaW5nfSBSZWFjdCByb290IElELlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldFJlYWN0Um9vdElEU3RyaW5nKGluZGV4KSB7XG4gIHJldHVybiBTRVBBUkFUT1IgKyBpbmRleC50b1N0cmluZygzNik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgY2hhcmFjdGVyIGluIHRoZSBzdXBwbGllZCBJRCBpcyBhIHNlcGFyYXRvciBvciB0aGUgZW5kLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBIFJlYWN0IERPTSBJRC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCBvZiB0aGUgY2hhcmFjdGVyIHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY2hhcmFjdGVyIGlzIGEgc2VwYXJhdG9yIG9yIGVuZCBvZiB0aGUgSUQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpc0JvdW5kYXJ5KGlkLCBpbmRleCkge1xuICByZXR1cm4gaWQuY2hhckF0KGluZGV4KSA9PT0gU0VQQVJBVE9SIHx8IGluZGV4ID09PSBpZC5sZW5ndGg7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBzdXBwbGllZCBzdHJpbmcgaXMgYSB2YWxpZCBSZWFjdCBET00gSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIEEgUmVhY3QgRE9NIElELCBtYXliZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHN0cmluZyBpcyBhIHZhbGlkIFJlYWN0IERPTSBJRC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRJRChpZCkge1xuICByZXR1cm4gaWQgPT09ICcnIHx8IChcbiAgICBpZC5jaGFyQXQoMCkgPT09IFNFUEFSQVRPUiAmJiBpZC5jaGFyQXQoaWQubGVuZ3RoIC0gMSkgIT09IFNFUEFSQVRPUlxuICApO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZmlyc3QgSUQgaXMgYW4gYW5jZXN0b3Igb2Ygb3IgZXF1YWwgdG8gdGhlIHNlY29uZCBJRC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYW5jZXN0b3JJRFxuICogQHBhcmFtIHtzdHJpbmd9IGRlc2NlbmRhbnRJRFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgYW5jZXN0b3JJRGAgaXMgYW4gYW5jZXN0b3Igb2YgYGRlc2NlbmRhbnRJRGAuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gaXNBbmNlc3RvcklET2YoYW5jZXN0b3JJRCwgZGVzY2VuZGFudElEKSB7XG4gIHJldHVybiAoXG4gICAgZGVzY2VuZGFudElELmluZGV4T2YoYW5jZXN0b3JJRCkgPT09IDAgJiZcbiAgICBpc0JvdW5kYXJ5KGRlc2NlbmRhbnRJRCwgYW5jZXN0b3JJRC5sZW5ndGgpXG4gICk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgcGFyZW50IElEIG9mIHRoZSBzdXBwbGllZCBSZWFjdCBET00gSUQsIGBpZGAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIGEgY29tcG9uZW50LlxuICogQHJldHVybiB7c3RyaW5nfSBJRCBvZiB0aGUgcGFyZW50LCBvciBhbiBlbXB0eSBzdHJpbmcuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnRJRChpZCkge1xuICByZXR1cm4gaWQgPyBpZC5zdWJzdHIoMCwgaWQubGFzdEluZGV4T2YoU0VQQVJBVE9SKSkgOiAnJztcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuZXh0IERPTSBJRCBvbiB0aGUgdHJlZSBwYXRoIGZyb20gdGhlIHN1cHBsaWVkIGBhbmNlc3RvcklEYCB0byB0aGVcbiAqIHN1cHBsaWVkIGBkZXN0aW5hdGlvbklEYC4gSWYgdGhleSBhcmUgZXF1YWwsIHRoZSBJRCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYW5jZXN0b3JJRCBJRCBvZiBhbiBhbmNlc3RvciBub2RlIG9mIGBkZXN0aW5hdGlvbklEYC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkZXN0aW5hdGlvbklEIElEIG9mIHRoZSBkZXN0aW5hdGlvbiBub2RlLlxuICogQHJldHVybiB7c3RyaW5nfSBOZXh0IElEIG9uIHRoZSBwYXRoIGZyb20gYGFuY2VzdG9ySURgIHRvIGBkZXN0aW5hdGlvbklEYC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGdldE5leHREZXNjZW5kYW50SUQoYW5jZXN0b3JJRCwgZGVzdGluYXRpb25JRCkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGlzVmFsaWRJRChhbmNlc3RvcklEKSAmJiBpc1ZhbGlkSUQoZGVzdGluYXRpb25JRCksXG4gICAgJ2dldE5leHREZXNjZW5kYW50SUQoJXMsICVzKTogUmVjZWl2ZWQgYW4gaW52YWxpZCBSZWFjdCBET00gSUQuJyxcbiAgICBhbmNlc3RvcklELFxuICAgIGRlc3RpbmF0aW9uSURcbiAgKSA6IGludmFyaWFudChpc1ZhbGlkSUQoYW5jZXN0b3JJRCkgJiYgaXNWYWxpZElEKGRlc3RpbmF0aW9uSUQpKSk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgaXNBbmNlc3RvcklET2YoYW5jZXN0b3JJRCwgZGVzdGluYXRpb25JRCksXG4gICAgJ2dldE5leHREZXNjZW5kYW50SUQoLi4uKTogUmVhY3QgaGFzIG1hZGUgYW4gaW52YWxpZCBhc3N1bXB0aW9uIGFib3V0ICcgK1xuICAgICd0aGUgRE9NIGhpZXJhcmNoeS4gRXhwZWN0ZWQgYCVzYCB0byBiZSBhbiBhbmNlc3RvciBvZiBgJXNgLicsXG4gICAgYW5jZXN0b3JJRCxcbiAgICBkZXN0aW5hdGlvbklEXG4gICkgOiBpbnZhcmlhbnQoaXNBbmNlc3RvcklET2YoYW5jZXN0b3JJRCwgZGVzdGluYXRpb25JRCkpKTtcbiAgaWYgKGFuY2VzdG9ySUQgPT09IGRlc3RpbmF0aW9uSUQpIHtcbiAgICByZXR1cm4gYW5jZXN0b3JJRDtcbiAgfVxuICAvLyBTa2lwIG92ZXIgdGhlIGFuY2VzdG9yIGFuZCB0aGUgaW1tZWRpYXRlIHNlcGFyYXRvci4gVHJhdmVyc2UgdW50aWwgd2UgaGl0XG4gIC8vIGFub3RoZXIgc2VwYXJhdG9yIG9yIHdlIHJlYWNoIHRoZSBlbmQgb2YgYGRlc3RpbmF0aW9uSURgLlxuICB2YXIgc3RhcnQgPSBhbmNlc3RvcklELmxlbmd0aCArIFNFUEFSQVRPUl9MRU5HVEg7XG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGRlc3RpbmF0aW9uSUQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaXNCb3VuZGFyeShkZXN0aW5hdGlvbklELCBpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZXN0aW5hdGlvbklELnN1YnN0cigwLCBpKTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuZWFyZXN0IGNvbW1vbiBhbmNlc3RvciBJRCBvZiB0d28gSURzLlxuICpcbiAqIFVzaW5nIHRoaXMgSUQgc2NoZW1lLCB0aGUgbmVhcmVzdCBjb21tb24gYW5jZXN0b3IgSUQgaXMgdGhlIGxvbmdlc3QgY29tbW9uXG4gKiBwcmVmaXggb2YgdGhlIHR3byBJRHMgdGhhdCBpbW1lZGlhdGVseSBwcmVjZWRlZCBhIFwibWFya2VyXCIgaW4gYm90aCBzdHJpbmdzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBvbmVJRFxuICogQHBhcmFtIHtzdHJpbmd9IHR3b0lEXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5lYXJlc3QgY29tbW9uIGFuY2VzdG9yIElELCBvciB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vbmUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRGaXJzdENvbW1vbkFuY2VzdG9ySUQob25lSUQsIHR3b0lEKSB7XG4gIHZhciBtaW5MZW5ndGggPSBNYXRoLm1pbihvbmVJRC5sZW5ndGgsIHR3b0lELmxlbmd0aCk7XG4gIGlmIChtaW5MZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgdmFyIGxhc3RDb21tb25NYXJrZXJJbmRleCA9IDA7XG4gIC8vIFVzZSBgPD1gIHRvIHRyYXZlcnNlIHVudGlsIHRoZSBcIkVPTFwiIG9mIHRoZSBzaG9ydGVyIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPD0gbWluTGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaXNCb3VuZGFyeShvbmVJRCwgaSkgJiYgaXNCb3VuZGFyeSh0d29JRCwgaSkpIHtcbiAgICAgIGxhc3RDb21tb25NYXJrZXJJbmRleCA9IGk7XG4gICAgfSBlbHNlIGlmIChvbmVJRC5jaGFyQXQoaSkgIT09IHR3b0lELmNoYXJBdChpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHZhciBsb25nZXN0Q29tbW9uSUQgPSBvbmVJRC5zdWJzdHIoMCwgbGFzdENvbW1vbk1hcmtlckluZGV4KTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBpc1ZhbGlkSUQobG9uZ2VzdENvbW1vbklEKSxcbiAgICAnZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEKCVzLCAlcyk6IEV4cGVjdGVkIGEgdmFsaWQgUmVhY3QgRE9NIElEOiAlcycsXG4gICAgb25lSUQsXG4gICAgdHdvSUQsXG4gICAgbG9uZ2VzdENvbW1vbklEXG4gICkgOiBpbnZhcmlhbnQoaXNWYWxpZElEKGxvbmdlc3RDb21tb25JRCkpKTtcbiAgcmV0dXJuIGxvbmdlc3RDb21tb25JRDtcbn1cblxuLyoqXG4gKiBUcmF2ZXJzZXMgdGhlIHBhcmVudCBwYXRoIGJldHdlZW4gdHdvIElEcyAoZWl0aGVyIHVwIG9yIGRvd24pLiBUaGUgSURzIG11c3RcbiAqIG5vdCBiZSB0aGUgc2FtZSwgYW5kIHRoZXJlIG11c3QgZXhpc3QgYSBwYXJlbnQgcGF0aCBiZXR3ZWVuIHRoZW0uIElmIHRoZVxuICogY2FsbGJhY2sgcmV0dXJucyBgZmFsc2VgLCB0cmF2ZXJzYWwgaXMgc3RvcHBlZC5cbiAqXG4gKiBAcGFyYW0gez9zdHJpbmd9IHN0YXJ0IElEIGF0IHdoaWNoIHRvIHN0YXJ0IHRyYXZlcnNhbC5cbiAqIEBwYXJhbSB7P3N0cmluZ30gc3RvcCBJRCBhdCB3aGljaCB0byBlbmQgdHJhdmVyc2FsLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2IgQ2FsbGJhY2sgdG8gaW52b2tlIGVhY2ggSUQgd2l0aC5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IHNraXBGaXJzdCBXaGV0aGVyIG9yIG5vdCB0byBza2lwIHRoZSBmaXJzdCBub2RlLlxuICogQHBhcmFtIHs/Ym9vbGVhbn0gc2tpcExhc3QgV2hldGhlciBvciBub3QgdG8gc2tpcCB0aGUgbGFzdCBub2RlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VQYXJlbnRQYXRoKHN0YXJ0LCBzdG9wLCBjYiwgYXJnLCBza2lwRmlyc3QsIHNraXBMYXN0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgJyc7XG4gIHN0b3AgPSBzdG9wIHx8ICcnO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIHN0YXJ0ICE9PSBzdG9wLFxuICAgICd0cmF2ZXJzZVBhcmVudFBhdGgoLi4uKTogQ2Fubm90IHRyYXZlcnNlIGZyb20gYW5kIHRvIHRoZSBzYW1lIElELCBgJXNgLicsXG4gICAgc3RhcnRcbiAgKSA6IGludmFyaWFudChzdGFydCAhPT0gc3RvcCkpO1xuICB2YXIgdHJhdmVyc2VVcCA9IGlzQW5jZXN0b3JJRE9mKHN0b3AsIHN0YXJ0KTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICB0cmF2ZXJzZVVwIHx8IGlzQW5jZXN0b3JJRE9mKHN0YXJ0LCBzdG9wKSxcbiAgICAndHJhdmVyc2VQYXJlbnRQYXRoKCVzLCAlcywgLi4uKTogQ2Fubm90IHRyYXZlcnNlIGZyb20gdHdvIElEcyB0aGF0IGRvICcgK1xuICAgICdub3QgaGF2ZSBhIHBhcmVudCBwYXRoLicsXG4gICAgc3RhcnQsXG4gICAgc3RvcFxuICApIDogaW52YXJpYW50KHRyYXZlcnNlVXAgfHwgaXNBbmNlc3RvcklET2Yoc3RhcnQsIHN0b3ApKSk7XG4gIC8vIFRyYXZlcnNlIGZyb20gYHN0YXJ0YCB0byBgc3RvcGAgb25lIGRlcHRoIGF0IGEgdGltZS5cbiAgdmFyIGRlcHRoID0gMDtcbiAgdmFyIHRyYXZlcnNlID0gdHJhdmVyc2VVcCA/IGdldFBhcmVudElEIDogZ2V0TmV4dERlc2NlbmRhbnRJRDtcbiAgZm9yICh2YXIgaWQgPSBzdGFydDsgLyogdW50aWwgYnJlYWsgKi87IGlkID0gdHJhdmVyc2UoaWQsIHN0b3ApKSB7XG4gICAgdmFyIHJldDtcbiAgICBpZiAoKCFza2lwRmlyc3QgfHwgaWQgIT09IHN0YXJ0KSAmJiAoIXNraXBMYXN0IHx8IGlkICE9PSBzdG9wKSkge1xuICAgICAgcmV0ID0gY2IoaWQsIHRyYXZlcnNlVXAsIGFyZyk7XG4gICAgfVxuICAgIGlmIChyZXQgPT09IGZhbHNlIHx8IGlkID09PSBzdG9wKSB7XG4gICAgICAvLyBPbmx5IGJyZWFrIC8vYWZ0ZXIvLyB2aXNpdGluZyBgc3RvcGAuXG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGRlcHRoKysgPCBNQVhfVFJFRV9ERVBUSCxcbiAgICAgICd0cmF2ZXJzZVBhcmVudFBhdGgoJXMsICVzLCAuLi4pOiBEZXRlY3RlZCBhbiBpbmZpbml0ZSBsb29wIHdoaWxlICcgK1xuICAgICAgJ3RyYXZlcnNpbmcgdGhlIFJlYWN0IERPTSBJRCB0cmVlLiBUaGlzIG1heSBiZSBkdWUgdG8gbWFsZm9ybWVkIElEczogJXMnLFxuICAgICAgc3RhcnQsIHN0b3BcbiAgICApIDogaW52YXJpYW50KGRlcHRoKysgPCBNQVhfVFJFRV9ERVBUSCkpO1xuICB9XG59XG5cbi8qKlxuICogTWFuYWdlcyB0aGUgSURzIGFzc2lnbmVkIHRvIERPTSByZXByZXNlbnRhdGlvbnMgb2YgUmVhY3QgY29tcG9uZW50cy4gVGhpc1xuICogdXNlcyBhIHNwZWNpZmljIHNjaGVtZSBpbiBvcmRlciB0byB0cmF2ZXJzZSB0aGUgRE9NIGVmZmljaWVudGx5IChlLmcuIGluXG4gKiBvcmRlciB0byBzaW11bGF0ZSBldmVudHMpLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSB7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBSZWFjdCByb290IElEXG4gICAqIEByZXR1cm4ge3N0cmluZ30gQSBSZWFjdCByb290IElELlxuICAgKi9cbiAgY3JlYXRlUmVhY3RSb290SUQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBnZXRSZWFjdFJvb3RJRFN0cmluZyhSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleCgpKTtcbiAgfSxcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIFJlYWN0IElEIGJ5IGpvaW5pbmcgYSByb290IElEIHdpdGggYSBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIFJvb3QgSUQgb2YgYSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBIGNvbXBvbmVudCdzIG5hbWUgKGFzIGZsYXR0ZW5lZCBjaGlsZHJlbikuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gQSBSZWFjdCBJRC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBjcmVhdGVSZWFjdElEOiBmdW5jdGlvbihyb290SUQsIG5hbWUpIHtcbiAgICByZXR1cm4gcm9vdElEICsgbmFtZTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgRE9NIElEIG9mIHRoZSBSZWFjdCBjb21wb25lbnQgdGhhdCBpcyB0aGUgcm9vdCBvZiB0aGUgdHJlZSB0aGF0XG4gICAqIGNvbnRhaW5zIHRoZSBSZWFjdCBjb21wb25lbnQgd2l0aCB0aGUgc3VwcGxpZWQgRE9NIElELlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgRE9NIElEIG9mIGEgUmVhY3QgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBET00gSUQgb2YgdGhlIFJlYWN0IGNvbXBvbmVudCB0aGF0IGlzIHRoZSByb290LlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGdldFJlYWN0Um9vdElERnJvbU5vZGVJRDogZnVuY3Rpb24oaWQpIHtcbiAgICBpZiAoaWQgJiYgaWQuY2hhckF0KDApID09PSBTRVBBUkFUT1IgJiYgaWQubGVuZ3RoID4gMSkge1xuICAgICAgdmFyIGluZGV4ID0gaWQuaW5kZXhPZihTRVBBUkFUT1IsIDEpO1xuICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpZC5zdWJzdHIoMCwgaW5kZXgpIDogaWQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmF2ZXJzZXMgdGhlIElEIGhpZXJhcmNoeSBhbmQgaW52b2tlcyB0aGUgc3VwcGxpZWQgYGNiYCBvbiBhbnkgSURzIHRoYXRcbiAgICogc2hvdWxkIHdvdWxkIHJlY2VpdmUgYSBgbW91c2VFbnRlcmAgb3IgYG1vdXNlTGVhdmVgIGV2ZW50LlxuICAgKlxuICAgKiBOT1RFOiBEb2VzIG5vdCBpbnZva2UgdGhlIGNhbGxiYWNrIG9uIHRoZSBuZWFyZXN0IGNvbW1vbiBhbmNlc3RvciBiZWNhdXNlXG4gICAqIG5vdGhpbmcgXCJlbnRlcmVkXCIgb3IgXCJsZWZ0XCIgdGhhdCBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGVhdmVJRCBJRCBiZWluZyBsZWZ0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZW50ZXJJRCBJRCBiZWluZyBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiBDYWxsYmFjayB0byBpbnZva2Ugb24gZWFjaCBlbnRlcmVkL2xlZnQgSUQuXG4gICAqIEBwYXJhbSB7Kn0gdXBBcmcgQXJndW1lbnQgdG8gaW52b2tlIHRoZSBjYWxsYmFjayB3aXRoIG9uIGxlZnQgSURzLlxuICAgKiBAcGFyYW0geyp9IGRvd25BcmcgQXJndW1lbnQgdG8gaW52b2tlIHRoZSBjYWxsYmFjayB3aXRoIG9uIGVudGVyZWQgSURzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXZlcnNlRW50ZXJMZWF2ZTogZnVuY3Rpb24obGVhdmVJRCwgZW50ZXJJRCwgY2IsIHVwQXJnLCBkb3duQXJnKSB7XG4gICAgdmFyIGFuY2VzdG9ySUQgPSBnZXRGaXJzdENvbW1vbkFuY2VzdG9ySUQobGVhdmVJRCwgZW50ZXJJRCk7XG4gICAgaWYgKGFuY2VzdG9ySUQgIT09IGxlYXZlSUQpIHtcbiAgICAgIHRyYXZlcnNlUGFyZW50UGF0aChsZWF2ZUlELCBhbmNlc3RvcklELCBjYiwgdXBBcmcsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKGFuY2VzdG9ySUQgIT09IGVudGVySUQpIHtcbiAgICAgIHRyYXZlcnNlUGFyZW50UGF0aChhbmNlc3RvcklELCBlbnRlcklELCBjYiwgZG93bkFyZywgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2ltdWxhdGVzIHRoZSB0cmF2ZXJzYWwgb2YgYSB0d28tcGhhc2UsIGNhcHR1cmUvYnViYmxlIGV2ZW50IGRpc3BhdGNoLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIHRyYXZlcnNhbCBoYXBwZW5zIG9uIElEcyB3aXRob3V0IHRvdWNoaW5nIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRJRCBJRCBvZiB0aGUgdGFyZ2V0IG5vZGUuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSBhcmcgQXJndW1lbnQgdG8gaW52b2tlIHRoZSBjYWxsYmFjayB3aXRoLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXZlcnNlVHdvUGhhc2U6IGZ1bmN0aW9uKHRhcmdldElELCBjYiwgYXJnKSB7XG4gICAgaWYgKHRhcmdldElEKSB7XG4gICAgICB0cmF2ZXJzZVBhcmVudFBhdGgoJycsIHRhcmdldElELCBjYiwgYXJnLCB0cnVlLCBmYWxzZSk7XG4gICAgICB0cmF2ZXJzZVBhcmVudFBhdGgodGFyZ2V0SUQsICcnLCBjYiwgYXJnLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBUcmF2ZXJzZSBhIG5vZGUgSUQsIGNhbGxpbmcgdGhlIHN1cHBsaWVkIGBjYmAgZm9yIGVhY2ggYW5jZXN0b3IgSUQuIEZvclxuICAgKiBleGFtcGxlLCBwYXNzaW5nIGAuMC4kcm93LTAuMWAgd291bGQgcmVzdWx0IGluIGBjYmAgZ2V0dGluZyBjYWxsZWRcbiAgICogd2l0aCBgLjBgLCBgLjAuJHJvdy0wYCwgYW5kIGAuMC4kcm93LTAuMWAuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgdHJhdmVyc2FsIGhhcHBlbnMgb24gSURzIHdpdGhvdXQgdG91Y2hpbmcgdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldElEIElEIG9mIHRoZSB0YXJnZXQgbm9kZS5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2IgQ2FsbGJhY2sgdG8gaW52b2tlLlxuICAgKiBAcGFyYW0geyp9IGFyZyBBcmd1bWVudCB0byBpbnZva2UgdGhlIGNhbGxiYWNrIHdpdGguXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdHJhdmVyc2VBbmNlc3RvcnM6IGZ1bmN0aW9uKHRhcmdldElELCBjYiwgYXJnKSB7XG4gICAgdHJhdmVyc2VQYXJlbnRQYXRoKCcnLCB0YXJnZXRJRCwgY2IsIGFyZywgdHJ1ZSwgZmFsc2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEOiBnZXRGaXJzdENvbW1vbkFuY2VzdG9ySUQsXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIHVuaXQgdGVzdGluZy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXROZXh0RGVzY2VuZGFudElEOiBnZXROZXh0RGVzY2VuZGFudElELFxuXG4gIGlzQW5jZXN0b3JJRE9mOiBpc0FuY2VzdG9ySURPZixcblxuICBTRVBBUkFUT1I6IFNFUEFSQVRPUlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0SW5zdGFuY2VIYW5kbGVzLmpzXG4gKiogbW9kdWxlIGlkID0gMjRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBrZXlNaXJyb3JcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhbiBlbnVtZXJhdGlvbiB3aXRoIGtleXMgZXF1YWwgdG8gdGhlaXIgdmFsdWUuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKlxuICogICB2YXIgQ09MT1JTID0ga2V5TWlycm9yKHtibHVlOiBudWxsLCByZWQ6IG51bGx9KTtcbiAqICAgdmFyIG15Q29sb3IgPSBDT0xPUlMuYmx1ZTtcbiAqICAgdmFyIGlzQ29sb3JWYWxpZCA9ICEhQ09MT1JTW215Q29sb3JdO1xuICpcbiAqIFRoZSBsYXN0IGxpbmUgY291bGQgbm90IGJlIHBlcmZvcm1lZCBpZiB0aGUgdmFsdWVzIG9mIHRoZSBnZW5lcmF0ZWQgZW51bSB3ZXJlXG4gKiBub3QgZXF1YWwgdG8gdGhlaXIga2V5cy5cbiAqXG4gKiAgIElucHV0OiAge2tleTE6IHZhbDEsIGtleTI6IHZhbDJ9XG4gKiAgIE91dHB1dDoge2tleTE6IGtleTEsIGtleTI6IGtleTJ9XG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9ialxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG52YXIga2V5TWlycm9yID0gZnVuY3Rpb24ob2JqKSB7XG4gIHZhciByZXQgPSB7fTtcbiAgdmFyIGtleTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBvYmogaW5zdGFuY2VvZiBPYmplY3QgJiYgIUFycmF5LmlzQXJyYXkob2JqKSxcbiAgICAna2V5TWlycm9yKC4uLik6IEFyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0LidcbiAgKSA6IGludmFyaWFudChvYmogaW5zdGFuY2VvZiBPYmplY3QgJiYgIUFycmF5LmlzQXJyYXkob2JqKSkpO1xuICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcmV0W2tleV0gPSBrZXk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5TWlycm9yO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL2tleU1pcnJvci5qc1xuICoqIG1vZHVsZSBpZCA9IDI1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQbHVnaW5IdWJcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpblJlZ2lzdHJ5XCIpO1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpblV0aWxzXCIpO1xuXG52YXIgYWNjdW11bGF0ZUludG8gPSByZXF1aXJlKFwiLi9hY2N1bXVsYXRlSW50b1wiKTtcbnZhciBmb3JFYWNoQWNjdW11bGF0ZWQgPSByZXF1aXJlKFwiLi9mb3JFYWNoQWNjdW11bGF0ZWRcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIEludGVybmFsIHN0b3JlIGZvciBldmVudCBsaXN0ZW5lcnNcbiAqL1xudmFyIGxpc3RlbmVyQmFuayA9IHt9O1xuXG4vKipcbiAqIEludGVybmFsIHF1ZXVlIG9mIGV2ZW50cyB0aGF0IGhhdmUgYWNjdW11bGF0ZWQgdGhlaXIgZGlzcGF0Y2hlcyBhbmQgYXJlXG4gKiB3YWl0aW5nIHRvIGhhdmUgdGhlaXIgZGlzcGF0Y2hlcyBleGVjdXRlZC5cbiAqL1xudmFyIGV2ZW50UXVldWUgPSBudWxsO1xuXG4vKipcbiAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYW5kIHJlbGVhc2VzIGl0IGJhY2sgaW50byB0aGUgcG9vbCwgdW5sZXNzIHBlcnNpc3RlbnQuXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBldmVudCBTeW50aGV0aWMgZXZlbnQgdG8gYmUgZGlzcGF0Y2hlZC5cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UgPSBmdW5jdGlvbihldmVudCkge1xuICBpZiAoZXZlbnQpIHtcbiAgICB2YXIgZXhlY3V0ZURpc3BhdGNoID0gRXZlbnRQbHVnaW5VdGlscy5leGVjdXRlRGlzcGF0Y2g7XG4gICAgLy8gUGx1Z2lucyBjYW4gcHJvdmlkZSBjdXN0b20gYmVoYXZpb3Igd2hlbiBkaXNwYXRjaGluZyBldmVudHMuXG4gICAgdmFyIFBsdWdpbk1vZHVsZSA9IEV2ZW50UGx1Z2luUmVnaXN0cnkuZ2V0UGx1Z2luTW9kdWxlRm9yRXZlbnQoZXZlbnQpO1xuICAgIGlmIChQbHVnaW5Nb2R1bGUgJiYgUGx1Z2luTW9kdWxlLmV4ZWN1dGVEaXNwYXRjaCkge1xuICAgICAgZXhlY3V0ZURpc3BhdGNoID0gUGx1Z2luTW9kdWxlLmV4ZWN1dGVEaXNwYXRjaDtcbiAgICB9XG4gICAgRXZlbnRQbHVnaW5VdGlscy5leGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIoZXZlbnQsIGV4ZWN1dGVEaXNwYXRjaCk7XG5cbiAgICBpZiAoIWV2ZW50LmlzUGVyc2lzdGVudCgpKSB7XG4gICAgICBldmVudC5jb25zdHJ1Y3Rvci5yZWxlYXNlKGV2ZW50KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogLSBgSW5zdGFuY2VIYW5kbGVgOiBbcmVxdWlyZWRdIE1vZHVsZSB0aGF0IHBlcmZvcm1zIGxvZ2ljYWwgdHJhdmVyc2FscyBvZiBET01cbiAqICAgaGllcmFyY2h5IGdpdmVuIGlkcyBvZiB0aGUgbG9naWNhbCBET00gZWxlbWVudHMgaW52b2x2ZWQuXG4gKi9cbnZhciBJbnN0YW5jZUhhbmRsZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlSW5zdGFuY2VIYW5kbGUoKSB7XG4gIHZhciBpbnZhbGlkID0gIUluc3RhbmNlSGFuZGxlfHxcbiAgICAhSW5zdGFuY2VIYW5kbGUudHJhdmVyc2VUd29QaGFzZSB8fFxuICAgICFJbnN0YW5jZUhhbmRsZS50cmF2ZXJzZUVudGVyTGVhdmU7XG4gIGlmIChpbnZhbGlkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnN0YW5jZUhhbmRsZSBub3QgaW5qZWN0ZWQgYmVmb3JlIHVzZSEnKTtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgaXMgYSB1bmlmaWVkIGludGVyZmFjZSBmb3IgZXZlbnQgcGx1Z2lucyB0byBiZSBpbnN0YWxsZWQgYW5kIGNvbmZpZ3VyZWQuXG4gKlxuICogRXZlbnQgcGx1Z2lucyBjYW4gaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIGBleHRyYWN0RXZlbnRzYCB7ZnVuY3Rpb24oc3RyaW5nLCBET01FdmVudFRhcmdldCwgc3RyaW5nLCBvYmplY3QpOiAqfVxuICogICAgIFJlcXVpcmVkLiBXaGVuIGEgdG9wLWxldmVsIGV2ZW50IGlzIGZpcmVkLCB0aGlzIG1ldGhvZCBpcyBleHBlY3RlZCB0b1xuICogICAgIGV4dHJhY3Qgc3ludGhldGljIGV2ZW50cyB0aGF0IHdpbGwgaW4gdHVybiBiZSBxdWV1ZWQgYW5kIGRpc3BhdGNoZWQuXG4gKlxuICogICBgZXZlbnRUeXBlc2Age29iamVjdH1cbiAqICAgICBPcHRpb25hbCwgcGx1Z2lucyB0aGF0IGZpcmUgZXZlbnRzIG11c3QgcHVibGlzaCBhIG1hcHBpbmcgb2YgcmVnaXN0cmF0aW9uXG4gKiAgICAgbmFtZXMgdGhhdCBhcmUgdXNlZCB0byByZWdpc3RlciBsaXN0ZW5lcnMuIFZhbHVlcyBvZiB0aGlzIG1hcHBpbmcgbXVzdFxuICogICAgIGJlIG9iamVjdHMgdGhhdCBjb250YWluIGByZWdpc3RyYXRpb25OYW1lYCBvciBgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNgLlxuICpcbiAqICAgYGV4ZWN1dGVEaXNwYXRjaGAge2Z1bmN0aW9uKG9iamVjdCwgZnVuY3Rpb24sIHN0cmluZyl9XG4gKiAgICAgT3B0aW9uYWwsIGFsbG93cyBwbHVnaW5zIHRvIG92ZXJyaWRlIGhvdyBhbiBldmVudCBnZXRzIGRpc3BhdGNoZWQuIEJ5XG4gKiAgICAgZGVmYXVsdCwgdGhlIGxpc3RlbmVyIGlzIHNpbXBseSBpbnZva2VkLlxuICpcbiAqIEVhY2ggcGx1Z2luIHRoYXQgaXMgaW5qZWN0ZWQgaW50byBgRXZlbnRzUGx1Z2luSHViYCBpcyBpbW1lZGlhdGVseSBvcGVyYWJsZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbnZhciBFdmVudFBsdWdpbkh1YiA9IHtcblxuICAvKipcbiAgICogTWV0aG9kcyBmb3IgaW5qZWN0aW5nIGRlcGVuZGVuY2llcy5cbiAgICovXG4gIGluamVjdGlvbjoge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IEluamVjdGVkTW91bnRcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgaW5qZWN0TW91bnQ6IEV2ZW50UGx1Z2luVXRpbHMuaW5qZWN0aW9uLmluamVjdE1vdW50LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IEluamVjdGVkSW5zdGFuY2VIYW5kbGVcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgaW5qZWN0SW5zdGFuY2VIYW5kbGU6IGZ1bmN0aW9uKEluamVjdGVkSW5zdGFuY2VIYW5kbGUpIHtcbiAgICAgIEluc3RhbmNlSGFuZGxlID0gSW5qZWN0ZWRJbnN0YW5jZUhhbmRsZTtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgdmFsaWRhdGVJbnN0YW5jZUhhbmRsZSgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRJbnN0YW5jZUhhbmRsZTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIHZhbGlkYXRlSW5zdGFuY2VIYW5kbGUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBJbnN0YW5jZUhhbmRsZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHthcnJheX0gSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGluamVjdEV2ZW50UGx1Z2luT3JkZXI6IEV2ZW50UGx1Z2luUmVnaXN0cnkuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcixcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpbmplY3RlZE5hbWVzVG9QbHVnaW5zIE1hcCBmcm9tIG5hbWVzIHRvIHBsdWdpbiBtb2R1bGVzLlxuICAgICAqL1xuICAgIGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTogRXZlbnRQbHVnaW5SZWdpc3RyeS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWVcblxuICB9LFxuXG4gIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczogRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MsXG5cbiAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMsXG5cbiAgLyoqXG4gICAqIFN0b3JlcyBgbGlzdGVuZXJgIGF0IGBsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV1baWRdYC4gSXMgaWRlbXBvdGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGNhbGxiYWNrIHRvIHN0b3JlLlxuICAgKi9cbiAgcHV0TGlzdGVuZXI6IGZ1bmN0aW9uKGlkLCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lcikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAhbGlzdGVuZXIgfHwgdHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ0V4cGVjdGVkICVzIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24sIGluc3RlYWQgZ290IHR5cGUgJXMnLFxuICAgICAgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIGxpc3RlbmVyXG4gICAgKSA6IGludmFyaWFudCghbGlzdGVuZXIgfHwgdHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSk7XG5cbiAgICB2YXIgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUgPVxuICAgICAgbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdIHx8IChsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV0gPSB7fSk7XG4gICAgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWVbaWRdID0gbGlzdGVuZXI7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHJldHVybiB7P2Z1bmN0aW9ufSBUaGUgc3RvcmVkIGNhbGxiYWNrLlxuICAgKi9cbiAgZ2V0TGlzdGVuZXI6IGZ1bmN0aW9uKGlkLCByZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgdmFyIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lID0gbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgIHJldHVybiBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSAmJiBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtpZF07XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYSBsaXN0ZW5lciBmcm9tIHRoZSByZWdpc3RyYXRpb24gYmFuay5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKi9cbiAgZGVsZXRlTGlzdGVuZXI6IGZ1bmN0aW9uKGlkLCByZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgdmFyIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lID0gbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgIGlmIChiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSkge1xuICAgICAgZGVsZXRlIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lW2lkXTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIGxpc3RlbmVycyBmb3IgdGhlIERPTSBlbGVtZW50IHdpdGggdGhlIHN1cHBsaWVkIElELlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIERPTSBlbGVtZW50LlxuICAgKi9cbiAgZGVsZXRlQWxsTGlzdGVuZXJzOiBmdW5jdGlvbihpZCkge1xuICAgIGZvciAodmFyIHJlZ2lzdHJhdGlvbk5hbWUgaW4gbGlzdGVuZXJCYW5rKSB7XG4gICAgICBkZWxldGUgbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdW2lkXTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFsbG93cyByZWdpc3RlcmVkIHBsdWdpbnMgYW4gb3Bwb3J0dW5pdHkgdG8gZXh0cmFjdCBldmVudHMgZnJvbSB0b3AtbGV2ZWxcbiAgICogbmF0aXZlIGJyb3dzZXIgZXZlbnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG4gICAgdmFyIGV2ZW50cztcbiAgICB2YXIgcGx1Z2lucyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2lucztcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHBsdWdpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAvLyBOb3QgZXZlcnkgcGx1Z2luIGluIHRoZSBvcmRlcmluZyBtYXkgYmUgbG9hZGVkIGF0IHJ1bnRpbWUuXG4gICAgICB2YXIgcG9zc2libGVQbHVnaW4gPSBwbHVnaW5zW2ldO1xuICAgICAgaWYgKHBvc3NpYmxlUGx1Z2luKSB7XG4gICAgICAgIHZhciBleHRyYWN0ZWRFdmVudHMgPSBwb3NzaWJsZVBsdWdpbi5leHRyYWN0RXZlbnRzKFxuICAgICAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICk7XG4gICAgICAgIGlmIChleHRyYWN0ZWRFdmVudHMpIHtcbiAgICAgICAgICBldmVudHMgPSBhY2N1bXVsYXRlSW50byhldmVudHMsIGV4dHJhY3RlZEV2ZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50cztcbiAgfSxcblxuICAvKipcbiAgICogRW5xdWV1ZXMgYSBzeW50aGV0aWMgZXZlbnQgdGhhdCBzaG91bGQgYmUgZGlzcGF0Y2hlZCB3aGVuXG4gICAqIGBwcm9jZXNzRXZlbnRRdWV1ZWAgaXMgaW52b2tlZC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBldmVudHMgQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZUV2ZW50czogZnVuY3Rpb24oZXZlbnRzKSB7XG4gICAgaWYgKGV2ZW50cykge1xuICAgICAgZXZlbnRRdWV1ZSA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50UXVldWUsIGV2ZW50cyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFsbCBzeW50aGV0aWMgZXZlbnRzIG9uIHRoZSBldmVudCBxdWV1ZS5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwcm9jZXNzRXZlbnRRdWV1ZTogZnVuY3Rpb24oKSB7XG4gICAgLy8gU2V0IGBldmVudFF1ZXVlYCB0byBudWxsIGJlZm9yZSBwcm9jZXNzaW5nIGl0IHNvIHRoYXQgd2UgY2FuIHRlbGwgaWYgbW9yZVxuICAgIC8vIGV2ZW50cyBnZXQgZW5xdWV1ZWQgd2hpbGUgcHJvY2Vzc2luZy5cbiAgICB2YXIgcHJvY2Vzc2luZ0V2ZW50UXVldWUgPSBldmVudFF1ZXVlO1xuICAgIGV2ZW50UXVldWUgPSBudWxsO1xuICAgIGZvckVhY2hBY2N1bXVsYXRlZChwcm9jZXNzaW5nRXZlbnRRdWV1ZSwgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIWV2ZW50UXVldWUsXG4gICAgICAncHJvY2Vzc0V2ZW50UXVldWUoKTogQWRkaXRpb25hbCBldmVudHMgd2VyZSBlbnF1ZXVlZCB3aGlsZSBwcm9jZXNzaW5nICcgK1xuICAgICAgJ2FuIGV2ZW50IHF1ZXVlLiBTdXBwb3J0IGZvciB0aGlzIGhhcyBub3QgeWV0IGJlZW4gaW1wbGVtZW50ZWQuJ1xuICAgICkgOiBpbnZhcmlhbnQoIWV2ZW50UXVldWUpKTtcbiAgfSxcblxuICAvKipcbiAgICogVGhlc2UgYXJlIG5lZWRlZCBmb3IgdGVzdHMgb25seS4gRG8gbm90IHVzZSFcbiAgICovXG4gIF9fcHVyZ2U6IGZ1bmN0aW9uKCkge1xuICAgIGxpc3RlbmVyQmFuayA9IHt9O1xuICB9LFxuXG4gIF9fZ2V0TGlzdGVuZXJCYW5rOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbGlzdGVuZXJCYW5rO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5IdWI7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvRXZlbnRQbHVnaW5IdWIuanNcbiAqKiBtb2R1bGUgaWQgPSAyNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdExlZ2FjeUVsZW1lbnRcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIgbW9uaXRvckNvZGVVc2UgPSByZXF1aXJlKFwiLi9tb25pdG9yQ29kZVVzZVwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIGxlZ2FjeUZhY3RvcnlMb2dzID0ge307XG5mdW5jdGlvbiB3YXJuRm9yTGVnYWN5RmFjdG9yeUNhbGwoKSB7XG4gIGlmICghUmVhY3RMZWdhY3lFbGVtZW50RmFjdG9yeS5faXNMZWdhY3lDYWxsV2FybmluZ0VuYWJsZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgdmFyIG5hbWUgPSBvd25lciAmJiBvd25lci5jb25zdHJ1Y3RvciA/IG93bmVyLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIDogJyc7XG4gIGlmICghbmFtZSkge1xuICAgIG5hbWUgPSAnU29tZXRoaW5nJztcbiAgfVxuICBpZiAobGVnYWN5RmFjdG9yeUxvZ3MuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGVnYWN5RmFjdG9yeUxvZ3NbbmFtZV0gPSB0cnVlO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICBmYWxzZSxcbiAgICBuYW1lICsgJyBpcyBjYWxsaW5nIGEgUmVhY3QgY29tcG9uZW50IGRpcmVjdGx5LiAnICtcbiAgICAnVXNlIGEgZmFjdG9yeSBvciBKU1ggaW5zdGVhZC4gU2VlOiBodHRwOi8vZmIubWUvcmVhY3QtbGVnYWN5ZmFjdG9yeSdcbiAgKSA6IG51bGwpO1xuICBtb25pdG9yQ29kZVVzZSgncmVhY3RfbGVnYWN5X2ZhY3RvcnlfY2FsbCcsIHsgdmVyc2lvbjogMywgbmFtZTogbmFtZSB9KTtcbn1cblxuZnVuY3Rpb24gd2FybkZvclBsYWluRnVuY3Rpb25UeXBlKHR5cGUpIHtcbiAgdmFyIGlzUmVhY3RDbGFzcyA9XG4gICAgdHlwZS5wcm90b3R5cGUgJiZcbiAgICB0eXBlb2YgdHlwZS5wcm90b3R5cGUubW91bnRDb21wb25lbnQgPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdHlwZS5wcm90b3R5cGUucmVjZWl2ZUNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzUmVhY3RDbGFzcykge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgZmFsc2UsXG4gICAgICAnRGlkIG5vdCBleHBlY3QgdG8gZ2V0IGEgUmVhY3QgY2xhc3MgaGVyZS4gVXNlIGBDb21wb25lbnRgIGluc3RlYWQgJyArXG4gICAgICAnb2YgYENvbXBvbmVudC50eXBlYCBvciBgdGhpcy5jb25zdHJ1Y3RvcmAuJ1xuICAgICkgOiBudWxsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIXR5cGUuX3JlYWN0V2FybmVkRm9yVGhpc1R5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHR5cGUuX3JlYWN0V2FybmVkRm9yVGhpc1R5cGUgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAvLyBqdXN0IGluY2FzZSB0aGlzIGlzIGEgZnJvemVuIG9iamVjdCBvciBzb21lIHNwZWNpYWwgb2JqZWN0XG4gICAgICB9XG4gICAgICBtb25pdG9yQ29kZVVzZShcbiAgICAgICAgJ3JlYWN0X25vbl9jb21wb25lbnRfaW5fanN4JyxcbiAgICAgICAgeyB2ZXJzaW9uOiAzLCBuYW1lOiB0eXBlLm5hbWUgfVxuICAgICAgKTtcbiAgICB9XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICBmYWxzZSxcbiAgICAgICdUaGlzIEpTWCB1c2VzIGEgcGxhaW4gZnVuY3Rpb24uIE9ubHkgUmVhY3QgY29tcG9uZW50cyBhcmUgJyArXG4gICAgICAndmFsaWQgaW4gUmVhY3RcXCdzIEpTWCB0cmFuc2Zvcm0uJ1xuICAgICkgOiBudWxsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3YXJuRm9yTm9uTGVnYWN5RmFjdG9yeSh0eXBlKSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgIGZhbHNlLFxuICAgICdEbyBub3QgcGFzcyBSZWFjdC5ET00uJyArIHR5cGUudHlwZSArICcgdG8gSlNYIG9yIGNyZWF0ZUZhY3RvcnkuICcgK1xuICAgICdVc2UgdGhlIHN0cmluZyBcIicgKyB0eXBlLnR5cGUgKyAnXCIgaW5zdGVhZC4nXG4gICkgOiBudWxsKTtcbn1cblxuLyoqXG4gKiBUcmFuc2ZlciBzdGF0aWMgcHJvcGVydGllcyBmcm9tIHRoZSBzb3VyY2UgdG8gdGhlIHRhcmdldC4gRnVuY3Rpb25zIGFyZVxuICogcmVib3VuZCB0byBoYXZlIHRoaXMgcmVmbGVjdCB0aGUgb3JpZ2luYWwgc291cmNlLlxuICovXG5mdW5jdGlvbiBwcm94eVN0YXRpY01ldGhvZHModGFyZ2V0LCBzb3VyY2UpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgdmFyIHZhbHVlID0gc291cmNlW2tleV07XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBib3VuZCA9IHZhbHVlLmJpbmQoc291cmNlKTtcbiAgICAgICAgLy8gQ29weSBhbnkgcHJvcGVydGllcyBkZWZpbmVkIG9uIHRoZSBmdW5jdGlvbiwgc3VjaCBhcyBgaXNSZXF1aXJlZGAgb25cbiAgICAgICAgLy8gYSBQcm9wVHlwZXMgdmFsaWRhdG9yLlxuICAgICAgICBmb3IgKHZhciBrIGluIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICBib3VuZFtrXSA9IHZhbHVlW2tdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0YXJnZXRba2V5XSA9IGJvdW5kO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gV2UgdXNlIGFuIG9iamVjdCBpbnN0ZWFkIG9mIGEgYm9vbGVhbiBiZWNhdXNlIGJvb2xlYW5zIGFyZSBpZ25vcmVkIGJ5IG91clxuLy8gbW9ja2luZyBsaWJyYXJpZXMgd2hlbiB0aGVzZSBmYWN0b3JpZXMgZ2V0cyBtb2NrZWQuXG52YXIgTEVHQUNZX01BUktFUiA9IHt9O1xudmFyIE5PTl9MRUdBQ1lfTUFSS0VSID0ge307XG5cbnZhciBSZWFjdExlZ2FjeUVsZW1lbnRGYWN0b3J5ID0ge307XG5cblJlYWN0TGVnYWN5RWxlbWVudEZhY3Rvcnkud3JhcENyZWF0ZUZhY3RvcnkgPSBmdW5jdGlvbihjcmVhdGVGYWN0b3J5KSB7XG4gIHZhciBsZWdhY3lDcmVhdGVGYWN0b3J5ID0gZnVuY3Rpb24odHlwZSkge1xuICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gTm9uLWZ1bmN0aW9uIHR5cGVzIGNhbm5vdCBiZSBsZWdhY3kgZmFjdG9yaWVzXG4gICAgICByZXR1cm4gY3JlYXRlRmFjdG9yeSh0eXBlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZS5pc1JlYWN0Tm9uTGVnYWN5RmFjdG9yeSkge1xuICAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBhIGZhY3RvcnkgY3JlYXRlZCBieSBSZWFjdERPTSB3ZSB1bndyYXAgaXQgdG8gZ2V0IHRvXG4gICAgICAvLyB0aGUgdW5kZXJseWluZyBzdHJpbmcgdHlwZS4gSXQgc2hvdWxkbid0IGhhdmUgYmVlbiBwYXNzZWQgaGVyZSBzbyB3ZVxuICAgICAgLy8gd2Fybi5cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgd2FybkZvck5vbkxlZ2FjeUZhY3RvcnkodHlwZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlRmFjdG9yeSh0eXBlLnR5cGUpO1xuICAgIH1cblxuICAgIGlmICh0eXBlLmlzUmVhY3RMZWdhY3lGYWN0b3J5KSB7XG4gICAgICAvLyBUaGlzIGlzIHByb2JhYmx5IGEgbGVnYWN5IGZhY3RvcnkgY3JlYXRlZCBieSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5cbiAgICAgIC8vIFdlIHVud3JhcCBpdCB0byBnZXQgdG8gdGhlIHVuZGVybHlpbmcgY2xhc3MuXG4gICAgICByZXR1cm4gY3JlYXRlRmFjdG9yeSh0eXBlLnR5cGUpO1xuICAgIH1cblxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHdhcm5Gb3JQbGFpbkZ1bmN0aW9uVHlwZSh0eXBlKTtcbiAgICB9XG5cbiAgICAvLyBVbmxlc3MgaXQncyBhIGxlZ2FjeSBmYWN0b3J5LCB0aGVuIHRoaXMgaXMgcHJvYmFibHkgYSBwbGFpbiBmdW5jdGlvbixcbiAgICAvLyB0aGF0IGlzIGV4cGVjdGluZyB0byBiZSBpbnZva2VkIGJ5IEpTWC4gV2UgY2FuIGp1c3QgcmV0dXJuIGl0IGFzIGlzLlxuICAgIHJldHVybiB0eXBlO1xuICB9O1xuICByZXR1cm4gbGVnYWN5Q3JlYXRlRmFjdG9yeTtcbn07XG5cblJlYWN0TGVnYWN5RWxlbWVudEZhY3Rvcnkud3JhcENyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbihjcmVhdGVFbGVtZW50KSB7XG4gIHZhciBsZWdhY3lDcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24odHlwZSwgcHJvcHMsIGNoaWxkcmVuKSB7XG4gICAgaWYgKHR5cGVvZiB0eXBlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBOb24tZnVuY3Rpb24gdHlwZXMgY2Fubm90IGJlIGxlZ2FjeSBmYWN0b3JpZXNcbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgdmFyIGFyZ3M7XG5cbiAgICBpZiAodHlwZS5pc1JlYWN0Tm9uTGVnYWN5RmFjdG9yeSkge1xuICAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBhIGZhY3RvcnkgY3JlYXRlZCBieSBSZWFjdERPTSB3ZSB1bndyYXAgaXQgdG8gZ2V0IHRvXG4gICAgICAvLyB0aGUgdW5kZXJseWluZyBzdHJpbmcgdHlwZS4gSXQgc2hvdWxkbid0IGhhdmUgYmVlbiBwYXNzZWQgaGVyZSBzbyB3ZVxuICAgICAgLy8gd2Fybi5cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgd2FybkZvck5vbkxlZ2FjeUZhY3RvcnkodHlwZSk7XG4gICAgICB9XG4gICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgIGFyZ3NbMF0gPSB0eXBlLnR5cGU7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZS5pc1JlYWN0TGVnYWN5RmFjdG9yeSkge1xuICAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBhIGxlZ2FjeSBmYWN0b3J5IGNyZWF0ZWQgYnkgUmVhY3RDb21wb3NpdGVDb21wb25lbnQuXG4gICAgICAvLyBXZSB1bndyYXAgaXQgdG8gZ2V0IHRvIHRoZSB1bmRlcmx5aW5nIGNsYXNzLlxuICAgICAgaWYgKHR5cGUuX2lzTW9ja0Z1bmN0aW9uKSB7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSBtb2NrIGZ1bmN0aW9uLCBwZW9wbGUgd2lsbCBleHBlY3QgaXQgdG8gYmUgY2FsbGVkLiBXZVxuICAgICAgICAvLyB3aWxsIGFjdHVhbGx5IGNhbGwgdGhlIG9yaWdpbmFsIG1vY2sgZmFjdG9yeSBmdW5jdGlvbiBpbnN0ZWFkLiBUaGlzXG4gICAgICAgIC8vIGZ1dHVyZSBwcm9vZnMgdW5pdCB0ZXN0aW5nIHRoYXQgYXNzdW1lIHRoYXQgdGhlc2UgYXJlIGNsYXNzZXMuXG4gICAgICAgIHR5cGUudHlwZS5fbW9ja2VkUmVhY3RDbGFzc0NvbnN0cnVjdG9yID0gdHlwZTtcbiAgICAgIH1cbiAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICAgICAgYXJnc1swXSA9IHR5cGUudHlwZTtcbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cblxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHdhcm5Gb3JQbGFpbkZ1bmN0aW9uVHlwZSh0eXBlKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGlzIGJlaW5nIGNhbGxlZCB3aXRoIGEgcGxhaW4gZnVuY3Rpb24gd2Ugc2hvdWxkIGludm9rZSBpdFxuICAgIC8vIGltbWVkaWF0ZWx5IGFzIGlmIHRoaXMgd2FzIHVzZWQgd2l0aCBsZWdhY3kgSlNYLlxuICAgIHJldHVybiB0eXBlLmFwcGx5KG51bGwsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICB9O1xuICByZXR1cm4gbGVnYWN5Q3JlYXRlRWxlbWVudDtcbn07XG5cblJlYWN0TGVnYWN5RWxlbWVudEZhY3Rvcnkud3JhcEZhY3RvcnkgPSBmdW5jdGlvbihmYWN0b3J5KSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgdHlwZW9mIGZhY3RvcnkgPT09ICdmdW5jdGlvbicsXG4gICAgJ1RoaXMgaXMgc3VwcG9zZSB0byBhY2NlcHQgYSBlbGVtZW50IGZhY3RvcnknXG4gICkgOiBpbnZhcmlhbnQodHlwZW9mIGZhY3RvcnkgPT09ICdmdW5jdGlvbicpKTtcbiAgdmFyIGxlZ2FjeUVsZW1lbnRGYWN0b3J5ID0gZnVuY3Rpb24oY29uZmlnLCBjaGlsZHJlbikge1xuICAgIC8vIFRoaXMgZmFjdG9yeSBzaG91bGQgbm90IGJlIGNhbGxlZCB3aGVuIEpTWCBpcyB1c2VkLiBVc2UgSlNYIGluc3RlYWQuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgd2FybkZvckxlZ2FjeUZhY3RvcnlDYWxsKCk7XG4gICAgfVxuICAgIHJldHVybiBmYWN0b3J5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG4gIHByb3h5U3RhdGljTWV0aG9kcyhsZWdhY3lFbGVtZW50RmFjdG9yeSwgZmFjdG9yeS50eXBlKTtcbiAgbGVnYWN5RWxlbWVudEZhY3RvcnkuaXNSZWFjdExlZ2FjeUZhY3RvcnkgPSBMRUdBQ1lfTUFSS0VSO1xuICBsZWdhY3lFbGVtZW50RmFjdG9yeS50eXBlID0gZmFjdG9yeS50eXBlO1xuICByZXR1cm4gbGVnYWN5RWxlbWVudEZhY3Rvcnk7XG59O1xuXG4vLyBUaGlzIGlzIHVzZWQgdG8gbWFyayBhIGZhY3RvcnkgdGhhdCB3aWxsIHJlbWFpbi4gRS5nLiB3ZSdyZSBhbGxvd2VkIHRvIGNhbGxcbi8vIGl0IGFzIGEgZnVuY3Rpb24uIEhvd2V2ZXIsIHlvdSdyZSBub3Qgc3VwcG9zZSB0byBwYXNzIGl0IHRvIGNyZWF0ZUVsZW1lbnRcbi8vIG9yIGNyZWF0ZUZhY3RvcnksIHNvIGl0IHdpbGwgd2FybiB5b3UgaWYgeW91IGRvLlxuUmVhY3RMZWdhY3lFbGVtZW50RmFjdG9yeS5tYXJrTm9uTGVnYWN5RmFjdG9yeSA9IGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgZmFjdG9yeS5pc1JlYWN0Tm9uTGVnYWN5RmFjdG9yeSA9IE5PTl9MRUdBQ1lfTUFSS0VSO1xuICByZXR1cm4gZmFjdG9yeTtcbn07XG5cbi8vIENoZWNrcyBpZiBhIGZhY3RvcnkgZnVuY3Rpb24gaXMgYWN0dWFsbHkgYSBsZWdhY3kgZmFjdG9yeSBwcmV0ZW5kaW5nIHRvXG4vLyBiZSBhIGNsYXNzLlxuUmVhY3RMZWdhY3lFbGVtZW50RmFjdG9yeS5pc1ZhbGlkRmFjdG9yeSA9IGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgLy8gVE9ETzogVGhpcyB3aWxsIGJlIHJlbW92ZWQgYW5kIG1vdmVkIGludG8gYSBjbGFzcyB2YWxpZGF0b3Igb3Igc29tZXRoaW5nLlxuICByZXR1cm4gdHlwZW9mIGZhY3RvcnkgPT09ICdmdW5jdGlvbicgJiZcbiAgICBmYWN0b3J5LmlzUmVhY3RMZWdhY3lGYWN0b3J5ID09PSBMRUdBQ1lfTUFSS0VSO1xufTtcblxuUmVhY3RMZWdhY3lFbGVtZW50RmFjdG9yeS5pc1ZhbGlkQ2xhc3MgPSBmdW5jdGlvbihmYWN0b3J5KSB7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIGZhbHNlLFxuICAgICAgJ2lzVmFsaWRDbGFzcyBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gJyArXG4gICAgICAnVXNlIGEgbW9yZSBzcGVjaWZpYyB2YWxpZGF0b3IgaW5zdGVhZC4nXG4gICAgKSA6IG51bGwpO1xuICB9XG4gIHJldHVybiBSZWFjdExlZ2FjeUVsZW1lbnRGYWN0b3J5LmlzVmFsaWRGYWN0b3J5KGZhY3RvcnkpO1xufTtcblxuUmVhY3RMZWdhY3lFbGVtZW50RmFjdG9yeS5faXNMZWdhY3lDYWxsV2FybmluZ0VuYWJsZWQgPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TGVnYWN5RWxlbWVudEZhY3Rvcnk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3RMZWdhY3lFbGVtZW50LmpzXG4gKiogbW9kdWxlIGlkID0gMjdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNVSUV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNFdmVudFwiKTtcblxudmFyIGdldEV2ZW50VGFyZ2V0ID0gcmVxdWlyZShcIi4vZ2V0RXZlbnRUYXJnZXRcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBVSUV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIFVJRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHZpZXc6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnZpZXcpIHtcbiAgICAgIHJldHVybiBldmVudC52aWV3O1xuICAgIH1cblxuICAgIHZhciB0YXJnZXQgPSBnZXRFdmVudFRhcmdldChldmVudCk7XG4gICAgaWYgKHRhcmdldCAhPSBudWxsICYmIHRhcmdldC53aW5kb3cgPT09IHRhcmdldCkge1xuICAgICAgLy8gdGFyZ2V0IGlzIGEgd2luZG93IG9iamVjdFxuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICB2YXIgZG9jID0gdGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG4gICAgLy8gVE9ETzogRmlndXJlIG91dCB3aHkgYG93bmVyRG9jdW1lbnRgIGlzIHNvbWV0aW1lcyB1bmRlZmluZWQgaW4gSUU4LlxuICAgIGlmIChkb2MpIHtcbiAgICAgIHJldHVybiBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9XG4gIH0sXG4gIGRldGFpbDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQuZGV0YWlsIHx8IDA7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY0V2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNVSUV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcbiAgU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY1VJRXZlbnQsIFVJRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY1VJRXZlbnQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvU3ludGhldGljVUlFdmVudC5qc1xuICoqIG1vZHVsZSBpZCA9IDI4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZighbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDI5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRSb290SW5zdGFuY2VzRnJvbVJlYWN0TW91bnQgPSByZXF1aXJlKCcuL2dldFJvb3RJbnN0YW5jZXNGcm9tUmVhY3RNb3VudCcpO1xuXG52YXIgaW5qZWN0ZWRQcm92aWRlciA9IG51bGwsXG4gICAgZGlkV2FybiA9IGZhbHNlO1xuXG5mdW5jdGlvbiB3YXJuT25jZSgpIHtcbiAgaWYgKCFkaWRXYXJuKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ0l0IGFwcGVhcnMgdGhhdCBSZWFjdCBIb3QgTG9hZGVyIGlzblxcJ3QgY29uZmlndXJlZCBjb3JyZWN0bHkuICcgK1xuICAgICAgJ0lmIHlvdVxcJ3JlIHVzaW5nIE5QTSwgbWFrZSBzdXJlIHlvdXIgZGVwZW5kZW5jaWVzIGRvblxcJ3QgZHJhZyBkdXBsaWNhdGUgUmVhY3QgZGlzdHJpYnV0aW9ucyBpbnRvIHRoZWlyIG5vZGVfbW9kdWxlcyBhbmQgdGhhdCByZXF1aXJlKFwicmVhY3RcIikgY29ycmVzcG9uZHMgdG8gdGhlIFJlYWN0IGluc3RhbmNlIHlvdSByZW5kZXIgeW91ciBhcHAgd2l0aC4nLFxuICAgICAgJ0lmIHlvdVxcJ3JlIHVzaW5nIGEgcHJlY29tcGlsZWQgdmVyc2lvbiBvZiBSZWFjdCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9nYWVhcm9uL3JlYWN0LWhvdC1sb2FkZXIvdHJlZS9tYXN0ZXIvZG9jcyN1c2FnZS13aXRoLWV4dGVybmFsLXJlYWN0IGZvciBpbnRlZ3JhdGlvbiBpbnN0cnVjdGlvbnMuJ1xuICAgICk7XG4gIH1cblxuICBkaWRXYXJuID0gdHJ1ZTtcbn1cblxudmFyIFJvb3RJbnN0YW5jZVByb3ZpZGVyID0ge1xuICBpbmplY3Rpb246IHtcbiAgICBpbmplY3RQcm92aWRlcjogZnVuY3Rpb24gKHByb3ZpZGVyKSB7XG4gICAgICBpbmplY3RlZFByb3ZpZGVyID0gcHJvdmlkZXI7XG4gICAgfVxuICB9LFxuXG4gIGdldFJvb3RJbnN0YW5jZXM6IGZ1bmN0aW9uIChSZWFjdE1vdW50KSB7XG4gICAgaWYgKGluamVjdGVkUHJvdmlkZXIpIHtcbiAgICAgIHJldHVybiBpbmplY3RlZFByb3ZpZGVyLmdldFJvb3RJbnN0YW5jZXMoKTtcbiAgICB9XG5cbiAgICB2YXIgaW5zdGFuY2VzID0gUmVhY3RNb3VudCAmJiBnZXRSb290SW5zdGFuY2VzRnJvbVJlYWN0TW91bnQoUmVhY3RNb3VudCkgfHwgW107XG4gICAgaWYgKCFPYmplY3Qua2V5cyhpbnN0YW5jZXMpLmxlbmd0aCkge1xuICAgICAgd2Fybk9uY2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zdGFuY2VzO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJvb3RJbnN0YW5jZVByb3ZpZGVyO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0LWhvdC1sb2FkZXIvUm9vdEluc3RhbmNlUHJvdmlkZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAzMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNSZWFjdENsYXNzaXNoID0gcmVxdWlyZSgnLi9pc1JlYWN0Q2xhc3Npc2gnKSxcbiAgICBpc1JlYWN0RWxlbWVudGlzaCA9IHJlcXVpcmUoJy4vaXNSZWFjdEVsZW1lbnRpc2gnKTtcblxuZnVuY3Rpb24gbWFrZUV4cG9ydHNIb3QobSkge1xuICBpZiAoaXNSZWFjdEVsZW1lbnRpc2gobS5leHBvcnRzKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBmcmVzaEV4cG9ydHMgPSBtLmV4cG9ydHMsXG4gICAgICBmb3VuZFJlYWN0Q2xhc3NlcyA9IGZhbHNlO1xuXG4gIGlmIChpc1JlYWN0Q2xhc3Npc2gobS5leHBvcnRzKSkge1xuICAgIG0uZXhwb3J0cyA9IG0ubWFrZUhvdChtLmV4cG9ydHMsICdfX01PRFVMRV9FWFBPUlRTJyk7XG4gICAgZm91bmRSZWFjdENsYXNzZXMgPSB0cnVlO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIG0uZXhwb3J0cykge1xuICAgIGlmIChmcmVzaEV4cG9ydHMuaGFzT3duUHJvcGVydHkoa2V5KSAmJlxuICAgICAgICBpc1JlYWN0Q2xhc3Npc2goZnJlc2hFeHBvcnRzW2tleV0pKSB7XG4gICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLmV4cG9ydHMsIGtleSkud3JpdGFibGUpIHtcbiAgICAgICAgbS5leHBvcnRzW2tleV0gPSBtLm1ha2VIb3QoZnJlc2hFeHBvcnRzW2tleV0sICdfX01PRFVMRV9FWFBPUlRTXycgKyBrZXkpO1xuICAgICAgICBmb3VuZFJlYWN0Q2xhc3NlcyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJDYW4ndCBtYWtlIGNsYXNzIFwiICsga2V5ICsgXCIgaG90IHJlbG9hZGFibGUgZHVlIHRvIGJlaW5nIHJlYWQtb25seS4gWW91IGNhbiBleGNsdWRlIGZpbGVzIG9yIGRpcmVjdG9yaWVzIChmb3IgZXhhbXBsZSwgL25vZGVfbW9kdWxlcy8pIHVzaW5nICdleGNsdWRlJyBvcHRpb24gaW4gbG9hZGVyIGNvbmZpZ3VyYXRpb24uXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmb3VuZFJlYWN0Q2xhc3Nlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYWtlRXhwb3J0c0hvdDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0LWhvdC1sb2FkZXIvbWFrZUV4cG9ydHNIb3QuanNcbiAqKiBtb2R1bGUgaWQgPSAzMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbWFrZU1ha2VIb3QnKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC1ob3QtbG9hZGVyL34vcmVhY3QtaG90LWFwaS9tb2R1bGVzL2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gMzJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBBdXRvRm9jdXNNaXhpblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGZvY3VzTm9kZSA9IHJlcXVpcmUoXCIuL2ZvY3VzTm9kZVwiKTtcblxudmFyIEF1dG9Gb2N1c01peGluID0ge1xuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuYXV0b0ZvY3VzKSB7XG4gICAgICBmb2N1c05vZGUodGhpcy5nZXRET01Ob2RlKCkpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdXRvRm9jdXNNaXhpbjtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9BdXRvRm9jdXNNaXhpbi5qc1xuICoqIG1vZHVsZSBpZCA9IDMzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RW1wdHlDb21wb25lbnRcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxudmFyIGNvbXBvbmVudDtcbi8vIFRoaXMgcmVnaXN0cnkga2VlcHMgdHJhY2sgb2YgdGhlIFJlYWN0IElEcyBvZiB0aGUgY29tcG9uZW50cyB0aGF0IHJlbmRlcmVkIHRvXG4vLyBgbnVsbGAgKGluIHJlYWxpdHkgYSBwbGFjZWhvbGRlciBzdWNoIGFzIGBub3NjcmlwdGApXG52YXIgbnVsbENvbXBvbmVudElkc1JlZ2lzdHJ5ID0ge307XG5cbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50SW5qZWN0aW9uID0ge1xuICBpbmplY3RFbXB0eUNvbXBvbmVudDogZnVuY3Rpb24oZW1wdHlDb21wb25lbnQpIHtcbiAgICBjb21wb25lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeShlbXB0eUNvbXBvbmVudCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBUaGUgaW5qZWN0ZWQgZW1wdHkgY29tcG9uZW50LlxuICovXG5mdW5jdGlvbiBnZXRFbXB0eUNvbXBvbmVudCgpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBjb21wb25lbnQsXG4gICAgJ1RyeWluZyB0byByZXR1cm4gbnVsbCBmcm9tIGEgcmVuZGVyLCBidXQgbm8gbnVsbCBwbGFjZWhvbGRlciBjb21wb25lbnQgJyArXG4gICAgJ3dhcyBpbmplY3RlZC4nXG4gICkgOiBpbnZhcmlhbnQoY29tcG9uZW50KSk7XG4gIHJldHVybiBjb21wb25lbnQoKTtcbn1cblxuLyoqXG4gKiBNYXJrIHRoZSBjb21wb25lbnQgYXMgaGF2aW5nIHJlbmRlcmVkIHRvIG51bGwuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ29tcG9uZW50J3MgYF9yb290Tm9kZUlEYC5cbiAqL1xuZnVuY3Rpb24gcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQoaWQpIHtcbiAgbnVsbENvbXBvbmVudElkc1JlZ2lzdHJ5W2lkXSA9IHRydWU7XG59XG5cbi8qKlxuICogVW5tYXJrIHRoZSBjb21wb25lbnQgYXMgaGF2aW5nIHJlbmRlcmVkIHRvIG51bGw6IGl0IHJlbmRlcnMgdG8gc29tZXRoaW5nIG5vdy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBDb21wb25lbnQncyBgX3Jvb3ROb2RlSURgLlxuICovXG5mdW5jdGlvbiBkZXJlZ2lzdGVyTnVsbENvbXBvbmVudElEKGlkKSB7XG4gIGRlbGV0ZSBudWxsQ29tcG9uZW50SWRzUmVnaXN0cnlbaWRdO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBDb21wb25lbnQncyBgX3Jvb3ROb2RlSURgLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY29tcG9uZW50IGlzIHJlbmRlcmVkIHRvIG51bGwuXG4gKi9cbmZ1bmN0aW9uIGlzTnVsbENvbXBvbmVudElEKGlkKSB7XG4gIHJldHVybiBudWxsQ29tcG9uZW50SWRzUmVnaXN0cnlbaWRdO1xufVxuXG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHtcbiAgZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRDogZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRCxcbiAgZ2V0RW1wdHlDb21wb25lbnQ6IGdldEVtcHR5Q29tcG9uZW50LFxuICBpbmplY3Rpb246IFJlYWN0RW1wdHlDb21wb25lbnRJbmplY3Rpb24sXG4gIGlzTnVsbENvbXBvbmVudElEOiBpc051bGxDb21wb25lbnRJRCxcbiAgcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQ6IHJlZ2lzdGVyTnVsbENvbXBvbmVudElEXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RW1wdHlDb21wb25lbnQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3RFbXB0eUNvbXBvbmVudC5qc1xuICoqIG1vZHVsZSBpZCA9IDM0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljTW91c2VFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNVSUV2ZW50XCIpO1xudmFyIFZpZXdwb3J0TWV0cmljcyA9IHJlcXVpcmUoXCIuL1ZpZXdwb3J0TWV0cmljc1wiKTtcblxudmFyIGdldEV2ZW50TW9kaWZpZXJTdGF0ZSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIE1vdXNlRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgTW91c2VFdmVudEludGVyZmFjZSA9IHtcbiAgc2NyZWVuWDogbnVsbCxcbiAgc2NyZWVuWTogbnVsbCxcbiAgY2xpZW50WDogbnVsbCxcbiAgY2xpZW50WTogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlLFxuICBidXR0b246IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgLy8gV2Via2l0LCBGaXJlZm94LCBJRTkrXG4gICAgLy8gd2hpY2g6ICAxIDIgM1xuICAgIC8vIGJ1dHRvbjogMCAxIDIgKHN0YW5kYXJkKVxuICAgIHZhciBidXR0b24gPSBldmVudC5idXR0b247XG4gICAgaWYgKCd3aGljaCcgaW4gZXZlbnQpIHtcbiAgICAgIHJldHVybiBidXR0b247XG4gICAgfVxuICAgIC8vIElFPDlcbiAgICAvLyB3aGljaDogIHVuZGVmaW5lZFxuICAgIC8vIGJ1dHRvbjogMCAwIDBcbiAgICAvLyBidXR0b246IDEgNCAyIChvbm1vdXNldXApXG4gICAgcmV0dXJuIGJ1dHRvbiA9PT0gMiA/IDIgOiBidXR0b24gPT09IDQgPyAxIDogMDtcbiAgfSxcbiAgYnV0dG9uczogbnVsbCxcbiAgcmVsYXRlZFRhcmdldDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQucmVsYXRlZFRhcmdldCB8fCAoXG4gICAgICBldmVudC5mcm9tRWxlbWVudCA9PT0gZXZlbnQuc3JjRWxlbWVudCA/XG4gICAgICAgIGV2ZW50LnRvRWxlbWVudCA6XG4gICAgICAgIGV2ZW50LmZyb21FbGVtZW50XG4gICAgKTtcbiAgfSxcbiAgLy8gXCJQcm9wcmlldGFyeVwiIEludGVyZmFjZS5cbiAgcGFnZVg6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuICdwYWdlWCcgaW4gZXZlbnQgP1xuICAgICAgZXZlbnQucGFnZVggOlxuICAgICAgZXZlbnQuY2xpZW50WCArIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsTGVmdDtcbiAgfSxcbiAgcGFnZVk6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuICdwYWdlWScgaW4gZXZlbnQgP1xuICAgICAgZXZlbnQucGFnZVkgOlxuICAgICAgZXZlbnQuY2xpZW50WSArIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsVG9wO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNNb3VzZUV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcbiAgU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xufVxuXG5TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNNb3VzZUV2ZW50LCBNb3VzZUV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1N5bnRoZXRpY01vdXNlRXZlbnQuanNcbiAqKiBtb2R1bGUgaWQgPSAzNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFRyYW5zYWN0aW9uXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogYFRyYW5zYWN0aW9uYCBjcmVhdGVzIGEgYmxhY2sgYm94IHRoYXQgaXMgYWJsZSB0byB3cmFwIGFueSBtZXRob2Qgc3VjaCB0aGF0XG4gKiBjZXJ0YWluIGludmFyaWFudHMgYXJlIG1haW50YWluZWQgYmVmb3JlIGFuZCBhZnRlciB0aGUgbWV0aG9kIGlzIGludm9rZWRcbiAqIChFdmVuIGlmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gd2hpbGUgaW52b2tpbmcgdGhlIHdyYXBwZWQgbWV0aG9kKS4gV2hvZXZlclxuICogaW5zdGFudGlhdGVzIGEgdHJhbnNhY3Rpb24gY2FuIHByb3ZpZGUgZW5mb3JjZXJzIG9mIHRoZSBpbnZhcmlhbnRzIGF0XG4gKiBjcmVhdGlvbiB0aW1lLiBUaGUgYFRyYW5zYWN0aW9uYCBjbGFzcyBpdHNlbGYgd2lsbCBzdXBwbHkgb25lIGFkZGl0aW9uYWxcbiAqIGF1dG9tYXRpYyBpbnZhcmlhbnQgZm9yIHlvdSAtIHRoZSBpbnZhcmlhbnQgdGhhdCBhbnkgdHJhbnNhY3Rpb24gaW5zdGFuY2VcbiAqIHNob3VsZCBub3QgYmUgcnVuIHdoaWxlIGl0IGlzIGFscmVhZHkgYmVpbmcgcnVuLiBZb3Ugd291bGQgdHlwaWNhbGx5IGNyZWF0ZSBhXG4gKiBzaW5nbGUgaW5zdGFuY2Ugb2YgYSBgVHJhbnNhY3Rpb25gIGZvciByZXVzZSBtdWx0aXBsZSB0aW1lcywgdGhhdCBwb3RlbnRpYWxseVxuICogaXMgdXNlZCB0byB3cmFwIHNldmVyYWwgZGlmZmVyZW50IG1ldGhvZHMuIFdyYXBwZXJzIGFyZSBleHRyZW1lbHkgc2ltcGxlIC1cbiAqIHRoZXkgb25seSByZXF1aXJlIGltcGxlbWVudGluZyB0d28gbWV0aG9kcy5cbiAqXG4gKiA8cHJlPlxuICogICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXJzIChpbmplY3RlZCBhdCBjcmVhdGlvbiB0aW1lKVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgICAgICAgICtcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tK1xuICogICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgIHYgICAgICAgIHwgICAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgICAgKy0tLS0tLS0tLS0tLS0tLSsgICB8ICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgICstLXwgICAgd3JhcHBlcjEgICB8LS0tfC0tLS0rICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICArLS0tLS0tLS0tLS0tLS0tKyAgIHYgICAgfCAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgICAgICAgICArLS0tLS0tLS0tLS0tLSsgIHwgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgICstLS0tfCAgIHdyYXBwZXIyICB8LS0tLS0tLS0rICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICAgICB8ICAgICstLS0tLS0tLS0tLS0tKyAgfCAgICAgfCAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgICAgfCAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHYgICAgIHYgICAgICAgICAgICAgICAgICAgICB2ICAgICB2ICAgfCB3cmFwcGVyXG4gKiAgICAgICAgICAgICAgICAgICAgfCArLS0tKyArLS0tKyAgICstLS0tLS0tLS0rICAgKy0tLSsgKy0tLSsgfCBpbnZhcmlhbnRzXG4gKiBwZXJmb3JtKGFueU1ldGhvZCkgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfCBtYWludGFpbmVkXG4gKiArLS0tLS0tLS0tLS0tLS0tLS0+fC18LS0tfC18LS0tfC0tPnxhbnlNZXRob2R8LS0tfC0tLXwtfC0tLXwtfC0tLS0tLS0tPlxuICogICAgICAgICAgICAgICAgICAgIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHxcbiAqICAgICAgICAgICAgICAgICAgICB8IHwgICB8IHwgICB8ICAgfCAgICAgICAgIHwgICB8ICAgfCB8ICAgfCB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfFxuICogICAgICAgICAgICAgICAgICAgIHwgKy0tLSsgKy0tLSsgICArLS0tLS0tLS0tKyAgICstLS0rICstLS0rIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICBpbml0aWFsaXplICAgICAgICAgICAgICAgICAgICBjbG9zZSAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xuICogPC9wcmU+XG4gKlxuICogVXNlIGNhc2VzOlxuICogLSBQcmVzZXJ2aW5nIHRoZSBpbnB1dCBzZWxlY3Rpb24gcmFuZ2VzIGJlZm9yZS9hZnRlciByZWNvbmNpbGlhdGlvbi5cbiAqICAgUmVzdG9yaW5nIHNlbGVjdGlvbiBldmVuIGluIHRoZSBldmVudCBvZiBhbiB1bmV4cGVjdGVkIGVycm9yLlxuICogLSBEZWFjdGl2YXRpbmcgZXZlbnRzIHdoaWxlIHJlYXJyYW5naW5nIHRoZSBET00sIHByZXZlbnRpbmcgYmx1cnMvZm9jdXNlcyxcbiAqICAgd2hpbGUgZ3VhcmFudGVlaW5nIHRoYXQgYWZ0ZXJ3YXJkcywgdGhlIGV2ZW50IHN5c3RlbSBpcyByZWFjdGl2YXRlZC5cbiAqIC0gRmx1c2hpbmcgYSBxdWV1ZSBvZiBjb2xsZWN0ZWQgRE9NIG11dGF0aW9ucyB0byB0aGUgbWFpbiBVSSB0aHJlYWQgYWZ0ZXIgYVxuICogICByZWNvbmNpbGlhdGlvbiB0YWtlcyBwbGFjZSBpbiBhIHdvcmtlciB0aHJlYWQuXG4gKiAtIEludm9raW5nIGFueSBjb2xsZWN0ZWQgYGNvbXBvbmVudERpZFVwZGF0ZWAgY2FsbGJhY2tzIGFmdGVyIHJlbmRlcmluZyBuZXdcbiAqICAgY29udGVudC5cbiAqIC0gKEZ1dHVyZSB1c2UgY2FzZSk6IFdyYXBwaW5nIHBhcnRpY3VsYXIgZmx1c2hlcyBvZiB0aGUgYFJlYWN0V29ya2VyYCBxdWV1ZVxuICogICB0byBwcmVzZXJ2ZSB0aGUgYHNjcm9sbFRvcGAgKGFuIGF1dG9tYXRpYyBzY3JvbGwgYXdhcmUgRE9NKS5cbiAqIC0gKEZ1dHVyZSB1c2UgY2FzZSk6IExheW91dCBjYWxjdWxhdGlvbnMgYmVmb3JlIGFuZCBhZnRlciBET00gdXBhdGVzLlxuICpcbiAqIFRyYW5zYWN0aW9uYWwgcGx1Z2luIEFQSTpcbiAqIC0gQSBtb2R1bGUgdGhhdCBoYXMgYW4gYGluaXRpYWxpemVgIG1ldGhvZCB0aGF0IHJldHVybnMgYW55IHByZWNvbXB1dGF0aW9uLlxuICogLSBhbmQgYSBgY2xvc2VgIG1ldGhvZCB0aGF0IGFjY2VwdHMgdGhlIHByZWNvbXB1dGF0aW9uLiBgY2xvc2VgIGlzIGludm9rZWRcbiAqICAgd2hlbiB0aGUgd3JhcHBlZCBwcm9jZXNzIGlzIGNvbXBsZXRlZCwgb3IgaGFzIGZhaWxlZC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PFRyYW5zYWN0aW9uYWxXcmFwcGVyPn0gdHJhbnNhY3Rpb25XcmFwcGVyIFdyYXBwZXIgbW9kdWxlc1xuICogdGhhdCBpbXBsZW1lbnQgYGluaXRpYWxpemVgIGFuZCBgY2xvc2VgLlxuICogQHJldHVybiB7VHJhbnNhY3Rpb259IFNpbmdsZSB0cmFuc2FjdGlvbiBmb3IgcmV1c2UgaW4gdGhyZWFkLlxuICpcbiAqIEBjbGFzcyBUcmFuc2FjdGlvblxuICovXG52YXIgTWl4aW4gPSB7XG4gIC8qKlxuICAgKiBTZXRzIHVwIHRoaXMgaW5zdGFuY2Ugc28gdGhhdCBpdCBpcyBwcmVwYXJlZCBmb3IgY29sbGVjdGluZyBtZXRyaWNzLiBEb2VzXG4gICAqIHNvIHN1Y2ggdGhhdCB0aGlzIHNldHVwIG1ldGhvZCBtYXkgYmUgdXNlZCBvbiBhbiBpbnN0YW5jZSB0aGF0IGlzIGFscmVhZHlcbiAgICogaW5pdGlhbGl6ZWQsIGluIGEgd2F5IHRoYXQgZG9lcyBub3QgY29uc3VtZSBhZGRpdGlvbmFsIG1lbW9yeSB1cG9uIHJldXNlLlxuICAgKiBUaGF0IGNhbiBiZSB1c2VmdWwgaWYgeW91IGRlY2lkZSB0byBtYWtlIHlvdXIgc3ViY2xhc3Mgb2YgdGhpcyBtaXhpbiBhXG4gICAqIFwiUG9vbGVkQ2xhc3NcIi5cbiAgICovXG4gIHJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLmdldFRyYW5zYWN0aW9uV3JhcHBlcnMoKTtcbiAgICBpZiAoIXRoaXMud3JhcHBlckluaXREYXRhKSB7XG4gICAgICB0aGlzLndyYXBwZXJJbml0RGF0YSA9IFtdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndyYXBwZXJJbml0RGF0YS5sZW5ndGggPSAwO1xuICAgIH1cbiAgICB0aGlzLl9pc0luVHJhbnNhY3Rpb24gPSBmYWxzZTtcbiAgfSxcblxuICBfaXNJblRyYW5zYWN0aW9uOiBmYWxzZSxcblxuICAvKipcbiAgICogQGFic3RyYWN0XG4gICAqIEByZXR1cm4ge0FycmF5PFRyYW5zYWN0aW9uV3JhcHBlcj59IEFycmF5IG9mIHRyYW5zYWN0aW9uIHdyYXBwZXJzLlxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogbnVsbCxcblxuICBpc0luVHJhbnNhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAhIXRoaXMuX2lzSW5UcmFuc2FjdGlvbjtcbiAgfSxcblxuICAvKipcbiAgICogRXhlY3V0ZXMgdGhlIGZ1bmN0aW9uIHdpdGhpbiBhIHNhZmV0eSB3aW5kb3cuIFVzZSB0aGlzIGZvciB0aGUgdG9wIGxldmVsXG4gICAqIG1ldGhvZHMgdGhhdCByZXN1bHQgaW4gbGFyZ2UgYW1vdW50cyBvZiBjb21wdXRhdGlvbi9tdXRhdGlvbnMgdGhhdCB3b3VsZFxuICAgKiBuZWVkIHRvIGJlIHNhZmV0eSBjaGVja2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXRob2QgTWVtYmVyIG9mIHNjb3BlIHRvIGNhbGwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzY29wZSBTY29wZSB0byBpbnZva2UgZnJvbS5cbiAgICogQHBhcmFtIHtPYmplY3Q/PX0gYXJncy4uLiBBcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgbWV0aG9kIChvcHRpb25hbCkuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVscHMgcHJldmVudCBuZWVkIHRvIGJpbmQgaW4gbWFueSBjYXNlcy5cbiAgICogQHJldHVybiBSZXR1cm4gdmFsdWUgZnJvbSBgbWV0aG9kYC5cbiAgICovXG4gIHBlcmZvcm06IGZ1bmN0aW9uKG1ldGhvZCwgc2NvcGUsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIXRoaXMuaXNJblRyYW5zYWN0aW9uKCksXG4gICAgICAnVHJhbnNhY3Rpb24ucGVyZm9ybSguLi4pOiBDYW5ub3QgaW5pdGlhbGl6ZSBhIHRyYW5zYWN0aW9uIHdoZW4gdGhlcmUgJyArXG4gICAgICAnaXMgYWxyZWFkeSBhbiBvdXRzdGFuZGluZyB0cmFuc2FjdGlvbi4nXG4gICAgKSA6IGludmFyaWFudCghdGhpcy5pc0luVHJhbnNhY3Rpb24oKSkpO1xuICAgIHZhciBlcnJvclRocm93bjtcbiAgICB2YXIgcmV0O1xuICAgIHRyeSB7XG4gICAgICB0aGlzLl9pc0luVHJhbnNhY3Rpb24gPSB0cnVlO1xuICAgICAgLy8gQ2F0Y2hpbmcgZXJyb3JzIG1ha2VzIGRlYnVnZ2luZyBtb3JlIGRpZmZpY3VsdCwgc28gd2Ugc3RhcnQgd2l0aFxuICAgICAgLy8gZXJyb3JUaHJvd24gc2V0IHRvIHRydWUgYmVmb3JlIHNldHRpbmcgaXQgdG8gZmFsc2UgYWZ0ZXIgY2FsbGluZ1xuICAgICAgLy8gY2xvc2UgLS0gaWYgaXQncyBzdGlsbCBzZXQgdG8gdHJ1ZSBpbiB0aGUgZmluYWxseSBibG9jaywgaXQgbWVhbnNcbiAgICAgIC8vIG9uZSBvZiB0aGVzZSBjYWxscyB0aHJldy5cbiAgICAgIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZUFsbCgwKTtcbiAgICAgIHJldCA9IG1ldGhvZC5jYWxsKHNjb3BlLCBhLCBiLCBjLCBkLCBlLCBmKTtcbiAgICAgIGVycm9yVGhyb3duID0gZmFsc2U7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgIC8vIElmIGBtZXRob2RgIHRocm93cywgcHJlZmVyIHRvIHNob3cgdGhhdCBzdGFjayB0cmFjZSBvdmVyIGFueSB0aHJvd25cbiAgICAgICAgICAvLyBieSBpbnZva2luZyBgY2xvc2VBbGxgLlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlQWxsKDApO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBTaW5jZSBgbWV0aG9kYCBkaWRuJ3QgdGhyb3csIHdlIGRvbid0IHdhbnQgdG8gc2lsZW5jZSB0aGUgZXhjZXB0aW9uXG4gICAgICAgICAgLy8gaGVyZS5cbiAgICAgICAgICB0aGlzLmNsb3NlQWxsKDApO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLl9pc0luVHJhbnNhY3Rpb24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfSxcblxuICBpbml0aWFsaXplQWxsOiBmdW5jdGlvbihzdGFydEluZGV4KSB7XG4gICAgdmFyIHRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnM7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCB0cmFuc2FjdGlvbldyYXBwZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgd3JhcHBlciA9IHRyYW5zYWN0aW9uV3JhcHBlcnNbaV07XG4gICAgICB0cnkge1xuICAgICAgICAvLyBDYXRjaGluZyBlcnJvcnMgbWFrZXMgZGVidWdnaW5nIG1vcmUgZGlmZmljdWx0LCBzbyB3ZSBzdGFydCB3aXRoIHRoZVxuICAgICAgICAvLyBPQlNFUlZFRF9FUlJPUiBzdGF0ZSBiZWZvcmUgb3ZlcndyaXRpbmcgaXQgd2l0aCB0aGUgcmVhbCByZXR1cm4gdmFsdWVcbiAgICAgICAgLy8gb2YgaW5pdGlhbGl6ZSAtLSBpZiBpdCdzIHN0aWxsIHNldCB0byBPQlNFUlZFRF9FUlJPUiBpbiB0aGUgZmluYWxseVxuICAgICAgICAvLyBibG9jaywgaXQgbWVhbnMgd3JhcHBlci5pbml0aWFsaXplIHRocmV3LlxuICAgICAgICB0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9IFRyYW5zYWN0aW9uLk9CU0VSVkVEX0VSUk9SO1xuICAgICAgICB0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9IHdyYXBwZXIuaW5pdGlhbGl6ZSA/XG4gICAgICAgICAgd3JhcHBlci5pbml0aWFsaXplLmNhbGwodGhpcykgOlxuICAgICAgICAgIG51bGw7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAodGhpcy53cmFwcGVySW5pdERhdGFbaV0gPT09IFRyYW5zYWN0aW9uLk9CU0VSVkVEX0VSUk9SKSB7XG4gICAgICAgICAgLy8gVGhlIGluaXRpYWxpemVyIGZvciB3cmFwcGVyIGkgdGhyZXcgYW4gZXJyb3I7IGluaXRpYWxpemUgdGhlXG4gICAgICAgICAgLy8gcmVtYWluaW5nIHdyYXBwZXJzIGJ1dCBzaWxlbmNlIGFueSBleGNlcHRpb25zIGZyb20gdGhlbSB0byBlbnN1cmVcbiAgICAgICAgICAvLyB0aGF0IHRoZSBmaXJzdCBlcnJvciBpcyB0aGUgb25lIHRvIGJ1YmJsZSB1cC5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplQWxsKGkgKyAxKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZXMgZWFjaCBvZiBgdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzLmNsb3NlW2ldYCBmdW5jdGlvbnMsIHBhc3NpbmcgaW50b1xuICAgKiB0aGVtIHRoZSByZXNwZWN0aXZlIHJldHVybiB2YWx1ZXMgb2YgYHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycy5pbml0W2ldYFxuICAgKiAoYGNsb3NlYHJzIHRoYXQgY29ycmVzcG9uZCB0byBpbml0aWFsaXplcnMgdGhhdCBmYWlsZWQgd2lsbCBub3QgYmVcbiAgICogaW52b2tlZCkuXG4gICAqL1xuICBjbG9zZUFsbDogZnVuY3Rpb24oc3RhcnRJbmRleCkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICB0aGlzLmlzSW5UcmFuc2FjdGlvbigpLFxuICAgICAgJ1RyYW5zYWN0aW9uLmNsb3NlQWxsKCk6IENhbm5vdCBjbG9zZSB0cmFuc2FjdGlvbiB3aGVuIG5vbmUgYXJlIG9wZW4uJ1xuICAgICkgOiBpbnZhcmlhbnQodGhpcy5pc0luVHJhbnNhY3Rpb24oKSkpO1xuICAgIHZhciB0cmFuc2FjdGlvbldyYXBwZXJzID0gdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzO1xuICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4OyBpIDwgdHJhbnNhY3Rpb25XcmFwcGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHdyYXBwZXIgPSB0cmFuc2FjdGlvbldyYXBwZXJzW2ldO1xuICAgICAgdmFyIGluaXREYXRhID0gdGhpcy53cmFwcGVySW5pdERhdGFbaV07XG4gICAgICB2YXIgZXJyb3JUaHJvd247XG4gICAgICB0cnkge1xuICAgICAgICAvLyBDYXRjaGluZyBlcnJvcnMgbWFrZXMgZGVidWdnaW5nIG1vcmUgZGlmZmljdWx0LCBzbyB3ZSBzdGFydCB3aXRoXG4gICAgICAgIC8vIGVycm9yVGhyb3duIHNldCB0byB0cnVlIGJlZm9yZSBzZXR0aW5nIGl0IHRvIGZhbHNlIGFmdGVyIGNhbGxpbmdcbiAgICAgICAgLy8gY2xvc2UgLS0gaWYgaXQncyBzdGlsbCBzZXQgdG8gdHJ1ZSBpbiB0aGUgZmluYWxseSBibG9jaywgaXQgbWVhbnNcbiAgICAgICAgLy8gd3JhcHBlci5jbG9zZSB0aHJldy5cbiAgICAgICAgZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICBpZiAoaW5pdERhdGEgIT09IFRyYW5zYWN0aW9uLk9CU0VSVkVEX0VSUk9SKSB7XG4gICAgICAgICAgd3JhcHBlci5jbG9zZSAmJiB3cmFwcGVyLmNsb3NlLmNhbGwodGhpcywgaW5pdERhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAvLyBUaGUgY2xvc2VyIGZvciB3cmFwcGVyIGkgdGhyZXcgYW4gZXJyb3I7IGNsb3NlIHRoZSByZW1haW5pbmdcbiAgICAgICAgICAvLyB3cmFwcGVycyBidXQgc2lsZW5jZSBhbnkgZXhjZXB0aW9ucyBmcm9tIHRoZW0gdG8gZW5zdXJlIHRoYXQgdGhlXG4gICAgICAgICAgLy8gZmlyc3QgZXJyb3IgaXMgdGhlIG9uZSB0byBidWJibGUgdXAuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VBbGwoaSArIDEpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy53cmFwcGVySW5pdERhdGEubGVuZ3RoID0gMDtcbiAgfVxufTtcblxudmFyIFRyYW5zYWN0aW9uID0ge1xuXG4gIE1peGluOiBNaXhpbixcblxuICAvKipcbiAgICogVG9rZW4gdG8gbG9vayBmb3IgdG8gZGV0ZXJtaW5lIGlmIGFuIGVycm9yIG9jY3VyZWQuXG4gICAqL1xuICBPQlNFUlZFRF9FUlJPUjoge31cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2FjdGlvbjtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9UcmFuc2FjdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDM2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0TGVnYWN5RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0TGVnYWN5RWxlbWVudFwiKTtcbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0TmF0aXZlQ29tcG9uZW50XCIpO1xudmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVtcHR5Q29tcG9uZW50XCIpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGBlbGVtZW50YCBjcmVhdGUgYW4gaW5zdGFuY2UgdGhhdCB3aWxsIGFjdHVhbGx5IGJlIG1vdW50ZWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7Kn0gcGFyZW50Q29tcG9zaXRlVHlwZSBUaGUgY29tcG9zaXRlIHR5cGUgdGhhdCByZXNvbHZlZCB0aGlzLlxuICogQHJldHVybiB7b2JqZWN0fSBBIG5ldyBpbnN0YW5jZSBvZiB0aGUgZWxlbWVudCdzIGNvbnN0cnVjdG9yLlxuICogQHByb3RlY3RlZFxuICovXG5mdW5jdGlvbiBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGVsZW1lbnQsIHBhcmVudENvbXBvc2l0ZVR5cGUpIHtcbiAgdmFyIGluc3RhbmNlO1xuXG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIGVsZW1lbnQgJiYgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnKSxcbiAgICAgICdPbmx5IGZ1bmN0aW9ucyBvciBzdHJpbmdzIGNhbiBiZSBtb3VudGVkIGFzIFJlYWN0IGNvbXBvbmVudHMuJ1xuICAgICkgOiBudWxsKTtcblxuICAgIC8vIFJlc29sdmUgbW9jayBpbnN0YW5jZXNcbiAgICBpZiAoZWxlbWVudC50eXBlLl9tb2NrZWRSZWFjdENsYXNzQ29uc3RydWN0b3IpIHtcbiAgICAgIC8vIElmIHRoaXMgaXMgYSBtb2NrZWQgY2xhc3MsIHdlIHRyZWF0IHRoZSBsZWdhY3kgZmFjdG9yeSBhcyBpZiBpdCB3YXMgdGhlXG4gICAgICAvLyBjbGFzcyBjb25zdHJ1Y3RvciBmb3IgZnV0dXJlIHByb29maW5nIHVuaXQgdGVzdHMuIEJlY2F1c2UgdGhpcyBtaWdodFxuICAgICAgLy8gYmUgbW9ja2VkIGFzIGEgbGVnYWN5IGZhY3RvcnksIHdlIGlnbm9yZSBhbnkgd2FybmluZ3MgdHJpZ2dlcmQgYnlcbiAgICAgIC8vIHRoaXMgdGVtcG9yYXJ5IGhhY2suXG4gICAgICBSZWFjdExlZ2FjeUVsZW1lbnQuX2lzTGVnYWN5Q2FsbFdhcm5pbmdFbmFibGVkID0gZmFsc2U7XG4gICAgICB0cnkge1xuICAgICAgICBpbnN0YW5jZSA9IG5ldyBlbGVtZW50LnR5cGUuX21vY2tlZFJlYWN0Q2xhc3NDb25zdHJ1Y3RvcihcbiAgICAgICAgICBlbGVtZW50LnByb3BzXG4gICAgICAgICk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdExlZ2FjeUVsZW1lbnQuX2lzTGVnYWN5Q2FsbFdhcm5pbmdFbmFibGVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIG1vY2sgaW1wbGVtZW50YXRpb24gd2FzIGEgbGVnYWN5IGZhY3RvcnksIHRoZW4gaXQgcmV0dXJucyBhXG4gICAgICAvLyBlbGVtZW50LiBXZSBuZWVkIHRvIHR1cm4gdGhpcyBpbnRvIGEgcmVhbCBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGluc3RhbmNlKSkge1xuICAgICAgICBpbnN0YW5jZSA9IG5ldyBpbnN0YW5jZS50eXBlKGluc3RhbmNlLnByb3BzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbmRlciA9IGluc3RhbmNlLnJlbmRlcjtcbiAgICAgIGlmICghcmVuZGVyKSB7XG4gICAgICAgIC8vIEZvciBhdXRvLW1vY2tlZCBmYWN0b3JpZXMsIHRoZSBwcm90b3R5cGUgaXNuJ3Qgc2hpbW1lZCBhbmQgdGhlcmVmb3JlXG4gICAgICAgIC8vIHRoZXJlIGlzIG5vIHJlbmRlciBmdW5jdGlvbiBvbiB0aGUgaW5zdGFuY2UuIFdlIHJlcGxhY2UgdGhlIHdob2xlXG4gICAgICAgIC8vIGNvbXBvbmVudCB3aXRoIGFuIGVtcHR5IGNvbXBvbmVudCBpbnN0YW5jZSBpbnN0ZWFkLlxuICAgICAgICBlbGVtZW50ID0gUmVhY3RFbXB0eUNvbXBvbmVudC5nZXRFbXB0eUNvbXBvbmVudCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHJlbmRlci5faXNNb2NrRnVuY3Rpb24gJiYgIXJlbmRlci5fZ2V0TW9ja0ltcGxlbWVudGF0aW9uKCkpIHtcbiAgICAgICAgICAvLyBBdXRvLW1vY2tlZCBjb21wb25lbnRzIG1heSBoYXZlIGEgcHJvdG90eXBlIHdpdGggYSBtb2NrZWQgcmVuZGVyXG4gICAgICAgICAgLy8gZnVuY3Rpb24uIEZvciB0aG9zZSwgd2UnbGwgbmVlZCB0byBtb2NrIHRoZSByZXN1bHQgb2YgdGhlIHJlbmRlclxuICAgICAgICAgIC8vIHNpbmNlIHdlIGNvbnNpZGVyIHVuZGVmaW5lZCB0byBiZSBpbnZhbGlkIHJlc3VsdHMgZnJvbSByZW5kZXIuXG4gICAgICAgICAgcmVuZGVyLm1vY2tJbXBsZW1lbnRhdGlvbihcbiAgICAgICAgICAgIFJlYWN0RW1wdHlDb21wb25lbnQuZ2V0RW1wdHlDb21wb25lbnRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlLmNvbnN0cnVjdChlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFNwZWNpYWwgY2FzZSBzdHJpbmcgdmFsdWVzXG4gIGlmICh0eXBlb2YgZWxlbWVudC50eXBlID09PSAnc3RyaW5nJykge1xuICAgIGluc3RhbmNlID0gUmVhY3ROYXRpdmVDb21wb25lbnQuY3JlYXRlSW5zdGFuY2VGb3JUYWcoXG4gICAgICBlbGVtZW50LnR5cGUsXG4gICAgICBlbGVtZW50LnByb3BzLFxuICAgICAgcGFyZW50Q29tcG9zaXRlVHlwZVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTm9ybWFsIGNhc2UgZm9yIG5vbi1tb2NrcyBhbmQgbm9uLXN0cmluZ3NcbiAgICBpbnN0YW5jZSA9IG5ldyBlbGVtZW50LnR5cGUoZWxlbWVudC5wcm9wcyk7XG4gIH1cblxuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICB0eXBlb2YgaW5zdGFuY2UuY29uc3RydWN0ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICB0eXBlb2YgaW5zdGFuY2UubW91bnRDb21wb25lbnQgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiBpbnN0YW5jZS5yZWNlaXZlQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ09ubHkgUmVhY3QgQ29tcG9uZW50cyBjYW4gYmUgbW91bnRlZC4nXG4gICAgKSA6IG51bGwpO1xuICB9XG5cbiAgLy8gVGhpcyBhY3R1YWxseSBzZXRzIHVwIHRoZSBpbnRlcm5hbCBpbnN0YW5jZS4gVGhpcyB3aWxsIGJlY29tZSBkZWNvdXBsZWRcbiAgLy8gZnJvbSB0aGUgcHVibGljIGluc3RhbmNlIGluIGEgZnV0dXJlIGRpZmYuXG4gIGluc3RhbmNlLmNvbnN0cnVjdChlbGVtZW50KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50LmpzXG4gKiogbW9kdWxlIGlkID0gMzdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgbW9uaXRvckNvZGVVc2VcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBQcm92aWRlcyBvcGVuLXNvdXJjZSBjb21wYXRpYmxlIGluc3RydW1lbnRhdGlvbiBmb3IgbW9uaXRvcmluZyBjZXJ0YWluIEFQSVxuICogdXNlcyBiZWZvcmUgd2UncmUgcmVhZHkgdG8gaXNzdWUgYSB3YXJuaW5nIG9yIHJlZmFjdG9yLiBJdCBhY2NlcHRzIGFuIGV2ZW50XG4gKiBuYW1lIHdoaWNoIG1heSBvbmx5IGNvbnRhaW4gdGhlIGNoYXJhY3RlcnMgW2EtejAtOV9dIGFuZCBhbiBvcHRpb25hbCBkYXRhXG4gKiBvYmplY3Qgd2l0aCBmdXJ0aGVyIGluZm9ybWF0aW9uLlxuICovXG5cbmZ1bmN0aW9uIG1vbml0b3JDb2RlVXNlKGV2ZW50TmFtZSwgZGF0YSkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGV2ZW50TmFtZSAmJiAhL1teYS16MC05X10vLnRlc3QoZXZlbnROYW1lKSxcbiAgICAnWW91IG11c3QgcHJvdmlkZSBhbiBldmVudE5hbWUgdXNpbmcgb25seSB0aGUgY2hhcmFjdGVycyBbYS16MC05X10nXG4gICkgOiBpbnZhcmlhbnQoZXZlbnROYW1lICYmICEvW15hLXowLTlfXS8udGVzdChldmVudE5hbWUpKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbW9uaXRvckNvZGVVc2U7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvbW9uaXRvckNvZGVVc2UuanNcbiAqKiBtb2R1bGUgaWQgPSAzOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9SZWFjdCcpO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvcmVhY3QuanNcbiAqKiBtb2R1bGUgaWQgPSAzOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi9Vc2Vycy90b3JnZWlyL0NvZGUvZmFsdW4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvY3NzVG9TdHJpbmcuanNcIikoKTtcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImJvZHl7YmFja2dyb3VuZC1jb2xvcjojZmVmZWZlO2NvbG9yOiMzMzN9XCIsIFwiXCJdKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jc3MtbG9hZGVyIS4vfi9hdXRvcHJlZml4ZXItbG9hZGVyP2Jyb3dzZXJzPWxhc3QgMiB2ZXJzaW9uIS4vfi9sZXNzLWxvYWRlcj9zdHJpY3RNYXRoJmNsZWFuY3NzIS4vbGVzcy9pbmRleC5sZXNzXG4gKiogbW9kdWxlIGlkID0gNDBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBSZWFjdCAgICAgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIGRlZXBFcXVhbCA9IHJlcXVpcmUoJ2RlZXAtZXF1YWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb21wb25lbnQ7XG5tb2R1bGUuZXhwb3J0cy5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBzaG91bGRDb21wb25lbnRVcGRhdGU7XG5tb2R1bGUuZXhwb3J0cy5pc0VxdWFsU3RhdGUgID0gZnVuY3Rpb24gaXNFcXVhbFN0YXRlICgpIHsgcmV0dXJuIGRlZXBFcXVhbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xubW9kdWxlLmV4cG9ydHMuaXNFcXVhbEN1cnNvciA9IGZ1bmN0aW9uIGlzRXF1YWxDdXJzb3IgKGEsIGIpIHsgcmV0dXJuIHVuQ3Vyc29yKGEpID09PSB1bkN1cnNvcihiKTsgfTtcbm1vZHVsZS5leHBvcnRzLmlzQ3Vyc29yID0gaXNDdXJzb3I7XG5cbnZhciBkZWJ1Zztcbm1vZHVsZS5leHBvcnRzLmRlYnVnID0gZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChwYXR0ZXJuIHx8ICcuKicpO1xuICBkZWJ1ZyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICB2YXIga2V5ID0gdGhpcy5fY3VycmVudEVsZW1lbnQgJiYgdGhpcy5fY3VycmVudEVsZW1lbnQua2V5ID8gJyBrZXk9JyArIHRoaXMuX2N1cnJlbnRFbGVtZW50LmtleSA6ICcnO1xuICAgIHZhciBuYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZTtcbiAgICB2YXIgdGFnID0gbmFtZSArIGtleTtcbiAgICBpZiAoKGtleSB8fCBuYW1lKSAmJiByZWdleC50ZXN0KHRhZykpIGNvbnNvbGUuZGVidWcoJzwnICsgdGFnICsgJz46ICcgKyBzdHIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb21wb25lbnQgKGRpc3BsYXlOYW1lLCBtaXhpbnMsIHJlbmRlcikge1xuICB2YXIgb3B0aW9ucyA9IGNyZWF0ZURlZmF1bHRBcmd1bWVudHMoZGlzcGxheU5hbWUsIG1peGlucywgcmVuZGVyKTtcbiAgdmFyIG1ldGhvZFN0YXRpY3MgPSBwaWNrU3RhdGljTWl4aW5zKG9wdGlvbnMubWl4aW5zKTtcblxuICB2YXIgY29tcG9uZW50T2JqZWN0ID0ge1xuICAgIGRpc3BsYXlOYW1lOiBvcHRpb25zLmRpc3BsYXlOYW1lLFxuICAgIG1peGluczogb3B0aW9ucy5taXhpbnMsXG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgICAgaWYgKGRlYnVnKSBkZWJ1Zy5jYWxsKHRoaXMsICdyZW5kZXInKTtcbiAgICAgIHJldHVybiBvcHRpb25zLnJlbmRlci5jYWxsKHRoaXMsIHRoaXMucHJvcHMsIHRoaXMucHJvcHMuc3RhdGljcyk7XG4gICAgfVxuICB9O1xuXG4gIGlmIChtZXRob2RTdGF0aWNzKSB7XG4gICAgY29tcG9uZW50T2JqZWN0LnN0YXRpY3MgPSBtZXRob2RTdGF0aWNzO1xuICAgIHJlbW92ZU9sZFN0YXRpY01ldGhvZHMob3B0aW9ucy5taXhpbnMpO1xuICB9XG5cbiAgdmFyIENvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzKGNvbXBvbmVudE9iamVjdCk7XG5cbiAgdmFyIGNyZWF0ZSA9IGZ1bmN0aW9uIChrZXksIHByb3BzKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdG9BcnJheShhcmd1bWVudHMpLmZpbHRlcihSZWFjdC5pc1ZhbGlkRWxlbWVudCk7XG5cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHByb3BzID0ga2V5O1xuICAgICAga2V5ICAgPSB2b2lkIDA7XG4gICAgfVxuXG4gICAgaWYgKCFwcm9wcykge1xuICAgICAgcHJvcHMgPSB7IH07XG4gICAgfVxuXG4gICAgaWYgKGlzQ3Vyc29yKHByb3BzKSkge1xuICAgICAgcHJvcHMgPSB7IGN1cnNvcjogcHJvcHMgfTtcbiAgICB9XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBwcm9wcy5rZXkgPSBrZXk7XG4gICAgfVxuXG4gICAgaWYgKCEhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgcHJvcHMpO1xuICB9O1xuXG4gIGNyZWF0ZS5qc3ggPSBDb21wb25lbnQ7XG5cbiAgaWYgKG1ldGhvZFN0YXRpY3MpIHtcbiAgICBjcmVhdGUgPSBleHRlbmQoY3JlYXRlLCBtZXRob2RTdGF0aWNzKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGU7XG59O1xuXG5mdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUgKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gIHZhciBpc0VxdWFsU3RhdGUgID0gbW9kdWxlLmV4cG9ydHMuaXNFcXVhbFN0YXRlO1xuXG4gIHZhciBpc05vdElnbm9yYWJsZSA9IG5vdChvcihpc1N0YXRpY3MsIGlzQ2hpbGRyZW4pKTtcblxuICB2YXIgbmV4dEN1cnNvcnMgICAgPSBmaWx0ZXJLZXlWYWx1ZShndWFyYW50ZWVPYmplY3QobmV4dFByb3BzKSwgaXNOb3RJZ25vcmFibGUpLFxuICAgICAgY3VycmVudEN1cnNvcnMgPSBmaWx0ZXJLZXlWYWx1ZShndWFyYW50ZWVPYmplY3QodGhpcy5wcm9wcyksIGlzTm90SWdub3JhYmxlKTtcblxuICB2YXIgbmV4dEN1cnNvcnNLZXlzICAgID0gT2JqZWN0LmtleXMobmV4dEN1cnNvcnMpLFxuICAgICAgY3VycmVudEN1cnNvcnNLZXlzID0gT2JqZWN0LmtleXMoY3VycmVudEN1cnNvcnMpO1xuXG4gIGlmIChjdXJyZW50Q3Vyc29yc0tleXMubGVuZ3RoICE9PSBuZXh0Q3Vyc29yc0tleXMubGVuZ3RoKSB7XG4gICAgaWYgKGRlYnVnKSBkZWJ1Zy5jYWxsKHRoaXMsICdzaG91bGRDb21wb25lbnRVcGRhdGUgPT4gdHJ1ZSAobnVtYmVyIG9mIGN1cnNvcnMgZGlmZmVyKScpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGhhc0RpZmZlcmVudEtleXMoY3VycmVudEN1cnNvcnNLZXlzLCBjdXJyZW50Q3Vyc29ycywgbmV4dEN1cnNvcnMpKSB7XG4gICAgaWYgKGRlYnVnKSBkZWJ1Zy5jYWxsKHRoaXMsICdzaG91bGRDb21wb25lbnRVcGRhdGUgPT4gdHJ1ZSAoY3Vyc29ycyBoYXZlIGRpZmZlcmVudCBrZXlzKScpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGhhc0NoYW5nZWRDdXJzb3JzKGN1cnJlbnRDdXJzb3JzLCBuZXh0Q3Vyc29ycykpIHtcbiAgICBpZiAoZGVidWcpIGRlYnVnLmNhbGwodGhpcywgJ3Nob3VsZENvbXBvbmVudFVwZGF0ZSA9PiB0cnVlIChjdXJzb3JzIGhhdmUgY2hhbmdlZCknKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICghaXNFcXVhbFN0YXRlKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSkpIHtcbiAgICBpZiAoZGVidWcpIGRlYnVnLmNhbGwodGhpcywgJ3Nob3VsZENvbXBvbmVudFVwZGF0ZSA9PiB0cnVlIChzdGF0ZSBoYXMgY2hhbmdlZCknKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChoYXNDaGFuZ2VkUHJvcGVydGllcyhjdXJyZW50Q3Vyc29ycywgbmV4dEN1cnNvcnMpKSB7XG4gICAgaWYgKGRlYnVnKSBkZWJ1Zy5jYWxsKHRoaXMsICdzaG91bGRDb21wb25lbnRVcGRhdGUgPT4gdHJ1ZSAocHJvcGVydGllcyBoYXZlIGNoYW5nZWQpJyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoZGVidWcpIGRlYnVnLmNhbGwodGhpcywgJ3Nob3VsZENvbXBvbmVudFVwZGF0ZSA9PiBmYWxzZScpO1xuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ3VhcmFudGVlT2JqZWN0IChwcm9wKSB7XG4gIGlmICghcHJvcCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGlmIChpc0N1cnNvcihwcm9wKSkge1xuICAgIHJldHVybiB7IF9kdW1teV9rZXk6IHByb3AgfTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJvcCAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4geyBfZHVtbXlfa2V5OiBwcm9wIH07XG4gIH1cblxuICByZXR1cm4gcHJvcDtcbn1cblxuZnVuY3Rpb24gaGFzRGlmZmVyZW50S2V5cyAoY3VycmVudEN1cnNvcnNLZXlzLCBjdXJyZW50Q3Vyc29ycywgbmV4dEN1cnNvcnMpIHtcbiAgcmV0dXJuICFjdXJyZW50Q3Vyc29yc0tleXMuZXZlcnkoZnVuY3Rpb24gZXhpc3RzSW5Cb3RoIChrZXkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGN1cnJlbnRDdXJzb3JzW2tleV0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBuZXh0Q3Vyc29yc1trZXldICE9PSAndW5kZWZpbmVkJztcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhc0NoYW5nZWRDdXJzb3JzIChjdXJyZW50LCBuZXh0KSB7XG4gIGN1cnJlbnQgPSBmaWx0ZXJLZXlWYWx1ZShjdXJyZW50LCBpc0N1cnNvcik7XG4gIG5leHQgICAgPSBmaWx0ZXJLZXlWYWx1ZShuZXh0LCBpc0N1cnNvcik7XG5cbiAgdmFyIGlzRXF1YWxDdXJzb3IgPSBtb2R1bGUuZXhwb3J0cy5pc0VxdWFsQ3Vyc29yO1xuXG4gIGZvciAodmFyIGtleSBpbiBjdXJyZW50KVxuICAgIGlmICghaXNFcXVhbEN1cnNvcihjdXJyZW50W2tleV0sIG5leHRba2V5XSkpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBoYXNDaGFuZ2VkUHJvcGVydGllcyAoY3VycmVudCwgbmV4dCkge1xuICBjdXJyZW50ID0gZmlsdGVyS2V5VmFsdWUoY3VycmVudCwgbm90KGlzQ3Vyc29yKSk7XG4gIG5leHQgICAgPSBmaWx0ZXJLZXlWYWx1ZShuZXh0LCBub3QoaXNDdXJzb3IpKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY3VycmVudClcbiAgICBpZiAoIWRlZXBFcXVhbChjdXJyZW50W2tleV0sIG5leHRba2V5XSkpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWZhdWx0QXJndW1lbnRzIChkaXNwbGF5TmFtZSwgbWl4aW5zLCByZW5kZXIpIHtcblxuICAvLyAocmVuZGVyKVxuICBpZiAodHlwZW9mIGRpc3BsYXlOYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVuZGVyICAgICAgPSBkaXNwbGF5TmFtZTtcbiAgICBtaXhpbnMgICAgICA9IFtdO1xuICAgIGRpc3BsYXlOYW1lID0gdm9pZCAwO1xuICB9XG5cbiAgLy8gKG1peGlucywgcmVuZGVyKVxuICBpZiAodHlwZW9mIGRpc3BsYXlOYW1lID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbWl4aW5zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVuZGVyICAgICAgPSBtaXhpbnM7XG4gICAgbWl4aW5zICAgICAgPSBkaXNwbGF5TmFtZTtcbiAgICBkaXNwbGF5TmFtZSA9IHZvaWQgMDtcbiAgfVxuXG4gIC8vIChkaXNwbGF5TmFtZSwgcmVuZGVyKVxuICBpZiAodHlwZW9mIGRpc3BsYXlOYW1lID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgbWl4aW5zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVuZGVyID0gbWl4aW5zO1xuICAgIG1peGlucyA9IFtdO1xuICB9XG5cbiAgLy8gRWxzZSAoZGlzcGxheU5hbWUsIG1peGlucywgcmVuZGVyKVxuXG4gIGlmICghQXJyYXkuaXNBcnJheShtaXhpbnMpKSB7XG4gICAgbWl4aW5zID0gW21peGluc107XG4gIH1cblxuICBpZiAoIWhhc1Nob3VsZENvbXBvbmVudFVwZGF0ZShtaXhpbnMpKSB7XG4gICAgdmFyIFNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHtcbiAgICAgIHNob3VsZENvbXBvbmVudFVwZGF0ZTogbW9kdWxlLmV4cG9ydHMuc2hvdWxkQ29tcG9uZW50VXBkYXRlXG4gICAgfTtcbiAgICBtaXhpbnMgPSBbU2hvdWxkQ29tcG9uZW50VXBkYXRlXS5jb25jYXQobWl4aW5zKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgIG1peGluczogbWl4aW5zLFxuICAgIHJlbmRlcjogcmVuZGVyXG4gIH07XG59XG5cbmZ1bmN0aW9uIHBpY2tTdGF0aWNNaXhpbnMgKG1peGlucykge1xuICB2YXIgZmlsdGVyZWQgPSBtaXhpbnMuZmlsdGVyKGZ1bmN0aW9uIChvYmopwqB7XG4gICAgcmV0dXJuICEhb2JqLnN0YXRpY3M7XG4gIH0pO1xuXG4gIGlmICghZmlsdGVyZWQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuXG4gIHZhciBzdGF0aWNzID0ge307XG4gIGZpbHRlcmVkLmZvckVhY2goZnVuY3Rpb24gKG9iainCoHtcbiAgICBzdGF0aWNzID0gZXh0ZW5kKHN0YXRpY3MsIG9iai5zdGF0aWNzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHN0YXRpY3M7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU9sZFN0YXRpY01ldGhvZHMgKG1peGlucykge1xuICBtaXhpbnMuZmlsdGVyKGZ1bmN0aW9uIChvYmopwqB7XG4gICAgcmV0dXJuICEhb2JqLnN0YXRpY3M7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKG9iainCoHtcbiAgICBkZWxldGUgb2JqLnN0YXRpY3M7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBleHRlbmQgKG9yaWdpbmFsLCBleHRlbnNpb24pIHtcbiAgZm9yIChrZXkgaW4gZXh0ZW5zaW9uKSB7XG4gICAgaWYgKGV4dGVuc2lvbi5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICFvcmlnaW5hbFtrZXldKSB7XG4gICAgICBvcmlnaW5hbFtrZXldID0gZXh0ZW5zaW9uW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvcmlnaW5hbDtcbn1cblxuZnVuY3Rpb24gaGFzU2hvdWxkQ29tcG9uZW50VXBkYXRlIChtaXhpbnMpIHtcbiAgcmV0dXJuICEhbWl4aW5zLmZpbHRlcihmdW5jdGlvbiAobWl4aW4pIHtcbiAgICByZXR1cm4gISFtaXhpbi5zaG91bGRDb21wb25lbnRVcGRhdGU7XG4gIH0pLmxlbmd0aDtcbn1cblxuZnVuY3Rpb24gaXNDdXJzb3IgKHBvdGVudGlhbCkge1xuICByZXR1cm4gcG90ZW50aWFsICYmXG4gICAgKCh0eXBlb2YgcG90ZW50aWFsLmRlcmVmID09PSAnZnVuY3Rpb24nKSB8fCAodHlwZW9mIHBvdGVudGlhbC5fX2RlcmVmID09PSAnZnVuY3Rpb24nKSk7XG59XG5cbmZ1bmN0aW9uIHVuQ3Vyc29yKGN1cnNvcikge1xuICBpZiAoIWlzQ3Vyc29yKGN1cnNvcikpIHtcbiAgICByZXR1cm4gY3Vyc29yO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjdXJzb3IuZGVyZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY3Vyc29yLmRlcmVmKCk7XG4gIH1cblxuICByZXR1cm4gY3Vyc29yLl9fZGVyZWYoKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyS2V5VmFsdWUgKG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIHZhciBrZXksIGZpbHRlcmVkID0ge307XG4gIGZvciAoa2V5IGluIG9iamVjdClcbiAgICBpZiAocHJlZGljYXRlKG9iamVjdFtrZXldLCBrZXkpKVxuICAgICAgZmlsdGVyZWRba2V5XSA9IG9iamVjdFtrZXldO1xuICByZXR1cm4gZmlsdGVyZWQ7XG59XG5cbmZ1bmN0aW9uIG5vdCAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gIWZuLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBpc1N0YXRpY3MgKHZhbCwga2V5KSB7XG4gIHJldHVybiBrZXkgPT09ICdzdGF0aWNzJztcbn1cblxuZnVuY3Rpb24gaXNDaGlsZHJlbiAodmFsLCBrZXkpIHtcbiAgcmV0dXJuIGtleSA9PT0gJ2NoaWxkcmVuJztcbn1cblxuZnVuY3Rpb24gb3IgKGZuMSwgZm4yKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZuMS5hcHBseShudWxsLCBhcmd1bWVudHMpIHx8IGZuMi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0b0FycmF5IChhcmdzKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKTtcbn1cblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L29tbmlzY2llbnQvY29tcG9uZW50LmpzXG4gKiogbW9kdWxlIGlkID0gNDFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDYWxsYmFja1F1ZXVlXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCBwc2V1ZG8tZXZlbnQgbW9kdWxlIHRvIGhlbHAga2VlcCB0cmFjayBvZiBjb21wb25lbnRzIHdhaXRpbmcgdG9cbiAqIGJlIG5vdGlmaWVkIHdoZW4gdGhlaXIgRE9NIHJlcHJlc2VudGF0aW9ucyBhcmUgYXZhaWxhYmxlIGZvciB1c2UuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRzIGBQb29sZWRDbGFzc2AsIHNvIHlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byBpbnN0YW50aWF0ZSB0aGlzLlxuICogSW5zdGVhZCwgdXNlIGBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpYC5cbiAqXG4gKiBAY2xhc3MgUmVhY3RNb3VudFJlYWR5XG4gKiBAaW1wbGVtZW50cyBQb29sZWRDbGFzc1xuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIENhbGxiYWNrUXVldWUoKSB7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbn1cblxuYXNzaWduKENhbGxiYWNrUXVldWUucHJvdG90eXBlLCB7XG5cbiAgLyoqXG4gICAqIEVucXVldWVzIGEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGBub3RpZnlBbGxgIGlzIGludm9rZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIEludm9rZWQgd2hlbiBgbm90aWZ5QWxsYCBpcyBpbnZva2VkLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IGNvbnRleHQgQ29udGV4dCB0byBjYWxsIGBjYWxsYmFja2Agd2l0aC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlOiBmdW5jdGlvbihjYWxsYmFjaywgY29udGV4dCkge1xuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCBbXTtcbiAgICB0aGlzLl9jb250ZXh0cyA9IHRoaXMuX2NvbnRleHRzIHx8IFtdO1xuICAgIHRoaXMuX2NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICB0aGlzLl9jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2VzIGFsbCBlbnF1ZXVlZCBjYWxsYmFja3MgYW5kIGNsZWFycyB0aGUgcXVldWUuIFRoaXMgaXMgaW52b2tlZCBhZnRlclxuICAgKiB0aGUgRE9NIHJlcHJlc2VudGF0aW9uIG9mIGEgY29tcG9uZW50IGhhcyBiZWVuIGNyZWF0ZWQgb3IgdXBkYXRlZC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBub3RpZnlBbGw6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3M7XG4gICAgdmFyIGNvbnRleHRzID0gdGhpcy5fY29udGV4dHM7XG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgY2FsbGJhY2tzLmxlbmd0aCA9PT0gY29udGV4dHMubGVuZ3RoLFxuICAgICAgICBcIk1pc21hdGNoZWQgbGlzdCBvZiBjb250ZXh0cyBpbiBjYWxsYmFjayBxdWV1ZVwiXG4gICAgICApIDogaW52YXJpYW50KGNhbGxiYWNrcy5sZW5ndGggPT09IGNvbnRleHRzLmxlbmd0aCkpO1xuICAgICAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjYWxsYmFja3NbaV0uY2FsbChjb250ZXh0c1tpXSk7XG4gICAgICB9XG4gICAgICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICAgIGNvbnRleHRzLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIGludGVybmFsIHF1ZXVlLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSBudWxsO1xuICAgIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgdGhpcy5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG59KTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKENhbGxiYWNrUXVldWUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbGxiYWNrUXVldWU7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvQ2FsbGJhY2tRdWV1ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDQyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQbHVnaW5VdGlsc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBJbmplY3RlZCBkZXBlbmRlbmNpZXM6XG4gKi9cblxuLyoqXG4gKiAtIGBNb3VudGA6IFtyZXF1aXJlZF0gTW9kdWxlIHRoYXQgY2FuIGNvbnZlcnQgYmV0d2VlbiBSZWFjdCBkb20gSURzIGFuZFxuICogICBhY3R1YWwgbm9kZSByZWZlcmVuY2VzLlxuICovXG52YXIgaW5qZWN0aW9uID0ge1xuICBNb3VudDogbnVsbCxcbiAgaW5qZWN0TW91bnQ6IGZ1bmN0aW9uKEluamVjdGVkTW91bnQpIHtcbiAgICBpbmplY3Rpb24uTW91bnQgPSBJbmplY3RlZE1vdW50O1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIEluamVjdGVkTW91bnQgJiYgSW5qZWN0ZWRNb3VudC5nZXROb2RlLFxuICAgICAgICAnRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24uaW5qZWN0TW91bnQoLi4uKTogSW5qZWN0ZWQgTW91bnQgbW9kdWxlICcgK1xuICAgICAgICAnaXMgbWlzc2luZyBnZXROb2RlLidcbiAgICAgICkgOiBpbnZhcmlhbnQoSW5qZWN0ZWRNb3VudCAmJiBJbmplY3RlZE1vdW50LmdldE5vZGUpKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxuZnVuY3Rpb24gaXNFbmRpc2godG9wTGV2ZWxUeXBlKSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VVcCB8fFxuICAgICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoRW5kIHx8XG4gICAgICAgICB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wVG91Y2hDYW5jZWw7XG59XG5cbmZ1bmN0aW9uIGlzTW92ZWlzaCh0b3BMZXZlbFR5cGUpIHtcbiAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU1vdmUgfHxcbiAgICAgICAgIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BUb3VjaE1vdmU7XG59XG5mdW5jdGlvbiBpc1N0YXJ0aXNoKHRvcExldmVsVHlwZSkge1xuICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93biB8fFxuICAgICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoU3RhcnQ7XG59XG5cblxudmFyIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzO1xuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICAgIHZhciBkaXNwYXRjaElEcyA9IGV2ZW50Ll9kaXNwYXRjaElEcztcblxuICAgIHZhciBsaXN0ZW5lcnNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpO1xuICAgIHZhciBpZHNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hJRHMpO1xuICAgIHZhciBJRHNMZW4gPSBpZHNJc0FyciA/IGRpc3BhdGNoSURzLmxlbmd0aCA6IGRpc3BhdGNoSURzID8gMSA6IDA7XG4gICAgdmFyIGxpc3RlbmVyc0xlbiA9IGxpc3RlbmVyc0lzQXJyID9cbiAgICAgIGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aCA6XG4gICAgICBkaXNwYXRjaExpc3RlbmVycyA/IDEgOiAwO1xuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGlkc0lzQXJyID09PSBsaXN0ZW5lcnNJc0FyciAmJiBJRHNMZW4gPT09IGxpc3RlbmVyc0xlbixcbiAgICAgICdFdmVudFBsdWdpblV0aWxzOiBJbnZhbGlkIGBldmVudGAuJ1xuICAgICkgOiBpbnZhcmlhbnQoaWRzSXNBcnIgPT09IGxpc3RlbmVyc0lzQXJyICYmIElEc0xlbiA9PT0gbGlzdGVuZXJzTGVuKSk7XG4gIH07XG59XG5cbi8qKlxuICogSW52b2tlcyBgY2IoZXZlbnQsIGxpc3RlbmVyLCBpZClgLiBBdm9pZHMgdXNpbmcgY2FsbCBpZiBubyBzY29wZSBpc1xuICogcHJvdmlkZWQuIFRoZSBgKGxpc3RlbmVyLGlkKWAgcGFpciBlZmZlY3RpdmVseSBmb3JtcyB0aGUgXCJkaXNwYXRjaFwiIGJ1dCBhcmVcbiAqIGtlcHQgc2VwYXJhdGUgdG8gY29uc2VydmUgbWVtb3J5LlxuICovXG5mdW5jdGlvbiBmb3JFYWNoRXZlbnREaXNwYXRjaChldmVudCwgY2IpIHtcbiAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICB2YXIgZGlzcGF0Y2hJRHMgPSBldmVudC5fZGlzcGF0Y2hJRHM7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvLyBMaXN0ZW5lcnMgYW5kIElEcyBhcmUgdHdvIHBhcmFsbGVsIGFycmF5cyB0aGF0IGFyZSBhbHdheXMgaW4gc3luYy5cbiAgICAgIGNiKGV2ZW50LCBkaXNwYXRjaExpc3RlbmVyc1tpXSwgZGlzcGF0Y2hJRHNbaV0pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChkaXNwYXRjaExpc3RlbmVycykge1xuICAgIGNiKGV2ZW50LCBkaXNwYXRjaExpc3RlbmVycywgZGlzcGF0Y2hJRHMpO1xuICB9XG59XG5cbi8qKlxuICogRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBQbHVnaW5Nb2R1bGUuZXhlY3V0ZURpc3BhdGNoKCkuXG4gKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBTeW50aGV0aWNFdmVudCB0byBoYW5kbGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IEFwcGxpY2F0aW9uLWxldmVsIGNhbGxiYWNrXG4gKiBAcGFyYW0ge3N0cmluZ30gZG9tSUQgRE9NIGlkIHRvIHBhc3MgdG8gdGhlIGNhbGxiYWNrLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIGxpc3RlbmVyLCBkb21JRCkge1xuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gaW5qZWN0aW9uLk1vdW50LmdldE5vZGUoZG9tSUQpO1xuICB2YXIgcmV0dXJuVmFsdWUgPSBsaXN0ZW5lcihldmVudCwgZG9tSUQpO1xuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuXG4vKipcbiAqIFN0YW5kYXJkL3NpbXBsZSBpdGVyYXRpb24gdGhyb3VnaCBhbiBldmVudCdzIGNvbGxlY3RlZCBkaXNwYXRjaGVzLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIoZXZlbnQsIGV4ZWN1dGVEaXNwYXRjaCkge1xuICBmb3JFYWNoRXZlbnREaXNwYXRjaChldmVudCwgZXhlY3V0ZURpc3BhdGNoKTtcbiAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gbnVsbDtcbiAgZXZlbnQuX2Rpc3BhdGNoSURzID0gbnVsbDtcbn1cblxuLyoqXG4gKiBTdGFuZGFyZC9zaW1wbGUgaXRlcmF0aW9uIHRocm91Z2ggYW4gZXZlbnQncyBjb2xsZWN0ZWQgZGlzcGF0Y2hlcywgYnV0IHN0b3BzXG4gKiBhdCB0aGUgZmlyc3QgZGlzcGF0Y2ggZXhlY3V0aW9uIHJldHVybmluZyB0cnVlLCBhbmQgcmV0dXJucyB0aGF0IGlkLlxuICpcbiAqIEByZXR1cm4gaWQgb2YgdGhlIGZpcnN0IGRpc3BhdGNoIGV4ZWN1dGlvbiB3aG8ncyBsaXN0ZW5lciByZXR1cm5zIHRydWUsIG9yXG4gKiBudWxsIGlmIG5vIGxpc3RlbmVyIHJldHVybmVkIHRydWUuXG4gKi9cbmZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsKGV2ZW50KSB7XG4gIHZhciBkaXNwYXRjaExpc3RlbmVycyA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgdmFyIGRpc3BhdGNoSURzID0gZXZlbnQuX2Rpc3BhdGNoSURzO1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMoZXZlbnQpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gTGlzdGVuZXJzIGFuZCBJRHMgYXJlIHR3byBwYXJhbGxlbCBhcnJheXMgdGhhdCBhcmUgYWx3YXlzIGluIHN5bmMuXG4gICAgICBpZiAoZGlzcGF0Y2hMaXN0ZW5lcnNbaV0oZXZlbnQsIGRpc3BhdGNoSURzW2ldKSkge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2hJRHNbaV07XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGRpc3BhdGNoTGlzdGVuZXJzKSB7XG4gICAgaWYgKGRpc3BhdGNoTGlzdGVuZXJzKGV2ZW50LCBkaXNwYXRjaElEcykpIHtcbiAgICAgIHJldHVybiBkaXNwYXRjaElEcztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQHNlZSBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbFxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlKGV2ZW50KSB7XG4gIHZhciByZXQgPSBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbChldmVudCk7XG4gIGV2ZW50Ll9kaXNwYXRjaElEcyA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gIHJldHVybiByZXQ7XG59XG5cbi8qKlxuICogRXhlY3V0aW9uIG9mIGEgXCJkaXJlY3RcIiBkaXNwYXRjaCAtIHRoZXJlIG11c3QgYmUgYXQgbW9zdCBvbmUgZGlzcGF0Y2hcbiAqIGFjY3VtdWxhdGVkIG9uIHRoZSBldmVudCBvciBpdCBpcyBjb25zaWRlcmVkIGFuIGVycm9yLiBJdCBkb2Vzbid0IHJlYWxseSBtYWtlXG4gKiBzZW5zZSBmb3IgYW4gZXZlbnQgd2l0aCBtdWx0aXBsZSBkaXNwYXRjaGVzIChidWJibGVkKSB0byBrZWVwIHRyYWNrIG9mIHRoZVxuICogcmV0dXJuIHZhbHVlcyBhdCBlYWNoIGRpc3BhdGNoIGV4ZWN1dGlvbiwgYnV0IGl0IGRvZXMgdGVuZCB0byBtYWtlIHNlbnNlIHdoZW5cbiAqIGRlYWxpbmcgd2l0aCBcImRpcmVjdFwiIGRpc3BhdGNoZXMuXG4gKlxuICogQHJldHVybiBUaGUgcmV0dXJuIHZhbHVlIG9mIGV4ZWN1dGluZyB0aGUgc2luZ2xlIGRpc3BhdGNoLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlyZWN0RGlzcGF0Y2goZXZlbnQpIHtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzKGV2ZW50KTtcbiAgfVxuICB2YXIgZGlzcGF0Y2hMaXN0ZW5lciA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgdmFyIGRpc3BhdGNoSUQgPSBldmVudC5fZGlzcGF0Y2hJRHM7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgIUFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lciksXG4gICAgJ2V4ZWN1dGVEaXJlY3REaXNwYXRjaCguLi4pOiBJbnZhbGlkIGBldmVudGAuJ1xuICApIDogaW52YXJpYW50KCFBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXIpKSk7XG4gIHZhciByZXMgPSBkaXNwYXRjaExpc3RlbmVyID9cbiAgICBkaXNwYXRjaExpc3RlbmVyKGV2ZW50LCBkaXNwYXRjaElEKSA6XG4gICAgbnVsbDtcbiAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gbnVsbDtcbiAgZXZlbnQuX2Rpc3BhdGNoSURzID0gbnVsbDtcbiAgcmV0dXJuIHJlcztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudFxuICogQHJldHVybiB7Ym9vbH0gVHJ1ZSBpZmYgbnVtYmVyIG9mIGRpc3BhdGNoZXMgYWNjdW11bGF0ZWQgaXMgZ3JlYXRlciB0aGFuIDAuXG4gKi9cbmZ1bmN0aW9uIGhhc0Rpc3BhdGNoZXMoZXZlbnQpIHtcbiAgcmV0dXJuICEhZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xufVxuXG4vKipcbiAqIEdlbmVyYWwgdXRpbGl0aWVzIHRoYXQgYXJlIHVzZWZ1bCBpbiBjcmVhdGluZyBjdXN0b20gRXZlbnQgUGx1Z2lucy5cbiAqL1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSB7XG4gIGlzRW5kaXNoOiBpc0VuZGlzaCxcbiAgaXNNb3ZlaXNoOiBpc01vdmVpc2gsXG4gIGlzU3RhcnRpc2g6IGlzU3RhcnRpc2gsXG5cbiAgZXhlY3V0ZURpcmVjdERpc3BhdGNoOiBleGVjdXRlRGlyZWN0RGlzcGF0Y2gsXG4gIGV4ZWN1dGVEaXNwYXRjaDogZXhlY3V0ZURpc3BhdGNoLFxuICBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXI6IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcixcbiAgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZTogZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZSxcbiAgaGFzRGlzcGF0Y2hlczogaGFzRGlzcGF0Y2hlcyxcbiAgaW5qZWN0aW9uOiBpbmplY3Rpb24sXG4gIHVzZVRvdWNoRXZlbnRzOiBmYWxzZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFBsdWdpblV0aWxzO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL0V2ZW50UGx1Z2luVXRpbHMuanNcbiAqKiBtb2R1bGUgaWQgPSA0M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIExpbmtlZFZhbHVlVXRpbHNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVzXCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG52YXIgaGFzUmVhZE9ubHlWYWx1ZSA9IHtcbiAgJ2J1dHRvbic6IHRydWUsXG4gICdjaGVja2JveCc6IHRydWUsXG4gICdpbWFnZSc6IHRydWUsXG4gICdoaWRkZW4nOiB0cnVlLFxuICAncmFkaW8nOiB0cnVlLFxuICAncmVzZXQnOiB0cnVlLFxuICAnc3VibWl0JzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBpbnB1dC5wcm9wcy5jaGVja2VkTGluayA9PSBudWxsIHx8IGlucHV0LnByb3BzLnZhbHVlTGluayA9PSBudWxsLFxuICAgICdDYW5ub3QgcHJvdmlkZSBhIGNoZWNrZWRMaW5rIGFuZCBhIHZhbHVlTGluay4gSWYgeW91IHdhbnQgdG8gdXNlICcgK1xuICAgICdjaGVja2VkTGluaywgeW91IHByb2JhYmx5IGRvblxcJ3Qgd2FudCB0byB1c2UgdmFsdWVMaW5rIGFuZCB2aWNlIHZlcnNhLidcbiAgKSA6IGludmFyaWFudChpbnB1dC5wcm9wcy5jaGVja2VkTGluayA9PSBudWxsIHx8IGlucHV0LnByb3BzLnZhbHVlTGluayA9PSBudWxsKSk7XG59XG5mdW5jdGlvbiBfYXNzZXJ0VmFsdWVMaW5rKGlucHV0KSB7XG4gIF9hc3NlcnRTaW5nbGVMaW5rKGlucHV0KTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBpbnB1dC5wcm9wcy52YWx1ZSA9PSBudWxsICYmIGlucHV0LnByb3BzLm9uQ2hhbmdlID09IG51bGwsXG4gICAgJ0Nhbm5vdCBwcm92aWRlIGEgdmFsdWVMaW5rIGFuZCBhIHZhbHVlIG9yIG9uQ2hhbmdlIGV2ZW50LiBJZiB5b3Ugd2FudCAnICtcbiAgICAndG8gdXNlIHZhbHVlIG9yIG9uQ2hhbmdlLCB5b3UgcHJvYmFibHkgZG9uXFwndCB3YW50IHRvIHVzZSB2YWx1ZUxpbmsuJ1xuICApIDogaW52YXJpYW50KGlucHV0LnByb3BzLnZhbHVlID09IG51bGwgJiYgaW5wdXQucHJvcHMub25DaGFuZ2UgPT0gbnVsbCkpO1xufVxuXG5mdW5jdGlvbiBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXQpIHtcbiAgX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXQpO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGlucHV0LnByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBpbnB1dC5wcm9wcy5vbkNoYW5nZSA9PSBudWxsLFxuICAgICdDYW5ub3QgcHJvdmlkZSBhIGNoZWNrZWRMaW5rIGFuZCBhIGNoZWNrZWQgcHJvcGVydHkgb3Igb25DaGFuZ2UgZXZlbnQuICcgK1xuICAgICdJZiB5b3Ugd2FudCB0byB1c2UgY2hlY2tlZCBvciBvbkNoYW5nZSwgeW91IHByb2JhYmx5IGRvblxcJ3Qgd2FudCB0byAnICtcbiAgICAndXNlIGNoZWNrZWRMaW5rJ1xuICApIDogaW52YXJpYW50KGlucHV0LnByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBpbnB1dC5wcm9wcy5vbkNoYW5nZSA9PSBudWxsKSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZSBjaGFuZ2UgZXZlbnQgdG8gaGFuZGxlXG4gKi9cbmZ1bmN0aW9uIF9oYW5kbGVMaW5rZWRWYWx1ZUNoYW5nZShlKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHRoaXMucHJvcHMudmFsdWVMaW5rLnJlcXVlc3RDaGFuZ2UoZS50YXJnZXQudmFsdWUpO1xufVxuXG4vKipcbiAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBlIGNoYW5nZSBldmVudCB0byBoYW5kbGVcbiAgKi9cbmZ1bmN0aW9uIF9oYW5kbGVMaW5rZWRDaGVja0NoYW5nZShlKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHRoaXMucHJvcHMuY2hlY2tlZExpbmsucmVxdWVzdENoYW5nZShlLnRhcmdldC5jaGVja2VkKTtcbn1cblxuLyoqXG4gKiBQcm92aWRlIGEgbGlua2VkIGB2YWx1ZWAgYXR0cmlidXRlIGZvciBjb250cm9sbGVkIGZvcm1zLiBZb3Ugc2hvdWxkIG5vdCB1c2VcbiAqIHRoaXMgb3V0c2lkZSBvZiB0aGUgUmVhY3RET00gY29udHJvbGxlZCBmb3JtIGNvbXBvbmVudHMuXG4gKi9cbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0ge1xuICBNaXhpbjoge1xuICAgIHByb3BUeXBlczoge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgICAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fFxuICAgICAgICAgICAgaGFzUmVhZE9ubHlWYWx1ZVtwcm9wcy50eXBlXSB8fFxuICAgICAgICAgICAgcHJvcHMub25DaGFuZ2UgfHxcbiAgICAgICAgICAgIHByb3BzLnJlYWRPbmx5IHx8XG4gICAgICAgICAgICBwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAgICdZb3UgcHJvdmlkZWQgYSBgdmFsdWVgIHByb3AgdG8gYSBmb3JtIGZpZWxkIHdpdGhvdXQgYW4gJyArXG4gICAgICAgICAgJ2BvbkNoYW5nZWAgaGFuZGxlci4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gSWYgJyArXG4gICAgICAgICAgJ3RoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYGRlZmF1bHRWYWx1ZWAuIE90aGVyd2lzZSwgJyArXG4gICAgICAgICAgJ3NldCBlaXRoZXIgYG9uQ2hhbmdlYCBvciBgcmVhZE9ubHlgLidcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBjaGVja2VkOiBmdW5jdGlvbihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgaWYgKCFwcm9wc1twcm9wTmFtZV0gfHxcbiAgICAgICAgICAgIHByb3BzLm9uQ2hhbmdlIHx8XG4gICAgICAgICAgICBwcm9wcy5yZWFkT25seSB8fFxuICAgICAgICAgICAgcHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgICAnWW91IHByb3ZpZGVkIGEgYGNoZWNrZWRgIHByb3AgdG8gYSBmb3JtIGZpZWxkIHdpdGhvdXQgYW4gJyArXG4gICAgICAgICAgJ2BvbkNoYW5nZWAgaGFuZGxlci4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gSWYgJyArXG4gICAgICAgICAgJ3RoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYGRlZmF1bHRDaGVja2VkYC4gT3RoZXJ3aXNlLCAnICtcbiAgICAgICAgICAnc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuJ1xuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIG9uQ2hhbmdlOiBSZWFjdFByb3BUeXBlcy5mdW5jXG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnB1dCBGb3JtIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHsqfSBjdXJyZW50IHZhbHVlIG9mIHRoZSBpbnB1dCBlaXRoZXIgZnJvbSB2YWx1ZSBwcm9wIG9yIGxpbmsuXG4gICAqL1xuICBnZXRWYWx1ZTogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQucHJvcHMudmFsdWVMaW5rKSB7XG4gICAgICBfYXNzZXJ0VmFsdWVMaW5rKGlucHV0KTtcbiAgICAgIHJldHVybiBpbnB1dC5wcm9wcy52YWx1ZUxpbmsudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dC5wcm9wcy52YWx1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW5wdXQgRm9ybSBjb21wb25lbnRcbiAgICogQHJldHVybiB7Kn0gY3VycmVudCBjaGVja2VkIHN0YXR1cyBvZiB0aGUgaW5wdXQgZWl0aGVyIGZyb20gY2hlY2tlZCBwcm9wXG4gICAqICAgICAgICAgICAgIG9yIGxpbmsuXG4gICAqL1xuICBnZXRDaGVja2VkOiBmdW5jdGlvbihpbnB1dCkge1xuICAgIGlmIChpbnB1dC5wcm9wcy5jaGVja2VkTGluaykge1xuICAgICAgX2Fzc2VydENoZWNrZWRMaW5rKGlucHV0KTtcbiAgICAgIHJldHVybiBpbnB1dC5wcm9wcy5jaGVja2VkTGluay52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0LnByb3BzLmNoZWNrZWQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGlucHV0IEZvcm0gY29tcG9uZW50XG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBjaGFuZ2UgY2FsbGJhY2sgZWl0aGVyIGZyb20gb25DaGFuZ2UgcHJvcCBvciBsaW5rLlxuICAgKi9cbiAgZ2V0T25DaGFuZ2U6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgaWYgKGlucHV0LnByb3BzLnZhbHVlTGluaykge1xuICAgICAgX2Fzc2VydFZhbHVlTGluayhpbnB1dCk7XG4gICAgICByZXR1cm4gX2hhbmRsZUxpbmtlZFZhbHVlQ2hhbmdlO1xuICAgIH0gZWxzZSBpZiAoaW5wdXQucHJvcHMuY2hlY2tlZExpbmspIHtcbiAgICAgIF9hc3NlcnRDaGVja2VkTGluayhpbnB1dCk7XG4gICAgICByZXR1cm4gX2hhbmRsZUxpbmtlZENoZWNrQ2hhbmdlO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXQucHJvcHMub25DaGFuZ2U7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTGlua2VkVmFsdWVVdGlscztcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9MaW5rZWRWYWx1ZVV0aWxzLmpzXG4gKiogbW9kdWxlIGlkID0gNDRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbnRleHRcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG5cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgY29udGV4dC5cbiAqXG4gKiBUaGUgY29udGV4dCBpcyBhdXRvbWF0aWNhbGx5IHBhc3NlZCBkb3duIHRoZSBjb21wb25lbnQgb3duZXJzaGlwIGhpZXJhcmNoeVxuICogYW5kIGlzIGFjY2Vzc2libGUgdmlhIGB0aGlzLmNvbnRleHRgIG9uIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50cy5cbiAqL1xudmFyIFJlYWN0Q29udGV4dCA9IHtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqL1xuICBjdXJyZW50OiB7fSxcblxuICAvKipcbiAgICogVGVtcG9yYXJpbHkgZXh0ZW5kcyB0aGUgY3VycmVudCBjb250ZXh0IHdoaWxlIGV4ZWN1dGluZyBzY29wZWRDYWxsYmFjay5cbiAgICpcbiAgICogQSB0eXBpY2FsIHVzZSBjYXNlIG1pZ2h0IGxvb2sgbGlrZVxuICAgKlxuICAgKiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICogICAgdmFyIGNoaWxkcmVuID0gUmVhY3RDb250ZXh0LndpdGhDb250ZXh0KHtmb286ICdmb28nfSwgKCkgPT4gKFxuICAgKlxuICAgKiAgICApKTtcbiAgICogICAgcmV0dXJuIDxkaXY+e2NoaWxkcmVufTwvZGl2PjtcbiAgICogIH1cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5ld0NvbnRleHQgTmV3IGNvbnRleHQgdG8gbWVyZ2UgaW50byB0aGUgZXhpc3RpbmcgY29udGV4dFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzY29wZWRDYWxsYmFjayBDYWxsYmFjayB0byBydW4gd2l0aCB0aGUgbmV3IGNvbnRleHRcbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR8YXJyYXk8UmVhY3RDb21wb25lbnQ+fVxuICAgKi9cbiAgd2l0aENvbnRleHQ6IGZ1bmN0aW9uKG5ld0NvbnRleHQsIHNjb3BlZENhbGxiYWNrKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICB2YXIgcHJldmlvdXNDb250ZXh0ID0gUmVhY3RDb250ZXh0LmN1cnJlbnQ7XG4gICAgUmVhY3RDb250ZXh0LmN1cnJlbnQgPSBhc3NpZ24oe30sIHByZXZpb3VzQ29udGV4dCwgbmV3Q29udGV4dCk7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IHNjb3BlZENhbGxiYWNrKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIFJlYWN0Q29udGV4dC5jdXJyZW50ID0gcHJldmlvdXNDb250ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb250ZXh0O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0Q29udGV4dC5qc1xuICoqIG1vZHVsZSBpZCA9IDQ1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RWxlbWVudFZhbGlkYXRvclxuICovXG5cbi8qKlxuICogUmVhY3RFbGVtZW50VmFsaWRhdG9yIHByb3ZpZGVzIGEgd3JhcHBlciBhcm91bmQgYSBlbGVtZW50IGZhY3RvcnlcbiAqIHdoaWNoIHZhbGlkYXRlcyB0aGUgcHJvcHMgcGFzc2VkIHRvIHRoZSBlbGVtZW50LiBUaGlzIGlzIGludGVuZGVkIHRvIGJlXG4gKiB1c2VkIG9ubHkgaW4gREVWIGFuZCBjb3VsZCBiZSByZXBsYWNlZCBieSBhIHN0YXRpYyB0eXBlIGNoZWNrZXIgZm9yIGxhbmd1YWdlc1xuICogdGhhdCBzdXBwb3J0IGl0LlxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSByZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zXCIpO1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIik7XG5cbnZhciBtb25pdG9yQ29kZVVzZSA9IHJlcXVpcmUoXCIuL21vbml0b3JDb2RlVXNlXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG4vKipcbiAqIFdhcm4gaWYgdGhlcmUncyBubyBrZXkgZXhwbGljaXRseSBzZXQgb24gZHluYW1pYyBhcnJheXMgb2YgY2hpbGRyZW4gb3JcbiAqIG9iamVjdCBrZXlzIGFyZSBub3QgdmFsaWQuIFRoaXMgYWxsb3dzIHVzIHRvIGtlZXAgdHJhY2sgb2YgY2hpbGRyZW4gYmV0d2VlblxuICogdXBkYXRlcy5cbiAqL1xudmFyIG93bmVySGFzS2V5VXNlV2FybmluZyA9IHtcbiAgJ3JlYWN0X2tleV93YXJuaW5nJzoge30sXG4gICdyZWFjdF9udW1lcmljX2tleV93YXJuaW5nJzoge31cbn07XG52YXIgb3duZXJIYXNNb25pdG9yZWRPYmplY3RNYXAgPSB7fTtcblxudmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xuXG52YXIgTlVNRVJJQ19QUk9QRVJUWV9SRUdFWCA9IC9eXFxkKyQvO1xuXG4vKipcbiAqIEdldHMgdGhlIGN1cnJlbnQgb3duZXIncyBkaXNwbGF5TmFtZSBmb3IgdXNlIGluIHdhcm5pbmdzLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHJldHVybiB7P3N0cmluZ30gRGlzcGxheSBuYW1lIG9yIHVuZGVmaW5lZFxuICovXG5mdW5jdGlvbiBnZXRDdXJyZW50T3duZXJEaXNwbGF5TmFtZSgpIHtcbiAgdmFyIGN1cnJlbnQgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICByZXR1cm4gY3VycmVudCAmJiBjdXJyZW50LmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBXYXJuIGlmIHRoZSBjb21wb25lbnQgZG9lc24ndCBoYXZlIGFuIGV4cGxpY2l0IGtleSBhc3NpZ25lZCB0byBpdC5cbiAqIFRoaXMgY29tcG9uZW50IGlzIGluIGFuIGFycmF5LiBUaGUgYXJyYXkgY291bGQgZ3JvdyBhbmQgc2hyaW5rIG9yIGJlXG4gKiByZW9yZGVyZWQuIEFsbCBjaGlsZHJlbiB0aGF0IGhhdmVuJ3QgYWxyZWFkeSBiZWVuIHZhbGlkYXRlZCBhcmUgcmVxdWlyZWQgdG9cbiAqIGhhdmUgYSBcImtleVwiIHByb3BlcnR5IGFzc2lnbmVkIHRvIGl0LlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50IENvbXBvbmVudCB0aGF0IHJlcXVpcmVzIGEga2V5LlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGNvbXBvbmVudCdzIHBhcmVudCdzIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlRXhwbGljaXRLZXkoY29tcG9uZW50LCBwYXJlbnRUeXBlKSB7XG4gIGlmIChjb21wb25lbnQuX3N0b3JlLnZhbGlkYXRlZCB8fCBjb21wb25lbnQua2V5ICE9IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29tcG9uZW50Ll9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuXG4gIHdhcm5BbmRNb25pdG9yRm9yS2V5VXNlKFxuICAgICdyZWFjdF9rZXlfd2FybmluZycsXG4gICAgJ0VhY2ggY2hpbGQgaW4gYW4gYXJyYXkgc2hvdWxkIGhhdmUgYSB1bmlxdWUgXCJrZXlcIiBwcm9wLicsXG4gICAgY29tcG9uZW50LFxuICAgIHBhcmVudFR5cGVcbiAgKTtcbn1cblxuLyoqXG4gKiBXYXJuIGlmIHRoZSBrZXkgaXMgYmVpbmcgZGVmaW5lZCBhcyBhbiBvYmplY3QgcHJvcGVydHkgYnV0IGhhcyBhbiBpbmNvcnJlY3RcbiAqIHZhbHVlLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUga2V5LlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50IENvbXBvbmVudCB0aGF0IHJlcXVpcmVzIGEga2V5LlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGNvbXBvbmVudCdzIHBhcmVudCdzIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcGVydHlLZXkobmFtZSwgY29tcG9uZW50LCBwYXJlbnRUeXBlKSB7XG4gIGlmICghTlVNRVJJQ19QUk9QRVJUWV9SRUdFWC50ZXN0KG5hbWUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdhcm5BbmRNb25pdG9yRm9yS2V5VXNlKFxuICAgICdyZWFjdF9udW1lcmljX2tleV93YXJuaW5nJyxcbiAgICAnQ2hpbGQgb2JqZWN0cyBzaG91bGQgaGF2ZSBub24tbnVtZXJpYyBrZXlzIHNvIG9yZGVyaW5nIGlzIHByZXNlcnZlZC4nLFxuICAgIGNvbXBvbmVudCxcbiAgICBwYXJlbnRUeXBlXG4gICk7XG59XG5cbi8qKlxuICogU2hhcmVkIHdhcm5pbmcgYW5kIG1vbml0b3JpbmcgY29kZSBmb3IgdGhlIGtleSB3YXJuaW5ncy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7c3RyaW5nfSB3YXJuaW5nSUQgVGhlIGlkIHVzZWQgd2hlbiBsb2dnaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGJhc2Ugd2FybmluZyB0aGF0IGdldHMgb3V0cHV0LlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50IENvbXBvbmVudCB0aGF0IHJlcXVpcmVzIGEga2V5LlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGNvbXBvbmVudCdzIHBhcmVudCdzIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIHdhcm5BbmRNb25pdG9yRm9yS2V5VXNlKHdhcm5pbmdJRCwgbWVzc2FnZSwgY29tcG9uZW50LCBwYXJlbnRUeXBlKSB7XG4gIHZhciBvd25lck5hbWUgPSBnZXRDdXJyZW50T3duZXJEaXNwbGF5TmFtZSgpO1xuICB2YXIgcGFyZW50TmFtZSA9IHBhcmVudFR5cGUuZGlzcGxheU5hbWU7XG5cbiAgdmFyIHVzZU5hbWUgPSBvd25lck5hbWUgfHwgcGFyZW50TmFtZTtcbiAgdmFyIG1lbW9pemVyID0gb3duZXJIYXNLZXlVc2VXYXJuaW5nW3dhcm5pbmdJRF07XG4gIGlmIChtZW1vaXplci5oYXNPd25Qcm9wZXJ0eSh1c2VOYW1lKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBtZW1vaXplclt1c2VOYW1lXSA9IHRydWU7XG5cbiAgbWVzc2FnZSArPSBvd25lck5hbWUgP1xuICAgIChcIiBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBcIiArIG93bmVyTmFtZSArIFwiLlwiKSA6XG4gICAgKFwiIENoZWNrIHRoZSByZW5kZXJDb21wb25lbnQgY2FsbCB1c2luZyA8XCIgKyBwYXJlbnROYW1lICsgXCI+LlwiKTtcblxuICAvLyBVc3VhbGx5IHRoZSBjdXJyZW50IG93bmVyIGlzIHRoZSBvZmZlbmRlciwgYnV0IGlmIGl0IGFjY2VwdHMgY2hpbGRyZW4gYXMgYVxuICAvLyBwcm9wZXJ0eSwgaXQgbWF5IGJlIHRoZSBjcmVhdG9yIG9mIHRoZSBjaGlsZCB0aGF0J3MgcmVzcG9uc2libGUgZm9yXG4gIC8vIGFzc2lnbmluZyBpdCBhIGtleS5cbiAgdmFyIGNoaWxkT3duZXJOYW1lID0gbnVsbDtcbiAgaWYgKGNvbXBvbmVudC5fb3duZXIgJiYgY29tcG9uZW50Ll9vd25lciAhPT0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgIC8vIE5hbWUgb2YgdGhlIGNvbXBvbmVudCB0aGF0IG9yaWdpbmFsbHkgY3JlYXRlZCB0aGlzIGNoaWxkLlxuICAgIGNoaWxkT3duZXJOYW1lID0gY29tcG9uZW50Ll9vd25lci5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZTtcblxuICAgIG1lc3NhZ2UgKz0gKFwiIEl0IHdhcyBwYXNzZWQgYSBjaGlsZCBmcm9tIFwiICsgY2hpbGRPd25lck5hbWUgKyBcIi5cIik7XG4gIH1cblxuICBtZXNzYWdlICs9ICcgU2VlIGh0dHA6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWtleXMgZm9yIG1vcmUgaW5mb3JtYXRpb24uJztcbiAgbW9uaXRvckNvZGVVc2Uod2FybmluZ0lELCB7XG4gICAgY29tcG9uZW50OiB1c2VOYW1lLFxuICAgIGNvbXBvbmVudE93bmVyOiBjaGlsZE93bmVyTmFtZVxuICB9KTtcbiAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xufVxuXG4vKipcbiAqIExvZyB0aGF0IHdlJ3JlIHVzaW5nIGFuIG9iamVjdCBtYXAuIFdlJ3JlIGNvbnNpZGVyaW5nIGRlcHJlY2F0aW5nIHRoaXNcbiAqIGZlYXR1cmUgYW5kIHJlcGxhY2UgaXQgd2l0aCBwcm9wZXIgTWFwIGFuZCBJbW11dGFibGVNYXAgZGF0YSBzdHJ1Y3R1cmVzLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBtb25pdG9yVXNlT2ZPYmplY3RNYXAoKSB7XG4gIHZhciBjdXJyZW50TmFtZSA9IGdldEN1cnJlbnRPd25lckRpc3BsYXlOYW1lKCkgfHwgJyc7XG4gIGlmIChvd25lckhhc01vbml0b3JlZE9iamVjdE1hcC5oYXNPd25Qcm9wZXJ0eShjdXJyZW50TmFtZSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgb3duZXJIYXNNb25pdG9yZWRPYmplY3RNYXBbY3VycmVudE5hbWVdID0gdHJ1ZTtcbiAgbW9uaXRvckNvZGVVc2UoJ3JlYWN0X29iamVjdF9tYXBfY2hpbGRyZW4nKTtcbn1cblxuLyoqXG4gKiBFbnN1cmUgdGhhdCBldmVyeSBjb21wb25lbnQgZWl0aGVyIGlzIHBhc3NlZCBpbiBhIHN0YXRpYyBsb2NhdGlvbiwgaW4gYW5cbiAqIGFycmF5IHdpdGggYW4gZXhwbGljaXQga2V5cyBwcm9wZXJ0eSBkZWZpbmVkLCBvciBpbiBhbiBvYmplY3QgbGl0ZXJhbFxuICogd2l0aCB2YWxpZCBrZXkgcHJvcGVydHkuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0geyp9IGNvbXBvbmVudCBTdGF0aWNhbGx5IHBhc3NlZCBjaGlsZCBvZiBhbnkgdHlwZS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBjb21wb25lbnQncyBwYXJlbnQncyB0eXBlLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVDaGlsZEtleXMoY29tcG9uZW50LCBwYXJlbnRUeXBlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNvbXBvbmVudCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBvbmVudC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gY29tcG9uZW50W2ldO1xuICAgICAgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgdmFsaWRhdGVFeHBsaWNpdEtleShjaGlsZCwgcGFyZW50VHlwZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjb21wb25lbnQpKSB7XG4gICAgLy8gVGhpcyBjb21wb25lbnQgd2FzIHBhc3NlZCBpbiBhIHZhbGlkIGxvY2F0aW9uLlxuICAgIGNvbXBvbmVudC5fc3RvcmUudmFsaWRhdGVkID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChjb21wb25lbnQgJiYgdHlwZW9mIGNvbXBvbmVudCA9PT0gJ29iamVjdCcpIHtcbiAgICBtb25pdG9yVXNlT2ZPYmplY3RNYXAoKTtcbiAgICBmb3IgKHZhciBuYW1lIGluIGNvbXBvbmVudCkge1xuICAgICAgdmFsaWRhdGVQcm9wZXJ0eUtleShuYW1lLCBjb21wb25lbnRbbmFtZV0sIHBhcmVudFR5cGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCB0aGF0IHRoZSBwcm9wcyBhcmUgdmFsaWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BUeXBlcyBNYXAgb2YgcHJvcCBuYW1lIHRvIGEgUmVhY3RQcm9wVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gZS5nLiBcInByb3BcIiwgXCJjb250ZXh0XCIsIFwiY2hpbGQgY29udGV4dFwiXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjaGVja1Byb3BUeXBlcyhjb21wb25lbnROYW1lLCBwcm9wVHlwZXMsIHByb3BzLCBsb2NhdGlvbikge1xuICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpIHtcbiAgICBpZiAocHJvcFR5cGVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgdmFyIGVycm9yO1xuICAgICAgLy8gUHJvcCB0eXBlIHZhbGlkYXRpb24gbWF5IHRocm93LiBJbiBjYXNlIHRoZXkgZG8sIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgIC8vIGZhaWwgdGhlIHJlbmRlciBwaGFzZSB3aGVyZSBpdCBkaWRuJ3QgZmFpbCBiZWZvcmUuIFNvIHdlIGxvZyBpdC5cbiAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy5cbiAgICAgIHRyeSB7XG4gICAgICAgIGVycm9yID0gcHJvcFR5cGVzW3Byb3BOYW1lXShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGVycm9yID0gZXg7XG4gICAgICB9XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgLy8gc2FtZSBlcnJvci5cbiAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHNvb24gdXNlIHRoZSB3YXJuaW5nIG1vZHVsZVxuICAgICAgICBtb25pdG9yQ29kZVVzZShcbiAgICAgICAgICAncmVhY3RfZmFpbGVkX2Rlc2NyaXB0b3JfdHlwZV9jaGVjaycsXG4gICAgICAgICAgeyBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHtcblxuICBjcmVhdGVFbGVtZW50OiBmdW5jdGlvbih0eXBlLCBwcm9wcywgY2hpbGRyZW4pIHtcbiAgICAvLyBXZSB3YXJuIGluIHRoaXMgY2FzZSBidXQgZG9uJ3QgdGhyb3cuIFdlIGV4cGVjdCB0aGUgZWxlbWVudCBjcmVhdGlvbiB0b1xuICAgIC8vIHN1Y2NlZWQgYW5kIHRoZXJlIHdpbGwgbGlrZWx5IGJlIGVycm9ycyBpbiByZW5kZXIuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICB0eXBlICE9IG51bGwsXG4gICAgICAnUmVhY3QuY3JlYXRlRWxlbWVudDogdHlwZSBzaG91bGQgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLiBJdCBzaG91bGQgJyArXG4gICAgICAgICdiZSBhIHN0cmluZyAoZm9yIERPTSBlbGVtZW50cykgb3IgYSBSZWFjdENsYXNzIChmb3IgY29tcG9zaXRlICcgK1xuICAgICAgICAnY29tcG9uZW50cykuJ1xuICAgICkgOiBudWxsKTtcblxuICAgIHZhciBlbGVtZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIC8vIFRoZSByZXN1bHQgY2FuIGJlIG51bGxpc2ggaWYgYSBtb2NrIG9yIGEgY3VzdG9tIGZ1bmN0aW9uIGlzIHVzZWQuXG4gICAgLy8gVE9ETzogRHJvcCB0aGlzIHdoZW4gdGhlc2UgYXJlIG5vIGxvbmdlciBhbGxvd2VkIGFzIHRoZSB0eXBlIGFyZ3VtZW50LlxuICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWxpZGF0ZUNoaWxkS2V5cyhhcmd1bWVudHNbaV0sIHR5cGUpO1xuICAgIH1cblxuICAgIGlmICh0eXBlKSB7XG4gICAgICB2YXIgbmFtZSA9IHR5cGUuZGlzcGxheU5hbWU7XG4gICAgICBpZiAodHlwZS5wcm9wVHlwZXMpIHtcbiAgICAgICAgY2hlY2tQcm9wVHlwZXMoXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICB0eXBlLnByb3BUeXBlcyxcbiAgICAgICAgICBlbGVtZW50LnByb3BzLFxuICAgICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUuY29udGV4dFR5cGVzKSB7XG4gICAgICAgIGNoZWNrUHJvcFR5cGVzKFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgdHlwZS5jb250ZXh0VHlwZXMsXG4gICAgICAgICAgZWxlbWVudC5fY29udGV4dCxcbiAgICAgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25zLmNvbnRleHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH0sXG5cbiAgY3JlYXRlRmFjdG9yeTogZnVuY3Rpb24odHlwZSkge1xuICAgIHZhciB2YWxpZGF0ZWRGYWN0b3J5ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUVsZW1lbnQuYmluZChcbiAgICAgIG51bGwsXG4gICAgICB0eXBlXG4gICAgKTtcbiAgICB2YWxpZGF0ZWRGYWN0b3J5LnR5cGUgPSB0eXBlO1xuICAgIHJldHVybiB2YWxpZGF0ZWRGYWN0b3J5O1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0RWxlbWVudFZhbGlkYXRvci5qc1xuICoqIG1vZHVsZSBpZCA9IDQ2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJbnB1dFNlbGVjdGlvblxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RET01TZWxlY3Rpb24gPSByZXF1aXJlKFwiLi9SZWFjdERPTVNlbGVjdGlvblwiKTtcblxudmFyIGNvbnRhaW5zTm9kZSA9IHJlcXVpcmUoXCIuL2NvbnRhaW5zTm9kZVwiKTtcbnZhciBmb2N1c05vZGUgPSByZXF1aXJlKFwiLi9mb2N1c05vZGVcIik7XG52YXIgZ2V0QWN0aXZlRWxlbWVudCA9IHJlcXVpcmUoXCIuL2dldEFjdGl2ZUVsZW1lbnRcIik7XG5cbmZ1bmN0aW9uIGlzSW5Eb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBjb250YWluc05vZGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBub2RlKTtcbn1cblxuLyoqXG4gKiBAUmVhY3RJbnB1dFNlbGVjdGlvbjogUmVhY3QgaW5wdXQgc2VsZWN0aW9uIG1vZHVsZS4gQmFzZWQgb24gU2VsZWN0aW9uLmpzLFxuICogYnV0IG1vZGlmaWVkIHRvIGJlIHN1aXRhYmxlIGZvciByZWFjdCBhbmQgaGFzIGEgY291cGxlIG9mIGJ1ZyBmaXhlcyAoZG9lc24ndFxuICogYXNzdW1lIGJ1dHRvbnMgaGF2ZSByYW5nZSBzZWxlY3Rpb25zIGFsbG93ZWQpLlxuICogSW5wdXQgc2VsZWN0aW9uIG1vZHVsZSBmb3IgUmVhY3QuXG4gKi9cbnZhciBSZWFjdElucHV0U2VsZWN0aW9uID0ge1xuXG4gIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllczogZnVuY3Rpb24oZWxlbSkge1xuICAgIHJldHVybiBlbGVtICYmIChcbiAgICAgIChlbGVtLm5vZGVOYW1lID09PSAnSU5QVVQnICYmIGVsZW0udHlwZSA9PT0gJ3RleHQnKSB8fFxuICAgICAgZWxlbS5ub2RlTmFtZSA9PT0gJ1RFWFRBUkVBJyB8fFxuICAgICAgZWxlbS5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJ1xuICAgICk7XG4gIH0sXG5cbiAgZ2V0U2VsZWN0aW9uSW5mb3JtYXRpb246IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmb2N1c2VkRWxlbSA9IGdldEFjdGl2ZUVsZW1lbnQoKTtcbiAgICByZXR1cm4ge1xuICAgICAgZm9jdXNlZEVsZW06IGZvY3VzZWRFbGVtLFxuICAgICAgc2VsZWN0aW9uUmFuZ2U6XG4gICAgICAgICAgUmVhY3RJbnB1dFNlbGVjdGlvbi5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoZm9jdXNlZEVsZW0pID9cbiAgICAgICAgICBSZWFjdElucHV0U2VsZWN0aW9uLmdldFNlbGVjdGlvbihmb2N1c2VkRWxlbSkgOlxuICAgICAgICAgIG51bGxcbiAgICB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmVzdG9yZVNlbGVjdGlvbjogSWYgYW55IHNlbGVjdGlvbiBpbmZvcm1hdGlvbiB3YXMgcG90ZW50aWFsbHkgbG9zdCxcbiAgICogcmVzdG9yZSBpdC4gVGhpcyBpcyB1c2VmdWwgd2hlbiBwZXJmb3JtaW5nIG9wZXJhdGlvbnMgdGhhdCBjb3VsZCByZW1vdmUgZG9tXG4gICAqIG5vZGVzIGFuZCBwbGFjZSB0aGVtIGJhY2sgaW4sIHJlc3VsdGluZyBpbiBmb2N1cyBiZWluZyBsb3N0LlxuICAgKi9cbiAgcmVzdG9yZVNlbGVjdGlvbjogZnVuY3Rpb24ocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbikge1xuICAgIHZhciBjdXJGb2N1c2VkRWxlbSA9IGdldEFjdGl2ZUVsZW1lbnQoKTtcbiAgICB2YXIgcHJpb3JGb2N1c2VkRWxlbSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uZm9jdXNlZEVsZW07XG4gICAgdmFyIHByaW9yU2VsZWN0aW9uUmFuZ2UgPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLnNlbGVjdGlvblJhbmdlO1xuICAgIGlmIChjdXJGb2N1c2VkRWxlbSAhPT0gcHJpb3JGb2N1c2VkRWxlbSAmJlxuICAgICAgICBpc0luRG9jdW1lbnQocHJpb3JGb2N1c2VkRWxlbSkpIHtcbiAgICAgIGlmIChSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhwcmlvckZvY3VzZWRFbGVtKSkge1xuICAgICAgICBSZWFjdElucHV0U2VsZWN0aW9uLnNldFNlbGVjdGlvbihcbiAgICAgICAgICBwcmlvckZvY3VzZWRFbGVtLFxuICAgICAgICAgIHByaW9yU2VsZWN0aW9uUmFuZ2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGZvY3VzTm9kZShwcmlvckZvY3VzZWRFbGVtKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBnZXRTZWxlY3Rpb246IEdldHMgdGhlIHNlbGVjdGlvbiBib3VuZHMgb2YgYSBmb2N1c2VkIHRleHRhcmVhLCBpbnB1dCBvclxuICAgKiBjb250ZW50RWRpdGFibGUgbm9kZS5cbiAgICogLUBpbnB1dDogTG9vayB1cCBzZWxlY3Rpb24gYm91bmRzIG9mIHRoaXMgaW5wdXRcbiAgICogLUByZXR1cm4ge3N0YXJ0OiBzZWxlY3Rpb25TdGFydCwgZW5kOiBzZWxlY3Rpb25FbmR9XG4gICAqL1xuICBnZXRTZWxlY3Rpb246IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgdmFyIHNlbGVjdGlvbjtcblxuICAgIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIGlucHV0KSB7XG4gICAgICAvLyBNb2Rlcm4gYnJvd3NlciB3aXRoIGlucHV0IG9yIHRleHRhcmVhLlxuICAgICAgc2VsZWN0aW9uID0ge1xuICAgICAgICBzdGFydDogaW5wdXQuc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgIGVuZDogaW5wdXQuc2VsZWN0aW9uRW5kXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uICYmIGlucHV0Lm5vZGVOYW1lID09PSAnSU5QVVQnKSB7XG4gICAgICAvLyBJRTggaW5wdXQuXG4gICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgIC8vIFRoZXJlIGNhbiBvbmx5IGJlIG9uZSBzZWxlY3Rpb24gcGVyIGRvY3VtZW50IGluIElFLCBzbyBpdCBtdXN0XG4gICAgICAvLyBiZSBpbiBvdXIgZWxlbWVudC5cbiAgICAgIGlmIChyYW5nZS5wYXJlbnRFbGVtZW50KCkgPT09IGlucHV0KSB7XG4gICAgICAgIHNlbGVjdGlvbiA9IHtcbiAgICAgICAgICBzdGFydDogLXJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgLWlucHV0LnZhbHVlLmxlbmd0aCksXG4gICAgICAgICAgZW5kOiAtcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgLWlucHV0LnZhbHVlLmxlbmd0aClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29udGVudCBlZGl0YWJsZSBvciBvbGQgSUUgdGV4dGFyZWEuXG4gICAgICBzZWxlY3Rpb24gPSBSZWFjdERPTVNlbGVjdGlvbi5nZXRPZmZzZXRzKGlucHV0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZWN0aW9uIHx8IHtzdGFydDogMCwgZW5kOiAwfTtcbiAgfSxcblxuICAvKipcbiAgICogQHNldFNlbGVjdGlvbjogU2V0cyB0aGUgc2VsZWN0aW9uIGJvdW5kcyBvZiBhIHRleHRhcmVhIG9yIGlucHV0IGFuZCBmb2N1c2VzXG4gICAqIHRoZSBpbnB1dC5cbiAgICogLUBpbnB1dCAgICAgU2V0IHNlbGVjdGlvbiBib3VuZHMgb2YgdGhpcyBpbnB1dCBvciB0ZXh0YXJlYVxuICAgKiAtQG9mZnNldHMgICBPYmplY3Qgb2Ygc2FtZSBmb3JtIHRoYXQgaXMgcmV0dXJuZWQgZnJvbSBnZXQqXG4gICAqL1xuICBzZXRTZWxlY3Rpb246IGZ1bmN0aW9uKGlucHV0LCBvZmZzZXRzKSB7XG4gICAgdmFyIHN0YXJ0ID0gb2Zmc2V0cy5zdGFydDtcbiAgICB2YXIgZW5kID0gb2Zmc2V0cy5lbmQ7XG4gICAgaWYgKHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlbmQgPSBzdGFydDtcbiAgICB9XG5cbiAgICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuICAgICAgaW5wdXQuc2VsZWN0aW9uU3RhcnQgPSBzdGFydDtcbiAgICAgIGlucHV0LnNlbGVjdGlvbkVuZCA9IE1hdGgubWluKGVuZCwgaW5wdXQudmFsdWUubGVuZ3RoKTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbiAmJiBpbnB1dC5ub2RlTmFtZSA9PT0gJ0lOUFVUJykge1xuICAgICAgdmFyIHJhbmdlID0gaW5wdXQuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcbiAgICAgIHJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgc3RhcnQpO1xuICAgICAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgZW5kIC0gc3RhcnQpO1xuICAgICAgcmFuZ2Uuc2VsZWN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFJlYWN0RE9NU2VsZWN0aW9uLnNldE9mZnNldHMoaW5wdXQsIG9mZnNldHMpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdElucHV0U2VsZWN0aW9uO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0SW5wdXRTZWxlY3Rpb24uanNcbiAqKiBtb2R1bGUgaWQgPSA0N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBhY2N1bXVsYXRlSW50b1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqXG4gKiBBY2N1bXVsYXRlcyBpdGVtcyB0aGF0IG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIGludG8gdGhlIGZpcnN0IG9uZS4gVGhpc1xuICogaXMgdXNlZCB0byBjb25zZXJ2ZSBtZW1vcnkgYnkgYXZvaWRpbmcgYXJyYXkgYWxsb2NhdGlvbnMsIGFuZCB0aHVzIHNhY3JpZmljZXNcbiAqIEFQSSBjbGVhbm5lc3MuIFNpbmNlIGBjdXJyZW50YCBjYW4gYmUgbnVsbCBiZWZvcmUgYmVpbmcgcGFzc2VkIGluIGFuZCBub3RcbiAqIG51bGwgYWZ0ZXIgdGhpcyBmdW5jdGlvbiwgbWFrZSBzdXJlIHRvIGFzc2lnbiBpdCBiYWNrIHRvIGBjdXJyZW50YDpcbiAqXG4gKiBgYSA9IGFjY3VtdWxhdGVJbnRvKGEsIGIpO2BcbiAqXG4gKiBUaGlzIEFQSSBzaG91bGQgYmUgc3BhcmluZ2x5IHVzZWQuIFRyeSBgYWNjdW11bGF0ZWAgZm9yIHNvbWV0aGluZyBjbGVhbmVyLlxuICpcbiAqIEByZXR1cm4geyp8YXJyYXk8Kj59IEFuIGFjY3VtdWxhdGlvbiBvZiBpdGVtcy5cbiAqL1xuXG5mdW5jdGlvbiBhY2N1bXVsYXRlSW50byhjdXJyZW50LCBuZXh0KSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgbmV4dCAhPSBudWxsLFxuICAgICdhY2N1bXVsYXRlSW50byguLi4pOiBBY2N1bXVsYXRlZCBpdGVtcyBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4nXG4gICkgOiBpbnZhcmlhbnQobmV4dCAhPSBudWxsKSk7XG4gIGlmIChjdXJyZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbmV4dDtcbiAgfVxuXG4gIC8vIEJvdGggYXJlIG5vdCBlbXB0eS4gV2FybmluZzogTmV2ZXIgY2FsbCB4LmNvbmNhdCh5KSB3aGVuIHlvdSBhcmUgbm90XG4gIC8vIGNlcnRhaW4gdGhhdCB4IGlzIGFuIEFycmF5ICh4IGNvdWxkIGJlIGEgc3RyaW5nIHdpdGggY29uY2F0IG1ldGhvZCkuXG4gIHZhciBjdXJyZW50SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoY3VycmVudCk7XG4gIHZhciBuZXh0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkobmV4dCk7XG5cbiAgaWYgKGN1cnJlbnRJc0FycmF5ICYmIG5leHRJc0FycmF5KSB7XG4gICAgY3VycmVudC5wdXNoLmFwcGx5KGN1cnJlbnQsIG5leHQpO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgaWYgKGN1cnJlbnRJc0FycmF5KSB7XG4gICAgY3VycmVudC5wdXNoKG5leHQpO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgaWYgKG5leHRJc0FycmF5KSB7XG4gICAgLy8gQSBiaXQgdG9vIGRhbmdlcm91cyB0byBtdXRhdGUgYG5leHRgLlxuICAgIHJldHVybiBbY3VycmVudF0uY29uY2F0KG5leHQpO1xuICB9XG5cbiAgcmV0dXJuIFtjdXJyZW50LCBuZXh0XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhY2N1bXVsYXRlSW50bztcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9hY2N1bXVsYXRlSW50by5qc1xuICoqIG1vZHVsZSBpZCA9IDQ4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZGVwcmVjYXRlZFxuICovXG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG4vKipcbiAqIFRoaXMgd2lsbCBsb2cgYSBzaW5nbGUgZGVwcmVjYXRpb24gbm90aWNlIHBlciBmdW5jdGlvbiBhbmQgZm9yd2FyZCB0aGUgY2FsbFxuICogb24gdG8gdGhlIG5ldyBBUEkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIG9mIHRoZSBjYWxsLCBlZyAnUmVhY3QnXG4gKiBAcGFyYW0ge3N0cmluZ30gb2xkTmFtZSBUaGUgb2xkIGZ1bmN0aW9uIG5hbWUsIGVnICdyZW5kZXJDb21wb25lbnQnXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3TmFtZSBUaGUgbmV3IGZ1bmN0aW9uIG5hbWUsIGVnICdyZW5kZXInXG4gKiBAcGFyYW0geyp9IGN0eCBUaGUgY29udGV4dCB0aGlzIGZvcndhcmRlZCBjYWxsIHNob3VsZCBydW4gaW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBmb3J3YXJkIG9uIHRvXG4gKiBAcmV0dXJuIHsqfSBXaWxsIGJlIHRoZSB2YWx1ZSBhcyByZXR1cm5lZCBmcm9tIGBmbmBcbiAqL1xuZnVuY3Rpb24gZGVwcmVjYXRlZChuYW1lc3BhY2UsIG9sZE5hbWUsIG5ld05hbWUsIGN0eCwgZm4pIHtcbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgdmFyIG5ld0ZuID0gZnVuY3Rpb24oKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgd2FybmVkLFxuICAgICAgICAobmFtZXNwYWNlICsgXCIuXCIgKyBvbGROYW1lICsgXCIgd2lsbCBiZSBkZXByZWNhdGVkIGluIGEgZnV0dXJlIHZlcnNpb24uIFwiKSArXG4gICAgICAgIChcIlVzZSBcIiArIG5hbWVzcGFjZSArIFwiLlwiICsgbmV3TmFtZSArIFwiIGluc3RlYWQuXCIpXG4gICAgICApIDogbnVsbCk7XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIG5ld0ZuLmRpc3BsYXlOYW1lID0gKG5hbWVzcGFjZSArIFwiX1wiICsgb2xkTmFtZSk7XG4gICAgLy8gV2UgbmVlZCB0byBtYWtlIHN1cmUgYWxsIHByb3BlcnRpZXMgb2YgdGhlIG9yaWdpbmFsIGZuIGFyZSBjb3BpZWQgb3Zlci5cbiAgICAvLyBJbiBwYXJ0aWN1bGFyLCB0aGlzIGlzIG5lZWRlZCB0byBzdXBwb3J0IFByb3BUeXBlc1xuICAgIHJldHVybiBhc3NpZ24obmV3Rm4sIGZuKTtcbiAgfVxuXG4gIHJldHVybiBmbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGVkO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL2RlcHJlY2F0ZWQuanNcbiAqKiBtb2R1bGUgaWQgPSA0OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVzY2FwZVRleHRGb3JCcm93c2VyXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRVNDQVBFX0xPT0tVUCA9IHtcbiAgXCImXCI6IFwiJmFtcDtcIixcbiAgXCI+XCI6IFwiJmd0O1wiLFxuICBcIjxcIjogXCImbHQ7XCIsXG4gIFwiXFxcIlwiOiBcIiZxdW90O1wiLFxuICBcIidcIjogXCImI3gyNztcIlxufTtcblxudmFyIEVTQ0FQRV9SRUdFWCA9IC9bJj48XCInXS9nO1xuXG5mdW5jdGlvbiBlc2NhcGVyKG1hdGNoKSB7XG4gIHJldHVybiBFU0NBUEVfTE9PS1VQW21hdGNoXTtcbn1cblxuLyoqXG4gKiBFc2NhcGVzIHRleHQgdG8gcHJldmVudCBzY3JpcHRpbmcgYXR0YWNrcy5cbiAqXG4gKiBAcGFyYW0geyp9IHRleHQgVGV4dCB2YWx1ZSB0byBlc2NhcGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEFuIGVzY2FwZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlc2NhcGVUZXh0Rm9yQnJvd3Nlcih0ZXh0KSB7XG4gIHJldHVybiAoJycgKyB0ZXh0KS5yZXBsYWNlKEVTQ0FQRV9SRUdFWCwgZXNjYXBlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlVGV4dEZvckJyb3dzZXI7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvZXNjYXBlVGV4dEZvckJyb3dzZXIuanNcbiAqKiBtb2R1bGUgaWQgPSA1MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGZvckVhY2hBY2N1bXVsYXRlZFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBwYXJhbSB7YXJyYXl9IGFuIFwiYWNjdW11bGF0aW9uXCIgb2YgaXRlbXMgd2hpY2ggaXMgZWl0aGVyIGFuIEFycmF5IG9yXG4gKiBhIHNpbmdsZSBpdGVtLiBVc2VmdWwgd2hlbiBwYWlyZWQgd2l0aCB0aGUgYGFjY3VtdWxhdGVgIG1vZHVsZS4gVGhpcyBpcyBhXG4gKiBzaW1wbGUgdXRpbGl0eSB0aGF0IGFsbG93cyB1cyB0byByZWFzb24gYWJvdXQgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zLCBidXRcbiAqIGhhbmRsaW5nIHRoZSBjYXNlIHdoZW4gdGhlcmUgaXMgZXhhY3RseSBvbmUgaXRlbSAoYW5kIHdlIGRvIG5vdCBuZWVkIHRvXG4gKiBhbGxvY2F0ZSBhbiBhcnJheSkuXG4gKi9cbnZhciBmb3JFYWNoQWNjdW11bGF0ZWQgPSBmdW5jdGlvbihhcnIsIGNiLCBzY29wZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgYXJyLmZvckVhY2goY2IsIHNjb3BlKTtcbiAgfSBlbHNlIGlmIChhcnIpIHtcbiAgICBjYi5jYWxsKHNjb3BlLCBhcnIpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZvckVhY2hBY2N1bXVsYXRlZDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9mb3JFYWNoQWNjdW11bGF0ZWQuanNcbiAqKiBtb2R1bGUgaWQgPSA1MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldEV2ZW50Q2hhckNvZGVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogYGNoYXJDb2RlYCByZXByZXNlbnRzIHRoZSBhY3R1YWwgXCJjaGFyYWN0ZXIgY29kZVwiIGFuZCBpcyBzYWZlIHRvIHVzZSB3aXRoXG4gKiBgU3RyaW5nLmZyb21DaGFyQ29kZWAuIEFzIHN1Y2gsIG9ubHkga2V5cyB0aGF0IGNvcnJlc3BvbmQgdG8gcHJpbnRhYmxlXG4gKiBjaGFyYWN0ZXJzIHByb2R1Y2UgYSB2YWxpZCBgY2hhckNvZGVgLCB0aGUgb25seSBleGNlcHRpb24gdG8gdGhpcyBpcyBFbnRlci5cbiAqIFRoZSBUYWIta2V5IGlzIGNvbnNpZGVyZWQgbm9uLXByaW50YWJsZSBhbmQgZG9lcyBub3QgaGF2ZSBhIGBjaGFyQ29kZWAsXG4gKiBwcmVzdW1hYmx5IGJlY2F1c2UgaXQgZG9lcyBub3QgcHJvZHVjZSBhIHRhYi1jaGFyYWN0ZXIgaW4gYnJvd3NlcnMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIGBjaGFyQ29kZWAgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGNoYXJDb2RlO1xuICB2YXIga2V5Q29kZSA9IG5hdGl2ZUV2ZW50LmtleUNvZGU7XG5cbiAgaWYgKCdjaGFyQ29kZScgaW4gbmF0aXZlRXZlbnQpIHtcbiAgICBjaGFyQ29kZSA9IG5hdGl2ZUV2ZW50LmNoYXJDb2RlO1xuXG4gICAgLy8gRkYgZG9lcyBub3Qgc2V0IGBjaGFyQ29kZWAgZm9yIHRoZSBFbnRlci1rZXksIGNoZWNrIGFnYWluc3QgYGtleUNvZGVgLlxuICAgIGlmIChjaGFyQ29kZSA9PT0gMCAmJiBrZXlDb2RlID09PSAxMykge1xuICAgICAgY2hhckNvZGUgPSAxMztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSUU4IGRvZXMgbm90IGltcGxlbWVudCBgY2hhckNvZGVgLCBidXQgYGtleUNvZGVgIGhhcyB0aGUgY29ycmVjdCB2YWx1ZS5cbiAgICBjaGFyQ29kZSA9IGtleUNvZGU7XG4gIH1cblxuICAvLyBTb21lIG5vbi1wcmludGFibGUga2V5cyBhcmUgcmVwb3J0ZWQgaW4gYGNoYXJDb2RlYC9ga2V5Q29kZWAsIGRpc2NhcmQgdGhlbS5cbiAgLy8gTXVzdCBub3QgZGlzY2FyZCB0aGUgKG5vbi0pcHJpbnRhYmxlIEVudGVyLWtleS5cbiAgaWYgKGNoYXJDb2RlID49IDMyIHx8IGNoYXJDb2RlID09PSAxMykge1xuICAgIHJldHVybiBjaGFyQ29kZTtcbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50Q2hhckNvZGU7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvZ2V0RXZlbnRDaGFyQ29kZS5qc1xuICoqIG1vZHVsZSBpZCA9IDUyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RXZlbnRNb2RpZmllclN0YXRlXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFRyYW5zbGF0aW9uIGZyb20gbW9kaWZpZXIga2V5IHRvIHRoZSBhc3NvY2lhdGVkIHByb3BlcnR5IGluIHRoZSBldmVudC5cbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNrZXlzLU1vZGlmaWVyc1xuICovXG5cbnZhciBtb2RpZmllcktleVRvUHJvcCA9IHtcbiAgJ0FsdCc6ICdhbHRLZXknLFxuICAnQ29udHJvbCc6ICdjdHJsS2V5JyxcbiAgJ01ldGEnOiAnbWV0YUtleScsXG4gICdTaGlmdCc6ICdzaGlmdEtleSdcbn07XG5cbi8vIElFOCBkb2VzIG5vdCBpbXBsZW1lbnQgZ2V0TW9kaWZpZXJTdGF0ZSBzbyB3ZSBzaW1wbHkgbWFwIGl0IHRvIHRoZSBvbmx5XG4vLyBtb2RpZmllciBrZXlzIGV4cG9zZWQgYnkgdGhlIGV2ZW50IGl0c2VsZiwgZG9lcyBub3Qgc3VwcG9ydCBMb2NrLWtleXMuXG4vLyBDdXJyZW50bHksIGFsbCBtYWpvciBicm93c2VycyBleGNlcHQgQ2hyb21lIHNlZW1zIHRvIHN1cHBvcnQgTG9jay1rZXlzLlxuZnVuY3Rpb24gbW9kaWZpZXJTdGF0ZUdldHRlcihrZXlBcmcpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIHN5bnRoZXRpY0V2ZW50ID0gdGhpcztcbiAgdmFyIG5hdGl2ZUV2ZW50ID0gc3ludGhldGljRXZlbnQubmF0aXZlRXZlbnQ7XG4gIGlmIChuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUV2ZW50LmdldE1vZGlmaWVyU3RhdGUoa2V5QXJnKTtcbiAgfVxuICB2YXIga2V5UHJvcCA9IG1vZGlmaWVyS2V5VG9Qcm9wW2tleUFyZ107XG4gIHJldHVybiBrZXlQcm9wID8gISFuYXRpdmVFdmVudFtrZXlQcm9wXSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRFdmVudE1vZGlmaWVyU3RhdGUobmF0aXZlRXZlbnQpIHtcbiAgcmV0dXJuIG1vZGlmaWVyU3RhdGVHZXR0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RXZlbnRNb2RpZmllclN0YXRlO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL2dldEV2ZW50TW9kaWZpZXJTdGF0ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDUzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RXZlbnRUYXJnZXRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogR2V0cyB0aGUgdGFyZ2V0IG5vZGUgZnJvbSBhIG5hdGl2ZSBicm93c2VyIGV2ZW50IGJ5IGFjY291bnRpbmcgZm9yXG4gKiBpbmNvbnNpc3RlbmNpZXMgaW4gYnJvd3NlciBET00gQVBJcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtET01FdmVudFRhcmdldH0gVGFyZ2V0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBuYXRpdmVFdmVudC50YXJnZXQgfHwgbmF0aXZlRXZlbnQuc3JjRWxlbWVudCB8fCB3aW5kb3c7XG4gIC8vIFNhZmFyaSBtYXkgZmlyZSBldmVudHMgb24gdGV4dCBub2RlcyAoTm9kZS5URVhUX05PREUgaXMgMykuXG4gIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfcHJvcGVydGllcy5odG1sXG4gIHJldHVybiB0YXJnZXQubm9kZVR5cGUgPT09IDMgPyB0YXJnZXQucGFyZW50Tm9kZSA6IHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudFRhcmdldDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9nZXRFdmVudFRhcmdldC5qc1xuICoqIG1vZHVsZSBpZCA9IDU0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIGNvbnRlbnRLZXkgPSBudWxsO1xuXG4vKipcbiAqIEdldHMgdGhlIGtleSB1c2VkIHRvIGFjY2VzcyB0ZXh0IGNvbnRlbnQgb24gYSBET00gbm9kZS5cbiAqXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBLZXkgdXNlZCB0byBhY2Nlc3MgdGV4dCBjb250ZW50LlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldFRleHRDb250ZW50QWNjZXNzb3IoKSB7XG4gIGlmICghY29udGVudEtleSAmJiBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgICAvLyBQcmVmZXIgdGV4dENvbnRlbnQgdG8gaW5uZXJUZXh0IGJlY2F1c2UgbWFueSBicm93c2VycyBzdXBwb3J0IGJvdGggYnV0XG4gICAgLy8gU1ZHIDx0ZXh0PiBlbGVtZW50cyBkb24ndCBzdXBwb3J0IGlubmVyVGV4dCBldmVuIHdoZW4gPGRpdj4gZG9lcy5cbiAgICBjb250ZW50S2V5ID0gJ3RleHRDb250ZW50JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgP1xuICAgICAgJ3RleHRDb250ZW50JyA6XG4gICAgICAnaW5uZXJUZXh0JztcbiAgfVxuICByZXR1cm4gY29udGVudEtleTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUZXh0Q29udGVudEFjY2Vzc29yO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL2dldFRleHRDb250ZW50QWNjZXNzb3IuanNcbiAqKiBtb2R1bGUgaWQgPSA1NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGlzRXZlbnRTdXBwb3J0ZWRcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciB1c2VIYXNGZWF0dXJlO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB1c2VIYXNGZWF0dXJlID1cbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbiAmJlxuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUgJiZcbiAgICAvLyBhbHdheXMgcmV0dXJucyB0cnVlIGluIG5ld2VyIGJyb3dzZXJzIGFzIHBlciB0aGUgc3RhbmRhcmQuXG4gICAgLy8gQHNlZSBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWhhc2ZlYXR1cmVcbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCcnLCAnJykgIT09IHRydWU7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGFuIGV2ZW50IGlzIHN1cHBvcnRlZCBpbiB0aGUgY3VycmVudCBleGVjdXRpb24gZW52aXJvbm1lbnQuXG4gKlxuICogTk9URTogVGhpcyB3aWxsIG5vdCB3b3JrIGNvcnJlY3RseSBmb3Igbm9uLWdlbmVyaWMgZXZlbnRzIHN1Y2ggYXMgYGNoYW5nZWAsXG4gKiBgcmVzZXRgLCBgbG9hZGAsIGBlcnJvcmAsIGFuZCBgc2VsZWN0YC5cbiAqXG4gKiBCb3Jyb3dzIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVTdWZmaXggRXZlbnQgbmFtZSwgZS5nLiBcImNsaWNrXCIuXG4gKiBAcGFyYW0gez9ib29sZWFufSBjYXB0dXJlIENoZWNrIGlmIHRoZSBjYXB0dXJlIHBoYXNlIGlzIHN1cHBvcnRlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV2ZW50IGlzIHN1cHBvcnRlZC5cbiAqIEBpbnRlcm5hbFxuICogQGxpY2Vuc2UgTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4gKi9cbmZ1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoZXZlbnROYW1lU3VmZml4LCBjYXB0dXJlKSB7XG4gIGlmICghRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NIHx8XG4gICAgICBjYXB0dXJlICYmICEoJ2FkZEV2ZW50TGlzdGVuZXInIGluIGRvY3VtZW50KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBldmVudE5hbWUgPSAnb24nICsgZXZlbnROYW1lU3VmZml4O1xuICB2YXIgaXNTdXBwb3J0ZWQgPSBldmVudE5hbWUgaW4gZG9jdW1lbnQ7XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIGlmICghaXNTdXBwb3J0ZWQgJiYgdXNlSGFzRmVhdHVyZSAmJiBldmVudE5hbWVTdWZmaXggPT09ICd3aGVlbCcpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBvbmx5IHdheSB0byB0ZXN0IHN1cHBvcnQgZm9yIHRoZSBgd2hlZWxgIGV2ZW50IGluIElFOSsuXG4gICAgaXNTdXBwb3J0ZWQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCdFdmVudHMud2hlZWwnLCAnMy4wJyk7XG4gIH1cblxuICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFdmVudFN1cHBvcnRlZDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9pc0V2ZW50U3VwcG9ydGVkLmpzXG4gKiogbW9kdWxlIGlkID0gNTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBHaXZlbiBhIGBwcmV2RWxlbWVudGAgYW5kIGBuZXh0RWxlbWVudGAsIGRldGVybWluZXMgaWYgdGhlIGV4aXN0aW5nXG4gKiBpbnN0YW5jZSBzaG91bGQgYmUgdXBkYXRlZCBhcyBvcHBvc2VkIHRvIGJlaW5nIGRlc3Ryb3llZCBvciByZXBsYWNlZCBieSBhIG5ld1xuICogaW5zdGFuY2UuIEJvdGggYXJndW1lbnRzIGFyZSBlbGVtZW50cy4gVGhpcyBlbnN1cmVzIHRoYXQgdGhpcyBsb2dpYyBjYW5cbiAqIG9wZXJhdGUgb24gc3RhdGVsZXNzIHRyZWVzIHdpdGhvdXQgYW55IGJhY2tpbmcgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2RWxlbWVudFxuICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0RWxlbWVudFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXhpc3RpbmcgaW5zdGFuY2Ugc2hvdWxkIGJlIHVwZGF0ZWQuXG4gKiBAcHJvdGVjdGVkXG4gKi9cbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkge1xuICBpZiAocHJldkVsZW1lbnQgJiYgbmV4dEVsZW1lbnQgJiZcbiAgICAgIHByZXZFbGVtZW50LnR5cGUgPT09IG5leHRFbGVtZW50LnR5cGUgJiZcbiAgICAgIHByZXZFbGVtZW50LmtleSA9PT0gbmV4dEVsZW1lbnQua2V5ICYmXG4gICAgICBwcmV2RWxlbWVudC5fb3duZXIgPT09IG5leHRFbGVtZW50Ll9vd25lcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudC5qc1xuICoqIG1vZHVsZSBpZCA9IDU3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiAgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiAgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgZ2xvYmFsLkltbXV0YWJsZSA9IGZhY3RvcnkoKVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0Jzt2YXIgU0xJQ0UkMCA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICBmdW5jdGlvbiBjcmVhdGVDbGFzcyhjdG9yLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIHtcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gICAgfVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIFVzZWQgZm9yIHNldHRpbmcgcHJvdG90eXBlIG1ldGhvZHMgdGhhdCBJRTggY2hva2VzIG9uLlxuICB2YXIgREVMRVRFID0gJ2RlbGV0ZSc7XG5cbiAgLy8gQ29uc3RhbnRzIGRlc2NyaWJpbmcgdGhlIHNpemUgb2YgdHJpZSBub2Rlcy5cbiAgdmFyIFNISUZUID0gNTsgLy8gUmVzdWx0ZWQgaW4gYmVzdCBwZXJmb3JtYW5jZSBhZnRlciBfX19fX18/XG4gIHZhciBTSVpFID0gMSA8PCBTSElGVDtcbiAgdmFyIE1BU0sgPSBTSVpFIC0gMTtcblxuICAvLyBBIGNvbnNpc3RlbnQgc2hhcmVkIHZhbHVlIHJlcHJlc2VudGluZyBcIm5vdCBzZXRcIiB3aGljaCBlcXVhbHMgbm90aGluZyBvdGhlclxuICAvLyB0aGFuIGl0c2VsZiwgYW5kIG5vdGhpbmcgdGhhdCBjb3VsZCBiZSBwcm92aWRlZCBleHRlcm5hbGx5LlxuICB2YXIgTk9UX1NFVCA9IHt9O1xuXG4gIC8vIEJvb2xlYW4gcmVmZXJlbmNlcywgUm91Z2ggZXF1aXZhbGVudCBvZiBgYm9vbCAmYC5cbiAgdmFyIENIQU5HRV9MRU5HVEggPSB7IHZhbHVlOiBmYWxzZSB9O1xuICB2YXIgRElEX0FMVEVSID0geyB2YWx1ZTogZmFsc2UgfTtcblxuICBmdW5jdGlvbiBNYWtlUmVmKHJlZikge1xuICAgIHJlZi52YWx1ZSA9IGZhbHNlO1xuICAgIHJldHVybiByZWY7XG4gIH1cblxuICBmdW5jdGlvbiBTZXRSZWYocmVmKSB7XG4gICAgcmVmICYmIChyZWYudmFsdWUgPSB0cnVlKTtcbiAgfVxuXG4gIC8vIEEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHZhbHVlIHJlcHJlc2VudGluZyBhbiBcIm93bmVyXCIgZm9yIHRyYW5zaWVudCB3cml0ZXNcbiAgLy8gdG8gdHJpZXMuIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBvbmx5IGV2ZXIgZXF1YWwgaXRzZWxmLCBhbmQgd2lsbCBub3QgZXF1YWxcbiAgLy8gdGhlIHJldHVybiBvZiBhbnkgc3Vic2VxdWVudCBjYWxsIG9mIHRoaXMgZnVuY3Rpb24uXG4gIGZ1bmN0aW9uIE93bmVySUQoKSB7fVxuXG4gIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2NvcHktYXJyYXktaW5saW5lXG4gIGZ1bmN0aW9uIGFyckNvcHkoYXJyLCBvZmZzZXQpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgICB2YXIgbGVuID0gTWF0aC5tYXgoMCwgYXJyLmxlbmd0aCAtIG9mZnNldCk7XG4gICAgdmFyIG5ld0FyciA9IG5ldyBBcnJheShsZW4pO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBsZW47IGlpKyspIHtcbiAgICAgIG5ld0FycltpaV0gPSBhcnJbaWkgKyBvZmZzZXRdO1xuICAgIH1cbiAgICByZXR1cm4gbmV3QXJyO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5zdXJlU2l6ZShpdGVyKSB7XG4gICAgaWYgKGl0ZXIuc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpdGVyLnNpemUgPSBpdGVyLl9faXRlcmF0ZShyZXR1cm5UcnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZXIuc2l6ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXBJbmRleChpdGVyLCBpbmRleCkge1xuICAgIHJldHVybiBpbmRleCA+PSAwID8gKCtpbmRleCkgOiBlbnN1cmVTaXplKGl0ZXIpICsgKCtpbmRleCk7XG4gIH1cblxuICBmdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gd2hvbGVTbGljZShiZWdpbiwgZW5kLCBzaXplKSB7XG4gICAgcmV0dXJuIChiZWdpbiA9PT0gMCB8fCAoc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGJlZ2luIDw9IC1zaXplKSkgJiZcbiAgICAgIChlbmQgPT09IHVuZGVmaW5lZCB8fCAoc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA+PSBzaXplKSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlQmVnaW4oYmVnaW4sIHNpemUpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUluZGV4KGJlZ2luLCBzaXplLCAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVFbmQoZW5kLCBzaXplKSB7XG4gICAgcmV0dXJuIHJlc29sdmVJbmRleChlbmQsIHNpemUsIHNpemUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZUluZGV4KGluZGV4LCBzaXplLCBkZWZhdWx0SW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXggPT09IHVuZGVmaW5lZCA/XG4gICAgICBkZWZhdWx0SW5kZXggOlxuICAgICAgaW5kZXggPCAwID9cbiAgICAgICAgTWF0aC5tYXgoMCwgc2l6ZSArIGluZGV4KSA6XG4gICAgICAgIHNpemUgPT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgaW5kZXggOlxuICAgICAgICAgIE1hdGgubWluKHNpemUsIGluZGV4KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEl0ZXJhYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNJdGVyYWJsZSh2YWx1ZSkgPyB2YWx1ZSA6IFNlcSh2YWx1ZSk7XG4gICAgfVxuXG5cbiAgY3JlYXRlQ2xhc3MoS2V5ZWRJdGVyYWJsZSwgSXRlcmFibGUpO1xuICAgIGZ1bmN0aW9uIEtleWVkSXRlcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0tleWVkKHZhbHVlKSA/IHZhbHVlIDogS2V5ZWRTZXEodmFsdWUpO1xuICAgIH1cblxuXG4gIGNyZWF0ZUNsYXNzKEluZGV4ZWRJdGVyYWJsZSwgSXRlcmFibGUpO1xuICAgIGZ1bmN0aW9uIEluZGV4ZWRJdGVyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW5kZXhlZCh2YWx1ZSkgPyB2YWx1ZSA6IEluZGV4ZWRTZXEodmFsdWUpO1xuICAgIH1cblxuXG4gIGNyZWF0ZUNsYXNzKFNldEl0ZXJhYmxlLCBJdGVyYWJsZSk7XG4gICAgZnVuY3Rpb24gU2V0SXRlcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0l0ZXJhYmxlKHZhbHVlKSAmJiAhaXNBc3NvY2lhdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IFNldFNlcSh2YWx1ZSk7XG4gICAgfVxuXG5cblxuICBmdW5jdGlvbiBpc0l0ZXJhYmxlKG1heWJlSXRlcmFibGUpIHtcbiAgICByZXR1cm4gISEobWF5YmVJdGVyYWJsZSAmJiBtYXliZUl0ZXJhYmxlW0lTX0lURVJBQkxFX1NFTlRJTkVMXSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0tleWVkKG1heWJlS2V5ZWQpIHtcbiAgICByZXR1cm4gISEobWF5YmVLZXllZCAmJiBtYXliZUtleWVkW0lTX0tFWUVEX1NFTlRJTkVMXSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0luZGV4ZWQobWF5YmVJbmRleGVkKSB7XG4gICAgcmV0dXJuICEhKG1heWJlSW5kZXhlZCAmJiBtYXliZUluZGV4ZWRbSVNfSU5ERVhFRF9TRU5USU5FTF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBc3NvY2lhdGl2ZShtYXliZUFzc29jaWF0aXZlKSB7XG4gICAgcmV0dXJuIGlzS2V5ZWQobWF5YmVBc3NvY2lhdGl2ZSkgfHwgaXNJbmRleGVkKG1heWJlQXNzb2NpYXRpdmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNPcmRlcmVkKG1heWJlT3JkZXJlZCkge1xuICAgIHJldHVybiAhIShtYXliZU9yZGVyZWQgJiYgbWF5YmVPcmRlcmVkW0lTX09SREVSRURfU0VOVElORUxdKTtcbiAgfVxuXG4gIEl0ZXJhYmxlLmlzSXRlcmFibGUgPSBpc0l0ZXJhYmxlO1xuICBJdGVyYWJsZS5pc0tleWVkID0gaXNLZXllZDtcbiAgSXRlcmFibGUuaXNJbmRleGVkID0gaXNJbmRleGVkO1xuICBJdGVyYWJsZS5pc0Fzc29jaWF0aXZlID0gaXNBc3NvY2lhdGl2ZTtcbiAgSXRlcmFibGUuaXNPcmRlcmVkID0gaXNPcmRlcmVkO1xuXG4gIEl0ZXJhYmxlLktleWVkID0gS2V5ZWRJdGVyYWJsZTtcbiAgSXRlcmFibGUuSW5kZXhlZCA9IEluZGV4ZWRJdGVyYWJsZTtcbiAgSXRlcmFibGUuU2V0ID0gU2V0SXRlcmFibGU7XG5cblxuICB2YXIgSVNfSVRFUkFCTEVfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9JVEVSQUJMRV9fQEAnO1xuICB2YXIgSVNfS0VZRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9LRVlFRF9fQEAnO1xuICB2YXIgSVNfSU5ERVhFRF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0lOREVYRURfX0BAJztcbiAgdmFyIElTX09SREVSRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9PUkRFUkVEX19AQCc7XG5cbiAgLyogZ2xvYmFsIFN5bWJvbCAqL1xuXG4gIHZhciBJVEVSQVRFX0tFWVMgPSAwO1xuICB2YXIgSVRFUkFURV9WQUxVRVMgPSAxO1xuICB2YXIgSVRFUkFURV9FTlRSSUVTID0gMjtcblxuICB2YXIgUkVBTF9JVEVSQVRPUl9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvcjtcbiAgdmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InO1xuXG4gIHZhciBJVEVSQVRPUl9TWU1CT0wgPSBSRUFMX0lURVJBVE9SX1NZTUJPTCB8fCBGQVVYX0lURVJBVE9SX1NZTUJPTDtcblxuXG4gIGZ1bmN0aW9uIEl0ZXJhdG9yKG5leHQpIHtcbiAgICAgIHRoaXMubmV4dCA9IG5leHQ7XG4gICAgfVxuXG4gICAgSXRlcmF0b3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJ1tJdGVyYXRvcl0nO1xuICAgIH07XG5cblxuICBJdGVyYXRvci5LRVlTID0gSVRFUkFURV9LRVlTO1xuICBJdGVyYXRvci5WQUxVRVMgPSBJVEVSQVRFX1ZBTFVFUztcbiAgSXRlcmF0b3IuRU5UUklFUyA9IElURVJBVEVfRU5UUklFUztcblxuICBJdGVyYXRvci5wcm90b3R5cGUuaW5zcGVjdCA9XG4gIEl0ZXJhdG9yLnByb3RvdHlwZS50b1NvdXJjZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTsgfVxuICBJdGVyYXRvci5wcm90b3R5cGVbSVRFUkFUT1JfU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVmFsdWUodHlwZSwgaywgdiwgaXRlcmF0b3JSZXN1bHQpIHtcbiAgICB2YXIgdmFsdWUgPSB0eXBlID09PSAwID8gayA6IHR5cGUgPT09IDEgPyB2IDogW2ssIHZdO1xuICAgIGl0ZXJhdG9yUmVzdWx0ID8gKGl0ZXJhdG9yUmVzdWx0LnZhbHVlID0gdmFsdWUpIDogKGl0ZXJhdG9yUmVzdWx0ID0ge1xuICAgICAgdmFsdWU6IHZhbHVlLCBkb25lOiBmYWxzZVxuICAgIH0pO1xuICAgIHJldHVybiBpdGVyYXRvclJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yRG9uZSgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBmdW5jdGlvbiBoYXNJdGVyYXRvcihtYXliZUl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuICEhZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSXRlcmF0b3IobWF5YmVJdGVyYXRvcikge1xuICAgIHJldHVybiBtYXliZUl0ZXJhdG9yICYmIHR5cGVvZiBtYXliZUl0ZXJhdG9yLm5leHQgPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJdGVyYXRvcihpdGVyYWJsZSkge1xuICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihpdGVyYWJsZSk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm4gJiYgaXRlcmF0b3JGbi5jYWxsKGl0ZXJhYmxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4oaXRlcmFibGUpIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IGl0ZXJhYmxlICYmIChcbiAgICAgIChSRUFMX0lURVJBVE9SX1NZTUJPTCAmJiBpdGVyYWJsZVtSRUFMX0lURVJBVE9SX1NZTUJPTF0pIHx8XG4gICAgICBpdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF1cbiAgICApO1xuICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yRm47XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcic7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhTZXEsIEl0ZXJhYmxlKTtcbiAgICBmdW5jdGlvbiBTZXEodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlTZXF1ZW5jZSgpIDpcbiAgICAgICAgaXNJdGVyYWJsZSh2YWx1ZSkgPyB2YWx1ZS50b1NlcSgpIDogc2VxRnJvbVZhbHVlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBTZXEub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gU2VxKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFNlcS5wcm90b3R5cGUudG9TZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBTZXEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdTZXEgeycsICd9Jyk7XG4gICAgfTtcblxuICAgIFNlcS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5fY2FjaGUgJiYgdGhpcy5fX2l0ZXJhdGVVbmNhY2hlZCkge1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHRoaXMuZW50cnlTZXEoKS50b0FycmF5KCk7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuX2NhY2hlLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvLyBhYnN0cmFjdCBfX2l0ZXJhdGVVbmNhY2hlZChmbiwgcmV2ZXJzZSlcblxuICAgIFNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHJldHVybiBzZXFJdGVyYXRlKHRoaXMsIGZuLCByZXZlcnNlLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgLy8gYWJzdHJhY3QgX19pdGVyYXRvclVuY2FjaGVkKHR5cGUsIHJldmVyc2UpXG5cbiAgICBTZXEucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICByZXR1cm4gc2VxSXRlcmF0b3IodGhpcywgdHlwZSwgcmV2ZXJzZSwgdHJ1ZSk7XG4gICAgfTtcblxuXG5cbiAgY3JlYXRlQ2xhc3MoS2V5ZWRTZXEsIFNlcSk7XG4gICAgZnVuY3Rpb24gS2V5ZWRTZXEodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cbiAgICAgICAgZW1wdHlTZXF1ZW5jZSgpLnRvS2V5ZWRTZXEoKSA6XG4gICAgICAgIGlzSXRlcmFibGUodmFsdWUpID9cbiAgICAgICAgICAoaXNLZXllZCh2YWx1ZSkgPyB2YWx1ZS50b1NlcSgpIDogdmFsdWUuZnJvbUVudHJ5U2VxKCkpIDpcbiAgICAgICAgICBrZXllZFNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgS2V5ZWRTZXEub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gS2V5ZWRTZXEoYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgS2V5ZWRTZXEucHJvdG90eXBlLnRvS2V5ZWRTZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBLZXllZFNlcS5wcm90b3R5cGUudG9TZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKEluZGV4ZWRTZXEsIFNlcSk7XG4gICAgZnVuY3Rpb24gSW5kZXhlZFNlcSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eVNlcXVlbmNlKCkgOlxuICAgICAgICAhaXNJdGVyYWJsZSh2YWx1ZSkgPyBpbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSA6XG4gICAgICAgIGlzS2V5ZWQodmFsdWUpID8gdmFsdWUuZW50cnlTZXEoKSA6IHZhbHVlLnRvSW5kZXhlZFNlcSgpO1xuICAgIH1cblxuICAgIEluZGV4ZWRTZXEub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gSW5kZXhlZFNlcShhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBJbmRleGVkU2VxLnByb3RvdHlwZS50b0luZGV4ZWRTZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBJbmRleGVkU2VxLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnU2VxIFsnLCAnXScpO1xuICAgIH07XG5cbiAgICBJbmRleGVkU2VxLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIHNlcUl0ZXJhdGUodGhpcywgZm4sIHJldmVyc2UsIGZhbHNlKTtcbiAgICB9O1xuXG4gICAgSW5kZXhlZFNlcS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHJldHVybiBzZXFJdGVyYXRvcih0aGlzLCB0eXBlLCByZXZlcnNlLCBmYWxzZSk7XG4gICAgfTtcblxuXG5cbiAgY3JlYXRlQ2xhc3MoU2V0U2VxLCBTZXEpO1xuICAgIGZ1bmN0aW9uIFNldFNlcSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5U2VxdWVuY2UoKSA6XG4gICAgICAgICFpc0l0ZXJhYmxlKHZhbHVlKSA/IGluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpIDpcbiAgICAgICAgaXNLZXllZCh2YWx1ZSkgPyB2YWx1ZS5lbnRyeVNlcSgpIDogdmFsdWVcbiAgICAgICkudG9TZXRTZXEoKTtcbiAgICB9XG5cbiAgICBTZXRTZXEub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gU2V0U2VxKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFNldFNlcS5wcm90b3R5cGUudG9TZXRTZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cblxuXG4gIFNlcS5pc1NlcSA9IGlzU2VxO1xuICBTZXEuS2V5ZWQgPSBLZXllZFNlcTtcbiAgU2VxLlNldCA9IFNldFNlcTtcbiAgU2VxLkluZGV4ZWQgPSBJbmRleGVkU2VxO1xuXG4gIHZhciBJU19TRVFfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9TRVFfX0BAJztcblxuICBTZXEucHJvdG90eXBlW0lTX1NFUV9TRU5USU5FTF0gPSB0cnVlO1xuXG5cblxuICAvLyAjcHJhZ21hIFJvb3QgU2VxdWVuY2VzXG5cbiAgY3JlYXRlQ2xhc3MoQXJyYXlTZXEsIEluZGV4ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIEFycmF5U2VxKGFycmF5KSB7XG4gICAgICB0aGlzLl9hcnJheSA9IGFycmF5O1xuICAgICAgdGhpcy5zaXplID0gYXJyYXkubGVuZ3RoO1xuICAgIH1cblxuICAgIEFycmF5U2VxLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyhpbmRleCkgPyB0aGlzLl9hcnJheVt3cmFwSW5kZXgodGhpcywgaW5kZXgpXSA6IG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICBBcnJheVNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX2FycmF5O1xuICAgICAgdmFyIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgICAgaWYgKGZuKGFycmF5W3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldLCBpaSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH07XG5cbiAgICBBcnJheVNlcS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX2FycmF5O1xuICAgICAgdmFyIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgXG4gICAgICAgIHtyZXR1cm4gaWkgPiBtYXhJbmRleCA/XG4gICAgICAgICAgaXRlcmF0b3JEb25lKCkgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaWksIGFycmF5W3JldmVyc2UgPyBtYXhJbmRleCAtIGlpKysgOiBpaSsrXSl9XG4gICAgICApO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKE9iamVjdFNlcSwgS2V5ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIE9iamVjdFNlcShvYmplY3QpIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgICAgIHRoaXMuX29iamVjdCA9IG9iamVjdDtcbiAgICAgIHRoaXMuX2tleXMgPSBrZXlzO1xuICAgICAgdGhpcy5zaXplID0ga2V5cy5sZW5ndGg7XG4gICAgfVxuXG4gICAgT2JqZWN0U2VxLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICBpZiAobm90U2V0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5oYXMoa2V5KSkge1xuICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fb2JqZWN0W2tleV07XG4gICAgfTtcblxuICAgIE9iamVjdFNlcS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fb2JqZWN0Lmhhc093blByb3BlcnR5KGtleSk7XG4gICAgfTtcblxuICAgIE9iamVjdFNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHZhciBvYmplY3QgPSB0aGlzLl9vYmplY3Q7XG4gICAgICB2YXIga2V5cyA9IHRoaXMuX2tleXM7XG4gICAgICB2YXIgbWF4SW5kZXggPSBrZXlzLmxlbmd0aCAtIDE7XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDw9IG1heEluZGV4OyBpaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldO1xuICAgICAgICBpZiAoZm4ob2JqZWN0W2tleV0sIGtleSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH07XG5cbiAgICBPYmplY3RTZXEucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gdGhpcy5fb2JqZWN0O1xuICAgICAgdmFyIGtleXMgPSB0aGlzLl9rZXlzO1xuICAgICAgdmFyIG1heEluZGV4ID0ga2V5cy5sZW5ndGggLSAxO1xuICAgICAgdmFyIGlpID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tyZXZlcnNlID8gbWF4SW5kZXggLSBpaSA6IGlpXTtcbiAgICAgICAgcmV0dXJuIGlpKysgPiBtYXhJbmRleCA/XG4gICAgICAgICAgaXRlcmF0b3JEb25lKCkgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwga2V5LCBvYmplY3Rba2V5XSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gIE9iamVjdFNlcS5wcm90b3R5cGVbSVNfT1JERVJFRF9TRU5USU5FTF0gPSB0cnVlO1xuXG5cbiAgY3JlYXRlQ2xhc3MoSXRlcmFibGVTZXEsIEluZGV4ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIEl0ZXJhYmxlU2VxKGl0ZXJhYmxlKSB7XG4gICAgICB0aGlzLl9pdGVyYWJsZSA9IGl0ZXJhYmxlO1xuICAgICAgdGhpcy5zaXplID0gaXRlcmFibGUubGVuZ3RoIHx8IGl0ZXJhYmxlLnNpemU7XG4gICAgfVxuXG4gICAgSXRlcmFibGVTZXEucHJvdG90eXBlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYWJsZSA9IHRoaXMuX2l0ZXJhYmxlO1xuICAgICAgdmFyIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUpO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaWYgKGlzSXRlcmF0b3IoaXRlcmF0b3IpKSB7XG4gICAgICAgIHZhciBzdGVwO1xuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgaWYgKGZuKHN0ZXAudmFsdWUsIGl0ZXJhdGlvbnMrKywgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG5cbiAgICBJdGVyYWJsZVNlcS5wcm90b3R5cGUuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXJhYmxlID0gdGhpcy5faXRlcmFibGU7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihpdGVyYWJsZSk7XG4gICAgICBpZiAoIWlzSXRlcmF0b3IoaXRlcmF0b3IpKSB7XG4gICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoaXRlcmF0b3JEb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgc3RlcC52YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG5cblxuICBjcmVhdGVDbGFzcyhJdGVyYXRvclNlcSwgSW5kZXhlZFNlcSk7XG4gICAgZnVuY3Rpb24gSXRlcmF0b3JTZXEoaXRlcmF0b3IpIHtcbiAgICAgIHRoaXMuX2l0ZXJhdG9yID0gaXRlcmF0b3I7XG4gICAgICB0aGlzLl9pdGVyYXRvckNhY2hlID0gW107XG4gICAgfVxuXG4gICAgSXRlcmF0b3JTZXEucHJvdG90eXBlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXJhdG9yO1xuICAgICAgdmFyIGNhY2hlID0gdGhpcy5faXRlcmF0b3JDYWNoZTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHdoaWxlIChpdGVyYXRpb25zIDwgY2FjaGUubGVuZ3RoKSB7XG4gICAgICAgIGlmIChmbihjYWNoZVtpdGVyYXRpb25zXSwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHN0ZXA7XG4gICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIHZhciB2YWwgPSBzdGVwLnZhbHVlO1xuICAgICAgICBjYWNoZVtpdGVyYXRpb25zXSA9IHZhbDtcbiAgICAgICAgaWYgKGZuKHZhbCwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcblxuICAgIEl0ZXJhdG9yU2VxLnByb3RvdHlwZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyYXRvcjtcbiAgICAgIHZhciBjYWNoZSA9IHRoaXMuX2l0ZXJhdG9yQ2FjaGU7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgaWYgKGl0ZXJhdGlvbnMgPj0gY2FjaGUubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhY2hlW2l0ZXJhdGlvbnNdID0gc3RlcC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zLCBjYWNoZVtpdGVyYXRpb25zKytdKTtcbiAgICAgIH0pO1xuICAgIH07XG5cblxuXG5cbiAgLy8gIyBwcmFnbWEgSGVscGVyIGZ1bmN0aW9uc1xuXG4gIGZ1bmN0aW9uIGlzU2VxKG1heWJlU2VxKSB7XG4gICAgcmV0dXJuICEhKG1heWJlU2VxICYmIG1heWJlU2VxW0lTX1NFUV9TRU5USU5FTF0pO1xuICB9XG5cbiAgdmFyIEVNUFRZX1NFUTtcblxuICBmdW5jdGlvbiBlbXB0eVNlcXVlbmNlKCkge1xuICAgIHJldHVybiBFTVBUWV9TRVEgfHwgKEVNUFRZX1NFUSA9IG5ldyBBcnJheVNlcShbXSkpO1xuICB9XG5cbiAgZnVuY3Rpb24ga2V5ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgICB2YXIgc2VxID1cbiAgICAgIEFycmF5LmlzQXJyYXkodmFsdWUpID8gbmV3IEFycmF5U2VxKHZhbHVlKS5mcm9tRW50cnlTZXEoKSA6XG4gICAgICBpc0l0ZXJhdG9yKHZhbHVlKSA/IG5ldyBJdGVyYXRvclNlcSh2YWx1ZSkuZnJvbUVudHJ5U2VxKCkgOlxuICAgICAgaGFzSXRlcmF0b3IodmFsdWUpID8gbmV3IEl0ZXJhYmxlU2VxKHZhbHVlKS5mcm9tRW50cnlTZXEoKSA6XG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gbmV3IE9iamVjdFNlcSh2YWx1ZSkgOlxuICAgICAgdW5kZWZpbmVkO1xuICAgIGlmICghc2VxKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnRXhwZWN0ZWQgQXJyYXkgb3IgaXRlcmFibGUgb2JqZWN0IG9mIFtrLCB2XSBlbnRyaWVzLCAnK1xuICAgICAgICAnb3Iga2V5ZWQgb2JqZWN0OiAnICsgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzZXE7XG4gIH1cblxuICBmdW5jdGlvbiBpbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSB7XG4gICAgdmFyIHNlcSA9IG1heWJlSW5kZXhlZFNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gICAgaWYgKCFzZXEpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdFeHBlY3RlZCBBcnJheSBvciBpdGVyYWJsZSBvYmplY3Qgb2YgdmFsdWVzOiAnICsgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzZXE7XG4gIH1cblxuICBmdW5jdGlvbiBzZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgICB2YXIgc2VxID0gbWF5YmVJbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSB8fFxuICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgbmV3IE9iamVjdFNlcSh2YWx1ZSkpO1xuICAgIGlmICghc2VxKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnRXhwZWN0ZWQgQXJyYXkgb3IgaXRlcmFibGUgb2JqZWN0IG9mIHZhbHVlcywgb3Iga2V5ZWQgb2JqZWN0OiAnICsgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzZXE7XG4gIH1cblxuICBmdW5jdGlvbiBtYXliZUluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgaXNBcnJheUxpa2UodmFsdWUpID8gbmV3IEFycmF5U2VxKHZhbHVlKSA6XG4gICAgICBpc0l0ZXJhdG9yKHZhbHVlKSA/IG5ldyBJdGVyYXRvclNlcSh2YWx1ZSkgOlxuICAgICAgaGFzSXRlcmF0b3IodmFsdWUpID8gbmV3IEl0ZXJhYmxlU2VxKHZhbHVlKSA6XG4gICAgICB1bmRlZmluZWRcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VxSXRlcmF0ZShzZXEsIGZuLCByZXZlcnNlLCB1c2VLZXlzKSB7XG4gICAgdmFyIGNhY2hlID0gc2VxLl9jYWNoZTtcbiAgICBpZiAoY2FjaGUpIHtcbiAgICAgIHZhciBtYXhJbmRleCA9IGNhY2hlLmxlbmd0aCAtIDE7XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDw9IG1heEluZGV4OyBpaSsrKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGNhY2hlW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldO1xuICAgICAgICBpZiAoZm4oZW50cnlbMV0sIHVzZUtleXMgPyBlbnRyeVswXSA6IGlpLCBzZXEpID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBpaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpaTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcS5fX2l0ZXJhdGVVbmNhY2hlZChmbiwgcmV2ZXJzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXFJdGVyYXRvcihzZXEsIHR5cGUsIHJldmVyc2UsIHVzZUtleXMpIHtcbiAgICB2YXIgY2FjaGUgPSBzZXEuX2NhY2hlO1xuICAgIGlmIChjYWNoZSkge1xuICAgICAgdmFyIG1heEluZGV4ID0gY2FjaGUubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gY2FjaGVbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV07XG4gICAgICAgIHJldHVybiBpaSsrID4gbWF4SW5kZXggP1xuICAgICAgICAgIGl0ZXJhdG9yRG9uZSgpIDpcbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIHVzZUtleXMgPyBlbnRyeVswXSA6IGlpIC0gMSwgZW50cnlbMV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBzZXEuX19pdGVyYXRvclVuY2FjaGVkKHR5cGUsIHJldmVyc2UpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoQ29sbGVjdGlvbiwgSXRlcmFibGUpO1xuICAgIGZ1bmN0aW9uIENvbGxlY3Rpb24oKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0Fic3RyYWN0Jyk7XG4gICAgfVxuXG5cbiAgY3JlYXRlQ2xhc3MoS2V5ZWRDb2xsZWN0aW9uLCBDb2xsZWN0aW9uKTtmdW5jdGlvbiBLZXllZENvbGxlY3Rpb24oKSB7fVxuXG4gIGNyZWF0ZUNsYXNzKEluZGV4ZWRDb2xsZWN0aW9uLCBDb2xsZWN0aW9uKTtmdW5jdGlvbiBJbmRleGVkQ29sbGVjdGlvbigpIHt9XG5cbiAgY3JlYXRlQ2xhc3MoU2V0Q29sbGVjdGlvbiwgQ29sbGVjdGlvbik7ZnVuY3Rpb24gU2V0Q29sbGVjdGlvbigpIHt9XG5cblxuICBDb2xsZWN0aW9uLktleWVkID0gS2V5ZWRDb2xsZWN0aW9uO1xuICBDb2xsZWN0aW9uLkluZGV4ZWQgPSBJbmRleGVkQ29sbGVjdGlvbjtcbiAgQ29sbGVjdGlvbi5TZXQgPSBTZXRDb2xsZWN0aW9uO1xuXG4gIC8qKlxuICAgKiBBbiBleHRlbnNpb24gb2YgdGhlIFwic2FtZS12YWx1ZVwiIGFsZ29yaXRobSBhcyBbZGVzY3JpYmVkIGZvciB1c2UgYnkgRVM2IE1hcFxuICAgKiBhbmQgU2V0XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXAjS2V5X2VxdWFsaXR5KVxuICAgKlxuICAgKiBOYU4gaXMgY29uc2lkZXJlZCB0aGUgc2FtZSBhcyBOYU4sIGhvd2V2ZXIgLTAgYW5kIDAgYXJlIGNvbnNpZGVyZWQgdGhlIHNhbWVcbiAgICogdmFsdWUsIHdoaWNoIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBhbGdvcml0aG0gZGVzY3JpYmVkIGJ5XG4gICAqIFtgT2JqZWN0LmlzYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzKS5cbiAgICpcbiAgICogVGhpcyBpcyBleHRlbmRlZCBmdXJ0aGVyIHRvIGFsbG93IE9iamVjdHMgdG8gZGVzY3JpYmUgdGhlIHZhbHVlcyB0aGV5XG4gICAqIHJlcHJlc2VudCwgYnkgd2F5IG9mIGB2YWx1ZU9mYCBvciBgZXF1YWxzYCAoYW5kIGBoYXNoQ29kZWApLlxuICAgKlxuICAgKiBOb3RlOiBiZWNhdXNlIG9mIHRoaXMgZXh0ZW5zaW9uLCB0aGUga2V5IGVxdWFsaXR5IG9mIEltbXV0YWJsZS5NYXAgYW5kIHRoZVxuICAgKiB2YWx1ZSBlcXVhbGl0eSBvZiBJbW11dGFibGUuU2V0IHdpbGwgZGlmZmVyIGZyb20gRVM2IE1hcCBhbmQgU2V0LlxuICAgKlxuICAgKiAjIyMgRGVmaW5pbmcgY3VzdG9tIHZhbHVlc1xuICAgKlxuICAgKiBUaGUgZWFzaWVzdCB3YXkgdG8gZGVzY3JpYmUgdGhlIHZhbHVlIGFuIG9iamVjdCByZXByZXNlbnRzIGlzIGJ5IGltcGxlbWVudGluZ1xuICAgKiBgdmFsdWVPZmAuIEZvciBleGFtcGxlLCBgRGF0ZWAgcmVwcmVzZW50cyBhIHZhbHVlIGJ5IHJldHVybmluZyBhIHVuaXhcbiAgICogdGltZXN0YW1wIGZvciBgdmFsdWVPZmA6XG4gICAqXG4gICAqICAgICB2YXIgZGF0ZTEgPSBuZXcgRGF0ZSgxMjM0NTY3ODkwMDAwKTsgLy8gRnJpIEZlYiAxMyAyMDA5IC4uLlxuICAgKiAgICAgdmFyIGRhdGUyID0gbmV3IERhdGUoMTIzNDU2Nzg5MDAwMCk7XG4gICAqICAgICBkYXRlMS52YWx1ZU9mKCk7IC8vIDEyMzQ1Njc4OTAwMDBcbiAgICogICAgIGFzc2VydCggZGF0ZTEgIT09IGRhdGUyICk7XG4gICAqICAgICBhc3NlcnQoIEltbXV0YWJsZS5pcyggZGF0ZTEsIGRhdGUyICkgKTtcbiAgICpcbiAgICogTm90ZTogb3ZlcnJpZGluZyBgdmFsdWVPZmAgbWF5IGhhdmUgb3RoZXIgaW1wbGljYXRpb25zIGlmIHlvdSB1c2UgdGhpcyBvYmplY3RcbiAgICogd2hlcmUgSmF2YVNjcmlwdCBleHBlY3RzIGEgcHJpbWl0aXZlLCBzdWNoIGFzIGltcGxpY2l0IHN0cmluZyBjb2VyY2lvbi5cbiAgICpcbiAgICogRm9yIG1vcmUgY29tcGxleCB0eXBlcywgZXNwZWNpYWxseSBjb2xsZWN0aW9ucywgaW1wbGVtZW50aW5nIGB2YWx1ZU9mYCBtYXlcbiAgICogbm90IGJlIHBlcmZvcm1hbnQuIEFuIGFsdGVybmF0aXZlIGlzIHRvIGltcGxlbWVudCBgZXF1YWxzYCBhbmQgYGhhc2hDb2RlYC5cbiAgICpcbiAgICogYGVxdWFsc2AgdGFrZXMgYW5vdGhlciBvYmplY3QsIHByZXN1bWFibHkgb2Ygc2ltaWxhciB0eXBlLCBhbmQgcmV0dXJucyB0cnVlXG4gICAqIGlmIHRoZSBpdCBpcyBlcXVhbC4gRXF1YWxpdHkgaXMgc3ltbWV0cmljYWwsIHNvIHRoZSBzYW1lIHJlc3VsdCBzaG91bGQgYmVcbiAgICogcmV0dXJuZWQgaWYgdGhpcyBhbmQgdGhlIGFyZ3VtZW50IGFyZSBmbGlwcGVkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0KCBhLmVxdWFscyhiKSA9PT0gYi5lcXVhbHMoYSkgKTtcbiAgICpcbiAgICogYGhhc2hDb2RlYCByZXR1cm5zIGEgMzJiaXQgaW50ZWdlciBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBvYmplY3Qgd2hpY2ggd2lsbFxuICAgKiBiZSB1c2VkIHRvIGRldGVybWluZSBob3cgdG8gc3RvcmUgdGhlIHZhbHVlIG9iamVjdCBpbiBhIE1hcCBvciBTZXQuIFlvdSBtdXN0XG4gICAqIHByb3ZpZGUgYm90aCBvciBuZWl0aGVyIG1ldGhvZHMsIG9uZSBtdXN0IG5vdCBleGlzdCB3aXRob3V0IHRoZSBvdGhlci5cbiAgICpcbiAgICogQWxzbywgYW4gaW1wb3J0YW50IHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZXNlIG1ldGhvZHMgbXVzdCBiZSB1cGhlbGQ6IGlmIHR3b1xuICAgKiB2YWx1ZXMgYXJlIGVxdWFsLCB0aGV5ICptdXN0KiByZXR1cm4gdGhlIHNhbWUgaGFzaENvZGUuIElmIHRoZSB2YWx1ZXMgYXJlIG5vdFxuICAgKiBlcXVhbCwgdGhleSBtaWdodCBoYXZlIHRoZSBzYW1lIGhhc2hDb2RlOyB0aGlzIGlzIGNhbGxlZCBhIGhhc2ggY29sbGlzaW9uLFxuICAgKiBhbmQgd2hpbGUgdW5kZXNpcmFibGUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIGl0IGlzIGFjY2VwdGFibGUuXG4gICAqXG4gICAqICAgICBpZiAoYS5lcXVhbHMoYikpIHtcbiAgICogICAgICAgYXNzZXJ0KCBhLmhhc2hDb2RlKCkgPT09IGIuaGFzaENvZGUoKSApO1xuICAgKiAgICAgfVxuICAgKlxuICAgKiBBbGwgSW1tdXRhYmxlIGNvbGxlY3Rpb25zIGltcGxlbWVudCBgZXF1YWxzYCBhbmQgYGhhc2hDb2RlYC5cbiAgICpcbiAgICovXG4gIGZ1bmN0aW9uIGlzKHZhbHVlQSwgdmFsdWVCKSB7XG4gICAgaWYgKHZhbHVlQSA9PT0gdmFsdWVCIHx8ICh2YWx1ZUEgIT09IHZhbHVlQSAmJiB2YWx1ZUIgIT09IHZhbHVlQikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXZhbHVlQSB8fCAhdmFsdWVCKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWVBLnZhbHVlT2YgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgdHlwZW9mIHZhbHVlQi52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWx1ZUEgPSB2YWx1ZUEudmFsdWVPZigpO1xuICAgICAgdmFsdWVCID0gdmFsdWVCLnZhbHVlT2YoKTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZUEuZXF1YWxzID09PSAnZnVuY3Rpb24nICYmXG4gICAgICB0eXBlb2YgdmFsdWVCLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgIHZhbHVlQS5lcXVhbHModmFsdWVCKSA6XG4gICAgICAgIHZhbHVlQSA9PT0gdmFsdWVCIHx8ICh2YWx1ZUEgIT09IHZhbHVlQSAmJiB2YWx1ZUIgIT09IHZhbHVlQik7XG4gIH1cblxuICBmdW5jdGlvbiBmcm9tSlMoanNvbiwgY29udmVydGVyKSB7XG4gICAgcmV0dXJuIGNvbnZlcnRlciA/XG4gICAgICBmcm9tSlNXaXRoKGNvbnZlcnRlciwganNvbiwgJycsIHsnJzoganNvbn0pIDpcbiAgICAgIGZyb21KU0RlZmF1bHQoanNvbik7XG4gIH1cblxuICBmdW5jdGlvbiBmcm9tSlNXaXRoKGNvbnZlcnRlciwganNvbiwga2V5LCBwYXJlbnRKU09OKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoanNvbikpIHtcbiAgICAgIHJldHVybiBjb252ZXJ0ZXIuY2FsbChwYXJlbnRKU09OLCBrZXksIEluZGV4ZWRTZXEoanNvbikubWFwKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIGZyb21KU1dpdGgoY29udmVydGVyLCB2LCBrLCBqc29uKX0pKTtcbiAgICB9XG4gICAgaWYgKGlzUGxhaW5PYmooanNvbikpIHtcbiAgICAgIHJldHVybiBjb252ZXJ0ZXIuY2FsbChwYXJlbnRKU09OLCBrZXksIEtleWVkU2VxKGpzb24pLm1hcChmdW5jdGlvbih2LCBrKSAge3JldHVybiBmcm9tSlNXaXRoKGNvbnZlcnRlciwgdiwgaywganNvbil9KSk7XG4gICAgfVxuICAgIHJldHVybiBqc29uO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJvbUpTRGVmYXVsdChqc29uKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoanNvbikpIHtcbiAgICAgIHJldHVybiBJbmRleGVkU2VxKGpzb24pLm1hcChmcm9tSlNEZWZhdWx0KS50b0xpc3QoKTtcbiAgICB9XG4gICAgaWYgKGlzUGxhaW5PYmooanNvbikpIHtcbiAgICAgIHJldHVybiBLZXllZFNlcShqc29uKS5tYXAoZnJvbUpTRGVmYXVsdCkudG9NYXAoKTtcbiAgICB9XG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuICBmdW5jdGlvbiBpc1BsYWluT2JqKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG4gIH1cblxuICB2YXIgTWF0aF9faW11bCA9XG4gICAgdHlwZW9mIE1hdGguaW11bCA9PT0gJ2Z1bmN0aW9uJyAmJiBNYXRoLmltdWwoMHhmZmZmZmZmZiwgMikgPT09IC0yID9cbiAgICBNYXRoLmltdWwgOlxuICAgIGZ1bmN0aW9uIE1hdGhfX2ltdWwoYSwgYikge1xuICAgICAgYSA9IGEgfCAwOyAvLyBpbnRcbiAgICAgIGIgPSBiIHwgMDsgLy8gaW50XG4gICAgICB2YXIgYyA9IGEgJiAweGZmZmY7XG4gICAgICB2YXIgZCA9IGIgJiAweGZmZmY7XG4gICAgICAvLyBTaGlmdCBieSAwIGZpeGVzIHRoZSBzaWduIG9uIHRoZSBoaWdoIHBhcnQuXG4gICAgICByZXR1cm4gKGMgKiBkKSArICgoKChhID4+PiAxNikgKiBkICsgYyAqIChiID4+PiAxNikpIDw8IDE2KSA+Pj4gMCkgfCAwOyAvLyBpbnRcbiAgICB9O1xuXG4gIC8vIHY4IGhhcyBhbiBvcHRpbWl6YXRpb24gZm9yIHN0b3JpbmcgMzEtYml0IHNpZ25lZCBudW1iZXJzLlxuICAvLyBWYWx1ZXMgd2hpY2ggaGF2ZSBlaXRoZXIgMDAgb3IgMTEgYXMgdGhlIGhpZ2ggb3JkZXIgYml0cyBxdWFsaWZ5LlxuICAvLyBUaGlzIGZ1bmN0aW9uIGRyb3BzIHRoZSBoaWdoZXN0IG9yZGVyIGJpdCBpbiBhIHNpZ25lZCBudW1iZXIsIG1haW50YWluaW5nXG4gIC8vIHRoZSBzaWduIGJpdC5cbiAgZnVuY3Rpb24gc21pKGkzMikge1xuICAgIHJldHVybiAoKGkzMiA+Pj4gMSkgJiAweDQwMDAwMDAwKSB8IChpMzIgJiAweEJGRkZGRkZGKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc2gobykge1xuICAgIGlmIChvID09PSBmYWxzZSB8fCBvID09PSBudWxsIHx8IG8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygby52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvID0gby52YWx1ZU9mKCk7XG4gICAgICBpZiAobyA9PT0gZmFsc2UgfHwgbyA9PT0gbnVsbCB8fCBvID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgbztcbiAgICBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHZhciBoID0gbyB8IDA7XG4gICAgICBpZiAoaCAhPT0gbykge1xuICAgICAgICBoIF49IG8gKiAweEZGRkZGRkZGO1xuICAgICAgfVxuICAgICAgd2hpbGUgKG8gPiAweEZGRkZGRkZGKSB7XG4gICAgICAgIG8gLz0gMHhGRkZGRkZGRjtcbiAgICAgICAgaCBePSBvO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNtaShoKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gby5sZW5ndGggPiBTVFJJTkdfSEFTSF9DQUNIRV9NSU5fU1RSTEVOID8gY2FjaGVkSGFzaFN0cmluZyhvKSA6IGhhc2hTdHJpbmcobyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygby5oYXNoQ29kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG8uaGFzaENvZGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc2hKU09iaihvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhY2hlZEhhc2hTdHJpbmcoc3RyaW5nKSB7XG4gICAgdmFyIGhhc2ggPSBzdHJpbmdIYXNoQ2FjaGVbc3RyaW5nXTtcbiAgICBpZiAoaGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNoID0gaGFzaFN0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKFNUUklOR19IQVNIX0NBQ0hFX1NJWkUgPT09IFNUUklOR19IQVNIX0NBQ0hFX01BWF9TSVpFKSB7XG4gICAgICAgIFNUUklOR19IQVNIX0NBQ0hFX1NJWkUgPSAwO1xuICAgICAgICBzdHJpbmdIYXNoQ2FjaGUgPSB7fTtcbiAgICAgIH1cbiAgICAgIFNUUklOR19IQVNIX0NBQ0hFX1NJWkUrKztcbiAgICAgIHN0cmluZ0hhc2hDYWNoZVtzdHJpbmddID0gaGFzaDtcbiAgICB9XG4gICAgcmV0dXJuIGhhc2g7XG4gIH1cblxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9oYXNoaW5nLXN0cmluZ3NcbiAgZnVuY3Rpb24gaGFzaFN0cmluZyhzdHJpbmcpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBoYXNoIGZyb20gSlZNXG4gICAgLy8gVGhlIGhhc2ggY29kZSBmb3IgYSBzdHJpbmcgaXMgY29tcHV0ZWQgYXNcbiAgICAvLyBzWzBdICogMzEgXiAobiAtIDEpICsgc1sxXSAqIDMxIF4gKG4gLSAyKSArIC4uLiArIHNbbiAtIDFdLFxuICAgIC8vIHdoZXJlIHNbaV0gaXMgdGhlIGl0aCBjaGFyYWN0ZXIgb2YgdGhlIHN0cmluZyBhbmQgbiBpcyB0aGUgbGVuZ3RoIG9mXG4gICAgLy8gdGhlIHN0cmluZy4gV2UgXCJtb2RcIiB0aGUgcmVzdWx0IHRvIG1ha2UgaXQgYmV0d2VlbiAwIChpbmNsdXNpdmUpIGFuZCAyXjMxXG4gICAgLy8gKGV4Y2x1c2l2ZSkgYnkgZHJvcHBpbmcgaGlnaCBiaXRzLlxuICAgIHZhciBoYXNoID0gMDtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgc3RyaW5nLmxlbmd0aDsgaWkrKykge1xuICAgICAgaGFzaCA9IDMxICogaGFzaCArIHN0cmluZy5jaGFyQ29kZUF0KGlpKSB8IDA7XG4gICAgfVxuICAgIHJldHVybiBzbWkoaGFzaCk7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNoSlNPYmoob2JqKSB7XG4gICAgdmFyIGhhc2ggPSB3ZWFrTWFwICYmIHdlYWtNYXAuZ2V0KG9iaik7XG4gICAgaWYgKGhhc2gpIHJldHVybiBoYXNoO1xuXG4gICAgaGFzaCA9IG9ialtVSURfSEFTSF9LRVldO1xuICAgIGlmIChoYXNoKSByZXR1cm4gaGFzaDtcblxuICAgIGlmICghY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgIGhhc2ggPSBvYmoucHJvcGVydHlJc0VudW1lcmFibGUgJiYgb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlW1VJRF9IQVNIX0tFWV07XG4gICAgICBpZiAoaGFzaCkgcmV0dXJuIGhhc2g7XG5cbiAgICAgIGhhc2ggPSBnZXRJRU5vZGVIYXNoKG9iaik7XG4gICAgICBpZiAoaGFzaCkgcmV0dXJuIGhhc2g7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5pc0V4dGVuc2libGUgJiYgIU9iamVjdC5pc0V4dGVuc2libGUob2JqKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb24tZXh0ZW5zaWJsZSBvYmplY3RzIGFyZSBub3QgYWxsb3dlZCBhcyBrZXlzLicpO1xuICAgIH1cblxuICAgIGhhc2ggPSArK29iakhhc2hVSUQ7XG4gICAgaWYgKG9iakhhc2hVSUQgJiAweDQwMDAwMDAwKSB7XG4gICAgICBvYmpIYXNoVUlEID0gMDtcbiAgICB9XG5cbiAgICBpZiAod2Vha01hcCkge1xuICAgICAgd2Vha01hcC5zZXQob2JqLCBoYXNoKTtcbiAgICB9IGVsc2UgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBVSURfSEFTSF9LRVksIHtcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IGZhbHNlLFxuICAgICAgICAnd3JpdGFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogaGFzaFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChvYmoucHJvcGVydHlJc0VudW1lcmFibGUgJiZcbiAgICAgICAgICAgICAgIG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZSA9PT0gb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSkge1xuICAgICAgLy8gU2luY2Ugd2UgY2FuJ3QgZGVmaW5lIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgb24gdGhlIG9iamVjdFxuICAgICAgLy8gd2UnbGwgaGlqYWNrIG9uZSBvZiB0aGUgbGVzcy11c2VkIG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgdG9cbiAgICAgIC8vIHNhdmUgb3VyIGhhc2ggb24gaXQuIFNpbmNlIHRoaXMgaXMgYSBmdW5jdGlvbiBpdCB3aWxsIG5vdCBzaG93IHVwIGluXG4gICAgICAvLyBgSlNPTi5zdHJpbmdpZnlgIHdoaWNoIGlzIHdoYXQgd2Ugd2FudC5cbiAgICAgIG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBvYmoucHJvcGVydHlJc0VudW1lcmFibGVbVUlEX0hBU0hfS0VZXSA9IGhhc2g7XG4gICAgfSBlbHNlIGlmIChvYmoubm9kZVR5cGUpIHtcbiAgICAgIC8vIEF0IHRoaXMgcG9pbnQgd2UgY291bGRuJ3QgZ2V0IHRoZSBJRSBgdW5pcXVlSURgIHRvIHVzZSBhcyBhIGhhc2hcbiAgICAgIC8vIGFuZCB3ZSBjb3VsZG4ndCB1c2UgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSB0byBleHBsb2l0IHRoZVxuICAgICAgLy8gZG9udEVudW0gYnVnIHNvIHdlIHNpbXBseSBhZGQgdGhlIGBVSURfSEFTSF9LRVlgIG9uIHRoZSBub2RlXG4gICAgICAvLyBpdHNlbGYuXG4gICAgICBvYmpbVUlEX0hBU0hfS0VZXSA9IGhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHNldCBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IG9uIG9iamVjdC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFzaDtcbiAgfVxuXG4gIC8vIFRydWUgaWYgT2JqZWN0LmRlZmluZVByb3BlcnR5IHdvcmtzIGFzIGV4cGVjdGVkLiBJRTggZmFpbHMgdGhpcyB0ZXN0LlxuICB2YXIgY2FuRGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3gnLCB7fSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KCkpO1xuXG4gIC8vIElFIGhhcyBhIGB1bmlxdWVJRGAgcHJvcGVydHkgb24gRE9NIG5vZGVzLiBXZSBjYW4gY29uc3RydWN0IHRoZSBoYXNoIGZyb20gaXRcbiAgLy8gYW5kIGF2b2lkIG1lbW9yeSBsZWFrcyBmcm9tIHRoZSBJRSBjbG9uZU5vZGUgYnVnLlxuICBmdW5jdGlvbiBnZXRJRU5vZGVIYXNoKG5vZGUpIHtcbiAgICBpZiAobm9kZSAmJiBub2RlLm5vZGVUeXBlID4gMCkge1xuICAgICAgc3dpdGNoIChub2RlLm5vZGVUeXBlKSB7XG4gICAgICAgIGNhc2UgMTogLy8gRWxlbWVudFxuICAgICAgICAgIHJldHVybiBub2RlLnVuaXF1ZUlEO1xuICAgICAgICBjYXNlIDk6IC8vIERvY3VtZW50XG4gICAgICAgICAgcmV0dXJuIG5vZGUuZG9jdW1lbnRFbGVtZW50ICYmIG5vZGUuZG9jdW1lbnRFbGVtZW50LnVuaXF1ZUlEO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIElmIHBvc3NpYmxlLCB1c2UgYSBXZWFrTWFwLlxuICB2YXIgd2Vha01hcCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIG5ldyBXZWFrTWFwKCk7XG5cbiAgdmFyIG9iakhhc2hVSUQgPSAwO1xuXG4gIHZhciBVSURfSEFTSF9LRVkgPSAnX19pbW11dGFibGVoYXNoX18nO1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFVJRF9IQVNIX0tFWSA9IFN5bWJvbChVSURfSEFTSF9LRVkpO1xuICB9XG5cbiAgdmFyIFNUUklOR19IQVNIX0NBQ0hFX01JTl9TVFJMRU4gPSAxNjtcbiAgdmFyIFNUUklOR19IQVNIX0NBQ0hFX01BWF9TSVpFID0gMjU1O1xuICB2YXIgU1RSSU5HX0hBU0hfQ0FDSEVfU0laRSA9IDA7XG4gIHZhciBzdHJpbmdIYXNoQ2FjaGUgPSB7fTtcblxuICBmdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBlcnJvcikge1xuICAgIGlmICghY29uZGl0aW9uKSB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0Tm90SW5maW5pdGUoc2l6ZSkge1xuICAgIGludmFyaWFudChcbiAgICAgIHNpemUgIT09IEluZmluaXR5LFxuICAgICAgJ0Nhbm5vdCBwZXJmb3JtIHRoaXMgYWN0aW9uIHdpdGggYW4gaW5maW5pdGUgc2l6ZS4nXG4gICAgKTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFRvS2V5ZWRTZXF1ZW5jZSwgS2V5ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIFRvS2V5ZWRTZXF1ZW5jZShpbmRleGVkLCB1c2VLZXlzKSB7XG4gICAgICB0aGlzLl9pdGVyID0gaW5kZXhlZDtcbiAgICAgIHRoaXMuX3VzZUtleXMgPSB1c2VLZXlzO1xuICAgICAgdGhpcy5zaXplID0gaW5kZXhlZC5zaXplO1xuICAgIH1cblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oa2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuZ2V0KGtleSwgbm90U2V0VmFsdWUpO1xuICAgIH07XG5cbiAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuaGFzKGtleSk7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUudmFsdWVTZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLnZhbHVlU2VxKCk7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uKCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIHJldmVyc2VkU2VxdWVuY2UgPSByZXZlcnNlRmFjdG9yeSh0aGlzLCB0cnVlKTtcbiAgICAgIGlmICghdGhpcy5fdXNlS2V5cykge1xuICAgICAgICByZXZlcnNlZFNlcXVlbmNlLnZhbHVlU2VxID0gZnVuY3Rpb24oKSAge3JldHVybiB0aGlzJDAuX2l0ZXIudG9TZXEoKS5yZXZlcnNlKCl9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldmVyc2VkU2VxdWVuY2U7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24obWFwcGVyLCBjb250ZXh0KSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgbWFwcGVkU2VxdWVuY2UgPSBtYXBGYWN0b3J5KHRoaXMsIG1hcHBlciwgY29udGV4dCk7XG4gICAgICBpZiAoIXRoaXMuX3VzZUtleXMpIHtcbiAgICAgICAgbWFwcGVkU2VxdWVuY2UudmFsdWVTZXEgPSBmdW5jdGlvbigpICB7cmV0dXJuIHRoaXMkMC5faXRlci50b1NlcSgpLm1hcChtYXBwZXIsIGNvbnRleHQpfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXBwZWRTZXF1ZW5jZTtcbiAgICB9O1xuXG4gICAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIGlpO1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRlKFxuICAgICAgICB0aGlzLl91c2VLZXlzID9cbiAgICAgICAgICBmdW5jdGlvbih2LCBrKSAge3JldHVybiBmbih2LCBrLCB0aGlzJDApfSA6XG4gICAgICAgICAgKChpaSA9IHJldmVyc2UgPyByZXNvbHZlU2l6ZSh0aGlzKSA6IDApLFxuICAgICAgICAgICAgZnVuY3Rpb24odiApIHtyZXR1cm4gZm4odiwgcmV2ZXJzZSA/IC0taWkgOiBpaSsrLCB0aGlzJDApfSksXG4gICAgICAgIHJldmVyc2VcbiAgICAgICk7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIGlmICh0aGlzLl91c2VLZXlzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIGlpID0gcmV2ZXJzZSA/IHJlc29sdmVTaXplKHRoaXMpIDogMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgcmV2ZXJzZSA/IC0taWkgOiBpaSsrLCBzdGVwLnZhbHVlLCBzdGVwKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZVtJU19PUkRFUkVEX1NFTlRJTkVMXSA9IHRydWU7XG5cblxuICBjcmVhdGVDbGFzcyhUb0luZGV4ZWRTZXF1ZW5jZSwgSW5kZXhlZFNlcSk7XG4gICAgZnVuY3Rpb24gVG9JbmRleGVkU2VxdWVuY2UoaXRlcikge1xuICAgICAgdGhpcy5faXRlciA9IGl0ZXI7XG4gICAgICB0aGlzLnNpemUgPSBpdGVyLnNpemU7XG4gICAgfVxuXG4gICAgVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLmNvbnRhaW5zKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5faXRlci5fX2l0ZXJhdGUoZnVuY3Rpb24odiApIHtyZXR1cm4gZm4odiwgaXRlcmF0aW9ucysrLCB0aGlzJDApfSwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIFRvSW5kZXhlZFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5faXRlci5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzdGVwLnZhbHVlLCBzdGVwKVxuICAgICAgfSk7XG4gICAgfTtcblxuXG5cbiAgY3JlYXRlQ2xhc3MoVG9TZXRTZXF1ZW5jZSwgU2V0U2VxKTtcbiAgICBmdW5jdGlvbiBUb1NldFNlcXVlbmNlKGl0ZXIpIHtcbiAgICAgIHRoaXMuX2l0ZXIgPSBpdGVyO1xuICAgICAgdGhpcy5zaXplID0gaXRlci5zaXplO1xuICAgIH1cblxuICAgIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuY29udGFpbnMoa2V5KTtcbiAgICB9O1xuXG4gICAgVG9TZXRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0ZShmdW5jdGlvbih2ICkge3JldHVybiBmbih2LCB2LCB0aGlzJDApfSwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICByZXR1cm4gc3RlcC5kb25lID8gc3RlcCA6XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBzdGVwLnZhbHVlLCBzdGVwLnZhbHVlLCBzdGVwKTtcbiAgICAgIH0pO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKEZyb21FbnRyaWVzU2VxdWVuY2UsIEtleWVkU2VxKTtcbiAgICBmdW5jdGlvbiBGcm9tRW50cmllc1NlcXVlbmNlKGVudHJpZXMpIHtcbiAgICAgIHRoaXMuX2l0ZXIgPSBlbnRyaWVzO1xuICAgICAgdGhpcy5zaXplID0gZW50cmllcy5zaXplO1xuICAgIH1cblxuICAgIEZyb21FbnRyaWVzU2VxdWVuY2UucHJvdG90eXBlLmVudHJ5U2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5faXRlci50b1NlcSgpO1xuICAgIH07XG5cbiAgICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRlKGZ1bmN0aW9uKGVudHJ5ICkge1xuICAgICAgICAvLyBDaGVjayBpZiBlbnRyeSBleGlzdHMgZmlyc3Qgc28gYXJyYXkgYWNjZXNzIGRvZXNuJ3QgdGhyb3cgZm9yIGhvbGVzXG4gICAgICAgIC8vIGluIHRoZSBwYXJlbnQgaXRlcmF0aW9uLlxuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YWxpZGF0ZUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gZm4oZW50cnlbMV0sIGVudHJ5WzBdLCB0aGlzJDApO1xuICAgICAgICB9XG4gICAgICB9LCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgRnJvbUVudHJpZXNTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXIuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUywgcmV2ZXJzZSk7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAvLyBDaGVjayBpZiBlbnRyeSBleGlzdHMgZmlyc3Qgc28gYXJyYXkgYWNjZXNzIGRvZXNuJ3QgdGhyb3cgZm9yIGhvbGVzXG4gICAgICAgICAgLy8gaW4gdGhlIHBhcmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICAgIHJldHVybiB0eXBlID09PSBJVEVSQVRFX0VOVFJJRVMgPyBzdGVwIDpcbiAgICAgICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBlbnRyeVswXSwgZW50cnlbMV0sIHN0ZXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuXG4gIFRvSW5kZXhlZFNlcXVlbmNlLnByb3RvdHlwZS5jYWNoZVJlc3VsdCA9XG4gIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPVxuICBUb1NldFNlcXVlbmNlLnByb3RvdHlwZS5jYWNoZVJlc3VsdCA9XG4gIEZyb21FbnRyaWVzU2VxdWVuY2UucHJvdG90eXBlLmNhY2hlUmVzdWx0ID1cbiAgICBjYWNoZVJlc3VsdFRocm91Z2g7XG5cblxuICBmdW5jdGlvbiBmbGlwRmFjdG9yeShpdGVyYWJsZSkge1xuICAgIHZhciBmbGlwU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIGZsaXBTZXF1ZW5jZS5faXRlciA9IGl0ZXJhYmxlO1xuICAgIGZsaXBTZXF1ZW5jZS5zaXplID0gaXRlcmFibGUuc2l6ZTtcbiAgICBmbGlwU2VxdWVuY2UuZmxpcCA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGV9O1xuICAgIGZsaXBTZXF1ZW5jZS5yZXZlcnNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJldmVyc2VkU2VxdWVuY2UgPSBpdGVyYWJsZS5yZXZlcnNlLmFwcGx5KHRoaXMpOyAvLyBzdXBlci5yZXZlcnNlKClcbiAgICAgIHJldmVyc2VkU2VxdWVuY2UuZmxpcCA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGUucmV2ZXJzZSgpfTtcbiAgICAgIHJldHVybiByZXZlcnNlZFNlcXVlbmNlO1xuICAgIH07XG4gICAgZmxpcFNlcXVlbmNlLmhhcyA9IGZ1bmN0aW9uKGtleSApIHtyZXR1cm4gaXRlcmFibGUuY29udGFpbnMoa2V5KX07XG4gICAgZmxpcFNlcXVlbmNlLmNvbnRhaW5zID0gZnVuY3Rpb24oa2V5ICkge3JldHVybiBpdGVyYWJsZS5oYXMoa2V5KX07XG4gICAgZmxpcFNlcXVlbmNlLmNhY2hlUmVzdWx0ID0gY2FjaGVSZXN1bHRUaHJvdWdoO1xuICAgIGZsaXBTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge3JldHVybiBmbihrLCB2LCB0aGlzJDApICE9PSBmYWxzZX0sIHJldmVyc2UpO1xuICAgIH1cbiAgICBmbGlwU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHR5cGUgPT09IElURVJBVEVfRU5UUklFUykge1xuICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoIXN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgdmFyIGsgPSBzdGVwLnZhbHVlWzBdO1xuICAgICAgICAgICAgc3RlcC52YWx1ZVswXSA9IHN0ZXAudmFsdWVbMV07XG4gICAgICAgICAgICBzdGVwLnZhbHVlWzFdID0gaztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0b3IoXG4gICAgICAgIHR5cGUgPT09IElURVJBVEVfVkFMVUVTID8gSVRFUkFURV9LRVlTIDogSVRFUkFURV9WQUxVRVMsXG4gICAgICAgIHJldmVyc2VcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBmbGlwU2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIG1hcEZhY3RvcnkoaXRlcmFibGUsIG1hcHBlciwgY29udGV4dCkge1xuICAgIHZhciBtYXBwZWRTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG4gICAgbWFwcGVkU2VxdWVuY2Uuc2l6ZSA9IGl0ZXJhYmxlLnNpemU7XG4gICAgbWFwcGVkU2VxdWVuY2UuaGFzID0gZnVuY3Rpb24oa2V5ICkge3JldHVybiBpdGVyYWJsZS5oYXMoa2V5KX07XG4gICAgbWFwcGVkU2VxdWVuY2UuZ2V0ID0gZnVuY3Rpb24oa2V5LCBub3RTZXRWYWx1ZSkgIHtcbiAgICAgIHZhciB2ID0gaXRlcmFibGUuZ2V0KGtleSwgTk9UX1NFVCk7XG4gICAgICByZXR1cm4gdiA9PT0gTk9UX1NFVCA/XG4gICAgICAgIG5vdFNldFZhbHVlIDpcbiAgICAgICAgbWFwcGVyLmNhbGwoY29udGV4dCwgdiwga2V5LCBpdGVyYWJsZSk7XG4gICAgfTtcbiAgICBtYXBwZWRTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0ZShcbiAgICAgICAgZnVuY3Rpb24odiwgaywgYykgIHtyZXR1cm4gZm4obWFwcGVyLmNhbGwoY29udGV4dCwgdiwgaywgYyksIGssIHRoaXMkMCkgIT09IGZhbHNlfSxcbiAgICAgICAgcmV2ZXJzZVxuICAgICAgKTtcbiAgICB9XG4gICAgbWFwcGVkU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24gKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCByZXZlcnNlKTtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgIHZhciBrZXkgPSBlbnRyeVswXTtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUoXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgbWFwcGVyLmNhbGwoY29udGV4dCwgZW50cnlbMV0sIGtleSwgaXRlcmFibGUpLFxuICAgICAgICAgIHN0ZXBcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWFwcGVkU2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIHJldmVyc2VGYWN0b3J5KGl0ZXJhYmxlLCB1c2VLZXlzKSB7XG4gICAgdmFyIHJldmVyc2VkU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIHJldmVyc2VkU2VxdWVuY2UuX2l0ZXIgPSBpdGVyYWJsZTtcbiAgICByZXZlcnNlZFNlcXVlbmNlLnNpemUgPSBpdGVyYWJsZS5zaXplO1xuICAgIHJldmVyc2VkU2VxdWVuY2UucmV2ZXJzZSA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGV9O1xuICAgIGlmIChpdGVyYWJsZS5mbGlwKSB7XG4gICAgICByZXZlcnNlZFNlcXVlbmNlLmZsaXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmbGlwU2VxdWVuY2UgPSBmbGlwRmFjdG9yeShpdGVyYWJsZSk7XG4gICAgICAgIGZsaXBTZXF1ZW5jZS5yZXZlcnNlID0gZnVuY3Rpb24oKSAge3JldHVybiBpdGVyYWJsZS5mbGlwKCl9O1xuICAgICAgICByZXR1cm4gZmxpcFNlcXVlbmNlO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5nZXQgPSBmdW5jdGlvbihrZXksIG5vdFNldFZhbHVlKSBcbiAgICAgIHtyZXR1cm4gaXRlcmFibGUuZ2V0KHVzZUtleXMgPyBrZXkgOiAtMSAtIGtleSwgbm90U2V0VmFsdWUpfTtcbiAgICByZXZlcnNlZFNlcXVlbmNlLmhhcyA9IGZ1bmN0aW9uKGtleSApXG4gICAgICB7cmV0dXJuIGl0ZXJhYmxlLmhhcyh1c2VLZXlzID8ga2V5IDogLTEgLSBrZXkpfTtcbiAgICByZXZlcnNlZFNlcXVlbmNlLmNvbnRhaW5zID0gZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIGl0ZXJhYmxlLmNvbnRhaW5zKHZhbHVlKX07XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5jYWNoZVJlc3VsdCA9IGNhY2hlUmVzdWx0VGhyb3VnaDtcbiAgICByZXZlcnNlZFNlcXVlbmNlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge3JldHVybiBmbih2LCBrLCB0aGlzJDApfSwgIXJldmVyc2UpO1xuICAgIH07XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5fX2l0ZXJhdG9yID1cbiAgICAgIGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpICB7cmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0b3IodHlwZSwgIXJldmVyc2UpfTtcbiAgICByZXR1cm4gcmV2ZXJzZWRTZXF1ZW5jZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gZmlsdGVyRmFjdG9yeShpdGVyYWJsZSwgcHJlZGljYXRlLCBjb250ZXh0LCB1c2VLZXlzKSB7XG4gICAgdmFyIGZpbHRlclNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcbiAgICBpZiAodXNlS2V5cykge1xuICAgICAgZmlsdGVyU2VxdWVuY2UuaGFzID0gZnVuY3Rpb24oa2V5ICkge1xuICAgICAgICB2YXIgdiA9IGl0ZXJhYmxlLmdldChrZXksIE5PVF9TRVQpO1xuICAgICAgICByZXR1cm4gdiAhPT0gTk9UX1NFVCAmJiAhIXByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGtleSwgaXRlcmFibGUpO1xuICAgICAgfTtcbiAgICAgIGZpbHRlclNlcXVlbmNlLmdldCA9IGZ1bmN0aW9uKGtleSwgbm90U2V0VmFsdWUpICB7XG4gICAgICAgIHZhciB2ID0gaXRlcmFibGUuZ2V0KGtleSwgTk9UX1NFVCk7XG4gICAgICAgIHJldHVybiB2ICE9PSBOT1RfU0VUICYmIHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGtleSwgaXRlcmFibGUpID9cbiAgICAgICAgICB2IDogbm90U2V0VmFsdWU7XG4gICAgICB9O1xuICAgIH1cbiAgICBmaWx0ZXJTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuICAgICAgICAgIGl0ZXJhdGlvbnMrKztcbiAgICAgICAgICByZXR1cm4gZm4odiwgdXNlS2V5cyA/IGsgOiBpdGVyYXRpb25zIC0gMSwgdGhpcyQwKTtcbiAgICAgICAgfVxuICAgICAgfSwgcmV2ZXJzZSk7XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuICAgIGZpbHRlclNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uICh0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICB2YXIga2V5ID0gZW50cnlbMF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gZW50cnlbMV07XG4gICAgICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHZhbHVlLCBrZXksIGl0ZXJhYmxlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgdXNlS2V5cyA/IGtleSA6IGl0ZXJhdGlvbnMrKywgdmFsdWUsIHN0ZXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJTZXF1ZW5jZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gY291bnRCeUZhY3RvcnkoaXRlcmFibGUsIGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgICB2YXIgZ3JvdXBzID0gTWFwKCkuYXNNdXRhYmxlKCk7XG4gICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7XG4gICAgICBncm91cHMudXBkYXRlKFxuICAgICAgICBncm91cGVyLmNhbGwoY29udGV4dCwgdiwgaywgaXRlcmFibGUpLFxuICAgICAgICAwLFxuICAgICAgICBmdW5jdGlvbihhICkge3JldHVybiBhICsgMX1cbiAgICAgICk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGdyb3Vwcy5hc0ltbXV0YWJsZSgpO1xuICB9XG5cblxuICBmdW5jdGlvbiBncm91cEJ5RmFjdG9yeShpdGVyYWJsZSwgZ3JvdXBlciwgY29udGV4dCkge1xuICAgIHZhciBpc0tleWVkSXRlciA9IGlzS2V5ZWQoaXRlcmFibGUpO1xuICAgIHZhciBncm91cHMgPSAoaXNPcmRlcmVkKGl0ZXJhYmxlKSA/IE9yZGVyZWRNYXAoKSA6IE1hcCgpKS5hc011dGFibGUoKTtcbiAgICBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtcbiAgICAgIGdyb3Vwcy51cGRhdGUoXG4gICAgICAgIGdyb3VwZXIuY2FsbChjb250ZXh0LCB2LCBrLCBpdGVyYWJsZSksXG4gICAgICAgIGZ1bmN0aW9uKGEgKSB7cmV0dXJuIChhID0gYSB8fCBbXSwgYS5wdXNoKGlzS2V5ZWRJdGVyID8gW2ssIHZdIDogdiksIGEpfVxuICAgICAgKTtcbiAgICB9KTtcbiAgICB2YXIgY29lcmNlID0gaXRlcmFibGVDbGFzcyhpdGVyYWJsZSk7XG4gICAgcmV0dXJuIGdyb3Vwcy5tYXAoZnVuY3Rpb24oYXJyICkge3JldHVybiByZWlmeShpdGVyYWJsZSwgY29lcmNlKGFycikpfSk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIHNsaWNlRmFjdG9yeShpdGVyYWJsZSwgYmVnaW4sIGVuZCwgdXNlS2V5cykge1xuICAgIHZhciBvcmlnaW5hbFNpemUgPSBpdGVyYWJsZS5zaXplO1xuXG4gICAgaWYgKHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgb3JpZ2luYWxTaXplKSkge1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgIH1cblxuICAgIHZhciByZXNvbHZlZEJlZ2luID0gcmVzb2x2ZUJlZ2luKGJlZ2luLCBvcmlnaW5hbFNpemUpO1xuICAgIHZhciByZXNvbHZlZEVuZCA9IHJlc29sdmVFbmQoZW5kLCBvcmlnaW5hbFNpemUpO1xuXG4gICAgLy8gYmVnaW4gb3IgZW5kIHdpbGwgYmUgTmFOIGlmIHRoZXkgd2VyZSBwcm92aWRlZCBhcyBuZWdhdGl2ZSBudW1iZXJzIGFuZFxuICAgIC8vIHRoaXMgaXRlcmFibGUncyBzaXplIGlzIHVua25vd24uIEluIHRoYXQgY2FzZSwgY2FjaGUgZmlyc3Qgc28gdGhlcmUgaXNcbiAgICAvLyBhIGtub3duIHNpemUuXG4gICAgaWYgKHJlc29sdmVkQmVnaW4gIT09IHJlc29sdmVkQmVnaW4gfHwgcmVzb2x2ZWRFbmQgIT09IHJlc29sdmVkRW5kKSB7XG4gICAgICByZXR1cm4gc2xpY2VGYWN0b3J5KGl0ZXJhYmxlLnRvU2VxKCkuY2FjaGVSZXN1bHQoKSwgYmVnaW4sIGVuZCwgdXNlS2V5cyk7XG4gICAgfVxuXG4gICAgdmFyIHNsaWNlU2l6ZSA9IHJlc29sdmVkRW5kIC0gcmVzb2x2ZWRCZWdpbjtcbiAgICBpZiAoc2xpY2VTaXplIDwgMCkge1xuICAgICAgc2xpY2VTaXplID0gMDtcbiAgICB9XG5cbiAgICB2YXIgc2xpY2VTZXEgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuXG4gICAgc2xpY2VTZXEuc2l6ZSA9IHNsaWNlU2l6ZSA9PT0gMCA/IHNsaWNlU2l6ZSA6IGl0ZXJhYmxlLnNpemUgJiYgc2xpY2VTaXplIHx8IHVuZGVmaW5lZDtcblxuICAgIGlmICghdXNlS2V5cyAmJiBpc1NlcShpdGVyYWJsZSkgJiYgc2xpY2VTaXplID49IDApIHtcbiAgICAgIHNsaWNlU2VxLmdldCA9IGZ1bmN0aW9uIChpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgICByZXR1cm4gaW5kZXggPj0gMCAmJiBpbmRleCA8IHNsaWNlU2l6ZSA/XG4gICAgICAgICAgaXRlcmFibGUuZ2V0KGluZGV4ICsgcmVzb2x2ZWRCZWdpbiwgbm90U2V0VmFsdWUpIDpcbiAgICAgICAgICBub3RTZXRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzbGljZVNlcS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICBpZiAoc2xpY2VTaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIHNraXBwZWQgPSAwO1xuICAgICAgdmFyIGlzU2tpcHBpbmcgPSB0cnVlO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7XG4gICAgICAgIGlmICghKGlzU2tpcHBpbmcgJiYgKGlzU2tpcHBpbmcgPSBza2lwcGVkKysgPCByZXNvbHZlZEJlZ2luKSkpIHtcbiAgICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgICAgcmV0dXJuIGZuKHYsIHVzZUtleXMgPyBrIDogaXRlcmF0aW9ucyAtIDEsIHRoaXMkMCkgIT09IGZhbHNlICYmXG4gICAgICAgICAgICAgICAgIGl0ZXJhdGlvbnMgIT09IHNsaWNlU2l6ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuXG4gICAgc2xpY2VTZXEuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHNsaWNlU2l6ZSAmJiByZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIC8vIERvbid0IGJvdGhlciBpbnN0YW50aWF0aW5nIHBhcmVudCBpdGVyYXRvciBpZiB0YWtpbmcgMC5cbiAgICAgIHZhciBpdGVyYXRvciA9IHNsaWNlU2l6ZSAmJiBpdGVyYWJsZS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgdmFyIHNraXBwZWQgPSAwO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHdoaWxlIChza2lwcGVkKysgIT09IHJlc29sdmVkQmVnaW4pIHtcbiAgICAgICAgICBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCsraXRlcmF0aW9ucyA+IHNsaWNlU2l6ZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKHVzZUtleXMgfHwgdHlwZSA9PT0gSVRFUkFURV9WQUxVRVMpIHtcbiAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBJVEVSQVRFX0tFWVMpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zIC0gMSwgdW5kZWZpbmVkLCBzdGVwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zIC0gMSwgc3RlcC52YWx1ZVsxXSwgc3RlcCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzbGljZVNlcTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gdGFrZVdoaWxlRmFjdG9yeShpdGVyYWJsZSwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIHRha2VTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG4gICAgdGFrZVNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrLCBjKSBcbiAgICAgICAge3JldHVybiBwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSAmJiArK2l0ZXJhdGlvbnMgJiYgZm4odiwgaywgdGhpcyQwKX1cbiAgICAgICk7XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuICAgIHRha2VTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG4gICAgICB2YXIgaXRlcmF0aW5nID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICBpZiAoIWl0ZXJhdGluZykge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgIHZhciBrID0gZW50cnlbMF07XG4gICAgICAgIHZhciB2ID0gZW50cnlbMV07XG4gICAgICAgIGlmICghcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgdGhpcyQwKSkge1xuICAgICAgICAgIGl0ZXJhdGluZyA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTID8gc3RlcCA6XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBrLCB2LCBzdGVwKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIHRha2VTZXF1ZW5jZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gc2tpcFdoaWxlRmFjdG9yeShpdGVyYWJsZSwgcHJlZGljYXRlLCBjb250ZXh0LCB1c2VLZXlzKSB7XG4gICAgdmFyIHNraXBTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG4gICAgc2tpcFNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXNTa2lwcGluZyA9IHRydWU7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaywgYykgIHtcbiAgICAgICAgaWYgKCEoaXNTa2lwcGluZyAmJiAoaXNTa2lwcGluZyA9IHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIGMpKSkpIHtcbiAgICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgICAgcmV0dXJuIGZuKHYsIHVzZUtleXMgPyBrIDogaXRlcmF0aW9ucyAtIDEsIHRoaXMkMCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcbiAgICBza2lwU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIHNraXBwaW5nID0gdHJ1ZTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCwgaywgdjtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgaWYgKHVzZUtleXMgfHwgdHlwZSA9PT0gSVRFUkFURV9WQUxVRVMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElURVJBVEVfS0VZUykge1xuICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHVuZGVmaW5lZCwgc3RlcCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHN0ZXAudmFsdWVbMV0sIHN0ZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgIGsgPSBlbnRyeVswXTtcbiAgICAgICAgICB2ID0gZW50cnlbMV07XG4gICAgICAgICAgc2tpcHBpbmcgJiYgKHNraXBwaW5nID0gcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgdGhpcyQwKSk7XG4gICAgICAgIH0gd2hpbGUgKHNraXBwaW5nKTtcbiAgICAgICAgcmV0dXJuIHR5cGUgPT09IElURVJBVEVfRU5UUklFUyA/IHN0ZXAgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaywgdiwgc3RlcCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBza2lwU2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGNvbmNhdEZhY3RvcnkoaXRlcmFibGUsIHZhbHVlcykge1xuICAgIHZhciBpc0tleWVkSXRlcmFibGUgPSBpc0tleWVkKGl0ZXJhYmxlKTtcbiAgICB2YXIgaXRlcnMgPSBbaXRlcmFibGVdLmNvbmNhdCh2YWx1ZXMpLm1hcChmdW5jdGlvbih2ICkge1xuICAgICAgaWYgKCFpc0l0ZXJhYmxlKHYpKSB7XG4gICAgICAgIHYgPSBpc0tleWVkSXRlcmFibGUgP1xuICAgICAgICAgIGtleWVkU2VxRnJvbVZhbHVlKHYpIDpcbiAgICAgICAgICBpbmRleGVkU2VxRnJvbVZhbHVlKEFycmF5LmlzQXJyYXkodikgPyB2IDogW3ZdKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNLZXllZEl0ZXJhYmxlKSB7XG4gICAgICAgIHYgPSBLZXllZEl0ZXJhYmxlKHYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHY7XG4gICAgfSkuZmlsdGVyKGZ1bmN0aW9uKHYgKSB7cmV0dXJuIHYuc2l6ZSAhPT0gMH0pO1xuXG4gICAgaWYgKGl0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgIH1cblxuICAgIGlmIChpdGVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBzaW5nbGV0b24gPSBpdGVyc1swXTtcbiAgICAgIGlmIChzaW5nbGV0b24gPT09IGl0ZXJhYmxlIHx8XG4gICAgICAgICAgaXNLZXllZEl0ZXJhYmxlICYmIGlzS2V5ZWQoc2luZ2xldG9uKSB8fFxuICAgICAgICAgIGlzSW5kZXhlZChpdGVyYWJsZSkgJiYgaXNJbmRleGVkKHNpbmdsZXRvbikpIHtcbiAgICAgICAgcmV0dXJuIHNpbmdsZXRvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY29uY2F0U2VxID0gbmV3IEFycmF5U2VxKGl0ZXJzKTtcbiAgICBpZiAoaXNLZXllZEl0ZXJhYmxlKSB7XG4gICAgICBjb25jYXRTZXEgPSBjb25jYXRTZXEudG9LZXllZFNlcSgpO1xuICAgIH0gZWxzZSBpZiAoIWlzSW5kZXhlZChpdGVyYWJsZSkpIHtcbiAgICAgIGNvbmNhdFNlcSA9IGNvbmNhdFNlcS50b1NldFNlcSgpO1xuICAgIH1cbiAgICBjb25jYXRTZXEgPSBjb25jYXRTZXEuZmxhdHRlbih0cnVlKTtcbiAgICBjb25jYXRTZXEuc2l6ZSA9IGl0ZXJzLnJlZHVjZShcbiAgICAgIGZ1bmN0aW9uKHN1bSwgc2VxKSAge1xuICAgICAgICBpZiAoc3VtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgc2l6ZSA9IHNlcS5zaXplO1xuICAgICAgICAgIGlmIChzaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdW0gKyBzaXplO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIDBcbiAgICApO1xuICAgIHJldHVybiBjb25jYXRTZXE7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGZsYXR0ZW5GYWN0b3J5KGl0ZXJhYmxlLCBkZXB0aCwgdXNlS2V5cykge1xuICAgIHZhciBmbGF0U2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIGZsYXRTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICB2YXIgc3RvcHBlZCA9IGZhbHNlO1xuICAgICAgZnVuY3Rpb24gZmxhdERlZXAoaXRlciwgY3VycmVudERlcHRoKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICAgIGl0ZXIuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7XG4gICAgICAgICAgaWYgKCghZGVwdGggfHwgY3VycmVudERlcHRoIDwgZGVwdGgpICYmIGlzSXRlcmFibGUodikpIHtcbiAgICAgICAgICAgIGZsYXREZWVwKHYsIGN1cnJlbnREZXB0aCArIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZm4odiwgdXNlS2V5cyA/IGsgOiBpdGVyYXRpb25zKyssIHRoaXMkMCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICFzdG9wcGVkO1xuICAgICAgICB9LCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIGZsYXREZWVwKGl0ZXJhYmxlLCAwKTtcbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH1cbiAgICBmbGF0U2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgIHZhciBzdGFjayA9IFtdO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHdoaWxlIChpdGVyYXRvcikge1xuICAgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgIGlmIChzdGVwLmRvbmUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpdGVyYXRvciA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB2ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTKSB7XG4gICAgICAgICAgICB2ID0gdlsxXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCghZGVwdGggfHwgc3RhY2subGVuZ3RoIDwgZGVwdGgpICYmIGlzSXRlcmFibGUodikpIHtcbiAgICAgICAgICAgIHN0YWNrLnB1c2goaXRlcmF0b3IpO1xuICAgICAgICAgICAgaXRlcmF0b3IgPSB2Ll9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1c2VLZXlzID8gc3RlcCA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCB2LCBzdGVwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmbGF0U2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGZsYXRNYXBGYWN0b3J5KGl0ZXJhYmxlLCBtYXBwZXIsIGNvbnRleHQpIHtcbiAgICB2YXIgY29lcmNlID0gaXRlcmFibGVDbGFzcyhpdGVyYWJsZSk7XG4gICAgcmV0dXJuIGl0ZXJhYmxlLnRvU2VxKCkubWFwKFxuICAgICAgZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gY29lcmNlKG1hcHBlci5jYWxsKGNvbnRleHQsIHYsIGssIGl0ZXJhYmxlKSl9XG4gICAgKS5mbGF0dGVuKHRydWUpO1xuICB9XG5cblxuICBmdW5jdGlvbiBpbnRlcnBvc2VGYWN0b3J5KGl0ZXJhYmxlLCBzZXBhcmF0b3IpIHtcbiAgICB2YXIgaW50ZXJwb3NlZFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcbiAgICBpbnRlcnBvc2VkU2VxdWVuY2Uuc2l6ZSA9IGl0ZXJhYmxlLnNpemUgJiYgaXRlcmFibGUuc2l6ZSAqIDIgLTE7XG4gICAgaW50ZXJwb3NlZFNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSBcbiAgICAgICAge3JldHVybiAoIWl0ZXJhdGlvbnMgfHwgZm4oc2VwYXJhdG9yLCBpdGVyYXRpb25zKyssIHRoaXMkMCkgIT09IGZhbHNlKSAmJlxuICAgICAgICBmbih2LCBpdGVyYXRpb25zKyssIHRoaXMkMCkgIT09IGZhbHNlfSxcbiAgICAgICAgcmV2ZXJzZVxuICAgICAgKTtcbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG4gICAgaW50ZXJwb3NlZFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgdmFyIHN0ZXA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgaWYgKCFzdGVwIHx8IGl0ZXJhdGlvbnMgJSAyKSB7XG4gICAgICAgICAgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZXJhdGlvbnMgJSAyID9cbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgc2VwYXJhdG9yKSA6XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHN0ZXAudmFsdWUsIHN0ZXApO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gaW50ZXJwb3NlZFNlcXVlbmNlO1xuICB9XG5cblxuICBmdW5jdGlvbiBzb3J0RmFjdG9yeShpdGVyYWJsZSwgY29tcGFyYXRvciwgbWFwcGVyKSB7XG4gICAgaWYgKCFjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gZGVmYXVsdENvbXBhcmF0b3I7XG4gICAgfVxuICAgIHZhciBpc0tleWVkSXRlcmFibGUgPSBpc0tleWVkKGl0ZXJhYmxlKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyaWVzID0gaXRlcmFibGUudG9TZXEoKS5tYXAoXG4gICAgICBmdW5jdGlvbih2LCBrKSAge3JldHVybiBbaywgdiwgaW5kZXgrKywgbWFwcGVyID8gbWFwcGVyKHYsIGssIGl0ZXJhYmxlKSA6IHZdfVxuICAgICkudG9BcnJheSgpO1xuICAgIGVudHJpZXMuc29ydChmdW5jdGlvbihhLCBiKSAge3JldHVybiBjb21wYXJhdG9yKGFbM10sIGJbM10pIHx8IGFbMl0gLSBiWzJdfSkuZm9yRWFjaChcbiAgICAgIGlzS2V5ZWRJdGVyYWJsZSA/XG4gICAgICBmdW5jdGlvbih2LCBpKSAgeyBlbnRyaWVzW2ldLmxlbmd0aCA9IDI7IH0gOlxuICAgICAgZnVuY3Rpb24odiwgaSkgIHsgZW50cmllc1tpXSA9IHZbMV07IH1cbiAgICApO1xuICAgIHJldHVybiBpc0tleWVkSXRlcmFibGUgPyBLZXllZFNlcShlbnRyaWVzKSA6XG4gICAgICBpc0luZGV4ZWQoaXRlcmFibGUpID8gSW5kZXhlZFNlcShlbnRyaWVzKSA6XG4gICAgICBTZXRTZXEoZW50cmllcyk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIG1heEZhY3RvcnkoaXRlcmFibGUsIGNvbXBhcmF0b3IsIG1hcHBlcikge1xuICAgIGlmICghY29tcGFyYXRvcikge1xuICAgICAgY29tcGFyYXRvciA9IGRlZmF1bHRDb21wYXJhdG9yO1xuICAgIH1cbiAgICBpZiAobWFwcGVyKSB7XG4gICAgICB2YXIgZW50cnkgPSBpdGVyYWJsZS50b1NlcSgpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gW3YsIG1hcHBlcih2LCBrLCBpdGVyYWJsZSldfSlcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbihhLCBiKSAge3JldHVybiBtYXhDb21wYXJlKGNvbXBhcmF0b3IsIGFbMV0sIGJbMV0pID8gYiA6IGF9KTtcbiAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlLnJlZHVjZShmdW5jdGlvbihhLCBiKSAge3JldHVybiBtYXhDb21wYXJlKGNvbXBhcmF0b3IsIGEsIGIpID8gYiA6IGF9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtYXhDb21wYXJlKGNvbXBhcmF0b3IsIGEsIGIpIHtcbiAgICB2YXIgY29tcCA9IGNvbXBhcmF0b3IoYiwgYSk7XG4gICAgLy8gYiBpcyBjb25zaWRlcmVkIHRoZSBuZXcgbWF4IGlmIHRoZSBjb21wYXJhdG9yIGRlY2xhcmVzIHRoZW0gZXF1YWwsIGJ1dFxuICAgIC8vIHRoZXkgYXJlIG5vdCBlcXVhbCBhbmQgYiBpcyBpbiBmYWN0IGEgbnVsbGlzaCB2YWx1ZS5cbiAgICByZXR1cm4gKGNvbXAgPT09IDAgJiYgYiAhPT0gYSAmJiAoYiA9PT0gdW5kZWZpbmVkIHx8IGIgPT09IG51bGwgfHwgYiAhPT0gYikpIHx8IGNvbXAgPiAwO1xuICB9XG5cblxuICBmdW5jdGlvbiB6aXBXaXRoRmFjdG9yeShrZXlJdGVyLCB6aXBwZXIsIGl0ZXJzKSB7XG4gICAgdmFyIHppcFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGtleUl0ZXIpO1xuICAgIHppcFNlcXVlbmNlLnNpemUgPSBuZXcgQXJyYXlTZXEoaXRlcnMpLm1hcChmdW5jdGlvbihpICkge3JldHVybiBpLnNpemV9KS5taW4oKTtcbiAgICAvLyBOb3RlOiB0aGlzIGEgZ2VuZXJpYyBiYXNlIGltcGxlbWVudGF0aW9uIG9mIF9faXRlcmF0ZSBpbiB0ZXJtcyBvZlxuICAgIC8vIF9faXRlcmF0b3Igd2hpY2ggbWF5IGJlIG1vcmUgZ2VuZXJpY2FsbHkgdXNlZnVsIGluIHRoZSBmdXR1cmUuXG4gICAgemlwU2VxdWVuY2UuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIC8qIGdlbmVyaWM6XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCByZXZlcnNlKTtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgIGlmIChmbihzdGVwLnZhbHVlWzFdLCBzdGVwLnZhbHVlWzBdLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgICAqL1xuICAgICAgLy8gaW5kZXhlZDpcbiAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUywgcmV2ZXJzZSk7XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgaWYgKGZuKHN0ZXAudmFsdWUsIGl0ZXJhdGlvbnMrKywgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG4gICAgemlwU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9ycyA9IGl0ZXJzLm1hcChmdW5jdGlvbihpIClcbiAgICAgICAge3JldHVybiAoaSA9IEl0ZXJhYmxlKGkpLCBnZXRJdGVyYXRvcihyZXZlcnNlID8gaS5yZXZlcnNlKCkgOiBpKSl9XG4gICAgICApO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgdmFyIGlzRG9uZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHZhciBzdGVwcztcbiAgICAgICAgaWYgKCFpc0RvbmUpIHtcbiAgICAgICAgICBzdGVwcyA9IGl0ZXJhdG9ycy5tYXAoZnVuY3Rpb24oaSApIHtyZXR1cm4gaS5uZXh0KCl9KTtcbiAgICAgICAgICBpc0RvbmUgPSBzdGVwcy5zb21lKGZ1bmN0aW9uKHMgKSB7cmV0dXJuIHMuZG9uZX0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RvbmUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUoXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBpdGVyYXRpb25zKyssXG4gICAgICAgICAgemlwcGVyLmFwcGx5KG51bGwsIHN0ZXBzLm1hcChmdW5jdGlvbihzICkge3JldHVybiBzLnZhbHVlfSkpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiB6aXBTZXF1ZW5jZVxuICB9XG5cblxuICAvLyAjcHJhZ21hIEhlbHBlciBGdW5jdGlvbnNcblxuICBmdW5jdGlvbiByZWlmeShpdGVyLCBzZXEpIHtcbiAgICByZXR1cm4gaXNTZXEoaXRlcikgPyBzZXEgOiBpdGVyLmNvbnN0cnVjdG9yKHNlcSk7XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZGF0ZUVudHJ5KGVudHJ5KSB7XG4gICAgaWYgKGVudHJ5ICE9PSBPYmplY3QoZW50cnkpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBbSywgVl0gdHVwbGU6ICcgKyBlbnRyeSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZVNpemUoaXRlcikge1xuICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG4gICAgcmV0dXJuIGVuc3VyZVNpemUoaXRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBpdGVyYWJsZUNsYXNzKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIGlzS2V5ZWQoaXRlcmFibGUpID8gS2V5ZWRJdGVyYWJsZSA6XG4gICAgICBpc0luZGV4ZWQoaXRlcmFibGUpID8gSW5kZXhlZEl0ZXJhYmxlIDpcbiAgICAgIFNldEl0ZXJhYmxlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5jcmVhdGUoXG4gICAgICAoXG4gICAgICAgIGlzS2V5ZWQoaXRlcmFibGUpID8gS2V5ZWRTZXEgOlxuICAgICAgICBpc0luZGV4ZWQoaXRlcmFibGUpID8gSW5kZXhlZFNlcSA6XG4gICAgICAgIFNldFNlcVxuICAgICAgKS5wcm90b3R5cGVcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FjaGVSZXN1bHRUaHJvdWdoKCkge1xuICAgIGlmICh0aGlzLl9pdGVyLmNhY2hlUmVzdWx0KSB7XG4gICAgICB0aGlzLl9pdGVyLmNhY2hlUmVzdWx0KCk7XG4gICAgICB0aGlzLnNpemUgPSB0aGlzLl9pdGVyLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFNlcS5wcm90b3R5cGUuY2FjaGVSZXN1bHQuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0Q29tcGFyYXRvcihhLCBiKSB7XG4gICAgcmV0dXJuIGEgPiBiID8gMSA6IGEgPCBiID8gLTEgOiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9yY2VJdGVyYXRvcihrZXlQYXRoKSB7XG4gICAgdmFyIGl0ZXIgPSBnZXRJdGVyYXRvcihrZXlQYXRoKTtcbiAgICBpZiAoIWl0ZXIpIHtcbiAgICAgIC8vIEFycmF5IG1pZ2h0IG5vdCBiZSBpdGVyYWJsZSBpbiB0aGlzIGVudmlyb25tZW50LCBzbyB3ZSBuZWVkIGEgZmFsbGJhY2tcbiAgICAgIC8vIHRvIG91ciB3cmFwcGVkIHR5cGUuXG4gICAgICBpZiAoIWlzQXJyYXlMaWtlKGtleVBhdGgpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGl0ZXJhYmxlIG9yIGFycmF5LWxpa2U6ICcgKyBrZXlQYXRoKTtcbiAgICAgIH1cbiAgICAgIGl0ZXIgPSBnZXRJdGVyYXRvcihJdGVyYWJsZShrZXlQYXRoKSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVyO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoTWFwLCBLZXllZENvbGxlY3Rpb24pO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIE1hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eU1hcCgpIDpcbiAgICAgICAgaXNNYXAodmFsdWUpID8gdmFsdWUgOlxuICAgICAgICBlbXB0eU1hcCgpLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24obWFwICkge1xuICAgICAgICAgIHZhciBpdGVyID0gS2V5ZWRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcbiAgICAgICAgICBpdGVyLmZvckVhY2goZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gbWFwLnNldChrLCB2KX0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBNYXAucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdNYXAgeycsICd9Jyk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQWNjZXNzXG5cbiAgICBNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGssIG5vdFNldFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcm9vdCA/XG4gICAgICAgIHRoaXMuX3Jvb3QuZ2V0KDAsIHVuZGVmaW5lZCwgaywgbm90U2V0VmFsdWUpIDpcbiAgICAgICAgbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgICBNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgIHJldHVybiB1cGRhdGVNYXAodGhpcywgaywgdik7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuc2V0SW4gPSBmdW5jdGlvbihrZXlQYXRoLCB2KSB7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVJbihrZXlQYXRoLCBOT1RfU0VULCBmdW5jdGlvbigpICB7cmV0dXJuIHZ9KTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihrKSB7XG4gICAgICByZXR1cm4gdXBkYXRlTWFwKHRoaXMsIGssIE5PVF9TRVQpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLmRlbGV0ZUluID0gZnVuY3Rpb24oa2V5UGF0aCkge1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSW4oa2V5UGF0aCwgZnVuY3Rpb24oKSAge3JldHVybiBOT1RfU0VUfSk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oaywgbm90U2V0VmFsdWUsIHVwZGF0ZXIpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cbiAgICAgICAgayh0aGlzKSA6XG4gICAgICAgIHRoaXMudXBkYXRlSW4oW2tdLCBub3RTZXRWYWx1ZSwgdXBkYXRlcik7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUudXBkYXRlSW4gPSBmdW5jdGlvbihrZXlQYXRoLCBub3RTZXRWYWx1ZSwgdXBkYXRlcikge1xuICAgICAgaWYgKCF1cGRhdGVyKSB7XG4gICAgICAgIHVwZGF0ZXIgPSBub3RTZXRWYWx1ZTtcbiAgICAgICAgbm90U2V0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgdXBkYXRlZFZhbHVlID0gdXBkYXRlSW5EZWVwTWFwKFxuICAgICAgICB0aGlzLFxuICAgICAgICBmb3JjZUl0ZXJhdG9yKGtleVBhdGgpLFxuICAgICAgICBub3RTZXRWYWx1ZSxcbiAgICAgICAgdXBkYXRlclxuICAgICAgKTtcbiAgICAgIHJldHVybiB1cGRhdGVkVmFsdWUgPT09IE5PVF9TRVQgPyB1bmRlZmluZWQgOiB1cGRhdGVkVmFsdWU7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgICAgdGhpcy5fcm9vdCA9IG51bGw7XG4gICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVtcHR5TWFwKCk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQ29tcG9zaXRpb25cblxuICAgIE1hcC5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbigvKi4uLml0ZXJzKi8pIHtcbiAgICAgIHJldHVybiBtZXJnZUludG9NYXBXaXRoKHRoaXMsIHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5tZXJnZVdpdGggPSBmdW5jdGlvbihtZXJnZXIpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiBtZXJnZUludG9NYXBXaXRoKHRoaXMsIG1lcmdlciwgaXRlcnMpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLm1lcmdlSW4gPSBmdW5jdGlvbihrZXlQYXRoKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVJbihrZXlQYXRoLCBlbXB0eU1hcCgpLCBmdW5jdGlvbihtICkge3JldHVybiBtLm1lcmdlLmFwcGx5KG0sIGl0ZXJzKX0pO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLm1lcmdlRGVlcCA9IGZ1bmN0aW9uKC8qLi4uaXRlcnMqLykge1xuICAgICAgcmV0dXJuIG1lcmdlSW50b01hcFdpdGgodGhpcywgZGVlcE1lcmdlcih1bmRlZmluZWQpLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLm1lcmdlRGVlcFdpdGggPSBmdW5jdGlvbihtZXJnZXIpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiBtZXJnZUludG9NYXBXaXRoKHRoaXMsIGRlZXBNZXJnZXIobWVyZ2VyKSwgaXRlcnMpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLm1lcmdlRGVlcEluID0gZnVuY3Rpb24oa2V5UGF0aCkge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSW4oa2V5UGF0aCwgZW1wdHlNYXAoKSwgZnVuY3Rpb24obSApIHtyZXR1cm4gbS5tZXJnZURlZXAuYXBwbHkobSwgaXRlcnMpfSk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKGNvbXBhcmF0b3IpIHtcbiAgICAgIC8vIExhdGUgYmluZGluZ1xuICAgICAgcmV0dXJuIE9yZGVyZWRNYXAoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvcikpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLnNvcnRCeSA9IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgICAgLy8gTGF0ZSBiaW5kaW5nXG4gICAgICByZXR1cm4gT3JkZXJlZE1hcChzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yLCBtYXBwZXIpKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNdXRhYmlsaXR5XG5cbiAgICBNYXAucHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSBmdW5jdGlvbihmbikge1xuICAgICAgdmFyIG11dGFibGUgPSB0aGlzLmFzTXV0YWJsZSgpO1xuICAgICAgZm4obXV0YWJsZSk7XG4gICAgICByZXR1cm4gbXV0YWJsZS53YXNBbHRlcmVkKCkgPyBtdXRhYmxlLl9fZW5zdXJlT3duZXIodGhpcy5fX293bmVySUQpIDogdGhpcztcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5hc011dGFibGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fb3duZXJJRCA/IHRoaXMgOiB0aGlzLl9fZW5zdXJlT3duZXIobmV3IE93bmVySUQoKSk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuYXNJbW11dGFibGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZW5zdXJlT3duZXIoKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2FsdGVyZWQ7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcywgdHlwZSwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHRoaXMuX3Jvb3QgJiYgdGhpcy5fcm9vdC5pdGVyYXRlKGZ1bmN0aW9uKGVudHJ5ICkge1xuICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgIHJldHVybiBmbihlbnRyeVsxXSwgZW50cnlbMF0sIHRoaXMkMCk7XG4gICAgICB9LCByZXZlcnNlKTtcbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbihvd25lcklEKSB7XG4gICAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlTWFwKHRoaXMuc2l6ZSwgdGhpcy5fcm9vdCwgb3duZXJJRCwgdGhpcy5fX2hhc2gpO1xuICAgIH07XG5cblxuICBmdW5jdGlvbiBpc01hcChtYXliZU1hcCkge1xuICAgIHJldHVybiAhIShtYXliZU1hcCAmJiBtYXliZU1hcFtJU19NQVBfU0VOVElORUxdKTtcbiAgfVxuXG4gIE1hcC5pc01hcCA9IGlzTWFwO1xuXG4gIHZhciBJU19NQVBfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9NQVBfX0BAJztcblxuICB2YXIgTWFwUHJvdG90eXBlID0gTWFwLnByb3RvdHlwZTtcbiAgTWFwUHJvdG90eXBlW0lTX01BUF9TRU5USU5FTF0gPSB0cnVlO1xuICBNYXBQcm90b3R5cGVbREVMRVRFXSA9IE1hcFByb3RvdHlwZS5yZW1vdmU7XG4gIE1hcFByb3RvdHlwZS5yZW1vdmVJbiA9IE1hcFByb3RvdHlwZS5kZWxldGVJbjtcblxuXG4gIC8vICNwcmFnbWEgVHJpZSBOb2Rlc1xuXG5cblxuICAgIGZ1bmN0aW9uIEFycmF5TWFwTm9kZShvd25lcklELCBlbnRyaWVzKSB7XG4gICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuICAgICAgdGhpcy5lbnRyaWVzID0gZW50cmllcztcbiAgICB9XG5cbiAgICBBcnJheU1hcE5vZGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHNoaWZ0LCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgICAgIGZvciAodmFyIGlpID0gMCwgbGVuID0gZW50cmllcy5sZW5ndGg7IGlpIDwgbGVuOyBpaSsrKSB7XG4gICAgICAgIGlmIChpcyhrZXksIGVudHJpZXNbaWldWzBdKSkge1xuICAgICAgICAgIHJldHVybiBlbnRyaWVzW2lpXVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICBBcnJheU1hcE5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICAgICAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcblxuICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXM7XG4gICAgICB2YXIgaWR4ID0gMDtcbiAgICAgIGZvciAodmFyIGxlbiA9IGVudHJpZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgIGlmIChpcyhrZXksIGVudHJpZXNbaWR4XVswXSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGV4aXN0cyA9IGlkeCA8IGxlbjtcblxuICAgICAgaWYgKGV4aXN0cyA/IGVudHJpZXNbaWR4XVsxXSA9PT0gdmFsdWUgOiByZW1vdmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuICAgICAgKHJlbW92ZWQgfHwgIWV4aXN0cykgJiYgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuXG4gICAgICBpZiAocmVtb3ZlZCAmJiBlbnRyaWVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICBpZiAoIWV4aXN0cyAmJiAhcmVtb3ZlZCAmJiBlbnRyaWVzLmxlbmd0aCA+PSBNQVhfQVJSQVlfTUFQX1NJWkUpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZU5vZGVzKG93bmVySUQsIGVudHJpZXMsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuICAgICAgdmFyIG5ld0VudHJpZXMgPSBpc0VkaXRhYmxlID8gZW50cmllcyA6IGFyckNvcHkoZW50cmllcyk7XG5cbiAgICAgIGlmIChleGlzdHMpIHtcbiAgICAgICAgaWYgKHJlbW92ZWQpIHtcbiAgICAgICAgICBpZHggPT09IGxlbiAtIDEgPyBuZXdFbnRyaWVzLnBvcCgpIDogKG5ld0VudHJpZXNbaWR4XSA9IG5ld0VudHJpZXMucG9wKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0VudHJpZXNbaWR4XSA9IFtrZXksIHZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3RW50cmllcy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgICAgIHRoaXMuZW50cmllcyA9IG5ld0VudHJpZXM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IEFycmF5TWFwTm9kZShvd25lcklELCBuZXdFbnRyaWVzKTtcbiAgICB9O1xuXG5cblxuXG4gICAgZnVuY3Rpb24gQml0bWFwSW5kZXhlZE5vZGUob3duZXJJRCwgYml0bWFwLCBub2Rlcykge1xuICAgICAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgICAgIHRoaXMuYml0bWFwID0gYml0bWFwO1xuICAgICAgdGhpcy5ub2RlcyA9IG5vZGVzO1xuICAgIH1cblxuICAgIEJpdG1hcEluZGV4ZWROb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuICAgICAgdmFyIGJpdCA9ICgxIDw8ICgoc2hpZnQgPT09IDAgPyBrZXlIYXNoIDoga2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSykpO1xuICAgICAgdmFyIGJpdG1hcCA9IHRoaXMuYml0bWFwO1xuICAgICAgcmV0dXJuIChiaXRtYXAgJiBiaXQpID09PSAwID8gbm90U2V0VmFsdWUgOlxuICAgICAgICB0aGlzLm5vZGVzW3BvcENvdW50KGJpdG1hcCAmIChiaXQgLSAxKSldLmdldChzaGlmdCArIFNISUZULCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKTtcbiAgICB9O1xuXG4gICAgQml0bWFwSW5kZXhlZE5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuICAgICAgdmFyIGtleUhhc2hGcmFnID0gKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG4gICAgICB2YXIgYml0ID0gMSA8PCBrZXlIYXNoRnJhZztcbiAgICAgIHZhciBiaXRtYXAgPSB0aGlzLmJpdG1hcDtcbiAgICAgIHZhciBleGlzdHMgPSAoYml0bWFwICYgYml0KSAhPT0gMDtcblxuICAgICAgaWYgKCFleGlzdHMgJiYgdmFsdWUgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBpZHggPSBwb3BDb3VudChiaXRtYXAgJiAoYml0IC0gMSkpO1xuICAgICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcztcbiAgICAgIHZhciBub2RlID0gZXhpc3RzID8gbm9kZXNbaWR4XSA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciBuZXdOb2RlID0gdXBkYXRlTm9kZShub2RlLCBvd25lcklELCBzaGlmdCArIFNISUZULCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcik7XG5cbiAgICAgIGlmIChuZXdOb2RlID09PSBub2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV4aXN0cyAmJiBuZXdOb2RlICYmIG5vZGVzLmxlbmd0aCA+PSBNQVhfQklUTUFQX0lOREVYRURfU0laRSkge1xuICAgICAgICByZXR1cm4gZXhwYW5kTm9kZXMob3duZXJJRCwgbm9kZXMsIGJpdG1hcCwga2V5SGFzaEZyYWcsIG5ld05vZGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXhpc3RzICYmICFuZXdOb2RlICYmIG5vZGVzLmxlbmd0aCA9PT0gMiAmJiBpc0xlYWZOb2RlKG5vZGVzW2lkeCBeIDFdKSkge1xuICAgICAgICByZXR1cm4gbm9kZXNbaWR4IF4gMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChleGlzdHMgJiYgbmV3Tm9kZSAmJiBub2Rlcy5sZW5ndGggPT09IDEgJiYgaXNMZWFmTm9kZShuZXdOb2RlKSkge1xuICAgICAgICByZXR1cm4gbmV3Tm9kZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzRWRpdGFibGUgPSBvd25lcklEICYmIG93bmVySUQgPT09IHRoaXMub3duZXJJRDtcbiAgICAgIHZhciBuZXdCaXRtYXAgPSBleGlzdHMgPyBuZXdOb2RlID8gYml0bWFwIDogYml0bWFwIF4gYml0IDogYml0bWFwIHwgYml0O1xuICAgICAgdmFyIG5ld05vZGVzID0gZXhpc3RzID8gbmV3Tm9kZSA/XG4gICAgICAgIHNldEluKG5vZGVzLCBpZHgsIG5ld05vZGUsIGlzRWRpdGFibGUpIDpcbiAgICAgICAgc3BsaWNlT3V0KG5vZGVzLCBpZHgsIGlzRWRpdGFibGUpIDpcbiAgICAgICAgc3BsaWNlSW4obm9kZXMsIGlkeCwgbmV3Tm9kZSwgaXNFZGl0YWJsZSk7XG5cbiAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgICAgIHRoaXMuYml0bWFwID0gbmV3Qml0bWFwO1xuICAgICAgICB0aGlzLm5vZGVzID0gbmV3Tm9kZXM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsIG5ld0JpdG1hcCwgbmV3Tm9kZXMpO1xuICAgIH07XG5cblxuXG5cbiAgICBmdW5jdGlvbiBIYXNoQXJyYXlNYXBOb2RlKG93bmVySUQsIGNvdW50LCBub2Rlcykge1xuICAgICAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgICAgIHRoaXMuY291bnQgPSBjb3VudDtcbiAgICAgIHRoaXMubm9kZXMgPSBub2RlcztcbiAgICB9XG5cbiAgICBIYXNoQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuICAgICAgdmFyIGlkeCA9IChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGVzW2lkeF07XG4gICAgICByZXR1cm4gbm9kZSA/IG5vZGUuZ2V0KHNoaWZ0ICsgU0hJRlQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIDogbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIEhhc2hBcnJheU1hcE5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuICAgICAgdmFyIGlkeCA9IChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuICAgICAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcbiAgICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW2lkeF07XG5cbiAgICAgIGlmIChyZW1vdmVkICYmICFub2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3Tm9kZSA9IHVwZGF0ZU5vZGUobm9kZSwgb3duZXJJRCwgc2hpZnQgKyBTSElGVCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpO1xuICAgICAgaWYgKG5ld05vZGUgPT09IG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdDb3VudCA9IHRoaXMuY291bnQ7XG4gICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgbmV3Q291bnQrKztcbiAgICAgIH0gZWxzZSBpZiAoIW5ld05vZGUpIHtcbiAgICAgICAgbmV3Q291bnQtLTtcbiAgICAgICAgaWYgKG5ld0NvdW50IDwgTUlOX0hBU0hfQVJSQVlfTUFQX1NJWkUpIHtcbiAgICAgICAgICByZXR1cm4gcGFja05vZGVzKG93bmVySUQsIG5vZGVzLCBuZXdDb3VudCwgaWR4KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuICAgICAgdmFyIG5ld05vZGVzID0gc2V0SW4obm9kZXMsIGlkeCwgbmV3Tm9kZSwgaXNFZGl0YWJsZSk7XG5cbiAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgICAgIHRoaXMuY291bnQgPSBuZXdDb3VudDtcbiAgICAgICAgdGhpcy5ub2RlcyA9IG5ld05vZGVzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBIYXNoQXJyYXlNYXBOb2RlKG93bmVySUQsIG5ld0NvdW50LCBuZXdOb2Rlcyk7XG4gICAgfTtcblxuXG5cblxuICAgIGZ1bmN0aW9uIEhhc2hDb2xsaXNpb25Ob2RlKG93bmVySUQsIGtleUhhc2gsIGVudHJpZXMpIHtcbiAgICAgIHRoaXMub3duZXJJRCA9IG93bmVySUQ7XG4gICAgICB0aGlzLmtleUhhc2ggPSBrZXlIYXNoO1xuICAgICAgdGhpcy5lbnRyaWVzID0gZW50cmllcztcbiAgICB9XG5cbiAgICBIYXNoQ29sbGlzaW9uTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oc2hpZnQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICAgICAgZm9yICh2YXIgaWkgPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWkgPCBsZW47IGlpKyspIHtcbiAgICAgICAgaWYgKGlzKGtleSwgZW50cmllc1tpaV1bMF0pKSB7XG4gICAgICAgICAgcmV0dXJuIGVudHJpZXNbaWldWzFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIEhhc2hDb2xsaXNpb25Ob2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgICAgIGlmIChrZXlIYXNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2V5SGFzaCA9IGhhc2goa2V5KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcblxuICAgICAgaWYgKGtleUhhc2ggIT09IHRoaXMua2V5SGFzaCkge1xuICAgICAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIFNldFJlZihkaWRBbHRlcik7XG4gICAgICAgIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcbiAgICAgICAgcmV0dXJuIG1lcmdlSW50b05vZGUodGhpcywgb3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIFtrZXksIHZhbHVlXSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICAgICAgdmFyIGlkeCA9IDA7XG4gICAgICBmb3IgKHZhciBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICBpZiAoaXMoa2V5LCBlbnRyaWVzW2lkeF1bMF0pKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBleGlzdHMgPSBpZHggPCBsZW47XG5cbiAgICAgIGlmIChleGlzdHMgPyBlbnRyaWVzW2lkeF1bMV0gPT09IHZhbHVlIDogcmVtb3ZlZCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgU2V0UmVmKGRpZEFsdGVyKTtcbiAgICAgIChyZW1vdmVkIHx8ICFleGlzdHMpICYmIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcblxuICAgICAgaWYgKHJlbW92ZWQgJiYgbGVuID09PSAyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmFsdWVOb2RlKG93bmVySUQsIHRoaXMua2V5SGFzaCwgZW50cmllc1tpZHggXiAxXSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpc0VkaXRhYmxlID0gb3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQ7XG4gICAgICB2YXIgbmV3RW50cmllcyA9IGlzRWRpdGFibGUgPyBlbnRyaWVzIDogYXJyQ29weShlbnRyaWVzKTtcblxuICAgICAgaWYgKGV4aXN0cykge1xuICAgICAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgICAgIGlkeCA9PT0gbGVuIC0gMSA/IG5ld0VudHJpZXMucG9wKCkgOiAobmV3RW50cmllc1tpZHhdID0gbmV3RW50cmllcy5wb3AoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3RW50cmllc1tpZHhdID0gW2tleSwgdmFsdWVdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdFbnRyaWVzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRWRpdGFibGUpIHtcbiAgICAgICAgdGhpcy5lbnRyaWVzID0gbmV3RW50cmllcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgSGFzaENvbGxpc2lvbk5vZGUob3duZXJJRCwgdGhpcy5rZXlIYXNoLCBuZXdFbnRyaWVzKTtcbiAgICB9O1xuXG5cblxuXG4gICAgZnVuY3Rpb24gVmFsdWVOb2RlKG93bmVySUQsIGtleUhhc2gsIGVudHJ5KSB7XG4gICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuICAgICAgdGhpcy5rZXlIYXNoID0ga2V5SGFzaDtcbiAgICAgIHRoaXMuZW50cnkgPSBlbnRyeTtcbiAgICB9XG5cbiAgICBWYWx1ZU5vZGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHNoaWZ0LCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICByZXR1cm4gaXMoa2V5LCB0aGlzLmVudHJ5WzBdKSA/IHRoaXMuZW50cnlbMV0gOiBub3RTZXRWYWx1ZTtcbiAgICB9O1xuXG4gICAgVmFsdWVOb2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgICAgIHZhciByZW1vdmVkID0gdmFsdWUgPT09IE5PVF9TRVQ7XG4gICAgICB2YXIga2V5TWF0Y2ggPSBpcyhrZXksIHRoaXMuZW50cnlbMF0pO1xuICAgICAgaWYgKGtleU1hdGNoID8gdmFsdWUgPT09IHRoaXMuZW50cnlbMV0gOiByZW1vdmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuXG4gICAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgICBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG4gICAgICAgIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gICAgICB9XG5cbiAgICAgIGlmIChrZXlNYXRjaCkge1xuICAgICAgICBpZiAob3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQpIHtcbiAgICAgICAgICB0aGlzLmVudHJ5WzFdID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZU5vZGUob3duZXJJRCwgdGhpcy5rZXlIYXNoLCBba2V5LCB2YWx1ZV0pO1xuICAgICAgfVxuXG4gICAgICBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTm9kZSh0aGlzLCBvd25lcklELCBzaGlmdCwgaGFzaChrZXkpLCBba2V5LCB2YWx1ZV0pO1xuICAgIH07XG5cblxuXG4gIC8vICNwcmFnbWEgSXRlcmF0b3JzXG5cbiAgQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5pdGVyYXRlID1cbiAgSGFzaENvbGxpc2lvbk5vZGUucHJvdG90eXBlLml0ZXJhdGUgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgICBmb3IgKHZhciBpaSA9IDAsIG1heEluZGV4ID0gZW50cmllcy5sZW5ndGggLSAxOyBpaSA8PSBtYXhJbmRleDsgaWkrKykge1xuICAgICAgaWYgKGZuKGVudHJpZXNbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV0pID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQml0bWFwSW5kZXhlZE5vZGUucHJvdG90eXBlLml0ZXJhdGUgPVxuICBIYXNoQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5pdGVyYXRlID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcztcbiAgICBmb3IgKHZhciBpaSA9IDAsIG1heEluZGV4ID0gbm9kZXMubGVuZ3RoIC0gMTsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgIHZhciBub2RlID0gbm9kZXNbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV07XG4gICAgICBpZiAobm9kZSAmJiBub2RlLml0ZXJhdGUoZm4sIHJldmVyc2UpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgVmFsdWVOb2RlLnByb3RvdHlwZS5pdGVyYXRlID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7XG4gICAgcmV0dXJuIGZuKHRoaXMuZW50cnkpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoTWFwSXRlcmF0b3IsIEl0ZXJhdG9yKTtcblxuICAgIGZ1bmN0aW9uIE1hcEl0ZXJhdG9yKG1hcCwgdHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgICB0aGlzLl9yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICAgIHRoaXMuX3N0YWNrID0gbWFwLl9yb290ICYmIG1hcEl0ZXJhdG9yRnJhbWUobWFwLl9yb290KTtcbiAgICB9XG5cbiAgICBNYXBJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHR5cGUgPSB0aGlzLl90eXBlO1xuICAgICAgdmFyIHN0YWNrID0gdGhpcy5fc3RhY2s7XG4gICAgICB3aGlsZSAoc3RhY2spIHtcbiAgICAgICAgdmFyIG5vZGUgPSBzdGFjay5ub2RlO1xuICAgICAgICB2YXIgaW5kZXggPSBzdGFjay5pbmRleCsrO1xuICAgICAgICB2YXIgbWF4SW5kZXg7XG4gICAgICAgIGlmIChub2RlLmVudHJ5KSB7XG4gICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBub2RlLmVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5lbnRyaWVzKSB7XG4gICAgICAgICAgbWF4SW5kZXggPSBub2RlLmVudHJpZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICBpZiAoaW5kZXggPD0gbWF4SW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXBJdGVyYXRvclZhbHVlKHR5cGUsIG5vZGUuZW50cmllc1t0aGlzLl9yZXZlcnNlID8gbWF4SW5kZXggLSBpbmRleCA6IGluZGV4XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1heEluZGV4ID0gbm9kZS5ub2Rlcy5sZW5ndGggLSAxO1xuICAgICAgICAgIGlmIChpbmRleCA8PSBtYXhJbmRleCkge1xuICAgICAgICAgICAgdmFyIHN1Yk5vZGUgPSBub2RlLm5vZGVzW3RoaXMuX3JldmVyc2UgPyBtYXhJbmRleCAtIGluZGV4IDogaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHN1Yk5vZGUpIHtcbiAgICAgICAgICAgICAgaWYgKHN1Yk5vZGUuZW50cnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBzdWJOb2RlLmVudHJ5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdGFjayA9IHRoaXMuX3N0YWNrID0gbWFwSXRlcmF0b3JGcmFtZShzdWJOb2RlLCBzdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RhY2sgPSB0aGlzLl9zdGFjayA9IHRoaXMuX3N0YWNrLl9fcHJldjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICB9O1xuXG5cbiAgZnVuY3Rpb24gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBlbnRyeSkge1xuICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXBJdGVyYXRvckZyYW1lKG5vZGUsIHByZXYpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbm9kZTogbm9kZSxcbiAgICAgIGluZGV4OiAwLFxuICAgICAgX19wcmV2OiBwcmV2XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VNYXAoc2l6ZSwgcm9vdCwgb3duZXJJRCwgaGFzaCkge1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKE1hcFByb3RvdHlwZSk7XG4gICAgbWFwLnNpemUgPSBzaXplO1xuICAgIG1hcC5fcm9vdCA9IHJvb3Q7XG4gICAgbWFwLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgbWFwLl9faGFzaCA9IGhhc2g7XG4gICAgbWFwLl9fYWx0ZXJlZCA9IGZhbHNlO1xuICAgIHJldHVybiBtYXA7XG4gIH1cblxuICB2YXIgRU1QVFlfTUFQO1xuICBmdW5jdGlvbiBlbXB0eU1hcCgpIHtcbiAgICByZXR1cm4gRU1QVFlfTUFQIHx8IChFTVBUWV9NQVAgPSBtYWtlTWFwKDApKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU1hcChtYXAsIGssIHYpIHtcbiAgICB2YXIgbmV3Um9vdDtcbiAgICB2YXIgbmV3U2l6ZTtcbiAgICBpZiAoIW1hcC5fcm9vdCkge1xuICAgICAgaWYgKHYgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgIH1cbiAgICAgIG5ld1NpemUgPSAxO1xuICAgICAgbmV3Um9vdCA9IG5ldyBBcnJheU1hcE5vZGUobWFwLl9fb3duZXJJRCwgW1trLCB2XV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZGlkQ2hhbmdlU2l6ZSA9IE1ha2VSZWYoQ0hBTkdFX0xFTkdUSCk7XG4gICAgICB2YXIgZGlkQWx0ZXIgPSBNYWtlUmVmKERJRF9BTFRFUik7XG4gICAgICBuZXdSb290ID0gdXBkYXRlTm9kZShtYXAuX3Jvb3QsIG1hcC5fX293bmVySUQsIDAsIHVuZGVmaW5lZCwgaywgdiwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpO1xuICAgICAgaWYgKCFkaWRBbHRlci52YWx1ZSkge1xuICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgfVxuICAgICAgbmV3U2l6ZSA9IG1hcC5zaXplICsgKGRpZENoYW5nZVNpemUudmFsdWUgPyB2ID09PSBOT1RfU0VUID8gLTEgOiAxIDogMCk7XG4gICAgfVxuICAgIGlmIChtYXAuX19vd25lcklEKSB7XG4gICAgICBtYXAuc2l6ZSA9IG5ld1NpemU7XG4gICAgICBtYXAuX3Jvb3QgPSBuZXdSb290O1xuICAgICAgbWFwLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgIG1hcC5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1Jvb3QgPyBtYWtlTWFwKG5ld1NpemUsIG5ld1Jvb3QpIDogZW1wdHlNYXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU5vZGUobm9kZSwgb3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKSB7XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICBpZiAodmFsdWUgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuICAgICAgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuICAgICAgcmV0dXJuIG5ldyBWYWx1ZU5vZGUob3duZXJJRCwga2V5SGFzaCwgW2tleSwgdmFsdWVdKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGUudXBkYXRlKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBpc0xlYWZOb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5jb25zdHJ1Y3RvciA9PT0gVmFsdWVOb2RlIHx8IG5vZGUuY29uc3RydWN0b3IgPT09IEhhc2hDb2xsaXNpb25Ob2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VJbnRvTm9kZShub2RlLCBvd25lcklELCBzaGlmdCwga2V5SGFzaCwgZW50cnkpIHtcbiAgICBpZiAobm9kZS5rZXlIYXNoID09PSBrZXlIYXNoKSB7XG4gICAgICByZXR1cm4gbmV3IEhhc2hDb2xsaXNpb25Ob2RlKG93bmVySUQsIGtleUhhc2gsIFtub2RlLmVudHJ5LCBlbnRyeV0pO1xuICAgIH1cblxuICAgIHZhciBpZHgxID0gKHNoaWZ0ID09PSAwID8gbm9kZS5rZXlIYXNoIDogbm9kZS5rZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuICAgIHZhciBpZHgyID0gKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG5cbiAgICB2YXIgbmV3Tm9kZTtcbiAgICB2YXIgbm9kZXMgPSBpZHgxID09PSBpZHgyID9cbiAgICAgIFttZXJnZUludG9Ob2RlKG5vZGUsIG93bmVySUQsIHNoaWZ0ICsgU0hJRlQsIGtleUhhc2gsIGVudHJ5KV0gOlxuICAgICAgKChuZXdOb2RlID0gbmV3IFZhbHVlTm9kZShvd25lcklELCBrZXlIYXNoLCBlbnRyeSkpLCBpZHgxIDwgaWR4MiA/IFtub2RlLCBuZXdOb2RlXSA6IFtuZXdOb2RlLCBub2RlXSk7XG5cbiAgICByZXR1cm4gbmV3IEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsICgxIDw8IGlkeDEpIHwgKDEgPDwgaWR4MiksIG5vZGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU5vZGVzKG93bmVySUQsIGVudHJpZXMsIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgIG93bmVySUQgPSBuZXcgT3duZXJJRCgpO1xuICAgIH1cbiAgICB2YXIgbm9kZSA9IG5ldyBWYWx1ZU5vZGUob3duZXJJRCwgaGFzaChrZXkpLCBba2V5LCB2YWx1ZV0pO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBlbnRyaWVzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpaV07XG4gICAgICBub2RlID0gbm9kZS51cGRhdGUob3duZXJJRCwgMCwgdW5kZWZpbmVkLCBlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhY2tOb2Rlcyhvd25lcklELCBub2RlcywgY291bnQsIGV4Y2x1ZGluZykge1xuICAgIHZhciBiaXRtYXAgPSAwO1xuICAgIHZhciBwYWNrZWRJSSA9IDA7XG4gICAgdmFyIHBhY2tlZE5vZGVzID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBmb3IgKHZhciBpaSA9IDAsIGJpdCA9IDEsIGxlbiA9IG5vZGVzLmxlbmd0aDsgaWkgPCBsZW47IGlpKyssIGJpdCA8PD0gMSkge1xuICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpaV07XG4gICAgICBpZiAobm9kZSAhPT0gdW5kZWZpbmVkICYmIGlpICE9PSBleGNsdWRpbmcpIHtcbiAgICAgICAgYml0bWFwIHw9IGJpdDtcbiAgICAgICAgcGFja2VkTm9kZXNbcGFja2VkSUkrK10gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsIGJpdG1hcCwgcGFja2VkTm9kZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwYW5kTm9kZXMob3duZXJJRCwgbm9kZXMsIGJpdG1hcCwgaW5jbHVkaW5nLCBub2RlKSB7XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgZXhwYW5kZWROb2RlcyA9IG5ldyBBcnJheShTSVpFKTtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGJpdG1hcCAhPT0gMDsgaWkrKywgYml0bWFwID4+Pj0gMSkge1xuICAgICAgZXhwYW5kZWROb2Rlc1tpaV0gPSBiaXRtYXAgJiAxID8gbm9kZXNbY291bnQrK10gOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGV4cGFuZGVkTm9kZXNbaW5jbHVkaW5nXSA9IG5vZGU7XG4gICAgcmV0dXJuIG5ldyBIYXNoQXJyYXlNYXBOb2RlKG93bmVySUQsIGNvdW50ICsgMSwgZXhwYW5kZWROb2Rlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZUludG9NYXBXaXRoKG1hcCwgbWVyZ2VyLCBpdGVyYWJsZXMpIHtcbiAgICB2YXIgaXRlcnMgPSBbXTtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaXRlcmFibGVzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVzW2lpXTtcbiAgICAgIHZhciBpdGVyID0gS2V5ZWRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICBpZiAoIWlzSXRlcmFibGUodmFsdWUpKSB7XG4gICAgICAgIGl0ZXIgPSBpdGVyLm1hcChmdW5jdGlvbih2ICkge3JldHVybiBmcm9tSlModil9KTtcbiAgICAgIH1cbiAgICAgIGl0ZXJzLnB1c2goaXRlcik7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZUludG9Db2xsZWN0aW9uV2l0aChtYXAsIG1lcmdlciwgaXRlcnMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVlcE1lcmdlcihtZXJnZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZXhpc3RpbmcsIHZhbHVlKSBcbiAgICAgIHtyZXR1cm4gZXhpc3RpbmcgJiYgZXhpc3RpbmcubWVyZ2VEZWVwV2l0aCAmJiBpc0l0ZXJhYmxlKHZhbHVlKSA/XG4gICAgICAgIGV4aXN0aW5nLm1lcmdlRGVlcFdpdGgobWVyZ2VyLCB2YWx1ZSkgOlxuICAgICAgICBtZXJnZXIgPyBtZXJnZXIoZXhpc3RpbmcsIHZhbHVlKSA6IHZhbHVlfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlSW50b0NvbGxlY3Rpb25XaXRoKGNvbGxlY3Rpb24sIG1lcmdlciwgaXRlcnMpIHtcbiAgICBpdGVycyA9IGl0ZXJzLmZpbHRlcihmdW5jdGlvbih4ICkge3JldHVybiB4LnNpemUgIT09IDB9KTtcbiAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgaWYgKGNvbGxlY3Rpb24uc2l6ZSA9PT0gMCAmJiBpdGVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uLmNvbnN0cnVjdG9yKGl0ZXJzWzBdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3Rpb24ud2l0aE11dGF0aW9ucyhmdW5jdGlvbihjb2xsZWN0aW9uICkge1xuICAgICAgdmFyIG1lcmdlSW50b01hcCA9IG1lcmdlciA/XG4gICAgICAgIGZ1bmN0aW9uKHZhbHVlLCBrZXkpICB7XG4gICAgICAgICAgY29sbGVjdGlvbi51cGRhdGUoa2V5LCBOT1RfU0VULCBmdW5jdGlvbihleGlzdGluZyApXG4gICAgICAgICAgICB7cmV0dXJuIGV4aXN0aW5nID09PSBOT1RfU0VUID8gdmFsdWUgOiBtZXJnZXIoZXhpc3RpbmcsIHZhbHVlKX1cbiAgICAgICAgICApO1xuICAgICAgICB9IDpcbiAgICAgICAgZnVuY3Rpb24odmFsdWUsIGtleSkgIHtcbiAgICAgICAgICBjb2xsZWN0aW9uLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGl0ZXJzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICBpdGVyc1tpaV0uZm9yRWFjaChtZXJnZUludG9NYXApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlSW5EZWVwTWFwKGV4aXN0aW5nLCBrZXlQYXRoSXRlciwgbm90U2V0VmFsdWUsIHVwZGF0ZXIpIHtcbiAgICB2YXIgaXNOb3RTZXQgPSBleGlzdGluZyA9PT0gTk9UX1NFVDtcbiAgICB2YXIgc3RlcCA9IGtleVBhdGhJdGVyLm5leHQoKTtcbiAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICB2YXIgZXhpc3RpbmdWYWx1ZSA9IGlzTm90U2V0ID8gbm90U2V0VmFsdWUgOiBleGlzdGluZztcbiAgICAgIHZhciBuZXdWYWx1ZSA9IHVwZGF0ZXIoZXhpc3RpbmdWYWx1ZSk7XG4gICAgICByZXR1cm4gbmV3VmFsdWUgPT09IGV4aXN0aW5nVmFsdWUgPyBleGlzdGluZyA6IG5ld1ZhbHVlO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBpc05vdFNldCB8fCAoZXhpc3RpbmcgJiYgZXhpc3Rpbmcuc2V0KSxcbiAgICAgICdpbnZhbGlkIGtleVBhdGgnXG4gICAgKTtcbiAgICB2YXIga2V5ID0gc3RlcC52YWx1ZTtcbiAgICB2YXIgbmV4dEV4aXN0aW5nID0gaXNOb3RTZXQgPyBOT1RfU0VUIDogZXhpc3RpbmcuZ2V0KGtleSwgTk9UX1NFVCk7XG4gICAgdmFyIG5leHRVcGRhdGVkID0gdXBkYXRlSW5EZWVwTWFwKFxuICAgICAgbmV4dEV4aXN0aW5nLFxuICAgICAga2V5UGF0aEl0ZXIsXG4gICAgICBub3RTZXRWYWx1ZSxcbiAgICAgIHVwZGF0ZXJcbiAgICApO1xuICAgIHJldHVybiBuZXh0VXBkYXRlZCA9PT0gbmV4dEV4aXN0aW5nID8gZXhpc3RpbmcgOlxuICAgICAgbmV4dFVwZGF0ZWQgPT09IE5PVF9TRVQgPyBleGlzdGluZy5yZW1vdmUoa2V5KSA6XG4gICAgICAoaXNOb3RTZXQgPyBlbXB0eU1hcCgpIDogZXhpc3RpbmcpLnNldChrZXksIG5leHRVcGRhdGVkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvcENvdW50KHgpIHtcbiAgICB4ID0geCAtICgoeCA+PiAxKSAmIDB4NTU1NTU1NTUpO1xuICAgIHggPSAoeCAmIDB4MzMzMzMzMzMpICsgKCh4ID4+IDIpICYgMHgzMzMzMzMzMyk7XG4gICAgeCA9ICh4ICsgKHggPj4gNCkpICYgMHgwZjBmMGYwZjtcbiAgICB4ID0geCArICh4ID4+IDgpO1xuICAgIHggPSB4ICsgKHggPj4gMTYpO1xuICAgIHJldHVybiB4ICYgMHg3ZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEluKGFycmF5LCBpZHgsIHZhbCwgY2FuRWRpdCkge1xuICAgIHZhciBuZXdBcnJheSA9IGNhbkVkaXQgPyBhcnJheSA6IGFyckNvcHkoYXJyYXkpO1xuICAgIG5ld0FycmF5W2lkeF0gPSB2YWw7XG4gICAgcmV0dXJuIG5ld0FycmF5O1xuICB9XG5cbiAgZnVuY3Rpb24gc3BsaWNlSW4oYXJyYXksIGlkeCwgdmFsLCBjYW5FZGl0KSB7XG4gICAgdmFyIG5ld0xlbiA9IGFycmF5Lmxlbmd0aCArIDE7XG4gICAgaWYgKGNhbkVkaXQgJiYgaWR4ICsgMSA9PT0gbmV3TGVuKSB7XG4gICAgICBhcnJheVtpZHhdID0gdmFsO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cbiAgICB2YXIgbmV3QXJyYXkgPSBuZXcgQXJyYXkobmV3TGVuKTtcbiAgICB2YXIgYWZ0ZXIgPSAwO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBuZXdMZW47IGlpKyspIHtcbiAgICAgIGlmIChpaSA9PT0gaWR4KSB7XG4gICAgICAgIG5ld0FycmF5W2lpXSA9IHZhbDtcbiAgICAgICAgYWZ0ZXIgPSAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0FycmF5W2lpXSA9IGFycmF5W2lpICsgYWZ0ZXJdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3QXJyYXk7XG4gIH1cblxuICBmdW5jdGlvbiBzcGxpY2VPdXQoYXJyYXksIGlkeCwgY2FuRWRpdCkge1xuICAgIHZhciBuZXdMZW4gPSBhcnJheS5sZW5ndGggLSAxO1xuICAgIGlmIChjYW5FZGl0ICYmIGlkeCA9PT0gbmV3TGVuKSB7XG4gICAgICBhcnJheS5wb3AoKTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG4gICAgdmFyIG5ld0FycmF5ID0gbmV3IEFycmF5KG5ld0xlbik7XG4gICAgdmFyIGFmdGVyID0gMDtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbmV3TGVuOyBpaSsrKSB7XG4gICAgICBpZiAoaWkgPT09IGlkeCkge1xuICAgICAgICBhZnRlciA9IDE7XG4gICAgICB9XG4gICAgICBuZXdBcnJheVtpaV0gPSBhcnJheVtpaSArIGFmdGVyXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0FycmF5O1xuICB9XG5cbiAgdmFyIE1BWF9BUlJBWV9NQVBfU0laRSA9IFNJWkUgLyA0O1xuICB2YXIgTUFYX0JJVE1BUF9JTkRFWEVEX1NJWkUgPSBTSVpFIC8gMjtcbiAgdmFyIE1JTl9IQVNIX0FSUkFZX01BUF9TSVpFID0gU0laRSAvIDQ7XG5cbiAgY3JlYXRlQ2xhc3MoTGlzdCwgSW5kZXhlZENvbGxlY3Rpb24pO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIExpc3QodmFsdWUpIHtcbiAgICAgIHZhciBlbXB0eSA9IGVtcHR5TGlzdCgpO1xuICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgICAgfVxuICAgICAgaWYgKGlzTGlzdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXIgPSBJbmRleGVkSXRlcmFibGUodmFsdWUpO1xuICAgICAgdmFyIHNpemUgPSBpdGVyLnNpemU7XG4gICAgICBpZiAoc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgICB9XG4gICAgICBhc3NlcnROb3RJbmZpbml0ZShzaXplKTtcbiAgICAgIGlmIChzaXplID4gMCAmJiBzaXplIDwgU0laRSkge1xuICAgICAgICByZXR1cm4gbWFrZUxpc3QoMCwgc2l6ZSwgU0hJRlQsIG51bGwsIG5ldyBWTm9kZShpdGVyLnRvQXJyYXkoKSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVtcHR5LndpdGhNdXRhdGlvbnMoZnVuY3Rpb24obGlzdCApIHtcbiAgICAgICAgbGlzdC5zZXRTaXplKHNpemUpO1xuICAgICAgICBpdGVyLmZvckVhY2goZnVuY3Rpb24odiwgaSkgIHtyZXR1cm4gbGlzdC5zZXQoaSwgdil9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIExpc3Qub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnTGlzdCBbJywgJ10nKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBBY2Nlc3NcblxuICAgIExpc3QucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLnNpemUpIHtcbiAgICAgICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuICAgICAgfVxuICAgICAgaW5kZXggKz0gdGhpcy5fb3JpZ2luO1xuICAgICAgdmFyIG5vZGUgPSBsaXN0Tm9kZUZvcih0aGlzLCBpbmRleCk7XG4gICAgICByZXR1cm4gbm9kZSAmJiBub2RlLmFycmF5W2luZGV4ICYgTUFTS107XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgICBMaXN0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB1cGRhdGVMaXN0KHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICByZXR1cm4gIXRoaXMuaGFzKGluZGV4KSA/IHRoaXMgOlxuICAgICAgICBpbmRleCA9PT0gMCA/IHRoaXMuc2hpZnQoKSA6XG4gICAgICAgIGluZGV4ID09PSB0aGlzLnNpemUgLSAxID8gdGhpcy5wb3AoKSA6XG4gICAgICAgIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gdGhpcy5fb3JpZ2luID0gdGhpcy5fY2FwYWNpdHkgPSAwO1xuICAgICAgICB0aGlzLl9sZXZlbCA9IFNISUZUO1xuICAgICAgICB0aGlzLl9yb290ID0gdGhpcy5fdGFpbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVtcHR5TGlzdCgpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgdmFyIHZhbHVlcyA9IGFyZ3VtZW50cztcbiAgICAgIHZhciBvbGRTaXplID0gdGhpcy5zaXplO1xuICAgICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbihsaXN0ICkge1xuICAgICAgICBzZXRMaXN0Qm91bmRzKGxpc3QsIDAsIG9sZFNpemUgKyB2YWx1ZXMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHZhbHVlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgICBsaXN0LnNldChvbGRTaXplICsgaWksIHZhbHVlc1tpaV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc2V0TGlzdEJvdW5kcyh0aGlzLCAwLCAtMSk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICB2YXIgdmFsdWVzID0gYXJndW1lbnRzO1xuICAgICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbihsaXN0ICkge1xuICAgICAgICBzZXRMaXN0Qm91bmRzKGxpc3QsIC12YWx1ZXMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHZhbHVlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgICBsaXN0LnNldChpaSwgdmFsdWVzW2lpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNldExpc3RCb3VuZHModGhpcywgMSk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQ29tcG9zaXRpb25cblxuICAgIExpc3QucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24oLyouLi5pdGVycyovKSB7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTGlzdFdpdGgodGhpcywgdW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5tZXJnZVdpdGggPSBmdW5jdGlvbihtZXJnZXIpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiBtZXJnZUludG9MaXN0V2l0aCh0aGlzLCBtZXJnZXIsIGl0ZXJzKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUubWVyZ2VEZWVwID0gZnVuY3Rpb24oLyouLi5pdGVycyovKSB7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTGlzdFdpdGgodGhpcywgZGVlcE1lcmdlcih1bmRlZmluZWQpLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5tZXJnZURlZXBXaXRoID0gZnVuY3Rpb24obWVyZ2VyKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTGlzdFdpdGgodGhpcywgZGVlcE1lcmdlcihtZXJnZXIpLCBpdGVycyk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLnNldFNpemUgPSBmdW5jdGlvbihzaXplKSB7XG4gICAgICByZXR1cm4gc2V0TGlzdEJvdW5kcyh0aGlzLCAwLCBzaXplKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBJdGVyYXRpb25cblxuICAgIExpc3QucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIHNpemUgPSB0aGlzLnNpemU7XG4gICAgICBpZiAod2hvbGVTbGljZShiZWdpbiwgZW5kLCBzaXplKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXRMaXN0Qm91bmRzKFxuICAgICAgICB0aGlzLFxuICAgICAgICByZXNvbHZlQmVnaW4oYmVnaW4sIHNpemUpLFxuICAgICAgICByZXNvbHZlRW5kKGVuZCwgc2l6ZSlcbiAgICAgICk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHZhbHVlcyA9IGl0ZXJhdGVMaXN0KHRoaXMsIHJldmVyc2UpO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlcygpO1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IERPTkUgP1xuICAgICAgICAgIGl0ZXJhdG9yRG9uZSgpIDpcbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGluZGV4KyssIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZXMgPSBpdGVyYXRlTGlzdCh0aGlzLCByZXZlcnNlKTtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlICgodmFsdWUgPSB2YWx1ZXMoKSkgIT09IERPTkUpIHtcbiAgICAgICAgaWYgKGZuKHZhbHVlLCBpbmRleCsrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24ob3duZXJJRCkge1xuICAgICAgaWYgKG93bmVySUQgPT09IHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKCFvd25lcklEKSB7XG4gICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZUxpc3QodGhpcy5fb3JpZ2luLCB0aGlzLl9jYXBhY2l0eSwgdGhpcy5fbGV2ZWwsIHRoaXMuX3Jvb3QsIHRoaXMuX3RhaWwsIG93bmVySUQsIHRoaXMuX19oYXNoKTtcbiAgICB9O1xuXG5cbiAgZnVuY3Rpb24gaXNMaXN0KG1heWJlTGlzdCkge1xuICAgIHJldHVybiAhIShtYXliZUxpc3QgJiYgbWF5YmVMaXN0W0lTX0xJU1RfU0VOVElORUxdKTtcbiAgfVxuXG4gIExpc3QuaXNMaXN0ID0gaXNMaXN0O1xuXG4gIHZhciBJU19MSVNUX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfTElTVF9fQEAnO1xuXG4gIHZhciBMaXN0UHJvdG90eXBlID0gTGlzdC5wcm90b3R5cGU7XG4gIExpc3RQcm90b3R5cGVbSVNfTElTVF9TRU5USU5FTF0gPSB0cnVlO1xuICBMaXN0UHJvdG90eXBlW0RFTEVURV0gPSBMaXN0UHJvdG90eXBlLnJlbW92ZTtcbiAgTGlzdFByb3RvdHlwZS5zZXRJbiA9IE1hcFByb3RvdHlwZS5zZXRJbjtcbiAgTGlzdFByb3RvdHlwZS5kZWxldGVJbiA9XG4gIExpc3RQcm90b3R5cGUucmVtb3ZlSW4gPSBNYXBQcm90b3R5cGUucmVtb3ZlSW47XG4gIExpc3RQcm90b3R5cGUudXBkYXRlID0gTWFwUHJvdG90eXBlLnVwZGF0ZTtcbiAgTGlzdFByb3RvdHlwZS51cGRhdGVJbiA9IE1hcFByb3RvdHlwZS51cGRhdGVJbjtcbiAgTGlzdFByb3RvdHlwZS5tZXJnZUluID0gTWFwUHJvdG90eXBlLm1lcmdlSW47XG4gIExpc3RQcm90b3R5cGUubWVyZ2VEZWVwSW4gPSBNYXBQcm90b3R5cGUubWVyZ2VEZWVwSW47XG4gIExpc3RQcm90b3R5cGUud2l0aE11dGF0aW9ucyA9IE1hcFByb3RvdHlwZS53aXRoTXV0YXRpb25zO1xuICBMaXN0UHJvdG90eXBlLmFzTXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc011dGFibGU7XG4gIExpc3RQcm90b3R5cGUuYXNJbW11dGFibGUgPSBNYXBQcm90b3R5cGUuYXNJbW11dGFibGU7XG4gIExpc3RQcm90b3R5cGUud2FzQWx0ZXJlZCA9IE1hcFByb3RvdHlwZS53YXNBbHRlcmVkO1xuXG5cblxuICAgIGZ1bmN0aW9uIFZOb2RlKGFycmF5LCBvd25lcklEKSB7XG4gICAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG4gICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuICAgIH1cblxuICAgIC8vIFRPRE86IHNlZW1zIGxpa2UgdGhlc2UgbWV0aG9kcyBhcmUgdmVyeSBzaW1pbGFyXG5cbiAgICBWTm9kZS5wcm90b3R5cGUucmVtb3ZlQmVmb3JlID0gZnVuY3Rpb24ob3duZXJJRCwgbGV2ZWwsIGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXggPT09IGxldmVsID8gMSA8PCBsZXZlbCA6IDAgfHwgdGhpcy5hcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgb3JpZ2luSW5kZXggPSAoaW5kZXggPj4+IGxldmVsKSAmIE1BU0s7XG4gICAgICBpZiAob3JpZ2luSW5kZXggPj0gdGhpcy5hcnJheS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWTm9kZShbXSwgb3duZXJJRCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVtb3ZpbmdGaXJzdCA9IG9yaWdpbkluZGV4ID09PSAwO1xuICAgICAgdmFyIG5ld0NoaWxkO1xuICAgICAgaWYgKGxldmVsID4gMCkge1xuICAgICAgICB2YXIgb2xkQ2hpbGQgPSB0aGlzLmFycmF5W29yaWdpbkluZGV4XTtcbiAgICAgICAgbmV3Q2hpbGQgPSBvbGRDaGlsZCAmJiBvbGRDaGlsZC5yZW1vdmVCZWZvcmUob3duZXJJRCwgbGV2ZWwgLSBTSElGVCwgaW5kZXgpO1xuICAgICAgICBpZiAobmV3Q2hpbGQgPT09IG9sZENoaWxkICYmIHJlbW92aW5nRmlyc3QpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHJlbW92aW5nRmlyc3QgJiYgIW5ld0NoaWxkKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIGVkaXRhYmxlID0gZWRpdGFibGVWTm9kZSh0aGlzLCBvd25lcklEKTtcbiAgICAgIGlmICghcmVtb3ZpbmdGaXJzdCkge1xuICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgb3JpZ2luSW5kZXg7IGlpKyspIHtcbiAgICAgICAgICBlZGl0YWJsZS5hcnJheVtpaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChuZXdDaGlsZCkge1xuICAgICAgICBlZGl0YWJsZS5hcnJheVtvcmlnaW5JbmRleF0gPSBuZXdDaGlsZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlZGl0YWJsZTtcbiAgICB9O1xuXG4gICAgVk5vZGUucHJvdG90eXBlLnJlbW92ZUFmdGVyID0gZnVuY3Rpb24ob3duZXJJRCwgbGV2ZWwsIGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXggPT09IGxldmVsID8gMSA8PCBsZXZlbCA6IDAgfHwgdGhpcy5hcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgc2l6ZUluZGV4ID0gKChpbmRleCAtIDEpID4+PiBsZXZlbCkgJiBNQVNLO1xuICAgICAgaWYgKHNpemVJbmRleCA+PSB0aGlzLmFycmF5Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciByZW1vdmluZ0xhc3QgPSBzaXplSW5kZXggPT09IHRoaXMuYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBuZXdDaGlsZDtcbiAgICAgIGlmIChsZXZlbCA+IDApIHtcbiAgICAgICAgdmFyIG9sZENoaWxkID0gdGhpcy5hcnJheVtzaXplSW5kZXhdO1xuICAgICAgICBuZXdDaGlsZCA9IG9sZENoaWxkICYmIG9sZENoaWxkLnJlbW92ZUFmdGVyKG93bmVySUQsIGxldmVsIC0gU0hJRlQsIGluZGV4KTtcbiAgICAgICAgaWYgKG5ld0NoaWxkID09PSBvbGRDaGlsZCAmJiByZW1vdmluZ0xhc3QpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHJlbW92aW5nTGFzdCAmJiAhbmV3Q2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgZWRpdGFibGUgPSBlZGl0YWJsZVZOb2RlKHRoaXMsIG93bmVySUQpO1xuICAgICAgaWYgKCFyZW1vdmluZ0xhc3QpIHtcbiAgICAgICAgZWRpdGFibGUuYXJyYXkucG9wKCk7XG4gICAgICB9XG4gICAgICBpZiAobmV3Q2hpbGQpIHtcbiAgICAgICAgZWRpdGFibGUuYXJyYXlbc2l6ZUluZGV4XSA9IG5ld0NoaWxkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVkaXRhYmxlO1xuICAgIH07XG5cblxuXG4gIHZhciBET05FID0ge307XG5cbiAgZnVuY3Rpb24gaXRlcmF0ZUxpc3QobGlzdCwgcmV2ZXJzZSkge1xuICAgIHZhciBsZWZ0ID0gbGlzdC5fb3JpZ2luO1xuICAgIHZhciByaWdodCA9IGxpc3QuX2NhcGFjaXR5O1xuICAgIHZhciB0YWlsUG9zID0gZ2V0VGFpbE9mZnNldChyaWdodCk7XG4gICAgdmFyIHRhaWwgPSBsaXN0Ll90YWlsO1xuXG4gICAgcmV0dXJuIGl0ZXJhdGVOb2RlT3JMZWFmKGxpc3QuX3Jvb3QsIGxpc3QuX2xldmVsLCAwKTtcblxuICAgIGZ1bmN0aW9uIGl0ZXJhdGVOb2RlT3JMZWFmKG5vZGUsIGxldmVsLCBvZmZzZXQpIHtcbiAgICAgIHJldHVybiBsZXZlbCA9PT0gMCA/XG4gICAgICAgIGl0ZXJhdGVMZWFmKG5vZGUsIG9mZnNldCkgOlxuICAgICAgICBpdGVyYXRlTm9kZShub2RlLCBsZXZlbCwgb2Zmc2V0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpdGVyYXRlTGVhZihub2RlLCBvZmZzZXQpIHtcbiAgICAgIHZhciBhcnJheSA9IG9mZnNldCA9PT0gdGFpbFBvcyA/IHRhaWwgJiYgdGFpbC5hcnJheSA6IG5vZGUgJiYgbm9kZS5hcnJheTtcbiAgICAgIHZhciBmcm9tID0gb2Zmc2V0ID4gbGVmdCA/IDAgOiBsZWZ0IC0gb2Zmc2V0O1xuICAgICAgdmFyIHRvID0gcmlnaHQgLSBvZmZzZXQ7XG4gICAgICBpZiAodG8gPiBTSVpFKSB7XG4gICAgICAgIHRvID0gU0laRTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpICB7XG4gICAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICAgIHJldHVybiBET05FO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpZHggPSByZXZlcnNlID8gLS10byA6IGZyb20rKztcbiAgICAgICAgcmV0dXJuIGFycmF5ICYmIGFycmF5W2lkeF07XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGl0ZXJhdGVOb2RlKG5vZGUsIGxldmVsLCBvZmZzZXQpIHtcbiAgICAgIHZhciB2YWx1ZXM7XG4gICAgICB2YXIgYXJyYXkgPSBub2RlICYmIG5vZGUuYXJyYXk7XG4gICAgICB2YXIgZnJvbSA9IG9mZnNldCA+IGxlZnQgPyAwIDogKGxlZnQgLSBvZmZzZXQpID4+IGxldmVsO1xuICAgICAgdmFyIHRvID0gKChyaWdodCAtIG9mZnNldCkgPj4gbGV2ZWwpICsgMTtcbiAgICAgIGlmICh0byA+IFNJWkUpIHtcbiAgICAgICAgdG8gPSBTSVpFO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlcygpO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBET05FKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlcyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICAgICAgcmV0dXJuIERPTkU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpZHggPSByZXZlcnNlID8gLS10byA6IGZyb20rKztcbiAgICAgICAgICB2YWx1ZXMgPSBpdGVyYXRlTm9kZU9yTGVhZihcbiAgICAgICAgICAgIGFycmF5ICYmIGFycmF5W2lkeF0sIGxldmVsIC0gU0hJRlQsIG9mZnNldCArIChpZHggPDwgbGV2ZWwpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VMaXN0KG9yaWdpbiwgY2FwYWNpdHksIGxldmVsLCByb290LCB0YWlsLCBvd25lcklELCBoYXNoKSB7XG4gICAgdmFyIGxpc3QgPSBPYmplY3QuY3JlYXRlKExpc3RQcm90b3R5cGUpO1xuICAgIGxpc3Quc2l6ZSA9IGNhcGFjaXR5IC0gb3JpZ2luO1xuICAgIGxpc3QuX29yaWdpbiA9IG9yaWdpbjtcbiAgICBsaXN0Ll9jYXBhY2l0eSA9IGNhcGFjaXR5O1xuICAgIGxpc3QuX2xldmVsID0gbGV2ZWw7XG4gICAgbGlzdC5fcm9vdCA9IHJvb3Q7XG4gICAgbGlzdC5fdGFpbCA9IHRhaWw7XG4gICAgbGlzdC5fX293bmVySUQgPSBvd25lcklEO1xuICAgIGxpc3QuX19oYXNoID0gaGFzaDtcbiAgICBsaXN0Ll9fYWx0ZXJlZCA9IGZhbHNlO1xuICAgIHJldHVybiBsaXN0O1xuICB9XG5cbiAgdmFyIEVNUFRZX0xJU1Q7XG4gIGZ1bmN0aW9uIGVtcHR5TGlzdCgpIHtcbiAgICByZXR1cm4gRU1QVFlfTElTVCB8fCAoRU1QVFlfTElTVCA9IG1ha2VMaXN0KDAsIDAsIFNISUZUKSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVMaXN0KGxpc3QsIGluZGV4LCB2YWx1ZSkge1xuICAgIGluZGV4ID0gd3JhcEluZGV4KGxpc3QsIGluZGV4KTtcblxuICAgIGlmIChpbmRleCA+PSBsaXN0LnNpemUgfHwgaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm4gbGlzdC53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKGxpc3QgKSB7XG4gICAgICAgIGluZGV4IDwgMCA/XG4gICAgICAgICAgc2V0TGlzdEJvdW5kcyhsaXN0LCBpbmRleCkuc2V0KDAsIHZhbHVlKSA6XG4gICAgICAgICAgc2V0TGlzdEJvdW5kcyhsaXN0LCAwLCBpbmRleCArIDEpLnNldChpbmRleCwgdmFsdWUpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpbmRleCArPSBsaXN0Ll9vcmlnaW47XG5cbiAgICB2YXIgbmV3VGFpbCA9IGxpc3QuX3RhaWw7XG4gICAgdmFyIG5ld1Jvb3QgPSBsaXN0Ll9yb290O1xuICAgIHZhciBkaWRBbHRlciA9IE1ha2VSZWYoRElEX0FMVEVSKTtcbiAgICBpZiAoaW5kZXggPj0gZ2V0VGFpbE9mZnNldChsaXN0Ll9jYXBhY2l0eSkpIHtcbiAgICAgIG5ld1RhaWwgPSB1cGRhdGVWTm9kZShuZXdUYWlsLCBsaXN0Ll9fb3duZXJJRCwgMCwgaW5kZXgsIHZhbHVlLCBkaWRBbHRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1Jvb3QgPSB1cGRhdGVWTm9kZShuZXdSb290LCBsaXN0Ll9fb3duZXJJRCwgbGlzdC5fbGV2ZWwsIGluZGV4LCB2YWx1ZSwgZGlkQWx0ZXIpO1xuICAgIH1cblxuICAgIGlmICghZGlkQWx0ZXIudmFsdWUpIHtcbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cblxuICAgIGlmIChsaXN0Ll9fb3duZXJJRCkge1xuICAgICAgbGlzdC5fcm9vdCA9IG5ld1Jvb3Q7XG4gICAgICBsaXN0Ll90YWlsID0gbmV3VGFpbDtcbiAgICAgIGxpc3QuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgbGlzdC5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuICAgIHJldHVybiBtYWtlTGlzdChsaXN0Ll9vcmlnaW4sIGxpc3QuX2NhcGFjaXR5LCBsaXN0Ll9sZXZlbCwgbmV3Um9vdCwgbmV3VGFpbCk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVWTm9kZShub2RlLCBvd25lcklELCBsZXZlbCwgaW5kZXgsIHZhbHVlLCBkaWRBbHRlcikge1xuICAgIHZhciBpZHggPSAoaW5kZXggPj4+IGxldmVsKSAmIE1BU0s7XG4gICAgdmFyIG5vZGVIYXMgPSBub2RlICYmIGlkeCA8IG5vZGUuYXJyYXkubGVuZ3RoO1xuICAgIGlmICghbm9kZUhhcyAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICB2YXIgbmV3Tm9kZTtcblxuICAgIGlmIChsZXZlbCA+IDApIHtcbiAgICAgIHZhciBsb3dlck5vZGUgPSBub2RlICYmIG5vZGUuYXJyYXlbaWR4XTtcbiAgICAgIHZhciBuZXdMb3dlck5vZGUgPSB1cGRhdGVWTm9kZShsb3dlck5vZGUsIG93bmVySUQsIGxldmVsIC0gU0hJRlQsIGluZGV4LCB2YWx1ZSwgZGlkQWx0ZXIpO1xuICAgICAgaWYgKG5ld0xvd2VyTm9kZSA9PT0gbG93ZXJOb2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgICAgbmV3Tm9kZSA9IGVkaXRhYmxlVk5vZGUobm9kZSwgb3duZXJJRCk7XG4gICAgICBuZXdOb2RlLmFycmF5W2lkeF0gPSBuZXdMb3dlck5vZGU7XG4gICAgICByZXR1cm4gbmV3Tm9kZTtcbiAgICB9XG5cbiAgICBpZiAobm9kZUhhcyAmJiBub2RlLmFycmF5W2lkeF0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuXG4gICAgbmV3Tm9kZSA9IGVkaXRhYmxlVk5vZGUobm9kZSwgb3duZXJJRCk7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgaWR4ID09PSBuZXdOb2RlLmFycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICAgIG5ld05vZGUuYXJyYXkucG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld05vZGUuYXJyYXlbaWR4XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbmV3Tm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVkaXRhYmxlVk5vZGUobm9kZSwgb3duZXJJRCkge1xuICAgIGlmIChvd25lcklEICYmIG5vZGUgJiYgb3duZXJJRCA9PT0gbm9kZS5vd25lcklEKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlID8gbm9kZS5hcnJheS5zbGljZSgpIDogW10sIG93bmVySUQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdE5vZGVGb3IobGlzdCwgcmF3SW5kZXgpIHtcbiAgICBpZiAocmF3SW5kZXggPj0gZ2V0VGFpbE9mZnNldChsaXN0Ll9jYXBhY2l0eSkpIHtcbiAgICAgIHJldHVybiBsaXN0Ll90YWlsO1xuICAgIH1cbiAgICBpZiAocmF3SW5kZXggPCAxIDw8IChsaXN0Ll9sZXZlbCArIFNISUZUKSkge1xuICAgICAgdmFyIG5vZGUgPSBsaXN0Ll9yb290O1xuICAgICAgdmFyIGxldmVsID0gbGlzdC5fbGV2ZWw7XG4gICAgICB3aGlsZSAobm9kZSAmJiBsZXZlbCA+IDApIHtcbiAgICAgICAgbm9kZSA9IG5vZGUuYXJyYXlbKHJhd0luZGV4ID4+PiBsZXZlbCkgJiBNQVNLXTtcbiAgICAgICAgbGV2ZWwgLT0gU0hJRlQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRMaXN0Qm91bmRzKGxpc3QsIGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgb3duZXIgPSBsaXN0Ll9fb3duZXJJRCB8fCBuZXcgT3duZXJJRCgpO1xuICAgIHZhciBvbGRPcmlnaW4gPSBsaXN0Ll9vcmlnaW47XG4gICAgdmFyIG9sZENhcGFjaXR5ID0gbGlzdC5fY2FwYWNpdHk7XG4gICAgdmFyIG5ld09yaWdpbiA9IG9sZE9yaWdpbiArIGJlZ2luO1xuICAgIHZhciBuZXdDYXBhY2l0eSA9IGVuZCA9PT0gdW5kZWZpbmVkID8gb2xkQ2FwYWNpdHkgOiBlbmQgPCAwID8gb2xkQ2FwYWNpdHkgKyBlbmQgOiBvbGRPcmlnaW4gKyBlbmQ7XG4gICAgaWYgKG5ld09yaWdpbiA9PT0gb2xkT3JpZ2luICYmIG5ld0NhcGFjaXR5ID09PSBvbGRDYXBhY2l0eSkge1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgLy8gSWYgaXQncyBnb2luZyB0byBlbmQgYWZ0ZXIgaXQgc3RhcnRzLCBpdCdzIGVtcHR5LlxuICAgIGlmIChuZXdPcmlnaW4gPj0gbmV3Q2FwYWNpdHkpIHtcbiAgICAgIHJldHVybiBsaXN0LmNsZWFyKCk7XG4gICAgfVxuXG4gICAgdmFyIG5ld0xldmVsID0gbGlzdC5fbGV2ZWw7XG4gICAgdmFyIG5ld1Jvb3QgPSBsaXN0Ll9yb290O1xuXG4gICAgLy8gTmV3IG9yaWdpbiBtaWdodCByZXF1aXJlIGNyZWF0aW5nIGEgaGlnaGVyIHJvb3QuXG4gICAgdmFyIG9mZnNldFNoaWZ0ID0gMDtcbiAgICB3aGlsZSAobmV3T3JpZ2luICsgb2Zmc2V0U2hpZnQgPCAwKSB7XG4gICAgICBuZXdSb290ID0gbmV3IFZOb2RlKG5ld1Jvb3QgJiYgbmV3Um9vdC5hcnJheS5sZW5ndGggPyBbdW5kZWZpbmVkLCBuZXdSb290XSA6IFtdLCBvd25lcik7XG4gICAgICBuZXdMZXZlbCArPSBTSElGVDtcbiAgICAgIG9mZnNldFNoaWZ0ICs9IDEgPDwgbmV3TGV2ZWw7XG4gICAgfVxuICAgIGlmIChvZmZzZXRTaGlmdCkge1xuICAgICAgbmV3T3JpZ2luICs9IG9mZnNldFNoaWZ0O1xuICAgICAgb2xkT3JpZ2luICs9IG9mZnNldFNoaWZ0O1xuICAgICAgbmV3Q2FwYWNpdHkgKz0gb2Zmc2V0U2hpZnQ7XG4gICAgICBvbGRDYXBhY2l0eSArPSBvZmZzZXRTaGlmdDtcbiAgICB9XG5cbiAgICB2YXIgb2xkVGFpbE9mZnNldCA9IGdldFRhaWxPZmZzZXQob2xkQ2FwYWNpdHkpO1xuICAgIHZhciBuZXdUYWlsT2Zmc2V0ID0gZ2V0VGFpbE9mZnNldChuZXdDYXBhY2l0eSk7XG5cbiAgICAvLyBOZXcgc2l6ZSBtaWdodCByZXF1aXJlIGNyZWF0aW5nIGEgaGlnaGVyIHJvb3QuXG4gICAgd2hpbGUgKG5ld1RhaWxPZmZzZXQgPj0gMSA8PCAobmV3TGV2ZWwgKyBTSElGVCkpIHtcbiAgICAgIG5ld1Jvb3QgPSBuZXcgVk5vZGUobmV3Um9vdCAmJiBuZXdSb290LmFycmF5Lmxlbmd0aCA/IFtuZXdSb290XSA6IFtdLCBvd25lcik7XG4gICAgICBuZXdMZXZlbCArPSBTSElGVDtcbiAgICB9XG5cbiAgICAvLyBMb2NhdGUgb3IgY3JlYXRlIHRoZSBuZXcgdGFpbC5cbiAgICB2YXIgb2xkVGFpbCA9IGxpc3QuX3RhaWw7XG4gICAgdmFyIG5ld1RhaWwgPSBuZXdUYWlsT2Zmc2V0IDwgb2xkVGFpbE9mZnNldCA/XG4gICAgICBsaXN0Tm9kZUZvcihsaXN0LCBuZXdDYXBhY2l0eSAtIDEpIDpcbiAgICAgIG5ld1RhaWxPZmZzZXQgPiBvbGRUYWlsT2Zmc2V0ID8gbmV3IFZOb2RlKFtdLCBvd25lcikgOiBvbGRUYWlsO1xuXG4gICAgLy8gTWVyZ2UgVGFpbCBpbnRvIHRyZWUuXG4gICAgaWYgKG9sZFRhaWwgJiYgbmV3VGFpbE9mZnNldCA+IG9sZFRhaWxPZmZzZXQgJiYgbmV3T3JpZ2luIDwgb2xkQ2FwYWNpdHkgJiYgb2xkVGFpbC5hcnJheS5sZW5ndGgpIHtcbiAgICAgIG5ld1Jvb3QgPSBlZGl0YWJsZVZOb2RlKG5ld1Jvb3QsIG93bmVyKTtcbiAgICAgIHZhciBub2RlID0gbmV3Um9vdDtcbiAgICAgIGZvciAodmFyIGxldmVsID0gbmV3TGV2ZWw7IGxldmVsID4gU0hJRlQ7IGxldmVsIC09IFNISUZUKSB7XG4gICAgICAgIHZhciBpZHggPSAob2xkVGFpbE9mZnNldCA+Pj4gbGV2ZWwpICYgTUFTSztcbiAgICAgICAgbm9kZSA9IG5vZGUuYXJyYXlbaWR4XSA9IGVkaXRhYmxlVk5vZGUobm9kZS5hcnJheVtpZHhdLCBvd25lcik7XG4gICAgICB9XG4gICAgICBub2RlLmFycmF5WyhvbGRUYWlsT2Zmc2V0ID4+PiBTSElGVCkgJiBNQVNLXSA9IG9sZFRhaWw7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHNpemUgaGFzIGJlZW4gcmVkdWNlZCwgdGhlcmUncyBhIGNoYW5jZSB0aGUgdGFpbCBuZWVkcyB0byBiZSB0cmltbWVkLlxuICAgIGlmIChuZXdDYXBhY2l0eSA8IG9sZENhcGFjaXR5KSB7XG4gICAgICBuZXdUYWlsID0gbmV3VGFpbCAmJiBuZXdUYWlsLnJlbW92ZUFmdGVyKG93bmVyLCAwLCBuZXdDYXBhY2l0eSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIG5ldyBvcmlnaW4gaXMgd2l0aGluIHRoZSB0YWlsLCB0aGVuIHdlIGRvIG5vdCBuZWVkIGEgcm9vdC5cbiAgICBpZiAobmV3T3JpZ2luID49IG5ld1RhaWxPZmZzZXQpIHtcbiAgICAgIG5ld09yaWdpbiAtPSBuZXdUYWlsT2Zmc2V0O1xuICAgICAgbmV3Q2FwYWNpdHkgLT0gbmV3VGFpbE9mZnNldDtcbiAgICAgIG5ld0xldmVsID0gU0hJRlQ7XG4gICAgICBuZXdSb290ID0gbnVsbDtcbiAgICAgIG5ld1RhaWwgPSBuZXdUYWlsICYmIG5ld1RhaWwucmVtb3ZlQmVmb3JlKG93bmVyLCAwLCBuZXdPcmlnaW4pO1xuXG4gICAgLy8gT3RoZXJ3aXNlLCBpZiB0aGUgcm9vdCBoYXMgYmVlbiB0cmltbWVkLCBnYXJiYWdlIGNvbGxlY3QuXG4gICAgfSBlbHNlIGlmIChuZXdPcmlnaW4gPiBvbGRPcmlnaW4gfHwgbmV3VGFpbE9mZnNldCA8IG9sZFRhaWxPZmZzZXQpIHtcbiAgICAgIG9mZnNldFNoaWZ0ID0gMDtcblxuICAgICAgLy8gSWRlbnRpZnkgdGhlIG5ldyB0b3Agcm9vdCBub2RlIG9mIHRoZSBzdWJ0cmVlIG9mIHRoZSBvbGQgcm9vdC5cbiAgICAgIHdoaWxlIChuZXdSb290KSB7XG4gICAgICAgIHZhciBiZWdpbkluZGV4ID0gKG5ld09yaWdpbiA+Pj4gbmV3TGV2ZWwpICYgTUFTSztcbiAgICAgICAgaWYgKGJlZ2luSW5kZXggIT09IChuZXdUYWlsT2Zmc2V0ID4+PiBuZXdMZXZlbCkgJiBNQVNLKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJlZ2luSW5kZXgpIHtcbiAgICAgICAgICBvZmZzZXRTaGlmdCArPSAoMSA8PCBuZXdMZXZlbCkgKiBiZWdpbkluZGV4O1xuICAgICAgICB9XG4gICAgICAgIG5ld0xldmVsIC09IFNISUZUO1xuICAgICAgICBuZXdSb290ID0gbmV3Um9vdC5hcnJheVtiZWdpbkluZGV4XTtcbiAgICAgIH1cblxuICAgICAgLy8gVHJpbSB0aGUgbmV3IHNpZGVzIG9mIHRoZSBuZXcgcm9vdC5cbiAgICAgIGlmIChuZXdSb290ICYmIG5ld09yaWdpbiA+IG9sZE9yaWdpbikge1xuICAgICAgICBuZXdSb290ID0gbmV3Um9vdC5yZW1vdmVCZWZvcmUob3duZXIsIG5ld0xldmVsLCBuZXdPcmlnaW4gLSBvZmZzZXRTaGlmdCk7XG4gICAgICB9XG4gICAgICBpZiAobmV3Um9vdCAmJiBuZXdUYWlsT2Zmc2V0IDwgb2xkVGFpbE9mZnNldCkge1xuICAgICAgICBuZXdSb290ID0gbmV3Um9vdC5yZW1vdmVBZnRlcihvd25lciwgbmV3TGV2ZWwsIG5ld1RhaWxPZmZzZXQgLSBvZmZzZXRTaGlmdCk7XG4gICAgICB9XG4gICAgICBpZiAob2Zmc2V0U2hpZnQpIHtcbiAgICAgICAgbmV3T3JpZ2luIC09IG9mZnNldFNoaWZ0O1xuICAgICAgICBuZXdDYXBhY2l0eSAtPSBvZmZzZXRTaGlmdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobGlzdC5fX293bmVySUQpIHtcbiAgICAgIGxpc3Quc2l6ZSA9IG5ld0NhcGFjaXR5IC0gbmV3T3JpZ2luO1xuICAgICAgbGlzdC5fb3JpZ2luID0gbmV3T3JpZ2luO1xuICAgICAgbGlzdC5fY2FwYWNpdHkgPSBuZXdDYXBhY2l0eTtcbiAgICAgIGxpc3QuX2xldmVsID0gbmV3TGV2ZWw7XG4gICAgICBsaXN0Ll9yb290ID0gbmV3Um9vdDtcbiAgICAgIGxpc3QuX3RhaWwgPSBuZXdUYWlsO1xuICAgICAgbGlzdC5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICBsaXN0Ll9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG4gICAgcmV0dXJuIG1ha2VMaXN0KG5ld09yaWdpbiwgbmV3Q2FwYWNpdHksIG5ld0xldmVsLCBuZXdSb290LCBuZXdUYWlsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlSW50b0xpc3RXaXRoKGxpc3QsIG1lcmdlciwgaXRlcmFibGVzKSB7XG4gICAgdmFyIGl0ZXJzID0gW107XG4gICAgdmFyIG1heFNpemUgPSAwO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBpdGVyYWJsZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpdGVyYWJsZXNbaWldO1xuICAgICAgdmFyIGl0ZXIgPSBJbmRleGVkSXRlcmFibGUodmFsdWUpO1xuICAgICAgaWYgKGl0ZXIuc2l6ZSA+IG1heFNpemUpIHtcbiAgICAgICAgbWF4U2l6ZSA9IGl0ZXIuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNJdGVyYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgaXRlciA9IGl0ZXIubWFwKGZ1bmN0aW9uKHYgKSB7cmV0dXJuIGZyb21KUyh2KX0pO1xuICAgICAgfVxuICAgICAgaXRlcnMucHVzaChpdGVyKTtcbiAgICB9XG4gICAgaWYgKG1heFNpemUgPiBsaXN0LnNpemUpIHtcbiAgICAgIGxpc3QgPSBsaXN0LnNldFNpemUobWF4U2l6ZSk7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZUludG9Db2xsZWN0aW9uV2l0aChsaXN0LCBtZXJnZXIsIGl0ZXJzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRhaWxPZmZzZXQoc2l6ZSkge1xuICAgIHJldHVybiBzaXplIDwgU0laRSA/IDAgOiAoKChzaXplIC0gMSkgPj4+IFNISUZUKSA8PCBTSElGVCk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhPcmRlcmVkTWFwLCBNYXApO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIE9yZGVyZWRNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlPcmRlcmVkTWFwKCkgOlxuICAgICAgICBpc09yZGVyZWRNYXAodmFsdWUpID8gdmFsdWUgOlxuICAgICAgICBlbXB0eU9yZGVyZWRNYXAoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKG1hcCApIHtcbiAgICAgICAgICB2YXIgaXRlciA9IEtleWVkSXRlcmFibGUodmFsdWUpO1xuICAgICAgICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG4gICAgICAgICAgaXRlci5mb3JFYWNoKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIG1hcC5zZXQoaywgdil9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgT3JkZXJlZE1hcC5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdPcmRlcmVkTWFwIHsnLCAnfScpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaywgbm90U2V0VmFsdWUpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuX21hcC5nZXQoayk7XG4gICAgICByZXR1cm4gaW5kZXggIT09IHVuZGVmaW5lZCA/IHRoaXMuX2xpc3QuZ2V0KGluZGV4KVsxXSA6IG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgICAgdGhpcy5fbWFwLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX2xpc3QuY2xlYXIoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHlPcmRlcmVkTWFwKCk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgIHJldHVybiB1cGRhdGVPcmRlcmVkTWFwKHRoaXMsIGssIHYpO1xuICAgIH07XG5cbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihrKSB7XG4gICAgICByZXR1cm4gdXBkYXRlT3JkZXJlZE1hcCh0aGlzLCBrLCBOT1RfU0VUKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUud2FzQWx0ZXJlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX21hcC53YXNBbHRlcmVkKCkgfHwgdGhpcy5fbGlzdC53YXNBbHRlcmVkKCk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICByZXR1cm4gdGhpcy5fbGlzdC5fX2l0ZXJhdGUoXG4gICAgICAgIGZ1bmN0aW9uKGVudHJ5ICkge3JldHVybiBlbnRyeSAmJiBmbihlbnRyeVsxXSwgZW50cnlbMF0sIHRoaXMkMCl9LFxuICAgICAgICByZXZlcnNlXG4gICAgICApO1xuICAgIH07XG5cbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xpc3QuZnJvbUVudHJ5U2VxKCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcbiAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAuX19lbnN1cmVPd25lcihvd25lcklEKTtcbiAgICAgIHZhciBuZXdMaXN0ID0gdGhpcy5fbGlzdC5fX2Vuc3VyZU93bmVyKG93bmVySUQpO1xuICAgICAgaWYgKCFvd25lcklEKSB7XG4gICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgdGhpcy5fbWFwID0gbmV3TWFwO1xuICAgICAgICB0aGlzLl9saXN0ID0gbmV3TGlzdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZU9yZGVyZWRNYXAobmV3TWFwLCBuZXdMaXN0LCBvd25lcklELCB0aGlzLl9faGFzaCk7XG4gICAgfTtcblxuXG4gIGZ1bmN0aW9uIGlzT3JkZXJlZE1hcChtYXliZU9yZGVyZWRNYXApIHtcbiAgICByZXR1cm4gaXNNYXAobWF5YmVPcmRlcmVkTWFwKSAmJiBpc09yZGVyZWQobWF5YmVPcmRlcmVkTWFwKTtcbiAgfVxuXG4gIE9yZGVyZWRNYXAuaXNPcmRlcmVkTWFwID0gaXNPcmRlcmVkTWFwO1xuXG4gIE9yZGVyZWRNYXAucHJvdG90eXBlW0lTX09SREVSRURfU0VOVElORUxdID0gdHJ1ZTtcbiAgT3JkZXJlZE1hcC5wcm90b3R5cGVbREVMRVRFXSA9IE9yZGVyZWRNYXAucHJvdG90eXBlLnJlbW92ZTtcblxuXG5cbiAgZnVuY3Rpb24gbWFrZU9yZGVyZWRNYXAobWFwLCBsaXN0LCBvd25lcklELCBoYXNoKSB7XG4gICAgdmFyIG9tYXAgPSBPYmplY3QuY3JlYXRlKE9yZGVyZWRNYXAucHJvdG90eXBlKTtcbiAgICBvbWFwLnNpemUgPSBtYXAgPyBtYXAuc2l6ZSA6IDA7XG4gICAgb21hcC5fbWFwID0gbWFwO1xuICAgIG9tYXAuX2xpc3QgPSBsaXN0O1xuICAgIG9tYXAuX19vd25lcklEID0gb3duZXJJRDtcbiAgICBvbWFwLl9faGFzaCA9IGhhc2g7XG4gICAgcmV0dXJuIG9tYXA7XG4gIH1cblxuICB2YXIgRU1QVFlfT1JERVJFRF9NQVA7XG4gIGZ1bmN0aW9uIGVtcHR5T3JkZXJlZE1hcCgpIHtcbiAgICByZXR1cm4gRU1QVFlfT1JERVJFRF9NQVAgfHwgKEVNUFRZX09SREVSRURfTUFQID0gbWFrZU9yZGVyZWRNYXAoZW1wdHlNYXAoKSwgZW1wdHlMaXN0KCkpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU9yZGVyZWRNYXAob21hcCwgaywgdikge1xuICAgIHZhciBtYXAgPSBvbWFwLl9tYXA7XG4gICAgdmFyIGxpc3QgPSBvbWFwLl9saXN0O1xuICAgIHZhciBpID0gbWFwLmdldChrKTtcbiAgICB2YXIgaGFzID0gaSAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBuZXdNYXA7XG4gICAgdmFyIG5ld0xpc3Q7XG4gICAgaWYgKHYgPT09IE5PVF9TRVQpIHsgLy8gcmVtb3ZlZFxuICAgICAgaWYgKCFoYXMpIHtcbiAgICAgICAgcmV0dXJuIG9tYXA7XG4gICAgICB9XG4gICAgICBpZiAobGlzdC5zaXplID49IFNJWkUgJiYgbGlzdC5zaXplID49IG1hcC5zaXplICogMikge1xuICAgICAgICBuZXdMaXN0ID0gbGlzdC5maWx0ZXIoZnVuY3Rpb24oZW50cnksIGlkeCkgIHtyZXR1cm4gZW50cnkgIT09IHVuZGVmaW5lZCAmJiBpICE9PSBpZHh9KTtcbiAgICAgICAgbmV3TWFwID0gbmV3TGlzdC50b0tleWVkU2VxKCkubWFwKGZ1bmN0aW9uKGVudHJ5ICkge3JldHVybiBlbnRyeVswXX0pLmZsaXAoKS50b01hcCgpO1xuICAgICAgICBpZiAob21hcC5fX293bmVySUQpIHtcbiAgICAgICAgICBuZXdNYXAuX19vd25lcklEID0gbmV3TGlzdC5fX293bmVySUQgPSBvbWFwLl9fb3duZXJJRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3TWFwID0gbWFwLnJlbW92ZShrKTtcbiAgICAgICAgbmV3TGlzdCA9IGkgPT09IGxpc3Quc2l6ZSAtIDEgPyBsaXN0LnBvcCgpIDogbGlzdC5zZXQoaSwgdW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcykge1xuICAgICAgICBpZiAodiA9PT0gbGlzdC5nZXQoaSlbMV0pIHtcbiAgICAgICAgICByZXR1cm4gb21hcDtcbiAgICAgICAgfVxuICAgICAgICBuZXdNYXAgPSBtYXA7XG4gICAgICAgIG5ld0xpc3QgPSBsaXN0LnNldChpLCBbaywgdl0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3TWFwID0gbWFwLnNldChrLCBsaXN0LnNpemUpO1xuICAgICAgICBuZXdMaXN0ID0gbGlzdC5zZXQobGlzdC5zaXplLCBbaywgdl0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob21hcC5fX293bmVySUQpIHtcbiAgICAgIG9tYXAuc2l6ZSA9IG5ld01hcC5zaXplO1xuICAgICAgb21hcC5fbWFwID0gbmV3TWFwO1xuICAgICAgb21hcC5fbGlzdCA9IG5ld0xpc3Q7XG4gICAgICBvbWFwLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvbWFwO1xuICAgIH1cbiAgICByZXR1cm4gbWFrZU9yZGVyZWRNYXAobmV3TWFwLCBuZXdMaXN0KTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFN0YWNrLCBJbmRleGVkQ29sbGVjdGlvbik7XG5cbiAgICAvLyBAcHJhZ21hIENvbnN0cnVjdGlvblxuXG4gICAgZnVuY3Rpb24gU3RhY2sodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlTdGFjaygpIDpcbiAgICAgICAgaXNTdGFjayh2YWx1ZSkgPyB2YWx1ZSA6XG4gICAgICAgIGVtcHR5U3RhY2soKS51bnNoaWZ0QWxsKHZhbHVlKTtcbiAgICB9XG5cbiAgICBTdGFjay5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnU3RhY2sgWycsICddJyk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQWNjZXNzXG5cbiAgICBTdGFjay5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaW5kZXgsIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgICB3aGlsZSAoaGVhZCAmJiBpbmRleC0tKSB7XG4gICAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGVhZCA/IGhlYWQudmFsdWUgOiBub3RTZXRWYWx1ZTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9oZWFkICYmIHRoaXMuX2hlYWQudmFsdWU7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgICBTdGFjay5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1NpemUgPSB0aGlzLnNpemUgKyBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgICAgZm9yICh2YXIgaWkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaWkgPj0gMDsgaWktLSkge1xuICAgICAgICBoZWFkID0ge1xuICAgICAgICAgIHZhbHVlOiBhcmd1bWVudHNbaWldLFxuICAgICAgICAgIG5leHQ6IGhlYWRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICB0aGlzLnNpemUgPSBuZXdTaXplO1xuICAgICAgICB0aGlzLl9oZWFkID0gaGVhZDtcbiAgICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZVN0YWNrKG5ld1NpemUsIGhlYWQpO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUucHVzaEFsbCA9IGZ1bmN0aW9uKGl0ZXIpIHtcbiAgICAgIGl0ZXIgPSBJbmRleGVkSXRlcmFibGUoaXRlcik7XG4gICAgICBpZiAoaXRlci5zaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcbiAgICAgIHZhciBuZXdTaXplID0gdGhpcy5zaXplO1xuICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgICAgaXRlci5yZXZlcnNlKCkuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSApIHtcbiAgICAgICAgbmV3U2l6ZSsrO1xuICAgICAgICBoZWFkID0ge1xuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBuZXh0OiBoZWFkXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICB0aGlzLnNpemUgPSBuZXdTaXplO1xuICAgICAgICB0aGlzLl9oZWFkID0gaGVhZDtcbiAgICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZVN0YWNrKG5ld1NpemUsIGhlYWQpO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zbGljZSgxKTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS51bnNoaWZ0QWxsID0gZnVuY3Rpb24oaXRlcikge1xuICAgICAgcmV0dXJuIHRoaXMucHVzaEFsbChpdGVyKTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5wb3AuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuX2hlYWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVtcHR5U3RhY2soKTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgaWYgKHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgdGhpcy5zaXplKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciByZXNvbHZlZEJlZ2luID0gcmVzb2x2ZUJlZ2luKGJlZ2luLCB0aGlzLnNpemUpO1xuICAgICAgdmFyIHJlc29sdmVkRW5kID0gcmVzb2x2ZUVuZChlbmQsIHRoaXMuc2l6ZSk7XG4gICAgICBpZiAocmVzb2x2ZWRFbmQgIT09IHRoaXMuc2l6ZSkge1xuICAgICAgICAvLyBzdXBlci5zbGljZShiZWdpbiwgZW5kKTtcbiAgICAgICAgcmV0dXJuIEluZGV4ZWRDb2xsZWN0aW9uLnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1NpemUgPSB0aGlzLnNpemUgLSByZXNvbHZlZEJlZ2luO1xuICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgICAgd2hpbGUgKHJlc29sdmVkQmVnaW4tLSkge1xuICAgICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IG5ld1NpemU7XG4gICAgICAgIHRoaXMuX2hlYWQgPSBoZWFkO1xuICAgICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlU3RhY2sobmV3U2l6ZSwgaGVhZCk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTXV0YWJpbGl0eVxuXG4gICAgU3RhY2sucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbihvd25lcklEKSB7XG4gICAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlU3RhY2sodGhpcy5zaXplLCB0aGlzLl9oZWFkLCBvd25lcklELCB0aGlzLl9faGFzaCk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgSXRlcmF0aW9uXG5cbiAgICBTdGFjay5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkuY2FjaGVSZXN1bHQuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHZhciBub2RlID0gdGhpcy5faGVhZDtcbiAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgIGlmIChmbihub2RlLnZhbHVlLCBpdGVyYXRpb25zKyssIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy50b1NlcSgpLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHZhciBub2RlID0gdGhpcy5faGVhZDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG5vZGUudmFsdWU7XG4gICAgICAgICAgbm9kZSA9IG5vZGUubmV4dDtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG5cbiAgZnVuY3Rpb24gaXNTdGFjayhtYXliZVN0YWNrKSB7XG4gICAgcmV0dXJuICEhKG1heWJlU3RhY2sgJiYgbWF5YmVTdGFja1tJU19TVEFDS19TRU5USU5FTF0pO1xuICB9XG5cbiAgU3RhY2suaXNTdGFjayA9IGlzU3RhY2s7XG5cbiAgdmFyIElTX1NUQUNLX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfU1RBQ0tfX0BAJztcblxuICB2YXIgU3RhY2tQcm90b3R5cGUgPSBTdGFjay5wcm90b3R5cGU7XG4gIFN0YWNrUHJvdG90eXBlW0lTX1NUQUNLX1NFTlRJTkVMXSA9IHRydWU7XG4gIFN0YWNrUHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSBNYXBQcm90b3R5cGUud2l0aE11dGF0aW9ucztcbiAgU3RhY2tQcm90b3R5cGUuYXNNdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzTXV0YWJsZTtcbiAgU3RhY2tQcm90b3R5cGUuYXNJbW11dGFibGUgPSBNYXBQcm90b3R5cGUuYXNJbW11dGFibGU7XG4gIFN0YWNrUHJvdG90eXBlLndhc0FsdGVyZWQgPSBNYXBQcm90b3R5cGUud2FzQWx0ZXJlZDtcblxuXG4gIGZ1bmN0aW9uIG1ha2VTdGFjayhzaXplLCBoZWFkLCBvd25lcklELCBoYXNoKSB7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUoU3RhY2tQcm90b3R5cGUpO1xuICAgIG1hcC5zaXplID0gc2l6ZTtcbiAgICBtYXAuX2hlYWQgPSBoZWFkO1xuICAgIG1hcC5fX293bmVySUQgPSBvd25lcklEO1xuICAgIG1hcC5fX2hhc2ggPSBoYXNoO1xuICAgIG1hcC5fX2FsdGVyZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG5cbiAgdmFyIEVNUFRZX1NUQUNLO1xuICBmdW5jdGlvbiBlbXB0eVN0YWNrKCkge1xuICAgIHJldHVybiBFTVBUWV9TVEFDSyB8fCAoRU1QVFlfU1RBQ0sgPSBtYWtlU3RhY2soMCkpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU2V0LCBTZXRDb2xsZWN0aW9uKTtcblxuICAgIC8vIEBwcmFnbWEgQ29uc3RydWN0aW9uXG5cbiAgICBmdW5jdGlvbiBTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlTZXQoKSA6XG4gICAgICAgIGlzU2V0KHZhbHVlKSA/IHZhbHVlIDpcbiAgICAgICAgZW1wdHlTZXQoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcbiAgICAgICAgICB2YXIgaXRlciA9IFNldEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2ICkge3JldHVybiBzZXQuYWRkKHYpfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIFNldC5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFNldC5mcm9tS2V5cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcyhLZXllZEl0ZXJhYmxlKHZhbHVlKS5rZXlTZXEoKSk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ1NldCB7JywgJ30nKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBBY2Nlc3NcblxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXAuaGFzKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblxuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB1cGRhdGVTZXQodGhpcywgdGhpcy5fbWFwLnNldCh2YWx1ZSwgdHJ1ZSkpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdXBkYXRlU2V0KHRoaXMsIHRoaXMuX21hcC5yZW1vdmUodmFsdWUpKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZVNldCh0aGlzLCB0aGlzLl9tYXAuY2xlYXIoKSk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQ29tcG9zaXRpb25cblxuICAgIFNldC5wcm90b3R5cGUudW5pb24gPSBmdW5jdGlvbigpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgIGl0ZXJzID0gaXRlcnMuZmlsdGVyKGZ1bmN0aW9uKHggKSB7cmV0dXJuIHguc2l6ZSAhPT0gMH0pO1xuICAgICAgaWYgKGl0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDAgJiYgaXRlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKGl0ZXJzWzBdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24oc2V0ICkge1xuICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaXRlcnMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgICAgU2V0SXRlcmFibGUoaXRlcnNbaWldKS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBzZXQuYWRkKHZhbHVlKX0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5pbnRlcnNlY3QgPSBmdW5jdGlvbigpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgIGlmIChpdGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpdGVycyA9IGl0ZXJzLm1hcChmdW5jdGlvbihpdGVyICkge3JldHVybiBTZXRJdGVyYWJsZShpdGVyKX0pO1xuICAgICAgdmFyIG9yaWdpbmFsU2V0ID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24oc2V0ICkge1xuICAgICAgICBvcmlnaW5hbFNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlICkge1xuICAgICAgICAgIGlmICghaXRlcnMuZXZlcnkoZnVuY3Rpb24oaXRlciApIHtyZXR1cm4gaXRlci5jb250YWlucyh2YWx1ZSl9KSkge1xuICAgICAgICAgICAgc2V0LnJlbW92ZSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLnN1YnRyYWN0ID0gZnVuY3Rpb24oKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaXRlcnMgPSBpdGVycy5tYXAoZnVuY3Rpb24oaXRlciApIHtyZXR1cm4gU2V0SXRlcmFibGUoaXRlcil9KTtcbiAgICAgIHZhciBvcmlnaW5hbFNldCA9IHRoaXM7XG4gICAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcbiAgICAgICAgb3JpZ2luYWxTZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSApIHtcbiAgICAgICAgICBpZiAoaXRlcnMuc29tZShmdW5jdGlvbihpdGVyICkge3JldHVybiBpdGVyLmNvbnRhaW5zKHZhbHVlKX0pKSB7XG4gICAgICAgICAgICBzZXQucmVtb3ZlKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnVuaW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUubWVyZ2VXaXRoID0gZnVuY3Rpb24obWVyZ2VyKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICByZXR1cm4gdGhpcy51bmlvbi5hcHBseSh0aGlzLCBpdGVycyk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKGNvbXBhcmF0b3IpIHtcbiAgICAgIC8vIExhdGUgYmluZGluZ1xuICAgICAgcmV0dXJuIE9yZGVyZWRTZXQoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvcikpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLnNvcnRCeSA9IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgICAgLy8gTGF0ZSBiaW5kaW5nXG4gICAgICByZXR1cm4gT3JkZXJlZFNldChzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yLCBtYXBwZXIpKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWFwLndhc0FsdGVyZWQoKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuX21hcC5fX2l0ZXJhdGUoZnVuY3Rpb24oXywgaykgIHtyZXR1cm4gZm4oaywgaywgdGhpcyQwKX0sIHJldmVyc2UpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWFwLm1hcChmdW5jdGlvbihfLCBrKSAge3JldHVybiBrfSkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24ob3duZXJJRCkge1xuICAgICAgaWYgKG93bmVySUQgPT09IHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIG5ld01hcCA9IHRoaXMuX21hcC5fX2Vuc3VyZU93bmVyKG93bmVySUQpO1xuICAgICAgaWYgKCFvd25lcklEKSB7XG4gICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgdGhpcy5fbWFwID0gbmV3TWFwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9fbWFrZShuZXdNYXAsIG93bmVySUQpO1xuICAgIH07XG5cblxuICBmdW5jdGlvbiBpc1NldChtYXliZVNldCkge1xuICAgIHJldHVybiAhIShtYXliZVNldCAmJiBtYXliZVNldFtJU19TRVRfU0VOVElORUxdKTtcbiAgfVxuXG4gIFNldC5pc1NldCA9IGlzU2V0O1xuXG4gIHZhciBJU19TRVRfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9TRVRfX0BAJztcblxuICB2YXIgU2V0UHJvdG90eXBlID0gU2V0LnByb3RvdHlwZTtcbiAgU2V0UHJvdG90eXBlW0lTX1NFVF9TRU5USU5FTF0gPSB0cnVlO1xuICBTZXRQcm90b3R5cGVbREVMRVRFXSA9IFNldFByb3RvdHlwZS5yZW1vdmU7XG4gIFNldFByb3RvdHlwZS5tZXJnZURlZXAgPSBTZXRQcm90b3R5cGUubWVyZ2U7XG4gIFNldFByb3RvdHlwZS5tZXJnZURlZXBXaXRoID0gU2V0UHJvdG90eXBlLm1lcmdlV2l0aDtcbiAgU2V0UHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSBNYXBQcm90b3R5cGUud2l0aE11dGF0aW9ucztcbiAgU2V0UHJvdG90eXBlLmFzTXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc011dGFibGU7XG4gIFNldFByb3RvdHlwZS5hc0ltbXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc0ltbXV0YWJsZTtcblxuICBTZXRQcm90b3R5cGUuX19lbXB0eSA9IGVtcHR5U2V0O1xuICBTZXRQcm90b3R5cGUuX19tYWtlID0gbWFrZVNldDtcblxuICBmdW5jdGlvbiB1cGRhdGVTZXQoc2V0LCBuZXdNYXApIHtcbiAgICBpZiAoc2V0Ll9fb3duZXJJRCkge1xuICAgICAgc2V0LnNpemUgPSBuZXdNYXAuc2l6ZTtcbiAgICAgIHNldC5fbWFwID0gbmV3TWFwO1xuICAgICAgcmV0dXJuIHNldDtcbiAgICB9XG4gICAgcmV0dXJuIG5ld01hcCA9PT0gc2V0Ll9tYXAgPyBzZXQgOlxuICAgICAgbmV3TWFwLnNpemUgPT09IDAgPyBzZXQuX19lbXB0eSgpIDpcbiAgICAgIHNldC5fX21ha2UobmV3TWFwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VTZXQobWFwLCBvd25lcklEKSB7XG4gICAgdmFyIHNldCA9IE9iamVjdC5jcmVhdGUoU2V0UHJvdG90eXBlKTtcbiAgICBzZXQuc2l6ZSA9IG1hcCA/IG1hcC5zaXplIDogMDtcbiAgICBzZXQuX21hcCA9IG1hcDtcbiAgICBzZXQuX19vd25lcklEID0gb3duZXJJRDtcbiAgICByZXR1cm4gc2V0O1xuICB9XG5cbiAgdmFyIEVNUFRZX1NFVDtcbiAgZnVuY3Rpb24gZW1wdHlTZXQoKSB7XG4gICAgcmV0dXJuIEVNUFRZX1NFVCB8fCAoRU1QVFlfU0VUID0gbWFrZVNldChlbXB0eU1hcCgpKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhPcmRlcmVkU2V0LCBTZXQpO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIE9yZGVyZWRTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlPcmRlcmVkU2V0KCkgOlxuICAgICAgICBpc09yZGVyZWRTZXQodmFsdWUpID8gdmFsdWUgOlxuICAgICAgICBlbXB0eU9yZGVyZWRTZXQoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcbiAgICAgICAgICB2YXIgaXRlciA9IFNldEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2ICkge3JldHVybiBzZXQuYWRkKHYpfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIE9yZGVyZWRTZXQub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBPcmRlcmVkU2V0LmZyb21LZXlzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzKEtleWVkSXRlcmFibGUodmFsdWUpLmtleVNlcSgpKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZFNldC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ09yZGVyZWRTZXQgeycsICd9Jyk7XG4gICAgfTtcblxuXG4gIGZ1bmN0aW9uIGlzT3JkZXJlZFNldChtYXliZU9yZGVyZWRTZXQpIHtcbiAgICByZXR1cm4gaXNTZXQobWF5YmVPcmRlcmVkU2V0KSAmJiBpc09yZGVyZWQobWF5YmVPcmRlcmVkU2V0KTtcbiAgfVxuXG4gIE9yZGVyZWRTZXQuaXNPcmRlcmVkU2V0ID0gaXNPcmRlcmVkU2V0O1xuXG4gIHZhciBPcmRlcmVkU2V0UHJvdG90eXBlID0gT3JkZXJlZFNldC5wcm90b3R5cGU7XG4gIE9yZGVyZWRTZXRQcm90b3R5cGVbSVNfT1JERVJFRF9TRU5USU5FTF0gPSB0cnVlO1xuXG4gIE9yZGVyZWRTZXRQcm90b3R5cGUuX19lbXB0eSA9IGVtcHR5T3JkZXJlZFNldDtcbiAgT3JkZXJlZFNldFByb3RvdHlwZS5fX21ha2UgPSBtYWtlT3JkZXJlZFNldDtcblxuICBmdW5jdGlvbiBtYWtlT3JkZXJlZFNldChtYXAsIG93bmVySUQpIHtcbiAgICB2YXIgc2V0ID0gT2JqZWN0LmNyZWF0ZShPcmRlcmVkU2V0UHJvdG90eXBlKTtcbiAgICBzZXQuc2l6ZSA9IG1hcCA/IG1hcC5zaXplIDogMDtcbiAgICBzZXQuX21hcCA9IG1hcDtcbiAgICBzZXQuX19vd25lcklEID0gb3duZXJJRDtcbiAgICByZXR1cm4gc2V0O1xuICB9XG5cbiAgdmFyIEVNUFRZX09SREVSRURfU0VUO1xuICBmdW5jdGlvbiBlbXB0eU9yZGVyZWRTZXQoKSB7XG4gICAgcmV0dXJuIEVNUFRZX09SREVSRURfU0VUIHx8IChFTVBUWV9PUkRFUkVEX1NFVCA9IG1ha2VPcmRlcmVkU2V0KGVtcHR5T3JkZXJlZE1hcCgpKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhSZWNvcmQsIEtleWVkQ29sbGVjdGlvbik7XG5cbiAgICBmdW5jdGlvbiBSZWNvcmQoZGVmYXVsdFZhbHVlcywgbmFtZSkge1xuICAgICAgdmFyIFJlY29yZFR5cGUgPSBmdW5jdGlvbiBSZWNvcmQodmFsdWVzKSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWNvcmRUeXBlKSkge1xuICAgICAgICAgIHJldHVybiBuZXcgUmVjb3JkVHlwZSh2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21hcCA9IE1hcCh2YWx1ZXMpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0VmFsdWVzKTtcblxuICAgICAgdmFyIFJlY29yZFR5cGVQcm90b3R5cGUgPSBSZWNvcmRUeXBlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmVjb3JkUHJvdG90eXBlKTtcbiAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZWNvcmRUeXBlO1xuICAgICAgbmFtZSAmJiAoUmVjb3JkVHlwZVByb3RvdHlwZS5fbmFtZSA9IG5hbWUpO1xuICAgICAgUmVjb3JkVHlwZVByb3RvdHlwZS5fZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRWYWx1ZXM7XG4gICAgICBSZWNvcmRUeXBlUHJvdG90eXBlLl9rZXlzID0ga2V5cztcbiAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuc2l6ZSA9IGtleXMubGVuZ3RoO1xuXG4gICAgICB0cnkge1xuICAgICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5ICkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWNvcmRUeXBlLnByb3RvdHlwZSwga2V5LCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGludmFyaWFudCh0aGlzLl9fb3duZXJJRCwgJ0Nhbm5vdCBzZXQgb24gYW4gaW1tdXRhYmxlIHJlY29yZC4nKTtcbiAgICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnR5IGZhaWxlZC4gUHJvYmFibHkgSUU4LlxuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVjb3JkVHlwZTtcbiAgICB9XG5cbiAgICBSZWNvcmQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKHJlY29yZE5hbWUodGhpcykgKyAnIHsnLCAnfScpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihrKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFZhbHVlcy5oYXNPd25Qcm9wZXJ0eShrKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrLCBub3RTZXRWYWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLmhhcyhrKSkge1xuICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgZGVmYXVsdFZhbCA9IHRoaXMuX2RlZmF1bHRWYWx1ZXNba107XG4gICAgICByZXR1cm4gdGhpcy5fbWFwID8gdGhpcy5fbWFwLmdldChrLCBkZWZhdWx0VmFsKSA6IGRlZmF1bHRWYWw7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgICBSZWNvcmQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5fbWFwICYmIHRoaXMuX21hcC5jbGVhcigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBTdXBlclJlY29yZCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiBTdXBlclJlY29yZC5fZW1wdHkgfHwgKFN1cGVyUmVjb3JkLl9lbXB0eSA9IG1ha2VSZWNvcmQodGhpcywgZW1wdHlNYXAoKSkpO1xuICAgIH07XG5cbiAgICBSZWNvcmQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgIGlmICghdGhpcy5oYXMoaykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2V0IHVua25vd24ga2V5IFwiJyArIGsgKyAnXCIgb24gJyArIHJlY29yZE5hbWUodGhpcykpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld01hcCA9IHRoaXMuX21hcCAmJiB0aGlzLl9tYXAuc2V0KGssIHYpO1xuICAgICAgaWYgKHRoaXMuX19vd25lcklEIHx8IG5ld01hcCA9PT0gdGhpcy5fbWFwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3TWFwKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihrKSB7XG4gICAgICBpZiAoIXRoaXMuaGFzKGspKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIG5ld01hcCA9IHRoaXMuX21hcCAmJiB0aGlzLl9tYXAucmVtb3ZlKGspO1xuICAgICAgaWYgKHRoaXMuX19vd25lcklEIHx8IG5ld01hcCA9PT0gdGhpcy5fbWFwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3TWFwKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWFwLndhc0FsdGVyZWQoKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIEtleWVkSXRlcmFibGUodGhpcy5fZGVmYXVsdFZhbHVlcykubWFwKGZ1bmN0aW9uKF8sIGspICB7cmV0dXJuIHRoaXMkMC5nZXQoayl9KS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgIH07XG5cbiAgICBSZWNvcmQucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICByZXR1cm4gS2V5ZWRJdGVyYWJsZSh0aGlzLl9kZWZhdWx0VmFsdWVzKS5tYXAoZnVuY3Rpb24oXywgaykgIHtyZXR1cm4gdGhpcyQwLmdldChrKX0pLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIFJlY29yZC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcbiAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAgJiYgdGhpcy5fbWFwLl9fZW5zdXJlT3duZXIob3duZXJJRCk7XG4gICAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgICB0aGlzLl9tYXAgPSBuZXdNYXA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3TWFwLCBvd25lcklEKTtcbiAgICB9O1xuXG5cbiAgdmFyIFJlY29yZFByb3RvdHlwZSA9IFJlY29yZC5wcm90b3R5cGU7XG4gIFJlY29yZFByb3RvdHlwZVtERUxFVEVdID0gUmVjb3JkUHJvdG90eXBlLnJlbW92ZTtcbiAgUmVjb3JkUHJvdG90eXBlLmRlbGV0ZUluID1cbiAgUmVjb3JkUHJvdG90eXBlLnJlbW92ZUluID0gTWFwUHJvdG90eXBlLnJlbW92ZUluO1xuICBSZWNvcmRQcm90b3R5cGUubWVyZ2UgPSBNYXBQcm90b3R5cGUubWVyZ2U7XG4gIFJlY29yZFByb3RvdHlwZS5tZXJnZVdpdGggPSBNYXBQcm90b3R5cGUubWVyZ2VXaXRoO1xuICBSZWNvcmRQcm90b3R5cGUubWVyZ2VJbiA9IE1hcFByb3RvdHlwZS5tZXJnZUluO1xuICBSZWNvcmRQcm90b3R5cGUubWVyZ2VEZWVwID0gTWFwUHJvdG90eXBlLm1lcmdlRGVlcDtcbiAgUmVjb3JkUHJvdG90eXBlLm1lcmdlRGVlcFdpdGggPSBNYXBQcm90b3R5cGUubWVyZ2VEZWVwV2l0aDtcbiAgUmVjb3JkUHJvdG90eXBlLm1lcmdlRGVlcEluID0gTWFwUHJvdG90eXBlLm1lcmdlRGVlcEluO1xuICBSZWNvcmRQcm90b3R5cGUuc2V0SW4gPSBNYXBQcm90b3R5cGUuc2V0SW47XG4gIFJlY29yZFByb3RvdHlwZS51cGRhdGUgPSBNYXBQcm90b3R5cGUudXBkYXRlO1xuICBSZWNvcmRQcm90b3R5cGUudXBkYXRlSW4gPSBNYXBQcm90b3R5cGUudXBkYXRlSW47XG4gIFJlY29yZFByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gTWFwUHJvdG90eXBlLndpdGhNdXRhdGlvbnM7XG4gIFJlY29yZFByb3RvdHlwZS5hc011dGFibGUgPSBNYXBQcm90b3R5cGUuYXNNdXRhYmxlO1xuICBSZWNvcmRQcm90b3R5cGUuYXNJbW11dGFibGUgPSBNYXBQcm90b3R5cGUuYXNJbW11dGFibGU7XG5cblxuICBmdW5jdGlvbiBtYWtlUmVjb3JkKGxpa2VSZWNvcmQsIG1hcCwgb3duZXJJRCkge1xuICAgIHZhciByZWNvcmQgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihsaWtlUmVjb3JkKSk7XG4gICAgcmVjb3JkLl9tYXAgPSBtYXA7XG4gICAgcmVjb3JkLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgcmV0dXJuIHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29yZE5hbWUocmVjb3JkKSB7XG4gICAgcmV0dXJuIHJlY29yZC5fbmFtZSB8fCByZWNvcmQuY29uc3RydWN0b3IubmFtZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZXBFcXVhbChhLCBiKSB7XG4gICAgaWYgKGEgPT09IGIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgICFpc0l0ZXJhYmxlKGIpIHx8XG4gICAgICBhLnNpemUgIT09IHVuZGVmaW5lZCAmJiBiLnNpemUgIT09IHVuZGVmaW5lZCAmJiBhLnNpemUgIT09IGIuc2l6ZSB8fFxuICAgICAgYS5fX2hhc2ggIT09IHVuZGVmaW5lZCAmJiBiLl9faGFzaCAhPT0gdW5kZWZpbmVkICYmIGEuX19oYXNoICE9PSBiLl9faGFzaCB8fFxuICAgICAgaXNLZXllZChhKSAhPT0gaXNLZXllZChiKSB8fFxuICAgICAgaXNJbmRleGVkKGEpICE9PSBpc0luZGV4ZWQoYikgfHxcbiAgICAgIGlzT3JkZXJlZChhKSAhPT0gaXNPcmRlcmVkKGIpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGEuc2l6ZSA9PT0gMCAmJiBiLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBub3RBc3NvY2lhdGl2ZSA9ICFpc0Fzc29jaWF0aXZlKGEpO1xuXG4gICAgaWYgKGlzT3JkZXJlZChhKSkge1xuICAgICAgdmFyIGVudHJpZXMgPSBhLmVudHJpZXMoKTtcbiAgICAgIHJldHVybiBiLmV2ZXJ5KGZ1bmN0aW9uKHYsIGspICB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXMubmV4dCgpLnZhbHVlO1xuICAgICAgICByZXR1cm4gZW50cnkgJiYgaXMoZW50cnlbMV0sIHYpICYmIChub3RBc3NvY2lhdGl2ZSB8fCBpcyhlbnRyeVswXSwgaykpO1xuICAgICAgfSkgJiYgZW50cmllcy5uZXh0KCkuZG9uZTtcbiAgICB9XG5cbiAgICB2YXIgZmxpcHBlZCA9IGZhbHNlO1xuXG4gICAgaWYgKGEuc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoYi5zaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYS5jYWNoZVJlc3VsdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmxpcHBlZCA9IHRydWU7XG4gICAgICAgIHZhciBfID0gYTtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGIgPSBfO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhbGxFcXVhbCA9IHRydWU7XG4gICAgdmFyIGJTaXplID0gYi5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtcbiAgICAgIGlmIChub3RBc3NvY2lhdGl2ZSA/ICFhLmhhcyh2KSA6XG4gICAgICAgICAgZmxpcHBlZCA/ICFpcyh2LCBhLmdldChrLCBOT1RfU0VUKSkgOiAhaXMoYS5nZXQoaywgTk9UX1NFVCksIHYpKSB7XG4gICAgICAgIGFsbEVxdWFsID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhbGxFcXVhbCAmJiBhLnNpemUgPT09IGJTaXplO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoUmFuZ2UsIEluZGV4ZWRTZXEpO1xuXG4gICAgZnVuY3Rpb24gUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJhbmdlKSkge1xuICAgICAgICByZXR1cm4gbmV3IFJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXApO1xuICAgICAgfVxuICAgICAgaW52YXJpYW50KHN0ZXAgIT09IDAsICdDYW5ub3Qgc3RlcCBhIFJhbmdlIGJ5IDAnKTtcbiAgICAgIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBJbmZpbml0eTtcbiAgICAgIH1cbiAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAxIDogTWF0aC5hYnMoc3RlcCk7XG4gICAgICBpZiAoZW5kIDwgc3RhcnQpIHtcbiAgICAgICAgc3RlcCA9IC1zdGVwO1xuICAgICAgfVxuICAgICAgdGhpcy5fc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuX2VuZCA9IGVuZDtcbiAgICAgIHRoaXMuX3N0ZXAgPSBzdGVwO1xuICAgICAgdGhpcy5zaXplID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChlbmQgLSBzdGFydCkgLyBzdGVwIC0gMSkgKyAxKTtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgaWYgKEVNUFRZX1JBTkdFKSB7XG4gICAgICAgICAgcmV0dXJuIEVNUFRZX1JBTkdFO1xuICAgICAgICB9XG4gICAgICAgIEVNUFRZX1JBTkdFID0gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuICdSYW5nZSBbXSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1JhbmdlIFsgJyArXG4gICAgICAgIHRoaXMuX3N0YXJ0ICsgJy4uLicgKyB0aGlzLl9lbmQgK1xuICAgICAgICAodGhpcy5fc3RlcCA+IDEgPyAnIGJ5ICcgKyB0aGlzLl9zdGVwIDogJycpICtcbiAgICAgICcgXSc7XG4gICAgfTtcblxuICAgIFJhbmdlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyhpbmRleCkgP1xuICAgICAgICB0aGlzLl9zdGFydCArIHdyYXBJbmRleCh0aGlzLCBpbmRleCkgKiB0aGlzLl9zdGVwIDpcbiAgICAgICAgbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIFJhbmdlLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICB2YXIgcG9zc2libGVJbmRleCA9IChzZWFyY2hWYWx1ZSAtIHRoaXMuX3N0YXJ0KSAvIHRoaXMuX3N0ZXA7XG4gICAgICByZXR1cm4gcG9zc2libGVJbmRleCA+PSAwICYmXG4gICAgICAgIHBvc3NpYmxlSW5kZXggPCB0aGlzLnNpemUgJiZcbiAgICAgICAgcG9zc2libGVJbmRleCA9PT0gTWF0aC5mbG9vcihwb3NzaWJsZUluZGV4KTtcbiAgICB9O1xuXG4gICAgUmFuZ2UucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgaWYgKHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgdGhpcy5zaXplKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGJlZ2luID0gcmVzb2x2ZUJlZ2luKGJlZ2luLCB0aGlzLnNpemUpO1xuICAgICAgZW5kID0gcmVzb2x2ZUVuZChlbmQsIHRoaXMuc2l6ZSk7XG4gICAgICBpZiAoZW5kIDw9IGJlZ2luKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmFuZ2UoMCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFJhbmdlKHRoaXMuZ2V0KGJlZ2luLCB0aGlzLl9lbmQpLCB0aGlzLmdldChlbmQsIHRoaXMuX2VuZCksIHRoaXMuX3N0ZXApO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICB2YXIgb2Zmc2V0VmFsdWUgPSBzZWFyY2hWYWx1ZSAtIHRoaXMuX3N0YXJ0O1xuICAgICAgaWYgKG9mZnNldFZhbHVlICUgdGhpcy5fc3RlcCA9PT0gMCkge1xuICAgICAgICB2YXIgaW5kZXggPSBvZmZzZXRWYWx1ZSAvIHRoaXMuX3N0ZXA7XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5zaXplKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuXG4gICAgUmFuZ2UucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmluZGV4T2Yoc2VhcmNoVmFsdWUpO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHZhciBtYXhJbmRleCA9IHRoaXMuc2l6ZSAtIDE7XG4gICAgICB2YXIgc3RlcCA9IHRoaXMuX3N0ZXA7XG4gICAgICB2YXIgdmFsdWUgPSByZXZlcnNlID8gdGhpcy5fc3RhcnQgKyBtYXhJbmRleCAqIHN0ZXAgOiB0aGlzLl9zdGFydDtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgICAgaWYgKGZuKHZhbHVlLCBpaSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSArPSByZXZlcnNlID8gLXN0ZXAgOiBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBtYXhJbmRleCA9IHRoaXMuc2l6ZSAtIDE7XG4gICAgICB2YXIgc3RlcCA9IHRoaXMuX3N0ZXA7XG4gICAgICB2YXIgdmFsdWUgPSByZXZlcnNlID8gdGhpcy5fc3RhcnQgKyBtYXhJbmRleCAqIHN0ZXAgOiB0aGlzLl9zdGFydDtcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIHYgPSB2YWx1ZTtcbiAgICAgICAgdmFsdWUgKz0gcmV2ZXJzZSA/IC1zdGVwIDogc3RlcDtcbiAgICAgICAgcmV0dXJuIGlpID4gbWF4SW5kZXggPyBpdGVyYXRvckRvbmUoKSA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgaWkrKywgdik7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgUmFuZ2UucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBSYW5nZSA/XG4gICAgICAgIHRoaXMuX3N0YXJ0ID09PSBvdGhlci5fc3RhcnQgJiZcbiAgICAgICAgdGhpcy5fZW5kID09PSBvdGhlci5fZW5kICYmXG4gICAgICAgIHRoaXMuX3N0ZXAgPT09IG90aGVyLl9zdGVwIDpcbiAgICAgICAgZGVlcEVxdWFsKHRoaXMsIG90aGVyKTtcbiAgICB9O1xuXG5cbiAgdmFyIEVNUFRZX1JBTkdFO1xuXG4gIGNyZWF0ZUNsYXNzKFJlcGVhdCwgSW5kZXhlZFNlcSk7XG5cbiAgICBmdW5jdGlvbiBSZXBlYXQodmFsdWUsIHRpbWVzKSB7XG4gICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVwZWF0KSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlcGVhdCh2YWx1ZSwgdGltZXMpO1xuICAgICAgfVxuICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc2l6ZSA9IHRpbWVzID09PSB1bmRlZmluZWQgPyBJbmZpbml0eSA6IE1hdGgubWF4KDAsIHRpbWVzKTtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgaWYgKEVNUFRZX1JFUEVBVCkge1xuICAgICAgICAgIHJldHVybiBFTVBUWV9SRVBFQVQ7XG4gICAgICAgIH1cbiAgICAgICAgRU1QVFlfUkVQRUFUID0gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiAnUmVwZWF0IFtdJztcbiAgICAgIH1cbiAgICAgIHJldHVybiAnUmVwZWF0IFsgJyArIHRoaXMuX3ZhbHVlICsgJyAnICsgdGhpcy5zaXplICsgJyB0aW1lcyBdJztcbiAgICB9O1xuXG4gICAgUmVwZWF0LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyhpbmRleCkgPyB0aGlzLl92YWx1ZSA6IG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiBpcyh0aGlzLl92YWx1ZSwgc2VhcmNoVmFsdWUpO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIHNpemUgPSB0aGlzLnNpemU7XG4gICAgICByZXR1cm4gd2hvbGVTbGljZShiZWdpbiwgZW5kLCBzaXplKSA/IHRoaXMgOlxuICAgICAgICBuZXcgUmVwZWF0KHRoaXMuX3ZhbHVlLCByZXNvbHZlRW5kKGVuZCwgc2l6ZSkgLSByZXNvbHZlQmVnaW4oYmVnaW4sIHNpemUpKTtcbiAgICB9O1xuXG4gICAgUmVwZWF0LnByb3RvdHlwZS5yZXZlcnNlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgUmVwZWF0LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIGlmIChpcyh0aGlzLl92YWx1ZSwgc2VhcmNoVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIGlmIChpcyh0aGlzLl92YWx1ZSwgc2VhcmNoVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpemU7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCB0aGlzLnNpemU7IGlpKyspIHtcbiAgICAgICAgaWYgKGZuKHRoaXMuX3ZhbHVlLCBpaSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgaWkgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpIFxuICAgICAgICB7cmV0dXJuIGlpIDwgdGhpcyQwLnNpemUgPyBpdGVyYXRvclZhbHVlKHR5cGUsIGlpKyssIHRoaXMkMC5fdmFsdWUpIDogaXRlcmF0b3JEb25lKCl9XG4gICAgICApO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBSZXBlYXQgP1xuICAgICAgICBpcyh0aGlzLl92YWx1ZSwgb3RoZXIuX3ZhbHVlKSA6XG4gICAgICAgIGRlZXBFcXVhbChvdGhlcik7XG4gICAgfTtcblxuXG4gIHZhciBFTVBUWV9SRVBFQVQ7XG5cbiAgLyoqXG4gICAqIENvbnRyaWJ1dGVzIGFkZGl0aW9uYWwgbWV0aG9kcyB0byBhIGNvbnN0cnVjdG9yXG4gICAqL1xuICBmdW5jdGlvbiBtaXhpbihjdG9yLCBtZXRob2RzKSB7XG4gICAgdmFyIGtleUNvcGllciA9IGZ1bmN0aW9uKGtleSApIHsgY3Rvci5wcm90b3R5cGVba2V5XSA9IG1ldGhvZHNba2V5XTsgfTtcbiAgICBPYmplY3Qua2V5cyhtZXRob2RzKS5mb3JFYWNoKGtleUNvcGllcik7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJlxuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtZXRob2RzKS5mb3JFYWNoKGtleUNvcGllcik7XG4gICAgcmV0dXJuIGN0b3I7XG4gIH1cblxuICBJdGVyYWJsZS5JdGVyYXRvciA9IEl0ZXJhdG9yO1xuXG4gIG1peGluKEl0ZXJhYmxlLCB7XG5cbiAgICAvLyAjIyMgQ29udmVyc2lvbiB0byBvdGhlciB0eXBlc1xuXG4gICAgdG9BcnJheTogZnVuY3Rpb24oKSB7XG4gICAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuICAgICAgdmFyIGFycmF5ID0gbmV3IEFycmF5KHRoaXMuc2l6ZSB8fCAwKTtcbiAgICAgIHRoaXMudmFsdWVTZXEoKS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaSkgIHsgYXJyYXlbaV0gPSB2OyB9KTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9LFxuXG4gICAgdG9JbmRleGVkU2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgVG9JbmRleGVkU2VxdWVuY2UodGhpcyk7XG4gICAgfSxcblxuICAgIHRvSlM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9TZXEoKS5tYXAoXG4gICAgICAgIGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudG9KUyA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnRvSlMoKSA6IHZhbHVlfVxuICAgICAgKS5fX3RvSlMoKTtcbiAgICB9LFxuXG4gICAgdG9KU09OOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkubWFwKFxuICAgICAgICBmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnRvSlNPTigpIDogdmFsdWV9XG4gICAgICApLl9fdG9KUygpO1xuICAgIH0sXG5cbiAgICB0b0tleWVkU2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgVG9LZXllZFNlcXVlbmNlKHRoaXMsIHRydWUpO1xuICAgIH0sXG5cbiAgICB0b01hcDogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG4gICAgICByZXR1cm4gTWFwKHRoaXMudG9LZXllZFNlcSgpKTtcbiAgICB9LFxuXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcbiAgICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7IG9iamVjdFtrXSA9IHY7IH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9LFxuXG4gICAgdG9PcmRlcmVkTWFwOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgIHJldHVybiBPcmRlcmVkTWFwKHRoaXMudG9LZXllZFNlcSgpKTtcbiAgICB9LFxuXG4gICAgdG9PcmRlcmVkU2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgIHJldHVybiBPcmRlcmVkU2V0KGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcbiAgICB9LFxuXG4gICAgdG9TZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gVXNlIExhdGUgQmluZGluZyBoZXJlIHRvIHNvbHZlIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuICAgICAgcmV0dXJuIFNldChpc0tleWVkKHRoaXMpID8gdGhpcy52YWx1ZVNlcSgpIDogdGhpcyk7XG4gICAgfSxcblxuICAgIHRvU2V0U2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgVG9TZXRTZXF1ZW5jZSh0aGlzKTtcbiAgICB9LFxuXG4gICAgdG9TZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGlzSW5kZXhlZCh0aGlzKSA/IHRoaXMudG9JbmRleGVkU2VxKCkgOlxuICAgICAgICBpc0tleWVkKHRoaXMpID8gdGhpcy50b0tleWVkU2VxKCkgOlxuICAgICAgICB0aGlzLnRvU2V0U2VxKCk7XG4gICAgfSxcblxuICAgIHRvU3RhY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gVXNlIExhdGUgQmluZGluZyBoZXJlIHRvIHNvbHZlIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuICAgICAgcmV0dXJuIFN0YWNrKGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcbiAgICB9LFxuXG4gICAgdG9MaXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgIHJldHVybiBMaXN0KGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgQ29tbW9uIEphdmFTY3JpcHQgbWV0aG9kcyBhbmQgcHJvcGVydGllc1xuXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICdbSXRlcmFibGVdJztcbiAgICB9LFxuXG4gICAgX190b1N0cmluZzogZnVuY3Rpb24oaGVhZCwgdGFpbCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaGVhZCArIHRhaWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGVhZCArICcgJyArIHRoaXMudG9TZXEoKS5tYXAodGhpcy5fX3RvU3RyaW5nTWFwcGVyKS5qb2luKCcsICcpICsgJyAnICsgdGFpbDtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgRVM2IENvbGxlY3Rpb24gbWV0aG9kcyAoRVM2IEFycmF5IGFuZCBNYXApXG5cbiAgICBjb25jYXQ6IGZ1bmN0aW9uKCkge3ZhciB2YWx1ZXMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBjb25jYXRGYWN0b3J5KHRoaXMsIHZhbHVlcykpO1xuICAgIH0sXG5cbiAgICBjb250YWluczogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnNvbWUoZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIGlzKHZhbHVlLCBzZWFyY2hWYWx1ZSl9KTtcbiAgICB9LFxuXG4gICAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUyk7XG4gICAgfSxcblxuICAgIGV2ZXJ5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgICB2YXIgcmV0dXJuVmFsdWUgPSB0cnVlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaywgYykgIHtcbiAgICAgICAgaWYgKCFwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuICAgICAgICAgIHJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICB9LFxuXG4gICAgZmlsdGVyOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmaWx0ZXJGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBmaW5kOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQsIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgZW50cnkgPSB0aGlzLmZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgICAgcmV0dXJuIGVudHJ5ID8gZW50cnlbMV0gOiBub3RTZXRWYWx1ZTtcbiAgICB9LFxuXG4gICAgZmluZEVudHJ5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHZhciBmb3VuZDtcbiAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuICAgICAgICAgIGZvdW5kID0gW2ssIHZdO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZm91bmQ7XG4gICAgfSxcblxuICAgIGZpbmRMYXN0RW50cnk6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9TZXEoKS5yZXZlcnNlKCkuZmluZEVudHJ5KHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIGZvckVhY2g6IGZ1bmN0aW9uKHNpZGVFZmZlY3QsIGNvbnRleHQpIHtcbiAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgICByZXR1cm4gdGhpcy5fX2l0ZXJhdGUoY29udGV4dCA/IHNpZGVFZmZlY3QuYmluZChjb250ZXh0KSA6IHNpZGVFZmZlY3QpO1xuICAgIH0sXG5cbiAgICBqb2luOiBmdW5jdGlvbihzZXBhcmF0b3IpIHtcbiAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/ICcnICsgc2VwYXJhdG9yIDogJywnO1xuICAgICAgdmFyIGpvaW5lZCA9ICcnO1xuICAgICAgdmFyIGlzRmlyc3QgPSB0cnVlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24odiApIHtcbiAgICAgICAgaXNGaXJzdCA/IChpc0ZpcnN0ID0gZmFsc2UpIDogKGpvaW5lZCArPSBzZXBhcmF0b3IpO1xuICAgICAgICBqb2luZWQgKz0gdiAhPT0gbnVsbCAmJiB2ICE9PSB1bmRlZmluZWQgPyB2IDogJyc7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBqb2luZWQ7XG4gICAgfSxcblxuICAgIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX0tFWVMpO1xuICAgIH0sXG5cbiAgICBtYXA6IGZ1bmN0aW9uKG1hcHBlciwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIG1hcEZhY3RvcnkodGhpcywgbWFwcGVyLCBjb250ZXh0KSk7XG4gICAgfSxcblxuICAgIHJlZHVjZTogZnVuY3Rpb24ocmVkdWNlciwgaW5pdGlhbFJlZHVjdGlvbiwgY29udGV4dCkge1xuICAgICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcbiAgICAgIHZhciByZWR1Y3Rpb247XG4gICAgICB2YXIgdXNlRmlyc3Q7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgdXNlRmlyc3QgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVkdWN0aW9uID0gaW5pdGlhbFJlZHVjdGlvbjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG4gICAgICAgIGlmICh1c2VGaXJzdCkge1xuICAgICAgICAgIHVzZUZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgcmVkdWN0aW9uID0gdjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWR1Y3Rpb24gPSByZWR1Y2VyLmNhbGwoY29udGV4dCwgcmVkdWN0aW9uLCB2LCBrLCBjKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVkdWN0aW9uO1xuICAgIH0sXG5cbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24ocmVkdWNlciwgaW5pdGlhbFJlZHVjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIHJldmVyc2VkID0gdGhpcy50b0tleWVkU2VxKCkucmV2ZXJzZSgpO1xuICAgICAgcmV0dXJuIHJldmVyc2VkLnJlZHVjZS5hcHBseShyZXZlcnNlZCwgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgcmV2ZXJzZUZhY3RvcnkodGhpcywgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBzbGljZTogZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNsaWNlRmFjdG9yeSh0aGlzLCBiZWdpbiwgZW5kLCB0cnVlKSk7XG4gICAgfSxcblxuICAgIHNvbWU6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuICF0aGlzLmV2ZXJ5KG5vdChwcmVkaWNhdGUpLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgc29ydDogZnVuY3Rpb24oY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IpKTtcbiAgICB9LFxuXG4gICAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMpO1xuICAgIH0sXG5cblxuICAgIC8vICMjIyBNb3JlIHNlcXVlbnRpYWwgbWV0aG9kc1xuXG4gICAgYnV0TGFzdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zbGljZSgwLCAtMSk7XG4gICAgfSxcblxuICAgIGlzRW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkID8gdGhpcy5zaXplID09PSAwIDogIXRoaXMuc29tZShmdW5jdGlvbigpICB7cmV0dXJuIHRydWV9KTtcbiAgICB9LFxuXG4gICAgY291bnQ6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIGVuc3VyZVNpemUoXG4gICAgICAgIHByZWRpY2F0ZSA/IHRoaXMudG9TZXEoKS5maWx0ZXIocHJlZGljYXRlLCBjb250ZXh0KSA6IHRoaXNcbiAgICAgICk7XG4gICAgfSxcblxuICAgIGNvdW50Qnk6IGZ1bmN0aW9uKGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBjb3VudEJ5RmFjdG9yeSh0aGlzLCBncm91cGVyLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgZXF1YWxzOiBmdW5jdGlvbihvdGhlcikge1xuICAgICAgcmV0dXJuIGRlZXBFcXVhbCh0aGlzLCBvdGhlcik7XG4gICAgfSxcblxuICAgIGVudHJ5U2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpdGVyYWJsZSA9IHRoaXM7XG4gICAgICBpZiAoaXRlcmFibGUuX2NhY2hlKSB7XG4gICAgICAgIC8vIFdlIGNhY2hlIGFzIGFuIGVudHJpZXMgYXJyYXksIHNvIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgY2FjaGUhXG4gICAgICAgIHJldHVybiBuZXcgQXJyYXlTZXEoaXRlcmFibGUuX2NhY2hlKTtcbiAgICAgIH1cbiAgICAgIHZhciBlbnRyaWVzU2VxdWVuY2UgPSBpdGVyYWJsZS50b1NlcSgpLm1hcChlbnRyeU1hcHBlcikudG9JbmRleGVkU2VxKCk7XG4gICAgICBlbnRyaWVzU2VxdWVuY2UuZnJvbUVudHJ5U2VxID0gZnVuY3Rpb24oKSAge3JldHVybiBpdGVyYWJsZS50b1NlcSgpfTtcbiAgICAgIHJldHVybiBlbnRyaWVzU2VxdWVuY2U7XG4gICAgfSxcblxuICAgIGZpbHRlck5vdDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobm90KHByZWRpY2F0ZSksIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBmaW5kTGFzdDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMudG9LZXllZFNlcSgpLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSwgY29udGV4dCwgbm90U2V0VmFsdWUpO1xuICAgIH0sXG5cbiAgICBmaXJzdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kKHJldHVyblRydWUpO1xuICAgIH0sXG5cbiAgICBmbGF0TWFwOiBmdW5jdGlvbihtYXBwZXIsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGF0TWFwRmFjdG9yeSh0aGlzLCBtYXBwZXIsIGNvbnRleHQpKTtcbiAgICB9LFxuXG4gICAgZmxhdHRlbjogZnVuY3Rpb24oZGVwdGgpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGF0dGVuRmFjdG9yeSh0aGlzLCBkZXB0aCwgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBmcm9tRW50cnlTZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBGcm9tRW50cmllc1NlcXVlbmNlKHRoaXMpO1xuICAgIH0sXG5cbiAgICBnZXQ6IGZ1bmN0aW9uKHNlYXJjaEtleSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmQoZnVuY3Rpb24oXywga2V5KSAge3JldHVybiBpcyhrZXksIHNlYXJjaEtleSl9LCB1bmRlZmluZWQsIG5vdFNldFZhbHVlKTtcbiAgICB9LFxuXG4gICAgZ2V0SW46IGZ1bmN0aW9uKHNlYXJjaEtleVBhdGgsIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgbmVzdGVkID0gdGhpcztcbiAgICAgIC8vIE5vdGU6IGluIGFuIEVTNiBlbnZpcm9ubWVudCwgd2Ugd291bGQgcHJlZmVyOlxuICAgICAgLy8gZm9yICh2YXIga2V5IG9mIHNlYXJjaEtleVBhdGgpIHtcbiAgICAgIHZhciBpdGVyID0gZm9yY2VJdGVyYXRvcihzZWFyY2hLZXlQYXRoKTtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXIubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIHZhciBrZXkgPSBzdGVwLnZhbHVlO1xuICAgICAgICBuZXN0ZWQgPSBuZXN0ZWQgJiYgbmVzdGVkLmdldCA/IG5lc3RlZC5nZXQoa2V5LCBOT1RfU0VUKSA6IE5PVF9TRVQ7XG4gICAgICAgIGlmIChuZXN0ZWQgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXN0ZWQ7XG4gICAgfSxcblxuICAgIGdyb3VwQnk6IGZ1bmN0aW9uKGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBncm91cEJ5RmFjdG9yeSh0aGlzLCBncm91cGVyLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgaGFzOiBmdW5jdGlvbihzZWFyY2hLZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldChzZWFyY2hLZXksIE5PVF9TRVQpICE9PSBOT1RfU0VUO1xuICAgIH0sXG5cbiAgICBoYXNJbjogZnVuY3Rpb24oc2VhcmNoS2V5UGF0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0SW4oc2VhcmNoS2V5UGF0aCwgTk9UX1NFVCkgIT09IE5PVF9TRVQ7XG4gICAgfSxcblxuICAgIGlzU3Vic2V0OiBmdW5jdGlvbihpdGVyKSB7XG4gICAgICBpdGVyID0gdHlwZW9mIGl0ZXIuY29udGFpbnMgPT09ICdmdW5jdGlvbicgPyBpdGVyIDogSXRlcmFibGUoaXRlcik7XG4gICAgICByZXR1cm4gdGhpcy5ldmVyeShmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gaXRlci5jb250YWlucyh2YWx1ZSl9KTtcbiAgICB9LFxuXG4gICAgaXNTdXBlcnNldDogZnVuY3Rpb24oaXRlcikge1xuICAgICAgcmV0dXJuIGl0ZXIuaXNTdWJzZXQodGhpcyk7XG4gICAgfSxcblxuICAgIGtleVNlcTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50b1NlcSgpLm1hcChrZXlNYXBwZXIpLnRvSW5kZXhlZFNlcSgpO1xuICAgIH0sXG5cbiAgICBsYXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLmZpcnN0KCk7XG4gICAgfSxcblxuICAgIG1heDogZnVuY3Rpb24oY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvcik7XG4gICAgfSxcblxuICAgIG1heEJ5OiBmdW5jdGlvbihtYXBwZXIsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiBtYXhGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IsIG1hcHBlcik7XG4gICAgfSxcblxuICAgIG1pbjogZnVuY3Rpb24oY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvciA/IG5lZyhjb21wYXJhdG9yKSA6IGRlZmF1bHROZWdDb21wYXJhdG9yKTtcbiAgICB9LFxuXG4gICAgbWluQnk6IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvciA/IG5lZyhjb21wYXJhdG9yKSA6IGRlZmF1bHROZWdDb21wYXJhdG9yLCBtYXBwZXIpO1xuICAgIH0sXG5cbiAgICByZXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnNsaWNlKDEpO1xuICAgIH0sXG5cbiAgICBza2lwOiBmdW5jdGlvbihhbW91bnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnNsaWNlKE1hdGgubWF4KDAsIGFtb3VudCkpO1xuICAgIH0sXG5cbiAgICBza2lwTGFzdDogZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgdGhpcy50b1NlcSgpLnJldmVyc2UoKS5za2lwKGFtb3VudCkucmV2ZXJzZSgpKTtcbiAgICB9LFxuXG4gICAgc2tpcFdoaWxlOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBza2lwV2hpbGVGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBza2lwVW50aWw6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2tpcFdoaWxlKG5vdChwcmVkaWNhdGUpLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgc29ydEJ5OiBmdW5jdGlvbihtYXBwZXIsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yLCBtYXBwZXIpKTtcbiAgICB9LFxuXG4gICAgdGFrZTogZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5zbGljZSgwLCBNYXRoLm1heCgwLCBhbW91bnQpKTtcbiAgICB9LFxuXG4gICAgdGFrZUxhc3Q6IGZ1bmN0aW9uKGFtb3VudCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHRoaXMudG9TZXEoKS5yZXZlcnNlKCkudGFrZShhbW91bnQpLnJldmVyc2UoKSk7XG4gICAgfSxcblxuICAgIHRha2VXaGlsZTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgdGFrZVdoaWxlRmFjdG9yeSh0aGlzLCBwcmVkaWNhdGUsIGNvbnRleHQpKTtcbiAgICB9LFxuXG4gICAgdGFrZVVudGlsOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRha2VXaGlsZShub3QocHJlZGljYXRlKSwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIHZhbHVlU2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvSW5kZXhlZFNlcSgpO1xuICAgIH0sXG5cblxuICAgIC8vICMjIyBIYXNoYWJsZSBPYmplY3RcblxuICAgIGhhc2hDb2RlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9faGFzaCB8fCAodGhpcy5fX2hhc2ggPSBoYXNoSXRlcmFibGUodGhpcykpO1xuICAgIH0sXG5cblxuICAgIC8vICMjIyBJbnRlcm5hbFxuXG4gICAgLy8gYWJzdHJhY3QgX19pdGVyYXRlKGZuLCByZXZlcnNlKVxuXG4gICAgLy8gYWJzdHJhY3QgX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKVxuICB9KTtcblxuICAvLyB2YXIgSVNfSVRFUkFCTEVfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9JVEVSQUJMRV9fQEAnO1xuICAvLyB2YXIgSVNfS0VZRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9LRVlFRF9fQEAnO1xuICAvLyB2YXIgSVNfSU5ERVhFRF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0lOREVYRURfX0BAJztcbiAgLy8gdmFyIElTX09SREVSRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9PUkRFUkVEX19AQCc7XG5cbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICBJdGVyYWJsZVByb3RvdHlwZVtJU19JVEVSQUJMRV9TRU5USU5FTF0gPSB0cnVlO1xuICBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl9TWU1CT0xdID0gSXRlcmFibGVQcm90b3R5cGUudmFsdWVzO1xuICBJdGVyYWJsZVByb3RvdHlwZS5fX3RvSlMgPSBJdGVyYWJsZVByb3RvdHlwZS50b0FycmF5O1xuICBJdGVyYWJsZVByb3RvdHlwZS5fX3RvU3RyaW5nTWFwcGVyID0gcXVvdGVTdHJpbmc7XG4gIEl0ZXJhYmxlUHJvdG90eXBlLmluc3BlY3QgPVxuICBJdGVyYWJsZVByb3RvdHlwZS50b1NvdXJjZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy50b1N0cmluZygpOyB9O1xuICBJdGVyYWJsZVByb3RvdHlwZS5jaGFpbiA9IEl0ZXJhYmxlUHJvdG90eXBlLmZsYXRNYXA7XG5cbiAgLy8gVGVtcG9yYXJ5IHdhcm5pbmcgYWJvdXQgdXNpbmcgbGVuZ3RoXG4gIChmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJdGVyYWJsZVByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFJdGVyYWJsZS5ub0xlbmd0aFdhcm5pbmcpIHtcbiAgICAgICAgICAgIHZhciBzdGFjaztcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgc3RhY2sgPSBlcnJvci5zdGFjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGFjay5pbmRleE9mKCdfd3JhcE9iamVjdCcpID09PSAtMSkge1xuICAgICAgICAgICAgICBjb25zb2xlICYmIGNvbnNvbGUud2FybiAmJiBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgJ2l0ZXJhYmxlLmxlbmd0aCBoYXMgYmVlbiBkZXByZWNhdGVkLCAnK1xuICAgICAgICAgICAgICAgICd1c2UgaXRlcmFibGUuc2l6ZSBvciBpdGVyYWJsZS5jb3VudCgpLiAnK1xuICAgICAgICAgICAgICAgICdUaGlzIHdhcm5pbmcgd2lsbCBiZWNvbWUgYSBzaWxlbnQgZXJyb3IgaW4gYSBmdXR1cmUgdmVyc2lvbi4gJyArXG4gICAgICAgICAgICAgICAgc3RhY2tcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0pKCk7XG5cblxuXG4gIG1peGluKEtleWVkSXRlcmFibGUsIHtcblxuICAgIC8vICMjIyBNb3JlIHNlcXVlbnRpYWwgbWV0aG9kc1xuXG4gICAgZmxpcDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgZmxpcEZhY3RvcnkodGhpcykpO1xuICAgIH0sXG5cbiAgICBmaW5kS2V5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHZhciBlbnRyeSA9IHRoaXMuZmluZEVudHJ5KHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgICByZXR1cm4gZW50cnkgJiYgZW50cnlbMF07XG4gICAgfSxcblxuICAgIGZpbmRMYXN0S2V5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLmZpbmRLZXkocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAga2V5T2Y6IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kS2V5KGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBpcyh2YWx1ZSwgc2VhcmNoVmFsdWUpfSk7XG4gICAgfSxcblxuICAgIGxhc3RLZXlPZjogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmRMYXN0S2V5KGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBpcyh2YWx1ZSwgc2VhcmNoVmFsdWUpfSk7XG4gICAgfSxcblxuICAgIG1hcEVudHJpZXM6IGZ1bmN0aW9uKG1hcHBlciwgY29udGV4dCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsXG4gICAgICAgIHRoaXMudG9TZXEoKS5tYXAoXG4gICAgICAgICAgZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gbWFwcGVyLmNhbGwoY29udGV4dCwgW2ssIHZdLCBpdGVyYXRpb25zKyssIHRoaXMkMCl9XG4gICAgICAgICkuZnJvbUVudHJ5U2VxKClcbiAgICAgICk7XG4gICAgfSxcblxuICAgIG1hcEtleXM6IGZ1bmN0aW9uKG1hcHBlciwgY29udGV4dCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsXG4gICAgICAgIHRoaXMudG9TZXEoKS5mbGlwKCkubWFwKFxuICAgICAgICAgIGZ1bmN0aW9uKGssIHYpICB7cmV0dXJuIG1hcHBlci5jYWxsKGNvbnRleHQsIGssIHYsIHRoaXMkMCl9XG4gICAgICAgICkuZmxpcCgpXG4gICAgICApO1xuICAgIH0sXG5cbiAgfSk7XG5cbiAgdmFyIEtleWVkSXRlcmFibGVQcm90b3R5cGUgPSBLZXllZEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgS2V5ZWRJdGVyYWJsZVByb3RvdHlwZVtJU19LRVlFRF9TRU5USU5FTF0gPSB0cnVlO1xuICBLZXllZEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SX1NZTUJPTF0gPSBJdGVyYWJsZVByb3RvdHlwZS5lbnRyaWVzO1xuICBLZXllZEl0ZXJhYmxlUHJvdG90eXBlLl9fdG9KUyA9IEl0ZXJhYmxlUHJvdG90eXBlLnRvT2JqZWN0O1xuICBLZXllZEl0ZXJhYmxlUHJvdG90eXBlLl9fdG9TdHJpbmdNYXBwZXIgPSBmdW5jdGlvbih2LCBrKSAge3JldHVybiBrICsgJzogJyArIHF1b3RlU3RyaW5nKHYpfTtcblxuXG5cbiAgbWl4aW4oSW5kZXhlZEl0ZXJhYmxlLCB7XG5cbiAgICAvLyAjIyMgQ29udmVyc2lvbiB0byBvdGhlciB0eXBlc1xuXG4gICAgdG9LZXllZFNlcTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFRvS2V5ZWRTZXF1ZW5jZSh0aGlzLCBmYWxzZSk7XG4gICAgfSxcblxuXG4gICAgLy8gIyMjIEVTNiBDb2xsZWN0aW9uIG1ldGhvZHMgKEVTNiBBcnJheSBhbmQgTWFwKVxuXG4gICAgZmlsdGVyOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmaWx0ZXJGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgZmFsc2UpKTtcbiAgICB9LFxuXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHZhciBlbnRyeSA9IHRoaXMuZmluZEVudHJ5KHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgICByZXR1cm4gZW50cnkgPyBlbnRyeVswXSA6IC0xO1xuICAgIH0sXG5cbiAgICBpbmRleE9mOiBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgdmFyIGtleSA9IHRoaXMudG9LZXllZFNlcSgpLmtleU9mKHNlYXJjaFZhbHVlKTtcbiAgICAgIHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/IC0xIDoga2V5O1xuICAgIH0sXG5cbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLmluZGV4T2Yoc2VhcmNoVmFsdWUpO1xuICAgIH0sXG5cbiAgICByZXZlcnNlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCByZXZlcnNlRmFjdG9yeSh0aGlzLCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICBzbGljZTogZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNsaWNlRmFjdG9yeSh0aGlzLCBiZWdpbiwgZW5kLCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICBzcGxpY2U6IGZ1bmN0aW9uKGluZGV4LCByZW1vdmVOdW0gLyosIC4uLnZhbHVlcyovKSB7XG4gICAgICB2YXIgbnVtQXJncyA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICByZW1vdmVOdW0gPSBNYXRoLm1heChyZW1vdmVOdW0gfCAwLCAwKTtcbiAgICAgIGlmIChudW1BcmdzID09PSAwIHx8IChudW1BcmdzID09PSAyICYmICFyZW1vdmVOdW0pKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaW5kZXggPSByZXNvbHZlQmVnaW4oaW5kZXgsIHRoaXMuc2l6ZSk7XG4gICAgICB2YXIgc3BsaWNlZCA9IHRoaXMuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgcmV0dXJuIHJlaWZ5KFxuICAgICAgICB0aGlzLFxuICAgICAgICBudW1BcmdzID09PSAxID9cbiAgICAgICAgICBzcGxpY2VkIDpcbiAgICAgICAgICBzcGxpY2VkLmNvbmNhdChhcnJDb3B5KGFyZ3VtZW50cywgMiksIHRoaXMuc2xpY2UoaW5kZXggKyByZW1vdmVOdW0pKVxuICAgICAgKTtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgTW9yZSBjb2xsZWN0aW9uIG1ldGhvZHNcblxuICAgIGZpbmRMYXN0SW5kZXg6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgdmFyIGtleSA9IHRoaXMudG9LZXllZFNlcSgpLmZpbmRMYXN0S2V5KHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgICByZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgPyAtMSA6IGtleTtcbiAgICB9LFxuXG4gICAgZmlyc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KDApO1xuICAgIH0sXG5cbiAgICBmbGF0dGVuOiBmdW5jdGlvbihkZXB0aCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZsYXR0ZW5GYWN0b3J5KHRoaXMsIGRlcHRoLCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICBnZXQ6IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgcmV0dXJuIChpbmRleCA8IDAgfHwgKHRoaXMuc2l6ZSA9PT0gSW5maW5pdHkgfHxcbiAgICAgICAgICAodGhpcy5zaXplICE9PSB1bmRlZmluZWQgJiYgaW5kZXggPiB0aGlzLnNpemUpKSkgP1xuICAgICAgICBub3RTZXRWYWx1ZSA6XG4gICAgICAgIHRoaXMuZmluZChmdW5jdGlvbihfLCBrZXkpICB7cmV0dXJuIGtleSA9PT0gaW5kZXh9LCB1bmRlZmluZWQsIG5vdFNldFZhbHVlKTtcbiAgICB9LFxuXG4gICAgaGFzOiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgcmV0dXJuIGluZGV4ID49IDAgJiYgKHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgdGhpcy5zaXplID09PSBJbmZpbml0eSB8fCBpbmRleCA8IHRoaXMuc2l6ZSA6XG4gICAgICAgIHRoaXMuaW5kZXhPZihpbmRleCkgIT09IC0xXG4gICAgICApO1xuICAgIH0sXG5cbiAgICBpbnRlcnBvc2U6IGZ1bmN0aW9uKHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGludGVycG9zZUZhY3RvcnkodGhpcywgc2VwYXJhdG9yKSk7XG4gICAgfSxcblxuICAgIGludGVybGVhdmU6IGZ1bmN0aW9uKC8qLi4uaXRlcmFibGVzKi8pIHtcbiAgICAgIHZhciBpdGVyYWJsZXMgPSBbdGhpc10uY29uY2F0KGFyckNvcHkoYXJndW1lbnRzKSk7XG4gICAgICB2YXIgemlwcGVkID0gemlwV2l0aEZhY3RvcnkodGhpcy50b1NlcSgpLCBJbmRleGVkU2VxLm9mLCBpdGVyYWJsZXMpO1xuICAgICAgdmFyIGludGVybGVhdmVkID0gemlwcGVkLmZsYXR0ZW4odHJ1ZSk7XG4gICAgICBpZiAoemlwcGVkLnNpemUpIHtcbiAgICAgICAgaW50ZXJsZWF2ZWQuc2l6ZSA9IHppcHBlZC5zaXplICogaXRlcmFibGVzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBpbnRlcmxlYXZlZCk7XG4gICAgfSxcblxuICAgIGxhc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KC0xKTtcbiAgICB9LFxuXG4gICAgc2tpcFdoaWxlOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBza2lwV2hpbGVGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgZmFsc2UpKTtcbiAgICB9LFxuXG4gICAgemlwOiBmdW5jdGlvbigvKiwgLi4uaXRlcmFibGVzICovKSB7XG4gICAgICB2YXIgaXRlcmFibGVzID0gW3RoaXNdLmNvbmNhdChhcnJDb3B5KGFyZ3VtZW50cykpO1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHppcFdpdGhGYWN0b3J5KHRoaXMsIGRlZmF1bHRaaXBwZXIsIGl0ZXJhYmxlcykpO1xuICAgIH0sXG5cbiAgICB6aXBXaXRoOiBmdW5jdGlvbih6aXBwZXIvKiwgLi4uaXRlcmFibGVzICovKSB7XG4gICAgICB2YXIgaXRlcmFibGVzID0gYXJyQ29weShhcmd1bWVudHMpO1xuICAgICAgaXRlcmFibGVzWzBdID0gdGhpcztcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCB6aXBXaXRoRmFjdG9yeSh0aGlzLCB6aXBwZXIsIGl0ZXJhYmxlcykpO1xuICAgIH0sXG5cbiAgfSk7XG5cbiAgSW5kZXhlZEl0ZXJhYmxlLnByb3RvdHlwZVtJU19JTkRFWEVEX1NFTlRJTkVMXSA9IHRydWU7XG4gIEluZGV4ZWRJdGVyYWJsZS5wcm90b3R5cGVbSVNfT1JERVJFRF9TRU5USU5FTF0gPSB0cnVlO1xuXG5cblxuICBtaXhpbihTZXRJdGVyYWJsZSwge1xuXG4gICAgLy8gIyMjIEVTNiBDb2xsZWN0aW9uIG1ldGhvZHMgKEVTNiBBcnJheSBhbmQgTWFwKVxuXG4gICAgZ2V0OiBmdW5jdGlvbih2YWx1ZSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyh2YWx1ZSkgPyB2YWx1ZSA6IG5vdFNldFZhbHVlO1xuICAgIH0sXG5cbiAgICBjb250YWluczogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyh2YWx1ZSk7XG4gICAgfSxcblxuXG4gICAgLy8gIyMjIE1vcmUgc2VxdWVudGlhbCBtZXRob2RzXG5cbiAgICBrZXlTZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWVTZXEoKTtcbiAgICB9LFxuXG4gIH0pO1xuXG4gIFNldEl0ZXJhYmxlLnByb3RvdHlwZS5oYXMgPSBJdGVyYWJsZVByb3RvdHlwZS5jb250YWlucztcblxuXG4gIC8vIE1peGluIHN1YmNsYXNzZXNcblxuICBtaXhpbihLZXllZFNlcSwgS2V5ZWRJdGVyYWJsZS5wcm90b3R5cGUpO1xuICBtaXhpbihJbmRleGVkU2VxLCBJbmRleGVkSXRlcmFibGUucHJvdG90eXBlKTtcbiAgbWl4aW4oU2V0U2VxLCBTZXRJdGVyYWJsZS5wcm90b3R5cGUpO1xuXG4gIG1peGluKEtleWVkQ29sbGVjdGlvbiwgS2V5ZWRJdGVyYWJsZS5wcm90b3R5cGUpO1xuICBtaXhpbihJbmRleGVkQ29sbGVjdGlvbiwgSW5kZXhlZEl0ZXJhYmxlLnByb3RvdHlwZSk7XG4gIG1peGluKFNldENvbGxlY3Rpb24sIFNldEl0ZXJhYmxlLnByb3RvdHlwZSk7XG5cblxuICAvLyAjcHJhZ21hIEhlbHBlciBmdW5jdGlvbnNcblxuICBmdW5jdGlvbiBrZXlNYXBwZXIodiwgaykge1xuICAgIHJldHVybiBrO1xuICB9XG5cbiAgZnVuY3Rpb24gZW50cnlNYXBwZXIodiwgaykge1xuICAgIHJldHVybiBbaywgdl07XG4gIH1cblxuICBmdW5jdGlvbiBub3QocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBuZWcocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIC1wcmVkaWNhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBxdW90ZVN0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0WmlwcGVyKCkge1xuICAgIHJldHVybiBhcnJDb3B5KGFyZ3VtZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0TmVnQ29tcGFyYXRvcihhLCBiKSB7XG4gICAgcmV0dXJuIGEgPCBiID8gMSA6IGEgPiBiID8gLTEgOiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzaEl0ZXJhYmxlKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlLnNpemUgPT09IEluZmluaXR5KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdmFyIG9yZGVyZWQgPSBpc09yZGVyZWQoaXRlcmFibGUpO1xuICAgIHZhciBrZXllZCA9IGlzS2V5ZWQoaXRlcmFibGUpO1xuICAgIHZhciBoID0gb3JkZXJlZCA/IDEgOiAwO1xuICAgIHZhciBzaXplID0gaXRlcmFibGUuX19pdGVyYXRlKFxuICAgICAga2V5ZWQgP1xuICAgICAgICBvcmRlcmVkID9cbiAgICAgICAgICBmdW5jdGlvbih2LCBrKSAgeyBoID0gMzEgKiBoICsgaGFzaE1lcmdlKGhhc2godiksIGhhc2goaykpIHwgMDsgfSA6XG4gICAgICAgICAgZnVuY3Rpb24odiwgaykgIHsgaCA9IGggKyBoYXNoTWVyZ2UoaGFzaCh2KSwgaGFzaChrKSkgfCAwOyB9IDpcbiAgICAgICAgb3JkZXJlZCA/XG4gICAgICAgICAgZnVuY3Rpb24odiApIHsgaCA9IDMxICogaCArIGhhc2godikgfCAwOyB9IDpcbiAgICAgICAgICBmdW5jdGlvbih2ICkgeyBoID0gaCArIGhhc2godikgfCAwOyB9XG4gICAgKTtcbiAgICByZXR1cm4gbXVybXVySGFzaE9mU2l6ZShzaXplLCBoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG11cm11ckhhc2hPZlNpemUoc2l6ZSwgaCkge1xuICAgIGggPSBNYXRoX19pbXVsKGgsIDB4Q0M5RTJENTEpO1xuICAgIGggPSBNYXRoX19pbXVsKGggPDwgMTUgfCBoID4+PiAtMTUsIDB4MUI4NzM1OTMpO1xuICAgIGggPSBNYXRoX19pbXVsKGggPDwgMTMgfCBoID4+PiAtMTMsIDUpO1xuICAgIGggPSAoaCArIDB4RTY1NDZCNjQgfCAwKSBeIHNpemU7XG4gICAgaCA9IE1hdGhfX2ltdWwoaCBeIGggPj4+IDE2LCAweDg1RUJDQTZCKTtcbiAgICBoID0gTWF0aF9faW11bChoIF4gaCA+Pj4gMTMsIDB4QzJCMkFFMzUpO1xuICAgIGggPSBzbWkoaCBeIGggPj4+IDE2KTtcbiAgICByZXR1cm4gaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc2hNZXJnZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgXiBiICsgMHg5RTM3NzlCOSArIChhIDw8IDYpICsgKGEgPj4gMikgfCAwOyAvLyBpbnRcbiAgfVxuXG4gIHZhciBJbW11dGFibGUgPSB7XG5cbiAgICBJdGVyYWJsZTogSXRlcmFibGUsXG5cbiAgICBTZXE6IFNlcSxcbiAgICBDb2xsZWN0aW9uOiBDb2xsZWN0aW9uLFxuICAgIE1hcDogTWFwLFxuICAgIE9yZGVyZWRNYXA6IE9yZGVyZWRNYXAsXG4gICAgTGlzdDogTGlzdCxcbiAgICBTdGFjazogU3RhY2ssXG4gICAgU2V0OiBTZXQsXG4gICAgT3JkZXJlZFNldDogT3JkZXJlZFNldCxcblxuICAgIFJlY29yZDogUmVjb3JkLFxuICAgIFJhbmdlOiBSYW5nZSxcbiAgICBSZXBlYXQ6IFJlcGVhdCxcblxuICAgIGlzOiBpcyxcbiAgICBmcm9tSlM6IGZyb21KUyxcblxuICB9O1xuXG4gIHJldHVybiBJbW11dGFibGU7XG5cbn0pKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9pbW1zdHJ1Y3Qvfi9pbW11dGFibGUvZGlzdC9pbW11dGFibGUuanNcbiAqKiBtb2R1bGUgaWQgPSA1OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiZnVuY3Rpb24gaXNSZWFjdENsYXNzaXNoKG9iaikge1xuICBpZiAoIW9iaikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChvYmoucHJvdG90eXBlICYmIHR5cGVvZiBvYmoucHJvdG90eXBlLnJlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFJlYWN0IDAuMTNcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChvYmoudHlwZSAmJiBvYmoudHlwZS5wcm90b3R5cGUgJiYgdHlwZW9mIG9iai50eXBlLnByb3RvdHlwZS5yZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBSZWFjdCAwLjEyIGFuZCBlYXJsaWVyXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNSZWFjdENsYXNzaXNoO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0LWhvdC1sb2FkZXIvaXNSZWFjdENsYXNzaXNoLmpzXG4gKiogbW9kdWxlIGlkID0gNTlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDU1NQcm9wZXJ0eVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENTUyBwcm9wZXJ0aWVzIHdoaWNoIGFjY2VwdCBudW1iZXJzIGJ1dCBhcmUgbm90IGluIHVuaXRzIG9mIFwicHhcIi5cbiAqL1xudmFyIGlzVW5pdGxlc3NOdW1iZXIgPSB7XG4gIGNvbHVtbkNvdW50OiB0cnVlLFxuICBmbGV4OiB0cnVlLFxuICBmbGV4R3JvdzogdHJ1ZSxcbiAgZmxleFNocmluazogdHJ1ZSxcbiAgZm9udFdlaWdodDogdHJ1ZSxcbiAgbGluZUNsYW1wOiB0cnVlLFxuICBsaW5lSGVpZ2h0OiB0cnVlLFxuICBvcGFjaXR5OiB0cnVlLFxuICBvcmRlcjogdHJ1ZSxcbiAgb3JwaGFuczogdHJ1ZSxcbiAgd2lkb3dzOiB0cnVlLFxuICB6SW5kZXg6IHRydWUsXG4gIHpvb206IHRydWUsXG5cbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlT3BhY2l0eTogdHJ1ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IHZlbmRvci1zcGVjaWZpYyBwcmVmaXgsIGVnOiBXZWJraXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgc3R5bGUgbmFtZSwgZWc6IHRyYW5zaXRpb25EdXJhdGlvblxuICogQHJldHVybiB7c3RyaW5nfSBzdHlsZSBuYW1lIHByZWZpeGVkIHdpdGggYHByZWZpeGAsIHByb3Blcmx5IGNhbWVsQ2FzZWQsIGVnOlxuICogV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uXG4gKi9cbmZ1bmN0aW9uIHByZWZpeEtleShwcmVmaXgsIGtleSkge1xuICByZXR1cm4gcHJlZml4ICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxKTtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHN0eWxlIG5hbWVzIHRoYXQgbWF5IGNvbWUgcGFzc2VkIGluIHByZWZpeGVkIGJ5IGFkZGluZyBwZXJtdXRhdGlvbnNcbiAqIG9mIHZlbmRvciBwcmVmaXhlcy5cbiAqL1xudmFyIHByZWZpeGVzID0gWydXZWJraXQnLCAnbXMnLCAnTW96JywgJ08nXTtcblxuLy8gVXNpbmcgT2JqZWN0LmtleXMgaGVyZSwgb3IgZWxzZSB0aGUgdmFuaWxsYSBmb3ItaW4gbG9vcCBtYWtlcyBJRTggZ28gaW50byBhblxuLy8gaW5maW5pdGUgbG9vcCwgYmVjYXVzZSBpdCBpdGVyYXRlcyBvdmVyIHRoZSBuZXdseSBhZGRlZCBwcm9wcyB0b28uXG5PYmplY3Qua2V5cyhpc1VuaXRsZXNzTnVtYmVyKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgcHJlZml4ZXMuZm9yRWFjaChmdW5jdGlvbihwcmVmaXgpIHtcbiAgICBpc1VuaXRsZXNzTnVtYmVyW3ByZWZpeEtleShwcmVmaXgsIHByb3ApXSA9IGlzVW5pdGxlc3NOdW1iZXJbcHJvcF07XG4gIH0pO1xufSk7XG5cbi8qKlxuICogTW9zdCBzdHlsZSBwcm9wZXJ0aWVzIGNhbiBiZSB1bnNldCBieSBkb2luZyAuc3R5bGVbcHJvcF0gPSAnJyBidXQgSUU4XG4gKiBkb2Vzbid0IGxpa2UgZG9pbmcgdGhhdCB3aXRoIHNob3J0aGFuZCBwcm9wZXJ0aWVzIHNvIGZvciB0aGUgcHJvcGVydGllcyB0aGF0XG4gKiBJRTggYnJlYWtzIG9uLCB3aGljaCBhcmUgbGlzdGVkIGhlcmUsIHdlIGluc3RlYWQgdW5zZXQgZWFjaCBvZiB0aGVcbiAqIGluZGl2aWR1YWwgcHJvcGVydGllcy4gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzg1LlxuICogVGhlIDQtdmFsdWUgJ2Nsb2NrJyBwcm9wZXJ0aWVzIGxpa2UgbWFyZ2luLCBwYWRkaW5nLCBib3JkZXItd2lkdGggc2VlbSB0b1xuICogYmVoYXZlIHdpdGhvdXQgYW55IHByb2JsZW1zLiBDdXJpb3VzbHksIGxpc3Qtc3R5bGUgd29ya3MgdG9vIHdpdGhvdXQgYW55XG4gKiBzcGVjaWFsIHByb2RkaW5nLlxuICovXG52YXIgc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zID0ge1xuICBiYWNrZ3JvdW5kOiB7XG4gICAgYmFja2dyb3VuZEltYWdlOiB0cnVlLFxuICAgIGJhY2tncm91bmRQb3NpdGlvbjogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUmVwZWF0OiB0cnVlLFxuICAgIGJhY2tncm91bmRDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXI6IHtcbiAgICBib3JkZXJXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJCb3R0b206IHtcbiAgICBib3JkZXJCb3R0b21XaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJCb3R0b21TdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJCb3R0b21Db2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJMZWZ0OiB7XG4gICAgYm9yZGVyTGVmdFdpZHRoOiB0cnVlLFxuICAgIGJvcmRlckxlZnRTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJMZWZ0Q29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyUmlnaHQ6IHtcbiAgICBib3JkZXJSaWdodFdpZHRoOiB0cnVlLFxuICAgIGJvcmRlclJpZ2h0U3R5bGU6IHRydWUsXG4gICAgYm9yZGVyUmlnaHRDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJUb3A6IHtcbiAgICBib3JkZXJUb3BXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJUb3BTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJUb3BDb2xvcjogdHJ1ZVxuICB9LFxuICBmb250OiB7XG4gICAgZm9udFN0eWxlOiB0cnVlLFxuICAgIGZvbnRWYXJpYW50OiB0cnVlLFxuICAgIGZvbnRXZWlnaHQ6IHRydWUsXG4gICAgZm9udFNpemU6IHRydWUsXG4gICAgbGluZUhlaWdodDogdHJ1ZSxcbiAgICBmb250RmFtaWx5OiB0cnVlXG4gIH1cbn07XG5cbnZhciBDU1NQcm9wZXJ0eSA9IHtcbiAgaXNVbml0bGVzc051bWJlcjogaXNVbml0bGVzc051bWJlcixcbiAgc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zOiBzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ1NTUHJvcGVydHk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvQ1NTUHJvcGVydHkuanNcbiAqKiBtb2R1bGUgaWQgPSA2MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENTU1Byb3BlcnR5T3BlcmF0aW9uc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIENTU1Byb3BlcnR5ID0gcmVxdWlyZShcIi4vQ1NTUHJvcGVydHlcIik7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIGNhbWVsaXplU3R5bGVOYW1lID0gcmVxdWlyZShcIi4vY2FtZWxpemVTdHlsZU5hbWVcIik7XG52YXIgZGFuZ2Vyb3VzU3R5bGVWYWx1ZSA9IHJlcXVpcmUoXCIuL2Rhbmdlcm91c1N0eWxlVmFsdWVcIik7XG52YXIgaHlwaGVuYXRlU3R5bGVOYW1lID0gcmVxdWlyZShcIi4vaHlwaGVuYXRlU3R5bGVOYW1lXCIpO1xudmFyIG1lbW9pemVTdHJpbmdPbmx5ID0gcmVxdWlyZShcIi4vbWVtb2l6ZVN0cmluZ09ubHlcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciBwcm9jZXNzU3R5bGVOYW1lID0gbWVtb2l6ZVN0cmluZ09ubHkoZnVuY3Rpb24oc3R5bGVOYW1lKSB7XG4gIHJldHVybiBoeXBoZW5hdGVTdHlsZU5hbWUoc3R5bGVOYW1lKTtcbn0pO1xuXG52YXIgc3R5bGVGbG9hdEFjY2Vzc29yID0gJ2Nzc0Zsb2F0JztcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gSUU4IG9ubHkgc3VwcG9ydHMgYWNjZXNzaW5nIGNzc0Zsb2F0IChzdGFuZGFyZCkgYXMgc3R5bGVGbG9hdFxuICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLmNzc0Zsb2F0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsZUZsb2F0QWNjZXNzb3IgPSAnc3R5bGVGbG9hdCc7XG4gIH1cbn1cblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICB2YXIgd2FybmVkU3R5bGVOYW1lcyA9IHt9O1xuXG4gIHZhciB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICBmYWxzZSxcbiAgICAgICdVbnN1cHBvcnRlZCBzdHlsZSBwcm9wZXJ0eSAnICsgbmFtZSArICcuIERpZCB5b3UgbWVhbiAnICtcbiAgICAgIGNhbWVsaXplU3R5bGVOYW1lKG5hbWUpICsgJz8nXG4gICAgKSA6IG51bGwpO1xuICB9O1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIGRlYWxpbmcgd2l0aCBDU1MgcHJvcGVydGllcy5cbiAqL1xudmFyIENTU1Byb3BlcnR5T3BlcmF0aW9ucyA9IHtcblxuICAvKipcbiAgICogU2VyaWFsaXplcyBhIG1hcHBpbmcgb2Ygc3R5bGUgcHJvcGVydGllcyBmb3IgdXNlIGFzIGlubGluZSBzdHlsZXM6XG4gICAqXG4gICAqICAgPiBjcmVhdGVNYXJrdXBGb3JTdHlsZXMoe3dpZHRoOiAnMjAwcHgnLCBoZWlnaHQ6IDB9KVxuICAgKiAgIFwid2lkdGg6MjAwcHg7aGVpZ2h0OjA7XCJcbiAgICpcbiAgICogVW5kZWZpbmVkIHZhbHVlcyBhcmUgaWdub3JlZCBzbyB0aGF0IGRlY2xhcmF0aXZlIHByb2dyYW1taW5nIGlzIGVhc2llci5cbiAgICogVGhlIHJlc3VsdCBzaG91bGQgYmUgSFRNTC1lc2NhcGVkIGJlZm9yZSBpbnNlcnRpb24gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzXG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqL1xuICBjcmVhdGVNYXJrdXBGb3JTdHlsZXM6IGZ1bmN0aW9uKHN0eWxlcykge1xuICAgIHZhciBzZXJpYWxpemVkID0gJyc7XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHN0eWxlcykge1xuICAgICAgaWYgKCFzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgaWYgKHN0eWxlTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgICAgICAgIHdhcm5IeXBoZW5hdGVkU3R5bGVOYW1lKHN0eWxlTmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBzdHlsZVZhbHVlID0gc3R5bGVzW3N0eWxlTmFtZV07XG4gICAgICBpZiAoc3R5bGVWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHNlcmlhbGl6ZWQgKz0gcHJvY2Vzc1N0eWxlTmFtZShzdHlsZU5hbWUpICsgJzonO1xuICAgICAgICBzZXJpYWxpemVkICs9IGRhbmdlcm91c1N0eWxlVmFsdWUoc3R5bGVOYW1lLCBzdHlsZVZhbHVlKSArICc7JztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWQgfHwgbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB0aGUgdmFsdWUgZm9yIG11bHRpcGxlIHN0eWxlcyBvbiBhIG5vZGUuICBJZiBhIHZhbHVlIGlzIHNwZWNpZmllZCBhc1xuICAgKiAnJyAoZW1wdHkgc3RyaW5nKSwgdGhlIGNvcnJlc3BvbmRpbmcgc3R5bGUgcHJvcGVydHkgd2lsbCBiZSB1bnNldC5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdHlsZXNcbiAgICovXG4gIHNldFZhbHVlRm9yU3R5bGVzOiBmdW5jdGlvbihub2RlLCBzdHlsZXMpIHtcbiAgICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIGlmIChzdHlsZU5hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgICAgICB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZShzdHlsZU5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgc3R5bGVWYWx1ZSA9IGRhbmdlcm91c1N0eWxlVmFsdWUoc3R5bGVOYW1lLCBzdHlsZXNbc3R5bGVOYW1lXSk7XG4gICAgICBpZiAoc3R5bGVOYW1lID09PSAnZmxvYXQnKSB7XG4gICAgICAgIHN0eWxlTmFtZSA9IHN0eWxlRmxvYXRBY2Nlc3NvcjtcbiAgICAgIH1cbiAgICAgIGlmIChzdHlsZVZhbHVlKSB7XG4gICAgICAgIHN0eWxlW3N0eWxlTmFtZV0gPSBzdHlsZVZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGV4cGFuc2lvbiA9IENTU1Byb3BlcnR5LnNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uc1tzdHlsZU5hbWVdO1xuICAgICAgICBpZiAoZXhwYW5zaW9uKSB7XG4gICAgICAgICAgLy8gU2hvcnRoYW5kIHByb3BlcnR5IHRoYXQgSUU4IHdvbid0IGxpa2UgdW5zZXR0aW5nLCBzbyB1bnNldCBlYWNoXG4gICAgICAgICAgLy8gY29tcG9uZW50IHRvIHBsYWNhdGUgaXRcbiAgICAgICAgICBmb3IgKHZhciBpbmRpdmlkdWFsU3R5bGVOYW1lIGluIGV4cGFuc2lvbikge1xuICAgICAgICAgICAgc3R5bGVbaW5kaXZpZHVhbFN0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGVbc3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ1NTUHJvcGVydHlPcGVyYXRpb25zO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL0NTU1Byb3BlcnR5T3BlcmF0aW9ucy5qc1xuICoqIG1vZHVsZSBpZCA9IDYxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQbHVnaW5SZWdpc3RyeVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBJbmplY3RhYmxlIG9yZGVyaW5nIG9mIGV2ZW50IHBsdWdpbnMuXG4gKi9cbnZhciBFdmVudFBsdWdpbk9yZGVyID0gbnVsbDtcblxuLyoqXG4gKiBJbmplY3RhYmxlIG1hcHBpbmcgZnJvbSBuYW1lcyB0byBldmVudCBwbHVnaW4gbW9kdWxlcy5cbiAqL1xudmFyIG5hbWVzVG9QbHVnaW5zID0ge307XG5cbi8qKlxuICogUmVjb21wdXRlcyB0aGUgcGx1Z2luIGxpc3QgdXNpbmcgdGhlIGluamVjdGVkIHBsdWdpbnMgYW5kIHBsdWdpbiBvcmRlcmluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpIHtcbiAgaWYgKCFFdmVudFBsdWdpbk9yZGVyKSB7XG4gICAgLy8gV2FpdCB1bnRpbCBhbiBgRXZlbnRQbHVnaW5PcmRlcmAgaXMgaW5qZWN0ZWQuXG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAodmFyIHBsdWdpbk5hbWUgaW4gbmFtZXNUb1BsdWdpbnMpIHtcbiAgICB2YXIgUGx1Z2luTW9kdWxlID0gbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgdmFyIHBsdWdpbkluZGV4ID0gRXZlbnRQbHVnaW5PcmRlci5pbmRleE9mKHBsdWdpbk5hbWUpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBwbHVnaW5JbmRleCA+IC0xLFxuICAgICAgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgZXZlbnQgcGx1Z2lucyB0aGF0IGRvIG5vdCBleGlzdCBpbiAnICtcbiAgICAgICd0aGUgcGx1Z2luIG9yZGVyaW5nLCBgJXNgLicsXG4gICAgICBwbHVnaW5OYW1lXG4gICAgKSA6IGludmFyaWFudChwbHVnaW5JbmRleCA+IC0xKSk7XG4gICAgaWYgKEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2luc1twbHVnaW5JbmRleF0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgUGx1Z2luTW9kdWxlLmV4dHJhY3RFdmVudHMsXG4gICAgICAnRXZlbnRQbHVnaW5SZWdpc3RyeTogRXZlbnQgcGx1Z2lucyBtdXN0IGltcGxlbWVudCBhbiBgZXh0cmFjdEV2ZW50c2AgJyArXG4gICAgICAnbWV0aG9kLCBidXQgYCVzYCBkb2VzIG5vdC4nLFxuICAgICAgcGx1Z2luTmFtZVxuICAgICkgOiBpbnZhcmlhbnQoUGx1Z2luTW9kdWxlLmV4dHJhY3RFdmVudHMpKTtcbiAgICBFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnNbcGx1Z2luSW5kZXhdID0gUGx1Z2luTW9kdWxlO1xuICAgIHZhciBwdWJsaXNoZWRFdmVudHMgPSBQbHVnaW5Nb2R1bGUuZXZlbnRUeXBlcztcbiAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gcHVibGlzaGVkRXZlbnRzKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBwdWJsaXNoRXZlbnRGb3JQbHVnaW4oXG4gICAgICAgICAgcHVibGlzaGVkRXZlbnRzW2V2ZW50TmFtZV0sXG4gICAgICAgICAgUGx1Z2luTW9kdWxlLFxuICAgICAgICAgIGV2ZW50TmFtZVxuICAgICAgICApLFxuICAgICAgICAnRXZlbnRQbHVnaW5SZWdpc3RyeTogRmFpbGVkIHRvIHB1Ymxpc2ggZXZlbnQgYCVzYCBmb3IgcGx1Z2luIGAlc2AuJyxcbiAgICAgICAgZXZlbnROYW1lLFxuICAgICAgICBwbHVnaW5OYW1lXG4gICAgICApIDogaW52YXJpYW50KHB1Ymxpc2hFdmVudEZvclBsdWdpbihcbiAgICAgICAgcHVibGlzaGVkRXZlbnRzW2V2ZW50TmFtZV0sXG4gICAgICAgIFBsdWdpbk1vZHVsZSxcbiAgICAgICAgZXZlbnROYW1lXG4gICAgICApKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUHVibGlzaGVzIGFuIGV2ZW50IHNvIHRoYXQgaXQgY2FuIGJlIGRpc3BhdGNoZWQgYnkgdGhlIHN1cHBsaWVkIHBsdWdpbi5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgRGlzcGF0Y2ggY29uZmlndXJhdGlvbiBmb3IgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtvYmplY3R9IFBsdWdpbk1vZHVsZSBQbHVnaW4gcHVibGlzaGluZyB0aGUgZXZlbnQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCB3YXMgc3VjY2Vzc2Z1bGx5IHB1Ymxpc2hlZC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hFdmVudEZvclBsdWdpbihkaXNwYXRjaENvbmZpZywgUGx1Z2luTW9kdWxlLCBldmVudE5hbWUpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAhRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSxcbiAgICAnRXZlbnRQbHVnaW5IdWI6IE1vcmUgdGhhbiBvbmUgcGx1Z2luIGF0dGVtcHRlZCB0byBwdWJsaXNoIHRoZSBzYW1lICcgK1xuICAgICdldmVudCBuYW1lLCBgJXNgLicsXG4gICAgZXZlbnROYW1lXG4gICkgOiBpbnZhcmlhbnQoIUV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkpKTtcbiAgRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3NbZXZlbnROYW1lXSA9IGRpc3BhdGNoQ29uZmlnO1xuXG4gIHZhciBwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyA9IGRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO1xuICBpZiAocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICBmb3IgKHZhciBwaGFzZU5hbWUgaW4gcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICAgIGlmIChwaGFzZWRSZWdpc3RyYXRpb25OYW1lcy5oYXNPd25Qcm9wZXJ0eShwaGFzZU5hbWUpKSB7XG4gICAgICAgIHZhciBwaGFzZWRSZWdpc3RyYXRpb25OYW1lID0gcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcGhhc2VOYW1lXTtcbiAgICAgICAgcHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUoXG4gICAgICAgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZSxcbiAgICAgICAgICBQbHVnaW5Nb2R1bGUsXG4gICAgICAgICAgZXZlbnROYW1lXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICBwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZShcbiAgICAgIGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUsXG4gICAgICBQbHVnaW5Nb2R1bGUsXG4gICAgICBldmVudE5hbWVcbiAgICApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBQdWJsaXNoZXMgYSByZWdpc3RyYXRpb24gbmFtZSB0aGF0IGlzIHVzZWQgdG8gaWRlbnRpZnkgZGlzcGF0Y2hlZCBldmVudHMgYW5kXG4gKiBjYW4gYmUgdXNlZCB3aXRoIGBFdmVudFBsdWdpbkh1Yi5wdXRMaXN0ZW5lcmAgdG8gcmVnaXN0ZXIgbGlzdGVuZXJzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIFJlZ2lzdHJhdGlvbiBuYW1lIHRvIGFkZC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBQbHVnaW5Nb2R1bGUgUGx1Z2luIHB1Ymxpc2hpbmcgdGhlIGV2ZW50LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUocmVnaXN0cmF0aW9uTmFtZSwgUGx1Z2luTW9kdWxlLCBldmVudE5hbWUpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAhRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSxcbiAgICAnRXZlbnRQbHVnaW5IdWI6IE1vcmUgdGhhbiBvbmUgcGx1Z2luIGF0dGVtcHRlZCB0byBwdWJsaXNoIHRoZSBzYW1lICcgK1xuICAgICdyZWdpc3RyYXRpb24gbmFtZSwgYCVzYC4nLFxuICAgIHJlZ2lzdHJhdGlvbk5hbWVcbiAgKSA6IGludmFyaWFudCghRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSkpO1xuICBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdID0gUGx1Z2luTW9kdWxlO1xuICBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV0gPVxuICAgIFBsdWdpbk1vZHVsZS5ldmVudFR5cGVzW2V2ZW50TmFtZV0uZGVwZW5kZW5jaWVzO1xufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBwbHVnaW5zIHNvIHRoYXQgdGhleSBjYW4gZXh0cmFjdCBhbmQgZGlzcGF0Y2ggZXZlbnRzLlxuICpcbiAqIEBzZWUge0V2ZW50UGx1Z2luSHVifVxuICovXG52YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHtcblxuICAvKipcbiAgICogT3JkZXJlZCBsaXN0IG9mIGluamVjdGVkIHBsdWdpbnMuXG4gICAqL1xuICBwbHVnaW5zOiBbXSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIGV2ZW50IG5hbWUgdG8gZGlzcGF0Y2ggY29uZmlnXG4gICAqL1xuICBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gcmVnaXN0cmF0aW9uIG5hbWUgdG8gcGx1Z2luIG1vZHVsZVxuICAgKi9cbiAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gcmVnaXN0cmF0aW9uIG5hbWUgdG8gZXZlbnQgbmFtZVxuICAgKi9cbiAgcmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczoge30sXG5cbiAgLyoqXG4gICAqIEluamVjdHMgYW4gb3JkZXJpbmcgb2YgcGx1Z2lucyAoYnkgcGx1Z2luIG5hbWUpLiBUaGlzIGFsbG93cyB0aGUgb3JkZXJpbmdcbiAgICogdG8gYmUgZGVjb3VwbGVkIGZyb20gaW5qZWN0aW9uIG9mIHRoZSBhY3R1YWwgcGx1Z2lucyBzbyB0aGF0IG9yZGVyaW5nIGlzXG4gICAqIGFsd2F5cyBkZXRlcm1pbmlzdGljIHJlZ2FyZGxlc3Mgb2YgcGFja2FnaW5nLCBvbi10aGUtZmx5IGluamVjdGlvbiwgZXRjLlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5fSBJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXJcbiAgICogQGludGVybmFsXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbk9yZGVyfVxuICAgKi9cbiAgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjogZnVuY3Rpb24oSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICFFdmVudFBsdWdpbk9yZGVyLFxuICAgICAgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgZXZlbnQgcGx1Z2luIG9yZGVyaW5nIG1vcmUgdGhhbiAnICtcbiAgICAgICdvbmNlLiBZb3UgYXJlIGxpa2VseSB0cnlpbmcgdG8gbG9hZCBtb3JlIHRoYW4gb25lIGNvcHkgb2YgUmVhY3QuJ1xuICAgICkgOiBpbnZhcmlhbnQoIUV2ZW50UGx1Z2luT3JkZXIpKTtcbiAgICAvLyBDbG9uZSB0aGUgb3JkZXJpbmcgc28gaXQgY2Fubm90IGJlIGR5bmFtaWNhbGx5IG11dGF0ZWQuXG4gICAgRXZlbnRQbHVnaW5PcmRlciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKEluamVjdGVkRXZlbnRQbHVnaW5PcmRlcik7XG4gICAgcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKTtcbiAgfSxcblxuICAvKipcbiAgICogSW5qZWN0cyBwbHVnaW5zIHRvIGJlIHVzZWQgYnkgYEV2ZW50UGx1Z2luSHViYC4gVGhlIHBsdWdpbiBuYW1lcyBtdXN0IGJlXG4gICAqIGluIHRoZSBvcmRlcmluZyBpbmplY3RlZCBieSBgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcmAuXG4gICAqXG4gICAqIFBsdWdpbnMgY2FuIGJlIGluamVjdGVkIGFzIHBhcnQgb2YgcGFnZSBpbml0aWFsaXphdGlvbiBvciBvbi10aGUtZmx5LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyBNYXAgZnJvbSBuYW1lcyB0byBwbHVnaW4gbW9kdWxlcy5cbiAgICogQGludGVybmFsXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWV9XG4gICAqL1xuICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IGZ1bmN0aW9uKGluamVjdGVkTmFtZXNUb1BsdWdpbnMpIHtcbiAgICB2YXIgaXNPcmRlcmluZ0RpcnR5ID0gZmFsc2U7XG4gICAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBpbmplY3RlZE5hbWVzVG9QbHVnaW5zKSB7XG4gICAgICBpZiAoIWluamVjdGVkTmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgUGx1Z2luTW9kdWxlID0gaW5qZWN0ZWROYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXTtcbiAgICAgIGlmICghbmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkgfHxcbiAgICAgICAgICBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSAhPT0gUGx1Z2luTW9kdWxlKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgIW5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdLFxuICAgICAgICAgICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IHR3byBkaWZmZXJlbnQgZXZlbnQgcGx1Z2lucyAnICtcbiAgICAgICAgICAndXNpbmcgdGhlIHNhbWUgbmFtZSwgYCVzYC4nLFxuICAgICAgICAgIHBsdWdpbk5hbWVcbiAgICAgICAgKSA6IGludmFyaWFudCghbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV0pKTtcbiAgICAgICAgbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV0gPSBQbHVnaW5Nb2R1bGU7XG4gICAgICAgIGlzT3JkZXJpbmdEaXJ0eSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc09yZGVyaW5nRGlydHkpIHtcbiAgICAgIHJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBMb29rcyB1cCB0aGUgcGx1Z2luIGZvciB0aGUgc3VwcGxpZWQgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBBIHN5bnRoZXRpYyBldmVudC5cbiAgICogQHJldHVybiB7P29iamVjdH0gVGhlIHBsdWdpbiB0aGF0IGNyZWF0ZWQgdGhlIHN1cHBsaWVkIGV2ZW50LlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGdldFBsdWdpbk1vZHVsZUZvckV2ZW50OiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBkaXNwYXRjaENvbmZpZyA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnO1xuICAgIGlmIChkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgICByZXR1cm4gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tcbiAgICAgICAgZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZVxuICAgICAgXSB8fCBudWxsO1xuICAgIH1cbiAgICBmb3IgKHZhciBwaGFzZSBpbiBkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgICAgaWYgKCFkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcy5oYXNPd25Qcm9wZXJ0eShwaGFzZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgUGx1Z2luTW9kdWxlID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tcbiAgICAgICAgZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcGhhc2VdXG4gICAgICBdO1xuICAgICAgaWYgKFBsdWdpbk1vZHVsZSkge1xuICAgICAgICByZXR1cm4gUGx1Z2luTW9kdWxlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Jlc2V0RXZlbnRQbHVnaW5zOiBmdW5jdGlvbigpIHtcbiAgICBFdmVudFBsdWdpbk9yZGVyID0gbnVsbDtcbiAgICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIG5hbWVzVG9QbHVnaW5zKSB7XG4gICAgICBpZiAobmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkpIHtcbiAgICAgICAgZGVsZXRlIG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICBFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnMubGVuZ3RoID0gMDtcblxuICAgIHZhciBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncztcbiAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzKSB7XG4gICAgICBpZiAoZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgZGVsZXRlIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnc1tldmVudE5hbWVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZWdpc3RyYXRpb25OYW1lTW9kdWxlcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM7XG4gICAgZm9yICh2YXIgcmVnaXN0cmF0aW9uTmFtZSBpbiByZWdpc3RyYXRpb25OYW1lTW9kdWxlcykge1xuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHJlZ2lzdHJhdGlvbk5hbWUpKSB7XG4gICAgICAgIGRlbGV0ZSByZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL0V2ZW50UGx1Z2luUmVnaXN0cnkuanNcbiAqKiBtb2R1bGUgaWQgPSA2MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBMb2NhbEV2ZW50VHJhcE1peGluXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIik7XG5cbnZhciBhY2N1bXVsYXRlSW50byA9IHJlcXVpcmUoXCIuL2FjY3VtdWxhdGVJbnRvXCIpO1xudmFyIGZvckVhY2hBY2N1bXVsYXRlZCA9IHJlcXVpcmUoXCIuL2ZvckVhY2hBY2N1bXVsYXRlZFwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbmZ1bmN0aW9uIHJlbW92ZShldmVudCkge1xuICBldmVudC5yZW1vdmUoKTtcbn1cblxudmFyIExvY2FsRXZlbnRUcmFwTWl4aW4gPSB7XG4gIHRyYXBCdWJibGVkRXZlbnQ6ZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KHRoaXMuaXNNb3VudGVkKCksICdNdXN0IGJlIG1vdW50ZWQgdG8gdHJhcCBldmVudHMnKSA6IGludmFyaWFudCh0aGlzLmlzTW91bnRlZCgpKSk7XG4gICAgdmFyIGxpc3RlbmVyID0gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICBoYW5kbGVyQmFzZU5hbWUsXG4gICAgICB0aGlzLmdldERPTU5vZGUoKVxuICAgICk7XG4gICAgdGhpcy5fbG9jYWxFdmVudExpc3RlbmVycyA9XG4gICAgICBhY2N1bXVsYXRlSW50byh0aGlzLl9sb2NhbEV2ZW50TGlzdGVuZXJzLCBsaXN0ZW5lcik7XG4gIH0sXG5cbiAgLy8gdHJhcENhcHR1cmVkRXZlbnQgd291bGQgbG9vayBuZWFybHkgaWRlbnRpY2FsLiBXZSBkb24ndCBpbXBsZW1lbnQgdGhhdFxuICAvLyBtZXRob2QgYmVjYXVzZSBpdCBpc24ndCBjdXJyZW50bHkgbmVlZGVkLlxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OmZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9sb2NhbEV2ZW50TGlzdGVuZXJzKSB7XG4gICAgICBmb3JFYWNoQWNjdW11bGF0ZWQodGhpcy5fbG9jYWxFdmVudExpc3RlbmVycywgcmVtb3ZlKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTG9jYWxFdmVudFRyYXBNaXhpbjtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9Mb2NhbEV2ZW50VHJhcE1peGluLmpzXG4gKiogbW9kdWxlIGlkID0gNjNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUNvbXBvbmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIENTU1Byb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoXCIuL0NTU1Byb3BlcnR5T3BlcmF0aW9uc1wiKTtcbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpO1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5T3BlcmF0aW9uc1wiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRcIik7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xudmFyIFJlYWN0TXVsdGlDaGlsZCA9IHJlcXVpcmUoXCIuL1JlYWN0TXVsdGlDaGlsZFwiKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKFwiLi9SZWFjdFBlcmZcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGVzY2FwZVRleHRGb3JCcm93c2VyID0gcmVxdWlyZShcIi4vZXNjYXBlVGV4dEZvckJyb3dzZXJcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKFwiLi9pc0V2ZW50U3VwcG9ydGVkXCIpO1xudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG52YXIgbW9uaXRvckNvZGVVc2UgPSByZXF1aXJlKFwiLi9tb25pdG9yQ29kZVVzZVwiKTtcblxudmFyIGRlbGV0ZUxpc3RlbmVyID0gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmRlbGV0ZUxpc3RlbmVyO1xudmFyIGxpc3RlblRvID0gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmxpc3RlblRvO1xudmFyIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzID0gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzO1xuXG4vLyBGb3IgcXVpY2tseSBtYXRjaGluZyBjaGlsZHJlbiB0eXBlLCB0byB0ZXN0IGlmIGNhbiBiZSB0cmVhdGVkIGFzIGNvbnRlbnQuXG52YXIgQ09OVEVOVF9UWVBFUyA9IHsnc3RyaW5nJzogdHJ1ZSwgJ251bWJlcic6IHRydWV9O1xuXG52YXIgU1RZTEUgPSBrZXlPZih7c3R5bGU6IG51bGx9KTtcblxudmFyIEVMRU1FTlRfTk9ERV9UWVBFID0gMTtcblxuLyoqXG4gKiBAcGFyYW0gez9vYmplY3R9IHByb3BzXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFZhbGlkUHJvcHMocHJvcHMpIHtcbiAgaWYgKCFwcm9wcykge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBOb3RlIHRoZSB1c2Ugb2YgYD09YCB3aGljaCBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkLlxuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIHByb3BzLmNoaWxkcmVuID09IG51bGwgfHwgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT0gbnVsbCxcbiAgICAnQ2FuIG9ubHkgc2V0IG9uZSBvZiBgY2hpbGRyZW5gIG9yIGBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTGAuJ1xuICApIDogaW52YXJpYW50KHByb3BzLmNoaWxkcmVuID09IG51bGwgfHwgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT0gbnVsbCkpO1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgaWYgKHByb3BzLmNvbnRlbnRFZGl0YWJsZSAmJiBwcm9wcy5jaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdBIGNvbXBvbmVudCBpcyBgY29udGVudEVkaXRhYmxlYCBhbmQgY29udGFpbnMgYGNoaWxkcmVuYCBtYW5hZ2VkIGJ5ICcgK1xuICAgICAgICAnUmVhY3QuIEl0IGlzIG5vdyB5b3VyIHJlc3BvbnNpYmlsaXR5IHRvIGd1YXJhbnRlZSB0aGF0IG5vbmUgb2YgdGhvc2UgJytcbiAgICAgICAgJ25vZGVzIGFyZSB1bmV4cGVjdGVkbHkgbW9kaWZpZWQgb3IgZHVwbGljYXRlZC4gVGhpcyBpcyBwcm9iYWJseSBub3QgJyArXG4gICAgICAgICdpbnRlbnRpb25hbC4nXG4gICAgICApO1xuICAgIH1cbiAgfVxuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIHByb3BzLnN0eWxlID09IG51bGwgfHwgdHlwZW9mIHByb3BzLnN0eWxlID09PSAnb2JqZWN0JyxcbiAgICAnVGhlIGBzdHlsZWAgcHJvcCBleHBlY3RzIGEgbWFwcGluZyBmcm9tIHN0eWxlIHByb3BlcnRpZXMgdG8gdmFsdWVzLCAnICtcbiAgICAnbm90IGEgc3RyaW5nLidcbiAgKSA6IGludmFyaWFudChwcm9wcy5zdHlsZSA9PSBudWxsIHx8IHR5cGVvZiBwcm9wcy5zdHlsZSA9PT0gJ29iamVjdCcpKTtcbn1cblxuZnVuY3Rpb24gcHV0TGlzdGVuZXIoaWQsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyLCB0cmFuc2FjdGlvbikge1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgLy8gSUU4IGhhcyBubyBBUEkgZm9yIGV2ZW50IGNhcHR1cmluZyBhbmQgdGhlIGBvblNjcm9sbGAgZXZlbnQgZG9lc24ndFxuICAgIC8vIGJ1YmJsZS5cbiAgICBpZiAocmVnaXN0cmF0aW9uTmFtZSA9PT0gJ29uU2Nyb2xsJyAmJlxuICAgICAgICAhaXNFdmVudFN1cHBvcnRlZCgnc2Nyb2xsJywgdHJ1ZSkpIHtcbiAgICAgIG1vbml0b3JDb2RlVXNlKCdyZWFjdF9ub19zY3JvbGxfZXZlbnQnKTtcbiAgICAgIGNvbnNvbGUud2FybignVGhpcyBicm93c2VyIGRvZXNuXFwndCBzdXBwb3J0IHRoZSBgb25TY3JvbGxgIGV2ZW50Jyk7XG4gICAgfVxuICB9XG4gIHZhciBjb250YWluZXIgPSBSZWFjdE1vdW50LmZpbmRSZWFjdENvbnRhaW5lckZvcklEKGlkKTtcbiAgaWYgKGNvbnRhaW5lcikge1xuICAgIHZhciBkb2MgPSBjb250YWluZXIubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERV9UWVBFID9cbiAgICAgIGNvbnRhaW5lci5vd25lckRvY3VtZW50IDpcbiAgICAgIGNvbnRhaW5lcjtcbiAgICBsaXN0ZW5UbyhyZWdpc3RyYXRpb25OYW1lLCBkb2MpO1xuICB9XG4gIHRyYW5zYWN0aW9uLmdldFB1dExpc3RlbmVyUXVldWUoKS5lbnF1ZXVlUHV0TGlzdGVuZXIoXG4gICAgaWQsXG4gICAgcmVnaXN0cmF0aW9uTmFtZSxcbiAgICBsaXN0ZW5lclxuICApO1xufVxuXG4vLyBGb3IgSFRNTCwgY2VydGFpbiB0YWdzIHNob3VsZCBvbWl0IHRoZWlyIGNsb3NlIHRhZy4gV2Uga2VlcCBhIHdoaXRlbGlzdCBmb3Jcbi8vIHRob3NlIHNwZWNpYWwgY2FzZWQgdGFncy5cblxudmFyIG9taXR0ZWRDbG9zZVRhZ3MgPSB7XG4gICdhcmVhJzogdHJ1ZSxcbiAgJ2Jhc2UnOiB0cnVlLFxuICAnYnInOiB0cnVlLFxuICAnY29sJzogdHJ1ZSxcbiAgJ2VtYmVkJzogdHJ1ZSxcbiAgJ2hyJzogdHJ1ZSxcbiAgJ2ltZyc6IHRydWUsXG4gICdpbnB1dCc6IHRydWUsXG4gICdrZXlnZW4nOiB0cnVlLFxuICAnbGluayc6IHRydWUsXG4gICdtZXRhJzogdHJ1ZSxcbiAgJ3BhcmFtJzogdHJ1ZSxcbiAgJ3NvdXJjZSc6IHRydWUsXG4gICd0cmFjayc6IHRydWUsXG4gICd3YnInOiB0cnVlXG4gIC8vIE5PVEU6IG1lbnVpdGVtJ3MgY2xvc2UgdGFnIHNob3VsZCBiZSBvbWl0dGVkLCBidXQgdGhhdCBjYXVzZXMgcHJvYmxlbXMuXG59O1xuXG4vLyBXZSBhY2NlcHQgYW55IHRhZyB0byBiZSByZW5kZXJlZCBidXQgc2luY2UgdGhpcyBnZXRzIGluamVjdGVkIGludG8gYWJpdHJhcnlcbi8vIEhUTUwsIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHRoYXQgaXQncyBhIHNhZmUgdGFnLlxuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLXhtbC8jTlQtTmFtZVxuXG52YXIgVkFMSURfVEFHX1JFR0VYID0gL15bYS16QS1aXVthLXpBLVo6X1xcLlxcLVxcZF0qJC87IC8vIFNpbXBsaWZpZWQgc3Vic2V0XG52YXIgdmFsaWRhdGVkVGFnQ2FjaGUgPSB7fTtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiB2YWxpZGF0ZURhbmdlcm91c1RhZyh0YWcpIHtcbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbGlkYXRlZFRhZ0NhY2hlLCB0YWcpKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChWQUxJRF9UQUdfUkVHRVgudGVzdCh0YWcpLCAnSW52YWxpZCB0YWc6ICVzJywgdGFnKSA6IGludmFyaWFudChWQUxJRF9UQUdfUkVHRVgudGVzdCh0YWcpKSk7XG4gICAgdmFsaWRhdGVkVGFnQ2FjaGVbdGFnXSA9IHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFJlYWN0IGNsYXNzIHRoYXQgaXMgaWRlbXBvdGVudCBhbmQgY2FwYWJsZSBvZiBjb250YWluaW5nIG90aGVyXG4gKiBSZWFjdCBjb21wb25lbnRzLiBJdCBhY2NlcHRzIGV2ZW50IGxpc3RlbmVycyBhbmQgRE9NIHByb3BlcnRpZXMgdGhhdCBhcmVcbiAqIHZhbGlkIGFjY29yZGluZyB0byBgRE9NUHJvcGVydHlgLlxuICpcbiAqICAtIEV2ZW50IGxpc3RlbmVyczogYG9uQ2xpY2tgLCBgb25Nb3VzZURvd25gLCBldGMuXG4gKiAgLSBET00gcHJvcGVydGllczogYGNsYXNzTmFtZWAsIGBuYW1lYCwgYHRpdGxlYCwgZXRjLlxuICpcbiAqIFRoZSBgc3R5bGVgIHByb3BlcnR5IGZ1bmN0aW9ucyBkaWZmZXJlbnRseSBmcm9tIHRoZSBET00gQVBJLiBJdCBhY2NlcHRzIGFuXG4gKiBvYmplY3QgbWFwcGluZyBvZiBzdHlsZSBwcm9wZXJ0aWVzIHRvIHZhbHVlcy5cbiAqXG4gKiBAY29uc3RydWN0b3IgUmVhY3RET01Db21wb25lbnRcbiAqIEBleHRlbmRzIFJlYWN0Q29tcG9uZW50XG4gKiBAZXh0ZW5kcyBSZWFjdE11bHRpQ2hpbGRcbiAqL1xuZnVuY3Rpb24gUmVhY3RET01Db21wb25lbnQodGFnKSB7XG4gIHZhbGlkYXRlRGFuZ2Vyb3VzVGFnKHRhZyk7XG4gIHRoaXMuX3RhZyA9IHRhZztcbiAgdGhpcy50YWdOYW1lID0gdGFnLnRvVXBwZXJDYXNlKCk7XG59XG5cblJlYWN0RE9NQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gJ1JlYWN0RE9NQ29tcG9uZW50JztcblxuUmVhY3RET01Db21wb25lbnQuTWl4aW4gPSB7XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyByb290IHRhZyBtYXJrdXAgdGhlbiByZWN1cnNlcy4gVGhpcyBtZXRob2QgaGFzIHNpZGUgZWZmZWN0cyBhbmRcbiAgICogaXMgbm90IGlkZW1wb3RlbnQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIFRoZSByb290IERPTSBJRCBmb3IgdGhpcyBub2RlLlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1vdW50RGVwdGggbnVtYmVyIG9mIGNvbXBvbmVudHMgaW4gdGhlIG93bmVyIGhpZXJhcmNoeVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjb21wdXRlZCBtYXJrdXAuXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogUmVhY3RQZXJmLm1lYXN1cmUoXG4gICAgJ1JlYWN0RE9NQ29tcG9uZW50JyxcbiAgICAnbW91bnRDb21wb25lbnQnLFxuICAgIGZ1bmN0aW9uKHJvb3RJRCwgdHJhbnNhY3Rpb24sIG1vdW50RGVwdGgpIHtcbiAgICAgIFJlYWN0Q29tcG9uZW50Lk1peGluLm1vdW50Q29tcG9uZW50LmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHJvb3RJRCxcbiAgICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICAgIG1vdW50RGVwdGhcbiAgICAgICk7XG4gICAgICBhc3NlcnRWYWxpZFByb3BzKHRoaXMucHJvcHMpO1xuICAgICAgdmFyIGNsb3NlVGFnID0gb21pdHRlZENsb3NlVGFnc1t0aGlzLl90YWddID8gJycgOiAnPC8nICsgdGhpcy5fdGFnICsgJz4nO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5fY3JlYXRlT3BlblRhZ01hcmt1cEFuZFB1dExpc3RlbmVycyh0cmFuc2FjdGlvbikgK1xuICAgICAgICB0aGlzLl9jcmVhdGVDb250ZW50TWFya3VwKHRyYW5zYWN0aW9uKSArXG4gICAgICAgIGNsb3NlVGFnXG4gICAgICApO1xuICAgIH1cbiAgKSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIHRoZSBvcGVuIHRhZyBhbmQgYWxsIGF0dHJpYnV0ZXMuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGhhcyBzaWRlIGVmZmVjdHMgYmVjYXVzZSBldmVudHMgZ2V0IHJlZ2lzdGVyZWQuXG4gICAqXG4gICAqIEl0ZXJhdGluZyBvdmVyIG9iamVjdCBwcm9wZXJ0aWVzIGlzIGZhc3RlciB0aGFuIGl0ZXJhdGluZyBvdmVyIGFycmF5cy5cbiAgICogQHNlZSBodHRwOi8vanNwZXJmLmNvbS9vYmotdnMtYXJyLWl0ZXJhdGlvblxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgb2Ygb3BlbmluZyB0YWcuXG4gICAqL1xuICBfY3JlYXRlT3BlblRhZ01hcmt1cEFuZFB1dExpc3RlbmVyczogZnVuY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciByZXQgPSAnPCcgKyB0aGlzLl90YWc7XG5cbiAgICBmb3IgKHZhciBwcm9wS2V5IGluIHByb3BzKSB7XG4gICAgICBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BLZXldO1xuICAgICAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIHB1dExpc3RlbmVyKHRoaXMuX3Jvb3ROb2RlSUQsIHByb3BLZXksIHByb3BWYWx1ZSwgdHJhbnNhY3Rpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICAgICAgaWYgKHByb3BWYWx1ZSkge1xuICAgICAgICAgICAgcHJvcFZhbHVlID0gcHJvcHMuc3R5bGUgPSBhc3NpZ24oe30sIHByb3BzLnN0eWxlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJvcFZhbHVlID0gQ1NTUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvclN0eWxlcyhwcm9wVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXJrdXAgPVxuICAgICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eShwcm9wS2V5LCBwcm9wVmFsdWUpO1xuICAgICAgICBpZiAobWFya3VwKSB7XG4gICAgICAgICAgcmV0ICs9ICcgJyArIG1hcmt1cDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZvciBzdGF0aWMgcGFnZXMsIG5vIG5lZWQgdG8gcHV0IFJlYWN0IElEIGFuZCBjaGVja3N1bS4gU2F2ZXMgbG90cyBvZlxuICAgIC8vIGJ5dGVzLlxuICAgIGlmICh0cmFuc2FjdGlvbi5yZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICAgICAgcmV0dXJuIHJldCArICc+JztcbiAgICB9XG5cbiAgICB2YXIgbWFya3VwRm9ySUQgPSBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9ySUQodGhpcy5fcm9vdE5vZGVJRCk7XG4gICAgcmV0dXJuIHJldCArICcgJyArIG1hcmt1cEZvcklEICsgJz4nO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgdGhlIGNvbnRlbnQgYmV0d2VlbiB0aGUgdGFncy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEByZXR1cm4ge3N0cmluZ30gQ29udGVudCBtYXJrdXAuXG4gICAqL1xuICBfY3JlYXRlQ29udGVudE1hcmt1cDogZnVuY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICAvLyBJbnRlbnRpb25hbCB1c2Ugb2YgIT0gdG8gYXZvaWQgY2F0Y2hpbmcgemVyby9mYWxzZS5cbiAgICB2YXIgaW5uZXJIVE1MID0gdGhpcy5wcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTDtcbiAgICBpZiAoaW5uZXJIVE1MICE9IG51bGwpIHtcbiAgICAgIGlmIChpbm5lckhUTUwuX19odG1sICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlubmVySFRNTC5fX2h0bWw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjb250ZW50VG9Vc2UgPVxuICAgICAgICBDT05URU5UX1RZUEVTW3R5cGVvZiB0aGlzLnByb3BzLmNoaWxkcmVuXSA/IHRoaXMucHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgICAgdmFyIGNoaWxkcmVuVG9Vc2UgPSBjb250ZW50VG9Vc2UgIT0gbnVsbCA/IG51bGwgOiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgICAgaWYgKGNvbnRlbnRUb1VzZSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBlc2NhcGVUZXh0Rm9yQnJvd3Nlcihjb250ZW50VG9Vc2UpO1xuICAgICAgfSBlbHNlIGlmIChjaGlsZHJlblRvVXNlICE9IG51bGwpIHtcbiAgICAgICAgdmFyIG1vdW50SW1hZ2VzID0gdGhpcy5tb3VudENoaWxkcmVuKFxuICAgICAgICAgIGNoaWxkcmVuVG9Vc2UsXG4gICAgICAgICAgdHJhbnNhY3Rpb25cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIG1vdW50SW1hZ2VzLmpvaW4oJycpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH0sXG5cbiAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24obmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uKSB7XG4gICAgaWYgKG5leHRFbGVtZW50ID09PSB0aGlzLl9jdXJyZW50RWxlbWVudCAmJlxuICAgICAgICBuZXh0RWxlbWVudC5fb3duZXIgIT0gbnVsbCkge1xuICAgICAgLy8gU2luY2UgZWxlbWVudHMgYXJlIGltbXV0YWJsZSBhZnRlciB0aGUgb3duZXIgaXMgcmVuZGVyZWQsXG4gICAgICAvLyB3ZSBjYW4gZG8gYSBjaGVhcCBpZGVudGl0eSBjb21wYXJlIGhlcmUgdG8gZGV0ZXJtaW5lIGlmIHRoaXMgaXMgYVxuICAgICAgLy8gc3VwZXJmbHVvdXMgcmVjb25jaWxlLiBJdCdzIHBvc3NpYmxlIGZvciBzdGF0ZSB0byBiZSBtdXRhYmxlIGJ1dCBzdWNoXG4gICAgICAvLyBjaGFuZ2Ugc2hvdWxkIHRyaWdnZXIgYW4gdXBkYXRlIG9mIHRoZSBvd25lciB3aGljaCB3b3VsZCByZWNyZWF0ZVxuICAgICAgLy8gdGhlIGVsZW1lbnQuIFdlIGV4cGxpY2l0bHkgY2hlY2sgZm9yIHRoZSBleGlzdGVuY2Ugb2YgYW4gb3duZXIgc2luY2VcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgZm9yIGEgZWxlbWVudCBjcmVhdGVkIG91dHNpZGUgYSBjb21wb3NpdGUgdG8gYmVcbiAgICAgIC8vIGRlZXBseSBtdXRhdGVkIGFuZCByZXVzZWQuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgUmVhY3RDb21wb25lbnQuTWl4aW4ucmVjZWl2ZUNvbXBvbmVudC5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgIG5leHRFbGVtZW50LFxuICAgICAgdHJhbnNhY3Rpb25cbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgbmF0aXZlIERPTSBjb21wb25lbnQgYWZ0ZXIgaXQgaGFzIGFscmVhZHkgYmVlbiBhbGxvY2F0ZWQgYW5kXG4gICAqIGF0dGFjaGVkIHRvIHRoZSBET00uIFJlY29uY2lsZXMgdGhlIHJvb3QgRE9NIG5vZGUsIHRoZW4gcmVjdXJzZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IHByZXZFbGVtZW50XG4gICAqIEBpbnRlcm5hbFxuICAgKiBAb3ZlcnJpZGFibGVcbiAgICovXG4gIHVwZGF0ZUNvbXBvbmVudDogUmVhY3RQZXJmLm1lYXN1cmUoXG4gICAgJ1JlYWN0RE9NQ29tcG9uZW50JyxcbiAgICAndXBkYXRlQ29tcG9uZW50JyxcbiAgICBmdW5jdGlvbih0cmFuc2FjdGlvbiwgcHJldkVsZW1lbnQpIHtcbiAgICAgIGFzc2VydFZhbGlkUHJvcHModGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHMpO1xuICAgICAgUmVhY3RDb21wb25lbnQuTWl4aW4udXBkYXRlQ29tcG9uZW50LmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICBwcmV2RWxlbWVudFxuICAgICAgKTtcbiAgICAgIHRoaXMuX3VwZGF0ZURPTVByb3BlcnRpZXMocHJldkVsZW1lbnQucHJvcHMsIHRyYW5zYWN0aW9uKTtcbiAgICAgIHRoaXMuX3VwZGF0ZURPTUNoaWxkcmVuKHByZXZFbGVtZW50LnByb3BzLCB0cmFuc2FjdGlvbik7XG4gICAgfVxuICApLFxuXG4gIC8qKlxuICAgKiBSZWNvbmNpbGVzIHRoZSBwcm9wZXJ0aWVzIGJ5IGRldGVjdGluZyBkaWZmZXJlbmNlcyBpbiBwcm9wZXJ0eSB2YWx1ZXMgYW5kXG4gICAqIHVwZGF0aW5nIHRoZSBET00gYXMgbmVjZXNzYXJ5LiBUaGlzIGZ1bmN0aW9uIGlzIHByb2JhYmx5IHRoZSBzaW5nbGUgbW9zdFxuICAgKiBjcml0aWNhbCBwYXRoIGZvciBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24uXG4gICAqXG4gICAqIFRPRE86IEJlbmNobWFyayB3aGV0aGVyIGNoZWNraW5nIGZvciBjaGFuZ2VkIHZhbHVlcyBpbiBtZW1vcnkgYWN0dWFsbHlcbiAgICogICAgICAgaW1wcm92ZXMgcGVyZm9ybWFuY2UgKGVzcGVjaWFsbHkgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnRzKS5cbiAgICogVE9ETzogQmVuY2htYXJrIHRoZSBlZmZlY3RzIG9mIHB1dHRpbmcgdGhpcyBhdCB0aGUgdG9wIHNpbmNlIDk5JSBvZiBwcm9wc1xuICAgKiAgICAgICBkbyBub3QgY2hhbmdlIGZvciBhIGdpdmVuIHJlY29uY2lsaWF0aW9uLlxuICAgKiBUT0RPOiBCZW5jaG1hcmsgYXJlYXMgdGhhdCBjYW4gYmUgaW1wcm92ZWQgd2l0aCBjYWNoaW5nLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge29iamVjdH0gbGFzdFByb3BzXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIF91cGRhdGVET01Qcm9wZXJ0aWVzOiBmdW5jdGlvbihsYXN0UHJvcHMsIHRyYW5zYWN0aW9uKSB7XG4gICAgdmFyIG5leHRQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHByb3BLZXk7XG4gICAgdmFyIHN0eWxlTmFtZTtcbiAgICB2YXIgc3R5bGVVcGRhdGVzO1xuICAgIGZvciAocHJvcEtleSBpbiBsYXN0UHJvcHMpIHtcbiAgICAgIGlmIChuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHxcbiAgICAgICAgICFsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgICAgdmFyIGxhc3RTdHlsZSA9IGxhc3RQcm9wc1twcm9wS2V5XTtcbiAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbGFzdFN0eWxlKSB7XG4gICAgICAgICAgaWYgKGxhc3RTdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG4gICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBkZWxldGVMaXN0ZW5lcih0aGlzLl9yb290Tm9kZUlELCBwcm9wS2V5KTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWVbcHJvcEtleV0gfHxcbiAgICAgICAgICBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShwcm9wS2V5KSkge1xuICAgICAgICBSZWFjdENvbXBvbmVudC5CYWNrZW5kSURPcGVyYXRpb25zLmRlbGV0ZVByb3BlcnR5QnlJRChcbiAgICAgICAgICB0aGlzLl9yb290Tm9kZUlELFxuICAgICAgICAgIHByb3BLZXlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChwcm9wS2V5IGluIG5leHRQcm9wcykge1xuICAgICAgdmFyIG5leHRQcm9wID0gbmV4dFByb3BzW3Byb3BLZXldO1xuICAgICAgdmFyIGxhc3RQcm9wID0gbGFzdFByb3BzW3Byb3BLZXldO1xuICAgICAgaWYgKCFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHwgbmV4dFByb3AgPT09IGxhc3RQcm9wKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICAgIGlmIChuZXh0UHJvcCkge1xuICAgICAgICAgIG5leHRQcm9wID0gbmV4dFByb3BzLnN0eWxlID0gYXNzaWduKHt9LCBuZXh0UHJvcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RQcm9wKSB7XG4gICAgICAgICAgLy8gVW5zZXQgc3R5bGVzIG9uIGBsYXN0UHJvcGAgYnV0IG5vdCBvbiBgbmV4dFByb3BgLlxuICAgICAgICAgIGZvciAoc3R5bGVOYW1lIGluIGxhc3RQcm9wKSB7XG4gICAgICAgICAgICBpZiAobGFzdFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSAmJlxuICAgICAgICAgICAgICAgICghbmV4dFByb3AgfHwgIW5leHRQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpKSB7XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHN0eWxlVXBkYXRlcyB8fCB7fTtcbiAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzW3N0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gVXBkYXRlIHN0eWxlcyB0aGF0IGNoYW5nZWQgc2luY2UgYGxhc3RQcm9wYC5cbiAgICAgICAgICBmb3IgKHN0eWxlTmFtZSBpbiBuZXh0UHJvcCkge1xuICAgICAgICAgICAgaWYgKG5leHRQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkgJiZcbiAgICAgICAgICAgICAgICBsYXN0UHJvcFtzdHlsZU5hbWVdICE9PSBuZXh0UHJvcFtzdHlsZU5hbWVdKSB7XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHN0eWxlVXBkYXRlcyB8fCB7fTtcbiAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzW3N0eWxlTmFtZV0gPSBuZXh0UHJvcFtzdHlsZU5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBSZWxpZXMgb24gYHVwZGF0ZVN0eWxlc0J5SURgIG5vdCBtdXRhdGluZyBgc3R5bGVVcGRhdGVzYC5cbiAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBuZXh0UHJvcDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBwdXRMaXN0ZW5lcih0aGlzLl9yb290Tm9kZUlELCBwcm9wS2V5LCBuZXh0UHJvcCwgdHJhbnNhY3Rpb24pO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZVtwcm9wS2V5XSB8fFxuICAgICAgICAgIERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKHByb3BLZXkpKSB7XG4gICAgICAgIFJlYWN0Q29tcG9uZW50LkJhY2tlbmRJRE9wZXJhdGlvbnMudXBkYXRlUHJvcGVydHlCeUlEKFxuICAgICAgICAgIHRoaXMuX3Jvb3ROb2RlSUQsXG4gICAgICAgICAgcHJvcEtleSxcbiAgICAgICAgICBuZXh0UHJvcFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3R5bGVVcGRhdGVzKSB7XG4gICAgICBSZWFjdENvbXBvbmVudC5CYWNrZW5kSURPcGVyYXRpb25zLnVwZGF0ZVN0eWxlc0J5SUQoXG4gICAgICAgIHRoaXMuX3Jvb3ROb2RlSUQsXG4gICAgICAgIHN0eWxlVXBkYXRlc1xuICAgICAgKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlY29uY2lsZXMgdGhlIGNoaWxkcmVuIHdpdGggdGhlIHZhcmlvdXMgcHJvcGVydGllcyB0aGF0IGFmZmVjdCB0aGVcbiAgICogY2hpbGRyZW4gY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGxhc3RQcm9wc1xuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBfdXBkYXRlRE9NQ2hpbGRyZW46IGZ1bmN0aW9uKGxhc3RQcm9wcywgdHJhbnNhY3Rpb24pIHtcbiAgICB2YXIgbmV4dFByb3BzID0gdGhpcy5wcm9wcztcblxuICAgIHZhciBsYXN0Q29udGVudCA9XG4gICAgICBDT05URU5UX1RZUEVTW3R5cGVvZiBsYXN0UHJvcHMuY2hpbGRyZW5dID8gbGFzdFByb3BzLmNoaWxkcmVuIDogbnVsbDtcbiAgICB2YXIgbmV4dENvbnRlbnQgPVxuICAgICAgQ09OVEVOVF9UWVBFU1t0eXBlb2YgbmV4dFByb3BzLmNoaWxkcmVuXSA/IG5leHRQcm9wcy5jaGlsZHJlbiA6IG51bGw7XG5cbiAgICB2YXIgbGFzdEh0bWwgPVxuICAgICAgbGFzdFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmXG4gICAgICBsYXN0UHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sO1xuICAgIHZhciBuZXh0SHRtbCA9XG4gICAgICBuZXh0UHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgJiZcbiAgICAgIG5leHRQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWw7XG5cbiAgICAvLyBOb3RlIHRoZSB1c2Ugb2YgYCE9YCB3aGljaCBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkLlxuICAgIHZhciBsYXN0Q2hpbGRyZW4gPSBsYXN0Q29udGVudCAhPSBudWxsID8gbnVsbCA6IGxhc3RQcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgbmV4dENoaWxkcmVuID0gbmV4dENvbnRlbnQgIT0gbnVsbCA/IG51bGwgOiBuZXh0UHJvcHMuY2hpbGRyZW47XG5cbiAgICAvLyBJZiB3ZSdyZSBzd2l0Y2hpbmcgZnJvbSBjaGlsZHJlbiB0byBjb250ZW50L2h0bWwgb3IgdmljZSB2ZXJzYSwgcmVtb3ZlXG4gICAgLy8gdGhlIG9sZCBjb250ZW50XG4gICAgdmFyIGxhc3RIYXNDb250ZW50T3JIdG1sID0gbGFzdENvbnRlbnQgIT0gbnVsbCB8fCBsYXN0SHRtbCAhPSBudWxsO1xuICAgIHZhciBuZXh0SGFzQ29udGVudE9ySHRtbCA9IG5leHRDb250ZW50ICE9IG51bGwgfHwgbmV4dEh0bWwgIT0gbnVsbDtcbiAgICBpZiAobGFzdENoaWxkcmVuICE9IG51bGwgJiYgbmV4dENoaWxkcmVuID09IG51bGwpIHtcbiAgICAgIHRoaXMudXBkYXRlQ2hpbGRyZW4obnVsbCwgdHJhbnNhY3Rpb24pO1xuICAgIH0gZWxzZSBpZiAobGFzdEhhc0NvbnRlbnRPckh0bWwgJiYgIW5leHRIYXNDb250ZW50T3JIdG1sKSB7XG4gICAgICB0aGlzLnVwZGF0ZVRleHRDb250ZW50KCcnKTtcbiAgICB9XG5cbiAgICBpZiAobmV4dENvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgaWYgKGxhc3RDb250ZW50ICE9PSBuZXh0Q29udGVudCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVRleHRDb250ZW50KCcnICsgbmV4dENvbnRlbnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV4dEh0bWwgIT0gbnVsbCkge1xuICAgICAgaWYgKGxhc3RIdG1sICE9PSBuZXh0SHRtbCkge1xuICAgICAgICBSZWFjdENvbXBvbmVudC5CYWNrZW5kSURPcGVyYXRpb25zLnVwZGF0ZUlubmVySFRNTEJ5SUQoXG4gICAgICAgICAgdGhpcy5fcm9vdE5vZGVJRCxcbiAgICAgICAgICBuZXh0SHRtbFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV4dENoaWxkcmVuICE9IG51bGwpIHtcbiAgICAgIHRoaXMudXBkYXRlQ2hpbGRyZW4obmV4dENoaWxkcmVuLCB0cmFuc2FjdGlvbik7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbGwgZXZlbnQgcmVnaXN0cmF0aW9ucyBmb3IgdGhpcyBpbnN0YW5jZS4gRG9lcyBub3QgcmVtb3ZlIGZyb21cbiAgICogdGhlIERPTS4gVGhhdCBtdXN0IGJlIGRvbmUgYnkgdGhlIHBhcmVudC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnVubW91bnRDaGlsZHJlbigpO1xuICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5kZWxldGVBbGxMaXN0ZW5lcnModGhpcy5fcm9vdE5vZGVJRCk7XG4gICAgUmVhY3RDb21wb25lbnQuTWl4aW4udW5tb3VudENvbXBvbmVudC5jYWxsKHRoaXMpO1xuICB9XG5cbn07XG5cbmFzc2lnbihcbiAgUmVhY3RET01Db21wb25lbnQucHJvdG90eXBlLFxuICBSZWFjdENvbXBvbmVudC5NaXhpbixcbiAgUmVhY3RET01Db21wb25lbnQuTWl4aW4sXG4gIFJlYWN0TXVsdGlDaGlsZC5NaXhpbixcbiAgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01Db21wb25lbnQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3RET01Db21wb25lbnQuanNcbiAqKiBtb2R1bGUgaWQgPSA2NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TWFya3VwQ2hlY2tzdW1cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFkbGVyMzIgPSByZXF1aXJlKFwiLi9hZGxlcjMyXCIpO1xuXG52YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IHtcbiAgQ0hFQ0tTVU1fQVRUUl9OQU1FOiAnZGF0YS1yZWFjdC1jaGVja3N1bScsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBzdHJpbmcgd2l0aCBjaGVja3N1bSBhdHRyaWJ1dGUgYXR0YWNoZWRcbiAgICovXG4gIGFkZENoZWNrc3VtVG9NYXJrdXA6IGZ1bmN0aW9uKG1hcmt1cCkge1xuICAgIHZhciBjaGVja3N1bSA9IGFkbGVyMzIobWFya3VwKTtcbiAgICByZXR1cm4gbWFya3VwLnJlcGxhY2UoXG4gICAgICAnPicsXG4gICAgICAnICcgKyBSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSArICc9XCInICsgY2hlY2tzdW0gKyAnXCI+J1xuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgdG8gdXNlXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCByb290IFJlYWN0IGVsZW1lbnRcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgb3Igbm90IHRoZSBtYXJrdXAgaXMgdGhlIHNhbWVcbiAgICovXG4gIGNhblJldXNlTWFya3VwOiBmdW5jdGlvbihtYXJrdXAsIGVsZW1lbnQpIHtcbiAgICB2YXIgZXhpc3RpbmdDaGVja3N1bSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFxuICAgICAgUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUVcbiAgICApO1xuICAgIGV4aXN0aW5nQ2hlY2tzdW0gPSBleGlzdGluZ0NoZWNrc3VtICYmIHBhcnNlSW50KGV4aXN0aW5nQ2hlY2tzdW0sIDEwKTtcbiAgICB2YXIgbWFya3VwQ2hlY2tzdW0gPSBhZGxlcjMyKG1hcmt1cCk7XG4gICAgcmV0dXJuIG1hcmt1cENoZWNrc3VtID09PSBleGlzdGluZ0NoZWNrc3VtO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TWFya3VwQ2hlY2tzdW07XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3RNYXJrdXBDaGVja3N1bS5qc1xuICoqIG1vZHVsZSBpZCA9IDY1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RNdWx0aUNoaWxkXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudFwiKTtcbnZhciBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcyA9IHJlcXVpcmUoXCIuL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzXCIpO1xuXG52YXIgZmxhdHRlbkNoaWxkcmVuID0gcmVxdWlyZShcIi4vZmxhdHRlbkNoaWxkcmVuXCIpO1xudmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XCIpO1xudmFyIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcIik7XG5cbi8qKlxuICogVXBkYXRpbmcgY2hpbGRyZW4gb2YgYSBjb21wb25lbnQgbWF5IHRyaWdnZXIgcmVjdXJzaXZlIHVwZGF0ZXMuIFRoZSBkZXB0aCBpc1xuICogdXNlZCB0byBiYXRjaCByZWN1cnNpdmUgdXBkYXRlcyB0byByZW5kZXIgbWFya3VwIG1vcmUgZWZmaWNpZW50bHkuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciB1cGRhdGVEZXB0aCA9IDA7XG5cbi8qKlxuICogUXVldWUgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb24gb2JqZWN0cy5cbiAqXG4gKiBFYWNoIG9iamVjdCBoYXMgYSBgdHlwZWAgcHJvcGVydHkgdGhhdCBpcyBpbiBgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNgLlxuICpcbiAqIEB0eXBlIHthcnJheTxvYmplY3Q+fVxuICogQHByaXZhdGVcbiAqL1xudmFyIHVwZGF0ZVF1ZXVlID0gW107XG5cbi8qKlxuICogUXVldWUgb2YgbWFya3VwIHRvIGJlIHJlbmRlcmVkLlxuICpcbiAqIEB0eXBlIHthcnJheTxzdHJpbmc+fVxuICogQHByaXZhdGVcbiAqL1xudmFyIG1hcmt1cFF1ZXVlID0gW107XG5cbi8qKlxuICogRW5xdWV1ZXMgbWFya3VwIHRvIGJlIHJlbmRlcmVkIGFuZCBpbnNlcnRlZCBhdCBhIHN1cHBsaWVkIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHRoYXQgcmVuZGVycyBpbnRvIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCBEZXN0aW5hdGlvbiBpbmRleC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVNYXJrdXAocGFyZW50SUQsIG1hcmt1cCwgdG9JbmRleCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHVwZGF0ZVF1ZXVlLnB1c2goe1xuICAgIHBhcmVudElEOiBwYXJlbnRJRCxcbiAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLklOU0VSVF9NQVJLVVAsXG4gICAgbWFya3VwSW5kZXg6IG1hcmt1cFF1ZXVlLnB1c2gobWFya3VwKSAtIDEsXG4gICAgdGV4dENvbnRlbnQ6IG51bGwsXG4gICAgZnJvbUluZGV4OiBudWxsLFxuICAgIHRvSW5kZXg6IHRvSW5kZXhcbiAgfSk7XG59XG5cbi8qKlxuICogRW5xdWV1ZXMgbW92aW5nIGFuIGV4aXN0aW5nIGVsZW1lbnQgdG8gYW5vdGhlciBpbmRleC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50SUQgSUQgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFNvdXJjZSBpbmRleCBvZiB0aGUgZXhpc3RpbmcgZWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0b0luZGV4IERlc3RpbmF0aW9uIGluZGV4IG9mIHRoZSBlbGVtZW50LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5xdWV1ZU1vdmUocGFyZW50SUQsIGZyb21JbmRleCwgdG9JbmRleCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHVwZGF0ZVF1ZXVlLnB1c2goe1xuICAgIHBhcmVudElEOiBwYXJlbnRJRCxcbiAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLk1PVkVfRVhJU1RJTkcsXG4gICAgbWFya3VwSW5kZXg6IG51bGwsXG4gICAgdGV4dENvbnRlbnQ6IG51bGwsXG4gICAgZnJvbUluZGV4OiBmcm9tSW5kZXgsXG4gICAgdG9JbmRleDogdG9JbmRleFxuICB9KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlcyByZW1vdmluZyBhbiBlbGVtZW50IGF0IGFuIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggSW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmVtb3ZlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5xdWV1ZVJlbW92ZShwYXJlbnRJRCwgZnJvbUluZGV4KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREUsXG4gICAgbWFya3VwSW5kZXg6IG51bGwsXG4gICAgdGV4dENvbnRlbnQ6IG51bGwsXG4gICAgZnJvbUluZGV4OiBmcm9tSW5kZXgsXG4gICAgdG9JbmRleDogbnVsbFxuICB9KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlcyBzZXR0aW5nIHRoZSB0ZXh0IGNvbnRlbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRDb250ZW50IFRleHQgY29udGVudCB0byBzZXQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbnF1ZXVlVGV4dENvbnRlbnQocGFyZW50SUQsIHRleHRDb250ZW50KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuVEVYVF9DT05URU5ULFxuICAgIG1hcmt1cEluZGV4OiBudWxsLFxuICAgIHRleHRDb250ZW50OiB0ZXh0Q29udGVudCxcbiAgICBmcm9tSW5kZXg6IG51bGwsXG4gICAgdG9JbmRleDogbnVsbFxuICB9KTtcbn1cblxuLyoqXG4gKiBQcm9jZXNzZXMgYW55IGVucXVldWVkIHVwZGF0ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc1F1ZXVlKCkge1xuICBpZiAodXBkYXRlUXVldWUubGVuZ3RoKSB7XG4gICAgUmVhY3RDb21wb25lbnQuQmFja2VuZElET3BlcmF0aW9ucy5kYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXMoXG4gICAgICB1cGRhdGVRdWV1ZSxcbiAgICAgIG1hcmt1cFF1ZXVlXG4gICAgKTtcbiAgICBjbGVhclF1ZXVlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDbGVhcnMgYW55IGVucXVldWVkIHVwZGF0ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2xlYXJRdWV1ZSgpIHtcbiAgdXBkYXRlUXVldWUubGVuZ3RoID0gMDtcbiAgbWFya3VwUXVldWUubGVuZ3RoID0gMDtcbn1cblxuLyoqXG4gKiBSZWFjdE11bHRpQ2hpbGQgYXJlIGNhcGFibGUgb2YgcmVjb25jaWxpbmcgbXVsdGlwbGUgY2hpbGRyZW4uXG4gKlxuICogQGNsYXNzIFJlYWN0TXVsdGlDaGlsZFxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdE11bHRpQ2hpbGQgPSB7XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGNvbW1vbiBmdW5jdGlvbmFsaXR5IGZvciBjb21wb25lbnRzIHRoYXQgbXVzdCByZWNvbmNpbGUgbXVsdGlwbGVcbiAgICogY2hpbGRyZW4uIFRoaXMgaXMgdXNlZCBieSBgUmVhY3RET01Db21wb25lbnRgIHRvIG1vdW50LCB1cGRhdGUsIGFuZFxuICAgKiB1bm1vdW50IGNoaWxkIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEBsZW5kcyB7UmVhY3RNdWx0aUNoaWxkLnByb3RvdHlwZX1cbiAgICovXG4gIE1peGluOiB7XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBcIm1vdW50IGltYWdlXCIgZm9yIGVhY2ggb2YgdGhlIHN1cHBsaWVkIGNoaWxkcmVuLiBJbiB0aGUgY2FzZVxuICAgICAqIG9mIGBSZWFjdERPTUNvbXBvbmVudGAsIGEgbW91bnQgaW1hZ2UgaXMgYSBzdHJpbmcgb2YgbWFya3VwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXN0ZWRDaGlsZHJlbiBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICAgKiBAcmV0dXJuIHthcnJheX0gQW4gYXJyYXkgb2YgbW91bnRlZCByZXByZXNlbnRhdGlvbnMuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgbW91bnRDaGlsZHJlbjogZnVuY3Rpb24obmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBmbGF0dGVuQ2hpbGRyZW4obmVzdGVkQ2hpbGRyZW4pO1xuICAgICAgdmFyIG1vdW50SW1hZ2VzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBjaGlsZHJlbikge1xuICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltuYW1lXTtcbiAgICAgICAgaWYgKGNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgLy8gVGhlIHJlbmRlcmVkIGNoaWxkcmVuIG11c3QgYmUgdHVybmVkIGludG8gaW5zdGFuY2VzIGFzIHRoZXkncmVcbiAgICAgICAgICAvLyBtb3VudGVkLlxuICAgICAgICAgIHZhciBjaGlsZEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChjaGlsZCwgbnVsbCk7XG4gICAgICAgICAgY2hpbGRyZW5bbmFtZV0gPSBjaGlsZEluc3RhbmNlO1xuICAgICAgICAgIC8vIElubGluZWQgZm9yIHBlcmZvcm1hbmNlLCBzZWUgYFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0SURgLlxuICAgICAgICAgIHZhciByb290SUQgPSB0aGlzLl9yb290Tm9kZUlEICsgbmFtZTtcbiAgICAgICAgICB2YXIgbW91bnRJbWFnZSA9IGNoaWxkSW5zdGFuY2UubW91bnRDb21wb25lbnQoXG4gICAgICAgICAgICByb290SUQsXG4gICAgICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgICAgIHRoaXMuX21vdW50RGVwdGggKyAxXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjaGlsZEluc3RhbmNlLl9tb3VudEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgbW91bnRJbWFnZXMucHVzaChtb3VudEltYWdlKTtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbW91bnRJbWFnZXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIGFueSByZW5kZXJlZCBjaGlsZHJlbiB3aXRoIGEgdGV4dCBjb250ZW50IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXh0Q29udGVudCBTdHJpbmcgb2YgY29udGVudC5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB1cGRhdGVUZXh0Q29udGVudDogZnVuY3Rpb24obmV4dENvbnRlbnQpIHtcbiAgICAgIHVwZGF0ZURlcHRoKys7XG4gICAgICB2YXIgZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICAgIC8vIFJlbW92ZSBhbnkgcmVuZGVyZWQgY2hpbGRyZW4uXG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5fdW5tb3VudENoaWxkQnlOYW1lKHByZXZDaGlsZHJlbltuYW1lXSwgbmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFNldCBuZXcgdGV4dCBjb250ZW50LlxuICAgICAgICB0aGlzLnNldFRleHRDb250ZW50KG5leHRDb250ZW50KTtcbiAgICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHVwZGF0ZURlcHRoLS07XG4gICAgICAgIGlmICghdXBkYXRlRGVwdGgpIHtcbiAgICAgICAgICBlcnJvclRocm93biA/IGNsZWFyUXVldWUoKSA6IHByb2Nlc3NRdWV1ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHJlbmRlcmVkIGNoaWxkcmVuIHdpdGggbmV3IGNoaWxkcmVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0TmVzdGVkQ2hpbGRyZW4gTmVzdGVkIGNoaWxkIG1hcHMuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbihuZXh0TmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uKSB7XG4gICAgICB1cGRhdGVEZXB0aCsrO1xuICAgICAgdmFyIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24pO1xuICAgICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdXBkYXRlRGVwdGgtLTtcbiAgICAgICAgaWYgKCF1cGRhdGVEZXB0aCkge1xuICAgICAgICAgIGVycm9yVGhyb3duID8gY2xlYXJRdWV1ZSgpIDogcHJvY2Vzc1F1ZXVlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW1wcm92ZSBwZXJmb3JtYW5jZSBieSBpc29sYXRpbmcgdGhpcyBob3QgY29kZSBwYXRoIGZyb20gdGhlIHRyeS9jYXRjaFxuICAgICAqIGJsb2NrIGluIGB1cGRhdGVDaGlsZHJlbmAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHROZXN0ZWRDaGlsZHJlbiBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQGZpbmFsXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF91cGRhdGVDaGlsZHJlbjogZnVuY3Rpb24obmV4dE5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbikge1xuICAgICAgdmFyIG5leHRDaGlsZHJlbiA9IGZsYXR0ZW5DaGlsZHJlbihuZXh0TmVzdGVkQ2hpbGRyZW4pO1xuICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICBpZiAoIW5leHRDaGlsZHJlbiAmJiAhcHJldkNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuYW1lO1xuICAgICAgLy8gYG5leHRJbmRleGAgd2lsbCBpbmNyZW1lbnQgZm9yIGVhY2ggY2hpbGQgaW4gYG5leHRDaGlsZHJlbmAsIGJ1dFxuICAgICAgLy8gYGxhc3RJbmRleGAgd2lsbCBiZSB0aGUgbGFzdCBpbmRleCB2aXNpdGVkIGluIGBwcmV2Q2hpbGRyZW5gLlxuICAgICAgdmFyIGxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gMDtcbiAgICAgIGZvciAobmFtZSBpbiBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkcmVuICYmIHByZXZDaGlsZHJlbltuYW1lXTtcbiAgICAgICAgdmFyIHByZXZFbGVtZW50ID0gcHJldkNoaWxkICYmIHByZXZDaGlsZC5fY3VycmVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBuZXh0RWxlbWVudCA9IG5leHRDaGlsZHJlbltuYW1lXTtcbiAgICAgICAgaWYgKHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgICB0aGlzLm1vdmVDaGlsZChwcmV2Q2hpbGQsIG5leHRJbmRleCwgbGFzdEluZGV4KTtcbiAgICAgICAgICBsYXN0SW5kZXggPSBNYXRoLm1heChwcmV2Q2hpbGQuX21vdW50SW5kZXgsIGxhc3RJbmRleCk7XG4gICAgICAgICAgcHJldkNoaWxkLnJlY2VpdmVDb21wb25lbnQobmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICBwcmV2Q2hpbGQuX21vdW50SW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZCkge1xuICAgICAgICAgICAgLy8gVXBkYXRlIGBsYXN0SW5kZXhgIGJlZm9yZSBgX21vdW50SW5kZXhgIGdldHMgdW5zZXQgYnkgdW5tb3VudGluZy5cbiAgICAgICAgICAgIGxhc3RJbmRleCA9IE1hdGgubWF4KHByZXZDaGlsZC5fbW91bnRJbmRleCwgbGFzdEluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuX3VubW91bnRDaGlsZEJ5TmFtZShwcmV2Q2hpbGQsIG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBUaGUgY2hpbGQgbXVzdCBiZSBpbnN0YW50aWF0ZWQgYmVmb3JlIGl0J3MgbW91bnRlZC5cbiAgICAgICAgICB2YXIgbmV4dENoaWxkSW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KFxuICAgICAgICAgICAgbmV4dEVsZW1lbnQsXG4gICAgICAgICAgICBudWxsXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLl9tb3VudENoaWxkQnlOYW1lQXRJbmRleChcbiAgICAgICAgICAgIG5leHRDaGlsZEluc3RhbmNlLCBuYW1lLCBuZXh0SW5kZXgsIHRyYW5zYWN0aW9uXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0SW5kZXgrKztcbiAgICAgIH1cbiAgICAgIC8vIFJlbW92ZSBjaGlsZHJlbiB0aGF0IGFyZSBubyBsb25nZXIgcHJlc2VudC5cbiAgICAgIGZvciAobmFtZSBpbiBwcmV2Q2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxuICAgICAgICAgICAgIShuZXh0Q2hpbGRyZW4gJiYgbmV4dENoaWxkcmVuW25hbWVdKSkge1xuICAgICAgICAgIHRoaXMuX3VubW91bnRDaGlsZEJ5TmFtZShwcmV2Q2hpbGRyZW5bbmFtZV0sIG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVubW91bnRzIGFsbCByZW5kZXJlZCBjaGlsZHJlbi4gVGhpcyBzaG91bGQgYmUgdXNlZCB0byBjbGVhbiB1cCBjaGlsZHJlblxuICAgICAqIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdW5tb3VudENoaWxkcmVuOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZW5kZXJlZENoaWxkcmVuID0gdGhpcy5fcmVuZGVyZWRDaGlsZHJlbjtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gcmVuZGVyZWRDaGlsZHJlbikge1xuICAgICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHJlbmRlcmVkQ2hpbGRyZW5bbmFtZV07XG4gICAgICAgIC8vIFRPRE86IFdoZW4gaXMgdGhpcyBub3QgdHJ1ZT9cbiAgICAgICAgaWYgKHJlbmRlcmVkQ2hpbGQudW5tb3VudENvbXBvbmVudCkge1xuICAgICAgICAgIHJlbmRlcmVkQ2hpbGQudW5tb3VudENvbXBvbmVudCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW92ZXMgYSBjaGlsZCBjb21wb25lbnQgdG8gdGhlIHN1cHBsaWVkIGluZGV4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIG1vdmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggRGVzdGluYXRpb24gaW5kZXggb2YgdGhlIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxhc3RJbmRleCBMYXN0IGluZGV4IHZpc2l0ZWQgb2YgdGhlIHNpYmxpbmdzIG9mIGBjaGlsZGAuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG1vdmVDaGlsZDogZnVuY3Rpb24oY2hpbGQsIHRvSW5kZXgsIGxhc3RJbmRleCkge1xuICAgICAgLy8gSWYgdGhlIGluZGV4IG9mIGBjaGlsZGAgaXMgbGVzcyB0aGFuIGBsYXN0SW5kZXhgLCB0aGVuIGl0IG5lZWRzIHRvXG4gICAgICAvLyBiZSBtb3ZlZC4gT3RoZXJ3aXNlLCB3ZSBkbyBub3QgbmVlZCB0byBtb3ZlIGl0IGJlY2F1c2UgYSBjaGlsZCB3aWxsIGJlXG4gICAgICAvLyBpbnNlcnRlZCBvciBtb3ZlZCBiZWZvcmUgYGNoaWxkYC5cbiAgICAgIGlmIChjaGlsZC5fbW91bnRJbmRleCA8IGxhc3RJbmRleCkge1xuICAgICAgICBlbnF1ZXVlTW92ZSh0aGlzLl9yb290Tm9kZUlELCBjaGlsZC5fbW91bnRJbmRleCwgdG9JbmRleCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjaGlsZCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gY3JlYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb3VudEltYWdlIE1hcmt1cCB0byBpbnNlcnQuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGNyZWF0ZUNoaWxkOiBmdW5jdGlvbihjaGlsZCwgbW91bnRJbWFnZSkge1xuICAgICAgZW5xdWV1ZU1hcmt1cCh0aGlzLl9yb290Tm9kZUlELCBtb3VudEltYWdlLCBjaGlsZC5fbW91bnRJbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBjaGlsZCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDaGlsZCB0byByZW1vdmUuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHJlbW92ZUNoaWxkOiBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgZW5xdWV1ZVJlbW92ZSh0aGlzLl9yb290Tm9kZUlELCBjaGlsZC5fbW91bnRJbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhpcyB0ZXh0IGNvbnRlbnQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRDb250ZW50IFRleHQgY29udGVudCB0byBzZXQuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHNldFRleHRDb250ZW50OiBmdW5jdGlvbih0ZXh0Q29udGVudCkge1xuICAgICAgZW5xdWV1ZVRleHRDb250ZW50KHRoaXMuX3Jvb3ROb2RlSUQsIHRleHRDb250ZW50KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW91bnRzIGEgY2hpbGQgd2l0aCB0aGUgc3VwcGxpZWQgbmFtZS5cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoaXMgaXMgcGFydCBvZiBgdXBkYXRlQ2hpbGRyZW5gIGFuZCBpcyBoZXJlIGZvciByZWFkYWJpbGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byBtb3VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBjaGlsZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBjaGlsZC5cbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfbW91bnRDaGlsZEJ5TmFtZUF0SW5kZXg6IGZ1bmN0aW9uKGNoaWxkLCBuYW1lLCBpbmRleCwgdHJhbnNhY3Rpb24pIHtcbiAgICAgIC8vIElubGluZWQgZm9yIHBlcmZvcm1hbmNlLCBzZWUgYFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0SURgLlxuICAgICAgdmFyIHJvb3RJRCA9IHRoaXMuX3Jvb3ROb2RlSUQgKyBuYW1lO1xuICAgICAgdmFyIG1vdW50SW1hZ2UgPSBjaGlsZC5tb3VudENvbXBvbmVudChcbiAgICAgICAgcm9vdElELFxuICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgdGhpcy5fbW91bnREZXB0aCArIDFcbiAgICAgICk7XG4gICAgICBjaGlsZC5fbW91bnRJbmRleCA9IGluZGV4O1xuICAgICAgdGhpcy5jcmVhdGVDaGlsZChjaGlsZCwgbW91bnRJbWFnZSk7XG4gICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiB8fCB7fTtcbiAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW5bbmFtZV0gPSBjaGlsZDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5tb3VudHMgYSByZW5kZXJlZCBjaGlsZCBieSBuYW1lLlxuICAgICAqXG4gICAgICogTk9URTogVGhpcyBpcyBwYXJ0IG9mIGB1cGRhdGVDaGlsZHJlbmAgYW5kIGlzIGhlcmUgZm9yIHJlYWRhYmlsaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIHVubW91bnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgY2hpbGQgaW4gYHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW5gLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3VubW91bnRDaGlsZEJ5TmFtZTogZnVuY3Rpb24oY2hpbGQsIG5hbWUpIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgY2hpbGQuX21vdW50SW5kZXggPSBudWxsO1xuICAgICAgY2hpbGQudW5tb3VudENvbXBvbmVudCgpO1xuICAgICAgZGVsZXRlIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW5bbmFtZV07XG4gICAgfVxuXG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE11bHRpQ2hpbGQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3RNdWx0aUNoaWxkLmpzXG4gKiogbW9kdWxlIGlkID0gNjZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIga2V5TWlycm9yID0gcmVxdWlyZShcIi4va2V5TWlycm9yXCIpO1xuXG4vKipcbiAqIFdoZW4gYSBjb21wb25lbnQncyBjaGlsZHJlbiBhcmUgdXBkYXRlZCwgYSBzZXJpZXMgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25cbiAqIG9iamVjdHMgYXJlIGNyZWF0ZWQgaW4gb3JkZXIgdG8gYmF0Y2ggYW5kIHNlcmlhbGl6ZSB0aGUgcmVxdWlyZWQgY2hhbmdlcy5cbiAqXG4gKiBFbnVtZXJhdGVzIGFsbCB0aGUgcG9zc2libGUgdHlwZXMgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSBrZXlNaXJyb3Ioe1xuICBJTlNFUlRfTUFSS1VQOiBudWxsLFxuICBNT1ZFX0VYSVNUSU5HOiBudWxsLFxuICBSRU1PVkVfTk9ERTogbnVsbCxcbiAgVEVYVF9DT05URU5UOiBudWxsXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcztcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9SZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5qc1xuICoqIG1vZHVsZSBpZCA9IDY3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TmF0aXZlQ29tcG9uZW50XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxudmFyIGdlbmVyaWNDb21wb25lbnRDbGFzcyA9IG51bGw7XG4vLyBUaGlzIHJlZ2lzdHJ5IGtlZXBzIHRyYWNrIG9mIHdyYXBwZXIgY2xhc3NlcyBhcm91bmQgbmF0aXZlIHRhZ3NcbnZhciB0YWdUb0NvbXBvbmVudENsYXNzID0ge307XG5cbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudEluamVjdGlvbiA9IHtcbiAgLy8gVGhpcyBhY2NlcHRzIGEgY2xhc3MgdGhhdCByZWNlaXZlcyB0aGUgdGFnIHN0cmluZy4gVGhpcyBpcyBhIGNhdGNoIGFsbFxuICAvLyB0aGF0IGNhbiByZW5kZXIgYW55IGtpbmQgb2YgdGFnLlxuICBpbmplY3RHZW5lcmljQ29tcG9uZW50Q2xhc3M6IGZ1bmN0aW9uKGNvbXBvbmVudENsYXNzKSB7XG4gICAgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gY29tcG9uZW50Q2xhc3M7XG4gIH0sXG4gIC8vIFRoaXMgYWNjZXB0cyBhIGtleWVkIG9iamVjdCB3aXRoIGNsYXNzZXMgYXMgdmFsdWVzLiBFYWNoIGtleSByZXByZXNlbnRzIGFcbiAgLy8gdGFnLiBUaGF0IHBhcnRpY3VsYXIgdGFnIHdpbGwgdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiB0aGUgZ2VuZXJpYyBvbmUuXG4gIGluamVjdENvbXBvbmVudENsYXNzZXM6IGZ1bmN0aW9uKGNvbXBvbmVudENsYXNzZXMpIHtcbiAgICBhc3NpZ24odGFnVG9Db21wb25lbnRDbGFzcywgY29tcG9uZW50Q2xhc3Nlcyk7XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlIGFuIGludGVybmFsIGNsYXNzIGZvciBhIHNwZWNpZmljIHRhZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSB0YWcgZm9yIHdoaWNoIHRvIGNyZWF0ZSBhbiBpbnRlcm5hbCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7YW55fSBwcm9wcyBUaGUgcHJvcHMgcGFzc2VkIHRvIHRoZSBpbnN0YW5jZSBjb25zdHJ1Y3Rvci5cbiAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnQgVGhlIGluamVjdGVkIGVtcHR5IGNvbXBvbmVudC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VGb3JUYWcodGFnLCBwcm9wcywgcGFyZW50VHlwZSkge1xuICB2YXIgY29tcG9uZW50Q2xhc3MgPSB0YWdUb0NvbXBvbmVudENsYXNzW3RhZ107XG4gIGlmIChjb21wb25lbnRDbGFzcyA9PSBudWxsKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGdlbmVyaWNDb21wb25lbnRDbGFzcyxcbiAgICAgICdUaGVyZSBpcyBubyByZWdpc3RlcmVkIGNvbXBvbmVudCBmb3IgdGhlIHRhZyAlcycsXG4gICAgICB0YWdcbiAgICApIDogaW52YXJpYW50KGdlbmVyaWNDb21wb25lbnRDbGFzcykpO1xuICAgIHJldHVybiBuZXcgZ2VuZXJpY0NvbXBvbmVudENsYXNzKHRhZywgcHJvcHMpO1xuICB9XG4gIGlmIChwYXJlbnRUeXBlID09PSB0YWcpIHtcbiAgICAvLyBBdm9pZCByZWN1cnNpb25cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgZ2VuZXJpY0NvbXBvbmVudENsYXNzLFxuICAgICAgJ1RoZXJlIGlzIG5vIHJlZ2lzdGVyZWQgY29tcG9uZW50IGZvciB0aGUgdGFnICVzJyxcbiAgICAgIHRhZ1xuICAgICkgOiBpbnZhcmlhbnQoZ2VuZXJpY0NvbXBvbmVudENsYXNzKSk7XG4gICAgcmV0dXJuIG5ldyBnZW5lcmljQ29tcG9uZW50Q2xhc3ModGFnLCBwcm9wcyk7XG4gIH1cbiAgLy8gVW53cmFwIGxlZ2FjeSBmYWN0b3JpZXNcbiAgcmV0dXJuIG5ldyBjb21wb25lbnRDbGFzcy50eXBlKHByb3BzKTtcbn1cblxudmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0ge1xuICBjcmVhdGVJbnN0YW5jZUZvclRhZzogY3JlYXRlSW5zdGFuY2VGb3JUYWcsXG4gIGluamVjdGlvbjogUmVhY3ROYXRpdmVDb21wb25lbnRJbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROYXRpdmVDb21wb25lbnQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3ROYXRpdmVDb21wb25lbnQuanNcbiAqKiBtb2R1bGUgaWQgPSA2OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0T3duZXJcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZShcIi4vZW1wdHlPYmplY3RcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIFJlYWN0T3duZXJzIGFyZSBjYXBhYmxlIG9mIHN0b3JpbmcgcmVmZXJlbmNlcyB0byBvd25lZCBjb21wb25lbnRzLlxuICpcbiAqIEFsbCBjb21wb25lbnRzIGFyZSBjYXBhYmxlIG9mIC8vYmVpbmcvLyByZWZlcmVuY2VkIGJ5IG93bmVyIGNvbXBvbmVudHMsIGJ1dFxuICogb25seSBSZWFjdE93bmVyIGNvbXBvbmVudHMgYXJlIGNhcGFibGUgb2YgLy9yZWZlcmVuY2luZy8vIG93bmVkIGNvbXBvbmVudHMuXG4gKiBUaGUgbmFtZWQgcmVmZXJlbmNlIGlzIGtub3duIGFzIGEgXCJyZWZcIi5cbiAqXG4gKiBSZWZzIGFyZSBhdmFpbGFibGUgd2hlbiBtb3VudGVkIGFuZCB1cGRhdGVkIGR1cmluZyByZWNvbmNpbGlhdGlvbi5cbiAqXG4gKiAgIHZhciBNeUNvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgcmV0dXJuIChcbiAqICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfT5cbiAqICAgICAgICAgICA8Q3VzdG9tQ29tcG9uZW50IHJlZj1cImN1c3RvbVwiIC8+XG4gKiAgICAgICAgIDwvZGl2PlxuICogICAgICAgKTtcbiAqICAgICB9LFxuICogICAgIGhhbmRsZUNsaWNrOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHRoaXMucmVmcy5jdXN0b20uaGFuZGxlQ2xpY2soKTtcbiAqICAgICB9LFxuICogICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHRoaXMucmVmcy5jdXN0b20uaW5pdGlhbGl6ZSgpO1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogUmVmcyBzaG91bGQgcmFyZWx5IGJlIHVzZWQuIFdoZW4gcmVmcyBhcmUgdXNlZCwgdGhleSBzaG91bGQgb25seSBiZSBkb25lIHRvXG4gKiBjb250cm9sIGRhdGEgdGhhdCBpcyBub3QgaGFuZGxlZCBieSBSZWFjdCdzIGRhdGEgZmxvdy5cbiAqXG4gKiBAY2xhc3MgUmVhY3RPd25lclxuICovXG52YXIgUmVhY3RPd25lciA9IHtcblxuICAvKipcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqZWN0YCBpcyBhIHZhbGlkIG93bmVyLlxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzVmFsaWRPd25lcjogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuICEhKFxuICAgICAgb2JqZWN0ICYmXG4gICAgICB0eXBlb2Ygb2JqZWN0LmF0dGFjaFJlZiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdHlwZW9mIG9iamVjdC5kZXRhY2hSZWYgPT09ICdmdW5jdGlvbidcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY29tcG9uZW50IGJ5IHJlZiB0byBhbiBvd25lciBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gcmVmZXJlbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgYnkgd2hpY2ggdG8gcmVmZXIgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHBhcmFtIHtSZWFjdE93bmVyfSBvd25lciBDb21wb25lbnQgb24gd2hpY2ggdG8gcmVjb3JkIHRoZSByZWYuXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFkZENvbXBvbmVudEFzUmVmVG86IGZ1bmN0aW9uKGNvbXBvbmVudCwgcmVmLCBvd25lcikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBSZWFjdE93bmVyLmlzVmFsaWRPd25lcihvd25lciksXG4gICAgICAnYWRkQ29tcG9uZW50QXNSZWZUbyguLi4pOiBPbmx5IGEgUmVhY3RPd25lciBjYW4gaGF2ZSByZWZzLiBUaGlzICcgK1xuICAgICAgJ3VzdWFsbHkgbWVhbnMgdGhhdCB5b3VcXCdyZSB0cnlpbmcgdG8gYWRkIGEgcmVmIHRvIGEgY29tcG9uZW50IHRoYXQgJyArXG4gICAgICAnZG9lc25cXCd0IGhhdmUgYW4gb3duZXIgKHRoYXQgaXMsIHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgb2YgYW5vdGhlciAnICtcbiAgICAgICdjb21wb25lbnRcXCdzIGByZW5kZXJgIG1ldGhvZCkuIFRyeSByZW5kZXJpbmcgdGhpcyBjb21wb25lbnQgaW5zaWRlIG9mICcgK1xuICAgICAgJ2EgbmV3IHRvcC1sZXZlbCBjb21wb25lbnQgd2hpY2ggd2lsbCBob2xkIHRoZSByZWYuJ1xuICAgICkgOiBpbnZhcmlhbnQoUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpKSk7XG4gICAgb3duZXIuYXR0YWNoUmVmKHJlZiwgY29tcG9uZW50KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGNvbXBvbmVudCBieSByZWYgZnJvbSBhbiBvd25lciBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gZGVyZWZlcmVuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgTmFtZSBvZiB0aGUgcmVmIHRvIHJlbW92ZS5cbiAgICogQHBhcmFtIHtSZWFjdE93bmVyfSBvd25lciBDb21wb25lbnQgb24gd2hpY2ggdGhlIHJlZiBpcyByZWNvcmRlZC5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tOiBmdW5jdGlvbihjb21wb25lbnQsIHJlZiwgb3duZXIpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpLFxuICAgICAgJ3JlbW92ZUNvbXBvbmVudEFzUmVmRnJvbSguLi4pOiBPbmx5IGEgUmVhY3RPd25lciBjYW4gaGF2ZSByZWZzLiBUaGlzICcgK1xuICAgICAgJ3VzdWFsbHkgbWVhbnMgdGhhdCB5b3VcXCdyZSB0cnlpbmcgdG8gcmVtb3ZlIGEgcmVmIHRvIGEgY29tcG9uZW50IHRoYXQgJyArXG4gICAgICAnZG9lc25cXCd0IGhhdmUgYW4gb3duZXIgKHRoYXQgaXMsIHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgb2YgYW5vdGhlciAnICtcbiAgICAgICdjb21wb25lbnRcXCdzIGByZW5kZXJgIG1ldGhvZCkuIFRyeSByZW5kZXJpbmcgdGhpcyBjb21wb25lbnQgaW5zaWRlIG9mICcgK1xuICAgICAgJ2EgbmV3IHRvcC1sZXZlbCBjb21wb25lbnQgd2hpY2ggd2lsbCBob2xkIHRoZSByZWYuJ1xuICAgICkgOiBpbnZhcmlhbnQoUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpKSk7XG4gICAgLy8gQ2hlY2sgdGhhdCBgY29tcG9uZW50YCBpcyBzdGlsbCB0aGUgY3VycmVudCByZWYgYmVjYXVzZSB3ZSBkbyBub3Qgd2FudCB0b1xuICAgIC8vIGRldGFjaCB0aGUgcmVmIGlmIGFub3RoZXIgY29tcG9uZW50IHN0b2xlIGl0LlxuICAgIGlmIChvd25lci5yZWZzW3JlZl0gPT09IGNvbXBvbmVudCkge1xuICAgICAgb3duZXIuZGV0YWNoUmVmKHJlZik7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBBIFJlYWN0Q29tcG9uZW50IG11c3QgbWl4IHRoaXMgaW4gdG8gaGF2ZSByZWZzLlxuICAgKlxuICAgKiBAbGVuZHMge1JlYWN0T3duZXIucHJvdG90eXBlfVxuICAgKi9cbiAgTWl4aW46IHtcblxuICAgIGNvbnN0cnVjdDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTGF6aWx5IGFsbG9jYXRlcyB0aGUgcmVmcyBvYmplY3QgYW5kIHN0b3JlcyBgY29tcG9uZW50YCBhcyBgcmVmYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgUmVmZXJlbmNlIG5hbWUuXG4gICAgICogQHBhcmFtIHtjb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gc3RvcmUgYXMgYHJlZmAuXG4gICAgICogQGZpbmFsXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBhdHRhY2hSZWY6IGZ1bmN0aW9uKHJlZiwgY29tcG9uZW50KSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBjb21wb25lbnQuaXNPd25lZEJ5KHRoaXMpLFxuICAgICAgICAnYXR0YWNoUmVmKCVzLCAuLi4pOiBPbmx5IGEgY29tcG9uZW50XFwncyBvd25lciBjYW4gc3RvcmUgYSByZWYgdG8gaXQuJyxcbiAgICAgICAgcmVmXG4gICAgICApIDogaW52YXJpYW50KGNvbXBvbmVudC5pc093bmVkQnkodGhpcykpKTtcbiAgICAgIHZhciByZWZzID0gdGhpcy5yZWZzID09PSBlbXB0eU9iamVjdCA/ICh0aGlzLnJlZnMgPSB7fSkgOiB0aGlzLnJlZnM7XG4gICAgICByZWZzW3JlZl0gPSBjb21wb25lbnQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERldGFjaGVzIGEgcmVmZXJlbmNlIG5hbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgdG8gZGVyZWZlcmVuY2UuXG4gICAgICogQGZpbmFsXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBkZXRhY2hSZWY6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgZGVsZXRlIHRoaXMucmVmc1tyZWZdO1xuICAgIH1cblxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RPd25lcjtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9SZWFjdE93bmVyLmpzXG4gKiogbW9kdWxlIGlkID0gNjlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7fTtcblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHtcbiAgICBwcm9wOiAncHJvcCcsXG4gICAgY29udGV4dDogJ2NvbnRleHQnLFxuICAgIGNoaWxkQ29udGV4dDogJ2NoaWxkIGNvbnRleHQnXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXM7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMuanNcbiAqKiBtb2R1bGUgaWQgPSA3MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnNcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoXCIuL2tleU1pcnJvclwiKTtcblxudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSBrZXlNaXJyb3Ioe1xuICBwcm9wOiBudWxsLFxuICBjb250ZXh0OiBudWxsLFxuICBjaGlsZENvbnRleHQ6IG51bGxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbnM7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5qc1xuICoqIG1vZHVsZSBpZCA9IDcxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RQcm9wVHlwZXNcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzXCIpO1xuXG52YXIgZGVwcmVjYXRlZCA9IHJlcXVpcmUoXCIuL2RlcHJlY2F0ZWRcIik7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG5cbi8qKlxuICogQ29sbGVjdGlvbiBvZiBtZXRob2RzIHRoYXQgYWxsb3cgZGVjbGFyYXRpb24gYW5kIHZhbGlkYXRpb24gb2YgcHJvcHMgdGhhdCBhcmVcbiAqIHN1cHBsaWVkIHRvIFJlYWN0IGNvbXBvbmVudHMuIEV4YW1wbGUgdXNhZ2U6XG4gKlxuICogICB2YXIgUHJvcHMgPSByZXF1aXJlKCdSZWFjdFByb3BUeXBlcycpO1xuICogICB2YXIgTXlBcnRpY2xlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgIHByb3BUeXBlczoge1xuICogICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIHByb3AgbmFtZWQgXCJkZXNjcmlwdGlvblwiLlxuICogICAgICAgZGVzY3JpcHRpb246IFByb3BzLnN0cmluZyxcbiAqXG4gKiAgICAgICAvLyBBIHJlcXVpcmVkIGVudW0gcHJvcCBuYW1lZCBcImNhdGVnb3J5XCIuXG4gKiAgICAgICBjYXRlZ29yeTogUHJvcHMub25lT2YoWydOZXdzJywnUGhvdG9zJ10pLmlzUmVxdWlyZWQsXG4gKlxuICogICAgICAgLy8gQSBwcm9wIG5hbWVkIFwiZGlhbG9nXCIgdGhhdCByZXF1aXJlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2cuXG4gKiAgICAgICBkaWFsb2c6IFByb3BzLmluc3RhbmNlT2YoRGlhbG9nKS5pc1JlcXVpcmVkXG4gKiAgICAgfSxcbiAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgeyAuLi4gfVxuICogICB9KTtcbiAqXG4gKiBBIG1vcmUgZm9ybWFsIHNwZWNpZmljYXRpb24gb2YgaG93IHRoZXNlIG1ldGhvZHMgYXJlIHVzZWQ6XG4gKlxuICogICB0eXBlIDo9IGFycmF5fGJvb2x8ZnVuY3xvYmplY3R8bnVtYmVyfHN0cmluZ3xvbmVPZihbLi4uXSl8aW5zdGFuY2VPZiguLi4pXG4gKiAgIGRlY2wgOj0gUmVhY3RQcm9wVHlwZXMue3R5cGV9KC5pc1JlcXVpcmVkKT9cbiAqXG4gKiBFYWNoIGFuZCBldmVyeSBkZWNsYXJhdGlvbiBwcm9kdWNlcyBhIGZ1bmN0aW9uIHdpdGggdGhlIHNhbWUgc2lnbmF0dXJlLiBUaGlzXG4gKiBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6XG4gKlxuICogIHZhciBNeUxpbmsgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICBwcm9wVHlwZXM6IHtcbiAqICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIG9yIFVSSSBwcm9wIG5hbWVkIFwiaHJlZlwiLlxuICogICAgICBocmVmOiBmdW5jdGlvbihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAqICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICogICAgICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgcHJvcFZhbHVlICE9PSAnc3RyaW5nJyAmJlxuICogICAgICAgICAgICAhKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFVSSSkpIHtcbiAqICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gKiAgICAgICAgICAgICdFeHBlY3RlZCBhIHN0cmluZyBvciBhbiBVUkkgZm9yICcgKyBwcm9wTmFtZSArICcgaW4gJyArXG4gKiAgICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAqICAgICAgICAgICk7XG4gKiAgICAgICAgfVxuICogICAgICB9XG4gKiAgICB9LFxuICogICAgcmVuZGVyOiBmdW5jdGlvbigpIHsuLi59XG4gKiAgfSk7XG4gKlxuICogQGludGVybmFsXG4gKi9cblxudmFyIEFOT05ZTU9VUyA9ICc8PGFub255bW91cz4+JztcblxudmFyIGVsZW1lbnRUeXBlQ2hlY2tlciA9IGNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlcigpO1xudmFyIG5vZGVUeXBlQ2hlY2tlciA9IGNyZWF0ZU5vZGVDaGVja2VyKCk7XG5cbnZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgYXJyYXk6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdhcnJheScpLFxuICBib29sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYm9vbGVhbicpLFxuICBmdW5jOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignZnVuY3Rpb24nKSxcbiAgbnVtYmVyOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignbnVtYmVyJyksXG4gIG9iamVjdDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ29iamVjdCcpLFxuICBzdHJpbmc6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzdHJpbmcnKSxcblxuICBhbnk6IGNyZWF0ZUFueVR5cGVDaGVja2VyKCksXG4gIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcbiAgZWxlbWVudDogZWxlbWVudFR5cGVDaGVja2VyLFxuICBpbnN0YW5jZU9mOiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyLFxuICBub2RlOiBub2RlVHlwZUNoZWNrZXIsXG4gIG9iamVjdE9mOiBjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyLFxuICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLFxuICBvbmVPZlR5cGU6IGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIsXG4gIHNoYXBlOiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyLFxuXG4gIGNvbXBvbmVudDogZGVwcmVjYXRlZChcbiAgICAnUmVhY3QuUHJvcFR5cGVzJyxcbiAgICAnY29tcG9uZW50JyxcbiAgICAnZWxlbWVudCcsXG4gICAgdGhpcyxcbiAgICBlbGVtZW50VHlwZUNoZWNrZXJcbiAgKSxcbiAgcmVuZGVyYWJsZTogZGVwcmVjYXRlZChcbiAgICAnUmVhY3QuUHJvcFR5cGVzJyxcbiAgICAncmVuZGVyYWJsZScsXG4gICAgJ25vZGUnLFxuICAgIHRoaXMsXG4gICAgbm9kZVR5cGVDaGVja2VyXG4gIClcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgQU5PTllNT1VTO1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgICAgKFwiUmVxdWlyZWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCB3YXMgbm90IHNwZWNpZmllZCBpbiBcIikrXG4gICAgICAgICAgKFwiYFwiICsgY29tcG9uZW50TmFtZSArIFwiYC5cIilcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgZmFsc2UpO1xuICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcblxuICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoZXhwZWN0ZWRUeXBlKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgaWYgKHByb3BUeXBlICE9PSBleHBlY3RlZFR5cGUpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICAvLyBgcHJvcFZhbHVlYCBiZWluZyBpbnN0YW5jZSBvZiwgc2F5LCBkYXRlL3JlZ2V4cCwgcGFzcyB0aGUgJ29iamVjdCdcbiAgICAgIC8vIGNoZWNrLCBidXQgd2UgY2FuIG9mZmVyIGEgbW9yZSBwcmVjaXNlIGVycm9yIG1lc3NhZ2UgaGVyZSByYXRoZXIgdGhhblxuICAgICAgLy8gJ29mIHR5cGUgYG9iamVjdGAnLlxuICAgICAgdmFyIHByZWNpc2VUeXBlID0gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKTtcblxuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHR5cGUgYFwiICsgcHJlY2lzZVR5cGUgKyBcImAgXCIpICtcbiAgICAgICAgKFwic3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYFwiICsgZXhwZWN0ZWRUeXBlICsgXCJgLlwiKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQW55VHlwZUNoZWNrZXIoKSB7XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zKCkpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHR5cGUgXCIpICtcbiAgICAgICAgKFwiYFwiICsgcHJvcFR5cGUgKyBcImAgc3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYW4gYXJyYXkuXCIpXG4gICAgICApO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGVycm9yID0gdHlwZUNoZWNrZXIocHJvcFZhbHVlLCBpLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlcigpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIGlmICghUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgc3VwcGxpZWQgdG8gXCIpICtcbiAgICAgICAgKFwiYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYSBSZWFjdEVsZW1lbnQuXCIpXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyKGV4cGVjdGVkQ2xhc3MpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIGlmICghKHByb3BzW3Byb3BOYW1lXSBpbnN0YW5jZW9mIGV4cGVjdGVkQ2xhc3MpKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgdmFyIGV4cGVjdGVkQ2xhc3NOYW1lID0gZXhwZWN0ZWRDbGFzcy5uYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBzdXBwbGllZCB0byBcIikgK1xuICAgICAgICAoXCJgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBpbnN0YW5jZSBvZiBgXCIgKyBleHBlY3RlZENsYXNzTmFtZSArIFwiYC5cIilcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVudW1UeXBlQ2hlY2tlcihleHBlY3RlZFZhbHVlcykge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGVjdGVkVmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocHJvcFZhbHVlID09PSBleHBlY3RlZFZhbHVlc1tpXSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICB2YXIgdmFsdWVzU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWRWYWx1ZXMpO1xuICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgb2YgdmFsdWUgYFwiICsgcHJvcFZhbHVlICsgXCJgIFwiKSArXG4gICAgICAoXCJzdXBwbGllZCB0byBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBvbmUgb2YgXCIgKyB2YWx1ZXNTdHJpbmcgKyBcIi5cIilcbiAgICApO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHR5cGUgXCIpICtcbiAgICAgICAgKFwiYFwiICsgcHJvcFR5cGUgKyBcImAgc3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYW4gb2JqZWN0LlwiKVxuICAgICAgKTtcbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BWYWx1ZSkge1xuICAgICAgaWYgKHByb3BWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoYXJyYXlPZlR5cGVDaGVja2Vycykge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICBpZiAoY2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgc3VwcGxpZWQgdG8gXCIpICtcbiAgICAgIChcImBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAuXCIpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOb2RlQ2hlY2tlcigpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIGlmICghaXNOb2RlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgc3VwcGxpZWQgdG8gXCIpICtcbiAgICAgICAgKFwiYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYSBSZWFjdE5vZGUuXCIpXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyKHNoYXBlVHlwZXMpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHR5cGUgYFwiICsgcHJvcFR5cGUgKyBcImAgXCIpICtcbiAgICAgICAgKFwic3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYG9iamVjdGAuXCIpXG4gICAgICApO1xuICAgIH1cbiAgICBmb3IgKHZhciBrZXkgaW4gc2hhcGVUeXBlcykge1xuICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICBpZiAoIWNoZWNrZXIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgZXJyb3IgPSBjaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUsICdleHBlY3RlZCBgb2JqZWN0YCcpO1xufVxuXG5mdW5jdGlvbiBpc05vZGUocHJvcFZhbHVlKSB7XG4gIHN3aXRjaCh0eXBlb2YgcHJvcFZhbHVlKSB7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gIXByb3BWYWx1ZTtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICByZXR1cm4gcHJvcFZhbHVlLmV2ZXJ5KGlzTm9kZSk7XG4gICAgICB9XG4gICAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrIGluIHByb3BWYWx1ZSkge1xuICAgICAgICBpZiAoIWlzTm9kZShwcm9wVmFsdWVba10pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8vIEVxdWl2YWxlbnQgb2YgYHR5cGVvZmAgYnV0IHdpdGggc3BlY2lhbCBoYW5kbGluZyBmb3IgYXJyYXkgYW5kIHJlZ2V4cC5cbmZ1bmN0aW9uIGdldFByb3BUeXBlKHByb3BWYWx1ZSkge1xuICB2YXIgcHJvcFR5cGUgPSB0eXBlb2YgcHJvcFZhbHVlO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgcmV0dXJuICdhcnJheSc7XG4gIH1cbiAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIC8vIE9sZCB3ZWJraXRzIChhdCBsZWFzdCB1bnRpbCBBbmRyb2lkIDQuMCkgcmV0dXJuICdmdW5jdGlvbicgcmF0aGVyIHRoYW5cbiAgICAvLyAnb2JqZWN0JyBmb3IgdHlwZW9mIGEgUmVnRXhwLiBXZSdsbCBub3JtYWxpemUgdGhpcyBoZXJlIHNvIHRoYXQgL2JsYS9cbiAgICAvLyBwYXNzZXMgUHJvcFR5cGVzLm9iamVjdC5cbiAgICByZXR1cm4gJ29iamVjdCc7XG4gIH1cbiAgcmV0dXJuIHByb3BUeXBlO1xufVxuXG4vLyBUaGlzIGhhbmRsZXMgbW9yZSB0eXBlcyB0aGFuIGBnZXRQcm9wVHlwZWAuIE9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4vLyBTZWUgYGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyYC5cbmZ1bmN0aW9uIGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSkge1xuICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICBpZiAocHJvcFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHJldHVybiAnZGF0ZSc7XG4gICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJldHVybiAncmVnZXhwJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHByb3BUeXBlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVzLmpzXG4gKiogbW9kdWxlIGlkID0gNzJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFB1dExpc3RlbmVyUXVldWVcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcblxuZnVuY3Rpb24gUmVhY3RQdXRMaXN0ZW5lclF1ZXVlKCkge1xuICB0aGlzLmxpc3RlbmVyc1RvUHV0ID0gW107XG59XG5cbmFzc2lnbihSZWFjdFB1dExpc3RlbmVyUXVldWUucHJvdG90eXBlLCB7XG4gIGVucXVldWVQdXRMaXN0ZW5lcjogZnVuY3Rpb24ocm9vdE5vZGVJRCwgcHJvcEtleSwgcHJvcFZhbHVlKSB7XG4gICAgdGhpcy5saXN0ZW5lcnNUb1B1dC5wdXNoKHtcbiAgICAgIHJvb3ROb2RlSUQ6IHJvb3ROb2RlSUQsXG4gICAgICBwcm9wS2V5OiBwcm9wS2V5LFxuICAgICAgcHJvcFZhbHVlOiBwcm9wVmFsdWVcbiAgICB9KTtcbiAgfSxcblxuICBwdXRMaXN0ZW5lcnM6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5saXN0ZW5lcnNUb1B1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyVG9QdXQgPSB0aGlzLmxpc3RlbmVyc1RvUHV0W2ldO1xuICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnB1dExpc3RlbmVyKFxuICAgICAgICBsaXN0ZW5lclRvUHV0LnJvb3ROb2RlSUQsXG4gICAgICAgIGxpc3RlbmVyVG9QdXQucHJvcEtleSxcbiAgICAgICAgbGlzdGVuZXJUb1B1dC5wcm9wVmFsdWVcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmxpc3RlbmVyc1RvUHV0Lmxlbmd0aCA9IDA7XG4gIH0sXG5cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG59KTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFJlYWN0UHV0TGlzdGVuZXJRdWV1ZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQdXRMaXN0ZW5lclF1ZXVlO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0UHV0TGlzdGVuZXJRdWV1ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDczXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RSb290SW5kZXhcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdFJvb3RJbmRleEluamVjdGlvbiA9IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IF9jcmVhdGVSZWFjdFJvb3RJbmRleFxuICAgKi9cbiAgaW5qZWN0Q3JlYXRlUmVhY3RSb290SW5kZXg6IGZ1bmN0aW9uKF9jcmVhdGVSZWFjdFJvb3RJbmRleCkge1xuICAgIFJlYWN0Um9vdEluZGV4LmNyZWF0ZVJlYWN0Um9vdEluZGV4ID0gX2NyZWF0ZVJlYWN0Um9vdEluZGV4O1xuICB9XG59O1xuXG52YXIgUmVhY3RSb290SW5kZXggPSB7XG4gIGNyZWF0ZVJlYWN0Um9vdEluZGV4OiBudWxsLFxuICBpbmplY3Rpb246IFJlYWN0Um9vdEluZGV4SW5qZWN0aW9uXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Um9vdEluZGV4O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0Um9vdEluZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gNzRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFRleHRDb21wb25lbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIik7XG52YXIgUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudFwiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGVzY2FwZVRleHRGb3JCcm93c2VyID0gcmVxdWlyZShcIi4vZXNjYXBlVGV4dEZvckJyb3dzZXJcIik7XG5cbi8qKlxuICogVGV4dCBub2RlcyB2aW9sYXRlIGEgY291cGxlIGFzc3VtcHRpb25zIHRoYXQgUmVhY3QgbWFrZXMgYWJvdXQgY29tcG9uZW50czpcbiAqXG4gKiAgLSBXaGVuIG1vdW50aW5nIHRleHQgaW50byB0aGUgRE9NLCBhZGphY2VudCB0ZXh0IG5vZGVzIGFyZSBtZXJnZWQuXG4gKiAgLSBUZXh0IG5vZGVzIGNhbm5vdCBiZSBhc3NpZ25lZCBhIFJlYWN0IHJvb3QgSUQuXG4gKlxuICogVGhpcyBjb21wb25lbnQgaXMgdXNlZCB0byB3cmFwIHN0cmluZ3MgaW4gZWxlbWVudHMgc28gdGhhdCB0aGV5IGNhbiB1bmRlcmdvXG4gKiB0aGUgc2FtZSByZWNvbmNpbGlhdGlvbiB0aGF0IGlzIGFwcGxpZWQgdG8gZWxlbWVudHMuXG4gKlxuICogVE9ETzogSW52ZXN0aWdhdGUgcmVwcmVzZW50aW5nIFJlYWN0IGNvbXBvbmVudHMgaW4gdGhlIERPTSB3aXRoIHRleHQgbm9kZXMuXG4gKlxuICogQGNsYXNzIFJlYWN0VGV4dENvbXBvbmVudFxuICogQGV4dGVuZHMgUmVhY3RDb21wb25lbnRcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RUZXh0Q29tcG9uZW50ID0gZnVuY3Rpb24ocHJvcHMpIHtcbiAgLy8gVGhpcyBjb25zdHJ1Y3RvciBhbmQgaXQncyBhcmd1bWVudCBpcyBjdXJyZW50bHkgdXNlZCBieSBtb2Nrcy5cbn07XG5cbmFzc2lnbihSZWFjdFRleHRDb21wb25lbnQucHJvdG90eXBlLCBSZWFjdENvbXBvbmVudC5NaXhpbiwge1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBtYXJrdXAgZm9yIHRoaXMgdGV4dCBub2RlLiBUaGlzIG5vZGUgaXMgbm90IGludGVuZGVkIHRvIGhhdmVcbiAgICogYW55IGZlYXR1cmVzIGJlc2lkZXMgY29udGFpbmluZyB0ZXh0IGNvbnRlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gbW91bnREZXB0aCBudW1iZXIgb2YgY29tcG9uZW50cyBpbiB0aGUgb3duZXIgaGllcmFyY2h5XG4gICAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIGZvciB0aGlzIHRleHQgbm9kZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24ocm9vdElELCB0cmFuc2FjdGlvbiwgbW91bnREZXB0aCkge1xuICAgIFJlYWN0Q29tcG9uZW50Lk1peGluLm1vdW50Q29tcG9uZW50LmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgcm9vdElELFxuICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICBtb3VudERlcHRoXG4gICAgKTtcblxuICAgIHZhciBlc2NhcGVkVGV4dCA9IGVzY2FwZVRleHRGb3JCcm93c2VyKHRoaXMucHJvcHMpO1xuXG4gICAgaWYgKHRyYW5zYWN0aW9uLnJlbmRlclRvU3RhdGljTWFya3VwKSB7XG4gICAgICAvLyBOb3JtYWxseSB3ZSdkIHdyYXAgdGhpcyBpbiBhIGBzcGFuYCBmb3IgdGhlIHJlYXNvbnMgc3RhdGVkIGFib3ZlLCBidXRcbiAgICAgIC8vIHNpbmNlIHRoaXMgaXMgYSBzaXR1YXRpb24gd2hlcmUgUmVhY3Qgd29uJ3QgdGFrZSBvdmVyIChzdGF0aWMgcGFnZXMpLFxuICAgICAgLy8gd2UgY2FuIHNpbXBseSByZXR1cm4gdGhlIHRleHQgYXMgaXQgaXMuXG4gICAgICByZXR1cm4gZXNjYXBlZFRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICc8c3BhbiAnICsgRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvcklEKHJvb3RJRCkgKyAnPicgK1xuICAgICAgICBlc2NhcGVkVGV4dCArXG4gICAgICAnPC9zcGFuPidcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoaXMgY29tcG9uZW50IGJ5IHVwZGF0aW5nIHRoZSB0ZXh0IGNvbnRlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0Q29tcG9uZW50IENvbnRhaW5zIHRoZSBuZXh0IHRleHQgY29udGVudC5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRDb21wb25lbnQsIHRyYW5zYWN0aW9uKSB7XG4gICAgdmFyIG5leHRQcm9wcyA9IG5leHRDb21wb25lbnQucHJvcHM7XG4gICAgaWYgKG5leHRQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdGhpcy5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgIFJlYWN0Q29tcG9uZW50LkJhY2tlbmRJRE9wZXJhdGlvbnMudXBkYXRlVGV4dENvbnRlbnRCeUlEKFxuICAgICAgICB0aGlzLl9yb290Tm9kZUlELFxuICAgICAgICBuZXh0UHJvcHNcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbn0pO1xuXG52YXIgUmVhY3RUZXh0Q29tcG9uZW50RmFjdG9yeSA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgLy8gQnlwYXNzIHZhbGlkYXRpb24gYW5kIGNvbmZpZ3VyYXRpb25cbiAgcmV0dXJuIG5ldyBSZWFjdEVsZW1lbnQoUmVhY3RUZXh0Q29tcG9uZW50LCBudWxsLCBudWxsLCBudWxsLCBudWxsLCB0ZXh0KTtcbn07XG5cblJlYWN0VGV4dENvbXBvbmVudEZhY3RvcnkudHlwZSA9IFJlYWN0VGV4dENvbXBvbmVudDtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFRleHRDb21wb25lbnRGYWN0b3J5O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0VGV4dENvbXBvbmVudC5qc1xuICoqIG1vZHVsZSBpZCA9IDc1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgVmlld3BvcnRNZXRyaWNzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbiA9IHJlcXVpcmUoXCIuL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uXCIpO1xuXG52YXIgVmlld3BvcnRNZXRyaWNzID0ge1xuXG4gIGN1cnJlbnRTY3JvbGxMZWZ0OiAwLFxuXG4gIGN1cnJlbnRTY3JvbGxUb3A6IDAsXG5cbiAgcmVmcmVzaFNjcm9sbFZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjcm9sbFBvc2l0aW9uID0gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24od2luZG93KTtcbiAgICBWaWV3cG9ydE1ldHJpY3MuY3VycmVudFNjcm9sbExlZnQgPSBzY3JvbGxQb3NpdGlvbi54O1xuICAgIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsVG9wID0gc2Nyb2xsUG9zaXRpb24ueTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZXdwb3J0TWV0cmljcztcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9WaWV3cG9ydE1ldHJpY3MuanNcbiAqKiBtb2R1bGUgaWQgPSA3NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNvbnRhaW5zTm9kZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNUZXh0Tm9kZSA9IHJlcXVpcmUoXCIuL2lzVGV4dE5vZGVcIik7XG5cbi8qanNsaW50IGJpdHdpc2U6dHJ1ZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKlxuICogQHBhcmFtIHs/RE9NTm9kZX0gb3V0ZXJOb2RlIE91dGVyIERPTSBub2RlLlxuICogQHBhcmFtIHs/RE9NTm9kZX0gaW5uZXJOb2RlIElubmVyIERPTSBub2RlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb3V0ZXJOb2RlYCBjb250YWlucyBvciBpcyBgaW5uZXJOb2RlYC5cbiAqL1xuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29udGFpbnMpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9jb250YWluc05vZGUuanNcbiAqKiBtb2R1bGUgaWQgPSA3N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmb2N1c05vZGVcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgaW5wdXQvdGV4dGFyZWEgdG8gZm9jdXNcbiAqL1xuZnVuY3Rpb24gZm9jdXNOb2RlKG5vZGUpIHtcbiAgLy8gSUU4IGNhbiB0aHJvdyBcIkNhbid0IG1vdmUgZm9jdXMgdG8gdGhlIGNvbnRyb2wgYmVjYXVzZSBpdCBpcyBpbnZpc2libGUsXG4gIC8vIG5vdCBlbmFibGVkLCBvciBvZiBhIHR5cGUgdGhhdCBkb2VzIG5vdCBhY2NlcHQgdGhlIGZvY3VzLlwiIGZvciBhbGwga2luZHMgb2ZcbiAgLy8gcmVhc29ucyB0aGF0IGFyZSB0b28gZXhwZW5zaXZlIGFuZCBmcmFnaWxlIHRvIHRlc3QuXG4gIHRyeSB7XG4gICAgbm9kZS5mb2N1cygpO1xuICB9IGNhdGNoKGUpIHtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvY3VzTm9kZTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9mb2N1c05vZGUuanNcbiAqKiBtb2R1bGUgaWQgPSA3OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldEFjdGl2ZUVsZW1lbnRcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgYm9keSBpcyBub3QgeWV0IGRlZmluZWQuXG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoKSAvKj9ET01FbGVtZW50Ki8ge1xuICB0cnkge1xuICAgIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8IGRvY3VtZW50LmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvZ2V0QWN0aXZlRWxlbWVudC5qc1xuICoqIG1vZHVsZSBpZCA9IDc5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0TWFya3VwV3JhcFxuICovXG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIER1bW15IGNvbnRhaW5lciB1c2VkIHRvIGRldGVjdCB3aGljaCB3cmFwcyBhcmUgbmVjZXNzYXJ5LlxuICovXG52YXIgZHVtbXlOb2RlID1cbiAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuXG4vKipcbiAqIFNvbWUgYnJvd3NlcnMgY2Fubm90IHVzZSBgaW5uZXJIVE1MYCB0byByZW5kZXIgY2VydGFpbiBlbGVtZW50cyBzdGFuZGFsb25lLFxuICogc28gd2Ugd3JhcCB0aGVtLCByZW5kZXIgdGhlIHdyYXBwZWQgbm9kZXMsIHRoZW4gZXh0cmFjdCB0aGUgZGVzaXJlZCBub2RlLlxuICpcbiAqIEluIElFOCwgY2VydGFpbiBlbGVtZW50cyBjYW5ub3QgcmVuZGVyIGFsb25lLCBzbyB3cmFwIGFsbCBlbGVtZW50cyAoJyonKS5cbiAqL1xudmFyIHNob3VsZFdyYXAgPSB7XG4gIC8vIEZvcmNlIHdyYXBwaW5nIGZvciBTVkcgZWxlbWVudHMgYmVjYXVzZSBpZiB0aGV5IGdldCBjcmVhdGVkIGluc2lkZSBhIDxkaXY+LFxuICAvLyB0aGV5IHdpbGwgYmUgaW5pdGlhbGl6ZWQgaW4gdGhlIHdyb25nIG5hbWVzcGFjZSAoYW5kIHdpbGwgbm90IGRpc3BsYXkpLlxuICAnY2lyY2xlJzogdHJ1ZSxcbiAgJ2RlZnMnOiB0cnVlLFxuICAnZWxsaXBzZSc6IHRydWUsXG4gICdnJzogdHJ1ZSxcbiAgJ2xpbmUnOiB0cnVlLFxuICAnbGluZWFyR3JhZGllbnQnOiB0cnVlLFxuICAncGF0aCc6IHRydWUsXG4gICdwb2x5Z29uJzogdHJ1ZSxcbiAgJ3BvbHlsaW5lJzogdHJ1ZSxcbiAgJ3JhZGlhbEdyYWRpZW50JzogdHJ1ZSxcbiAgJ3JlY3QnOiB0cnVlLFxuICAnc3RvcCc6IHRydWUsXG4gICd0ZXh0JzogdHJ1ZVxufTtcblxudmFyIHNlbGVjdFdyYXAgPSBbMSwgJzxzZWxlY3QgbXVsdGlwbGU9XCJ0cnVlXCI+JywgJzwvc2VsZWN0PiddO1xudmFyIHRhYmxlV3JhcCA9IFsxLCAnPHRhYmxlPicsICc8L3RhYmxlPiddO1xudmFyIHRyV3JhcCA9IFszLCAnPHRhYmxlPjx0Ym9keT48dHI+JywgJzwvdHI+PC90Ym9keT48L3RhYmxlPiddO1xuXG52YXIgc3ZnV3JhcCA9IFsxLCAnPHN2Zz4nLCAnPC9zdmc+J107XG5cbnZhciBtYXJrdXBXcmFwID0ge1xuICAnKic6IFsxLCAnPzxkaXY+JywgJzwvZGl2PiddLFxuXG4gICdhcmVhJzogWzEsICc8bWFwPicsICc8L21hcD4nXSxcbiAgJ2NvbCc6IFsyLCAnPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAnbGVnZW5kJzogWzEsICc8ZmllbGRzZXQ+JywgJzwvZmllbGRzZXQ+J10sXG4gICdwYXJhbSc6IFsxLCAnPG9iamVjdD4nLCAnPC9vYmplY3Q+J10sXG4gICd0cic6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuXG4gICdvcHRncm91cCc6IHNlbGVjdFdyYXAsXG4gICdvcHRpb24nOiBzZWxlY3RXcmFwLFxuXG4gICdjYXB0aW9uJzogdGFibGVXcmFwLFxuICAnY29sZ3JvdXAnOiB0YWJsZVdyYXAsXG4gICd0Ym9keSc6IHRhYmxlV3JhcCxcbiAgJ3Rmb290JzogdGFibGVXcmFwLFxuICAndGhlYWQnOiB0YWJsZVdyYXAsXG5cbiAgJ3RkJzogdHJXcmFwLFxuICAndGgnOiB0cldyYXAsXG5cbiAgJ2NpcmNsZSc6IHN2Z1dyYXAsXG4gICdkZWZzJzogc3ZnV3JhcCxcbiAgJ2VsbGlwc2UnOiBzdmdXcmFwLFxuICAnZyc6IHN2Z1dyYXAsXG4gICdsaW5lJzogc3ZnV3JhcCxcbiAgJ2xpbmVhckdyYWRpZW50Jzogc3ZnV3JhcCxcbiAgJ3BhdGgnOiBzdmdXcmFwLFxuICAncG9seWdvbic6IHN2Z1dyYXAsXG4gICdwb2x5bGluZSc6IHN2Z1dyYXAsXG4gICdyYWRpYWxHcmFkaWVudCc6IHN2Z1dyYXAsXG4gICdyZWN0Jzogc3ZnV3JhcCxcbiAgJ3N0b3AnOiBzdmdXcmFwLFxuICAndGV4dCc6IHN2Z1dyYXBcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgbWFya3VwIHdyYXAgY29uZmlndXJhdGlvbiBmb3IgdGhlIHN1cHBsaWVkIGBub2RlTmFtZWAuXG4gKlxuICogTk9URTogVGhpcyBsYXppbHkgZGV0ZWN0cyB3aGljaCB3cmFwcyBhcmUgbmVjZXNzYXJ5IGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBub2RlTmFtZSBMb3dlcmNhc2UgYG5vZGVOYW1lYC5cbiAqIEByZXR1cm4gez9hcnJheX0gTWFya3VwIHdyYXAgY29uZmlndXJhdGlvbiwgaWYgYXBwbGljYWJsZS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFya3VwV3JhcChub2RlTmFtZSkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KCEhZHVtbXlOb2RlLCAnTWFya3VwIHdyYXBwaW5nIG5vZGUgbm90IGluaXRpYWxpemVkJykgOiBpbnZhcmlhbnQoISFkdW1teU5vZGUpKTtcbiAgaWYgKCFtYXJrdXBXcmFwLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgIG5vZGVOYW1lID0gJyonO1xuICB9XG4gIGlmICghc2hvdWxkV3JhcC5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcbiAgICBpZiAobm9kZU5hbWUgPT09ICcqJykge1xuICAgICAgZHVtbXlOb2RlLmlubmVySFRNTCA9ICc8bGluayAvPic7XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1bW15Tm9kZS5pbm5lckhUTUwgPSAnPCcgKyBub2RlTmFtZSArICc+PC8nICsgbm9kZU5hbWUgKyAnPic7XG4gICAgfVxuICAgIHNob3VsZFdyYXBbbm9kZU5hbWVdID0gIWR1bW15Tm9kZS5maXJzdENoaWxkO1xuICB9XG4gIHJldHVybiBzaG91bGRXcmFwW25vZGVOYW1lXSA/IG1hcmt1cFdyYXBbbm9kZU5hbWVdIDogbnVsbDtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcmt1cFdyYXA7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvZ2V0TWFya3VwV3JhcC5qc1xuICoqIG1vZHVsZSBpZCA9IDgwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBET0NfTk9ERV9UWVBFID0gOTtcblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NRG9jdW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0aGF0IG1heSBjb250YWluXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIFJlYWN0IGNvbXBvbmVudFxuICogQHJldHVybiB7Pyp9IERPTSBlbGVtZW50IHRoYXQgbWF5IGhhdmUgdGhlIHJlYWN0Um9vdCBJRCwgb3IgbnVsbC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcikge1xuICBpZiAoIWNvbnRhaW5lcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSkge1xuICAgIHJldHVybiBjb250YWluZXIuZG9jdW1lbnRFbGVtZW50O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb250YWluZXIuZmlyc3RDaGlsZDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcjtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9nZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIuanNcbiAqKiBtb2R1bGUgaWQgPSA4MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEdldHMgdGhlIHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgc3VwcGxpZWQgZWxlbWVudCBvciB3aW5kb3cuXG4gKlxuICogVGhlIHJldHVybiB2YWx1ZXMgYXJlIHVuYm91bmRlZCwgdW5saWtlIGBnZXRTY3JvbGxQb3NpdGlvbmAuIFRoaXMgbWVhbnMgdGhleVxuICogbWF5IGJlIG5lZ2F0aXZlIG9yIGV4Y2VlZCB0aGUgZWxlbWVudCBib3VuZGFyaWVzICh3aGljaCBpcyBwb3NzaWJsZSB1c2luZ1xuICogaW5lcnRpYWwgc2Nyb2xsaW5nKS5cbiAqXG4gKiBAcGFyYW0ge0RPTVdpbmRvd3xET01FbGVtZW50fSBzY3JvbGxhYmxlXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcCB3aXRoIGB4YCBhbmQgYHlgIGtleXMuXG4gKi9cbmZ1bmN0aW9uIGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uKHNjcm9sbGFibGUpIHtcbiAgaWYgKHNjcm9sbGFibGUgPT09IHdpbmRvdykge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQsXG4gICAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB4OiBzY3JvbGxhYmxlLnNjcm9sbExlZnQsXG4gICAgeTogc2Nyb2xsYWJsZS5zY3JvbGxUb3BcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbjtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDgyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNUZXh0SW5wdXRFbGVtZW50XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQHNlZSBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS90aGUtaW5wdXQtZWxlbWVudC5odG1sI2lucHV0LXR5cGUtYXR0ci1zdW1tYXJ5XG4gKi9cbnZhciBzdXBwb3J0ZWRJbnB1dFR5cGVzID0ge1xuICAnY29sb3InOiB0cnVlLFxuICAnZGF0ZSc6IHRydWUsXG4gICdkYXRldGltZSc6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWUsXG4gICdlbWFpbCc6IHRydWUsXG4gICdtb250aCc6IHRydWUsXG4gICdudW1iZXInOiB0cnVlLFxuICAncGFzc3dvcmQnOiB0cnVlLFxuICAncmFuZ2UnOiB0cnVlLFxuICAnc2VhcmNoJzogdHJ1ZSxcbiAgJ3RlbCc6IHRydWUsXG4gICd0ZXh0JzogdHJ1ZSxcbiAgJ3RpbWUnOiB0cnVlLFxuICAndXJsJzogdHJ1ZSxcbiAgJ3dlZWsnOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBpc1RleHRJbnB1dEVsZW1lbnQoZWxlbSkge1xuICByZXR1cm4gZWxlbSAmJiAoXG4gICAgKGVsZW0ubm9kZU5hbWUgPT09ICdJTlBVVCcgJiYgc3VwcG9ydGVkSW5wdXRUeXBlc1tlbGVtLnR5cGVdKSB8fFxuICAgIGVsZW0ubm9kZU5hbWUgPT09ICdURVhUQVJFQSdcbiAgKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHRJbnB1dEVsZW1lbnQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvaXNUZXh0SW5wdXRFbGVtZW50LmpzXG4gKiogbW9kdWxlIGlkID0gODNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBtYXBPYmplY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIHByb3ZpZGVkIGBjYWxsYmFja2Agb25jZSBmb3IgZWFjaCBlbnVtZXJhYmxlIG93biBwcm9wZXJ0eSBpbiB0aGVcbiAqIG9iamVjdCBhbmQgY29uc3RydWN0cyBhIG5ldyBvYmplY3QgZnJvbSB0aGUgcmVzdWx0cy4gVGhlIGBjYWxsYmFja2AgaXNcbiAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKlxuICogIC0gdGhlIHByb3BlcnR5IHZhbHVlXG4gKiAgLSB0aGUgcHJvcGVydHkgbmFtZVxuICogIC0gdGhlIG9iamVjdCBiZWluZyB0cmF2ZXJzZWRcbiAqXG4gKiBQcm9wZXJ0aWVzIHRoYXQgYXJlIGFkZGVkIGFmdGVyIHRoZSBjYWxsIHRvIGBtYXBPYmplY3RgIHdpbGwgbm90IGJlIHZpc2l0ZWRcbiAqIGJ5IGBjYWxsYmFja2AuIElmIHRoZSB2YWx1ZXMgb2YgZXhpc3RpbmcgcHJvcGVydGllcyBhcmUgY2hhbmdlZCwgdGhlIHZhbHVlXG4gKiBwYXNzZWQgdG8gYGNhbGxiYWNrYCB3aWxsIGJlIHRoZSB2YWx1ZSBhdCB0aGUgdGltZSBgbWFwT2JqZWN0YCB2aXNpdHMgdGhlbS5cbiAqIFByb3BlcnRpZXMgdGhhdCBhcmUgZGVsZXRlZCBiZWZvcmUgYmVpbmcgdmlzaXRlZCBhcmUgbm90IHZpc2l0ZWQuXG4gKlxuICogQGdyZXAgZnVuY3Rpb24gb2JqZWN0TWFwKClcbiAqIEBncmVwIGZ1bmN0aW9uIG9iak1hcCgpXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcGFyYW0geyp9IGNvbnRleHRcbiAqIEByZXR1cm4gez9vYmplY3R9XG4gKi9cbmZ1bmN0aW9uIG1hcE9iamVjdChvYmplY3QsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gIGlmICghb2JqZWN0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmb3IgKHZhciBuYW1lIGluIG9iamVjdCkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgbmFtZSkpIHtcbiAgICAgIHJlc3VsdFtuYW1lXSA9IGNhbGxiYWNrLmNhbGwoY29udGV4dCwgb2JqZWN0W25hbWVdLCBuYW1lLCBvYmplY3QpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcE9iamVjdDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9tYXBPYmplY3QuanNcbiAqKiBtb2R1bGUgaWQgPSA4NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG1lbW9pemVTdHJpbmdPbmx5XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIE1lbW9pemVzIHRoZSByZXR1cm4gdmFsdWUgb2YgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgb25lIHN0cmluZyBhcmd1bWVudC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVTdHJpbmdPbmx5KGNhbGxiYWNrKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KHN0cmluZykpIHtcbiAgICAgIHJldHVybiBjYWNoZVtzdHJpbmddO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY2FjaGVbc3RyaW5nXSA9IGNhbGxiYWNrLmNhbGwodGhpcywgc3RyaW5nKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZVN0cmluZ09ubHk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvbWVtb2l6ZVN0cmluZ09ubHkuanNcbiAqKiBtb2R1bGUgaWQgPSA4NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNldElubmVySFRNTFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIFdISVRFU1BBQ0VfVEVTVCA9IC9eWyBcXHJcXG5cXHRcXGZdLztcbnZhciBOT05WSVNJQkxFX1RFU1QgPSAvPCghLS18bGlua3xub3NjcmlwdHxtZXRhfHNjcmlwdHxzdHlsZSlbIFxcclxcblxcdFxcZlxcLz5dLztcblxuLyoqXG4gKiBTZXQgdGhlIGlubmVySFRNTCBwcm9wZXJ0eSBvZiBhIG5vZGUsIGVuc3VyaW5nIHRoYXQgd2hpdGVzcGFjZSBpcyBwcmVzZXJ2ZWRcbiAqIGV2ZW4gaW4gSUU4LlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgc2V0SW5uZXJIVE1MID0gZnVuY3Rpb24obm9kZSwgaHRtbCkge1xuICBub2RlLmlubmVySFRNTCA9IGh0bWw7XG59O1xuXG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIC8vIElFODogV2hlbiB1cGRhdGluZyBhIGp1c3QgY3JlYXRlZCBub2RlIHdpdGggaW5uZXJIVE1MIG9ubHkgbGVhZGluZ1xuICAvLyB3aGl0ZXNwYWNlIGlzIHJlbW92ZWQuIFdoZW4gdXBkYXRpbmcgYW4gZXhpc3Rpbmcgbm9kZSB3aXRoIGlubmVySFRNTFxuICAvLyB3aGl0ZXNwYWNlIGluIHJvb3QgVGV4dE5vZGVzIGlzIGFsc28gY29sbGFwc2VkLlxuICAvLyBAc2VlIHF1aXJrc21vZGUub3JnL2J1Z3JlcG9ydHMvYXJjaGl2ZXMvMjAwNC8xMS9pbm5lcmh0bWxfYW5kX3QuaHRtbFxuXG4gIC8vIEZlYXR1cmUgZGV0ZWN0aW9uOyBvbmx5IElFOCBpcyBrbm93biB0byBiZWhhdmUgaW1wcm9wZXJseSBsaWtlIHRoaXMuXG4gIHZhciB0ZXN0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0ZXN0RWxlbWVudC5pbm5lckhUTUwgPSAnICc7XG4gIGlmICh0ZXN0RWxlbWVudC5pbm5lckhUTUwgPT09ICcnKSB7XG4gICAgc2V0SW5uZXJIVE1MID0gZnVuY3Rpb24obm9kZSwgaHRtbCkge1xuICAgICAgLy8gTWFnaWMgdGhlb3J5OiBJRTggc3VwcG9zZWRseSBkaWZmZXJlbnRpYXRlcyBiZXR3ZWVuIGFkZGVkIGFuZCB1cGRhdGVkXG4gICAgICAvLyBub2RlcyB3aGVuIHByb2Nlc3NpbmcgaW5uZXJIVE1MLCBpbm5lckhUTUwgb24gdXBkYXRlZCBub2RlcyBzdWZmZXJzXG4gICAgICAvLyBmcm9tIHdvcnNlIHdoaXRlc3BhY2UgYmVoYXZpb3IuIFJlLWFkZGluZyBhIG5vZGUgbGlrZSB0aGlzIHRyaWdnZXJzXG4gICAgICAvLyB0aGUgaW5pdGlhbCBhbmQgbW9yZSBmYXZvcmFibGUgd2hpdGVzcGFjZSBiZWhhdmlvci5cbiAgICAgIC8vIFRPRE86IFdoYXQgdG8gZG8gb24gYSBkZXRhY2hlZCBub2RlP1xuICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5vZGUsIG5vZGUpO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSBhbHNvIGltcGxlbWVudCBhIHdvcmthcm91bmQgZm9yIG5vbi12aXNpYmxlIHRhZ3MgZGlzYXBwZWFyaW5nIGludG9cbiAgICAgIC8vIHRoaW4gYWlyIG9uIElFOCwgdGhpcyBvbmx5IGhhcHBlbnMgaWYgdGhlcmUgaXMgbm8gdmlzaWJsZSB0ZXh0XG4gICAgICAvLyBpbi1mcm9udCBvZiB0aGUgbm9uLXZpc2libGUgdGFncy4gUGlnZ3liYWNrIG9uIHRoZSB3aGl0ZXNwYWNlIGZpeFxuICAgICAgLy8gYW5kIHNpbXBseSBjaGVjayBpZiBhbnkgbm9uLXZpc2libGUgdGFncyBhcHBlYXIgaW4gdGhlIHNvdXJjZS5cbiAgICAgIGlmIChXSElURVNQQUNFX1RFU1QudGVzdChodG1sKSB8fFxuICAgICAgICAgIGh0bWxbMF0gPT09ICc8JyAmJiBOT05WSVNJQkxFX1RFU1QudGVzdChodG1sKSkge1xuICAgICAgICAvLyBSZWNvdmVyIGxlYWRpbmcgd2hpdGVzcGFjZSBieSB0ZW1wb3JhcmlseSBwcmVwZW5kaW5nIGFueSBjaGFyYWN0ZXIuXG4gICAgICAgIC8vIFxcdUZFRkYgaGFzIHRoZSBwb3RlbnRpYWwgYWR2YW50YWdlIG9mIGJlaW5nIHplcm8td2lkdGgvaW52aXNpYmxlLlxuICAgICAgICBub2RlLmlubmVySFRNTCA9ICdcXHVGRUZGJyArIGh0bWw7XG5cbiAgICAgICAgLy8gZGVsZXRlRGF0YSBsZWF2ZXMgYW4gZW1wdHkgYFRleHROb2RlYCB3aGljaCBvZmZzZXRzIHRoZSBpbmRleCBvZiBhbGxcbiAgICAgICAgLy8gY2hpbGRyZW4uIERlZmluaXRlbHkgd2FudCB0byBhdm9pZCB0aGlzLlxuICAgICAgICB2YXIgdGV4dE5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGlmICh0ZXh0Tm9kZS5kYXRhLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQodGV4dE5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHROb2RlLmRlbGV0ZURhdGEoMCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0SW5uZXJIVE1MO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL3NldElubmVySFRNTC5qc1xuICoqIG1vZHVsZSBpZCA9IDg2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgdHJhdmVyc2VBbGxDaGlsZHJlblxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbnZhciBTRVBBUkFUT1IgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5TRVBBUkFUT1I7XG52YXIgU1VCU0VQQVJBVE9SID0gJzonO1xuXG4vKipcbiAqIFRPRE86IFRlc3QgdGhhdDpcbiAqIDEuIGBtYXBDaGlsZHJlbmAgdHJhbnNmb3JtcyBzdHJpbmdzIGFuZCBudW1iZXJzIGludG8gYFJlYWN0VGV4dENvbXBvbmVudGAuXG4gKiAyLiBpdCgnc2hvdWxkIGZhaWwgd2hlbiBzdXBwbGllZCBkdXBsaWNhdGUga2V5JywgZnVuY3Rpb24oKSB7XG4gKiAzLiBUaGF0IGEgc2luZ2xlIGNoaWxkIGFuZCBhbiBhcnJheSB3aXRoIG9uZSBpdGVtIGhhdmUgdGhlIHNhbWUga2V5IHBhdHRlcm4uXG4gKiB9KTtcbiAqL1xuXG52YXIgdXNlclByb3ZpZGVkS2V5RXNjYXBlckxvb2t1cCA9IHtcbiAgJz0nOiAnPTAnLFxuICAnLic6ICc9MScsXG4gICc6JzogJz0yJ1xufTtcblxudmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4ID0gL1s9LjpdL2c7XG5cbmZ1bmN0aW9uIHVzZXJQcm92aWRlZEtleUVzY2FwZXIobWF0Y2gpIHtcbiAgcmV0dXJuIHVzZXJQcm92aWRlZEtleUVzY2FwZXJMb29rdXBbbWF0Y2hdO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEga2V5IHN0cmluZyB0aGF0IGlkZW50aWZpZXMgYSBjb21wb25lbnQgd2l0aGluIGEgc2V0LlxuICpcbiAqIEBwYXJhbSB7Kn0gY29tcG9uZW50IEEgY29tcG9uZW50IHRoYXQgY291bGQgY29udGFpbiBhIG1hbnVhbCBrZXkuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggdGhhdCBpcyB1c2VkIGlmIGEgbWFudWFsIGtleSBpcyBub3QgcHJvdmlkZWQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldENvbXBvbmVudEtleShjb21wb25lbnQsIGluZGV4KSB7XG4gIGlmIChjb21wb25lbnQgJiYgY29tcG9uZW50LmtleSAhPSBudWxsKSB7XG4gICAgLy8gRXhwbGljaXQga2V5XG4gICAgcmV0dXJuIHdyYXBVc2VyUHJvdmlkZWRLZXkoY29tcG9uZW50LmtleSk7XG4gIH1cbiAgLy8gSW1wbGljaXQga2V5IGRldGVybWluZWQgYnkgdGhlIGluZGV4IGluIHRoZSBzZXRcbiAgcmV0dXJuIGluZGV4LnRvU3RyaW5nKDM2KTtcbn1cblxuLyoqXG4gKiBFc2NhcGUgYSBjb21wb25lbnQga2V5IHNvIHRoYXQgaXQgaXMgc2FmZSB0byB1c2UgaW4gYSByZWFjdGlkLlxuICpcbiAqIEBwYXJhbSB7Kn0ga2V5IENvbXBvbmVudCBrZXkgdG8gYmUgZXNjYXBlZC5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVVzZXJQcm92aWRlZEtleSh0ZXh0KSB7XG4gIHJldHVybiAoJycgKyB0ZXh0KS5yZXBsYWNlKFxuICAgIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4LFxuICAgIHVzZXJQcm92aWRlZEtleUVzY2FwZXJcbiAgKTtcbn1cblxuLyoqXG4gKiBXcmFwIGEgYGtleWAgdmFsdWUgZXhwbGljaXRseSBwcm92aWRlZCBieSB0aGUgdXNlciB0byBkaXN0aW5ndWlzaCBpdCBmcm9tXG4gKiBpbXBsaWNpdGx5LWdlbmVyYXRlZCBrZXlzIGdlbmVyYXRlZCBieSBhIGNvbXBvbmVudCdzIGluZGV4IGluIGl0cyBwYXJlbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBWYWx1ZSBvZiBhIHVzZXItcHJvdmlkZWQgYGtleWAgYXR0cmlidXRlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHdyYXBVc2VyUHJvdmlkZWRLZXkoa2V5KSB7XG4gIHJldHVybiAnJCcgKyBlc2NhcGVVc2VyUHJvdmlkZWRLZXkoa2V5KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7IXN0cmluZ30gbmFtZVNvRmFyIE5hbWUgb2YgdGhlIGtleSBwYXRoIHNvIGZhci5cbiAqIEBwYXJhbSB7IW51bWJlcn0gaW5kZXhTb0ZhciBOdW1iZXIgb2YgY2hpbGRyZW4gZW5jb3VudGVyZWQgdW50aWwgdGhpcyBwb2ludC5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayB0byBpbnZva2Ugd2l0aCBlYWNoIGNoaWxkIGZvdW5kLlxuICogQHBhcmFtIHs/Kn0gdHJhdmVyc2VDb250ZXh0IFVzZWQgdG8gcGFzcyBpbmZvcm1hdGlvbiB0aHJvdWdob3V0IHRoZSB0cmF2ZXJzYWxcbiAqIHByb2Nlc3MuXG4gKiBAcmV0dXJuIHshbnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuIGluIHRoaXMgc3VidHJlZS5cbiAqL1xudmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsID1cbiAgZnVuY3Rpb24oY2hpbGRyZW4sIG5hbWVTb0ZhciwgaW5kZXhTb0ZhciwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCkge1xuICAgIHZhciBuZXh0TmFtZSwgbmV4dEluZGV4O1xuICAgIHZhciBzdWJ0cmVlQ291bnQgPSAwOyAgLy8gQ291bnQgb2YgY2hpbGRyZW4gZm91bmQgaW4gdGhlIGN1cnJlbnQgc3VidHJlZS5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgIG5leHROYW1lID0gKFxuICAgICAgICAgIG5hbWVTb0ZhciArXG4gICAgICAgICAgKG5hbWVTb0ZhciA/IFNVQlNFUEFSQVRPUiA6IFNFUEFSQVRPUikgK1xuICAgICAgICAgIGdldENvbXBvbmVudEtleShjaGlsZCwgaSlcbiAgICAgICAgKTtcbiAgICAgICAgbmV4dEluZGV4ID0gaW5kZXhTb0ZhciArIHN1YnRyZWVDb3VudDtcbiAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKFxuICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgIG5leHROYW1lLFxuICAgICAgICAgIG5leHRJbmRleCxcbiAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICB0cmF2ZXJzZUNvbnRleHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgY2hpbGRyZW47XG4gICAgICB2YXIgaXNPbmx5Q2hpbGQgPSBuYW1lU29GYXIgPT09ICcnO1xuICAgICAgLy8gSWYgaXQncyB0aGUgb25seSBjaGlsZCwgdHJlYXQgdGhlIG5hbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gYW4gYXJyYXlcbiAgICAgIC8vIHNvIHRoYXQgaXQncyBjb25zaXN0ZW50IGlmIHRoZSBudW1iZXIgb2YgY2hpbGRyZW4gZ3Jvd3NcbiAgICAgIHZhciBzdG9yYWdlTmFtZSA9XG4gICAgICAgIGlzT25seUNoaWxkID8gU0VQQVJBVE9SICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkcmVuLCAwKSA6IG5hbWVTb0ZhcjtcbiAgICAgIGlmIChjaGlsZHJlbiA9PSBudWxsIHx8IHR5cGUgPT09ICdib29sZWFuJykge1xuICAgICAgICAvLyBBbGwgb2YgdGhlIGFib3ZlIGFyZSBwZXJjZWl2ZWQgYXMgbnVsbC5cbiAgICAgICAgY2FsbGJhY2sodHJhdmVyc2VDb250ZXh0LCBudWxsLCBzdG9yYWdlTmFtZSwgaW5kZXhTb0Zhcik7XG4gICAgICAgIHN1YnRyZWVDb3VudCA9IDE7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGUgPT09ICdudW1iZXInIHx8XG4gICAgICAgICAgICAgICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikpIHtcbiAgICAgICAgY2FsbGJhY2sodHJhdmVyc2VDb250ZXh0LCBjaGlsZHJlbiwgc3RvcmFnZU5hbWUsIGluZGV4U29GYXIpO1xuICAgICAgICBzdWJ0cmVlQ291bnQgPSAxO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgICFjaGlsZHJlbiB8fCBjaGlsZHJlbi5ub2RlVHlwZSAhPT0gMSxcbiAgICAgICAgICAndHJhdmVyc2VBbGxDaGlsZHJlbiguLi4pOiBFbmNvdW50ZXJlZCBhbiBpbnZhbGlkIGNoaWxkOyBET00gJyArXG4gICAgICAgICAgJ2VsZW1lbnRzIGFyZSBub3QgdmFsaWQgY2hpbGRyZW4gb2YgUmVhY3QgY29tcG9uZW50cy4nXG4gICAgICAgICkgOiBpbnZhcmlhbnQoIWNoaWxkcmVuIHx8IGNoaWxkcmVuLm5vZGVUeXBlICE9PSAxKSk7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBjaGlsZHJlbikge1xuICAgICAgICAgIGlmIChjaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBuZXh0TmFtZSA9IChcbiAgICAgICAgICAgICAgbmFtZVNvRmFyICsgKG5hbWVTb0ZhciA/IFNVQlNFUEFSQVRPUiA6IFNFUEFSQVRPUikgK1xuICAgICAgICAgICAgICB3cmFwVXNlclByb3ZpZGVkS2V5KGtleSkgKyBTVUJTRVBBUkFUT1IgK1xuICAgICAgICAgICAgICBnZXRDb21wb25lbnRLZXkoY2hpbGRyZW5ba2V5XSwgMClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBuZXh0SW5kZXggPSBpbmRleFNvRmFyICsgc3VidHJlZUNvdW50O1xuICAgICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKFxuICAgICAgICAgICAgICBjaGlsZHJlbltrZXldLFxuICAgICAgICAgICAgICBuZXh0TmFtZSxcbiAgICAgICAgICAgICAgbmV4dEluZGV4LFxuICAgICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgICAgdHJhdmVyc2VDb250ZXh0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3VidHJlZUNvdW50O1xuICB9O1xuXG4vKipcbiAqIFRyYXZlcnNlcyBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAsIGJ1dFxuICogbWlnaHQgYWxzbyBiZSBzcGVjaWZpZWQgdGhyb3VnaCBhdHRyaWJ1dGVzOlxuICpcbiAqIC0gYHRyYXZlcnNlQWxsQ2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbiwgLi4uKWBcbiAqIC0gYHRyYXZlcnNlQWxsQ2hpbGRyZW4odGhpcy5wcm9wcy5sZWZ0UGFuZWxDaGlsZHJlbiwgLi4uKWBcbiAqXG4gKiBUaGUgYHRyYXZlcnNlQ29udGV4dGAgaXMgYW4gb3B0aW9uYWwgYXJndW1lbnQgdGhhdCBpcyBwYXNzZWQgdGhyb3VnaCB0aGVcbiAqIGVudGlyZSB0cmF2ZXJzYWwuIEl0IGNhbiBiZSB1c2VkIHRvIHN0b3JlIGFjY3VtdWxhdGlvbnMgb3IgYW55dGhpbmcgZWxzZSB0aGF0XG4gKiB0aGUgY2FsbGJhY2sgbWlnaHQgZmluZCByZWxldmFudC5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIG9iamVjdC5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBjYWxsYmFjayBUbyBpbnZva2UgdXBvbiB0cmF2ZXJzaW5nIGVhY2ggY2hpbGQuXG4gKiBAcGFyYW0gez8qfSB0cmF2ZXJzZUNvbnRleHQgQ29udGV4dCBmb3IgdHJhdmVyc2FsLlxuICogQHJldHVybiB7IW51bWJlcn0gVGhlIG51bWJlciBvZiBjaGlsZHJlbiBpbiB0aGlzIHN1YnRyZWUuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZHJlbiwgJycsIDAsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRyYXZlcnNlQWxsQ2hpbGRyZW47XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvdHJhdmVyc2VBbGxDaGlsZHJlbi5qc1xuICoqIG1vZHVsZSBpZCA9IDg3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciBsaXN0ID0gW107XHJcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSB0aGlzW2ldO1xyXG5cdFx0XHRpZihpdGVtWzJdKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBpdGVtWzFdICsgXCJ9XCIpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGl0ZW1bMV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XHJcblx0fTtcclxuXHRyZXR1cm4gbGlzdDtcclxufVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIvY3NzVG9TdHJpbmcuanNcbiAqKiBtb2R1bGUgaWQgPSA4OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIFN0cnVjdHVyZSA9IHJlcXVpcmUoJy4vc3JjL3N0cnVjdHVyZScpO1xuXG5mdW5jdGlvbiBJbW1zdHJ1Y3QgKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSW1tc3RydWN0KSkge1xuICAgIHJldHVybiBuZXcgSW1tc3RydWN0KCk7XG4gIH1cblxuICB0aGlzLmluc3RhbmNlcyA9IHt9O1xufVxuXG5JbW1zdHJ1Y3QucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXksIGRhdGEpIHtcbiAgcmV0dXJuIGdldEluc3RhbmNlKHRoaXMsIHtcbiAgICBrZXk6IGtleSxcbiAgICBkYXRhOiBkYXRhXG4gIH0pO1xufTtcblxuSW1tc3RydWN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5pbnN0YW5jZXMgPSB7fTtcbn07XG5cbkltbXN0cnVjdC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gZGVsZXRlIHRoaXMuaW5zdGFuY2VzW2tleV07XG59O1xuXG5JbW1zdHJ1Y3QucHJvdG90eXBlLndpdGhIaXN0b3J5ID0gZnVuY3Rpb24gKGtleSwgZGF0YSkge1xuICByZXR1cm4gZ2V0SW5zdGFuY2UodGhpcywge1xuICAgIGtleToga2V5LFxuICAgIGRhdGE6IGRhdGEsXG4gICAgaGlzdG9yeTogdHJ1ZVxuICB9KTtcbn07XG5cbnZhciBpbnN0ID0gbmV3IEltbXN0cnVjdCgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIGRhdGEpIHtcbiAgcmV0dXJuIGdldEluc3RhbmNlKGluc3QsIHtcbiAgICBrZXk6IGtleSxcbiAgICBkYXRhOiBkYXRhXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMud2l0aEhpc3RvcnkgPSBmdW5jdGlvbiAoa2V5LCBkYXRhKSB7XG4gIHJldHVybiBnZXRJbnN0YW5jZShpbnN0LCB7XG4gICAga2V5OiBrZXksXG4gICAgZGF0YTogZGF0YSxcbiAgICBoaXN0b3J5OiB0cnVlXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMuU3RydWN0dXJlID0gU3RydWN0dXJlO1xubW9kdWxlLmV4cG9ydHMuSW1tc3RydWN0ID0gSW1tc3RydWN0O1xubW9kdWxlLmV4cG9ydHMuY2xlYXIgPSBpbnN0LmNsZWFyLmJpbmQoaW5zdCk7XG5tb2R1bGUuZXhwb3J0cy5yZW1vdmUgPSBpbnN0LnJlbW92ZS5iaW5kKGluc3QpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnaW5zdGFuY2VzJywge1xuICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gaW5zdC5pbnN0YW5jZXM7IH0sXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIGdldEluc3RhbmNlIChvYmosIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmtleSA9PT0gJ29iamVjdCcpIHtcbiAgICBvcHRpb25zLmRhdGEgPSBvcHRpb25zLmtleTtcbiAgICBvcHRpb25zLmtleSA9IHZvaWQgMDtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmtleSAmJiBvYmouaW5zdGFuY2VzW29wdGlvbnMua2V5XSkge1xuICAgIHJldHVybiBvYmouaW5zdGFuY2VzW29wdGlvbnMua2V5XTtcbiAgfVxuXG4gIHZhciBuZXdJbnN0YW5jZSA9IG5ldyBTdHJ1Y3R1cmUob3B0aW9ucyk7XG4gIG9iai5pbnN0YW5jZXNbbmV3SW5zdGFuY2Uua2V5XSA9IG5ld0luc3RhbmNlO1xuICByZXR1cm4gbmV3SW5zdGFuY2U7XG59XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vaW1tc3RydWN0L2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gODlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBSZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSBFdmVudEVtaXR0ZXIgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRXZlbnQgaGFuZGxlciB0byBiZSBjYWxsZWQuXG4gKiBAcGFyYW0ge01peGVkfSBjb250ZXh0IENvbnRleHQgZm9yIGZ1bmN0aW9uIGV4ZWN1dGlvbi5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IGVtaXQgb25jZVxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEVFKGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHRoaXMuZm4gPSBmbjtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5vbmNlID0gb25jZSB8fCBmYWxzZTtcbn1cblxuLyoqXG4gKiBNaW5pbWFsIEV2ZW50RW1pdHRlciBpbnRlcmZhY2UgdGhhdCBpcyBtb2xkZWQgYWdhaW5zdCB0aGUgTm9kZS5qc1xuICogRXZlbnRFbWl0dGVyIGludGVyZmFjZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHsgLyogTm90aGluZyB0byBzZXQgKi8gfVxuXG4vKipcbiAqIEhvbGRzIHRoZSBhc3NpZ25lZCBFdmVudEVtaXR0ZXJzIGJ5IG5hbWUuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBSZXR1cm4gYSBsaXN0IG9mIGFzc2lnbmVkIGV2ZW50IGxpc3RlbmVycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgVGhlIGV2ZW50cyB0aGF0IHNob3VsZCBiZSBsaXN0ZWQuXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyhldmVudCkge1xuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW2V2ZW50XSkgcmV0dXJuIFtdO1xuICBpZiAodGhpcy5fZXZlbnRzW2V2ZW50XS5mbikgcmV0dXJuIFt0aGlzLl9ldmVudHNbZXZlbnRdLmZuXTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuX2V2ZW50c1tldmVudF0ubGVuZ3RoLCBlZSA9IG5ldyBBcnJheShsKTsgaSA8IGw7IGkrKykge1xuICAgIGVlW2ldID0gdGhpcy5fZXZlbnRzW2V2ZW50XVtpXS5mbjtcbiAgfVxuXG4gIHJldHVybiBlZTtcbn07XG5cbi8qKlxuICogRW1pdCBhbiBldmVudCB0byBhbGwgcmVnaXN0ZXJlZCBldmVudCBsaXN0ZW5lcnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IFRoZSBuYW1lIG9mIHRoZSBldmVudC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBJbmRpY2F0aW9uIGlmIHdlJ3ZlIGVtaXR0ZWQgYW4gZXZlbnQuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2ZW50LCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1tldmVudF0pIHJldHVybiBmYWxzZTtcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2ZW50XVxuICAgICwgbGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgYXJnc1xuICAgICwgaTtcblxuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGxpc3RlbmVycy5mbikge1xuICAgIGlmIChsaXN0ZW5lcnMub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzLmZuLCB0cnVlKTtcblxuICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCksIHRydWU7XG4gICAgICBjYXNlIDI6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEpLCB0cnVlO1xuICAgICAgY2FzZSAzOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiksIHRydWU7XG4gICAgICBjYXNlIDQ6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMyksIHRydWU7XG4gICAgICBjYXNlIDU6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQpLCB0cnVlO1xuICAgICAgY2FzZSA2OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0LCBhNSksIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mbi5hcHBseShsaXN0ZW5lcnMuY29udGV4dCwgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGhcbiAgICAgICwgajtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbaV0uZm4sIHRydWUpO1xuXG4gICAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgICBjYXNlIDE6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMik7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmICghYXJncykgZm9yIChqID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaiAtIDFdID0gYXJndW1lbnRzW2pdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbi5hcHBseShsaXN0ZW5lcnNbaV0uY29udGV4dCwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIFJlZ2lzdGVyIGEgbmV3IEV2ZW50TGlzdGVuZXIgZm9yIHRoZSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgTmFtZSBvZiB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge0Z1bmN0b259IGZuIENhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBUaGUgY29udGV4dCBvZiB0aGUgZnVuY3Rpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCB0aGlzKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cykgdGhpcy5fZXZlbnRzID0ge307XG4gIGlmICghdGhpcy5fZXZlbnRzW2V2ZW50XSkgdGhpcy5fZXZlbnRzW2V2ZW50XSA9IGxpc3RlbmVyO1xuICBlbHNlIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50c1tldmVudF0uZm4pIHRoaXMuX2V2ZW50c1tldmVudF0ucHVzaChsaXN0ZW5lcik7XG4gICAgZWxzZSB0aGlzLl9ldmVudHNbZXZlbnRdID0gW1xuICAgICAgdGhpcy5fZXZlbnRzW2V2ZW50XSwgbGlzdGVuZXJcbiAgICBdO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFkZCBhbiBFdmVudExpc3RlbmVyIHRoYXQncyBvbmx5IGNhbGxlZCBvbmNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBOYW1lIG9mIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIENhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBUaGUgY29udGV4dCBvZiB0aGUgZnVuY3Rpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgdGhpcywgdHJ1ZSk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpIHRoaXMuX2V2ZW50cyA9IHt9O1xuICBpZiAoIXRoaXMuX2V2ZW50c1tldmVudF0pIHRoaXMuX2V2ZW50c1tldmVudF0gPSBsaXN0ZW5lcjtcbiAgZWxzZSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHNbZXZlbnRdLmZuKSB0aGlzLl9ldmVudHNbZXZlbnRdLnB1c2gobGlzdGVuZXIpO1xuICAgIGVsc2UgdGhpcy5fZXZlbnRzW2V2ZW50XSA9IFtcbiAgICAgIHRoaXMuX2V2ZW50c1tldmVudF0sIGxpc3RlbmVyXG4gICAgXTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBUaGUgZXZlbnQgd2Ugd2FudCB0byByZW1vdmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgdGhhdCB3ZSBuZWVkIHRvIGZpbmQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgT25seSByZW1vdmUgb25jZSBsaXN0ZW5lcnMuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGZuLCBvbmNlKSB7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbZXZlbnRdKSByZXR1cm4gdGhpcztcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2ZW50XVxuICAgICwgZXZlbnRzID0gW107XG5cbiAgaWYgKGZuKSB7XG4gICAgaWYgKGxpc3RlbmVycy5mbiAmJiAobGlzdGVuZXJzLmZuICE9PSBmbiB8fCAob25jZSAmJiAhbGlzdGVuZXJzLm9uY2UpKSkge1xuICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzKTtcbiAgICB9XG4gICAgaWYgKCFsaXN0ZW5lcnMuZm4pIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChsaXN0ZW5lcnNbaV0uZm4gIT09IGZuIHx8IChvbmNlICYmICFsaXN0ZW5lcnNbaV0ub25jZSkpIHtcbiAgICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvL1xuICAvLyBSZXNldCB0aGUgYXJyYXksIG9yIHJlbW92ZSBpdCBjb21wbGV0ZWx5IGlmIHdlIGhhdmUgbm8gbW9yZSBsaXN0ZW5lcnMuXG4gIC8vXG4gIGlmIChldmVudHMubGVuZ3RoKSB7XG4gICAgdGhpcy5fZXZlbnRzW2V2ZW50XSA9IGV2ZW50cy5sZW5ndGggPT09IDEgPyBldmVudHNbMF0gOiBldmVudHM7XG4gIH0gZWxzZSB7XG4gICAgZGVsZXRlIHRoaXMuX2V2ZW50c1tldmVudF07XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFsbCBsaXN0ZW5lcnMgb3Igb25seSB0aGUgbGlzdGVuZXJzIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBUaGUgZXZlbnQgd2FudCB0byByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuICBpZiAoIXRoaXMuX2V2ZW50cykgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKGV2ZW50KSBkZWxldGUgdGhpcy5fZXZlbnRzW2V2ZW50XTtcbiAgZWxzZSB0aGlzLl9ldmVudHMgPSB7fTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBBbGlhcyBtZXRob2RzIG5hbWVzIGJlY2F1c2UgcGVvcGxlIHJvbGwgbGlrZSB0aGF0LlxuLy9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uO1xuXG4vL1xuLy8gVGhpcyBmdW5jdGlvbiBkb2Vzbid0IGFwcGx5IGFueW1vcmUuXG4vL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyMiA9IEV2ZW50RW1pdHRlcjtcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIzID0gRXZlbnRFbWl0dGVyO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9pbW1zdHJ1Y3Qvfi9ldmVudGVtaXR0ZXIzL2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gOTBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqICBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqICBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqICBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4vKipcbiAqIEN1cnNvciBpcyBleHBlY3RlZCB0byBiZSByZXF1aXJlZCBpbiBhIG5vZGUgb3Igb3RoZXIgQ29tbW9uSlMgY29udGV4dDpcbiAqXG4gKiAgICAgdmFyIEN1cnNvciA9IHJlcXVpcmUoJ2ltbXV0YWJsZS9jb250cmliL2N1cnNvcicpO1xuICpcbiAqIElmIHlvdSB3aXNoIHRvIHVzZSBpdCBpbiB0aGUgYnJvd3NlciwgcGxlYXNlIGNoZWNrIG91dCBCcm93c2VyaWZ5IG9yIFdlYlBhY2shXG4gKi9cblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xudmFyIEl0ZXJhYmxlID0gSW1tdXRhYmxlLkl0ZXJhYmxlO1xudmFyIEl0ZXJhdG9yID0gSXRlcmFibGUuSXRlcmF0b3I7XG52YXIgU2VxID0gSW1tdXRhYmxlLlNlcTtcbnZhciBNYXAgPSBJbW11dGFibGUuTWFwO1xuXG5cbmZ1bmN0aW9uIGN1cnNvckZyb20ocm9vdERhdGEsIGtleVBhdGgsIG9uQ2hhbmdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAga2V5UGF0aCA9IFtdO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBrZXlQYXRoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb25DaGFuZ2UgPSBrZXlQYXRoO1xuICAgIGtleVBhdGggPSBbXTtcbiAgfSBlbHNlIHtcbiAgICBrZXlQYXRoID0gdmFsVG9LZXlQYXRoKGtleVBhdGgpO1xuICB9XG4gIHJldHVybiBtYWtlQ3Vyc29yKHJvb3REYXRhLCBrZXlQYXRoLCBvbkNoYW5nZSk7XG59XG5cblxudmFyIEtleWVkQ3Vyc29yUHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTZXEuS2V5ZWQucHJvdG90eXBlKTtcbnZhciBJbmRleGVkQ3Vyc29yUHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTZXEuSW5kZXhlZC5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBLZXllZEN1cnNvcihyb290RGF0YSwga2V5UGF0aCwgb25DaGFuZ2UsIHNpemUpIHtcbiAgdGhpcy5zaXplID0gc2l6ZTtcbiAgdGhpcy5fcm9vdERhdGEgPSByb290RGF0YTtcbiAgdGhpcy5fa2V5UGF0aCA9IGtleVBhdGg7XG4gIHRoaXMuX29uQ2hhbmdlID0gb25DaGFuZ2U7XG59XG5LZXllZEN1cnNvclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEtleWVkQ3Vyc29yO1xuXG5mdW5jdGlvbiBJbmRleGVkQ3Vyc29yKHJvb3REYXRhLCBrZXlQYXRoLCBvbkNoYW5nZSwgc2l6ZSkge1xuICB0aGlzLnNpemUgPSBzaXplO1xuICB0aGlzLl9yb290RGF0YSA9IHJvb3REYXRhO1xuICB0aGlzLl9rZXlQYXRoID0ga2V5UGF0aDtcbiAgdGhpcy5fb25DaGFuZ2UgPSBvbkNoYW5nZTtcbn1cbkluZGV4ZWRDdXJzb3JQcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbmRleGVkQ3Vyc29yO1xuXG5LZXllZEN1cnNvclByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdDdXJzb3IgeycsICd9Jyk7XG59XG5JbmRleGVkQ3Vyc29yUHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ0N1cnNvciBbJywgJ10nKTtcbn1cblxuS2V5ZWRDdXJzb3JQcm90b3R5cGUuZGVyZWYgPVxuS2V5ZWRDdXJzb3JQcm90b3R5cGUudmFsdWVPZiA9XG5JbmRleGVkQ3Vyc29yUHJvdG90eXBlLmRlcmVmID1cbkluZGV4ZWRDdXJzb3JQcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uKG5vdFNldFZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9yb290RGF0YS5nZXRJbih0aGlzLl9rZXlQYXRoLCBub3RTZXRWYWx1ZSk7XG59XG5cbktleWVkQ3Vyc29yUHJvdG90eXBlLmdldCA9XG5JbmRleGVkQ3Vyc29yUHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGtleSwgbm90U2V0VmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0SW4oW2tleV0sIG5vdFNldFZhbHVlKTtcbn1cblxuS2V5ZWRDdXJzb3JQcm90b3R5cGUuZ2V0SW4gPVxuSW5kZXhlZEN1cnNvclByb3RvdHlwZS5nZXRJbiA9IGZ1bmN0aW9uKGtleVBhdGgsIG5vdFNldFZhbHVlKSB7XG4gIGtleVBhdGggPSBsaXN0VG9LZXlQYXRoKGtleVBhdGgpO1xuICBpZiAoa2V5UGF0aC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB2YXIgdmFsdWUgPSB0aGlzLl9yb290RGF0YS5nZXRJbihuZXdLZXlQYXRoKHRoaXMuX2tleVBhdGgsIGtleVBhdGgpLCBOT1RfU0VUKTtcbiAgcmV0dXJuIHZhbHVlID09PSBOT1RfU0VUID8gbm90U2V0VmFsdWUgOiB3cmFwcGVkVmFsdWUodGhpcywga2V5UGF0aCwgdmFsdWUpO1xufVxuXG5JbmRleGVkQ3Vyc29yUHJvdG90eXBlLnNldCA9XG5LZXllZEN1cnNvclByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gIHJldHVybiB1cGRhdGVDdXJzb3IodGhpcywgZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0uc2V0KGtleSwgdmFsdWUpOyB9LCBba2V5XSk7XG59XG5cbkluZGV4ZWRDdXJzb3JQcm90b3R5cGUuc2V0SW4gPVxuS2V5ZWRDdXJzb3JQcm90b3R5cGUuc2V0SW4gPSBNYXAucHJvdG90eXBlLnNldEluO1xuXG5LZXllZEN1cnNvclByb3RvdHlwZS5yZW1vdmUgPVxuS2V5ZWRDdXJzb3JQcm90b3R5cGVbJ2RlbGV0ZSddID1cbkluZGV4ZWRDdXJzb3JQcm90b3R5cGUucmVtb3ZlID1cbkluZGV4ZWRDdXJzb3JQcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24oa2V5KSB7XG4gIHJldHVybiB1cGRhdGVDdXJzb3IodGhpcywgZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ucmVtb3ZlKGtleSk7IH0sIFtrZXldKTtcbn1cblxuSW5kZXhlZEN1cnNvclByb3RvdHlwZS5yZW1vdmVJbiA9XG5JbmRleGVkQ3Vyc29yUHJvdG90eXBlLmRlbGV0ZUluID1cbktleWVkQ3Vyc29yUHJvdG90eXBlLnJlbW92ZUluID1cbktleWVkQ3Vyc29yUHJvdG90eXBlLmRlbGV0ZUluID0gTWFwLnByb3RvdHlwZS5kZWxldGVJbjtcblxuS2V5ZWRDdXJzb3JQcm90b3R5cGUuY2xlYXIgPVxuSW5kZXhlZEN1cnNvclByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdXBkYXRlQ3Vyc29yKHRoaXMsIGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLmNsZWFyKCk7IH0pO1xufVxuXG5JbmRleGVkQ3Vyc29yUHJvdG90eXBlLnVwZGF0ZSA9XG5LZXllZEN1cnNvclByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihrZXlPckZuLCBub3RTZXRWYWx1ZSwgdXBkYXRlcikge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG4gICAgdXBkYXRlQ3Vyc29yKHRoaXMsIGtleU9yRm4pIDpcbiAgICB0aGlzLnVwZGF0ZUluKFtrZXlPckZuXSwgbm90U2V0VmFsdWUsIHVwZGF0ZXIpO1xufVxuXG5JbmRleGVkQ3Vyc29yUHJvdG90eXBlLnVwZGF0ZUluID1cbktleWVkQ3Vyc29yUHJvdG90eXBlLnVwZGF0ZUluID0gZnVuY3Rpb24oa2V5UGF0aCwgbm90U2V0VmFsdWUsIHVwZGF0ZXIpIHtcbiAgcmV0dXJuIHVwZGF0ZUN1cnNvcih0aGlzLCBmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBtLnVwZGF0ZUluKGtleVBhdGgsIG5vdFNldFZhbHVlLCB1cGRhdGVyKTtcbiAgfSwga2V5UGF0aCk7XG59XG5cbkluZGV4ZWRDdXJzb3JQcm90b3R5cGUubWVyZ2UgPVxuS2V5ZWRDdXJzb3JQcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbigvKi4uLml0ZXJzKi8pIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHJldHVybiB1cGRhdGVDdXJzb3IodGhpcywgZnVuY3Rpb24gKG0pIHtcbiAgICByZXR1cm4gbS5tZXJnZS5hcHBseShtLCBhcmdzKTtcbiAgfSk7XG59XG5cbkluZGV4ZWRDdXJzb3JQcm90b3R5cGUubWVyZ2VXaXRoID1cbktleWVkQ3Vyc29yUHJvdG90eXBlLm1lcmdlV2l0aCA9IGZ1bmN0aW9uKG1lcmdlci8qLCAuLi5pdGVycyovKSB7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICByZXR1cm4gdXBkYXRlQ3Vyc29yKHRoaXMsIGZ1bmN0aW9uIChtKSB7XG4gICAgcmV0dXJuIG0ubWVyZ2VXaXRoLmFwcGx5KG0sIGFyZ3MpO1xuICB9KTtcbn1cblxuSW5kZXhlZEN1cnNvclByb3RvdHlwZS5tZXJnZUluID1cbktleWVkQ3Vyc29yUHJvdG90eXBlLm1lcmdlSW4gPSBNYXAucHJvdG90eXBlLm1lcmdlSW47XG5cbkluZGV4ZWRDdXJzb3JQcm90b3R5cGUubWVyZ2VEZWVwID1cbktleWVkQ3Vyc29yUHJvdG90eXBlLm1lcmdlRGVlcCA9IGZ1bmN0aW9uKC8qLi4uaXRlcnMqLykge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgcmV0dXJuIHVwZGF0ZUN1cnNvcih0aGlzLCBmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBtLm1lcmdlRGVlcC5hcHBseShtLCBhcmdzKTtcbiAgfSk7XG59XG5cbkluZGV4ZWRDdXJzb3JQcm90b3R5cGUubWVyZ2VEZWVwV2l0aCA9XG5LZXllZEN1cnNvclByb3RvdHlwZS5tZXJnZURlZXBXaXRoID0gZnVuY3Rpb24obWVyZ2VyLyosIC4uLml0ZXJzKi8pIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHJldHVybiB1cGRhdGVDdXJzb3IodGhpcywgZnVuY3Rpb24gKG0pIHtcbiAgICByZXR1cm4gbS5tZXJnZURlZXBXaXRoLmFwcGx5KG0sIGFyZ3MpO1xuICB9KTtcbn1cblxuSW5kZXhlZEN1cnNvclByb3RvdHlwZS5tZXJnZURlZXBJbiA9XG5LZXllZEN1cnNvclByb3RvdHlwZS5tZXJnZURlZXBJbiA9IE1hcC5wcm90b3R5cGUubWVyZ2VEZWVwSW47XG5cbktleWVkQ3Vyc29yUHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPVxuSW5kZXhlZEN1cnNvclByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gZnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIHVwZGF0ZUN1cnNvcih0aGlzLCBmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiAobSB8fCBNYXAoKSkud2l0aE11dGF0aW9ucyhmbik7XG4gIH0pO1xufVxuXG5LZXllZEN1cnNvclByb3RvdHlwZS5jdXJzb3IgPVxuSW5kZXhlZEN1cnNvclByb3RvdHlwZS5jdXJzb3IgPSBmdW5jdGlvbihzdWJLZXlQYXRoKSB7XG4gIHN1YktleVBhdGggPSB2YWxUb0tleVBhdGgoc3ViS2V5UGF0aCk7XG4gIHJldHVybiBzdWJLZXlQYXRoLmxlbmd0aCA9PT0gMCA/IHRoaXMgOiBzdWJDdXJzb3IodGhpcywgc3ViS2V5UGF0aCk7XG59XG5cbi8qKlxuICogQWxsIGl0ZXJhYmxlcyBuZWVkIHRvIGltcGxlbWVudCBfX2l0ZXJhdGVcbiAqL1xuS2V5ZWRDdXJzb3JQcm90b3R5cGUuX19pdGVyYXRlID1cbkluZGV4ZWRDdXJzb3JQcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgdmFyIGN1cnNvciA9IHRoaXM7XG4gIHZhciBkZXJlZiA9IGN1cnNvci5kZXJlZigpO1xuICByZXR1cm4gZGVyZWYgJiYgZGVyZWYuX19pdGVyYXRlID8gZGVyZWYuX19pdGVyYXRlKFxuICAgIGZ1bmN0aW9uICh2LCBrKSB7IHJldHVybiBmbih3cmFwcGVkVmFsdWUoY3Vyc29yLCBba10sIHYpLCBrLCBjdXJzb3IpOyB9LFxuICAgIHJldmVyc2VcbiAgKSA6IDA7XG59XG5cbi8qKlxuICogQWxsIGl0ZXJhYmxlcyBuZWVkIHRvIGltcGxlbWVudCBfX2l0ZXJhdG9yXG4gKi9cbktleWVkQ3Vyc29yUHJvdG90eXBlLl9faXRlcmF0b3IgPVxuSW5kZXhlZEN1cnNvclByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICB2YXIgZGVyZWYgPSB0aGlzLmRlcmVmKCk7XG4gIHZhciBjdXJzb3IgPSB0aGlzO1xuICB2YXIgaXRlcmF0b3IgPSBkZXJlZiAmJiBkZXJlZi5fX2l0ZXJhdG9yICYmXG4gICAgZGVyZWYuX19pdGVyYXRvcihJdGVyYXRvci5FTlRSSUVTLCByZXZlcnNlKTtcbiAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpdGVyYXRvcikge1xuICAgICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbiAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICByZXR1cm4gc3RlcDtcbiAgICB9XG4gICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICB2YXIgayA9IGVudHJ5WzBdO1xuICAgIHZhciB2ID0gd3JhcHBlZFZhbHVlKGN1cnNvciwgW2tdLCBlbnRyeVsxXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB0eXBlID09PSBJdGVyYXRvci5LRVlTID8gayA6IHR5cGUgPT09IEl0ZXJhdG9yLlZBTFVFUyA/IHYgOiBbaywgdl0sXG4gICAgICBkb25lOiBmYWxzZVxuICAgIH07XG4gIH0pO1xufVxuXG5LZXllZEN1cnNvci5wcm90b3R5cGUgPSBLZXllZEN1cnNvclByb3RvdHlwZTtcbkluZGV4ZWRDdXJzb3IucHJvdG90eXBlID0gSW5kZXhlZEN1cnNvclByb3RvdHlwZTtcblxuXG52YXIgTk9UX1NFVCA9IHt9OyAvLyBTZW50aW5lbCB2YWx1ZVxuXG5mdW5jdGlvbiBtYWtlQ3Vyc29yKHJvb3REYXRhLCBrZXlQYXRoLCBvbkNoYW5nZSwgdmFsdWUpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSB7XG4gICAgdmFsdWUgPSByb290RGF0YS5nZXRJbihrZXlQYXRoKTtcbiAgfVxuICB2YXIgc2l6ZSA9IHZhbHVlICYmIHZhbHVlLnNpemU7XG4gIHZhciBDdXJzb3JDbGFzcyA9IEl0ZXJhYmxlLmlzSW5kZXhlZCh2YWx1ZSkgPyBJbmRleGVkQ3Vyc29yIDogS2V5ZWRDdXJzb3I7XG4gIHJldHVybiBuZXcgQ3Vyc29yQ2xhc3Mocm9vdERhdGEsIGtleVBhdGgsIG9uQ2hhbmdlLCBzaXplKTtcbn1cblxuZnVuY3Rpb24gd3JhcHBlZFZhbHVlKGN1cnNvciwga2V5UGF0aCwgdmFsdWUpIHtcbiAgcmV0dXJuIEl0ZXJhYmxlLmlzSXRlcmFibGUodmFsdWUpID8gc3ViQ3Vyc29yKGN1cnNvciwga2V5UGF0aCwgdmFsdWUpIDogdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHN1YkN1cnNvcihjdXJzb3IsIGtleVBhdGgsIHZhbHVlKSB7XG4gIHJldHVybiBtYWtlQ3Vyc29yKFxuICAgIGN1cnNvci5fcm9vdERhdGEsXG4gICAgbmV3S2V5UGF0aChjdXJzb3IuX2tleVBhdGgsIGtleVBhdGgpLFxuICAgIGN1cnNvci5fb25DaGFuZ2UsXG4gICAgdmFsdWVcbiAgKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ3Vyc29yKGN1cnNvciwgY2hhbmdlRm4sIGNoYW5nZUtleVBhdGgpIHtcbiAgdmFyIGRlZXBDaGFuZ2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgdmFyIG5ld1Jvb3REYXRhID0gY3Vyc29yLl9yb290RGF0YS51cGRhdGVJbihcbiAgICBjdXJzb3IuX2tleVBhdGgsXG4gICAgZGVlcENoYW5nZSA/IE1hcCgpIDogdW5kZWZpbmVkLFxuICAgIGNoYW5nZUZuXG4gICk7XG4gIHZhciBrZXlQYXRoID0gY3Vyc29yLl9rZXlQYXRoIHx8IFtdO1xuICB2YXIgcmVzdWx0ID0gY3Vyc29yLl9vbkNoYW5nZSAmJiBjdXJzb3IuX29uQ2hhbmdlLmNhbGwoXG4gICAgdW5kZWZpbmVkLFxuICAgIG5ld1Jvb3REYXRhLFxuICAgIGN1cnNvci5fcm9vdERhdGEsXG4gICAgZGVlcENoYW5nZSA/IG5ld0tleVBhdGgoa2V5UGF0aCwgY2hhbmdlS2V5UGF0aCkgOiBrZXlQYXRoXG4gICk7XG4gIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgIG5ld1Jvb3REYXRhID0gcmVzdWx0O1xuICB9XG4gIHJldHVybiBtYWtlQ3Vyc29yKG5ld1Jvb3REYXRhLCBjdXJzb3IuX2tleVBhdGgsIGN1cnNvci5fb25DaGFuZ2UpO1xufVxuXG5mdW5jdGlvbiBuZXdLZXlQYXRoKGhlYWQsIHRhaWwpIHtcbiAgcmV0dXJuIGhlYWQuY29uY2F0KGxpc3RUb0tleVBhdGgodGFpbCkpO1xufVxuXG5mdW5jdGlvbiBsaXN0VG9LZXlQYXRoKGxpc3QpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkobGlzdCkgPyBsaXN0IDogSW1tdXRhYmxlLkl0ZXJhYmxlKGxpc3QpLnRvQXJyYXkoKTtcbn1cblxuZnVuY3Rpb24gdmFsVG9LZXlQYXRoKHZhbCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gdmFsIDpcbiAgICBJdGVyYWJsZS5pc0l0ZXJhYmxlKHZhbCkgPyB2YWwudG9BcnJheSgpIDpcbiAgICBbdmFsXTtcbn1cblxuZXhwb3J0cy5mcm9tID0gY3Vyc29yRnJvbTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2ltbXN0cnVjdC9+L2ltbXV0YWJsZS9jb250cmliL2N1cnNvci9pbmRleC5qc1xuICoqIG1vZHVsZSBpZCA9IDkxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2ltbXN0cnVjdC9+L2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanNcbiAqKiBtb2R1bGUgaWQgPSA5MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xudmFyIEN1cnNvciA9IHJlcXVpcmUoJ2ltbXV0YWJsZS9jb250cmliL2N1cnNvcicpO1xudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50ZW1pdHRlcjMnKS5FdmVudEVtaXR0ZXI7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKlxuICogIyMgUHVibGljIEFQSS5cbiAqICAgQ29uc3RydWN0b3IoeyBoaXN0b3J5OiBib29sLCBrZXk6IHN0cmluZywgZGF0YTogc3RydWN0dXJlfG9iamVjdCB9KVxuICogICAuY3Vyc29yKHBhdGgpXG4gKiAgIC5yZWZlcmVuY2UocGF0aClcbiAqICAgLmZvcmNlSGFzU3dhcHBlZChuZXdEYXRhLCBvbGREYXRhLCBrZXlQYXRoKVxuICogICAudW5kbyhzdGVwcylcbiAqICAgLnJlZG8oc3RlcHMpXG4gKiAgIC51bmRvVW50aWwoc3RydWN0dXJlKVxuICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5mdW5jdGlvbiBTdHJ1Y3R1cmUgKG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3RydWN0dXJlKSkge1xuICAgIHJldHVybiBuZXcgU3RydWN0dXJlKG9wdGlvbnMpO1xuICB9XG5cbiAgdGhpcy5rZXkgPSBvcHRpb25zLmtleSB8fCB1dGlscy5nZW5lcmF0ZVJhbmRvbUtleSgpO1xuXG4gIHRoaXMuY3VycmVudCA9IG9wdGlvbnMuZGF0YTtcbiAgaWYgKCFpc0ltbXV0YWJsZVN0cnVjdHVyZSh0aGlzLmN1cnJlbnQpIHx8ICF0aGlzLmN1cnJlbnQpIHtcbiAgICB0aGlzLmN1cnJlbnQgPSBJbW11dGFibGUuZnJvbUpTKHRoaXMuY3VycmVudCB8fCB7fSk7XG4gIH1cblxuICBpZiAoISFvcHRpb25zLmhpc3RvcnkpIHtcbiAgICB0aGlzLmhpc3RvcnkgPSBJbW11dGFibGUuTGlzdC5vZih0aGlzLmN1cnJlbnQpO1xuICAgIHRoaXMuX2N1cnJlbnRSZXZpc2lvbiA9IDA7XG4gIH1cblxuICB0aGlzLl9wYXRoTGlzdGVuZXJzID0gW107XG4gIHRoaXMub24oJ3N3YXAnLCBmdW5jdGlvbiAobmV3RGF0YSwgb2xkRGF0YSwga2V5UGF0aCkge1xuICAgIGxpc3RMaXN0ZW5lck1hdGNoaW5nKHNlbGYuX3BhdGhMaXN0ZW5lcnMsIHBhdGhTdHJpbmcoa2V5UGF0aCkpLmZvckVhY2goZnVuY3Rpb24gKGZucykge1xuICAgICAgZm5zLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHJldHVybjtcbiAgICAgICAgZm4obmV3RGF0YSwgb2xkRGF0YSwga2V5UGF0aCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcywgYXJndW1lbnRzKTtcbn1cbmluaGVyaXRzKFN0cnVjdHVyZSwgRXZlbnRFbWl0dGVyKTtcbm1vZHVsZS5leHBvcnRzID0gU3RydWN0dXJlO1xuXG5TdHJ1Y3R1cmUucHJvdG90eXBlLmN1cnNvciA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcGF0aCA9IHBhdGggfHwgW107XG5cbiAgaWYgKCF0aGlzLmN1cnJlbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHN0cnVjdHVyZSBsb2FkZWQuJyk7XG4gIH1cblxuICB2YXIgY2hhbmdlTGlzdGVuZXIgPSBmdW5jdGlvbiAobmV3Um9vdCwgb2xkUm9vdCwgcGF0aCkge1xuICAgIGlmKHNlbGYuY3VycmVudCA9PT0gb2xkUm9vdCkge1xuICAgICAgcmV0dXJuIHNlbGYuY3VycmVudCA9IG5ld1Jvb3Q7XG4gICAgfVxuICAgIC8vIE90aGV3aXNlIGFuIG91dC1vZi1zeW5jIGNoYW5nZSBvY2N1cmVkLiBXZSBpZ25vcmUgYG9sZFJvb3RgLCBhbmQgZm9jdXMgb25cbiAgICAvLyBjaGFuZ2VzIGF0IHBhdGggYHBhdGhgLCBhbmQgc3luYyB0aGlzIHRvIGBzZWxmLmN1cnJlbnRgLlxuXG4gICAgaWYoIWhhc0luKG5ld1Jvb3QsIHBhdGgpKSB7XG4gICAgICByZXR1cm4gc2VsZi5jdXJyZW50ID0gc2VsZi5jdXJyZW50LnJlbW92ZUluKHBhdGgpO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBhbiBleGlzdGluZyBwYXRoIG9yIGFkZCBhIG5ldyBwYXRoIHdpdGhpbiB0aGUgY3VycmVudCBtYXAuXG4gICAgcmV0dXJuIHNlbGYuY3VycmVudCA9IHNlbGYuY3VycmVudC5zZXRJbihwYXRoLCBuZXdSb290LmdldEluKHBhdGgpKTtcbiAgfTtcblxuICBjaGFuZ2VMaXN0ZW5lciA9IGhhbmRsZUhpc3RvcnkodGhpcywgY2hhbmdlTGlzdGVuZXIpO1xuICBjaGFuZ2VMaXN0ZW5lciA9IGhhbmRsZVN3YXAodGhpcywgY2hhbmdlTGlzdGVuZXIpO1xuICBjaGFuZ2VMaXN0ZW5lciA9IGhhbmRsZVBlcnNpc3RpbmcodGhpcywgY2hhbmdlTGlzdGVuZXIpO1xuICByZXR1cm4gQ3Vyc29yLmZyb20oc2VsZi5jdXJyZW50LCBwYXRoLCBjaGFuZ2VMaXN0ZW5lcik7XG59O1xuXG5TdHJ1Y3R1cmUucHJvdG90eXBlLnJlZmVyZW5jZSA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gIGlmIChpc0N1cnNvcihwYXRoKSAmJiBwYXRoLl9rZXlQYXRoKSB7XG4gICAgcGF0aCA9IHBhdGguX2tleVBhdGg7XG4gIH1cbiAgdmFyIHNlbGYgPSB0aGlzLCBwYXRoSWQgPSBwYXRoU3RyaW5nKHBhdGgpO1xuICB2YXIgbGlzdGVuZXJOcyA9IHNlbGYuX3BhdGhMaXN0ZW5lcnNbcGF0aElkXTtcbiAgdmFyIGN1cnNvciA9IHRoaXMuY3Vyc29yKHBhdGgpO1xuXG4gIHZhciBjaGFuZ2VMaXN0ZW5lciA9IGZ1bmN0aW9uIChuZXdSb290LCBvbGRSb290LCBjaGFuZ2VkUGF0aCkgeyBjdXJzb3IgPSBzZWxmLmN1cnNvcihwYXRoKTsgfTtcbiAgdmFyIHJlZmVyZW5jZUxpc3RlbmVycyA9IFtjaGFuZ2VMaXN0ZW5lcl07XG4gIHRoaXMuX3BhdGhMaXN0ZW5lcnNbcGF0aElkXSA9ICFsaXN0ZW5lck5zID8gcmVmZXJlbmNlTGlzdGVuZXJzIDogbGlzdGVuZXJOcy5jb25jYXQoY2hhbmdlTGlzdGVuZXIpO1xuXG4gIHJldHVybiB7XG4gICAgb2JzZXJ2ZTogZnVuY3Rpb24gKGV2ZW50TmFtZSwgbmV3Rm4pIHtcbiAgICAgIGlmICh0eXBlb2YgZXZlbnROYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG5ld0ZuID0gZXZlbnROYW1lO1xuICAgICAgICBldmVudE5hbWUgPSB2b2lkIDA7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fZGVhZCB8fCB0eXBlb2YgbmV3Rm4gIT09ICdmdW5jdGlvbicpIHJldHVybjtcbiAgICAgIGlmIChldmVudE5hbWUgJiYgZXZlbnROYW1lICE9PSAnc3dhcCcpIHtcbiAgICAgICAgbmV3Rm4gPSBvbmx5T25FdmVudChldmVudE5hbWUsIG5ld0ZuKTtcbiAgICAgIH1cblxuICAgICAgc2VsZi5fcGF0aExpc3RlbmVyc1twYXRoSWRdID0gc2VsZi5fcGF0aExpc3RlbmVyc1twYXRoSWRdLmNvbmNhdChuZXdGbik7XG4gICAgICByZWZlcmVuY2VMaXN0ZW5lcnMgPSByZWZlcmVuY2VMaXN0ZW5lcnMuY29uY2F0KG5ld0ZuKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVub2JzZXJ2ZSAoKSB7XG4gICAgICAgIHZhciBmbkluZGV4ID0gc2VsZi5fcGF0aExpc3RlbmVyc1twYXRoSWRdLmluZGV4T2YobmV3Rm4pO1xuICAgICAgICB2YXIgbG9jYWxMaXN0ZW5lckluZGV4ID0gcmVmZXJlbmNlTGlzdGVuZXJzLmluZGV4T2YobmV3Rm4pO1xuXG4gICAgICAgIGlmIChyZWZlcmVuY2VMaXN0ZW5lcnNbbG9jYWxMaXN0ZW5lckluZGV4XSA9PT0gbmV3Rm4pIHtcbiAgICAgICAgICByZWZlcmVuY2VMaXN0ZW5lcnMuc3BsaWNlKGxvY2FsTGlzdGVuZXJJbmRleCwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNlbGYuX3BhdGhMaXN0ZW5lcnNbcGF0aElkXSkgcmV0dXJuO1xuICAgICAgICBpZiAoc2VsZi5fcGF0aExpc3RlbmVyc1twYXRoSWRdW2ZuSW5kZXhdICE9PSBuZXdGbikgcmV0dXJuO1xuICAgICAgICBzZWxmLl9wYXRoTGlzdGVuZXJzW3BhdGhJZF0uc3BsaWNlKGZuSW5kZXgsIDEpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGN1cnNvcjogZnVuY3Rpb24gKHN1YlBhdGgpIHtcbiAgICAgIGlmIChzdWJQYXRoKSByZXR1cm4gY3Vyc29yLmN1cnNvcihzdWJQYXRoKTtcbiAgICAgIHJldHVybiBjdXJzb3I7XG4gICAgfSxcbiAgICB1bm9ic2VydmVBbGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZUFsbExpc3RlbmVyc0J1dChzZWxmLCBwYXRoSWQsIHJlZmVyZW5jZUxpc3RlbmVycywgY2hhbmdlTGlzdGVuZXIpO1xuICAgICAgcmVmZXJlbmNlTGlzdGVuZXJzID0gW2NoYW5nZUxpc3RlbmVyXTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZUFsbExpc3RlbmVyc0J1dChzZWxmLCBwYXRoSWQsIHJlZmVyZW5jZUxpc3RlbmVycyk7XG4gICAgICByZWZlcmVuY2VMaXN0ZW5lcnMgPSB2b2lkIDA7XG4gICAgICBjdXJzb3IgPSB2b2lkIDA7XG5cbiAgICAgIHRoaXMuX2RlYWQgPSB0cnVlO1xuICAgICAgdGhpcy5vYnNlcnZlID0gdm9pZCAwO1xuICAgICAgdGhpcy51bm9ic2VydmVBbGwgPSB2b2lkIDA7XG4gICAgICB0aGlzLmN1cnNvciA9IHZvaWQgMDtcbiAgICAgIHRoaXMuZGVzdHJveSA9IHZvaWQgMDtcbiAgICB9XG4gIH07XG59O1xuXG5TdHJ1Y3R1cmUucHJvdG90eXBlLmZvcmNlSGFzU3dhcHBlZCA9IGZ1bmN0aW9uIChuZXdEYXRhLCBvbGREYXRhLCBrZXlQYXRoKSB7XG4gIHRoaXMuZW1pdCgnc3dhcCcsIG5ld0RhdGEgfHwgdGhpcy5jdXJyZW50LCBvbGREYXRhLCBrZXlQYXRoKTtcbiAgcG9zc2libHlFbWl0QW5pbWF0aW9uRnJhbWVFdmVudCh0aGlzLCBuZXdEYXRhIHx8IHRoaXMuY3VycmVudCwgb2xkRGF0YSwga2V5UGF0aClcbn07XG5cblN0cnVjdHVyZS5wcm90b3R5cGUudW5kbyA9IGZ1bmN0aW9uKGJhY2spIHtcbiAgdGhpcy5fY3VycmVudFJldmlzaW9uIC09IGJhY2sgfHwgMTtcbiAgaWYgKHRoaXMuX2N1cnJlbnRSZXZpc2lvbiA8IDApIHtcbiAgICB0aGlzLl9jdXJyZW50UmV2aXNpb24gPSAwO1xuICB9XG5cbiAgdGhpcy5jdXJyZW50ID0gdGhpcy5oaXN0b3J5LmdldCh0aGlzLl9jdXJyZW50UmV2aXNpb24pO1xuICByZXR1cm4gdGhpcy5jdXJyZW50O1xufTtcblxuU3RydWN0dXJlLnByb3RvdHlwZS5yZWRvID0gZnVuY3Rpb24oaGVhZCkge1xuICB0aGlzLl9jdXJyZW50UmV2aXNpb24gKz0gaGVhZCB8fCAxO1xuICBpZiAodGhpcy5fY3VycmVudFJldmlzaW9uID4gdGhpcy5oaXN0b3J5LmNvdW50KCkgLSAxKSB7XG4gICAgdGhpcy5fY3VycmVudFJldmlzaW9uID0gdGhpcy5oaXN0b3J5LmNvdW50KCkgLSAxO1xuICB9XG5cbiAgdGhpcy5jdXJyZW50ID0gdGhpcy5oaXN0b3J5LmdldCh0aGlzLl9jdXJyZW50UmV2aXNpb24pO1xuICByZXR1cm4gdGhpcy5jdXJyZW50O1xufTtcblxuU3RydWN0dXJlLnByb3RvdHlwZS51bmRvVW50aWwgPSBmdW5jdGlvbihzdHJ1Y3R1cmUpIHtcbiAgdGhpcy5fY3VycmVudFJldmlzaW9uID0gdGhpcy5oaXN0b3J5LmluZGV4T2Yoc3RydWN0dXJlKTtcbiAgdGhpcy5jdXJyZW50ID0gc3RydWN0dXJlO1xuXG4gIHJldHVybiBzdHJ1Y3R1cmU7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIFByaXZhdGUgZGVjb3JhdG9ycy5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLy8gVXBkYXRlIGhpc3RvcnkgaWYgaGlzdG9yeSBpcyBhY3RpdmVcbmZ1bmN0aW9uIGhhbmRsZUhpc3RvcnkgKGVtaXR0ZXIsIGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobmV3RGF0YSwgb2xkRGF0YSwgcGF0aCkge1xuICAgIHZhciBuZXdTdHJ1Y3R1cmUgPSBmbi5hcHBseShmbiwgYXJndW1lbnRzKTtcbiAgICBpZiAoIWVtaXR0ZXIuaGlzdG9yeSB8fCAobmV3RGF0YSA9PT0gb2xkRGF0YSkpIHJldHVybiBuZXdTdHJ1Y3R1cmU7XG5cbiAgICBlbWl0dGVyLmhpc3RvcnkgPSBlbWl0dGVyLmhpc3RvcnlcbiAgICAgIC50YWtlKCsrZW1pdHRlci5fY3VycmVudFJldmlzaW9uKVxuICAgICAgLnB1c2goZW1pdHRlci5jdXJyZW50KTtcblxuICAgIHJldHVybiBuZXdTdHJ1Y3R1cmU7XG4gIH07XG59XG5cbi8vIFVwZGF0ZSBoaXN0b3J5IGlmIGhpc3RvcnkgaXMgYWN0aXZlXG52YXIgcG9zc2libHlFbWl0QW5pbWF0aW9uRnJhbWVFdmVudCA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBxdWV1ZWRDaGFuZ2UgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge307XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcmVxdWVzdEFuaW1hdGlvbkZyYW1lRW1pdHRlciAoZW1pdHRlciwgbmV3U3RydWN0dXJlLCBvbGREYXRhKSB7XG4gICAgaWYgKHF1ZXVlZENoYW5nZSkgcmV0dXJuO1xuICAgIHF1ZXVlZENoYW5nZSA9IHRydWU7XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcXVldWVkQ2hhbmdlID0gZmFsc2U7XG4gICAgICBlbWl0dGVyLmVtaXQoJ25leHQtYW5pbWF0aW9uLWZyYW1lJywgbmV3U3RydWN0dXJlLCBvbGREYXRhKTtcbiAgICB9KTtcbiAgfTtcbn0oKSk7XG5cbi8vIEVtaXQgc3dhcCBldmVudCBvbiB2YWx1ZXMgYXJlIHN3YXBwZWRcbmZ1bmN0aW9uIGhhbmRsZVN3YXAgKGVtaXR0ZXIsIGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobmV3RGF0YSwgb2xkRGF0YSwga2V5UGF0aCkge1xuICAgIHZhciBuZXdTdHJ1Y3R1cmUgPSBmbi5hcHBseShmbiwgYXJndW1lbnRzKTtcbiAgICBpZihuZXdEYXRhID09PSBvbGREYXRhKSByZXR1cm4gbmV3U3RydWN0dXJlO1xuXG4gICAgZW1pdHRlci5lbWl0KCdzd2FwJywgbmV3U3RydWN0dXJlLCBvbGREYXRhLCBrZXlQYXRoKTtcbiAgICBwb3NzaWJseUVtaXRBbmltYXRpb25GcmFtZUV2ZW50KGVtaXR0ZXIsIG5ld1N0cnVjdHVyZSwgb2xkRGF0YSwga2V5UGF0aCk7XG5cbiAgICByZXR1cm4gbmV3U3RydWN0dXJlO1xuICB9O1xufVxuXG4vLyBNYXAgY2hhbmdlcyB0byB1cGRhdGUgZXZlbnRzIChkZWxldGUvY2hhbmdlL2FkZCkuXG5mdW5jdGlvbiBoYW5kbGVQZXJzaXN0aW5nIChlbWl0dGVyLCBmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKG5ld0RhdGEsIG9sZERhdGEsIHBhdGgpIHtcbiAgICB2YXIgbmV3U3RydWN0dXJlID0gZm4uYXBwbHkoZm4sIGFyZ3VtZW50cyk7XG4gICAgaWYobmV3RGF0YSA9PT0gb2xkRGF0YSkgcmV0dXJuIG5ld1N0cnVjdHVyZTtcbiAgICB2YXIgaW5mbyA9IGFuYWx5emUobmV3RGF0YSwgb2xkRGF0YSwgcGF0aCk7XG5cbiAgICBpZiAoaW5mby5ldmVudE5hbWUpIHtcbiAgICAgIGVtaXR0ZXIuZW1pdC5hcHBseShlbWl0dGVyLCBbaW5mby5ldmVudE5hbWVdLmNvbmNhdChpbmZvLmFyZ3VtZW50cykpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3U3RydWN0dXJlO1xuICB9O1xufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBQcml2YXRlIGhlbHBlcnMuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVyc0J1dChzZWxmLCBwYXRoSWQsIGxpc3RlbmVycywgZXhjZXB0KSB7XG4gIGlmICghbGlzdGVuZXJzKSByZXR1cm47XG4gIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgIGlmIChleGNlcHQgJiYgZm4gPT09IGV4Y2VwdCkgcmV0dXJuO1xuICAgIHZhciBpbmRleCA9IHNlbGYuX3BhdGhMaXN0ZW5lcnNbcGF0aElkXS5pbmRleE9mKGZuKTtcbiAgICBzZWxmLl9wYXRoTGlzdGVuZXJzW3BhdGhJZF0uc3BsaWNlKGluZGV4LCAxKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFuYWx5emUgKG5ld0RhdGEsIG9sZERhdGEsIHBhdGgpIHtcbiAgdmFyIG9sZE9iamVjdCA9IG9sZERhdGEgJiYgb2xkRGF0YS5nZXRJbihwYXRoKTtcbiAgdmFyIG5ld09iamVjdCA9IG5ld0RhdGEgJiYgbmV3RGF0YS5nZXRJbihwYXRoKTtcblxuICB2YXIgaW5PbGQgPSBvbGREYXRhICYmIGhhc0luKG9sZERhdGEsIHBhdGgpO1xuICB2YXIgaW5OZXcgPSBuZXdEYXRhICYmIGhhc0luKG5ld0RhdGEsIHBhdGgpO1xuXG4gIHZhciBhcmd1bWVudHMsIGV2ZW50TmFtZTtcblxuICBpZiAoaW5PbGQgJiYgIWluTmV3KSB7XG4gICAgZXZlbnROYW1lID0gJ2RlbGV0ZSc7XG4gICAgYXJndW1lbnRzID0gW3BhdGgsIG9sZE9iamVjdF07XG4gIH0gZWxzZSBpZiAoaW5PbGQgJiYgaW5OZXcpIHtcbiAgICBldmVudE5hbWUgPSAnY2hhbmdlJztcbiAgICBhcmd1bWVudHMgPSBbcGF0aCwgbmV3T2JqZWN0LCBvbGRPYmplY3RdO1xuICB9IGVsc2UgaWYgKCFpbk9sZCAmJiBpbk5ldykge1xuICAgIGV2ZW50TmFtZSA9ICdhZGQnO1xuICAgIGFyZ3VtZW50cyA9IFtwYXRoLCBuZXdPYmplY3RdO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBldmVudE5hbWU6IGV2ZW50TmFtZSxcbiAgICBhcmd1bWVudHM6IGFyZ3VtZW50c1xuICB9O1xufVxuXG5cbi8vIENoZWNrIGlmIHBhdGggZXhpc3RzLlxudmFyIE5PVF9TRVQgPSB7fTtcbmZ1bmN0aW9uIGhhc0luKGN1cnNvciwgcGF0aCkge1xuICBpZihjdXJzb3IuaGFzSW4pIHJldHVybiBjdXJzb3IuaGFzSW4ocGF0aCk7XG4gIHJldHVybiBjdXJzb3IuZ2V0SW4ocGF0aCwgTk9UX1NFVCkgIT09IE5PVF9TRVQ7XG59XG5cbmZ1bmN0aW9uIHBhdGhTdHJpbmcocGF0aCkge1xuICB2YXIgdG9wTGV2ZWwgPSAnZ2xvYmFsJztcbiAgaWYgKCFwYXRoIHx8ICFwYXRoLmxlbmd0aCkgcmV0dXJuIHRvcExldmVsO1xuICByZXR1cm4gW3RvcExldmVsXS5jb25jYXQocGF0aCkuam9pbignfCcpO1xufVxuXG5mdW5jdGlvbiBsaXN0TGlzdGVuZXJNYXRjaGluZyAobGlzdGVuZXJzLCBiYXNlUGF0aCkge1xuICB2YXIgbmV3TGlzdGVuZXJzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBpZiAoIWxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSByZXR1cm47XG4gICAgaWYgKGJhc2VQYXRoLmluZGV4T2Yoa2V5KSAhPT0gMCkgY29udGludWU7XG4gICAgbmV3TGlzdGVuZXJzLnB1c2gobGlzdGVuZXJzW2tleV0pO1xuICB9XG5cbiAgcmV0dXJuIG5ld0xpc3RlbmVycztcbn1cblxuZnVuY3Rpb24gb25seU9uRXZlbnQoZXZlbnROYW1lLCBmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKG5ld0RhdGEsIG9sZERhdGEsIGtleVBhdGgpIHtcbiAgICB2YXIgaW5mbyA9IGFuYWx5emUobmV3RGF0YSwgb2xkRGF0YSwga2V5UGF0aCk7XG4gICAgaWYgKGluZm8uZXZlbnROYW1lICE9PSBldmVudE5hbWUpIHJldHVybjtcbiAgICByZXR1cm4gZm4obmV3RGF0YSwgb2xkRGF0YSwga2V5UGF0aCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzQ3Vyc29yIChwb3RlbnRpYWwpIHtcbiAgcmV0dXJuIHBvdGVudGlhbCAmJiB0eXBlb2YgcG90ZW50aWFsLmRlcmVmID09PSAnZnVuY3Rpb24nO1xufVxuXG4vLyBDaGVjayBpZiBwYXNzZWQgc3RydWN0dXJlIGlzIGV4aXN0aW5nIGltbXV0YWJsZSBzdHJ1Y3R1cmUuXG4vLyBGcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9pbW11dGFibGUtanMvd2lraS9VcGdyYWRpbmctdG8tSW1tdXRhYmxlLXYzI2FkZGl0aW9uYWwtY2hhbmdlc1xuZnVuY3Rpb24gaXNJbW11dGFibGVTdHJ1Y3R1cmUgKGRhdGEpIHtcbiAgcmV0dXJuIGltbXV0YWJsZVNhZmVDaGVjaygnSXRlcmFibGUnLCAnaXNJdGVyYWJsZScsIGRhdGEpIHx8XG4gICAgICAgICAgaW1tdXRhYmxlU2FmZUNoZWNrKCdTZXEnLCAnaXNTZXEnLCBkYXRhKSB8fFxuICAgICAgICAgIGltbXV0YWJsZVNhZmVDaGVjaygnTWFwJywgJ2lzTWFwJywgZGF0YSkgfHxcbiAgICAgICAgICBpbW11dGFibGVTYWZlQ2hlY2soJ09yZGVyZWRNYXAnLCAnaXNPcmRlcmVkTWFwJywgZGF0YSkgfHxcbiAgICAgICAgICBpbW11dGFibGVTYWZlQ2hlY2soJ0xpc3QnLCAnaXNMaXN0JywgZGF0YSkgfHxcbiAgICAgICAgICBpbW11dGFibGVTYWZlQ2hlY2soJ1N0YWNrJywgJ2lzU3RhY2snLCBkYXRhKSB8fFxuICAgICAgICAgIGltbXV0YWJsZVNhZmVDaGVjaygnU2V0JywgJ2lzU2V0JywgZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGltbXV0YWJsZVNhZmVDaGVjayAobnMsIG1ldGhvZCwgZGF0YSkge1xuICByZXR1cm4gSW1tdXRhYmxlW25zXSAmJiBJbW11dGFibGVbbnNdW21ldGhvZF0gJiYgSW1tdXRhYmxlW25zXVttZXRob2RdKGRhdGEpO1xufVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vaW1tc3RydWN0L3NyYy9zdHJ1Y3R1cmUuanNcbiAqKiBtb2R1bGUgaWQgPSA5M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiXG5cbm1vZHVsZS5leHBvcnRzLmdlbmVyYXRlUmFuZG9tS2V5ID0gZnVuY3Rpb24gKGxlbikge1xuICBsZW4gPSBsZW4gfHwgMTA7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMikuc3Vic3RyaW5nKDAsIGxlbik7XG59O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vaW1tc3RydWN0L3NyYy91dGlscy5qc1xuICoqIG1vZHVsZSBpZCA9IDk0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiAgVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiAgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiAgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgZ2xvYmFsLkltbXV0YWJsZSA9IGZhY3RvcnkoKVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0Jzt2YXIgU0xJQ0UkMCA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICBmdW5jdGlvbiBjcmVhdGVDbGFzcyhjdG9yLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIHtcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gICAgfVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIFVzZWQgZm9yIHNldHRpbmcgcHJvdG90eXBlIG1ldGhvZHMgdGhhdCBJRTggY2hva2VzIG9uLlxuICB2YXIgREVMRVRFID0gJ2RlbGV0ZSc7XG5cbiAgLy8gQ29uc3RhbnRzIGRlc2NyaWJpbmcgdGhlIHNpemUgb2YgdHJpZSBub2Rlcy5cbiAgdmFyIFNISUZUID0gNTsgLy8gUmVzdWx0ZWQgaW4gYmVzdCBwZXJmb3JtYW5jZSBhZnRlciBfX19fX18/XG4gIHZhciBTSVpFID0gMSA8PCBTSElGVDtcbiAgdmFyIE1BU0sgPSBTSVpFIC0gMTtcblxuICAvLyBBIGNvbnNpc3RlbnQgc2hhcmVkIHZhbHVlIHJlcHJlc2VudGluZyBcIm5vdCBzZXRcIiB3aGljaCBlcXVhbHMgbm90aGluZyBvdGhlclxuICAvLyB0aGFuIGl0c2VsZiwgYW5kIG5vdGhpbmcgdGhhdCBjb3VsZCBiZSBwcm92aWRlZCBleHRlcm5hbGx5LlxuICB2YXIgTk9UX1NFVCA9IHt9O1xuXG4gIC8vIEJvb2xlYW4gcmVmZXJlbmNlcywgUm91Z2ggZXF1aXZhbGVudCBvZiBgYm9vbCAmYC5cbiAgdmFyIENIQU5HRV9MRU5HVEggPSB7IHZhbHVlOiBmYWxzZSB9O1xuICB2YXIgRElEX0FMVEVSID0geyB2YWx1ZTogZmFsc2UgfTtcblxuICBmdW5jdGlvbiBNYWtlUmVmKHJlZikge1xuICAgIHJlZi52YWx1ZSA9IGZhbHNlO1xuICAgIHJldHVybiByZWY7XG4gIH1cblxuICBmdW5jdGlvbiBTZXRSZWYocmVmKSB7XG4gICAgcmVmICYmIChyZWYudmFsdWUgPSB0cnVlKTtcbiAgfVxuXG4gIC8vIEEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHZhbHVlIHJlcHJlc2VudGluZyBhbiBcIm93bmVyXCIgZm9yIHRyYW5zaWVudCB3cml0ZXNcbiAgLy8gdG8gdHJpZXMuIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBvbmx5IGV2ZXIgZXF1YWwgaXRzZWxmLCBhbmQgd2lsbCBub3QgZXF1YWxcbiAgLy8gdGhlIHJldHVybiBvZiBhbnkgc3Vic2VxdWVudCBjYWxsIG9mIHRoaXMgZnVuY3Rpb24uXG4gIGZ1bmN0aW9uIE93bmVySUQoKSB7fVxuXG4gIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2NvcHktYXJyYXktaW5saW5lXG4gIGZ1bmN0aW9uIGFyckNvcHkoYXJyLCBvZmZzZXQpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgICB2YXIgbGVuID0gTWF0aC5tYXgoMCwgYXJyLmxlbmd0aCAtIG9mZnNldCk7XG4gICAgdmFyIG5ld0FyciA9IG5ldyBBcnJheShsZW4pO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBsZW47IGlpKyspIHtcbiAgICAgIG5ld0FycltpaV0gPSBhcnJbaWkgKyBvZmZzZXRdO1xuICAgIH1cbiAgICByZXR1cm4gbmV3QXJyO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5zdXJlU2l6ZShpdGVyKSB7XG4gICAgaWYgKGl0ZXIuc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpdGVyLnNpemUgPSBpdGVyLl9faXRlcmF0ZShyZXR1cm5UcnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZXIuc2l6ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXBJbmRleChpdGVyLCBpbmRleCkge1xuICAgIHJldHVybiBpbmRleCA+PSAwID8gKCtpbmRleCkgOiBlbnN1cmVTaXplKGl0ZXIpICsgKCtpbmRleCk7XG4gIH1cblxuICBmdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gd2hvbGVTbGljZShiZWdpbiwgZW5kLCBzaXplKSB7XG4gICAgcmV0dXJuIChiZWdpbiA9PT0gMCB8fCAoc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGJlZ2luIDw9IC1zaXplKSkgJiZcbiAgICAgIChlbmQgPT09IHVuZGVmaW5lZCB8fCAoc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA+PSBzaXplKSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlQmVnaW4oYmVnaW4sIHNpemUpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUluZGV4KGJlZ2luLCBzaXplLCAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVFbmQoZW5kLCBzaXplKSB7XG4gICAgcmV0dXJuIHJlc29sdmVJbmRleChlbmQsIHNpemUsIHNpemUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZUluZGV4KGluZGV4LCBzaXplLCBkZWZhdWx0SW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXggPT09IHVuZGVmaW5lZCA/XG4gICAgICBkZWZhdWx0SW5kZXggOlxuICAgICAgaW5kZXggPCAwID9cbiAgICAgICAgTWF0aC5tYXgoMCwgc2l6ZSArIGluZGV4KSA6XG4gICAgICAgIHNpemUgPT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgaW5kZXggOlxuICAgICAgICAgIE1hdGgubWluKHNpemUsIGluZGV4KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEl0ZXJhYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNJdGVyYWJsZSh2YWx1ZSkgPyB2YWx1ZSA6IFNlcSh2YWx1ZSk7XG4gICAgfVxuXG5cbiAgY3JlYXRlQ2xhc3MoS2V5ZWRJdGVyYWJsZSwgSXRlcmFibGUpO1xuICAgIGZ1bmN0aW9uIEtleWVkSXRlcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0tleWVkKHZhbHVlKSA/IHZhbHVlIDogS2V5ZWRTZXEodmFsdWUpO1xuICAgIH1cblxuXG4gIGNyZWF0ZUNsYXNzKEluZGV4ZWRJdGVyYWJsZSwgSXRlcmFibGUpO1xuICAgIGZ1bmN0aW9uIEluZGV4ZWRJdGVyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW5kZXhlZCh2YWx1ZSkgPyB2YWx1ZSA6IEluZGV4ZWRTZXEodmFsdWUpO1xuICAgIH1cblxuXG4gIGNyZWF0ZUNsYXNzKFNldEl0ZXJhYmxlLCBJdGVyYWJsZSk7XG4gICAgZnVuY3Rpb24gU2V0SXRlcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0l0ZXJhYmxlKHZhbHVlKSAmJiAhaXNBc3NvY2lhdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IFNldFNlcSh2YWx1ZSk7XG4gICAgfVxuXG5cblxuICBmdW5jdGlvbiBpc0l0ZXJhYmxlKG1heWJlSXRlcmFibGUpIHtcbiAgICByZXR1cm4gISEobWF5YmVJdGVyYWJsZSAmJiBtYXliZUl0ZXJhYmxlW0lTX0lURVJBQkxFX1NFTlRJTkVMXSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0tleWVkKG1heWJlS2V5ZWQpIHtcbiAgICByZXR1cm4gISEobWF5YmVLZXllZCAmJiBtYXliZUtleWVkW0lTX0tFWUVEX1NFTlRJTkVMXSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0luZGV4ZWQobWF5YmVJbmRleGVkKSB7XG4gICAgcmV0dXJuICEhKG1heWJlSW5kZXhlZCAmJiBtYXliZUluZGV4ZWRbSVNfSU5ERVhFRF9TRU5USU5FTF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBc3NvY2lhdGl2ZShtYXliZUFzc29jaWF0aXZlKSB7XG4gICAgcmV0dXJuIGlzS2V5ZWQobWF5YmVBc3NvY2lhdGl2ZSkgfHwgaXNJbmRleGVkKG1heWJlQXNzb2NpYXRpdmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNPcmRlcmVkKG1heWJlT3JkZXJlZCkge1xuICAgIHJldHVybiAhIShtYXliZU9yZGVyZWQgJiYgbWF5YmVPcmRlcmVkW0lTX09SREVSRURfU0VOVElORUxdKTtcbiAgfVxuXG4gIEl0ZXJhYmxlLmlzSXRlcmFibGUgPSBpc0l0ZXJhYmxlO1xuICBJdGVyYWJsZS5pc0tleWVkID0gaXNLZXllZDtcbiAgSXRlcmFibGUuaXNJbmRleGVkID0gaXNJbmRleGVkO1xuICBJdGVyYWJsZS5pc0Fzc29jaWF0aXZlID0gaXNBc3NvY2lhdGl2ZTtcbiAgSXRlcmFibGUuaXNPcmRlcmVkID0gaXNPcmRlcmVkO1xuXG4gIEl0ZXJhYmxlLktleWVkID0gS2V5ZWRJdGVyYWJsZTtcbiAgSXRlcmFibGUuSW5kZXhlZCA9IEluZGV4ZWRJdGVyYWJsZTtcbiAgSXRlcmFibGUuU2V0ID0gU2V0SXRlcmFibGU7XG5cblxuICB2YXIgSVNfSVRFUkFCTEVfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9JVEVSQUJMRV9fQEAnO1xuICB2YXIgSVNfS0VZRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9LRVlFRF9fQEAnO1xuICB2YXIgSVNfSU5ERVhFRF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0lOREVYRURfX0BAJztcbiAgdmFyIElTX09SREVSRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9PUkRFUkVEX19AQCc7XG5cbiAgLyogZ2xvYmFsIFN5bWJvbCAqL1xuXG4gIHZhciBJVEVSQVRFX0tFWVMgPSAwO1xuICB2YXIgSVRFUkFURV9WQUxVRVMgPSAxO1xuICB2YXIgSVRFUkFURV9FTlRSSUVTID0gMjtcblxuICB2YXIgUkVBTF9JVEVSQVRPUl9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvcjtcbiAgdmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InO1xuXG4gIHZhciBJVEVSQVRPUl9TWU1CT0wgPSBSRUFMX0lURVJBVE9SX1NZTUJPTCB8fCBGQVVYX0lURVJBVE9SX1NZTUJPTDtcblxuXG4gIGZ1bmN0aW9uIEl0ZXJhdG9yKG5leHQpIHtcbiAgICAgIHRoaXMubmV4dCA9IG5leHQ7XG4gICAgfVxuXG4gICAgSXRlcmF0b3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJ1tJdGVyYXRvcl0nO1xuICAgIH07XG5cblxuICBJdGVyYXRvci5LRVlTID0gSVRFUkFURV9LRVlTO1xuICBJdGVyYXRvci5WQUxVRVMgPSBJVEVSQVRFX1ZBTFVFUztcbiAgSXRlcmF0b3IuRU5UUklFUyA9IElURVJBVEVfRU5UUklFUztcblxuICBJdGVyYXRvci5wcm90b3R5cGUuaW5zcGVjdCA9XG4gIEl0ZXJhdG9yLnByb3RvdHlwZS50b1NvdXJjZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTsgfVxuICBJdGVyYXRvci5wcm90b3R5cGVbSVRFUkFUT1JfU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVmFsdWUodHlwZSwgaywgdiwgaXRlcmF0b3JSZXN1bHQpIHtcbiAgICB2YXIgdmFsdWUgPSB0eXBlID09PSAwID8gayA6IHR5cGUgPT09IDEgPyB2IDogW2ssIHZdO1xuICAgIGl0ZXJhdG9yUmVzdWx0ID8gKGl0ZXJhdG9yUmVzdWx0LnZhbHVlID0gdmFsdWUpIDogKGl0ZXJhdG9yUmVzdWx0ID0ge1xuICAgICAgdmFsdWU6IHZhbHVlLCBkb25lOiBmYWxzZVxuICAgIH0pO1xuICAgIHJldHVybiBpdGVyYXRvclJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yRG9uZSgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBmdW5jdGlvbiBoYXNJdGVyYXRvcihtYXliZUl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuICEhZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSXRlcmF0b3IobWF5YmVJdGVyYXRvcikge1xuICAgIHJldHVybiBtYXliZUl0ZXJhdG9yICYmIHR5cGVvZiBtYXliZUl0ZXJhdG9yLm5leHQgPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJdGVyYXRvcihpdGVyYWJsZSkge1xuICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihpdGVyYWJsZSk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm4gJiYgaXRlcmF0b3JGbi5jYWxsKGl0ZXJhYmxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4oaXRlcmFibGUpIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IGl0ZXJhYmxlICYmIChcbiAgICAgIChSRUFMX0lURVJBVE9SX1NZTUJPTCAmJiBpdGVyYWJsZVtSRUFMX0lURVJBVE9SX1NZTUJPTF0pIHx8XG4gICAgICBpdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF1cbiAgICApO1xuICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yRm47XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcic7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhTZXEsIEl0ZXJhYmxlKTtcbiAgICBmdW5jdGlvbiBTZXEodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlTZXF1ZW5jZSgpIDpcbiAgICAgICAgaXNJdGVyYWJsZSh2YWx1ZSkgPyB2YWx1ZS50b1NlcSgpIDogc2VxRnJvbVZhbHVlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBTZXEub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gU2VxKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFNlcS5wcm90b3R5cGUudG9TZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBTZXEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdTZXEgeycsICd9Jyk7XG4gICAgfTtcblxuICAgIFNlcS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5fY2FjaGUgJiYgdGhpcy5fX2l0ZXJhdGVVbmNhY2hlZCkge1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHRoaXMuZW50cnlTZXEoKS50b0FycmF5KCk7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuX2NhY2hlLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvLyBhYnN0cmFjdCBfX2l0ZXJhdGVVbmNhY2hlZChmbiwgcmV2ZXJzZSlcblxuICAgIFNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHJldHVybiBzZXFJdGVyYXRlKHRoaXMsIGZuLCByZXZlcnNlLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgLy8gYWJzdHJhY3QgX19pdGVyYXRvclVuY2FjaGVkKHR5cGUsIHJldmVyc2UpXG5cbiAgICBTZXEucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICByZXR1cm4gc2VxSXRlcmF0b3IodGhpcywgdHlwZSwgcmV2ZXJzZSwgdHJ1ZSk7XG4gICAgfTtcblxuXG5cbiAgY3JlYXRlQ2xhc3MoS2V5ZWRTZXEsIFNlcSk7XG4gICAgZnVuY3Rpb24gS2V5ZWRTZXEodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cbiAgICAgICAgZW1wdHlTZXF1ZW5jZSgpLnRvS2V5ZWRTZXEoKSA6XG4gICAgICAgIGlzSXRlcmFibGUodmFsdWUpID9cbiAgICAgICAgICAoaXNLZXllZCh2YWx1ZSkgPyB2YWx1ZS50b1NlcSgpIDogdmFsdWUuZnJvbUVudHJ5U2VxKCkpIDpcbiAgICAgICAgICBrZXllZFNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgS2V5ZWRTZXEub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gS2V5ZWRTZXEoYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgS2V5ZWRTZXEucHJvdG90eXBlLnRvS2V5ZWRTZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBLZXllZFNlcS5wcm90b3R5cGUudG9TZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKEluZGV4ZWRTZXEsIFNlcSk7XG4gICAgZnVuY3Rpb24gSW5kZXhlZFNlcSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eVNlcXVlbmNlKCkgOlxuICAgICAgICAhaXNJdGVyYWJsZSh2YWx1ZSkgPyBpbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSA6XG4gICAgICAgIGlzS2V5ZWQodmFsdWUpID8gdmFsdWUuZW50cnlTZXEoKSA6IHZhbHVlLnRvSW5kZXhlZFNlcSgpO1xuICAgIH1cblxuICAgIEluZGV4ZWRTZXEub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gSW5kZXhlZFNlcShhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBJbmRleGVkU2VxLnByb3RvdHlwZS50b0luZGV4ZWRTZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBJbmRleGVkU2VxLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnU2VxIFsnLCAnXScpO1xuICAgIH07XG5cbiAgICBJbmRleGVkU2VxLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIHNlcUl0ZXJhdGUodGhpcywgZm4sIHJldmVyc2UsIGZhbHNlKTtcbiAgICB9O1xuXG4gICAgSW5kZXhlZFNlcS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHJldHVybiBzZXFJdGVyYXRvcih0aGlzLCB0eXBlLCByZXZlcnNlLCBmYWxzZSk7XG4gICAgfTtcblxuXG5cbiAgY3JlYXRlQ2xhc3MoU2V0U2VxLCBTZXEpO1xuICAgIGZ1bmN0aW9uIFNldFNlcSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVtcHR5U2VxdWVuY2UoKSA6XG4gICAgICAgICFpc0l0ZXJhYmxlKHZhbHVlKSA/IGluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpIDpcbiAgICAgICAgaXNLZXllZCh2YWx1ZSkgPyB2YWx1ZS5lbnRyeVNlcSgpIDogdmFsdWVcbiAgICAgICkudG9TZXRTZXEoKTtcbiAgICB9XG5cbiAgICBTZXRTZXEub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gU2V0U2VxKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFNldFNlcS5wcm90b3R5cGUudG9TZXRTZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cblxuXG4gIFNlcS5pc1NlcSA9IGlzU2VxO1xuICBTZXEuS2V5ZWQgPSBLZXllZFNlcTtcbiAgU2VxLlNldCA9IFNldFNlcTtcbiAgU2VxLkluZGV4ZWQgPSBJbmRleGVkU2VxO1xuXG4gIHZhciBJU19TRVFfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9TRVFfX0BAJztcblxuICBTZXEucHJvdG90eXBlW0lTX1NFUV9TRU5USU5FTF0gPSB0cnVlO1xuXG5cblxuICAvLyAjcHJhZ21hIFJvb3QgU2VxdWVuY2VzXG5cbiAgY3JlYXRlQ2xhc3MoQXJyYXlTZXEsIEluZGV4ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIEFycmF5U2VxKGFycmF5KSB7XG4gICAgICB0aGlzLl9hcnJheSA9IGFycmF5O1xuICAgICAgdGhpcy5zaXplID0gYXJyYXkubGVuZ3RoO1xuICAgIH1cblxuICAgIEFycmF5U2VxLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyhpbmRleCkgPyB0aGlzLl9hcnJheVt3cmFwSW5kZXgodGhpcywgaW5kZXgpXSA6IG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICBBcnJheVNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX2FycmF5O1xuICAgICAgdmFyIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgICAgaWYgKGZuKGFycmF5W3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldLCBpaSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH07XG5cbiAgICBBcnJheVNlcS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX2FycmF5O1xuICAgICAgdmFyIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgXG4gICAgICAgIHtyZXR1cm4gaWkgPiBtYXhJbmRleCA/XG4gICAgICAgICAgaXRlcmF0b3JEb25lKCkgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaWksIGFycmF5W3JldmVyc2UgPyBtYXhJbmRleCAtIGlpKysgOiBpaSsrXSl9XG4gICAgICApO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKE9iamVjdFNlcSwgS2V5ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIE9iamVjdFNlcShvYmplY3QpIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgICAgIHRoaXMuX29iamVjdCA9IG9iamVjdDtcbiAgICAgIHRoaXMuX2tleXMgPSBrZXlzO1xuICAgICAgdGhpcy5zaXplID0ga2V5cy5sZW5ndGg7XG4gICAgfVxuXG4gICAgT2JqZWN0U2VxLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICBpZiAobm90U2V0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5oYXMoa2V5KSkge1xuICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fb2JqZWN0W2tleV07XG4gICAgfTtcblxuICAgIE9iamVjdFNlcS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fb2JqZWN0Lmhhc093blByb3BlcnR5KGtleSk7XG4gICAgfTtcblxuICAgIE9iamVjdFNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHZhciBvYmplY3QgPSB0aGlzLl9vYmplY3Q7XG4gICAgICB2YXIga2V5cyA9IHRoaXMuX2tleXM7XG4gICAgICB2YXIgbWF4SW5kZXggPSBrZXlzLmxlbmd0aCAtIDE7XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDw9IG1heEluZGV4OyBpaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldO1xuICAgICAgICBpZiAoZm4ob2JqZWN0W2tleV0sIGtleSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH07XG5cbiAgICBPYmplY3RTZXEucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gdGhpcy5fb2JqZWN0O1xuICAgICAgdmFyIGtleXMgPSB0aGlzLl9rZXlzO1xuICAgICAgdmFyIG1heEluZGV4ID0ga2V5cy5sZW5ndGggLSAxO1xuICAgICAgdmFyIGlpID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tyZXZlcnNlID8gbWF4SW5kZXggLSBpaSA6IGlpXTtcbiAgICAgICAgcmV0dXJuIGlpKysgPiBtYXhJbmRleCA/XG4gICAgICAgICAgaXRlcmF0b3JEb25lKCkgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwga2V5LCBvYmplY3Rba2V5XSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gIE9iamVjdFNlcS5wcm90b3R5cGVbSVNfT1JERVJFRF9TRU5USU5FTF0gPSB0cnVlO1xuXG5cbiAgY3JlYXRlQ2xhc3MoSXRlcmFibGVTZXEsIEluZGV4ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIEl0ZXJhYmxlU2VxKGl0ZXJhYmxlKSB7XG4gICAgICB0aGlzLl9pdGVyYWJsZSA9IGl0ZXJhYmxlO1xuICAgICAgdGhpcy5zaXplID0gaXRlcmFibGUubGVuZ3RoIHx8IGl0ZXJhYmxlLnNpemU7XG4gICAgfVxuXG4gICAgSXRlcmFibGVTZXEucHJvdG90eXBlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYWJsZSA9IHRoaXMuX2l0ZXJhYmxlO1xuICAgICAgdmFyIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUpO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaWYgKGlzSXRlcmF0b3IoaXRlcmF0b3IpKSB7XG4gICAgICAgIHZhciBzdGVwO1xuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgaWYgKGZuKHN0ZXAudmFsdWUsIGl0ZXJhdGlvbnMrKywgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG5cbiAgICBJdGVyYWJsZVNlcS5wcm90b3R5cGUuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXJhYmxlID0gdGhpcy5faXRlcmFibGU7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihpdGVyYWJsZSk7XG4gICAgICBpZiAoIWlzSXRlcmF0b3IoaXRlcmF0b3IpKSB7XG4gICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoaXRlcmF0b3JEb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgc3RlcC52YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG5cblxuICBjcmVhdGVDbGFzcyhJdGVyYXRvclNlcSwgSW5kZXhlZFNlcSk7XG4gICAgZnVuY3Rpb24gSXRlcmF0b3JTZXEoaXRlcmF0b3IpIHtcbiAgICAgIHRoaXMuX2l0ZXJhdG9yID0gaXRlcmF0b3I7XG4gICAgICB0aGlzLl9pdGVyYXRvckNhY2hlID0gW107XG4gICAgfVxuXG4gICAgSXRlcmF0b3JTZXEucHJvdG90eXBlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXJhdG9yO1xuICAgICAgdmFyIGNhY2hlID0gdGhpcy5faXRlcmF0b3JDYWNoZTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHdoaWxlIChpdGVyYXRpb25zIDwgY2FjaGUubGVuZ3RoKSB7XG4gICAgICAgIGlmIChmbihjYWNoZVtpdGVyYXRpb25zXSwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHN0ZXA7XG4gICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIHZhciB2YWwgPSBzdGVwLnZhbHVlO1xuICAgICAgICBjYWNoZVtpdGVyYXRpb25zXSA9IHZhbDtcbiAgICAgICAgaWYgKGZuKHZhbCwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcblxuICAgIEl0ZXJhdG9yU2VxLnByb3RvdHlwZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyYXRvcjtcbiAgICAgIHZhciBjYWNoZSA9IHRoaXMuX2l0ZXJhdG9yQ2FjaGU7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgaWYgKGl0ZXJhdGlvbnMgPj0gY2FjaGUubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhY2hlW2l0ZXJhdGlvbnNdID0gc3RlcC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zLCBjYWNoZVtpdGVyYXRpb25zKytdKTtcbiAgICAgIH0pO1xuICAgIH07XG5cblxuXG5cbiAgLy8gIyBwcmFnbWEgSGVscGVyIGZ1bmN0aW9uc1xuXG4gIGZ1bmN0aW9uIGlzU2VxKG1heWJlU2VxKSB7XG4gICAgcmV0dXJuICEhKG1heWJlU2VxICYmIG1heWJlU2VxW0lTX1NFUV9TRU5USU5FTF0pO1xuICB9XG5cbiAgdmFyIEVNUFRZX1NFUTtcblxuICBmdW5jdGlvbiBlbXB0eVNlcXVlbmNlKCkge1xuICAgIHJldHVybiBFTVBUWV9TRVEgfHwgKEVNUFRZX1NFUSA9IG5ldyBBcnJheVNlcShbXSkpO1xuICB9XG5cbiAgZnVuY3Rpb24ga2V5ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgICB2YXIgc2VxID1cbiAgICAgIEFycmF5LmlzQXJyYXkodmFsdWUpID8gbmV3IEFycmF5U2VxKHZhbHVlKS5mcm9tRW50cnlTZXEoKSA6XG4gICAgICBpc0l0ZXJhdG9yKHZhbHVlKSA/IG5ldyBJdGVyYXRvclNlcSh2YWx1ZSkuZnJvbUVudHJ5U2VxKCkgOlxuICAgICAgaGFzSXRlcmF0b3IodmFsdWUpID8gbmV3IEl0ZXJhYmxlU2VxKHZhbHVlKS5mcm9tRW50cnlTZXEoKSA6XG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gbmV3IE9iamVjdFNlcSh2YWx1ZSkgOlxuICAgICAgdW5kZWZpbmVkO1xuICAgIGlmICghc2VxKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnRXhwZWN0ZWQgQXJyYXkgb3IgaXRlcmFibGUgb2JqZWN0IG9mIFtrLCB2XSBlbnRyaWVzLCAnK1xuICAgICAgICAnb3Iga2V5ZWQgb2JqZWN0OiAnICsgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzZXE7XG4gIH1cblxuICBmdW5jdGlvbiBpbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSB7XG4gICAgdmFyIHNlcSA9IG1heWJlSW5kZXhlZFNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gICAgaWYgKCFzZXEpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdFeHBlY3RlZCBBcnJheSBvciBpdGVyYWJsZSBvYmplY3Qgb2YgdmFsdWVzOiAnICsgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzZXE7XG4gIH1cblxuICBmdW5jdGlvbiBzZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgICB2YXIgc2VxID0gbWF5YmVJbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSB8fFxuICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgbmV3IE9iamVjdFNlcSh2YWx1ZSkpO1xuICAgIGlmICghc2VxKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnRXhwZWN0ZWQgQXJyYXkgb3IgaXRlcmFibGUgb2JqZWN0IG9mIHZhbHVlcywgb3Iga2V5ZWQgb2JqZWN0OiAnICsgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzZXE7XG4gIH1cblxuICBmdW5jdGlvbiBtYXliZUluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgaXNBcnJheUxpa2UodmFsdWUpID8gbmV3IEFycmF5U2VxKHZhbHVlKSA6XG4gICAgICBpc0l0ZXJhdG9yKHZhbHVlKSA/IG5ldyBJdGVyYXRvclNlcSh2YWx1ZSkgOlxuICAgICAgaGFzSXRlcmF0b3IodmFsdWUpID8gbmV3IEl0ZXJhYmxlU2VxKHZhbHVlKSA6XG4gICAgICB1bmRlZmluZWRcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VxSXRlcmF0ZShzZXEsIGZuLCByZXZlcnNlLCB1c2VLZXlzKSB7XG4gICAgdmFyIGNhY2hlID0gc2VxLl9jYWNoZTtcbiAgICBpZiAoY2FjaGUpIHtcbiAgICAgIHZhciBtYXhJbmRleCA9IGNhY2hlLmxlbmd0aCAtIDE7XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDw9IG1heEluZGV4OyBpaSsrKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGNhY2hlW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldO1xuICAgICAgICBpZiAoZm4oZW50cnlbMV0sIHVzZUtleXMgPyBlbnRyeVswXSA6IGlpLCBzZXEpID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBpaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpaTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcS5fX2l0ZXJhdGVVbmNhY2hlZChmbiwgcmV2ZXJzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXFJdGVyYXRvcihzZXEsIHR5cGUsIHJldmVyc2UsIHVzZUtleXMpIHtcbiAgICB2YXIgY2FjaGUgPSBzZXEuX2NhY2hlO1xuICAgIGlmIChjYWNoZSkge1xuICAgICAgdmFyIG1heEluZGV4ID0gY2FjaGUubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gY2FjaGVbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV07XG4gICAgICAgIHJldHVybiBpaSsrID4gbWF4SW5kZXggP1xuICAgICAgICAgIGl0ZXJhdG9yRG9uZSgpIDpcbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIHVzZUtleXMgPyBlbnRyeVswXSA6IGlpIC0gMSwgZW50cnlbMV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBzZXEuX19pdGVyYXRvclVuY2FjaGVkKHR5cGUsIHJldmVyc2UpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoQ29sbGVjdGlvbiwgSXRlcmFibGUpO1xuICAgIGZ1bmN0aW9uIENvbGxlY3Rpb24oKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0Fic3RyYWN0Jyk7XG4gICAgfVxuXG5cbiAgY3JlYXRlQ2xhc3MoS2V5ZWRDb2xsZWN0aW9uLCBDb2xsZWN0aW9uKTtmdW5jdGlvbiBLZXllZENvbGxlY3Rpb24oKSB7fVxuXG4gIGNyZWF0ZUNsYXNzKEluZGV4ZWRDb2xsZWN0aW9uLCBDb2xsZWN0aW9uKTtmdW5jdGlvbiBJbmRleGVkQ29sbGVjdGlvbigpIHt9XG5cbiAgY3JlYXRlQ2xhc3MoU2V0Q29sbGVjdGlvbiwgQ29sbGVjdGlvbik7ZnVuY3Rpb24gU2V0Q29sbGVjdGlvbigpIHt9XG5cblxuICBDb2xsZWN0aW9uLktleWVkID0gS2V5ZWRDb2xsZWN0aW9uO1xuICBDb2xsZWN0aW9uLkluZGV4ZWQgPSBJbmRleGVkQ29sbGVjdGlvbjtcbiAgQ29sbGVjdGlvbi5TZXQgPSBTZXRDb2xsZWN0aW9uO1xuXG4gIC8qKlxuICAgKiBBbiBleHRlbnNpb24gb2YgdGhlIFwic2FtZS12YWx1ZVwiIGFsZ29yaXRobSBhcyBbZGVzY3JpYmVkIGZvciB1c2UgYnkgRVM2IE1hcFxuICAgKiBhbmQgU2V0XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXAjS2V5X2VxdWFsaXR5KVxuICAgKlxuICAgKiBOYU4gaXMgY29uc2lkZXJlZCB0aGUgc2FtZSBhcyBOYU4sIGhvd2V2ZXIgLTAgYW5kIDAgYXJlIGNvbnNpZGVyZWQgdGhlIHNhbWVcbiAgICogdmFsdWUsIHdoaWNoIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBhbGdvcml0aG0gZGVzY3JpYmVkIGJ5XG4gICAqIFtgT2JqZWN0LmlzYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzKS5cbiAgICpcbiAgICogVGhpcyBpcyBleHRlbmRlZCBmdXJ0aGVyIHRvIGFsbG93IE9iamVjdHMgdG8gZGVzY3JpYmUgdGhlIHZhbHVlcyB0aGV5XG4gICAqIHJlcHJlc2VudCwgYnkgd2F5IG9mIGB2YWx1ZU9mYCBvciBgZXF1YWxzYCAoYW5kIGBoYXNoQ29kZWApLlxuICAgKlxuICAgKiBOb3RlOiBiZWNhdXNlIG9mIHRoaXMgZXh0ZW5zaW9uLCB0aGUga2V5IGVxdWFsaXR5IG9mIEltbXV0YWJsZS5NYXAgYW5kIHRoZVxuICAgKiB2YWx1ZSBlcXVhbGl0eSBvZiBJbW11dGFibGUuU2V0IHdpbGwgZGlmZmVyIGZyb20gRVM2IE1hcCBhbmQgU2V0LlxuICAgKlxuICAgKiAjIyMgRGVmaW5pbmcgY3VzdG9tIHZhbHVlc1xuICAgKlxuICAgKiBUaGUgZWFzaWVzdCB3YXkgdG8gZGVzY3JpYmUgdGhlIHZhbHVlIGFuIG9iamVjdCByZXByZXNlbnRzIGlzIGJ5IGltcGxlbWVudGluZ1xuICAgKiBgdmFsdWVPZmAuIEZvciBleGFtcGxlLCBgRGF0ZWAgcmVwcmVzZW50cyBhIHZhbHVlIGJ5IHJldHVybmluZyBhIHVuaXhcbiAgICogdGltZXN0YW1wIGZvciBgdmFsdWVPZmA6XG4gICAqXG4gICAqICAgICB2YXIgZGF0ZTEgPSBuZXcgRGF0ZSgxMjM0NTY3ODkwMDAwKTsgLy8gRnJpIEZlYiAxMyAyMDA5IC4uLlxuICAgKiAgICAgdmFyIGRhdGUyID0gbmV3IERhdGUoMTIzNDU2Nzg5MDAwMCk7XG4gICAqICAgICBkYXRlMS52YWx1ZU9mKCk7IC8vIDEyMzQ1Njc4OTAwMDBcbiAgICogICAgIGFzc2VydCggZGF0ZTEgIT09IGRhdGUyICk7XG4gICAqICAgICBhc3NlcnQoIEltbXV0YWJsZS5pcyggZGF0ZTEsIGRhdGUyICkgKTtcbiAgICpcbiAgICogTm90ZTogb3ZlcnJpZGluZyBgdmFsdWVPZmAgbWF5IGhhdmUgb3RoZXIgaW1wbGljYXRpb25zIGlmIHlvdSB1c2UgdGhpcyBvYmplY3RcbiAgICogd2hlcmUgSmF2YVNjcmlwdCBleHBlY3RzIGEgcHJpbWl0aXZlLCBzdWNoIGFzIGltcGxpY2l0IHN0cmluZyBjb2VyY2lvbi5cbiAgICpcbiAgICogRm9yIG1vcmUgY29tcGxleCB0eXBlcywgZXNwZWNpYWxseSBjb2xsZWN0aW9ucywgaW1wbGVtZW50aW5nIGB2YWx1ZU9mYCBtYXlcbiAgICogbm90IGJlIHBlcmZvcm1hbnQuIEFuIGFsdGVybmF0aXZlIGlzIHRvIGltcGxlbWVudCBgZXF1YWxzYCBhbmQgYGhhc2hDb2RlYC5cbiAgICpcbiAgICogYGVxdWFsc2AgdGFrZXMgYW5vdGhlciBvYmplY3QsIHByZXN1bWFibHkgb2Ygc2ltaWxhciB0eXBlLCBhbmQgcmV0dXJucyB0cnVlXG4gICAqIGlmIHRoZSBpdCBpcyBlcXVhbC4gRXF1YWxpdHkgaXMgc3ltbWV0cmljYWwsIHNvIHRoZSBzYW1lIHJlc3VsdCBzaG91bGQgYmVcbiAgICogcmV0dXJuZWQgaWYgdGhpcyBhbmQgdGhlIGFyZ3VtZW50IGFyZSBmbGlwcGVkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0KCBhLmVxdWFscyhiKSA9PT0gYi5lcXVhbHMoYSkgKTtcbiAgICpcbiAgICogYGhhc2hDb2RlYCByZXR1cm5zIGEgMzJiaXQgaW50ZWdlciBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBvYmplY3Qgd2hpY2ggd2lsbFxuICAgKiBiZSB1c2VkIHRvIGRldGVybWluZSBob3cgdG8gc3RvcmUgdGhlIHZhbHVlIG9iamVjdCBpbiBhIE1hcCBvciBTZXQuIFlvdSBtdXN0XG4gICAqIHByb3ZpZGUgYm90aCBvciBuZWl0aGVyIG1ldGhvZHMsIG9uZSBtdXN0IG5vdCBleGlzdCB3aXRob3V0IHRoZSBvdGhlci5cbiAgICpcbiAgICogQWxzbywgYW4gaW1wb3J0YW50IHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZXNlIG1ldGhvZHMgbXVzdCBiZSB1cGhlbGQ6IGlmIHR3b1xuICAgKiB2YWx1ZXMgYXJlIGVxdWFsLCB0aGV5ICptdXN0KiByZXR1cm4gdGhlIHNhbWUgaGFzaENvZGUuIElmIHRoZSB2YWx1ZXMgYXJlIG5vdFxuICAgKiBlcXVhbCwgdGhleSBtaWdodCBoYXZlIHRoZSBzYW1lIGhhc2hDb2RlOyB0aGlzIGlzIGNhbGxlZCBhIGhhc2ggY29sbGlzaW9uLFxuICAgKiBhbmQgd2hpbGUgdW5kZXNpcmFibGUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIGl0IGlzIGFjY2VwdGFibGUuXG4gICAqXG4gICAqICAgICBpZiAoYS5lcXVhbHMoYikpIHtcbiAgICogICAgICAgYXNzZXJ0KCBhLmhhc2hDb2RlKCkgPT09IGIuaGFzaENvZGUoKSApO1xuICAgKiAgICAgfVxuICAgKlxuICAgKiBBbGwgSW1tdXRhYmxlIGNvbGxlY3Rpb25zIGltcGxlbWVudCBgZXF1YWxzYCBhbmQgYGhhc2hDb2RlYC5cbiAgICpcbiAgICovXG4gIGZ1bmN0aW9uIGlzKHZhbHVlQSwgdmFsdWVCKSB7XG4gICAgaWYgKHZhbHVlQSA9PT0gdmFsdWVCIHx8ICh2YWx1ZUEgIT09IHZhbHVlQSAmJiB2YWx1ZUIgIT09IHZhbHVlQikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXZhbHVlQSB8fCAhdmFsdWVCKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWVBLnZhbHVlT2YgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgdHlwZW9mIHZhbHVlQi52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWx1ZUEgPSB2YWx1ZUEudmFsdWVPZigpO1xuICAgICAgdmFsdWVCID0gdmFsdWVCLnZhbHVlT2YoKTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZUEuZXF1YWxzID09PSAnZnVuY3Rpb24nICYmXG4gICAgICB0eXBlb2YgdmFsdWVCLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgIHZhbHVlQS5lcXVhbHModmFsdWVCKSA6XG4gICAgICAgIHZhbHVlQSA9PT0gdmFsdWVCIHx8ICh2YWx1ZUEgIT09IHZhbHVlQSAmJiB2YWx1ZUIgIT09IHZhbHVlQik7XG4gIH1cblxuICBmdW5jdGlvbiBmcm9tSlMoanNvbiwgY29udmVydGVyKSB7XG4gICAgcmV0dXJuIGNvbnZlcnRlciA/XG4gICAgICBmcm9tSlNXaXRoKGNvbnZlcnRlciwganNvbiwgJycsIHsnJzoganNvbn0pIDpcbiAgICAgIGZyb21KU0RlZmF1bHQoanNvbik7XG4gIH1cblxuICBmdW5jdGlvbiBmcm9tSlNXaXRoKGNvbnZlcnRlciwganNvbiwga2V5LCBwYXJlbnRKU09OKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoanNvbikpIHtcbiAgICAgIHJldHVybiBjb252ZXJ0ZXIuY2FsbChwYXJlbnRKU09OLCBrZXksIEluZGV4ZWRTZXEoanNvbikubWFwKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIGZyb21KU1dpdGgoY29udmVydGVyLCB2LCBrLCBqc29uKX0pKTtcbiAgICB9XG4gICAgaWYgKGlzUGxhaW5PYmooanNvbikpIHtcbiAgICAgIHJldHVybiBjb252ZXJ0ZXIuY2FsbChwYXJlbnRKU09OLCBrZXksIEtleWVkU2VxKGpzb24pLm1hcChmdW5jdGlvbih2LCBrKSAge3JldHVybiBmcm9tSlNXaXRoKGNvbnZlcnRlciwgdiwgaywganNvbil9KSk7XG4gICAgfVxuICAgIHJldHVybiBqc29uO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJvbUpTRGVmYXVsdChqc29uKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoanNvbikpIHtcbiAgICAgIHJldHVybiBJbmRleGVkU2VxKGpzb24pLm1hcChmcm9tSlNEZWZhdWx0KS50b0xpc3QoKTtcbiAgICB9XG4gICAgaWYgKGlzUGxhaW5PYmooanNvbikpIHtcbiAgICAgIHJldHVybiBLZXllZFNlcShqc29uKS5tYXAoZnJvbUpTRGVmYXVsdCkudG9NYXAoKTtcbiAgICB9XG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuICBmdW5jdGlvbiBpc1BsYWluT2JqKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG4gIH1cblxuICB2YXIgTWF0aF9faW11bCA9XG4gICAgdHlwZW9mIE1hdGguaW11bCA9PT0gJ2Z1bmN0aW9uJyAmJiBNYXRoLmltdWwoMHhmZmZmZmZmZiwgMikgPT09IC0yID9cbiAgICBNYXRoLmltdWwgOlxuICAgIGZ1bmN0aW9uIE1hdGhfX2ltdWwoYSwgYikge1xuICAgICAgYSA9IGEgfCAwOyAvLyBpbnRcbiAgICAgIGIgPSBiIHwgMDsgLy8gaW50XG4gICAgICB2YXIgYyA9IGEgJiAweGZmZmY7XG4gICAgICB2YXIgZCA9IGIgJiAweGZmZmY7XG4gICAgICAvLyBTaGlmdCBieSAwIGZpeGVzIHRoZSBzaWduIG9uIHRoZSBoaWdoIHBhcnQuXG4gICAgICByZXR1cm4gKGMgKiBkKSArICgoKChhID4+PiAxNikgKiBkICsgYyAqIChiID4+PiAxNikpIDw8IDE2KSA+Pj4gMCkgfCAwOyAvLyBpbnRcbiAgICB9O1xuXG4gIC8vIHY4IGhhcyBhbiBvcHRpbWl6YXRpb24gZm9yIHN0b3JpbmcgMzEtYml0IHNpZ25lZCBudW1iZXJzLlxuICAvLyBWYWx1ZXMgd2hpY2ggaGF2ZSBlaXRoZXIgMDAgb3IgMTEgYXMgdGhlIGhpZ2ggb3JkZXIgYml0cyBxdWFsaWZ5LlxuICAvLyBUaGlzIGZ1bmN0aW9uIGRyb3BzIHRoZSBoaWdoZXN0IG9yZGVyIGJpdCBpbiBhIHNpZ25lZCBudW1iZXIsIG1haW50YWluaW5nXG4gIC8vIHRoZSBzaWduIGJpdC5cbiAgZnVuY3Rpb24gc21pKGkzMikge1xuICAgIHJldHVybiAoKGkzMiA+Pj4gMSkgJiAweDQwMDAwMDAwKSB8IChpMzIgJiAweEJGRkZGRkZGKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc2gobykge1xuICAgIGlmIChvID09PSBmYWxzZSB8fCBvID09PSBudWxsIHx8IG8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygby52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvID0gby52YWx1ZU9mKCk7XG4gICAgICBpZiAobyA9PT0gZmFsc2UgfHwgbyA9PT0gbnVsbCB8fCBvID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgbztcbiAgICBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHZhciBoID0gbyB8IDA7XG4gICAgICBpZiAoaCAhPT0gbykge1xuICAgICAgICBoIF49IG8gKiAweEZGRkZGRkZGO1xuICAgICAgfVxuICAgICAgd2hpbGUgKG8gPiAweEZGRkZGRkZGKSB7XG4gICAgICAgIG8gLz0gMHhGRkZGRkZGRjtcbiAgICAgICAgaCBePSBvO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNtaShoKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gby5sZW5ndGggPiBTVFJJTkdfSEFTSF9DQUNIRV9NSU5fU1RSTEVOID8gY2FjaGVkSGFzaFN0cmluZyhvKSA6IGhhc2hTdHJpbmcobyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygby5oYXNoQ29kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG8uaGFzaENvZGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc2hKU09iaihvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhY2hlZEhhc2hTdHJpbmcoc3RyaW5nKSB7XG4gICAgdmFyIGhhc2ggPSBzdHJpbmdIYXNoQ2FjaGVbc3RyaW5nXTtcbiAgICBpZiAoaGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNoID0gaGFzaFN0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKFNUUklOR19IQVNIX0NBQ0hFX1NJWkUgPT09IFNUUklOR19IQVNIX0NBQ0hFX01BWF9TSVpFKSB7XG4gICAgICAgIFNUUklOR19IQVNIX0NBQ0hFX1NJWkUgPSAwO1xuICAgICAgICBzdHJpbmdIYXNoQ2FjaGUgPSB7fTtcbiAgICAgIH1cbiAgICAgIFNUUklOR19IQVNIX0NBQ0hFX1NJWkUrKztcbiAgICAgIHN0cmluZ0hhc2hDYWNoZVtzdHJpbmddID0gaGFzaDtcbiAgICB9XG4gICAgcmV0dXJuIGhhc2g7XG4gIH1cblxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9oYXNoaW5nLXN0cmluZ3NcbiAgZnVuY3Rpb24gaGFzaFN0cmluZyhzdHJpbmcpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBoYXNoIGZyb20gSlZNXG4gICAgLy8gVGhlIGhhc2ggY29kZSBmb3IgYSBzdHJpbmcgaXMgY29tcHV0ZWQgYXNcbiAgICAvLyBzWzBdICogMzEgXiAobiAtIDEpICsgc1sxXSAqIDMxIF4gKG4gLSAyKSArIC4uLiArIHNbbiAtIDFdLFxuICAgIC8vIHdoZXJlIHNbaV0gaXMgdGhlIGl0aCBjaGFyYWN0ZXIgb2YgdGhlIHN0cmluZyBhbmQgbiBpcyB0aGUgbGVuZ3RoIG9mXG4gICAgLy8gdGhlIHN0cmluZy4gV2UgXCJtb2RcIiB0aGUgcmVzdWx0IHRvIG1ha2UgaXQgYmV0d2VlbiAwIChpbmNsdXNpdmUpIGFuZCAyXjMxXG4gICAgLy8gKGV4Y2x1c2l2ZSkgYnkgZHJvcHBpbmcgaGlnaCBiaXRzLlxuICAgIHZhciBoYXNoID0gMDtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgc3RyaW5nLmxlbmd0aDsgaWkrKykge1xuICAgICAgaGFzaCA9IDMxICogaGFzaCArIHN0cmluZy5jaGFyQ29kZUF0KGlpKSB8IDA7XG4gICAgfVxuICAgIHJldHVybiBzbWkoaGFzaCk7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNoSlNPYmoob2JqKSB7XG4gICAgdmFyIGhhc2ggPSB3ZWFrTWFwICYmIHdlYWtNYXAuZ2V0KG9iaik7XG4gICAgaWYgKGhhc2gpIHJldHVybiBoYXNoO1xuXG4gICAgaGFzaCA9IG9ialtVSURfSEFTSF9LRVldO1xuICAgIGlmIChoYXNoKSByZXR1cm4gaGFzaDtcblxuICAgIGlmICghY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgIGhhc2ggPSBvYmoucHJvcGVydHlJc0VudW1lcmFibGUgJiYgb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlW1VJRF9IQVNIX0tFWV07XG4gICAgICBpZiAoaGFzaCkgcmV0dXJuIGhhc2g7XG5cbiAgICAgIGhhc2ggPSBnZXRJRU5vZGVIYXNoKG9iaik7XG4gICAgICBpZiAoaGFzaCkgcmV0dXJuIGhhc2g7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5pc0V4dGVuc2libGUgJiYgIU9iamVjdC5pc0V4dGVuc2libGUob2JqKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb24tZXh0ZW5zaWJsZSBvYmplY3RzIGFyZSBub3QgYWxsb3dlZCBhcyBrZXlzLicpO1xuICAgIH1cblxuICAgIGhhc2ggPSArK29iakhhc2hVSUQ7XG4gICAgaWYgKG9iakhhc2hVSUQgJiAweDQwMDAwMDAwKSB7XG4gICAgICBvYmpIYXNoVUlEID0gMDtcbiAgICB9XG5cbiAgICBpZiAod2Vha01hcCkge1xuICAgICAgd2Vha01hcC5zZXQob2JqLCBoYXNoKTtcbiAgICB9IGVsc2UgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBVSURfSEFTSF9LRVksIHtcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IGZhbHNlLFxuICAgICAgICAnd3JpdGFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogaGFzaFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChvYmoucHJvcGVydHlJc0VudW1lcmFibGUgJiZcbiAgICAgICAgICAgICAgIG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZSA9PT0gb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSkge1xuICAgICAgLy8gU2luY2Ugd2UgY2FuJ3QgZGVmaW5lIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgb24gdGhlIG9iamVjdFxuICAgICAgLy8gd2UnbGwgaGlqYWNrIG9uZSBvZiB0aGUgbGVzcy11c2VkIG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgdG9cbiAgICAgIC8vIHNhdmUgb3VyIGhhc2ggb24gaXQuIFNpbmNlIHRoaXMgaXMgYSBmdW5jdGlvbiBpdCB3aWxsIG5vdCBzaG93IHVwIGluXG4gICAgICAvLyBgSlNPTi5zdHJpbmdpZnlgIHdoaWNoIGlzIHdoYXQgd2Ugd2FudC5cbiAgICAgIG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBvYmoucHJvcGVydHlJc0VudW1lcmFibGVbVUlEX0hBU0hfS0VZXSA9IGhhc2g7XG4gICAgfSBlbHNlIGlmIChvYmoubm9kZVR5cGUpIHtcbiAgICAgIC8vIEF0IHRoaXMgcG9pbnQgd2UgY291bGRuJ3QgZ2V0IHRoZSBJRSBgdW5pcXVlSURgIHRvIHVzZSBhcyBhIGhhc2hcbiAgICAgIC8vIGFuZCB3ZSBjb3VsZG4ndCB1c2UgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSB0byBleHBsb2l0IHRoZVxuICAgICAgLy8gZG9udEVudW0gYnVnIHNvIHdlIHNpbXBseSBhZGQgdGhlIGBVSURfSEFTSF9LRVlgIG9uIHRoZSBub2RlXG4gICAgICAvLyBpdHNlbGYuXG4gICAgICBvYmpbVUlEX0hBU0hfS0VZXSA9IGhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHNldCBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IG9uIG9iamVjdC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFzaDtcbiAgfVxuXG4gIC8vIFRydWUgaWYgT2JqZWN0LmRlZmluZVByb3BlcnR5IHdvcmtzIGFzIGV4cGVjdGVkLiBJRTggZmFpbHMgdGhpcyB0ZXN0LlxuICB2YXIgY2FuRGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3gnLCB7fSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KCkpO1xuXG4gIC8vIElFIGhhcyBhIGB1bmlxdWVJRGAgcHJvcGVydHkgb24gRE9NIG5vZGVzLiBXZSBjYW4gY29uc3RydWN0IHRoZSBoYXNoIGZyb20gaXRcbiAgLy8gYW5kIGF2b2lkIG1lbW9yeSBsZWFrcyBmcm9tIHRoZSBJRSBjbG9uZU5vZGUgYnVnLlxuICBmdW5jdGlvbiBnZXRJRU5vZGVIYXNoKG5vZGUpIHtcbiAgICBpZiAobm9kZSAmJiBub2RlLm5vZGVUeXBlID4gMCkge1xuICAgICAgc3dpdGNoIChub2RlLm5vZGVUeXBlKSB7XG4gICAgICAgIGNhc2UgMTogLy8gRWxlbWVudFxuICAgICAgICAgIHJldHVybiBub2RlLnVuaXF1ZUlEO1xuICAgICAgICBjYXNlIDk6IC8vIERvY3VtZW50XG4gICAgICAgICAgcmV0dXJuIG5vZGUuZG9jdW1lbnRFbGVtZW50ICYmIG5vZGUuZG9jdW1lbnRFbGVtZW50LnVuaXF1ZUlEO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIElmIHBvc3NpYmxlLCB1c2UgYSBXZWFrTWFwLlxuICB2YXIgd2Vha01hcCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIG5ldyBXZWFrTWFwKCk7XG5cbiAgdmFyIG9iakhhc2hVSUQgPSAwO1xuXG4gIHZhciBVSURfSEFTSF9LRVkgPSAnX19pbW11dGFibGVoYXNoX18nO1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFVJRF9IQVNIX0tFWSA9IFN5bWJvbChVSURfSEFTSF9LRVkpO1xuICB9XG5cbiAgdmFyIFNUUklOR19IQVNIX0NBQ0hFX01JTl9TVFJMRU4gPSAxNjtcbiAgdmFyIFNUUklOR19IQVNIX0NBQ0hFX01BWF9TSVpFID0gMjU1O1xuICB2YXIgU1RSSU5HX0hBU0hfQ0FDSEVfU0laRSA9IDA7XG4gIHZhciBzdHJpbmdIYXNoQ2FjaGUgPSB7fTtcblxuICBmdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBlcnJvcikge1xuICAgIGlmICghY29uZGl0aW9uKSB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0Tm90SW5maW5pdGUoc2l6ZSkge1xuICAgIGludmFyaWFudChcbiAgICAgIHNpemUgIT09IEluZmluaXR5LFxuICAgICAgJ0Nhbm5vdCBwZXJmb3JtIHRoaXMgYWN0aW9uIHdpdGggYW4gaW5maW5pdGUgc2l6ZS4nXG4gICAgKTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFRvS2V5ZWRTZXF1ZW5jZSwgS2V5ZWRTZXEpO1xuICAgIGZ1bmN0aW9uIFRvS2V5ZWRTZXF1ZW5jZShpbmRleGVkLCB1c2VLZXlzKSB7XG4gICAgICB0aGlzLl9pdGVyID0gaW5kZXhlZDtcbiAgICAgIHRoaXMuX3VzZUtleXMgPSB1c2VLZXlzO1xuICAgICAgdGhpcy5zaXplID0gaW5kZXhlZC5zaXplO1xuICAgIH1cblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oa2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuZ2V0KGtleSwgbm90U2V0VmFsdWUpO1xuICAgIH07XG5cbiAgICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuaGFzKGtleSk7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUudmFsdWVTZXEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLnZhbHVlU2VxKCk7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uKCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIHJldmVyc2VkU2VxdWVuY2UgPSByZXZlcnNlRmFjdG9yeSh0aGlzLCB0cnVlKTtcbiAgICAgIGlmICghdGhpcy5fdXNlS2V5cykge1xuICAgICAgICByZXZlcnNlZFNlcXVlbmNlLnZhbHVlU2VxID0gZnVuY3Rpb24oKSAge3JldHVybiB0aGlzJDAuX2l0ZXIudG9TZXEoKS5yZXZlcnNlKCl9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldmVyc2VkU2VxdWVuY2U7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24obWFwcGVyLCBjb250ZXh0KSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgbWFwcGVkU2VxdWVuY2UgPSBtYXBGYWN0b3J5KHRoaXMsIG1hcHBlciwgY29udGV4dCk7XG4gICAgICBpZiAoIXRoaXMuX3VzZUtleXMpIHtcbiAgICAgICAgbWFwcGVkU2VxdWVuY2UudmFsdWVTZXEgPSBmdW5jdGlvbigpICB7cmV0dXJuIHRoaXMkMC5faXRlci50b1NlcSgpLm1hcChtYXBwZXIsIGNvbnRleHQpfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXBwZWRTZXF1ZW5jZTtcbiAgICB9O1xuXG4gICAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIGlpO1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRlKFxuICAgICAgICB0aGlzLl91c2VLZXlzID9cbiAgICAgICAgICBmdW5jdGlvbih2LCBrKSAge3JldHVybiBmbih2LCBrLCB0aGlzJDApfSA6XG4gICAgICAgICAgKChpaSA9IHJldmVyc2UgPyByZXNvbHZlU2l6ZSh0aGlzKSA6IDApLFxuICAgICAgICAgICAgZnVuY3Rpb24odiApIHtyZXR1cm4gZm4odiwgcmV2ZXJzZSA/IC0taWkgOiBpaSsrLCB0aGlzJDApfSksXG4gICAgICAgIHJldmVyc2VcbiAgICAgICk7XG4gICAgfTtcblxuICAgIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIGlmICh0aGlzLl91c2VLZXlzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIGlpID0gcmV2ZXJzZSA/IHJlc29sdmVTaXplKHRoaXMpIDogMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgcmV2ZXJzZSA/IC0taWkgOiBpaSsrLCBzdGVwLnZhbHVlLCBzdGVwKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZVtJU19PUkRFUkVEX1NFTlRJTkVMXSA9IHRydWU7XG5cblxuICBjcmVhdGVDbGFzcyhUb0luZGV4ZWRTZXF1ZW5jZSwgSW5kZXhlZFNlcSk7XG4gICAgZnVuY3Rpb24gVG9JbmRleGVkU2VxdWVuY2UoaXRlcikge1xuICAgICAgdGhpcy5faXRlciA9IGl0ZXI7XG4gICAgICB0aGlzLnNpemUgPSBpdGVyLnNpemU7XG4gICAgfVxuXG4gICAgVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLmNvbnRhaW5zKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5faXRlci5fX2l0ZXJhdGUoZnVuY3Rpb24odiApIHtyZXR1cm4gZm4odiwgaXRlcmF0aW9ucysrLCB0aGlzJDApfSwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIFRvSW5kZXhlZFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5faXRlci5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAuZG9uZSA/IHN0ZXAgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzdGVwLnZhbHVlLCBzdGVwKVxuICAgICAgfSk7XG4gICAgfTtcblxuXG5cbiAgY3JlYXRlQ2xhc3MoVG9TZXRTZXF1ZW5jZSwgU2V0U2VxKTtcbiAgICBmdW5jdGlvbiBUb1NldFNlcXVlbmNlKGl0ZXIpIHtcbiAgICAgIHRoaXMuX2l0ZXIgPSBpdGVyO1xuICAgICAgdGhpcy5zaXplID0gaXRlci5zaXplO1xuICAgIH1cblxuICAgIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuY29udGFpbnMoa2V5KTtcbiAgICB9O1xuXG4gICAgVG9TZXRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0ZShmdW5jdGlvbih2ICkge3JldHVybiBmbih2LCB2LCB0aGlzJDApfSwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICByZXR1cm4gc3RlcC5kb25lID8gc3RlcCA6XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBzdGVwLnZhbHVlLCBzdGVwLnZhbHVlLCBzdGVwKTtcbiAgICAgIH0pO1xuICAgIH07XG5cblxuXG4gIGNyZWF0ZUNsYXNzKEZyb21FbnRyaWVzU2VxdWVuY2UsIEtleWVkU2VxKTtcbiAgICBmdW5jdGlvbiBGcm9tRW50cmllc1NlcXVlbmNlKGVudHJpZXMpIHtcbiAgICAgIHRoaXMuX2l0ZXIgPSBlbnRyaWVzO1xuICAgICAgdGhpcy5zaXplID0gZW50cmllcy5zaXplO1xuICAgIH1cblxuICAgIEZyb21FbnRyaWVzU2VxdWVuY2UucHJvdG90eXBlLmVudHJ5U2VxID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5faXRlci50b1NlcSgpO1xuICAgIH07XG5cbiAgICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRlKGZ1bmN0aW9uKGVudHJ5ICkge1xuICAgICAgICAvLyBDaGVjayBpZiBlbnRyeSBleGlzdHMgZmlyc3Qgc28gYXJyYXkgYWNjZXNzIGRvZXNuJ3QgdGhyb3cgZm9yIGhvbGVzXG4gICAgICAgIC8vIGluIHRoZSBwYXJlbnQgaXRlcmF0aW9uLlxuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YWxpZGF0ZUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gZm4oZW50cnlbMV0sIGVudHJ5WzBdLCB0aGlzJDApO1xuICAgICAgICB9XG4gICAgICB9LCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgRnJvbUVudHJpZXNTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXIuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUywgcmV2ZXJzZSk7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAvLyBDaGVjayBpZiBlbnRyeSBleGlzdHMgZmlyc3Qgc28gYXJyYXkgYWNjZXNzIGRvZXNuJ3QgdGhyb3cgZm9yIGhvbGVzXG4gICAgICAgICAgLy8gaW4gdGhlIHBhcmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICAgIHJldHVybiB0eXBlID09PSBJVEVSQVRFX0VOVFJJRVMgPyBzdGVwIDpcbiAgICAgICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBlbnRyeVswXSwgZW50cnlbMV0sIHN0ZXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuXG4gIFRvSW5kZXhlZFNlcXVlbmNlLnByb3RvdHlwZS5jYWNoZVJlc3VsdCA9XG4gIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPVxuICBUb1NldFNlcXVlbmNlLnByb3RvdHlwZS5jYWNoZVJlc3VsdCA9XG4gIEZyb21FbnRyaWVzU2VxdWVuY2UucHJvdG90eXBlLmNhY2hlUmVzdWx0ID1cbiAgICBjYWNoZVJlc3VsdFRocm91Z2g7XG5cblxuICBmdW5jdGlvbiBmbGlwRmFjdG9yeShpdGVyYWJsZSkge1xuICAgIHZhciBmbGlwU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIGZsaXBTZXF1ZW5jZS5faXRlciA9IGl0ZXJhYmxlO1xuICAgIGZsaXBTZXF1ZW5jZS5zaXplID0gaXRlcmFibGUuc2l6ZTtcbiAgICBmbGlwU2VxdWVuY2UuZmxpcCA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGV9O1xuICAgIGZsaXBTZXF1ZW5jZS5yZXZlcnNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJldmVyc2VkU2VxdWVuY2UgPSBpdGVyYWJsZS5yZXZlcnNlLmFwcGx5KHRoaXMpOyAvLyBzdXBlci5yZXZlcnNlKClcbiAgICAgIHJldmVyc2VkU2VxdWVuY2UuZmxpcCA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGUucmV2ZXJzZSgpfTtcbiAgICAgIHJldHVybiByZXZlcnNlZFNlcXVlbmNlO1xuICAgIH07XG4gICAgZmxpcFNlcXVlbmNlLmhhcyA9IGZ1bmN0aW9uKGtleSApIHtyZXR1cm4gaXRlcmFibGUuY29udGFpbnMoa2V5KX07XG4gICAgZmxpcFNlcXVlbmNlLmNvbnRhaW5zID0gZnVuY3Rpb24oa2V5ICkge3JldHVybiBpdGVyYWJsZS5oYXMoa2V5KX07XG4gICAgZmxpcFNlcXVlbmNlLmNhY2hlUmVzdWx0ID0gY2FjaGVSZXN1bHRUaHJvdWdoO1xuICAgIGZsaXBTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge3JldHVybiBmbihrLCB2LCB0aGlzJDApICE9PSBmYWxzZX0sIHJldmVyc2UpO1xuICAgIH1cbiAgICBmbGlwU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHR5cGUgPT09IElURVJBVEVfRU5UUklFUykge1xuICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoIXN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgdmFyIGsgPSBzdGVwLnZhbHVlWzBdO1xuICAgICAgICAgICAgc3RlcC52YWx1ZVswXSA9IHN0ZXAudmFsdWVbMV07XG4gICAgICAgICAgICBzdGVwLnZhbHVlWzFdID0gaztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0b3IoXG4gICAgICAgIHR5cGUgPT09IElURVJBVEVfVkFMVUVTID8gSVRFUkFURV9LRVlTIDogSVRFUkFURV9WQUxVRVMsXG4gICAgICAgIHJldmVyc2VcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBmbGlwU2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIG1hcEZhY3RvcnkoaXRlcmFibGUsIG1hcHBlciwgY29udGV4dCkge1xuICAgIHZhciBtYXBwZWRTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG4gICAgbWFwcGVkU2VxdWVuY2Uuc2l6ZSA9IGl0ZXJhYmxlLnNpemU7XG4gICAgbWFwcGVkU2VxdWVuY2UuaGFzID0gZnVuY3Rpb24oa2V5ICkge3JldHVybiBpdGVyYWJsZS5oYXMoa2V5KX07XG4gICAgbWFwcGVkU2VxdWVuY2UuZ2V0ID0gZnVuY3Rpb24oa2V5LCBub3RTZXRWYWx1ZSkgIHtcbiAgICAgIHZhciB2ID0gaXRlcmFibGUuZ2V0KGtleSwgTk9UX1NFVCk7XG4gICAgICByZXR1cm4gdiA9PT0gTk9UX1NFVCA/XG4gICAgICAgIG5vdFNldFZhbHVlIDpcbiAgICAgICAgbWFwcGVyLmNhbGwoY29udGV4dCwgdiwga2V5LCBpdGVyYWJsZSk7XG4gICAgfTtcbiAgICBtYXBwZWRTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0ZShcbiAgICAgICAgZnVuY3Rpb24odiwgaywgYykgIHtyZXR1cm4gZm4obWFwcGVyLmNhbGwoY29udGV4dCwgdiwgaywgYyksIGssIHRoaXMkMCkgIT09IGZhbHNlfSxcbiAgICAgICAgcmV2ZXJzZVxuICAgICAgKTtcbiAgICB9XG4gICAgbWFwcGVkU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24gKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCByZXZlcnNlKTtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgIHZhciBrZXkgPSBlbnRyeVswXTtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUoXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgbWFwcGVyLmNhbGwoY29udGV4dCwgZW50cnlbMV0sIGtleSwgaXRlcmFibGUpLFxuICAgICAgICAgIHN0ZXBcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWFwcGVkU2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIHJldmVyc2VGYWN0b3J5KGl0ZXJhYmxlLCB1c2VLZXlzKSB7XG4gICAgdmFyIHJldmVyc2VkU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIHJldmVyc2VkU2VxdWVuY2UuX2l0ZXIgPSBpdGVyYWJsZTtcbiAgICByZXZlcnNlZFNlcXVlbmNlLnNpemUgPSBpdGVyYWJsZS5zaXplO1xuICAgIHJldmVyc2VkU2VxdWVuY2UucmV2ZXJzZSA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gaXRlcmFibGV9O1xuICAgIGlmIChpdGVyYWJsZS5mbGlwKSB7XG4gICAgICByZXZlcnNlZFNlcXVlbmNlLmZsaXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmbGlwU2VxdWVuY2UgPSBmbGlwRmFjdG9yeShpdGVyYWJsZSk7XG4gICAgICAgIGZsaXBTZXF1ZW5jZS5yZXZlcnNlID0gZnVuY3Rpb24oKSAge3JldHVybiBpdGVyYWJsZS5mbGlwKCl9O1xuICAgICAgICByZXR1cm4gZmxpcFNlcXVlbmNlO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5nZXQgPSBmdW5jdGlvbihrZXksIG5vdFNldFZhbHVlKSBcbiAgICAgIHtyZXR1cm4gaXRlcmFibGUuZ2V0KHVzZUtleXMgPyBrZXkgOiAtMSAtIGtleSwgbm90U2V0VmFsdWUpfTtcbiAgICByZXZlcnNlZFNlcXVlbmNlLmhhcyA9IGZ1bmN0aW9uKGtleSApXG4gICAgICB7cmV0dXJuIGl0ZXJhYmxlLmhhcyh1c2VLZXlzID8ga2V5IDogLTEgLSBrZXkpfTtcbiAgICByZXZlcnNlZFNlcXVlbmNlLmNvbnRhaW5zID0gZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIGl0ZXJhYmxlLmNvbnRhaW5zKHZhbHVlKX07XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5jYWNoZVJlc3VsdCA9IGNhY2hlUmVzdWx0VGhyb3VnaDtcbiAgICByZXZlcnNlZFNlcXVlbmNlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSAge3JldHVybiBmbih2LCBrLCB0aGlzJDApfSwgIXJldmVyc2UpO1xuICAgIH07XG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5fX2l0ZXJhdG9yID1cbiAgICAgIGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpICB7cmV0dXJuIGl0ZXJhYmxlLl9faXRlcmF0b3IodHlwZSwgIXJldmVyc2UpfTtcbiAgICByZXR1cm4gcmV2ZXJzZWRTZXF1ZW5jZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gZmlsdGVyRmFjdG9yeShpdGVyYWJsZSwgcHJlZGljYXRlLCBjb250ZXh0LCB1c2VLZXlzKSB7XG4gICAgdmFyIGZpbHRlclNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcbiAgICBpZiAodXNlS2V5cykge1xuICAgICAgZmlsdGVyU2VxdWVuY2UuaGFzID0gZnVuY3Rpb24oa2V5ICkge1xuICAgICAgICB2YXIgdiA9IGl0ZXJhYmxlLmdldChrZXksIE5PVF9TRVQpO1xuICAgICAgICByZXR1cm4gdiAhPT0gTk9UX1NFVCAmJiAhIXByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGtleSwgaXRlcmFibGUpO1xuICAgICAgfTtcbiAgICAgIGZpbHRlclNlcXVlbmNlLmdldCA9IGZ1bmN0aW9uKGtleSwgbm90U2V0VmFsdWUpICB7XG4gICAgICAgIHZhciB2ID0gaXRlcmFibGUuZ2V0KGtleSwgTk9UX1NFVCk7XG4gICAgICAgIHJldHVybiB2ICE9PSBOT1RfU0VUICYmIHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGtleSwgaXRlcmFibGUpID9cbiAgICAgICAgICB2IDogbm90U2V0VmFsdWU7XG4gICAgICB9O1xuICAgIH1cbiAgICBmaWx0ZXJTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuICAgICAgICAgIGl0ZXJhdGlvbnMrKztcbiAgICAgICAgICByZXR1cm4gZm4odiwgdXNlS2V5cyA/IGsgOiBpdGVyYXRpb25zIC0gMSwgdGhpcyQwKTtcbiAgICAgICAgfVxuICAgICAgfSwgcmV2ZXJzZSk7XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuICAgIGZpbHRlclNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uICh0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICB2YXIga2V5ID0gZW50cnlbMF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gZW50cnlbMV07XG4gICAgICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHZhbHVlLCBrZXksIGl0ZXJhYmxlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgdXNlS2V5cyA/IGtleSA6IGl0ZXJhdGlvbnMrKywgdmFsdWUsIHN0ZXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJTZXF1ZW5jZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gY291bnRCeUZhY3RvcnkoaXRlcmFibGUsIGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgICB2YXIgZ3JvdXBzID0gTWFwKCkuYXNNdXRhYmxlKCk7XG4gICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7XG4gICAgICBncm91cHMudXBkYXRlKFxuICAgICAgICBncm91cGVyLmNhbGwoY29udGV4dCwgdiwgaywgaXRlcmFibGUpLFxuICAgICAgICAwLFxuICAgICAgICBmdW5jdGlvbihhICkge3JldHVybiBhICsgMX1cbiAgICAgICk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGdyb3Vwcy5hc0ltbXV0YWJsZSgpO1xuICB9XG5cblxuICBmdW5jdGlvbiBncm91cEJ5RmFjdG9yeShpdGVyYWJsZSwgZ3JvdXBlciwgY29udGV4dCkge1xuICAgIHZhciBpc0tleWVkSXRlciA9IGlzS2V5ZWQoaXRlcmFibGUpO1xuICAgIHZhciBncm91cHMgPSAoaXNPcmRlcmVkKGl0ZXJhYmxlKSA/IE9yZGVyZWRNYXAoKSA6IE1hcCgpKS5hc011dGFibGUoKTtcbiAgICBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtcbiAgICAgIGdyb3Vwcy51cGRhdGUoXG4gICAgICAgIGdyb3VwZXIuY2FsbChjb250ZXh0LCB2LCBrLCBpdGVyYWJsZSksXG4gICAgICAgIGZ1bmN0aW9uKGEgKSB7cmV0dXJuIChhID0gYSB8fCBbXSwgYS5wdXNoKGlzS2V5ZWRJdGVyID8gW2ssIHZdIDogdiksIGEpfVxuICAgICAgKTtcbiAgICB9KTtcbiAgICB2YXIgY29lcmNlID0gaXRlcmFibGVDbGFzcyhpdGVyYWJsZSk7XG4gICAgcmV0dXJuIGdyb3Vwcy5tYXAoZnVuY3Rpb24oYXJyICkge3JldHVybiByZWlmeShpdGVyYWJsZSwgY29lcmNlKGFycikpfSk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIHNsaWNlRmFjdG9yeShpdGVyYWJsZSwgYmVnaW4sIGVuZCwgdXNlS2V5cykge1xuICAgIHZhciBvcmlnaW5hbFNpemUgPSBpdGVyYWJsZS5zaXplO1xuXG4gICAgaWYgKHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgb3JpZ2luYWxTaXplKSkge1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgIH1cblxuICAgIHZhciByZXNvbHZlZEJlZ2luID0gcmVzb2x2ZUJlZ2luKGJlZ2luLCBvcmlnaW5hbFNpemUpO1xuICAgIHZhciByZXNvbHZlZEVuZCA9IHJlc29sdmVFbmQoZW5kLCBvcmlnaW5hbFNpemUpO1xuXG4gICAgLy8gYmVnaW4gb3IgZW5kIHdpbGwgYmUgTmFOIGlmIHRoZXkgd2VyZSBwcm92aWRlZCBhcyBuZWdhdGl2ZSBudW1iZXJzIGFuZFxuICAgIC8vIHRoaXMgaXRlcmFibGUncyBzaXplIGlzIHVua25vd24uIEluIHRoYXQgY2FzZSwgY2FjaGUgZmlyc3Qgc28gdGhlcmUgaXNcbiAgICAvLyBhIGtub3duIHNpemUuXG4gICAgaWYgKHJlc29sdmVkQmVnaW4gIT09IHJlc29sdmVkQmVnaW4gfHwgcmVzb2x2ZWRFbmQgIT09IHJlc29sdmVkRW5kKSB7XG4gICAgICByZXR1cm4gc2xpY2VGYWN0b3J5KGl0ZXJhYmxlLnRvU2VxKCkuY2FjaGVSZXN1bHQoKSwgYmVnaW4sIGVuZCwgdXNlS2V5cyk7XG4gICAgfVxuXG4gICAgdmFyIHNsaWNlU2l6ZSA9IHJlc29sdmVkRW5kIC0gcmVzb2x2ZWRCZWdpbjtcbiAgICBpZiAoc2xpY2VTaXplIDwgMCkge1xuICAgICAgc2xpY2VTaXplID0gMDtcbiAgICB9XG5cbiAgICB2YXIgc2xpY2VTZXEgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuXG4gICAgc2xpY2VTZXEuc2l6ZSA9IHNsaWNlU2l6ZSA9PT0gMCA/IHNsaWNlU2l6ZSA6IGl0ZXJhYmxlLnNpemUgJiYgc2xpY2VTaXplIHx8IHVuZGVmaW5lZDtcblxuICAgIGlmICghdXNlS2V5cyAmJiBpc1NlcShpdGVyYWJsZSkgJiYgc2xpY2VTaXplID49IDApIHtcbiAgICAgIHNsaWNlU2VxLmdldCA9IGZ1bmN0aW9uIChpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgICByZXR1cm4gaW5kZXggPj0gMCAmJiBpbmRleCA8IHNsaWNlU2l6ZSA/XG4gICAgICAgICAgaXRlcmFibGUuZ2V0KGluZGV4ICsgcmVzb2x2ZWRCZWdpbiwgbm90U2V0VmFsdWUpIDpcbiAgICAgICAgICBub3RTZXRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzbGljZVNlcS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICBpZiAoc2xpY2VTaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIHNraXBwZWQgPSAwO1xuICAgICAgdmFyIGlzU2tpcHBpbmcgPSB0cnVlO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaXRlcmFibGUuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7XG4gICAgICAgIGlmICghKGlzU2tpcHBpbmcgJiYgKGlzU2tpcHBpbmcgPSBza2lwcGVkKysgPCByZXNvbHZlZEJlZ2luKSkpIHtcbiAgICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgICAgcmV0dXJuIGZuKHYsIHVzZUtleXMgPyBrIDogaXRlcmF0aW9ucyAtIDEsIHRoaXMkMCkgIT09IGZhbHNlICYmXG4gICAgICAgICAgICAgICAgIGl0ZXJhdGlvbnMgIT09IHNsaWNlU2l6ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuXG4gICAgc2xpY2VTZXEuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgaWYgKHNsaWNlU2l6ZSAmJiByZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIC8vIERvbid0IGJvdGhlciBpbnN0YW50aWF0aW5nIHBhcmVudCBpdGVyYXRvciBpZiB0YWtpbmcgMC5cbiAgICAgIHZhciBpdGVyYXRvciA9IHNsaWNlU2l6ZSAmJiBpdGVyYWJsZS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgdmFyIHNraXBwZWQgPSAwO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHdoaWxlIChza2lwcGVkKysgIT09IHJlc29sdmVkQmVnaW4pIHtcbiAgICAgICAgICBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCsraXRlcmF0aW9ucyA+IHNsaWNlU2l6ZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKHVzZUtleXMgfHwgdHlwZSA9PT0gSVRFUkFURV9WQUxVRVMpIHtcbiAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBJVEVSQVRFX0tFWVMpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zIC0gMSwgdW5kZWZpbmVkLCBzdGVwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zIC0gMSwgc3RlcC52YWx1ZVsxXSwgc3RlcCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzbGljZVNlcTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gdGFrZVdoaWxlRmFjdG9yeShpdGVyYWJsZSwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIHRha2VTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG4gICAgdGFrZVNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrLCBjKSBcbiAgICAgICAge3JldHVybiBwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSAmJiArK2l0ZXJhdGlvbnMgJiYgZm4odiwgaywgdGhpcyQwKX1cbiAgICAgICk7XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuICAgIHRha2VTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYWJsZS5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG4gICAgICB2YXIgaXRlcmF0aW5nID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICBpZiAoIWl0ZXJhdGluZykge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgIHZhciBrID0gZW50cnlbMF07XG4gICAgICAgIHZhciB2ID0gZW50cnlbMV07XG4gICAgICAgIGlmICghcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgdGhpcyQwKSkge1xuICAgICAgICAgIGl0ZXJhdGluZyA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTID8gc3RlcCA6XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBrLCB2LCBzdGVwKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIHRha2VTZXF1ZW5jZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gc2tpcFdoaWxlRmFjdG9yeShpdGVyYWJsZSwgcHJlZGljYXRlLCBjb250ZXh0LCB1c2VLZXlzKSB7XG4gICAgdmFyIHNraXBTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShpdGVyYWJsZSk7XG4gICAgc2tpcFNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG4gICAgICB9XG4gICAgICB2YXIgaXNTa2lwcGluZyA9IHRydWU7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICBpdGVyYWJsZS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaywgYykgIHtcbiAgICAgICAgaWYgKCEoaXNTa2lwcGluZyAmJiAoaXNTa2lwcGluZyA9IHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIGMpKSkpIHtcbiAgICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgICAgcmV0dXJuIGZuKHYsIHVzZUtleXMgPyBrIDogaXRlcmF0aW9ucyAtIDEsIHRoaXMkMCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgfTtcbiAgICBza2lwU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIHNraXBwaW5nID0gdHJ1ZTtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICB2YXIgc3RlcCwgaywgdjtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgICAgaWYgKHVzZUtleXMgfHwgdHlwZSA9PT0gSVRFUkFURV9WQUxVRVMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElURVJBVEVfS0VZUykge1xuICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHVuZGVmaW5lZCwgc3RlcCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHN0ZXAudmFsdWVbMV0sIHN0ZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgIGsgPSBlbnRyeVswXTtcbiAgICAgICAgICB2ID0gZW50cnlbMV07XG4gICAgICAgICAgc2tpcHBpbmcgJiYgKHNraXBwaW5nID0gcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgdGhpcyQwKSk7XG4gICAgICAgIH0gd2hpbGUgKHNraXBwaW5nKTtcbiAgICAgICAgcmV0dXJuIHR5cGUgPT09IElURVJBVEVfRU5UUklFUyA/IHN0ZXAgOlxuICAgICAgICAgIGl0ZXJhdG9yVmFsdWUodHlwZSwgaywgdiwgc3RlcCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBza2lwU2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGNvbmNhdEZhY3RvcnkoaXRlcmFibGUsIHZhbHVlcykge1xuICAgIHZhciBpc0tleWVkSXRlcmFibGUgPSBpc0tleWVkKGl0ZXJhYmxlKTtcbiAgICB2YXIgaXRlcnMgPSBbaXRlcmFibGVdLmNvbmNhdCh2YWx1ZXMpLm1hcChmdW5jdGlvbih2ICkge1xuICAgICAgaWYgKCFpc0l0ZXJhYmxlKHYpKSB7XG4gICAgICAgIHYgPSBpc0tleWVkSXRlcmFibGUgP1xuICAgICAgICAgIGtleWVkU2VxRnJvbVZhbHVlKHYpIDpcbiAgICAgICAgICBpbmRleGVkU2VxRnJvbVZhbHVlKEFycmF5LmlzQXJyYXkodikgPyB2IDogW3ZdKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNLZXllZEl0ZXJhYmxlKSB7XG4gICAgICAgIHYgPSBLZXllZEl0ZXJhYmxlKHYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHY7XG4gICAgfSkuZmlsdGVyKGZ1bmN0aW9uKHYgKSB7cmV0dXJuIHYuc2l6ZSAhPT0gMH0pO1xuXG4gICAgaWYgKGl0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgIH1cblxuICAgIGlmIChpdGVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBzaW5nbGV0b24gPSBpdGVyc1swXTtcbiAgICAgIGlmIChzaW5nbGV0b24gPT09IGl0ZXJhYmxlIHx8XG4gICAgICAgICAgaXNLZXllZEl0ZXJhYmxlICYmIGlzS2V5ZWQoc2luZ2xldG9uKSB8fFxuICAgICAgICAgIGlzSW5kZXhlZChpdGVyYWJsZSkgJiYgaXNJbmRleGVkKHNpbmdsZXRvbikpIHtcbiAgICAgICAgcmV0dXJuIHNpbmdsZXRvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY29uY2F0U2VxID0gbmV3IEFycmF5U2VxKGl0ZXJzKTtcbiAgICBpZiAoaXNLZXllZEl0ZXJhYmxlKSB7XG4gICAgICBjb25jYXRTZXEgPSBjb25jYXRTZXEudG9LZXllZFNlcSgpO1xuICAgIH0gZWxzZSBpZiAoIWlzSW5kZXhlZChpdGVyYWJsZSkpIHtcbiAgICAgIGNvbmNhdFNlcSA9IGNvbmNhdFNlcS50b1NldFNlcSgpO1xuICAgIH1cbiAgICBjb25jYXRTZXEgPSBjb25jYXRTZXEuZmxhdHRlbih0cnVlKTtcbiAgICBjb25jYXRTZXEuc2l6ZSA9IGl0ZXJzLnJlZHVjZShcbiAgICAgIGZ1bmN0aW9uKHN1bSwgc2VxKSAge1xuICAgICAgICBpZiAoc3VtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgc2l6ZSA9IHNlcS5zaXplO1xuICAgICAgICAgIGlmIChzaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdW0gKyBzaXplO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIDBcbiAgICApO1xuICAgIHJldHVybiBjb25jYXRTZXE7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGZsYXR0ZW5GYWN0b3J5KGl0ZXJhYmxlLCBkZXB0aCwgdXNlS2V5cykge1xuICAgIHZhciBmbGF0U2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoaXRlcmFibGUpO1xuICAgIGZsYXRTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICB2YXIgc3RvcHBlZCA9IGZhbHNlO1xuICAgICAgZnVuY3Rpb24gZmxhdERlZXAoaXRlciwgY3VycmVudERlcHRoKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICAgIGl0ZXIuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7XG4gICAgICAgICAgaWYgKCghZGVwdGggfHwgY3VycmVudERlcHRoIDwgZGVwdGgpICYmIGlzSXRlcmFibGUodikpIHtcbiAgICAgICAgICAgIGZsYXREZWVwKHYsIGN1cnJlbnREZXB0aCArIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZm4odiwgdXNlS2V5cyA/IGsgOiBpdGVyYXRpb25zKyssIHRoaXMkMCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICFzdG9wcGVkO1xuICAgICAgICB9LCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIGZsYXREZWVwKGl0ZXJhYmxlLCAwKTtcbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH1cbiAgICBmbGF0U2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGUuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgIHZhciBzdGFjayA9IFtdO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHdoaWxlIChpdGVyYXRvcikge1xuICAgICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgIGlmIChzdGVwLmRvbmUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpdGVyYXRvciA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB2ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTKSB7XG4gICAgICAgICAgICB2ID0gdlsxXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCghZGVwdGggfHwgc3RhY2subGVuZ3RoIDwgZGVwdGgpICYmIGlzSXRlcmFibGUodikpIHtcbiAgICAgICAgICAgIHN0YWNrLnB1c2goaXRlcmF0b3IpO1xuICAgICAgICAgICAgaXRlcmF0b3IgPSB2Ll9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1c2VLZXlzID8gc3RlcCA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCB2LCBzdGVwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmbGF0U2VxdWVuY2U7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGZsYXRNYXBGYWN0b3J5KGl0ZXJhYmxlLCBtYXBwZXIsIGNvbnRleHQpIHtcbiAgICB2YXIgY29lcmNlID0gaXRlcmFibGVDbGFzcyhpdGVyYWJsZSk7XG4gICAgcmV0dXJuIGl0ZXJhYmxlLnRvU2VxKCkubWFwKFxuICAgICAgZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gY29lcmNlKG1hcHBlci5jYWxsKGNvbnRleHQsIHYsIGssIGl0ZXJhYmxlKSl9XG4gICAgKS5mbGF0dGVuKHRydWUpO1xuICB9XG5cblxuICBmdW5jdGlvbiBpbnRlcnBvc2VGYWN0b3J5KGl0ZXJhYmxlLCBzZXBhcmF0b3IpIHtcbiAgICB2YXIgaW50ZXJwb3NlZFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKTtcbiAgICBpbnRlcnBvc2VkU2VxdWVuY2Uuc2l6ZSA9IGl0ZXJhYmxlLnNpemUgJiYgaXRlcmFibGUuc2l6ZSAqIDIgLTE7XG4gICAgaW50ZXJwb3NlZFNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIGl0ZXJhYmxlLl9faXRlcmF0ZShmdW5jdGlvbih2LCBrKSBcbiAgICAgICAge3JldHVybiAoIWl0ZXJhdGlvbnMgfHwgZm4oc2VwYXJhdG9yLCBpdGVyYXRpb25zKyssIHRoaXMkMCkgIT09IGZhbHNlKSAmJlxuICAgICAgICBmbih2LCBpdGVyYXRpb25zKyssIHRoaXMkMCkgIT09IGZhbHNlfSxcbiAgICAgICAgcmV2ZXJzZVxuICAgICAgKTtcbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG4gICAgaW50ZXJwb3NlZFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgdmFyIHN0ZXA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgaWYgKCFzdGVwIHx8IGl0ZXJhdGlvbnMgJSAyKSB7XG4gICAgICAgICAgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZXJhdGlvbnMgJSAyID9cbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgc2VwYXJhdG9yKSA6XG4gICAgICAgICAgaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHN0ZXAudmFsdWUsIHN0ZXApO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gaW50ZXJwb3NlZFNlcXVlbmNlO1xuICB9XG5cblxuICBmdW5jdGlvbiBzb3J0RmFjdG9yeShpdGVyYWJsZSwgY29tcGFyYXRvciwgbWFwcGVyKSB7XG4gICAgaWYgKCFjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gZGVmYXVsdENvbXBhcmF0b3I7XG4gICAgfVxuICAgIHZhciBpc0tleWVkSXRlcmFibGUgPSBpc0tleWVkKGl0ZXJhYmxlKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyaWVzID0gaXRlcmFibGUudG9TZXEoKS5tYXAoXG4gICAgICBmdW5jdGlvbih2LCBrKSAge3JldHVybiBbaywgdiwgaW5kZXgrKywgbWFwcGVyID8gbWFwcGVyKHYsIGssIGl0ZXJhYmxlKSA6IHZdfVxuICAgICkudG9BcnJheSgpO1xuICAgIGVudHJpZXMuc29ydChmdW5jdGlvbihhLCBiKSAge3JldHVybiBjb21wYXJhdG9yKGFbM10sIGJbM10pIHx8IGFbMl0gLSBiWzJdfSkuZm9yRWFjaChcbiAgICAgIGlzS2V5ZWRJdGVyYWJsZSA/XG4gICAgICBmdW5jdGlvbih2LCBpKSAgeyBlbnRyaWVzW2ldLmxlbmd0aCA9IDI7IH0gOlxuICAgICAgZnVuY3Rpb24odiwgaSkgIHsgZW50cmllc1tpXSA9IHZbMV07IH1cbiAgICApO1xuICAgIHJldHVybiBpc0tleWVkSXRlcmFibGUgPyBLZXllZFNlcShlbnRyaWVzKSA6XG4gICAgICBpc0luZGV4ZWQoaXRlcmFibGUpID8gSW5kZXhlZFNlcShlbnRyaWVzKSA6XG4gICAgICBTZXRTZXEoZW50cmllcyk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIG1heEZhY3RvcnkoaXRlcmFibGUsIGNvbXBhcmF0b3IsIG1hcHBlcikge1xuICAgIGlmICghY29tcGFyYXRvcikge1xuICAgICAgY29tcGFyYXRvciA9IGRlZmF1bHRDb21wYXJhdG9yO1xuICAgIH1cbiAgICBpZiAobWFwcGVyKSB7XG4gICAgICB2YXIgZW50cnkgPSBpdGVyYWJsZS50b1NlcSgpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gW3YsIG1hcHBlcih2LCBrLCBpdGVyYWJsZSldfSlcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbihhLCBiKSAge3JldHVybiBtYXhDb21wYXJlKGNvbXBhcmF0b3IsIGFbMV0sIGJbMV0pID8gYiA6IGF9KTtcbiAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlLnJlZHVjZShmdW5jdGlvbihhLCBiKSAge3JldHVybiBtYXhDb21wYXJlKGNvbXBhcmF0b3IsIGEsIGIpID8gYiA6IGF9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtYXhDb21wYXJlKGNvbXBhcmF0b3IsIGEsIGIpIHtcbiAgICB2YXIgY29tcCA9IGNvbXBhcmF0b3IoYiwgYSk7XG4gICAgLy8gYiBpcyBjb25zaWRlcmVkIHRoZSBuZXcgbWF4IGlmIHRoZSBjb21wYXJhdG9yIGRlY2xhcmVzIHRoZW0gZXF1YWwsIGJ1dFxuICAgIC8vIHRoZXkgYXJlIG5vdCBlcXVhbCBhbmQgYiBpcyBpbiBmYWN0IGEgbnVsbGlzaCB2YWx1ZS5cbiAgICByZXR1cm4gKGNvbXAgPT09IDAgJiYgYiAhPT0gYSAmJiAoYiA9PT0gdW5kZWZpbmVkIHx8IGIgPT09IG51bGwgfHwgYiAhPT0gYikpIHx8IGNvbXAgPiAwO1xuICB9XG5cblxuICBmdW5jdGlvbiB6aXBXaXRoRmFjdG9yeShrZXlJdGVyLCB6aXBwZXIsIGl0ZXJzKSB7XG4gICAgdmFyIHppcFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGtleUl0ZXIpO1xuICAgIHppcFNlcXVlbmNlLnNpemUgPSBuZXcgQXJyYXlTZXEoaXRlcnMpLm1hcChmdW5jdGlvbihpICkge3JldHVybiBpLnNpemV9KS5taW4oKTtcbiAgICAvLyBOb3RlOiB0aGlzIGEgZ2VuZXJpYyBiYXNlIGltcGxlbWVudGF0aW9uIG9mIF9faXRlcmF0ZSBpbiB0ZXJtcyBvZlxuICAgIC8vIF9faXRlcmF0b3Igd2hpY2ggbWF5IGJlIG1vcmUgZ2VuZXJpY2FsbHkgdXNlZnVsIGluIHRoZSBmdXR1cmUuXG4gICAgemlwU2VxdWVuY2UuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIC8qIGdlbmVyaWM6XG4gICAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCByZXZlcnNlKTtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgIGlmIChmbihzdGVwLnZhbHVlWzFdLCBzdGVwLnZhbHVlWzBdLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gICAgICAqL1xuICAgICAgLy8gaW5kZXhlZDpcbiAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUywgcmV2ZXJzZSk7XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgaWYgKGZuKHN0ZXAudmFsdWUsIGl0ZXJhdGlvbnMrKywgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG4gICAgemlwU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGl0ZXJhdG9ycyA9IGl0ZXJzLm1hcChmdW5jdGlvbihpIClcbiAgICAgICAge3JldHVybiAoaSA9IEl0ZXJhYmxlKGkpLCBnZXRJdGVyYXRvcihyZXZlcnNlID8gaS5yZXZlcnNlKCkgOiBpKSl9XG4gICAgICApO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgdmFyIGlzRG9uZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHZhciBzdGVwcztcbiAgICAgICAgaWYgKCFpc0RvbmUpIHtcbiAgICAgICAgICBzdGVwcyA9IGl0ZXJhdG9ycy5tYXAoZnVuY3Rpb24oaSApIHtyZXR1cm4gaS5uZXh0KCl9KTtcbiAgICAgICAgICBpc0RvbmUgPSBzdGVwcy5zb21lKGZ1bmN0aW9uKHMgKSB7cmV0dXJuIHMuZG9uZX0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RvbmUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUoXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBpdGVyYXRpb25zKyssXG4gICAgICAgICAgemlwcGVyLmFwcGx5KG51bGwsIHN0ZXBzLm1hcChmdW5jdGlvbihzICkge3JldHVybiBzLnZhbHVlfSkpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiB6aXBTZXF1ZW5jZVxuICB9XG5cblxuICAvLyAjcHJhZ21hIEhlbHBlciBGdW5jdGlvbnNcblxuICBmdW5jdGlvbiByZWlmeShpdGVyLCBzZXEpIHtcbiAgICByZXR1cm4gaXNTZXEoaXRlcikgPyBzZXEgOiBpdGVyLmNvbnN0cnVjdG9yKHNlcSk7XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZGF0ZUVudHJ5KGVudHJ5KSB7XG4gICAgaWYgKGVudHJ5ICE9PSBPYmplY3QoZW50cnkpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBbSywgVl0gdHVwbGU6ICcgKyBlbnRyeSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZVNpemUoaXRlcikge1xuICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG4gICAgcmV0dXJuIGVuc3VyZVNpemUoaXRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBpdGVyYWJsZUNsYXNzKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIGlzS2V5ZWQoaXRlcmFibGUpID8gS2V5ZWRJdGVyYWJsZSA6XG4gICAgICBpc0luZGV4ZWQoaXRlcmFibGUpID8gSW5kZXhlZEl0ZXJhYmxlIDpcbiAgICAgIFNldEl0ZXJhYmxlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZVNlcXVlbmNlKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5jcmVhdGUoXG4gICAgICAoXG4gICAgICAgIGlzS2V5ZWQoaXRlcmFibGUpID8gS2V5ZWRTZXEgOlxuICAgICAgICBpc0luZGV4ZWQoaXRlcmFibGUpID8gSW5kZXhlZFNlcSA6XG4gICAgICAgIFNldFNlcVxuICAgICAgKS5wcm90b3R5cGVcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FjaGVSZXN1bHRUaHJvdWdoKCkge1xuICAgIGlmICh0aGlzLl9pdGVyLmNhY2hlUmVzdWx0KSB7XG4gICAgICB0aGlzLl9pdGVyLmNhY2hlUmVzdWx0KCk7XG4gICAgICB0aGlzLnNpemUgPSB0aGlzLl9pdGVyLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFNlcS5wcm90b3R5cGUuY2FjaGVSZXN1bHQuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0Q29tcGFyYXRvcihhLCBiKSB7XG4gICAgcmV0dXJuIGEgPiBiID8gMSA6IGEgPCBiID8gLTEgOiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9yY2VJdGVyYXRvcihrZXlQYXRoKSB7XG4gICAgdmFyIGl0ZXIgPSBnZXRJdGVyYXRvcihrZXlQYXRoKTtcbiAgICBpZiAoIWl0ZXIpIHtcbiAgICAgIC8vIEFycmF5IG1pZ2h0IG5vdCBiZSBpdGVyYWJsZSBpbiB0aGlzIGVudmlyb25tZW50LCBzbyB3ZSBuZWVkIGEgZmFsbGJhY2tcbiAgICAgIC8vIHRvIG91ciB3cmFwcGVkIHR5cGUuXG4gICAgICBpZiAoIWlzQXJyYXlMaWtlKGtleVBhdGgpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGl0ZXJhYmxlIG9yIGFycmF5LWxpa2U6ICcgKyBrZXlQYXRoKTtcbiAgICAgIH1cbiAgICAgIGl0ZXIgPSBnZXRJdGVyYXRvcihJdGVyYWJsZShrZXlQYXRoKSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVyO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoTWFwLCBLZXllZENvbGxlY3Rpb24pO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIE1hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyBlbXB0eU1hcCgpIDpcbiAgICAgICAgaXNNYXAodmFsdWUpID8gdmFsdWUgOlxuICAgICAgICBlbXB0eU1hcCgpLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24obWFwICkge1xuICAgICAgICAgIHZhciBpdGVyID0gS2V5ZWRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcbiAgICAgICAgICBpdGVyLmZvckVhY2goZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gbWFwLnNldChrLCB2KX0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBNYXAucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdNYXAgeycsICd9Jyk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQWNjZXNzXG5cbiAgICBNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGssIG5vdFNldFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcm9vdCA/XG4gICAgICAgIHRoaXMuX3Jvb3QuZ2V0KDAsIHVuZGVmaW5lZCwgaywgbm90U2V0VmFsdWUpIDpcbiAgICAgICAgbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgICBNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgIHJldHVybiB1cGRhdGVNYXAodGhpcywgaywgdik7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuc2V0SW4gPSBmdW5jdGlvbihrZXlQYXRoLCB2KSB7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVJbihrZXlQYXRoLCBOT1RfU0VULCBmdW5jdGlvbigpICB7cmV0dXJuIHZ9KTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihrKSB7XG4gICAgICByZXR1cm4gdXBkYXRlTWFwKHRoaXMsIGssIE5PVF9TRVQpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLmRlbGV0ZUluID0gZnVuY3Rpb24oa2V5UGF0aCkge1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSW4oa2V5UGF0aCwgZnVuY3Rpb24oKSAge3JldHVybiBOT1RfU0VUfSk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oaywgbm90U2V0VmFsdWUsIHVwZGF0ZXIpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cbiAgICAgICAgayh0aGlzKSA6XG4gICAgICAgIHRoaXMudXBkYXRlSW4oW2tdLCBub3RTZXRWYWx1ZSwgdXBkYXRlcik7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUudXBkYXRlSW4gPSBmdW5jdGlvbihrZXlQYXRoLCBub3RTZXRWYWx1ZSwgdXBkYXRlcikge1xuICAgICAgaWYgKCF1cGRhdGVyKSB7XG4gICAgICAgIHVwZGF0ZXIgPSBub3RTZXRWYWx1ZTtcbiAgICAgICAgbm90U2V0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgdXBkYXRlZFZhbHVlID0gdXBkYXRlSW5EZWVwTWFwKFxuICAgICAgICB0aGlzLFxuICAgICAgICBmb3JjZUl0ZXJhdG9yKGtleVBhdGgpLFxuICAgICAgICBub3RTZXRWYWx1ZSxcbiAgICAgICAgdXBkYXRlclxuICAgICAgKTtcbiAgICAgIHJldHVybiB1cGRhdGVkVmFsdWUgPT09IE5PVF9TRVQgPyB1bmRlZmluZWQgOiB1cGRhdGVkVmFsdWU7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgICAgdGhpcy5fcm9vdCA9IG51bGw7XG4gICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVtcHR5TWFwKCk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQ29tcG9zaXRpb25cblxuICAgIE1hcC5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbigvKi4uLml0ZXJzKi8pIHtcbiAgICAgIHJldHVybiBtZXJnZUludG9NYXBXaXRoKHRoaXMsIHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5tZXJnZVdpdGggPSBmdW5jdGlvbihtZXJnZXIpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiBtZXJnZUludG9NYXBXaXRoKHRoaXMsIG1lcmdlciwgaXRlcnMpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLm1lcmdlSW4gPSBmdW5jdGlvbihrZXlQYXRoKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVJbihrZXlQYXRoLCBlbXB0eU1hcCgpLCBmdW5jdGlvbihtICkge3JldHVybiBtLm1lcmdlLmFwcGx5KG0sIGl0ZXJzKX0pO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLm1lcmdlRGVlcCA9IGZ1bmN0aW9uKC8qLi4uaXRlcnMqLykge1xuICAgICAgcmV0dXJuIG1lcmdlSW50b01hcFdpdGgodGhpcywgZGVlcE1lcmdlcih1bmRlZmluZWQpLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLm1lcmdlRGVlcFdpdGggPSBmdW5jdGlvbihtZXJnZXIpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiBtZXJnZUludG9NYXBXaXRoKHRoaXMsIGRlZXBNZXJnZXIobWVyZ2VyKSwgaXRlcnMpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLm1lcmdlRGVlcEluID0gZnVuY3Rpb24oa2V5UGF0aCkge3ZhciBpdGVycyA9IFNMSUNFJDAuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSW4oa2V5UGF0aCwgZW1wdHlNYXAoKSwgZnVuY3Rpb24obSApIHtyZXR1cm4gbS5tZXJnZURlZXAuYXBwbHkobSwgaXRlcnMpfSk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKGNvbXBhcmF0b3IpIHtcbiAgICAgIC8vIExhdGUgYmluZGluZ1xuICAgICAgcmV0dXJuIE9yZGVyZWRNYXAoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvcikpO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLnNvcnRCeSA9IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgICAgLy8gTGF0ZSBiaW5kaW5nXG4gICAgICByZXR1cm4gT3JkZXJlZE1hcChzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yLCBtYXBwZXIpKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNdXRhYmlsaXR5XG5cbiAgICBNYXAucHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSBmdW5jdGlvbihmbikge1xuICAgICAgdmFyIG11dGFibGUgPSB0aGlzLmFzTXV0YWJsZSgpO1xuICAgICAgZm4obXV0YWJsZSk7XG4gICAgICByZXR1cm4gbXV0YWJsZS53YXNBbHRlcmVkKCkgPyBtdXRhYmxlLl9fZW5zdXJlT3duZXIodGhpcy5fX293bmVySUQpIDogdGhpcztcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5hc011dGFibGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fb3duZXJJRCA/IHRoaXMgOiB0aGlzLl9fZW5zdXJlT3duZXIobmV3IE93bmVySUQoKSk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuYXNJbW11dGFibGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZW5zdXJlT3duZXIoKTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2FsdGVyZWQ7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcywgdHlwZSwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIE1hcC5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHRoaXMuX3Jvb3QgJiYgdGhpcy5fcm9vdC5pdGVyYXRlKGZ1bmN0aW9uKGVudHJ5ICkge1xuICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgIHJldHVybiBmbihlbnRyeVsxXSwgZW50cnlbMF0sIHRoaXMkMCk7XG4gICAgICB9LCByZXZlcnNlKTtcbiAgICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbihvd25lcklEKSB7XG4gICAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlTWFwKHRoaXMuc2l6ZSwgdGhpcy5fcm9vdCwgb3duZXJJRCwgdGhpcy5fX2hhc2gpO1xuICAgIH07XG5cblxuICBmdW5jdGlvbiBpc01hcChtYXliZU1hcCkge1xuICAgIHJldHVybiAhIShtYXliZU1hcCAmJiBtYXliZU1hcFtJU19NQVBfU0VOVElORUxdKTtcbiAgfVxuXG4gIE1hcC5pc01hcCA9IGlzTWFwO1xuXG4gIHZhciBJU19NQVBfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9NQVBfX0BAJztcblxuICB2YXIgTWFwUHJvdG90eXBlID0gTWFwLnByb3RvdHlwZTtcbiAgTWFwUHJvdG90eXBlW0lTX01BUF9TRU5USU5FTF0gPSB0cnVlO1xuICBNYXBQcm90b3R5cGVbREVMRVRFXSA9IE1hcFByb3RvdHlwZS5yZW1vdmU7XG4gIE1hcFByb3RvdHlwZS5yZW1vdmVJbiA9IE1hcFByb3RvdHlwZS5kZWxldGVJbjtcblxuXG4gIC8vICNwcmFnbWEgVHJpZSBOb2Rlc1xuXG5cblxuICAgIGZ1bmN0aW9uIEFycmF5TWFwTm9kZShvd25lcklELCBlbnRyaWVzKSB7XG4gICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuICAgICAgdGhpcy5lbnRyaWVzID0gZW50cmllcztcbiAgICB9XG5cbiAgICBBcnJheU1hcE5vZGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHNoaWZ0LCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgICAgIGZvciAodmFyIGlpID0gMCwgbGVuID0gZW50cmllcy5sZW5ndGg7IGlpIDwgbGVuOyBpaSsrKSB7XG4gICAgICAgIGlmIChpcyhrZXksIGVudHJpZXNbaWldWzBdKSkge1xuICAgICAgICAgIHJldHVybiBlbnRyaWVzW2lpXVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICBBcnJheU1hcE5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICAgICAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcblxuICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXM7XG4gICAgICB2YXIgaWR4ID0gMDtcbiAgICAgIGZvciAodmFyIGxlbiA9IGVudHJpZXMubGVuZ3RoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgIGlmIChpcyhrZXksIGVudHJpZXNbaWR4XVswXSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGV4aXN0cyA9IGlkeCA8IGxlbjtcblxuICAgICAgaWYgKGV4aXN0cyA/IGVudHJpZXNbaWR4XVsxXSA9PT0gdmFsdWUgOiByZW1vdmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuICAgICAgKHJlbW92ZWQgfHwgIWV4aXN0cykgJiYgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuXG4gICAgICBpZiAocmVtb3ZlZCAmJiBlbnRyaWVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICBpZiAoIWV4aXN0cyAmJiAhcmVtb3ZlZCAmJiBlbnRyaWVzLmxlbmd0aCA+PSBNQVhfQVJSQVlfTUFQX1NJWkUpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZU5vZGVzKG93bmVySUQsIGVudHJpZXMsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuICAgICAgdmFyIG5ld0VudHJpZXMgPSBpc0VkaXRhYmxlID8gZW50cmllcyA6IGFyckNvcHkoZW50cmllcyk7XG5cbiAgICAgIGlmIChleGlzdHMpIHtcbiAgICAgICAgaWYgKHJlbW92ZWQpIHtcbiAgICAgICAgICBpZHggPT09IGxlbiAtIDEgPyBuZXdFbnRyaWVzLnBvcCgpIDogKG5ld0VudHJpZXNbaWR4XSA9IG5ld0VudHJpZXMucG9wKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0VudHJpZXNbaWR4XSA9IFtrZXksIHZhbHVlXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3RW50cmllcy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgICAgIHRoaXMuZW50cmllcyA9IG5ld0VudHJpZXM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IEFycmF5TWFwTm9kZShvd25lcklELCBuZXdFbnRyaWVzKTtcbiAgICB9O1xuXG5cblxuXG4gICAgZnVuY3Rpb24gQml0bWFwSW5kZXhlZE5vZGUob3duZXJJRCwgYml0bWFwLCBub2Rlcykge1xuICAgICAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgICAgIHRoaXMuYml0bWFwID0gYml0bWFwO1xuICAgICAgdGhpcy5ub2RlcyA9IG5vZGVzO1xuICAgIH1cblxuICAgIEJpdG1hcEluZGV4ZWROb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuICAgICAgdmFyIGJpdCA9ICgxIDw8ICgoc2hpZnQgPT09IDAgPyBrZXlIYXNoIDoga2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSykpO1xuICAgICAgdmFyIGJpdG1hcCA9IHRoaXMuYml0bWFwO1xuICAgICAgcmV0dXJuIChiaXRtYXAgJiBiaXQpID09PSAwID8gbm90U2V0VmFsdWUgOlxuICAgICAgICB0aGlzLm5vZGVzW3BvcENvdW50KGJpdG1hcCAmIChiaXQgLSAxKSldLmdldChzaGlmdCArIFNISUZULCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKTtcbiAgICB9O1xuXG4gICAgQml0bWFwSW5kZXhlZE5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuICAgICAgdmFyIGtleUhhc2hGcmFnID0gKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG4gICAgICB2YXIgYml0ID0gMSA8PCBrZXlIYXNoRnJhZztcbiAgICAgIHZhciBiaXRtYXAgPSB0aGlzLmJpdG1hcDtcbiAgICAgIHZhciBleGlzdHMgPSAoYml0bWFwICYgYml0KSAhPT0gMDtcblxuICAgICAgaWYgKCFleGlzdHMgJiYgdmFsdWUgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBpZHggPSBwb3BDb3VudChiaXRtYXAgJiAoYml0IC0gMSkpO1xuICAgICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcztcbiAgICAgIHZhciBub2RlID0gZXhpc3RzID8gbm9kZXNbaWR4XSA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciBuZXdOb2RlID0gdXBkYXRlTm9kZShub2RlLCBvd25lcklELCBzaGlmdCArIFNISUZULCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcik7XG5cbiAgICAgIGlmIChuZXdOb2RlID09PSBub2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV4aXN0cyAmJiBuZXdOb2RlICYmIG5vZGVzLmxlbmd0aCA+PSBNQVhfQklUTUFQX0lOREVYRURfU0laRSkge1xuICAgICAgICByZXR1cm4gZXhwYW5kTm9kZXMob3duZXJJRCwgbm9kZXMsIGJpdG1hcCwga2V5SGFzaEZyYWcsIG5ld05vZGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXhpc3RzICYmICFuZXdOb2RlICYmIG5vZGVzLmxlbmd0aCA9PT0gMiAmJiBpc0xlYWZOb2RlKG5vZGVzW2lkeCBeIDFdKSkge1xuICAgICAgICByZXR1cm4gbm9kZXNbaWR4IF4gMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChleGlzdHMgJiYgbmV3Tm9kZSAmJiBub2Rlcy5sZW5ndGggPT09IDEgJiYgaXNMZWFmTm9kZShuZXdOb2RlKSkge1xuICAgICAgICByZXR1cm4gbmV3Tm9kZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzRWRpdGFibGUgPSBvd25lcklEICYmIG93bmVySUQgPT09IHRoaXMub3duZXJJRDtcbiAgICAgIHZhciBuZXdCaXRtYXAgPSBleGlzdHMgPyBuZXdOb2RlID8gYml0bWFwIDogYml0bWFwIF4gYml0IDogYml0bWFwIHwgYml0O1xuICAgICAgdmFyIG5ld05vZGVzID0gZXhpc3RzID8gbmV3Tm9kZSA/XG4gICAgICAgIHNldEluKG5vZGVzLCBpZHgsIG5ld05vZGUsIGlzRWRpdGFibGUpIDpcbiAgICAgICAgc3BsaWNlT3V0KG5vZGVzLCBpZHgsIGlzRWRpdGFibGUpIDpcbiAgICAgICAgc3BsaWNlSW4obm9kZXMsIGlkeCwgbmV3Tm9kZSwgaXNFZGl0YWJsZSk7XG5cbiAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgICAgIHRoaXMuYml0bWFwID0gbmV3Qml0bWFwO1xuICAgICAgICB0aGlzLm5vZGVzID0gbmV3Tm9kZXM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsIG5ld0JpdG1hcCwgbmV3Tm9kZXMpO1xuICAgIH07XG5cblxuXG5cbiAgICBmdW5jdGlvbiBIYXNoQXJyYXlNYXBOb2RlKG93bmVySUQsIGNvdW50LCBub2Rlcykge1xuICAgICAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgICAgIHRoaXMuY291bnQgPSBjb3VudDtcbiAgICAgIHRoaXMubm9kZXMgPSBub2RlcztcbiAgICB9XG5cbiAgICBIYXNoQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuICAgICAgdmFyIGlkeCA9IChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGVzW2lkeF07XG4gICAgICByZXR1cm4gbm9kZSA/IG5vZGUuZ2V0KHNoaWZ0ICsgU0hJRlQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIDogbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIEhhc2hBcnJheU1hcE5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICAgICAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICAgICAgfVxuICAgICAgdmFyIGlkeCA9IChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuICAgICAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcbiAgICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW2lkeF07XG5cbiAgICAgIGlmIChyZW1vdmVkICYmICFub2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3Tm9kZSA9IHVwZGF0ZU5vZGUobm9kZSwgb3duZXJJRCwgc2hpZnQgKyBTSElGVCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpO1xuICAgICAgaWYgKG5ld05vZGUgPT09IG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdDb3VudCA9IHRoaXMuY291bnQ7XG4gICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgbmV3Q291bnQrKztcbiAgICAgIH0gZWxzZSBpZiAoIW5ld05vZGUpIHtcbiAgICAgICAgbmV3Q291bnQtLTtcbiAgICAgICAgaWYgKG5ld0NvdW50IDwgTUlOX0hBU0hfQVJSQVlfTUFQX1NJWkUpIHtcbiAgICAgICAgICByZXR1cm4gcGFja05vZGVzKG93bmVySUQsIG5vZGVzLCBuZXdDb3VudCwgaWR4KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuICAgICAgdmFyIG5ld05vZGVzID0gc2V0SW4obm9kZXMsIGlkeCwgbmV3Tm9kZSwgaXNFZGl0YWJsZSk7XG5cbiAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgICAgIHRoaXMuY291bnQgPSBuZXdDb3VudDtcbiAgICAgICAgdGhpcy5ub2RlcyA9IG5ld05vZGVzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBIYXNoQXJyYXlNYXBOb2RlKG93bmVySUQsIG5ld0NvdW50LCBuZXdOb2Rlcyk7XG4gICAgfTtcblxuXG5cblxuICAgIGZ1bmN0aW9uIEhhc2hDb2xsaXNpb25Ob2RlKG93bmVySUQsIGtleUhhc2gsIGVudHJpZXMpIHtcbiAgICAgIHRoaXMub3duZXJJRCA9IG93bmVySUQ7XG4gICAgICB0aGlzLmtleUhhc2ggPSBrZXlIYXNoO1xuICAgICAgdGhpcy5lbnRyaWVzID0gZW50cmllcztcbiAgICB9XG5cbiAgICBIYXNoQ29sbGlzaW9uTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oc2hpZnQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICAgICAgZm9yICh2YXIgaWkgPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWkgPCBsZW47IGlpKyspIHtcbiAgICAgICAgaWYgKGlzKGtleSwgZW50cmllc1tpaV1bMF0pKSB7XG4gICAgICAgICAgcmV0dXJuIGVudHJpZXNbaWldWzFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIEhhc2hDb2xsaXNpb25Ob2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgICAgIGlmIChrZXlIYXNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2V5SGFzaCA9IGhhc2goa2V5KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcblxuICAgICAgaWYgKGtleUhhc2ggIT09IHRoaXMua2V5SGFzaCkge1xuICAgICAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIFNldFJlZihkaWRBbHRlcik7XG4gICAgICAgIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcbiAgICAgICAgcmV0dXJuIG1lcmdlSW50b05vZGUodGhpcywgb3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIFtrZXksIHZhbHVlXSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICAgICAgdmFyIGlkeCA9IDA7XG4gICAgICBmb3IgKHZhciBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgICAgICBpZiAoaXMoa2V5LCBlbnRyaWVzW2lkeF1bMF0pKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBleGlzdHMgPSBpZHggPCBsZW47XG5cbiAgICAgIGlmIChleGlzdHMgPyBlbnRyaWVzW2lkeF1bMV0gPT09IHZhbHVlIDogcmVtb3ZlZCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgU2V0UmVmKGRpZEFsdGVyKTtcbiAgICAgIChyZW1vdmVkIHx8ICFleGlzdHMpICYmIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcblxuICAgICAgaWYgKHJlbW92ZWQgJiYgbGVuID09PSAyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmFsdWVOb2RlKG93bmVySUQsIHRoaXMua2V5SGFzaCwgZW50cmllc1tpZHggXiAxXSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpc0VkaXRhYmxlID0gb3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQ7XG4gICAgICB2YXIgbmV3RW50cmllcyA9IGlzRWRpdGFibGUgPyBlbnRyaWVzIDogYXJyQ29weShlbnRyaWVzKTtcblxuICAgICAgaWYgKGV4aXN0cykge1xuICAgICAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgICAgIGlkeCA9PT0gbGVuIC0gMSA/IG5ld0VudHJpZXMucG9wKCkgOiAobmV3RW50cmllc1tpZHhdID0gbmV3RW50cmllcy5wb3AoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3RW50cmllc1tpZHhdID0gW2tleSwgdmFsdWVdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdFbnRyaWVzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRWRpdGFibGUpIHtcbiAgICAgICAgdGhpcy5lbnRyaWVzID0gbmV3RW50cmllcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgSGFzaENvbGxpc2lvbk5vZGUob3duZXJJRCwgdGhpcy5rZXlIYXNoLCBuZXdFbnRyaWVzKTtcbiAgICB9O1xuXG5cblxuXG4gICAgZnVuY3Rpb24gVmFsdWVOb2RlKG93bmVySUQsIGtleUhhc2gsIGVudHJ5KSB7XG4gICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuICAgICAgdGhpcy5rZXlIYXNoID0ga2V5SGFzaDtcbiAgICAgIHRoaXMuZW50cnkgPSBlbnRyeTtcbiAgICB9XG5cbiAgICBWYWx1ZU5vZGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHNoaWZ0LCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgICByZXR1cm4gaXMoa2V5LCB0aGlzLmVudHJ5WzBdKSA/IHRoaXMuZW50cnlbMV0gOiBub3RTZXRWYWx1ZTtcbiAgICB9O1xuXG4gICAgVmFsdWVOb2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgICAgIHZhciByZW1vdmVkID0gdmFsdWUgPT09IE5PVF9TRVQ7XG4gICAgICB2YXIga2V5TWF0Y2ggPSBpcyhrZXksIHRoaXMuZW50cnlbMF0pO1xuICAgICAgaWYgKGtleU1hdGNoID8gdmFsdWUgPT09IHRoaXMuZW50cnlbMV0gOiByZW1vdmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuXG4gICAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgICBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG4gICAgICAgIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gICAgICB9XG5cbiAgICAgIGlmIChrZXlNYXRjaCkge1xuICAgICAgICBpZiAob3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQpIHtcbiAgICAgICAgICB0aGlzLmVudHJ5WzFdID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZU5vZGUob3duZXJJRCwgdGhpcy5rZXlIYXNoLCBba2V5LCB2YWx1ZV0pO1xuICAgICAgfVxuXG4gICAgICBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTm9kZSh0aGlzLCBvd25lcklELCBzaGlmdCwgaGFzaChrZXkpLCBba2V5LCB2YWx1ZV0pO1xuICAgIH07XG5cblxuXG4gIC8vICNwcmFnbWEgSXRlcmF0b3JzXG5cbiAgQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5pdGVyYXRlID1cbiAgSGFzaENvbGxpc2lvbk5vZGUucHJvdG90eXBlLml0ZXJhdGUgPSBmdW5jdGlvbiAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgICBmb3IgKHZhciBpaSA9IDAsIG1heEluZGV4ID0gZW50cmllcy5sZW5ndGggLSAxOyBpaSA8PSBtYXhJbmRleDsgaWkrKykge1xuICAgICAgaWYgKGZuKGVudHJpZXNbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV0pID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQml0bWFwSW5kZXhlZE5vZGUucHJvdG90eXBlLml0ZXJhdGUgPVxuICBIYXNoQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5pdGVyYXRlID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcztcbiAgICBmb3IgKHZhciBpaSA9IDAsIG1heEluZGV4ID0gbm9kZXMubGVuZ3RoIC0gMTsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgIHZhciBub2RlID0gbm9kZXNbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV07XG4gICAgICBpZiAobm9kZSAmJiBub2RlLml0ZXJhdGUoZm4sIHJldmVyc2UpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgVmFsdWVOb2RlLnByb3RvdHlwZS5pdGVyYXRlID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7XG4gICAgcmV0dXJuIGZuKHRoaXMuZW50cnkpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoTWFwSXRlcmF0b3IsIEl0ZXJhdG9yKTtcblxuICAgIGZ1bmN0aW9uIE1hcEl0ZXJhdG9yKG1hcCwgdHlwZSwgcmV2ZXJzZSkge1xuICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgICB0aGlzLl9yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICAgIHRoaXMuX3N0YWNrID0gbWFwLl9yb290ICYmIG1hcEl0ZXJhdG9yRnJhbWUobWFwLl9yb290KTtcbiAgICB9XG5cbiAgICBNYXBJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHR5cGUgPSB0aGlzLl90eXBlO1xuICAgICAgdmFyIHN0YWNrID0gdGhpcy5fc3RhY2s7XG4gICAgICB3aGlsZSAoc3RhY2spIHtcbiAgICAgICAgdmFyIG5vZGUgPSBzdGFjay5ub2RlO1xuICAgICAgICB2YXIgaW5kZXggPSBzdGFjay5pbmRleCsrO1xuICAgICAgICB2YXIgbWF4SW5kZXg7XG4gICAgICAgIGlmIChub2RlLmVudHJ5KSB7XG4gICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBub2RlLmVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5lbnRyaWVzKSB7XG4gICAgICAgICAgbWF4SW5kZXggPSBub2RlLmVudHJpZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICBpZiAoaW5kZXggPD0gbWF4SW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXBJdGVyYXRvclZhbHVlKHR5cGUsIG5vZGUuZW50cmllc1t0aGlzLl9yZXZlcnNlID8gbWF4SW5kZXggLSBpbmRleCA6IGluZGV4XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1heEluZGV4ID0gbm9kZS5ub2Rlcy5sZW5ndGggLSAxO1xuICAgICAgICAgIGlmIChpbmRleCA8PSBtYXhJbmRleCkge1xuICAgICAgICAgICAgdmFyIHN1Yk5vZGUgPSBub2RlLm5vZGVzW3RoaXMuX3JldmVyc2UgPyBtYXhJbmRleCAtIGluZGV4IDogaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHN1Yk5vZGUpIHtcbiAgICAgICAgICAgICAgaWYgKHN1Yk5vZGUuZW50cnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBzdWJOb2RlLmVudHJ5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdGFjayA9IHRoaXMuX3N0YWNrID0gbWFwSXRlcmF0b3JGcmFtZShzdWJOb2RlLCBzdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RhY2sgPSB0aGlzLl9zdGFjayA9IHRoaXMuX3N0YWNrLl9fcHJldjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICB9O1xuXG5cbiAgZnVuY3Rpb24gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBlbnRyeSkge1xuICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXBJdGVyYXRvckZyYW1lKG5vZGUsIHByZXYpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbm9kZTogbm9kZSxcbiAgICAgIGluZGV4OiAwLFxuICAgICAgX19wcmV2OiBwcmV2XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VNYXAoc2l6ZSwgcm9vdCwgb3duZXJJRCwgaGFzaCkge1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKE1hcFByb3RvdHlwZSk7XG4gICAgbWFwLnNpemUgPSBzaXplO1xuICAgIG1hcC5fcm9vdCA9IHJvb3Q7XG4gICAgbWFwLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgbWFwLl9faGFzaCA9IGhhc2g7XG4gICAgbWFwLl9fYWx0ZXJlZCA9IGZhbHNlO1xuICAgIHJldHVybiBtYXA7XG4gIH1cblxuICB2YXIgRU1QVFlfTUFQO1xuICBmdW5jdGlvbiBlbXB0eU1hcCgpIHtcbiAgICByZXR1cm4gRU1QVFlfTUFQIHx8IChFTVBUWV9NQVAgPSBtYWtlTWFwKDApKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU1hcChtYXAsIGssIHYpIHtcbiAgICB2YXIgbmV3Um9vdDtcbiAgICB2YXIgbmV3U2l6ZTtcbiAgICBpZiAoIW1hcC5fcm9vdCkge1xuICAgICAgaWYgKHYgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgIH1cbiAgICAgIG5ld1NpemUgPSAxO1xuICAgICAgbmV3Um9vdCA9IG5ldyBBcnJheU1hcE5vZGUobWFwLl9fb3duZXJJRCwgW1trLCB2XV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZGlkQ2hhbmdlU2l6ZSA9IE1ha2VSZWYoQ0hBTkdFX0xFTkdUSCk7XG4gICAgICB2YXIgZGlkQWx0ZXIgPSBNYWtlUmVmKERJRF9BTFRFUik7XG4gICAgICBuZXdSb290ID0gdXBkYXRlTm9kZShtYXAuX3Jvb3QsIG1hcC5fX293bmVySUQsIDAsIHVuZGVmaW5lZCwgaywgdiwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpO1xuICAgICAgaWYgKCFkaWRBbHRlci52YWx1ZSkge1xuICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgfVxuICAgICAgbmV3U2l6ZSA9IG1hcC5zaXplICsgKGRpZENoYW5nZVNpemUudmFsdWUgPyB2ID09PSBOT1RfU0VUID8gLTEgOiAxIDogMCk7XG4gICAgfVxuICAgIGlmIChtYXAuX19vd25lcklEKSB7XG4gICAgICBtYXAuc2l6ZSA9IG5ld1NpemU7XG4gICAgICBtYXAuX3Jvb3QgPSBuZXdSb290O1xuICAgICAgbWFwLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgIG1hcC5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1Jvb3QgPyBtYWtlTWFwKG5ld1NpemUsIG5ld1Jvb3QpIDogZW1wdHlNYXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU5vZGUobm9kZSwgb3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKSB7XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICBpZiAodmFsdWUgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuICAgICAgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuICAgICAgcmV0dXJuIG5ldyBWYWx1ZU5vZGUob3duZXJJRCwga2V5SGFzaCwgW2tleSwgdmFsdWVdKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGUudXBkYXRlKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBpc0xlYWZOb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5jb25zdHJ1Y3RvciA9PT0gVmFsdWVOb2RlIHx8IG5vZGUuY29uc3RydWN0b3IgPT09IEhhc2hDb2xsaXNpb25Ob2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VJbnRvTm9kZShub2RlLCBvd25lcklELCBzaGlmdCwga2V5SGFzaCwgZW50cnkpIHtcbiAgICBpZiAobm9kZS5rZXlIYXNoID09PSBrZXlIYXNoKSB7XG4gICAgICByZXR1cm4gbmV3IEhhc2hDb2xsaXNpb25Ob2RlKG93bmVySUQsIGtleUhhc2gsIFtub2RlLmVudHJ5LCBlbnRyeV0pO1xuICAgIH1cblxuICAgIHZhciBpZHgxID0gKHNoaWZ0ID09PSAwID8gbm9kZS5rZXlIYXNoIDogbm9kZS5rZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuICAgIHZhciBpZHgyID0gKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG5cbiAgICB2YXIgbmV3Tm9kZTtcbiAgICB2YXIgbm9kZXMgPSBpZHgxID09PSBpZHgyID9cbiAgICAgIFttZXJnZUludG9Ob2RlKG5vZGUsIG93bmVySUQsIHNoaWZ0ICsgU0hJRlQsIGtleUhhc2gsIGVudHJ5KV0gOlxuICAgICAgKChuZXdOb2RlID0gbmV3IFZhbHVlTm9kZShvd25lcklELCBrZXlIYXNoLCBlbnRyeSkpLCBpZHgxIDwgaWR4MiA/IFtub2RlLCBuZXdOb2RlXSA6IFtuZXdOb2RlLCBub2RlXSk7XG5cbiAgICByZXR1cm4gbmV3IEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsICgxIDw8IGlkeDEpIHwgKDEgPDwgaWR4MiksIG5vZGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU5vZGVzKG93bmVySUQsIGVudHJpZXMsIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgIG93bmVySUQgPSBuZXcgT3duZXJJRCgpO1xuICAgIH1cbiAgICB2YXIgbm9kZSA9IG5ldyBWYWx1ZU5vZGUob3duZXJJRCwgaGFzaChrZXkpLCBba2V5LCB2YWx1ZV0pO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBlbnRyaWVzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpaV07XG4gICAgICBub2RlID0gbm9kZS51cGRhdGUob3duZXJJRCwgMCwgdW5kZWZpbmVkLCBlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhY2tOb2Rlcyhvd25lcklELCBub2RlcywgY291bnQsIGV4Y2x1ZGluZykge1xuICAgIHZhciBiaXRtYXAgPSAwO1xuICAgIHZhciBwYWNrZWRJSSA9IDA7XG4gICAgdmFyIHBhY2tlZE5vZGVzID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBmb3IgKHZhciBpaSA9IDAsIGJpdCA9IDEsIGxlbiA9IG5vZGVzLmxlbmd0aDsgaWkgPCBsZW47IGlpKyssIGJpdCA8PD0gMSkge1xuICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpaV07XG4gICAgICBpZiAobm9kZSAhPT0gdW5kZWZpbmVkICYmIGlpICE9PSBleGNsdWRpbmcpIHtcbiAgICAgICAgYml0bWFwIHw9IGJpdDtcbiAgICAgICAgcGFja2VkTm9kZXNbcGFja2VkSUkrK10gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsIGJpdG1hcCwgcGFja2VkTm9kZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwYW5kTm9kZXMob3duZXJJRCwgbm9kZXMsIGJpdG1hcCwgaW5jbHVkaW5nLCBub2RlKSB7XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgZXhwYW5kZWROb2RlcyA9IG5ldyBBcnJheShTSVpFKTtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGJpdG1hcCAhPT0gMDsgaWkrKywgYml0bWFwID4+Pj0gMSkge1xuICAgICAgZXhwYW5kZWROb2Rlc1tpaV0gPSBiaXRtYXAgJiAxID8gbm9kZXNbY291bnQrK10gOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGV4cGFuZGVkTm9kZXNbaW5jbHVkaW5nXSA9IG5vZGU7XG4gICAgcmV0dXJuIG5ldyBIYXNoQXJyYXlNYXBOb2RlKG93bmVySUQsIGNvdW50ICsgMSwgZXhwYW5kZWROb2Rlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZUludG9NYXBXaXRoKG1hcCwgbWVyZ2VyLCBpdGVyYWJsZXMpIHtcbiAgICB2YXIgaXRlcnMgPSBbXTtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaXRlcmFibGVzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVzW2lpXTtcbiAgICAgIHZhciBpdGVyID0gS2V5ZWRJdGVyYWJsZSh2YWx1ZSk7XG4gICAgICBpZiAoIWlzSXRlcmFibGUodmFsdWUpKSB7XG4gICAgICAgIGl0ZXIgPSBpdGVyLm1hcChmdW5jdGlvbih2ICkge3JldHVybiBmcm9tSlModil9KTtcbiAgICAgIH1cbiAgICAgIGl0ZXJzLnB1c2goaXRlcik7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZUludG9Db2xsZWN0aW9uV2l0aChtYXAsIG1lcmdlciwgaXRlcnMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVlcE1lcmdlcihtZXJnZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZXhpc3RpbmcsIHZhbHVlKSBcbiAgICAgIHtyZXR1cm4gZXhpc3RpbmcgJiYgZXhpc3RpbmcubWVyZ2VEZWVwV2l0aCAmJiBpc0l0ZXJhYmxlKHZhbHVlKSA/XG4gICAgICAgIGV4aXN0aW5nLm1lcmdlRGVlcFdpdGgobWVyZ2VyLCB2YWx1ZSkgOlxuICAgICAgICBtZXJnZXIgPyBtZXJnZXIoZXhpc3RpbmcsIHZhbHVlKSA6IHZhbHVlfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlSW50b0NvbGxlY3Rpb25XaXRoKGNvbGxlY3Rpb24sIG1lcmdlciwgaXRlcnMpIHtcbiAgICBpdGVycyA9IGl0ZXJzLmZpbHRlcihmdW5jdGlvbih4ICkge3JldHVybiB4LnNpemUgIT09IDB9KTtcbiAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgaWYgKGNvbGxlY3Rpb24uc2l6ZSA9PT0gMCAmJiBpdGVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uLmNvbnN0cnVjdG9yKGl0ZXJzWzBdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3Rpb24ud2l0aE11dGF0aW9ucyhmdW5jdGlvbihjb2xsZWN0aW9uICkge1xuICAgICAgdmFyIG1lcmdlSW50b01hcCA9IG1lcmdlciA/XG4gICAgICAgIGZ1bmN0aW9uKHZhbHVlLCBrZXkpICB7XG4gICAgICAgICAgY29sbGVjdGlvbi51cGRhdGUoa2V5LCBOT1RfU0VULCBmdW5jdGlvbihleGlzdGluZyApXG4gICAgICAgICAgICB7cmV0dXJuIGV4aXN0aW5nID09PSBOT1RfU0VUID8gdmFsdWUgOiBtZXJnZXIoZXhpc3RpbmcsIHZhbHVlKX1cbiAgICAgICAgICApO1xuICAgICAgICB9IDpcbiAgICAgICAgZnVuY3Rpb24odmFsdWUsIGtleSkgIHtcbiAgICAgICAgICBjb2xsZWN0aW9uLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGl0ZXJzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICBpdGVyc1tpaV0uZm9yRWFjaChtZXJnZUludG9NYXApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlSW5EZWVwTWFwKGV4aXN0aW5nLCBrZXlQYXRoSXRlciwgbm90U2V0VmFsdWUsIHVwZGF0ZXIpIHtcbiAgICB2YXIgaXNOb3RTZXQgPSBleGlzdGluZyA9PT0gTk9UX1NFVDtcbiAgICB2YXIgc3RlcCA9IGtleVBhdGhJdGVyLm5leHQoKTtcbiAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICB2YXIgZXhpc3RpbmdWYWx1ZSA9IGlzTm90U2V0ID8gbm90U2V0VmFsdWUgOiBleGlzdGluZztcbiAgICAgIHZhciBuZXdWYWx1ZSA9IHVwZGF0ZXIoZXhpc3RpbmdWYWx1ZSk7XG4gICAgICByZXR1cm4gbmV3VmFsdWUgPT09IGV4aXN0aW5nVmFsdWUgPyBleGlzdGluZyA6IG5ld1ZhbHVlO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBpc05vdFNldCB8fCAoZXhpc3RpbmcgJiYgZXhpc3Rpbmcuc2V0KSxcbiAgICAgICdpbnZhbGlkIGtleVBhdGgnXG4gICAgKTtcbiAgICB2YXIga2V5ID0gc3RlcC52YWx1ZTtcbiAgICB2YXIgbmV4dEV4aXN0aW5nID0gaXNOb3RTZXQgPyBOT1RfU0VUIDogZXhpc3RpbmcuZ2V0KGtleSwgTk9UX1NFVCk7XG4gICAgdmFyIG5leHRVcGRhdGVkID0gdXBkYXRlSW5EZWVwTWFwKFxuICAgICAgbmV4dEV4aXN0aW5nLFxuICAgICAga2V5UGF0aEl0ZXIsXG4gICAgICBub3RTZXRWYWx1ZSxcbiAgICAgIHVwZGF0ZXJcbiAgICApO1xuICAgIHJldHVybiBuZXh0VXBkYXRlZCA9PT0gbmV4dEV4aXN0aW5nID8gZXhpc3RpbmcgOlxuICAgICAgbmV4dFVwZGF0ZWQgPT09IE5PVF9TRVQgPyBleGlzdGluZy5yZW1vdmUoa2V5KSA6XG4gICAgICAoaXNOb3RTZXQgPyBlbXB0eU1hcCgpIDogZXhpc3RpbmcpLnNldChrZXksIG5leHRVcGRhdGVkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvcENvdW50KHgpIHtcbiAgICB4ID0geCAtICgoeCA+PiAxKSAmIDB4NTU1NTU1NTUpO1xuICAgIHggPSAoeCAmIDB4MzMzMzMzMzMpICsgKCh4ID4+IDIpICYgMHgzMzMzMzMzMyk7XG4gICAgeCA9ICh4ICsgKHggPj4gNCkpICYgMHgwZjBmMGYwZjtcbiAgICB4ID0geCArICh4ID4+IDgpO1xuICAgIHggPSB4ICsgKHggPj4gMTYpO1xuICAgIHJldHVybiB4ICYgMHg3ZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEluKGFycmF5LCBpZHgsIHZhbCwgY2FuRWRpdCkge1xuICAgIHZhciBuZXdBcnJheSA9IGNhbkVkaXQgPyBhcnJheSA6IGFyckNvcHkoYXJyYXkpO1xuICAgIG5ld0FycmF5W2lkeF0gPSB2YWw7XG4gICAgcmV0dXJuIG5ld0FycmF5O1xuICB9XG5cbiAgZnVuY3Rpb24gc3BsaWNlSW4oYXJyYXksIGlkeCwgdmFsLCBjYW5FZGl0KSB7XG4gICAgdmFyIG5ld0xlbiA9IGFycmF5Lmxlbmd0aCArIDE7XG4gICAgaWYgKGNhbkVkaXQgJiYgaWR4ICsgMSA9PT0gbmV3TGVuKSB7XG4gICAgICBhcnJheVtpZHhdID0gdmFsO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cbiAgICB2YXIgbmV3QXJyYXkgPSBuZXcgQXJyYXkobmV3TGVuKTtcbiAgICB2YXIgYWZ0ZXIgPSAwO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBuZXdMZW47IGlpKyspIHtcbiAgICAgIGlmIChpaSA9PT0gaWR4KSB7XG4gICAgICAgIG5ld0FycmF5W2lpXSA9IHZhbDtcbiAgICAgICAgYWZ0ZXIgPSAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0FycmF5W2lpXSA9IGFycmF5W2lpICsgYWZ0ZXJdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3QXJyYXk7XG4gIH1cblxuICBmdW5jdGlvbiBzcGxpY2VPdXQoYXJyYXksIGlkeCwgY2FuRWRpdCkge1xuICAgIHZhciBuZXdMZW4gPSBhcnJheS5sZW5ndGggLSAxO1xuICAgIGlmIChjYW5FZGl0ICYmIGlkeCA9PT0gbmV3TGVuKSB7XG4gICAgICBhcnJheS5wb3AoKTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG4gICAgdmFyIG5ld0FycmF5ID0gbmV3IEFycmF5KG5ld0xlbik7XG4gICAgdmFyIGFmdGVyID0gMDtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbmV3TGVuOyBpaSsrKSB7XG4gICAgICBpZiAoaWkgPT09IGlkeCkge1xuICAgICAgICBhZnRlciA9IDE7XG4gICAgICB9XG4gICAgICBuZXdBcnJheVtpaV0gPSBhcnJheVtpaSArIGFmdGVyXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0FycmF5O1xuICB9XG5cbiAgdmFyIE1BWF9BUlJBWV9NQVBfU0laRSA9IFNJWkUgLyA0O1xuICB2YXIgTUFYX0JJVE1BUF9JTkRFWEVEX1NJWkUgPSBTSVpFIC8gMjtcbiAgdmFyIE1JTl9IQVNIX0FSUkFZX01BUF9TSVpFID0gU0laRSAvIDQ7XG5cbiAgY3JlYXRlQ2xhc3MoTGlzdCwgSW5kZXhlZENvbGxlY3Rpb24pO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIExpc3QodmFsdWUpIHtcbiAgICAgIHZhciBlbXB0eSA9IGVtcHR5TGlzdCgpO1xuICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgICAgfVxuICAgICAgaWYgKGlzTGlzdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGl0ZXIgPSBJbmRleGVkSXRlcmFibGUodmFsdWUpO1xuICAgICAgdmFyIHNpemUgPSBpdGVyLnNpemU7XG4gICAgICBpZiAoc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgICB9XG4gICAgICBhc3NlcnROb3RJbmZpbml0ZShzaXplKTtcbiAgICAgIGlmIChzaXplID4gMCAmJiBzaXplIDwgU0laRSkge1xuICAgICAgICByZXR1cm4gbWFrZUxpc3QoMCwgc2l6ZSwgU0hJRlQsIG51bGwsIG5ldyBWTm9kZShpdGVyLnRvQXJyYXkoKSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVtcHR5LndpdGhNdXRhdGlvbnMoZnVuY3Rpb24obGlzdCApIHtcbiAgICAgICAgbGlzdC5zZXRTaXplKHNpemUpO1xuICAgICAgICBpdGVyLmZvckVhY2goZnVuY3Rpb24odiwgaSkgIHtyZXR1cm4gbGlzdC5zZXQoaSwgdil9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIExpc3Qub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnTGlzdCBbJywgJ10nKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBBY2Nlc3NcblxuICAgIExpc3QucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLnNpemUpIHtcbiAgICAgICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuICAgICAgfVxuICAgICAgaW5kZXggKz0gdGhpcy5fb3JpZ2luO1xuICAgICAgdmFyIG5vZGUgPSBsaXN0Tm9kZUZvcih0aGlzLCBpbmRleCk7XG4gICAgICByZXR1cm4gbm9kZSAmJiBub2RlLmFycmF5W2luZGV4ICYgTUFTS107XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgICBMaXN0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB1cGRhdGVMaXN0KHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICByZXR1cm4gIXRoaXMuaGFzKGluZGV4KSA/IHRoaXMgOlxuICAgICAgICBpbmRleCA9PT0gMCA/IHRoaXMuc2hpZnQoKSA6XG4gICAgICAgIGluZGV4ID09PSB0aGlzLnNpemUgLSAxID8gdGhpcy5wb3AoKSA6XG4gICAgICAgIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gdGhpcy5fb3JpZ2luID0gdGhpcy5fY2FwYWNpdHkgPSAwO1xuICAgICAgICB0aGlzLl9sZXZlbCA9IFNISUZUO1xuICAgICAgICB0aGlzLl9yb290ID0gdGhpcy5fdGFpbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVtcHR5TGlzdCgpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oLyouLi52YWx1ZXMqLykge1xuICAgICAgdmFyIHZhbHVlcyA9IGFyZ3VtZW50cztcbiAgICAgIHZhciBvbGRTaXplID0gdGhpcy5zaXplO1xuICAgICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbihsaXN0ICkge1xuICAgICAgICBzZXRMaXN0Qm91bmRzKGxpc3QsIDAsIG9sZFNpemUgKyB2YWx1ZXMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHZhbHVlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgICBsaXN0LnNldChvbGRTaXplICsgaWksIHZhbHVlc1tpaV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc2V0TGlzdEJvdW5kcyh0aGlzLCAwLCAtMSk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICB2YXIgdmFsdWVzID0gYXJndW1lbnRzO1xuICAgICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbihsaXN0ICkge1xuICAgICAgICBzZXRMaXN0Qm91bmRzKGxpc3QsIC12YWx1ZXMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHZhbHVlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgICBsaXN0LnNldChpaSwgdmFsdWVzW2lpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNldExpc3RCb3VuZHModGhpcywgMSk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQ29tcG9zaXRpb25cblxuICAgIExpc3QucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24oLyouLi5pdGVycyovKSB7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTGlzdFdpdGgodGhpcywgdW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5tZXJnZVdpdGggPSBmdW5jdGlvbihtZXJnZXIpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHJldHVybiBtZXJnZUludG9MaXN0V2l0aCh0aGlzLCBtZXJnZXIsIGl0ZXJzKTtcbiAgICB9O1xuXG4gICAgTGlzdC5wcm90b3R5cGUubWVyZ2VEZWVwID0gZnVuY3Rpb24oLyouLi5pdGVycyovKSB7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTGlzdFdpdGgodGhpcywgZGVlcE1lcmdlcih1bmRlZmluZWQpLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5tZXJnZURlZXBXaXRoID0gZnVuY3Rpb24obWVyZ2VyKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICByZXR1cm4gbWVyZ2VJbnRvTGlzdFdpdGgodGhpcywgZGVlcE1lcmdlcihtZXJnZXIpLCBpdGVycyk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLnNldFNpemUgPSBmdW5jdGlvbihzaXplKSB7XG4gICAgICByZXR1cm4gc2V0TGlzdEJvdW5kcyh0aGlzLCAwLCBzaXplKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBJdGVyYXRpb25cblxuICAgIExpc3QucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIHNpemUgPSB0aGlzLnNpemU7XG4gICAgICBpZiAod2hvbGVTbGljZShiZWdpbiwgZW5kLCBzaXplKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXRMaXN0Qm91bmRzKFxuICAgICAgICB0aGlzLFxuICAgICAgICByZXNvbHZlQmVnaW4oYmVnaW4sIHNpemUpLFxuICAgICAgICByZXNvbHZlRW5kKGVuZCwgc2l6ZSlcbiAgICAgICk7XG4gICAgfTtcblxuICAgIExpc3QucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHZhbHVlcyA9IGl0ZXJhdGVMaXN0KHRoaXMsIHJldmVyc2UpO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpICB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlcygpO1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IERPTkUgP1xuICAgICAgICAgIGl0ZXJhdG9yRG9uZSgpIDpcbiAgICAgICAgICBpdGVyYXRvclZhbHVlKHR5cGUsIGluZGV4KyssIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZXMgPSBpdGVyYXRlTGlzdCh0aGlzLCByZXZlcnNlKTtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlICgodmFsdWUgPSB2YWx1ZXMoKSkgIT09IERPTkUpIHtcbiAgICAgICAgaWYgKGZuKHZhbHVlLCBpbmRleCsrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH07XG5cbiAgICBMaXN0LnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24ob3duZXJJRCkge1xuICAgICAgaWYgKG93bmVySUQgPT09IHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKCFvd25lcklEKSB7XG4gICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZUxpc3QodGhpcy5fb3JpZ2luLCB0aGlzLl9jYXBhY2l0eSwgdGhpcy5fbGV2ZWwsIHRoaXMuX3Jvb3QsIHRoaXMuX3RhaWwsIG93bmVySUQsIHRoaXMuX19oYXNoKTtcbiAgICB9O1xuXG5cbiAgZnVuY3Rpb24gaXNMaXN0KG1heWJlTGlzdCkge1xuICAgIHJldHVybiAhIShtYXliZUxpc3QgJiYgbWF5YmVMaXN0W0lTX0xJU1RfU0VOVElORUxdKTtcbiAgfVxuXG4gIExpc3QuaXNMaXN0ID0gaXNMaXN0O1xuXG4gIHZhciBJU19MSVNUX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfTElTVF9fQEAnO1xuXG4gIHZhciBMaXN0UHJvdG90eXBlID0gTGlzdC5wcm90b3R5cGU7XG4gIExpc3RQcm90b3R5cGVbSVNfTElTVF9TRU5USU5FTF0gPSB0cnVlO1xuICBMaXN0UHJvdG90eXBlW0RFTEVURV0gPSBMaXN0UHJvdG90eXBlLnJlbW92ZTtcbiAgTGlzdFByb3RvdHlwZS5zZXRJbiA9IE1hcFByb3RvdHlwZS5zZXRJbjtcbiAgTGlzdFByb3RvdHlwZS5kZWxldGVJbiA9XG4gIExpc3RQcm90b3R5cGUucmVtb3ZlSW4gPSBNYXBQcm90b3R5cGUucmVtb3ZlSW47XG4gIExpc3RQcm90b3R5cGUudXBkYXRlID0gTWFwUHJvdG90eXBlLnVwZGF0ZTtcbiAgTGlzdFByb3RvdHlwZS51cGRhdGVJbiA9IE1hcFByb3RvdHlwZS51cGRhdGVJbjtcbiAgTGlzdFByb3RvdHlwZS5tZXJnZUluID0gTWFwUHJvdG90eXBlLm1lcmdlSW47XG4gIExpc3RQcm90b3R5cGUubWVyZ2VEZWVwSW4gPSBNYXBQcm90b3R5cGUubWVyZ2VEZWVwSW47XG4gIExpc3RQcm90b3R5cGUud2l0aE11dGF0aW9ucyA9IE1hcFByb3RvdHlwZS53aXRoTXV0YXRpb25zO1xuICBMaXN0UHJvdG90eXBlLmFzTXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc011dGFibGU7XG4gIExpc3RQcm90b3R5cGUuYXNJbW11dGFibGUgPSBNYXBQcm90b3R5cGUuYXNJbW11dGFibGU7XG4gIExpc3RQcm90b3R5cGUud2FzQWx0ZXJlZCA9IE1hcFByb3RvdHlwZS53YXNBbHRlcmVkO1xuXG5cblxuICAgIGZ1bmN0aW9uIFZOb2RlKGFycmF5LCBvd25lcklEKSB7XG4gICAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG4gICAgICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuICAgIH1cblxuICAgIC8vIFRPRE86IHNlZW1zIGxpa2UgdGhlc2UgbWV0aG9kcyBhcmUgdmVyeSBzaW1pbGFyXG5cbiAgICBWTm9kZS5wcm90b3R5cGUucmVtb3ZlQmVmb3JlID0gZnVuY3Rpb24ob3duZXJJRCwgbGV2ZWwsIGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXggPT09IGxldmVsID8gMSA8PCBsZXZlbCA6IDAgfHwgdGhpcy5hcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgb3JpZ2luSW5kZXggPSAoaW5kZXggPj4+IGxldmVsKSAmIE1BU0s7XG4gICAgICBpZiAob3JpZ2luSW5kZXggPj0gdGhpcy5hcnJheS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWTm9kZShbXSwgb3duZXJJRCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVtb3ZpbmdGaXJzdCA9IG9yaWdpbkluZGV4ID09PSAwO1xuICAgICAgdmFyIG5ld0NoaWxkO1xuICAgICAgaWYgKGxldmVsID4gMCkge1xuICAgICAgICB2YXIgb2xkQ2hpbGQgPSB0aGlzLmFycmF5W29yaWdpbkluZGV4XTtcbiAgICAgICAgbmV3Q2hpbGQgPSBvbGRDaGlsZCAmJiBvbGRDaGlsZC5yZW1vdmVCZWZvcmUob3duZXJJRCwgbGV2ZWwgLSBTSElGVCwgaW5kZXgpO1xuICAgICAgICBpZiAobmV3Q2hpbGQgPT09IG9sZENoaWxkICYmIHJlbW92aW5nRmlyc3QpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHJlbW92aW5nRmlyc3QgJiYgIW5ld0NoaWxkKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIGVkaXRhYmxlID0gZWRpdGFibGVWTm9kZSh0aGlzLCBvd25lcklEKTtcbiAgICAgIGlmICghcmVtb3ZpbmdGaXJzdCkge1xuICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgb3JpZ2luSW5kZXg7IGlpKyspIHtcbiAgICAgICAgICBlZGl0YWJsZS5hcnJheVtpaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChuZXdDaGlsZCkge1xuICAgICAgICBlZGl0YWJsZS5hcnJheVtvcmlnaW5JbmRleF0gPSBuZXdDaGlsZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlZGl0YWJsZTtcbiAgICB9O1xuXG4gICAgVk5vZGUucHJvdG90eXBlLnJlbW92ZUFmdGVyID0gZnVuY3Rpb24ob3duZXJJRCwgbGV2ZWwsIGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXggPT09IGxldmVsID8gMSA8PCBsZXZlbCA6IDAgfHwgdGhpcy5hcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgc2l6ZUluZGV4ID0gKChpbmRleCAtIDEpID4+PiBsZXZlbCkgJiBNQVNLO1xuICAgICAgaWYgKHNpemVJbmRleCA+PSB0aGlzLmFycmF5Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciByZW1vdmluZ0xhc3QgPSBzaXplSW5kZXggPT09IHRoaXMuYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBuZXdDaGlsZDtcbiAgICAgIGlmIChsZXZlbCA+IDApIHtcbiAgICAgICAgdmFyIG9sZENoaWxkID0gdGhpcy5hcnJheVtzaXplSW5kZXhdO1xuICAgICAgICBuZXdDaGlsZCA9IG9sZENoaWxkICYmIG9sZENoaWxkLnJlbW92ZUFmdGVyKG93bmVySUQsIGxldmVsIC0gU0hJRlQsIGluZGV4KTtcbiAgICAgICAgaWYgKG5ld0NoaWxkID09PSBvbGRDaGlsZCAmJiByZW1vdmluZ0xhc3QpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHJlbW92aW5nTGFzdCAmJiAhbmV3Q2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgZWRpdGFibGUgPSBlZGl0YWJsZVZOb2RlKHRoaXMsIG93bmVySUQpO1xuICAgICAgaWYgKCFyZW1vdmluZ0xhc3QpIHtcbiAgICAgICAgZWRpdGFibGUuYXJyYXkucG9wKCk7XG4gICAgICB9XG4gICAgICBpZiAobmV3Q2hpbGQpIHtcbiAgICAgICAgZWRpdGFibGUuYXJyYXlbc2l6ZUluZGV4XSA9IG5ld0NoaWxkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVkaXRhYmxlO1xuICAgIH07XG5cblxuXG4gIHZhciBET05FID0ge307XG5cbiAgZnVuY3Rpb24gaXRlcmF0ZUxpc3QobGlzdCwgcmV2ZXJzZSkge1xuICAgIHZhciBsZWZ0ID0gbGlzdC5fb3JpZ2luO1xuICAgIHZhciByaWdodCA9IGxpc3QuX2NhcGFjaXR5O1xuICAgIHZhciB0YWlsUG9zID0gZ2V0VGFpbE9mZnNldChyaWdodCk7XG4gICAgdmFyIHRhaWwgPSBsaXN0Ll90YWlsO1xuXG4gICAgcmV0dXJuIGl0ZXJhdGVOb2RlT3JMZWFmKGxpc3QuX3Jvb3QsIGxpc3QuX2xldmVsLCAwKTtcblxuICAgIGZ1bmN0aW9uIGl0ZXJhdGVOb2RlT3JMZWFmKG5vZGUsIGxldmVsLCBvZmZzZXQpIHtcbiAgICAgIHJldHVybiBsZXZlbCA9PT0gMCA/XG4gICAgICAgIGl0ZXJhdGVMZWFmKG5vZGUsIG9mZnNldCkgOlxuICAgICAgICBpdGVyYXRlTm9kZShub2RlLCBsZXZlbCwgb2Zmc2V0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpdGVyYXRlTGVhZihub2RlLCBvZmZzZXQpIHtcbiAgICAgIHZhciBhcnJheSA9IG9mZnNldCA9PT0gdGFpbFBvcyA/IHRhaWwgJiYgdGFpbC5hcnJheSA6IG5vZGUgJiYgbm9kZS5hcnJheTtcbiAgICAgIHZhciBmcm9tID0gb2Zmc2V0ID4gbGVmdCA/IDAgOiBsZWZ0IC0gb2Zmc2V0O1xuICAgICAgdmFyIHRvID0gcmlnaHQgLSBvZmZzZXQ7XG4gICAgICBpZiAodG8gPiBTSVpFKSB7XG4gICAgICAgIHRvID0gU0laRTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpICB7XG4gICAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICAgIHJldHVybiBET05FO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpZHggPSByZXZlcnNlID8gLS10byA6IGZyb20rKztcbiAgICAgICAgcmV0dXJuIGFycmF5ICYmIGFycmF5W2lkeF07XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGl0ZXJhdGVOb2RlKG5vZGUsIGxldmVsLCBvZmZzZXQpIHtcbiAgICAgIHZhciB2YWx1ZXM7XG4gICAgICB2YXIgYXJyYXkgPSBub2RlICYmIG5vZGUuYXJyYXk7XG4gICAgICB2YXIgZnJvbSA9IG9mZnNldCA+IGxlZnQgPyAwIDogKGxlZnQgLSBvZmZzZXQpID4+IGxldmVsO1xuICAgICAgdmFyIHRvID0gKChyaWdodCAtIG9mZnNldCkgPj4gbGV2ZWwpICsgMTtcbiAgICAgIGlmICh0byA+IFNJWkUpIHtcbiAgICAgICAgdG8gPSBTSVpFO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlcygpO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBET05FKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlcyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICAgICAgcmV0dXJuIERPTkU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpZHggPSByZXZlcnNlID8gLS10byA6IGZyb20rKztcbiAgICAgICAgICB2YWx1ZXMgPSBpdGVyYXRlTm9kZU9yTGVhZihcbiAgICAgICAgICAgIGFycmF5ICYmIGFycmF5W2lkeF0sIGxldmVsIC0gU0hJRlQsIG9mZnNldCArIChpZHggPDwgbGV2ZWwpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VMaXN0KG9yaWdpbiwgY2FwYWNpdHksIGxldmVsLCByb290LCB0YWlsLCBvd25lcklELCBoYXNoKSB7XG4gICAgdmFyIGxpc3QgPSBPYmplY3QuY3JlYXRlKExpc3RQcm90b3R5cGUpO1xuICAgIGxpc3Quc2l6ZSA9IGNhcGFjaXR5IC0gb3JpZ2luO1xuICAgIGxpc3QuX29yaWdpbiA9IG9yaWdpbjtcbiAgICBsaXN0Ll9jYXBhY2l0eSA9IGNhcGFjaXR5O1xuICAgIGxpc3QuX2xldmVsID0gbGV2ZWw7XG4gICAgbGlzdC5fcm9vdCA9IHJvb3Q7XG4gICAgbGlzdC5fdGFpbCA9IHRhaWw7XG4gICAgbGlzdC5fX293bmVySUQgPSBvd25lcklEO1xuICAgIGxpc3QuX19oYXNoID0gaGFzaDtcbiAgICBsaXN0Ll9fYWx0ZXJlZCA9IGZhbHNlO1xuICAgIHJldHVybiBsaXN0O1xuICB9XG5cbiAgdmFyIEVNUFRZX0xJU1Q7XG4gIGZ1bmN0aW9uIGVtcHR5TGlzdCgpIHtcbiAgICByZXR1cm4gRU1QVFlfTElTVCB8fCAoRU1QVFlfTElTVCA9IG1ha2VMaXN0KDAsIDAsIFNISUZUKSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVMaXN0KGxpc3QsIGluZGV4LCB2YWx1ZSkge1xuICAgIGluZGV4ID0gd3JhcEluZGV4KGxpc3QsIGluZGV4KTtcblxuICAgIGlmIChpbmRleCA+PSBsaXN0LnNpemUgfHwgaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm4gbGlzdC53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKGxpc3QgKSB7XG4gICAgICAgIGluZGV4IDwgMCA/XG4gICAgICAgICAgc2V0TGlzdEJvdW5kcyhsaXN0LCBpbmRleCkuc2V0KDAsIHZhbHVlKSA6XG4gICAgICAgICAgc2V0TGlzdEJvdW5kcyhsaXN0LCAwLCBpbmRleCArIDEpLnNldChpbmRleCwgdmFsdWUpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpbmRleCArPSBsaXN0Ll9vcmlnaW47XG5cbiAgICB2YXIgbmV3VGFpbCA9IGxpc3QuX3RhaWw7XG4gICAgdmFyIG5ld1Jvb3QgPSBsaXN0Ll9yb290O1xuICAgIHZhciBkaWRBbHRlciA9IE1ha2VSZWYoRElEX0FMVEVSKTtcbiAgICBpZiAoaW5kZXggPj0gZ2V0VGFpbE9mZnNldChsaXN0Ll9jYXBhY2l0eSkpIHtcbiAgICAgIG5ld1RhaWwgPSB1cGRhdGVWTm9kZShuZXdUYWlsLCBsaXN0Ll9fb3duZXJJRCwgMCwgaW5kZXgsIHZhbHVlLCBkaWRBbHRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1Jvb3QgPSB1cGRhdGVWTm9kZShuZXdSb290LCBsaXN0Ll9fb3duZXJJRCwgbGlzdC5fbGV2ZWwsIGluZGV4LCB2YWx1ZSwgZGlkQWx0ZXIpO1xuICAgIH1cblxuICAgIGlmICghZGlkQWx0ZXIudmFsdWUpIHtcbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cblxuICAgIGlmIChsaXN0Ll9fb3duZXJJRCkge1xuICAgICAgbGlzdC5fcm9vdCA9IG5ld1Jvb3Q7XG4gICAgICBsaXN0Ll90YWlsID0gbmV3VGFpbDtcbiAgICAgIGxpc3QuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgbGlzdC5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuICAgIHJldHVybiBtYWtlTGlzdChsaXN0Ll9vcmlnaW4sIGxpc3QuX2NhcGFjaXR5LCBsaXN0Ll9sZXZlbCwgbmV3Um9vdCwgbmV3VGFpbCk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVWTm9kZShub2RlLCBvd25lcklELCBsZXZlbCwgaW5kZXgsIHZhbHVlLCBkaWRBbHRlcikge1xuICAgIHZhciBpZHggPSAoaW5kZXggPj4+IGxldmVsKSAmIE1BU0s7XG4gICAgdmFyIG5vZGVIYXMgPSBub2RlICYmIGlkeCA8IG5vZGUuYXJyYXkubGVuZ3RoO1xuICAgIGlmICghbm9kZUhhcyAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICB2YXIgbmV3Tm9kZTtcblxuICAgIGlmIChsZXZlbCA+IDApIHtcbiAgICAgIHZhciBsb3dlck5vZGUgPSBub2RlICYmIG5vZGUuYXJyYXlbaWR4XTtcbiAgICAgIHZhciBuZXdMb3dlck5vZGUgPSB1cGRhdGVWTm9kZShsb3dlck5vZGUsIG93bmVySUQsIGxldmVsIC0gU0hJRlQsIGluZGV4LCB2YWx1ZSwgZGlkQWx0ZXIpO1xuICAgICAgaWYgKG5ld0xvd2VyTm9kZSA9PT0gbG93ZXJOb2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgICAgbmV3Tm9kZSA9IGVkaXRhYmxlVk5vZGUobm9kZSwgb3duZXJJRCk7XG4gICAgICBuZXdOb2RlLmFycmF5W2lkeF0gPSBuZXdMb3dlck5vZGU7XG4gICAgICByZXR1cm4gbmV3Tm9kZTtcbiAgICB9XG5cbiAgICBpZiAobm9kZUhhcyAmJiBub2RlLmFycmF5W2lkeF0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuXG4gICAgbmV3Tm9kZSA9IGVkaXRhYmxlVk5vZGUobm9kZSwgb3duZXJJRCk7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgaWR4ID09PSBuZXdOb2RlLmFycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICAgIG5ld05vZGUuYXJyYXkucG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld05vZGUuYXJyYXlbaWR4XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbmV3Tm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVkaXRhYmxlVk5vZGUobm9kZSwgb3duZXJJRCkge1xuICAgIGlmIChvd25lcklEICYmIG5vZGUgJiYgb3duZXJJRCA9PT0gbm9kZS5vd25lcklEKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlID8gbm9kZS5hcnJheS5zbGljZSgpIDogW10sIG93bmVySUQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdE5vZGVGb3IobGlzdCwgcmF3SW5kZXgpIHtcbiAgICBpZiAocmF3SW5kZXggPj0gZ2V0VGFpbE9mZnNldChsaXN0Ll9jYXBhY2l0eSkpIHtcbiAgICAgIHJldHVybiBsaXN0Ll90YWlsO1xuICAgIH1cbiAgICBpZiAocmF3SW5kZXggPCAxIDw8IChsaXN0Ll9sZXZlbCArIFNISUZUKSkge1xuICAgICAgdmFyIG5vZGUgPSBsaXN0Ll9yb290O1xuICAgICAgdmFyIGxldmVsID0gbGlzdC5fbGV2ZWw7XG4gICAgICB3aGlsZSAobm9kZSAmJiBsZXZlbCA+IDApIHtcbiAgICAgICAgbm9kZSA9IG5vZGUuYXJyYXlbKHJhd0luZGV4ID4+PiBsZXZlbCkgJiBNQVNLXTtcbiAgICAgICAgbGV2ZWwgLT0gU0hJRlQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRMaXN0Qm91bmRzKGxpc3QsIGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgb3duZXIgPSBsaXN0Ll9fb3duZXJJRCB8fCBuZXcgT3duZXJJRCgpO1xuICAgIHZhciBvbGRPcmlnaW4gPSBsaXN0Ll9vcmlnaW47XG4gICAgdmFyIG9sZENhcGFjaXR5ID0gbGlzdC5fY2FwYWNpdHk7XG4gICAgdmFyIG5ld09yaWdpbiA9IG9sZE9yaWdpbiArIGJlZ2luO1xuICAgIHZhciBuZXdDYXBhY2l0eSA9IGVuZCA9PT0gdW5kZWZpbmVkID8gb2xkQ2FwYWNpdHkgOiBlbmQgPCAwID8gb2xkQ2FwYWNpdHkgKyBlbmQgOiBvbGRPcmlnaW4gKyBlbmQ7XG4gICAgaWYgKG5ld09yaWdpbiA9PT0gb2xkT3JpZ2luICYmIG5ld0NhcGFjaXR5ID09PSBvbGRDYXBhY2l0eSkge1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgLy8gSWYgaXQncyBnb2luZyB0byBlbmQgYWZ0ZXIgaXQgc3RhcnRzLCBpdCdzIGVtcHR5LlxuICAgIGlmIChuZXdPcmlnaW4gPj0gbmV3Q2FwYWNpdHkpIHtcbiAgICAgIHJldHVybiBsaXN0LmNsZWFyKCk7XG4gICAgfVxuXG4gICAgdmFyIG5ld0xldmVsID0gbGlzdC5fbGV2ZWw7XG4gICAgdmFyIG5ld1Jvb3QgPSBsaXN0Ll9yb290O1xuXG4gICAgLy8gTmV3IG9yaWdpbiBtaWdodCByZXF1aXJlIGNyZWF0aW5nIGEgaGlnaGVyIHJvb3QuXG4gICAgdmFyIG9mZnNldFNoaWZ0ID0gMDtcbiAgICB3aGlsZSAobmV3T3JpZ2luICsgb2Zmc2V0U2hpZnQgPCAwKSB7XG4gICAgICBuZXdSb290ID0gbmV3IFZOb2RlKG5ld1Jvb3QgJiYgbmV3Um9vdC5hcnJheS5sZW5ndGggPyBbdW5kZWZpbmVkLCBuZXdSb290XSA6IFtdLCBvd25lcik7XG4gICAgICBuZXdMZXZlbCArPSBTSElGVDtcbiAgICAgIG9mZnNldFNoaWZ0ICs9IDEgPDwgbmV3TGV2ZWw7XG4gICAgfVxuICAgIGlmIChvZmZzZXRTaGlmdCkge1xuICAgICAgbmV3T3JpZ2luICs9IG9mZnNldFNoaWZ0O1xuICAgICAgb2xkT3JpZ2luICs9IG9mZnNldFNoaWZ0O1xuICAgICAgbmV3Q2FwYWNpdHkgKz0gb2Zmc2V0U2hpZnQ7XG4gICAgICBvbGRDYXBhY2l0eSArPSBvZmZzZXRTaGlmdDtcbiAgICB9XG5cbiAgICB2YXIgb2xkVGFpbE9mZnNldCA9IGdldFRhaWxPZmZzZXQob2xkQ2FwYWNpdHkpO1xuICAgIHZhciBuZXdUYWlsT2Zmc2V0ID0gZ2V0VGFpbE9mZnNldChuZXdDYXBhY2l0eSk7XG5cbiAgICAvLyBOZXcgc2l6ZSBtaWdodCByZXF1aXJlIGNyZWF0aW5nIGEgaGlnaGVyIHJvb3QuXG4gICAgd2hpbGUgKG5ld1RhaWxPZmZzZXQgPj0gMSA8PCAobmV3TGV2ZWwgKyBTSElGVCkpIHtcbiAgICAgIG5ld1Jvb3QgPSBuZXcgVk5vZGUobmV3Um9vdCAmJiBuZXdSb290LmFycmF5Lmxlbmd0aCA/IFtuZXdSb290XSA6IFtdLCBvd25lcik7XG4gICAgICBuZXdMZXZlbCArPSBTSElGVDtcbiAgICB9XG5cbiAgICAvLyBMb2NhdGUgb3IgY3JlYXRlIHRoZSBuZXcgdGFpbC5cbiAgICB2YXIgb2xkVGFpbCA9IGxpc3QuX3RhaWw7XG4gICAgdmFyIG5ld1RhaWwgPSBuZXdUYWlsT2Zmc2V0IDwgb2xkVGFpbE9mZnNldCA/XG4gICAgICBsaXN0Tm9kZUZvcihsaXN0LCBuZXdDYXBhY2l0eSAtIDEpIDpcbiAgICAgIG5ld1RhaWxPZmZzZXQgPiBvbGRUYWlsT2Zmc2V0ID8gbmV3IFZOb2RlKFtdLCBvd25lcikgOiBvbGRUYWlsO1xuXG4gICAgLy8gTWVyZ2UgVGFpbCBpbnRvIHRyZWUuXG4gICAgaWYgKG9sZFRhaWwgJiYgbmV3VGFpbE9mZnNldCA+IG9sZFRhaWxPZmZzZXQgJiYgbmV3T3JpZ2luIDwgb2xkQ2FwYWNpdHkgJiYgb2xkVGFpbC5hcnJheS5sZW5ndGgpIHtcbiAgICAgIG5ld1Jvb3QgPSBlZGl0YWJsZVZOb2RlKG5ld1Jvb3QsIG93bmVyKTtcbiAgICAgIHZhciBub2RlID0gbmV3Um9vdDtcbiAgICAgIGZvciAodmFyIGxldmVsID0gbmV3TGV2ZWw7IGxldmVsID4gU0hJRlQ7IGxldmVsIC09IFNISUZUKSB7XG4gICAgICAgIHZhciBpZHggPSAob2xkVGFpbE9mZnNldCA+Pj4gbGV2ZWwpICYgTUFTSztcbiAgICAgICAgbm9kZSA9IG5vZGUuYXJyYXlbaWR4XSA9IGVkaXRhYmxlVk5vZGUobm9kZS5hcnJheVtpZHhdLCBvd25lcik7XG4gICAgICB9XG4gICAgICBub2RlLmFycmF5WyhvbGRUYWlsT2Zmc2V0ID4+PiBTSElGVCkgJiBNQVNLXSA9IG9sZFRhaWw7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHNpemUgaGFzIGJlZW4gcmVkdWNlZCwgdGhlcmUncyBhIGNoYW5jZSB0aGUgdGFpbCBuZWVkcyB0byBiZSB0cmltbWVkLlxuICAgIGlmIChuZXdDYXBhY2l0eSA8IG9sZENhcGFjaXR5KSB7XG4gICAgICBuZXdUYWlsID0gbmV3VGFpbCAmJiBuZXdUYWlsLnJlbW92ZUFmdGVyKG93bmVyLCAwLCBuZXdDYXBhY2l0eSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIG5ldyBvcmlnaW4gaXMgd2l0aGluIHRoZSB0YWlsLCB0aGVuIHdlIGRvIG5vdCBuZWVkIGEgcm9vdC5cbiAgICBpZiAobmV3T3JpZ2luID49IG5ld1RhaWxPZmZzZXQpIHtcbiAgICAgIG5ld09yaWdpbiAtPSBuZXdUYWlsT2Zmc2V0O1xuICAgICAgbmV3Q2FwYWNpdHkgLT0gbmV3VGFpbE9mZnNldDtcbiAgICAgIG5ld0xldmVsID0gU0hJRlQ7XG4gICAgICBuZXdSb290ID0gbnVsbDtcbiAgICAgIG5ld1RhaWwgPSBuZXdUYWlsICYmIG5ld1RhaWwucmVtb3ZlQmVmb3JlKG93bmVyLCAwLCBuZXdPcmlnaW4pO1xuXG4gICAgLy8gT3RoZXJ3aXNlLCBpZiB0aGUgcm9vdCBoYXMgYmVlbiB0cmltbWVkLCBnYXJiYWdlIGNvbGxlY3QuXG4gICAgfSBlbHNlIGlmIChuZXdPcmlnaW4gPiBvbGRPcmlnaW4gfHwgbmV3VGFpbE9mZnNldCA8IG9sZFRhaWxPZmZzZXQpIHtcbiAgICAgIG9mZnNldFNoaWZ0ID0gMDtcblxuICAgICAgLy8gSWRlbnRpZnkgdGhlIG5ldyB0b3Agcm9vdCBub2RlIG9mIHRoZSBzdWJ0cmVlIG9mIHRoZSBvbGQgcm9vdC5cbiAgICAgIHdoaWxlIChuZXdSb290KSB7XG4gICAgICAgIHZhciBiZWdpbkluZGV4ID0gKG5ld09yaWdpbiA+Pj4gbmV3TGV2ZWwpICYgTUFTSztcbiAgICAgICAgaWYgKGJlZ2luSW5kZXggIT09IChuZXdUYWlsT2Zmc2V0ID4+PiBuZXdMZXZlbCkgJiBNQVNLKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJlZ2luSW5kZXgpIHtcbiAgICAgICAgICBvZmZzZXRTaGlmdCArPSAoMSA8PCBuZXdMZXZlbCkgKiBiZWdpbkluZGV4O1xuICAgICAgICB9XG4gICAgICAgIG5ld0xldmVsIC09IFNISUZUO1xuICAgICAgICBuZXdSb290ID0gbmV3Um9vdC5hcnJheVtiZWdpbkluZGV4XTtcbiAgICAgIH1cblxuICAgICAgLy8gVHJpbSB0aGUgbmV3IHNpZGVzIG9mIHRoZSBuZXcgcm9vdC5cbiAgICAgIGlmIChuZXdSb290ICYmIG5ld09yaWdpbiA+IG9sZE9yaWdpbikge1xuICAgICAgICBuZXdSb290ID0gbmV3Um9vdC5yZW1vdmVCZWZvcmUob3duZXIsIG5ld0xldmVsLCBuZXdPcmlnaW4gLSBvZmZzZXRTaGlmdCk7XG4gICAgICB9XG4gICAgICBpZiAobmV3Um9vdCAmJiBuZXdUYWlsT2Zmc2V0IDwgb2xkVGFpbE9mZnNldCkge1xuICAgICAgICBuZXdSb290ID0gbmV3Um9vdC5yZW1vdmVBZnRlcihvd25lciwgbmV3TGV2ZWwsIG5ld1RhaWxPZmZzZXQgLSBvZmZzZXRTaGlmdCk7XG4gICAgICB9XG4gICAgICBpZiAob2Zmc2V0U2hpZnQpIHtcbiAgICAgICAgbmV3T3JpZ2luIC09IG9mZnNldFNoaWZ0O1xuICAgICAgICBuZXdDYXBhY2l0eSAtPSBvZmZzZXRTaGlmdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobGlzdC5fX293bmVySUQpIHtcbiAgICAgIGxpc3Quc2l6ZSA9IG5ld0NhcGFjaXR5IC0gbmV3T3JpZ2luO1xuICAgICAgbGlzdC5fb3JpZ2luID0gbmV3T3JpZ2luO1xuICAgICAgbGlzdC5fY2FwYWNpdHkgPSBuZXdDYXBhY2l0eTtcbiAgICAgIGxpc3QuX2xldmVsID0gbmV3TGV2ZWw7XG4gICAgICBsaXN0Ll9yb290ID0gbmV3Um9vdDtcbiAgICAgIGxpc3QuX3RhaWwgPSBuZXdUYWlsO1xuICAgICAgbGlzdC5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICBsaXN0Ll9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG4gICAgcmV0dXJuIG1ha2VMaXN0KG5ld09yaWdpbiwgbmV3Q2FwYWNpdHksIG5ld0xldmVsLCBuZXdSb290LCBuZXdUYWlsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlSW50b0xpc3RXaXRoKGxpc3QsIG1lcmdlciwgaXRlcmFibGVzKSB7XG4gICAgdmFyIGl0ZXJzID0gW107XG4gICAgdmFyIG1heFNpemUgPSAwO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBpdGVyYWJsZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpdGVyYWJsZXNbaWldO1xuICAgICAgdmFyIGl0ZXIgPSBJbmRleGVkSXRlcmFibGUodmFsdWUpO1xuICAgICAgaWYgKGl0ZXIuc2l6ZSA+IG1heFNpemUpIHtcbiAgICAgICAgbWF4U2l6ZSA9IGl0ZXIuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNJdGVyYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgaXRlciA9IGl0ZXIubWFwKGZ1bmN0aW9uKHYgKSB7cmV0dXJuIGZyb21KUyh2KX0pO1xuICAgICAgfVxuICAgICAgaXRlcnMucHVzaChpdGVyKTtcbiAgICB9XG4gICAgaWYgKG1heFNpemUgPiBsaXN0LnNpemUpIHtcbiAgICAgIGxpc3QgPSBsaXN0LnNldFNpemUobWF4U2l6ZSk7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZUludG9Db2xsZWN0aW9uV2l0aChsaXN0LCBtZXJnZXIsIGl0ZXJzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRhaWxPZmZzZXQoc2l6ZSkge1xuICAgIHJldHVybiBzaXplIDwgU0laRSA/IDAgOiAoKChzaXplIC0gMSkgPj4+IFNISUZUKSA8PCBTSElGVCk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhPcmRlcmVkTWFwLCBNYXApO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIE9yZGVyZWRNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlPcmRlcmVkTWFwKCkgOlxuICAgICAgICBpc09yZGVyZWRNYXAodmFsdWUpID8gdmFsdWUgOlxuICAgICAgICBlbXB0eU9yZGVyZWRNYXAoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKG1hcCApIHtcbiAgICAgICAgICB2YXIgaXRlciA9IEtleWVkSXRlcmFibGUodmFsdWUpO1xuICAgICAgICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG4gICAgICAgICAgaXRlci5mb3JFYWNoKGZ1bmN0aW9uKHYsIGspICB7cmV0dXJuIG1hcC5zZXQoaywgdil9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgT3JkZXJlZE1hcC5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdPcmRlcmVkTWFwIHsnLCAnfScpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaywgbm90U2V0VmFsdWUpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuX21hcC5nZXQoayk7XG4gICAgICByZXR1cm4gaW5kZXggIT09IHVuZGVmaW5lZCA/IHRoaXMuX2xpc3QuZ2V0KGluZGV4KVsxXSA6IG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgICAgdGhpcy5fbWFwLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX2xpc3QuY2xlYXIoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHlPcmRlcmVkTWFwKCk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgIHJldHVybiB1cGRhdGVPcmRlcmVkTWFwKHRoaXMsIGssIHYpO1xuICAgIH07XG5cbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihrKSB7XG4gICAgICByZXR1cm4gdXBkYXRlT3JkZXJlZE1hcCh0aGlzLCBrLCBOT1RfU0VUKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUud2FzQWx0ZXJlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX21hcC53YXNBbHRlcmVkKCkgfHwgdGhpcy5fbGlzdC53YXNBbHRlcmVkKCk7XG4gICAgfTtcblxuICAgIE9yZGVyZWRNYXAucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICByZXR1cm4gdGhpcy5fbGlzdC5fX2l0ZXJhdGUoXG4gICAgICAgIGZ1bmN0aW9uKGVudHJ5ICkge3JldHVybiBlbnRyeSAmJiBmbihlbnRyeVsxXSwgZW50cnlbMF0sIHRoaXMkMCl9LFxuICAgICAgICByZXZlcnNlXG4gICAgICApO1xuICAgIH07XG5cbiAgICBPcmRlcmVkTWFwLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xpc3QuZnJvbUVudHJ5U2VxKCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZE1hcC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcbiAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAuX19lbnN1cmVPd25lcihvd25lcklEKTtcbiAgICAgIHZhciBuZXdMaXN0ID0gdGhpcy5fbGlzdC5fX2Vuc3VyZU93bmVyKG93bmVySUQpO1xuICAgICAgaWYgKCFvd25lcklEKSB7XG4gICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgdGhpcy5fbWFwID0gbmV3TWFwO1xuICAgICAgICB0aGlzLl9saXN0ID0gbmV3TGlzdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZU9yZGVyZWRNYXAobmV3TWFwLCBuZXdMaXN0LCBvd25lcklELCB0aGlzLl9faGFzaCk7XG4gICAgfTtcblxuXG4gIGZ1bmN0aW9uIGlzT3JkZXJlZE1hcChtYXliZU9yZGVyZWRNYXApIHtcbiAgICByZXR1cm4gaXNNYXAobWF5YmVPcmRlcmVkTWFwKSAmJiBpc09yZGVyZWQobWF5YmVPcmRlcmVkTWFwKTtcbiAgfVxuXG4gIE9yZGVyZWRNYXAuaXNPcmRlcmVkTWFwID0gaXNPcmRlcmVkTWFwO1xuXG4gIE9yZGVyZWRNYXAucHJvdG90eXBlW0lTX09SREVSRURfU0VOVElORUxdID0gdHJ1ZTtcbiAgT3JkZXJlZE1hcC5wcm90b3R5cGVbREVMRVRFXSA9IE9yZGVyZWRNYXAucHJvdG90eXBlLnJlbW92ZTtcblxuXG5cbiAgZnVuY3Rpb24gbWFrZU9yZGVyZWRNYXAobWFwLCBsaXN0LCBvd25lcklELCBoYXNoKSB7XG4gICAgdmFyIG9tYXAgPSBPYmplY3QuY3JlYXRlKE9yZGVyZWRNYXAucHJvdG90eXBlKTtcbiAgICBvbWFwLnNpemUgPSBtYXAgPyBtYXAuc2l6ZSA6IDA7XG4gICAgb21hcC5fbWFwID0gbWFwO1xuICAgIG9tYXAuX2xpc3QgPSBsaXN0O1xuICAgIG9tYXAuX19vd25lcklEID0gb3duZXJJRDtcbiAgICBvbWFwLl9faGFzaCA9IGhhc2g7XG4gICAgcmV0dXJuIG9tYXA7XG4gIH1cblxuICB2YXIgRU1QVFlfT1JERVJFRF9NQVA7XG4gIGZ1bmN0aW9uIGVtcHR5T3JkZXJlZE1hcCgpIHtcbiAgICByZXR1cm4gRU1QVFlfT1JERVJFRF9NQVAgfHwgKEVNUFRZX09SREVSRURfTUFQID0gbWFrZU9yZGVyZWRNYXAoZW1wdHlNYXAoKSwgZW1wdHlMaXN0KCkpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU9yZGVyZWRNYXAob21hcCwgaywgdikge1xuICAgIHZhciBtYXAgPSBvbWFwLl9tYXA7XG4gICAgdmFyIGxpc3QgPSBvbWFwLl9saXN0O1xuICAgIHZhciBpID0gbWFwLmdldChrKTtcbiAgICB2YXIgaGFzID0gaSAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBuZXdNYXA7XG4gICAgdmFyIG5ld0xpc3Q7XG4gICAgaWYgKHYgPT09IE5PVF9TRVQpIHsgLy8gcmVtb3ZlZFxuICAgICAgaWYgKCFoYXMpIHtcbiAgICAgICAgcmV0dXJuIG9tYXA7XG4gICAgICB9XG4gICAgICBpZiAobGlzdC5zaXplID49IFNJWkUgJiYgbGlzdC5zaXplID49IG1hcC5zaXplICogMikge1xuICAgICAgICBuZXdMaXN0ID0gbGlzdC5maWx0ZXIoZnVuY3Rpb24oZW50cnksIGlkeCkgIHtyZXR1cm4gZW50cnkgIT09IHVuZGVmaW5lZCAmJiBpICE9PSBpZHh9KTtcbiAgICAgICAgbmV3TWFwID0gbmV3TGlzdC50b0tleWVkU2VxKCkubWFwKGZ1bmN0aW9uKGVudHJ5ICkge3JldHVybiBlbnRyeVswXX0pLmZsaXAoKS50b01hcCgpO1xuICAgICAgICBpZiAob21hcC5fX293bmVySUQpIHtcbiAgICAgICAgICBuZXdNYXAuX19vd25lcklEID0gbmV3TGlzdC5fX293bmVySUQgPSBvbWFwLl9fb3duZXJJRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3TWFwID0gbWFwLnJlbW92ZShrKTtcbiAgICAgICAgbmV3TGlzdCA9IGkgPT09IGxpc3Quc2l6ZSAtIDEgPyBsaXN0LnBvcCgpIDogbGlzdC5zZXQoaSwgdW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcykge1xuICAgICAgICBpZiAodiA9PT0gbGlzdC5nZXQoaSlbMV0pIHtcbiAgICAgICAgICByZXR1cm4gb21hcDtcbiAgICAgICAgfVxuICAgICAgICBuZXdNYXAgPSBtYXA7XG4gICAgICAgIG5ld0xpc3QgPSBsaXN0LnNldChpLCBbaywgdl0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3TWFwID0gbWFwLnNldChrLCBsaXN0LnNpemUpO1xuICAgICAgICBuZXdMaXN0ID0gbGlzdC5zZXQobGlzdC5zaXplLCBbaywgdl0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob21hcC5fX293bmVySUQpIHtcbiAgICAgIG9tYXAuc2l6ZSA9IG5ld01hcC5zaXplO1xuICAgICAgb21hcC5fbWFwID0gbmV3TWFwO1xuICAgICAgb21hcC5fbGlzdCA9IG5ld0xpc3Q7XG4gICAgICBvbWFwLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvbWFwO1xuICAgIH1cbiAgICByZXR1cm4gbWFrZU9yZGVyZWRNYXAobmV3TWFwLCBuZXdMaXN0KTtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFN0YWNrLCBJbmRleGVkQ29sbGVjdGlvbik7XG5cbiAgICAvLyBAcHJhZ21hIENvbnN0cnVjdGlvblxuXG4gICAgZnVuY3Rpb24gU3RhY2sodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlTdGFjaygpIDpcbiAgICAgICAgaXNTdGFjayh2YWx1ZSkgPyB2YWx1ZSA6XG4gICAgICAgIGVtcHR5U3RhY2soKS51bnNoaWZ0QWxsKHZhbHVlKTtcbiAgICB9XG5cbiAgICBTdGFjay5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnU3RhY2sgWycsICddJyk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQWNjZXNzXG5cbiAgICBTdGFjay5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oaW5kZXgsIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgICB3aGlsZSAoaGVhZCAmJiBpbmRleC0tKSB7XG4gICAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGVhZCA/IGhlYWQudmFsdWUgOiBub3RTZXRWYWx1ZTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9oZWFkICYmIHRoaXMuX2hlYWQudmFsdWU7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgICBTdGFjay5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1NpemUgPSB0aGlzLnNpemUgKyBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgICAgZm9yICh2YXIgaWkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaWkgPj0gMDsgaWktLSkge1xuICAgICAgICBoZWFkID0ge1xuICAgICAgICAgIHZhbHVlOiBhcmd1bWVudHNbaWldLFxuICAgICAgICAgIG5leHQ6IGhlYWRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICB0aGlzLnNpemUgPSBuZXdTaXplO1xuICAgICAgICB0aGlzLl9oZWFkID0gaGVhZDtcbiAgICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZVN0YWNrKG5ld1NpemUsIGhlYWQpO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUucHVzaEFsbCA9IGZ1bmN0aW9uKGl0ZXIpIHtcbiAgICAgIGl0ZXIgPSBJbmRleGVkSXRlcmFibGUoaXRlcik7XG4gICAgICBpZiAoaXRlci5zaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcbiAgICAgIHZhciBuZXdTaXplID0gdGhpcy5zaXplO1xuICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgICAgaXRlci5yZXZlcnNlKCkuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSApIHtcbiAgICAgICAgbmV3U2l6ZSsrO1xuICAgICAgICBoZWFkID0ge1xuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBuZXh0OiBoZWFkXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICB0aGlzLnNpemUgPSBuZXdTaXplO1xuICAgICAgICB0aGlzLl9oZWFkID0gaGVhZDtcbiAgICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZVN0YWNrKG5ld1NpemUsIGhlYWQpO1xuICAgIH07XG5cbiAgICBTdGFjay5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zbGljZSgxKTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFN0YWNrLnByb3RvdHlwZS51bnNoaWZ0QWxsID0gZnVuY3Rpb24oaXRlcikge1xuICAgICAgcmV0dXJuIHRoaXMucHVzaEFsbChpdGVyKTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5wb3AuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuX2hlYWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVtcHR5U3RhY2soKTtcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgaWYgKHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgdGhpcy5zaXplKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciByZXNvbHZlZEJlZ2luID0gcmVzb2x2ZUJlZ2luKGJlZ2luLCB0aGlzLnNpemUpO1xuICAgICAgdmFyIHJlc29sdmVkRW5kID0gcmVzb2x2ZUVuZChlbmQsIHRoaXMuc2l6ZSk7XG4gICAgICBpZiAocmVzb2x2ZWRFbmQgIT09IHRoaXMuc2l6ZSkge1xuICAgICAgICAvLyBzdXBlci5zbGljZShiZWdpbiwgZW5kKTtcbiAgICAgICAgcmV0dXJuIEluZGV4ZWRDb2xsZWN0aW9uLnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1NpemUgPSB0aGlzLnNpemUgLSByZXNvbHZlZEJlZ2luO1xuICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgICAgd2hpbGUgKHJlc29sdmVkQmVnaW4tLSkge1xuICAgICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IG5ld1NpemU7XG4gICAgICAgIHRoaXMuX2hlYWQgPSBoZWFkO1xuICAgICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlU3RhY2sobmV3U2l6ZSwgaGVhZCk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTXV0YWJpbGl0eVxuXG4gICAgU3RhY2sucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbihvd25lcklEKSB7XG4gICAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgICB0aGlzLl9fYWx0ZXJlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlU3RhY2sodGhpcy5zaXplLCB0aGlzLl9oZWFkLCBvd25lcklELCB0aGlzLl9faGFzaCk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgSXRlcmF0aW9uXG5cbiAgICBTdGFjay5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkuY2FjaGVSZXN1bHQuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHZhciBub2RlID0gdGhpcy5faGVhZDtcbiAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgIGlmIChmbihub2RlLnZhbHVlLCBpdGVyYXRpb25zKyssIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICB9O1xuXG4gICAgU3RhY2sucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy50b1NlcSgpLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHZhciBub2RlID0gdGhpcy5faGVhZDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24oKSAge1xuICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG5vZGUudmFsdWU7XG4gICAgICAgICAgbm9kZSA9IG5vZGUubmV4dDtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG5cbiAgZnVuY3Rpb24gaXNTdGFjayhtYXliZVN0YWNrKSB7XG4gICAgcmV0dXJuICEhKG1heWJlU3RhY2sgJiYgbWF5YmVTdGFja1tJU19TVEFDS19TRU5USU5FTF0pO1xuICB9XG5cbiAgU3RhY2suaXNTdGFjayA9IGlzU3RhY2s7XG5cbiAgdmFyIElTX1NUQUNLX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfU1RBQ0tfX0BAJztcblxuICB2YXIgU3RhY2tQcm90b3R5cGUgPSBTdGFjay5wcm90b3R5cGU7XG4gIFN0YWNrUHJvdG90eXBlW0lTX1NUQUNLX1NFTlRJTkVMXSA9IHRydWU7XG4gIFN0YWNrUHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSBNYXBQcm90b3R5cGUud2l0aE11dGF0aW9ucztcbiAgU3RhY2tQcm90b3R5cGUuYXNNdXRhYmxlID0gTWFwUHJvdG90eXBlLmFzTXV0YWJsZTtcbiAgU3RhY2tQcm90b3R5cGUuYXNJbW11dGFibGUgPSBNYXBQcm90b3R5cGUuYXNJbW11dGFibGU7XG4gIFN0YWNrUHJvdG90eXBlLndhc0FsdGVyZWQgPSBNYXBQcm90b3R5cGUud2FzQWx0ZXJlZDtcblxuXG4gIGZ1bmN0aW9uIG1ha2VTdGFjayhzaXplLCBoZWFkLCBvd25lcklELCBoYXNoKSB7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUoU3RhY2tQcm90b3R5cGUpO1xuICAgIG1hcC5zaXplID0gc2l6ZTtcbiAgICBtYXAuX2hlYWQgPSBoZWFkO1xuICAgIG1hcC5fX293bmVySUQgPSBvd25lcklEO1xuICAgIG1hcC5fX2hhc2ggPSBoYXNoO1xuICAgIG1hcC5fX2FsdGVyZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG5cbiAgdmFyIEVNUFRZX1NUQUNLO1xuICBmdW5jdGlvbiBlbXB0eVN0YWNrKCkge1xuICAgIHJldHVybiBFTVBUWV9TVEFDSyB8fCAoRU1QVFlfU1RBQ0sgPSBtYWtlU3RhY2soMCkpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU2V0LCBTZXRDb2xsZWN0aW9uKTtcblxuICAgIC8vIEBwcmFnbWEgQ29uc3RydWN0aW9uXG5cbiAgICBmdW5jdGlvbiBTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlTZXQoKSA6XG4gICAgICAgIGlzU2V0KHZhbHVlKSA/IHZhbHVlIDpcbiAgICAgICAgZW1wdHlTZXQoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcbiAgICAgICAgICB2YXIgaXRlciA9IFNldEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2ICkge3JldHVybiBzZXQuYWRkKHYpfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIFNldC5vZiA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFNldC5mcm9tS2V5cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcyhLZXllZEl0ZXJhYmxlKHZhbHVlKS5rZXlTZXEoKSk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ1NldCB7JywgJ30nKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBBY2Nlc3NcblxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tYXAuaGFzKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblxuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB1cGRhdGVTZXQodGhpcywgdGhpcy5fbWFwLnNldCh2YWx1ZSwgdHJ1ZSkpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdXBkYXRlU2V0KHRoaXMsIHRoaXMuX21hcC5yZW1vdmUodmFsdWUpKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZVNldCh0aGlzLCB0aGlzLl9tYXAuY2xlYXIoKSk7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgQ29tcG9zaXRpb25cblxuICAgIFNldC5wcm90b3R5cGUudW5pb24gPSBmdW5jdGlvbigpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgIGl0ZXJzID0gaXRlcnMuZmlsdGVyKGZ1bmN0aW9uKHggKSB7cmV0dXJuIHguc2l6ZSAhPT0gMH0pO1xuICAgICAgaWYgKGl0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDAgJiYgaXRlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKGl0ZXJzWzBdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24oc2V0ICkge1xuICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaXRlcnMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgICAgU2V0SXRlcmFibGUoaXRlcnNbaWldKS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBzZXQuYWRkKHZhbHVlKX0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5pbnRlcnNlY3QgPSBmdW5jdGlvbigpIHt2YXIgaXRlcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgIGlmIChpdGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBpdGVycyA9IGl0ZXJzLm1hcChmdW5jdGlvbihpdGVyICkge3JldHVybiBTZXRJdGVyYWJsZShpdGVyKX0pO1xuICAgICAgdmFyIG9yaWdpbmFsU2V0ID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24oc2V0ICkge1xuICAgICAgICBvcmlnaW5hbFNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlICkge1xuICAgICAgICAgIGlmICghaXRlcnMuZXZlcnkoZnVuY3Rpb24oaXRlciApIHtyZXR1cm4gaXRlci5jb250YWlucyh2YWx1ZSl9KSkge1xuICAgICAgICAgICAgc2V0LnJlbW92ZSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLnN1YnRyYWN0ID0gZnVuY3Rpb24oKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaXRlcnMgPSBpdGVycy5tYXAoZnVuY3Rpb24oaXRlciApIHtyZXR1cm4gU2V0SXRlcmFibGUoaXRlcil9KTtcbiAgICAgIHZhciBvcmlnaW5hbFNldCA9IHRoaXM7XG4gICAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcbiAgICAgICAgb3JpZ2luYWxTZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSApIHtcbiAgICAgICAgICBpZiAoaXRlcnMuc29tZShmdW5jdGlvbihpdGVyICkge3JldHVybiBpdGVyLmNvbnRhaW5zKHZhbHVlKX0pKSB7XG4gICAgICAgICAgICBzZXQucmVtb3ZlKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnVuaW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUubWVyZ2VXaXRoID0gZnVuY3Rpb24obWVyZ2VyKSB7dmFyIGl0ZXJzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICByZXR1cm4gdGhpcy51bmlvbi5hcHBseSh0aGlzLCBpdGVycyk7XG4gICAgfTtcblxuICAgIFNldC5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKGNvbXBhcmF0b3IpIHtcbiAgICAgIC8vIExhdGUgYmluZGluZ1xuICAgICAgcmV0dXJuIE9yZGVyZWRTZXQoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvcikpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLnNvcnRCeSA9IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgICAgLy8gTGF0ZSBiaW5kaW5nXG4gICAgICByZXR1cm4gT3JkZXJlZFNldChzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yLCBtYXBwZXIpKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWFwLndhc0FsdGVyZWQoKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIHRoaXMuX21hcC5fX2l0ZXJhdGUoZnVuY3Rpb24oXywgaykgIHtyZXR1cm4gZm4oaywgaywgdGhpcyQwKX0sIHJldmVyc2UpO1xuICAgIH07XG5cbiAgICBTZXQucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWFwLm1hcChmdW5jdGlvbihfLCBrKSAge3JldHVybiBrfSkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICB9O1xuXG4gICAgU2V0LnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24ob3duZXJJRCkge1xuICAgICAgaWYgKG93bmVySUQgPT09IHRoaXMuX19vd25lcklEKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIG5ld01hcCA9IHRoaXMuX21hcC5fX2Vuc3VyZU93bmVyKG93bmVySUQpO1xuICAgICAgaWYgKCFvd25lcklEKSB7XG4gICAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgdGhpcy5fbWFwID0gbmV3TWFwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9fbWFrZShuZXdNYXAsIG93bmVySUQpO1xuICAgIH07XG5cblxuICBmdW5jdGlvbiBpc1NldChtYXliZVNldCkge1xuICAgIHJldHVybiAhIShtYXliZVNldCAmJiBtYXliZVNldFtJU19TRVRfU0VOVElORUxdKTtcbiAgfVxuXG4gIFNldC5pc1NldCA9IGlzU2V0O1xuXG4gIHZhciBJU19TRVRfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9TRVRfX0BAJztcblxuICB2YXIgU2V0UHJvdG90eXBlID0gU2V0LnByb3RvdHlwZTtcbiAgU2V0UHJvdG90eXBlW0lTX1NFVF9TRU5USU5FTF0gPSB0cnVlO1xuICBTZXRQcm90b3R5cGVbREVMRVRFXSA9IFNldFByb3RvdHlwZS5yZW1vdmU7XG4gIFNldFByb3RvdHlwZS5tZXJnZURlZXAgPSBTZXRQcm90b3R5cGUubWVyZ2U7XG4gIFNldFByb3RvdHlwZS5tZXJnZURlZXBXaXRoID0gU2V0UHJvdG90eXBlLm1lcmdlV2l0aDtcbiAgU2V0UHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSBNYXBQcm90b3R5cGUud2l0aE11dGF0aW9ucztcbiAgU2V0UHJvdG90eXBlLmFzTXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc011dGFibGU7XG4gIFNldFByb3RvdHlwZS5hc0ltbXV0YWJsZSA9IE1hcFByb3RvdHlwZS5hc0ltbXV0YWJsZTtcblxuICBTZXRQcm90b3R5cGUuX19lbXB0eSA9IGVtcHR5U2V0O1xuICBTZXRQcm90b3R5cGUuX19tYWtlID0gbWFrZVNldDtcblxuICBmdW5jdGlvbiB1cGRhdGVTZXQoc2V0LCBuZXdNYXApIHtcbiAgICBpZiAoc2V0Ll9fb3duZXJJRCkge1xuICAgICAgc2V0LnNpemUgPSBuZXdNYXAuc2l6ZTtcbiAgICAgIHNldC5fbWFwID0gbmV3TWFwO1xuICAgICAgcmV0dXJuIHNldDtcbiAgICB9XG4gICAgcmV0dXJuIG5ld01hcCA9PT0gc2V0Ll9tYXAgPyBzZXQgOlxuICAgICAgbmV3TWFwLnNpemUgPT09IDAgPyBzZXQuX19lbXB0eSgpIDpcbiAgICAgIHNldC5fX21ha2UobmV3TWFwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VTZXQobWFwLCBvd25lcklEKSB7XG4gICAgdmFyIHNldCA9IE9iamVjdC5jcmVhdGUoU2V0UHJvdG90eXBlKTtcbiAgICBzZXQuc2l6ZSA9IG1hcCA/IG1hcC5zaXplIDogMDtcbiAgICBzZXQuX21hcCA9IG1hcDtcbiAgICBzZXQuX19vd25lcklEID0gb3duZXJJRDtcbiAgICByZXR1cm4gc2V0O1xuICB9XG5cbiAgdmFyIEVNUFRZX1NFVDtcbiAgZnVuY3Rpb24gZW1wdHlTZXQoKSB7XG4gICAgcmV0dXJuIEVNUFRZX1NFVCB8fCAoRU1QVFlfU0VUID0gbWFrZVNldChlbXB0eU1hcCgpKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhPcmRlcmVkU2V0LCBTZXQpO1xuXG4gICAgLy8gQHByYWdtYSBDb25zdHJ1Y3Rpb25cblxuICAgIGZ1bmN0aW9uIE9yZGVyZWRTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gZW1wdHlPcmRlcmVkU2V0KCkgOlxuICAgICAgICBpc09yZGVyZWRTZXQodmFsdWUpID8gdmFsdWUgOlxuICAgICAgICBlbXB0eU9yZGVyZWRTZXQoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uKHNldCApIHtcbiAgICAgICAgICB2YXIgaXRlciA9IFNldEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbih2ICkge3JldHVybiBzZXQuYWRkKHYpfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIE9yZGVyZWRTZXQub2YgPSBmdW5jdGlvbigvKi4uLnZhbHVlcyovKSB7XG4gICAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBPcmRlcmVkU2V0LmZyb21LZXlzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzKEtleWVkSXRlcmFibGUodmFsdWUpLmtleVNlcSgpKTtcbiAgICB9O1xuXG4gICAgT3JkZXJlZFNldC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ09yZGVyZWRTZXQgeycsICd9Jyk7XG4gICAgfTtcblxuXG4gIGZ1bmN0aW9uIGlzT3JkZXJlZFNldChtYXliZU9yZGVyZWRTZXQpIHtcbiAgICByZXR1cm4gaXNTZXQobWF5YmVPcmRlcmVkU2V0KSAmJiBpc09yZGVyZWQobWF5YmVPcmRlcmVkU2V0KTtcbiAgfVxuXG4gIE9yZGVyZWRTZXQuaXNPcmRlcmVkU2V0ID0gaXNPcmRlcmVkU2V0O1xuXG4gIHZhciBPcmRlcmVkU2V0UHJvdG90eXBlID0gT3JkZXJlZFNldC5wcm90b3R5cGU7XG4gIE9yZGVyZWRTZXRQcm90b3R5cGVbSVNfT1JERVJFRF9TRU5USU5FTF0gPSB0cnVlO1xuXG4gIE9yZGVyZWRTZXRQcm90b3R5cGUuX19lbXB0eSA9IGVtcHR5T3JkZXJlZFNldDtcbiAgT3JkZXJlZFNldFByb3RvdHlwZS5fX21ha2UgPSBtYWtlT3JkZXJlZFNldDtcblxuICBmdW5jdGlvbiBtYWtlT3JkZXJlZFNldChtYXAsIG93bmVySUQpIHtcbiAgICB2YXIgc2V0ID0gT2JqZWN0LmNyZWF0ZShPcmRlcmVkU2V0UHJvdG90eXBlKTtcbiAgICBzZXQuc2l6ZSA9IG1hcCA/IG1hcC5zaXplIDogMDtcbiAgICBzZXQuX21hcCA9IG1hcDtcbiAgICBzZXQuX19vd25lcklEID0gb3duZXJJRDtcbiAgICByZXR1cm4gc2V0O1xuICB9XG5cbiAgdmFyIEVNUFRZX09SREVSRURfU0VUO1xuICBmdW5jdGlvbiBlbXB0eU9yZGVyZWRTZXQoKSB7XG4gICAgcmV0dXJuIEVNUFRZX09SREVSRURfU0VUIHx8IChFTVBUWV9PUkRFUkVEX1NFVCA9IG1ha2VPcmRlcmVkU2V0KGVtcHR5T3JkZXJlZE1hcCgpKSk7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhSZWNvcmQsIEtleWVkQ29sbGVjdGlvbik7XG5cbiAgICBmdW5jdGlvbiBSZWNvcmQoZGVmYXVsdFZhbHVlcywgbmFtZSkge1xuICAgICAgdmFyIFJlY29yZFR5cGUgPSBmdW5jdGlvbiBSZWNvcmQodmFsdWVzKSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWNvcmRUeXBlKSkge1xuICAgICAgICAgIHJldHVybiBuZXcgUmVjb3JkVHlwZSh2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21hcCA9IE1hcCh2YWx1ZXMpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0VmFsdWVzKTtcblxuICAgICAgdmFyIFJlY29yZFR5cGVQcm90b3R5cGUgPSBSZWNvcmRUeXBlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmVjb3JkUHJvdG90eXBlKTtcbiAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZWNvcmRUeXBlO1xuICAgICAgbmFtZSAmJiAoUmVjb3JkVHlwZVByb3RvdHlwZS5fbmFtZSA9IG5hbWUpO1xuICAgICAgUmVjb3JkVHlwZVByb3RvdHlwZS5fZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRWYWx1ZXM7XG4gICAgICBSZWNvcmRUeXBlUHJvdG90eXBlLl9rZXlzID0ga2V5cztcbiAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuc2l6ZSA9IGtleXMubGVuZ3RoO1xuXG4gICAgICB0cnkge1xuICAgICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5ICkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWNvcmRUeXBlLnByb3RvdHlwZSwga2V5LCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGludmFyaWFudCh0aGlzLl9fb3duZXJJRCwgJ0Nhbm5vdCBzZXQgb24gYW4gaW1tdXRhYmxlIHJlY29yZC4nKTtcbiAgICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnR5IGZhaWxlZC4gUHJvYmFibHkgSUU4LlxuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVjb3JkVHlwZTtcbiAgICB9XG5cbiAgICBSZWNvcmQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKHJlY29yZE5hbWUodGhpcykgKyAnIHsnLCAnfScpO1xuICAgIH07XG5cbiAgICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihrKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFZhbHVlcy5oYXNPd25Qcm9wZXJ0eShrKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrLCBub3RTZXRWYWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLmhhcyhrKSkge1xuICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgZGVmYXVsdFZhbCA9IHRoaXMuX2RlZmF1bHRWYWx1ZXNba107XG4gICAgICByZXR1cm4gdGhpcy5fbWFwID8gdGhpcy5fbWFwLmdldChrLCBkZWZhdWx0VmFsKSA6IGRlZmF1bHRWYWw7XG4gICAgfTtcblxuICAgIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgICBSZWNvcmQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgICAgdGhpcy5fbWFwICYmIHRoaXMuX21hcC5jbGVhcigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBTdXBlclJlY29yZCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiBTdXBlclJlY29yZC5fZW1wdHkgfHwgKFN1cGVyUmVjb3JkLl9lbXB0eSA9IG1ha2VSZWNvcmQodGhpcywgZW1wdHlNYXAoKSkpO1xuICAgIH07XG5cbiAgICBSZWNvcmQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGssIHYpIHtcbiAgICAgIGlmICghdGhpcy5oYXMoaykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2V0IHVua25vd24ga2V5IFwiJyArIGsgKyAnXCIgb24gJyArIHJlY29yZE5hbWUodGhpcykpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld01hcCA9IHRoaXMuX21hcCAmJiB0aGlzLl9tYXAuc2V0KGssIHYpO1xuICAgICAgaWYgKHRoaXMuX19vd25lcklEIHx8IG5ld01hcCA9PT0gdGhpcy5fbWFwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3TWFwKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihrKSB7XG4gICAgICBpZiAoIXRoaXMuaGFzKGspKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIG5ld01hcCA9IHRoaXMuX21hcCAmJiB0aGlzLl9tYXAucmVtb3ZlKGspO1xuICAgICAgaWYgKHRoaXMuX19vd25lcklEIHx8IG5ld01hcCA9PT0gdGhpcy5fbWFwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3TWFwKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWFwLndhc0FsdGVyZWQoKTtcbiAgICB9O1xuXG4gICAgUmVjb3JkLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIEtleWVkSXRlcmFibGUodGhpcy5fZGVmYXVsdFZhbHVlcykubWFwKGZ1bmN0aW9uKF8sIGspICB7cmV0dXJuIHRoaXMkMC5nZXQoayl9KS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgIH07XG5cbiAgICBSZWNvcmQucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICByZXR1cm4gS2V5ZWRJdGVyYWJsZSh0aGlzLl9kZWZhdWx0VmFsdWVzKS5tYXAoZnVuY3Rpb24oXywgaykgIHtyZXR1cm4gdGhpcyQwLmdldChrKX0pLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG4gICAgfTtcblxuICAgIFJlY29yZC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uKG93bmVySUQpIHtcbiAgICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAgJiYgdGhpcy5fbWFwLl9fZW5zdXJlT3duZXIob3duZXJJRCk7XG4gICAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgICB0aGlzLl9tYXAgPSBuZXdNYXA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3TWFwLCBvd25lcklEKTtcbiAgICB9O1xuXG5cbiAgdmFyIFJlY29yZFByb3RvdHlwZSA9IFJlY29yZC5wcm90b3R5cGU7XG4gIFJlY29yZFByb3RvdHlwZVtERUxFVEVdID0gUmVjb3JkUHJvdG90eXBlLnJlbW92ZTtcbiAgUmVjb3JkUHJvdG90eXBlLmRlbGV0ZUluID1cbiAgUmVjb3JkUHJvdG90eXBlLnJlbW92ZUluID0gTWFwUHJvdG90eXBlLnJlbW92ZUluO1xuICBSZWNvcmRQcm90b3R5cGUubWVyZ2UgPSBNYXBQcm90b3R5cGUubWVyZ2U7XG4gIFJlY29yZFByb3RvdHlwZS5tZXJnZVdpdGggPSBNYXBQcm90b3R5cGUubWVyZ2VXaXRoO1xuICBSZWNvcmRQcm90b3R5cGUubWVyZ2VJbiA9IE1hcFByb3RvdHlwZS5tZXJnZUluO1xuICBSZWNvcmRQcm90b3R5cGUubWVyZ2VEZWVwID0gTWFwUHJvdG90eXBlLm1lcmdlRGVlcDtcbiAgUmVjb3JkUHJvdG90eXBlLm1lcmdlRGVlcFdpdGggPSBNYXBQcm90b3R5cGUubWVyZ2VEZWVwV2l0aDtcbiAgUmVjb3JkUHJvdG90eXBlLm1lcmdlRGVlcEluID0gTWFwUHJvdG90eXBlLm1lcmdlRGVlcEluO1xuICBSZWNvcmRQcm90b3R5cGUuc2V0SW4gPSBNYXBQcm90b3R5cGUuc2V0SW47XG4gIFJlY29yZFByb3RvdHlwZS51cGRhdGUgPSBNYXBQcm90b3R5cGUudXBkYXRlO1xuICBSZWNvcmRQcm90b3R5cGUudXBkYXRlSW4gPSBNYXBQcm90b3R5cGUudXBkYXRlSW47XG4gIFJlY29yZFByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gTWFwUHJvdG90eXBlLndpdGhNdXRhdGlvbnM7XG4gIFJlY29yZFByb3RvdHlwZS5hc011dGFibGUgPSBNYXBQcm90b3R5cGUuYXNNdXRhYmxlO1xuICBSZWNvcmRQcm90b3R5cGUuYXNJbW11dGFibGUgPSBNYXBQcm90b3R5cGUuYXNJbW11dGFibGU7XG5cblxuICBmdW5jdGlvbiBtYWtlUmVjb3JkKGxpa2VSZWNvcmQsIG1hcCwgb3duZXJJRCkge1xuICAgIHZhciByZWNvcmQgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihsaWtlUmVjb3JkKSk7XG4gICAgcmVjb3JkLl9tYXAgPSBtYXA7XG4gICAgcmVjb3JkLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgcmV0dXJuIHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29yZE5hbWUocmVjb3JkKSB7XG4gICAgcmV0dXJuIHJlY29yZC5fbmFtZSB8fCByZWNvcmQuY29uc3RydWN0b3IubmFtZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZXBFcXVhbChhLCBiKSB7XG4gICAgaWYgKGEgPT09IGIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgICFpc0l0ZXJhYmxlKGIpIHx8XG4gICAgICBhLnNpemUgIT09IHVuZGVmaW5lZCAmJiBiLnNpemUgIT09IHVuZGVmaW5lZCAmJiBhLnNpemUgIT09IGIuc2l6ZSB8fFxuICAgICAgYS5fX2hhc2ggIT09IHVuZGVmaW5lZCAmJiBiLl9faGFzaCAhPT0gdW5kZWZpbmVkICYmIGEuX19oYXNoICE9PSBiLl9faGFzaCB8fFxuICAgICAgaXNLZXllZChhKSAhPT0gaXNLZXllZChiKSB8fFxuICAgICAgaXNJbmRleGVkKGEpICE9PSBpc0luZGV4ZWQoYikgfHxcbiAgICAgIGlzT3JkZXJlZChhKSAhPT0gaXNPcmRlcmVkKGIpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGEuc2l6ZSA9PT0gMCAmJiBiLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBub3RBc3NvY2lhdGl2ZSA9ICFpc0Fzc29jaWF0aXZlKGEpO1xuXG4gICAgaWYgKGlzT3JkZXJlZChhKSkge1xuICAgICAgdmFyIGVudHJpZXMgPSBhLmVudHJpZXMoKTtcbiAgICAgIHJldHVybiBiLmV2ZXJ5KGZ1bmN0aW9uKHYsIGspICB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXMubmV4dCgpLnZhbHVlO1xuICAgICAgICByZXR1cm4gZW50cnkgJiYgaXMoZW50cnlbMV0sIHYpICYmIChub3RBc3NvY2lhdGl2ZSB8fCBpcyhlbnRyeVswXSwgaykpO1xuICAgICAgfSkgJiYgZW50cmllcy5uZXh0KCkuZG9uZTtcbiAgICB9XG5cbiAgICB2YXIgZmxpcHBlZCA9IGZhbHNlO1xuXG4gICAgaWYgKGEuc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoYi5zaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYS5jYWNoZVJlc3VsdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmxpcHBlZCA9IHRydWU7XG4gICAgICAgIHZhciBfID0gYTtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGIgPSBfO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhbGxFcXVhbCA9IHRydWU7XG4gICAgdmFyIGJTaXplID0gYi5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaykgIHtcbiAgICAgIGlmIChub3RBc3NvY2lhdGl2ZSA/ICFhLmhhcyh2KSA6XG4gICAgICAgICAgZmxpcHBlZCA/ICFpcyh2LCBhLmdldChrLCBOT1RfU0VUKSkgOiAhaXMoYS5nZXQoaywgTk9UX1NFVCksIHYpKSB7XG4gICAgICAgIGFsbEVxdWFsID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhbGxFcXVhbCAmJiBhLnNpemUgPT09IGJTaXplO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoUmFuZ2UsIEluZGV4ZWRTZXEpO1xuXG4gICAgZnVuY3Rpb24gUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJhbmdlKSkge1xuICAgICAgICByZXR1cm4gbmV3IFJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXApO1xuICAgICAgfVxuICAgICAgaW52YXJpYW50KHN0ZXAgIT09IDAsICdDYW5ub3Qgc3RlcCBhIFJhbmdlIGJ5IDAnKTtcbiAgICAgIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBJbmZpbml0eTtcbiAgICAgIH1cbiAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAxIDogTWF0aC5hYnMoc3RlcCk7XG4gICAgICBpZiAoZW5kIDwgc3RhcnQpIHtcbiAgICAgICAgc3RlcCA9IC1zdGVwO1xuICAgICAgfVxuICAgICAgdGhpcy5fc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuX2VuZCA9IGVuZDtcbiAgICAgIHRoaXMuX3N0ZXAgPSBzdGVwO1xuICAgICAgdGhpcy5zaXplID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChlbmQgLSBzdGFydCkgLyBzdGVwIC0gMSkgKyAxKTtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgaWYgKEVNUFRZX1JBTkdFKSB7XG4gICAgICAgICAgcmV0dXJuIEVNUFRZX1JBTkdFO1xuICAgICAgICB9XG4gICAgICAgIEVNUFRZX1JBTkdFID0gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuICdSYW5nZSBbXSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1JhbmdlIFsgJyArXG4gICAgICAgIHRoaXMuX3N0YXJ0ICsgJy4uLicgKyB0aGlzLl9lbmQgK1xuICAgICAgICAodGhpcy5fc3RlcCA+IDEgPyAnIGJ5ICcgKyB0aGlzLl9zdGVwIDogJycpICtcbiAgICAgICcgXSc7XG4gICAgfTtcblxuICAgIFJhbmdlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyhpbmRleCkgP1xuICAgICAgICB0aGlzLl9zdGFydCArIHdyYXBJbmRleCh0aGlzLCBpbmRleCkgKiB0aGlzLl9zdGVwIDpcbiAgICAgICAgbm90U2V0VmFsdWU7XG4gICAgfTtcblxuICAgIFJhbmdlLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICB2YXIgcG9zc2libGVJbmRleCA9IChzZWFyY2hWYWx1ZSAtIHRoaXMuX3N0YXJ0KSAvIHRoaXMuX3N0ZXA7XG4gICAgICByZXR1cm4gcG9zc2libGVJbmRleCA+PSAwICYmXG4gICAgICAgIHBvc3NpYmxlSW5kZXggPCB0aGlzLnNpemUgJiZcbiAgICAgICAgcG9zc2libGVJbmRleCA9PT0gTWF0aC5mbG9vcihwb3NzaWJsZUluZGV4KTtcbiAgICB9O1xuXG4gICAgUmFuZ2UucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgaWYgKHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgdGhpcy5zaXplKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGJlZ2luID0gcmVzb2x2ZUJlZ2luKGJlZ2luLCB0aGlzLnNpemUpO1xuICAgICAgZW5kID0gcmVzb2x2ZUVuZChlbmQsIHRoaXMuc2l6ZSk7XG4gICAgICBpZiAoZW5kIDw9IGJlZ2luKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmFuZ2UoMCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFJhbmdlKHRoaXMuZ2V0KGJlZ2luLCB0aGlzLl9lbmQpLCB0aGlzLmdldChlbmQsIHRoaXMuX2VuZCksIHRoaXMuX3N0ZXApO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICB2YXIgb2Zmc2V0VmFsdWUgPSBzZWFyY2hWYWx1ZSAtIHRoaXMuX3N0YXJ0O1xuICAgICAgaWYgKG9mZnNldFZhbHVlICUgdGhpcy5fc3RlcCA9PT0gMCkge1xuICAgICAgICB2YXIgaW5kZXggPSBvZmZzZXRWYWx1ZSAvIHRoaXMuX3N0ZXA7XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5zaXplKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuXG4gICAgUmFuZ2UucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmluZGV4T2Yoc2VhcmNoVmFsdWUpO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIHZhciBtYXhJbmRleCA9IHRoaXMuc2l6ZSAtIDE7XG4gICAgICB2YXIgc3RlcCA9IHRoaXMuX3N0ZXA7XG4gICAgICB2YXIgdmFsdWUgPSByZXZlcnNlID8gdGhpcy5fc3RhcnQgKyBtYXhJbmRleCAqIHN0ZXAgOiB0aGlzLl9zdGFydDtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgICAgaWYgKGZuKHZhbHVlLCBpaSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSArPSByZXZlcnNlID8gLXN0ZXAgOiBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH07XG5cbiAgICBSYW5nZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICAgIHZhciBtYXhJbmRleCA9IHRoaXMuc2l6ZSAtIDE7XG4gICAgICB2YXIgc3RlcCA9IHRoaXMuX3N0ZXA7XG4gICAgICB2YXIgdmFsdWUgPSByZXZlcnNlID8gdGhpcy5fc3RhcnQgKyBtYXhJbmRleCAqIHN0ZXAgOiB0aGlzLl9zdGFydDtcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgdmFyIHYgPSB2YWx1ZTtcbiAgICAgICAgdmFsdWUgKz0gcmV2ZXJzZSA/IC1zdGVwIDogc3RlcDtcbiAgICAgICAgcmV0dXJuIGlpID4gbWF4SW5kZXggPyBpdGVyYXRvckRvbmUoKSA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgaWkrKywgdik7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgUmFuZ2UucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBSYW5nZSA/XG4gICAgICAgIHRoaXMuX3N0YXJ0ID09PSBvdGhlci5fc3RhcnQgJiZcbiAgICAgICAgdGhpcy5fZW5kID09PSBvdGhlci5fZW5kICYmXG4gICAgICAgIHRoaXMuX3N0ZXAgPT09IG90aGVyLl9zdGVwIDpcbiAgICAgICAgZGVlcEVxdWFsKHRoaXMsIG90aGVyKTtcbiAgICB9O1xuXG5cbiAgdmFyIEVNUFRZX1JBTkdFO1xuXG4gIGNyZWF0ZUNsYXNzKFJlcGVhdCwgSW5kZXhlZFNlcSk7XG5cbiAgICBmdW5jdGlvbiBSZXBlYXQodmFsdWUsIHRpbWVzKSB7XG4gICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVwZWF0KSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlcGVhdCh2YWx1ZSwgdGltZXMpO1xuICAgICAgfVxuICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc2l6ZSA9IHRpbWVzID09PSB1bmRlZmluZWQgPyBJbmZpbml0eSA6IE1hdGgubWF4KDAsIHRpbWVzKTtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgaWYgKEVNUFRZX1JFUEVBVCkge1xuICAgICAgICAgIHJldHVybiBFTVBUWV9SRVBFQVQ7XG4gICAgICAgIH1cbiAgICAgICAgRU1QVFlfUkVQRUFUID0gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiAnUmVwZWF0IFtdJztcbiAgICAgIH1cbiAgICAgIHJldHVybiAnUmVwZWF0IFsgJyArIHRoaXMuX3ZhbHVlICsgJyAnICsgdGhpcy5zaXplICsgJyB0aW1lcyBdJztcbiAgICB9O1xuXG4gICAgUmVwZWF0LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyhpbmRleCkgPyB0aGlzLl92YWx1ZSA6IG5vdFNldFZhbHVlO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiBpcyh0aGlzLl92YWx1ZSwgc2VhcmNoVmFsdWUpO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIHNpemUgPSB0aGlzLnNpemU7XG4gICAgICByZXR1cm4gd2hvbGVTbGljZShiZWdpbiwgZW5kLCBzaXplKSA/IHRoaXMgOlxuICAgICAgICBuZXcgUmVwZWF0KHRoaXMuX3ZhbHVlLCByZXNvbHZlRW5kKGVuZCwgc2l6ZSkgLSByZXNvbHZlQmVnaW4oYmVnaW4sIHNpemUpKTtcbiAgICB9O1xuXG4gICAgUmVwZWF0LnByb3RvdHlwZS5yZXZlcnNlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgUmVwZWF0LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIGlmIChpcyh0aGlzLl92YWx1ZSwgc2VhcmNoVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIGlmIChpcyh0aGlzLl92YWx1ZSwgc2VhcmNoVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpemU7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcblxuICAgIFJlcGVhdC5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCB0aGlzLnNpemU7IGlpKyspIHtcbiAgICAgICAgaWYgKGZuKHRoaXMuX3ZhbHVlLCBpaSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGlpO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICB2YXIgaWkgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbigpIFxuICAgICAgICB7cmV0dXJuIGlpIDwgdGhpcyQwLnNpemUgPyBpdGVyYXRvclZhbHVlKHR5cGUsIGlpKyssIHRoaXMkMC5fdmFsdWUpIDogaXRlcmF0b3JEb25lKCl9XG4gICAgICApO1xuICAgIH07XG5cbiAgICBSZXBlYXQucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBSZXBlYXQgP1xuICAgICAgICBpcyh0aGlzLl92YWx1ZSwgb3RoZXIuX3ZhbHVlKSA6XG4gICAgICAgIGRlZXBFcXVhbChvdGhlcik7XG4gICAgfTtcblxuXG4gIHZhciBFTVBUWV9SRVBFQVQ7XG5cbiAgLyoqXG4gICAqIENvbnRyaWJ1dGVzIGFkZGl0aW9uYWwgbWV0aG9kcyB0byBhIGNvbnN0cnVjdG9yXG4gICAqL1xuICBmdW5jdGlvbiBtaXhpbihjdG9yLCBtZXRob2RzKSB7XG4gICAgdmFyIGtleUNvcGllciA9IGZ1bmN0aW9uKGtleSApIHsgY3Rvci5wcm90b3R5cGVba2V5XSA9IG1ldGhvZHNba2V5XTsgfTtcbiAgICBPYmplY3Qua2V5cyhtZXRob2RzKS5mb3JFYWNoKGtleUNvcGllcik7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJlxuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtZXRob2RzKS5mb3JFYWNoKGtleUNvcGllcik7XG4gICAgcmV0dXJuIGN0b3I7XG4gIH1cblxuICBJdGVyYWJsZS5JdGVyYXRvciA9IEl0ZXJhdG9yO1xuXG4gIG1peGluKEl0ZXJhYmxlLCB7XG5cbiAgICAvLyAjIyMgQ29udmVyc2lvbiB0byBvdGhlciB0eXBlc1xuXG4gICAgdG9BcnJheTogZnVuY3Rpb24oKSB7XG4gICAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuICAgICAgdmFyIGFycmF5ID0gbmV3IEFycmF5KHRoaXMuc2l6ZSB8fCAwKTtcbiAgICAgIHRoaXMudmFsdWVTZXEoKS5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaSkgIHsgYXJyYXlbaV0gPSB2OyB9KTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9LFxuXG4gICAgdG9JbmRleGVkU2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgVG9JbmRleGVkU2VxdWVuY2UodGhpcyk7XG4gICAgfSxcblxuICAgIHRvSlM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9TZXEoKS5tYXAoXG4gICAgICAgIGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudG9KUyA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnRvSlMoKSA6IHZhbHVlfVxuICAgICAgKS5fX3RvSlMoKTtcbiAgICB9LFxuXG4gICAgdG9KU09OOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkubWFwKFxuICAgICAgICBmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnRvSlNPTigpIDogdmFsdWV9XG4gICAgICApLl9fdG9KUygpO1xuICAgIH0sXG5cbiAgICB0b0tleWVkU2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgVG9LZXllZFNlcXVlbmNlKHRoaXMsIHRydWUpO1xuICAgIH0sXG5cbiAgICB0b01hcDogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG4gICAgICByZXR1cm4gTWFwKHRoaXMudG9LZXllZFNlcSgpKTtcbiAgICB9LFxuXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcbiAgICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGspICB7IG9iamVjdFtrXSA9IHY7IH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9LFxuXG4gICAgdG9PcmRlcmVkTWFwOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgIHJldHVybiBPcmRlcmVkTWFwKHRoaXMudG9LZXllZFNlcSgpKTtcbiAgICB9LFxuXG4gICAgdG9PcmRlcmVkU2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgIHJldHVybiBPcmRlcmVkU2V0KGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcbiAgICB9LFxuXG4gICAgdG9TZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gVXNlIExhdGUgQmluZGluZyBoZXJlIHRvIHNvbHZlIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuICAgICAgcmV0dXJuIFNldChpc0tleWVkKHRoaXMpID8gdGhpcy52YWx1ZVNlcSgpIDogdGhpcyk7XG4gICAgfSxcblxuICAgIHRvU2V0U2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgVG9TZXRTZXF1ZW5jZSh0aGlzKTtcbiAgICB9LFxuXG4gICAgdG9TZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGlzSW5kZXhlZCh0aGlzKSA/IHRoaXMudG9JbmRleGVkU2VxKCkgOlxuICAgICAgICBpc0tleWVkKHRoaXMpID8gdGhpcy50b0tleWVkU2VxKCkgOlxuICAgICAgICB0aGlzLnRvU2V0U2VxKCk7XG4gICAgfSxcblxuICAgIHRvU3RhY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gVXNlIExhdGUgQmluZGluZyBoZXJlIHRvIHNvbHZlIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuICAgICAgcmV0dXJuIFN0YWNrKGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcbiAgICB9LFxuXG4gICAgdG9MaXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICAgIHJldHVybiBMaXN0KGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgQ29tbW9uIEphdmFTY3JpcHQgbWV0aG9kcyBhbmQgcHJvcGVydGllc1xuXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICdbSXRlcmFibGVdJztcbiAgICB9LFxuXG4gICAgX190b1N0cmluZzogZnVuY3Rpb24oaGVhZCwgdGFpbCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaGVhZCArIHRhaWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGVhZCArICcgJyArIHRoaXMudG9TZXEoKS5tYXAodGhpcy5fX3RvU3RyaW5nTWFwcGVyKS5qb2luKCcsICcpICsgJyAnICsgdGFpbDtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgRVM2IENvbGxlY3Rpb24gbWV0aG9kcyAoRVM2IEFycmF5IGFuZCBNYXApXG5cbiAgICBjb25jYXQ6IGZ1bmN0aW9uKCkge3ZhciB2YWx1ZXMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBjb25jYXRGYWN0b3J5KHRoaXMsIHZhbHVlcykpO1xuICAgIH0sXG5cbiAgICBjb250YWluczogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnNvbWUoZnVuY3Rpb24odmFsdWUgKSB7cmV0dXJuIGlzKHZhbHVlLCBzZWFyY2hWYWx1ZSl9KTtcbiAgICB9LFxuXG4gICAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUyk7XG4gICAgfSxcblxuICAgIGV2ZXJ5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgICB2YXIgcmV0dXJuVmFsdWUgPSB0cnVlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24odiwgaywgYykgIHtcbiAgICAgICAgaWYgKCFwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuICAgICAgICAgIHJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICB9LFxuXG4gICAgZmlsdGVyOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmaWx0ZXJGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBmaW5kOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQsIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgZW50cnkgPSB0aGlzLmZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgICAgcmV0dXJuIGVudHJ5ID8gZW50cnlbMV0gOiBub3RTZXRWYWx1ZTtcbiAgICB9LFxuXG4gICAgZmluZEVudHJ5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHZhciBmb3VuZDtcbiAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuICAgICAgICAgIGZvdW5kID0gW2ssIHZdO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZm91bmQ7XG4gICAgfSxcblxuICAgIGZpbmRMYXN0RW50cnk6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9TZXEoKS5yZXZlcnNlKCkuZmluZEVudHJ5KHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIGZvckVhY2g6IGZ1bmN0aW9uKHNpZGVFZmZlY3QsIGNvbnRleHQpIHtcbiAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgICByZXR1cm4gdGhpcy5fX2l0ZXJhdGUoY29udGV4dCA/IHNpZGVFZmZlY3QuYmluZChjb250ZXh0KSA6IHNpZGVFZmZlY3QpO1xuICAgIH0sXG5cbiAgICBqb2luOiBmdW5jdGlvbihzZXBhcmF0b3IpIHtcbiAgICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/ICcnICsgc2VwYXJhdG9yIDogJywnO1xuICAgICAgdmFyIGpvaW5lZCA9ICcnO1xuICAgICAgdmFyIGlzRmlyc3QgPSB0cnVlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24odiApIHtcbiAgICAgICAgaXNGaXJzdCA/IChpc0ZpcnN0ID0gZmFsc2UpIDogKGpvaW5lZCArPSBzZXBhcmF0b3IpO1xuICAgICAgICBqb2luZWQgKz0gdiAhPT0gbnVsbCAmJiB2ICE9PSB1bmRlZmluZWQgPyB2IDogJyc7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBqb2luZWQ7XG4gICAgfSxcblxuICAgIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX0tFWVMpO1xuICAgIH0sXG5cbiAgICBtYXA6IGZ1bmN0aW9uKG1hcHBlciwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIG1hcEZhY3RvcnkodGhpcywgbWFwcGVyLCBjb250ZXh0KSk7XG4gICAgfSxcblxuICAgIHJlZHVjZTogZnVuY3Rpb24ocmVkdWNlciwgaW5pdGlhbFJlZHVjdGlvbiwgY29udGV4dCkge1xuICAgICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcbiAgICAgIHZhciByZWR1Y3Rpb247XG4gICAgICB2YXIgdXNlRmlyc3Q7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgdXNlRmlyc3QgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVkdWN0aW9uID0gaW5pdGlhbFJlZHVjdGlvbjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uKHYsIGssIGMpICB7XG4gICAgICAgIGlmICh1c2VGaXJzdCkge1xuICAgICAgICAgIHVzZUZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgcmVkdWN0aW9uID0gdjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWR1Y3Rpb24gPSByZWR1Y2VyLmNhbGwoY29udGV4dCwgcmVkdWN0aW9uLCB2LCBrLCBjKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVkdWN0aW9uO1xuICAgIH0sXG5cbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24ocmVkdWNlciwgaW5pdGlhbFJlZHVjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIHJldmVyc2VkID0gdGhpcy50b0tleWVkU2VxKCkucmV2ZXJzZSgpO1xuICAgICAgcmV0dXJuIHJldmVyc2VkLnJlZHVjZS5hcHBseShyZXZlcnNlZCwgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgcmV2ZXJzZUZhY3RvcnkodGhpcywgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBzbGljZTogZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNsaWNlRmFjdG9yeSh0aGlzLCBiZWdpbiwgZW5kLCB0cnVlKSk7XG4gICAgfSxcblxuICAgIHNvbWU6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuICF0aGlzLmV2ZXJ5KG5vdChwcmVkaWNhdGUpLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgc29ydDogZnVuY3Rpb24oY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IpKTtcbiAgICB9LFxuXG4gICAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMpO1xuICAgIH0sXG5cblxuICAgIC8vICMjIyBNb3JlIHNlcXVlbnRpYWwgbWV0aG9kc1xuXG4gICAgYnV0TGFzdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zbGljZSgwLCAtMSk7XG4gICAgfSxcblxuICAgIGlzRW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkID8gdGhpcy5zaXplID09PSAwIDogIXRoaXMuc29tZShmdW5jdGlvbigpICB7cmV0dXJuIHRydWV9KTtcbiAgICB9LFxuXG4gICAgY291bnQ6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIGVuc3VyZVNpemUoXG4gICAgICAgIHByZWRpY2F0ZSA/IHRoaXMudG9TZXEoKS5maWx0ZXIocHJlZGljYXRlLCBjb250ZXh0KSA6IHRoaXNcbiAgICAgICk7XG4gICAgfSxcblxuICAgIGNvdW50Qnk6IGZ1bmN0aW9uKGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBjb3VudEJ5RmFjdG9yeSh0aGlzLCBncm91cGVyLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgZXF1YWxzOiBmdW5jdGlvbihvdGhlcikge1xuICAgICAgcmV0dXJuIGRlZXBFcXVhbCh0aGlzLCBvdGhlcik7XG4gICAgfSxcblxuICAgIGVudHJ5U2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpdGVyYWJsZSA9IHRoaXM7XG4gICAgICBpZiAoaXRlcmFibGUuX2NhY2hlKSB7XG4gICAgICAgIC8vIFdlIGNhY2hlIGFzIGFuIGVudHJpZXMgYXJyYXksIHNvIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgY2FjaGUhXG4gICAgICAgIHJldHVybiBuZXcgQXJyYXlTZXEoaXRlcmFibGUuX2NhY2hlKTtcbiAgICAgIH1cbiAgICAgIHZhciBlbnRyaWVzU2VxdWVuY2UgPSBpdGVyYWJsZS50b1NlcSgpLm1hcChlbnRyeU1hcHBlcikudG9JbmRleGVkU2VxKCk7XG4gICAgICBlbnRyaWVzU2VxdWVuY2UuZnJvbUVudHJ5U2VxID0gZnVuY3Rpb24oKSAge3JldHVybiBpdGVyYWJsZS50b1NlcSgpfTtcbiAgICAgIHJldHVybiBlbnRyaWVzU2VxdWVuY2U7XG4gICAgfSxcblxuICAgIGZpbHRlck5vdDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobm90KHByZWRpY2F0ZSksIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBmaW5kTGFzdDogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0LCBub3RTZXRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMudG9LZXllZFNlcSgpLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSwgY29udGV4dCwgbm90U2V0VmFsdWUpO1xuICAgIH0sXG5cbiAgICBmaXJzdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kKHJldHVyblRydWUpO1xuICAgIH0sXG5cbiAgICBmbGF0TWFwOiBmdW5jdGlvbihtYXBwZXIsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGF0TWFwRmFjdG9yeSh0aGlzLCBtYXBwZXIsIGNvbnRleHQpKTtcbiAgICB9LFxuXG4gICAgZmxhdHRlbjogZnVuY3Rpb24oZGVwdGgpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGF0dGVuRmFjdG9yeSh0aGlzLCBkZXB0aCwgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBmcm9tRW50cnlTZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBGcm9tRW50cmllc1NlcXVlbmNlKHRoaXMpO1xuICAgIH0sXG5cbiAgICBnZXQ6IGZ1bmN0aW9uKHNlYXJjaEtleSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmQoZnVuY3Rpb24oXywga2V5KSAge3JldHVybiBpcyhrZXksIHNlYXJjaEtleSl9LCB1bmRlZmluZWQsIG5vdFNldFZhbHVlKTtcbiAgICB9LFxuXG4gICAgZ2V0SW46IGZ1bmN0aW9uKHNlYXJjaEtleVBhdGgsIG5vdFNldFZhbHVlKSB7XG4gICAgICB2YXIgbmVzdGVkID0gdGhpcztcbiAgICAgIC8vIE5vdGU6IGluIGFuIEVTNiBlbnZpcm9ubWVudCwgd2Ugd291bGQgcHJlZmVyOlxuICAgICAgLy8gZm9yICh2YXIga2V5IG9mIHNlYXJjaEtleVBhdGgpIHtcbiAgICAgIHZhciBpdGVyID0gZm9yY2VJdGVyYXRvcihzZWFyY2hLZXlQYXRoKTtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXIubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIHZhciBrZXkgPSBzdGVwLnZhbHVlO1xuICAgICAgICBuZXN0ZWQgPSBuZXN0ZWQgJiYgbmVzdGVkLmdldCA/IG5lc3RlZC5nZXQoa2V5LCBOT1RfU0VUKSA6IE5PVF9TRVQ7XG4gICAgICAgIGlmIChuZXN0ZWQgPT09IE5PVF9TRVQpIHtcbiAgICAgICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXN0ZWQ7XG4gICAgfSxcblxuICAgIGdyb3VwQnk6IGZ1bmN0aW9uKGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBncm91cEJ5RmFjdG9yeSh0aGlzLCBncm91cGVyLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgaGFzOiBmdW5jdGlvbihzZWFyY2hLZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldChzZWFyY2hLZXksIE5PVF9TRVQpICE9PSBOT1RfU0VUO1xuICAgIH0sXG5cbiAgICBoYXNJbjogZnVuY3Rpb24oc2VhcmNoS2V5UGF0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0SW4oc2VhcmNoS2V5UGF0aCwgTk9UX1NFVCkgIT09IE5PVF9TRVQ7XG4gICAgfSxcblxuICAgIGlzU3Vic2V0OiBmdW5jdGlvbihpdGVyKSB7XG4gICAgICBpdGVyID0gdHlwZW9mIGl0ZXIuY29udGFpbnMgPT09ICdmdW5jdGlvbicgPyBpdGVyIDogSXRlcmFibGUoaXRlcik7XG4gICAgICByZXR1cm4gdGhpcy5ldmVyeShmdW5jdGlvbih2YWx1ZSApIHtyZXR1cm4gaXRlci5jb250YWlucyh2YWx1ZSl9KTtcbiAgICB9LFxuXG4gICAgaXNTdXBlcnNldDogZnVuY3Rpb24oaXRlcikge1xuICAgICAgcmV0dXJuIGl0ZXIuaXNTdWJzZXQodGhpcyk7XG4gICAgfSxcblxuICAgIGtleVNlcTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50b1NlcSgpLm1hcChrZXlNYXBwZXIpLnRvSW5kZXhlZFNlcSgpO1xuICAgIH0sXG5cbiAgICBsYXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLmZpcnN0KCk7XG4gICAgfSxcblxuICAgIG1heDogZnVuY3Rpb24oY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvcik7XG4gICAgfSxcblxuICAgIG1heEJ5OiBmdW5jdGlvbihtYXBwZXIsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiBtYXhGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IsIG1hcHBlcik7XG4gICAgfSxcblxuICAgIG1pbjogZnVuY3Rpb24oY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvciA/IG5lZyhjb21wYXJhdG9yKSA6IGRlZmF1bHROZWdDb21wYXJhdG9yKTtcbiAgICB9LFxuXG4gICAgbWluQnk6IGZ1bmN0aW9uKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvciA/IG5lZyhjb21wYXJhdG9yKSA6IGRlZmF1bHROZWdDb21wYXJhdG9yLCBtYXBwZXIpO1xuICAgIH0sXG5cbiAgICByZXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnNsaWNlKDEpO1xuICAgIH0sXG5cbiAgICBza2lwOiBmdW5jdGlvbihhbW91bnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnNsaWNlKE1hdGgubWF4KDAsIGFtb3VudCkpO1xuICAgIH0sXG5cbiAgICBza2lwTGFzdDogZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgdGhpcy50b1NlcSgpLnJldmVyc2UoKS5za2lwKGFtb3VudCkucmV2ZXJzZSgpKTtcbiAgICB9LFxuXG4gICAgc2tpcFdoaWxlOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBza2lwV2hpbGVGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgdHJ1ZSkpO1xuICAgIH0sXG5cbiAgICBza2lwVW50aWw6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2tpcFdoaWxlKG5vdChwcmVkaWNhdGUpLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgc29ydEJ5OiBmdW5jdGlvbihtYXBwZXIsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yLCBtYXBwZXIpKTtcbiAgICB9LFxuXG4gICAgdGFrZTogZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5zbGljZSgwLCBNYXRoLm1heCgwLCBhbW91bnQpKTtcbiAgICB9LFxuXG4gICAgdGFrZUxhc3Q6IGZ1bmN0aW9uKGFtb3VudCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHRoaXMudG9TZXEoKS5yZXZlcnNlKCkudGFrZShhbW91bnQpLnJldmVyc2UoKSk7XG4gICAgfSxcblxuICAgIHRha2VXaGlsZTogZnVuY3Rpb24ocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgdGFrZVdoaWxlRmFjdG9yeSh0aGlzLCBwcmVkaWNhdGUsIGNvbnRleHQpKTtcbiAgICB9LFxuXG4gICAgdGFrZVVudGlsOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRha2VXaGlsZShub3QocHJlZGljYXRlKSwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIHZhbHVlU2VxOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvSW5kZXhlZFNlcSgpO1xuICAgIH0sXG5cblxuICAgIC8vICMjIyBIYXNoYWJsZSBPYmplY3RcblxuICAgIGhhc2hDb2RlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9faGFzaCB8fCAodGhpcy5fX2hhc2ggPSBoYXNoSXRlcmFibGUodGhpcykpO1xuICAgIH0sXG5cblxuICAgIC8vICMjIyBJbnRlcm5hbFxuXG4gICAgLy8gYWJzdHJhY3QgX19pdGVyYXRlKGZuLCByZXZlcnNlKVxuXG4gICAgLy8gYWJzdHJhY3QgX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKVxuICB9KTtcblxuICAvLyB2YXIgSVNfSVRFUkFCTEVfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9JVEVSQUJMRV9fQEAnO1xuICAvLyB2YXIgSVNfS0VZRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9LRVlFRF9fQEAnO1xuICAvLyB2YXIgSVNfSU5ERVhFRF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0lOREVYRURfX0BAJztcbiAgLy8gdmFyIElTX09SREVSRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9PUkRFUkVEX19AQCc7XG5cbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICBJdGVyYWJsZVByb3RvdHlwZVtJU19JVEVSQUJMRV9TRU5USU5FTF0gPSB0cnVlO1xuICBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl9TWU1CT0xdID0gSXRlcmFibGVQcm90b3R5cGUudmFsdWVzO1xuICBJdGVyYWJsZVByb3RvdHlwZS5fX3RvSlMgPSBJdGVyYWJsZVByb3RvdHlwZS50b0FycmF5O1xuICBJdGVyYWJsZVByb3RvdHlwZS5fX3RvU3RyaW5nTWFwcGVyID0gcXVvdGVTdHJpbmc7XG4gIEl0ZXJhYmxlUHJvdG90eXBlLmluc3BlY3QgPVxuICBJdGVyYWJsZVByb3RvdHlwZS50b1NvdXJjZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy50b1N0cmluZygpOyB9O1xuICBJdGVyYWJsZVByb3RvdHlwZS5jaGFpbiA9IEl0ZXJhYmxlUHJvdG90eXBlLmZsYXRNYXA7XG5cbiAgLy8gVGVtcG9yYXJ5IHdhcm5pbmcgYWJvdXQgdXNpbmcgbGVuZ3RoXG4gIChmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJdGVyYWJsZVByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFJdGVyYWJsZS5ub0xlbmd0aFdhcm5pbmcpIHtcbiAgICAgICAgICAgIHZhciBzdGFjaztcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgc3RhY2sgPSBlcnJvci5zdGFjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGFjay5pbmRleE9mKCdfd3JhcE9iamVjdCcpID09PSAtMSkge1xuICAgICAgICAgICAgICBjb25zb2xlICYmIGNvbnNvbGUud2FybiAmJiBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgJ2l0ZXJhYmxlLmxlbmd0aCBoYXMgYmVlbiBkZXByZWNhdGVkLCAnK1xuICAgICAgICAgICAgICAgICd1c2UgaXRlcmFibGUuc2l6ZSBvciBpdGVyYWJsZS5jb3VudCgpLiAnK1xuICAgICAgICAgICAgICAgICdUaGlzIHdhcm5pbmcgd2lsbCBiZWNvbWUgYSBzaWxlbnQgZXJyb3IgaW4gYSBmdXR1cmUgdmVyc2lvbi4gJyArXG4gICAgICAgICAgICAgICAgc3RhY2tcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0pKCk7XG5cblxuXG4gIG1peGluKEtleWVkSXRlcmFibGUsIHtcblxuICAgIC8vICMjIyBNb3JlIHNlcXVlbnRpYWwgbWV0aG9kc1xuXG4gICAgZmxpcDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVpZnkodGhpcywgZmxpcEZhY3RvcnkodGhpcykpO1xuICAgIH0sXG5cbiAgICBmaW5kS2V5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHZhciBlbnRyeSA9IHRoaXMuZmluZEVudHJ5KHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgICByZXR1cm4gZW50cnkgJiYgZW50cnlbMF07XG4gICAgfSxcblxuICAgIGZpbmRMYXN0S2V5OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLmZpbmRLZXkocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAga2V5T2Y6IGZ1bmN0aW9uKHNlYXJjaFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kS2V5KGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBpcyh2YWx1ZSwgc2VhcmNoVmFsdWUpfSk7XG4gICAgfSxcblxuICAgIGxhc3RLZXlPZjogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmRMYXN0S2V5KGZ1bmN0aW9uKHZhbHVlICkge3JldHVybiBpcyh2YWx1ZSwgc2VhcmNoVmFsdWUpfSk7XG4gICAgfSxcblxuICAgIG1hcEVudHJpZXM6IGZ1bmN0aW9uKG1hcHBlciwgY29udGV4dCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsXG4gICAgICAgIHRoaXMudG9TZXEoKS5tYXAoXG4gICAgICAgICAgZnVuY3Rpb24odiwgaykgIHtyZXR1cm4gbWFwcGVyLmNhbGwoY29udGV4dCwgW2ssIHZdLCBpdGVyYXRpb25zKyssIHRoaXMkMCl9XG4gICAgICAgICkuZnJvbUVudHJ5U2VxKClcbiAgICAgICk7XG4gICAgfSxcblxuICAgIG1hcEtleXM6IGZ1bmN0aW9uKG1hcHBlciwgY29udGV4dCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsXG4gICAgICAgIHRoaXMudG9TZXEoKS5mbGlwKCkubWFwKFxuICAgICAgICAgIGZ1bmN0aW9uKGssIHYpICB7cmV0dXJuIG1hcHBlci5jYWxsKGNvbnRleHQsIGssIHYsIHRoaXMkMCl9XG4gICAgICAgICkuZmxpcCgpXG4gICAgICApO1xuICAgIH0sXG5cbiAgfSk7XG5cbiAgdmFyIEtleWVkSXRlcmFibGVQcm90b3R5cGUgPSBLZXllZEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgS2V5ZWRJdGVyYWJsZVByb3RvdHlwZVtJU19LRVlFRF9TRU5USU5FTF0gPSB0cnVlO1xuICBLZXllZEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SX1NZTUJPTF0gPSBJdGVyYWJsZVByb3RvdHlwZS5lbnRyaWVzO1xuICBLZXllZEl0ZXJhYmxlUHJvdG90eXBlLl9fdG9KUyA9IEl0ZXJhYmxlUHJvdG90eXBlLnRvT2JqZWN0O1xuICBLZXllZEl0ZXJhYmxlUHJvdG90eXBlLl9fdG9TdHJpbmdNYXBwZXIgPSBmdW5jdGlvbih2LCBrKSAge3JldHVybiBrICsgJzogJyArIHF1b3RlU3RyaW5nKHYpfTtcblxuXG5cbiAgbWl4aW4oSW5kZXhlZEl0ZXJhYmxlLCB7XG5cbiAgICAvLyAjIyMgQ29udmVyc2lvbiB0byBvdGhlciB0eXBlc1xuXG4gICAgdG9LZXllZFNlcTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFRvS2V5ZWRTZXF1ZW5jZSh0aGlzLCBmYWxzZSk7XG4gICAgfSxcblxuXG4gICAgLy8gIyMjIEVTNiBDb2xsZWN0aW9uIG1ldGhvZHMgKEVTNiBBcnJheSBhbmQgTWFwKVxuXG4gICAgZmlsdGVyOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBmaWx0ZXJGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgZmFsc2UpKTtcbiAgICB9LFxuXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHZhciBlbnRyeSA9IHRoaXMuZmluZEVudHJ5KHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgICByZXR1cm4gZW50cnkgPyBlbnRyeVswXSA6IC0xO1xuICAgIH0sXG5cbiAgICBpbmRleE9mOiBmdW5jdGlvbihzZWFyY2hWYWx1ZSkge1xuICAgICAgdmFyIGtleSA9IHRoaXMudG9LZXllZFNlcSgpLmtleU9mKHNlYXJjaFZhbHVlKTtcbiAgICAgIHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/IC0xIDoga2V5O1xuICAgIH0sXG5cbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24oc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLmluZGV4T2Yoc2VhcmNoVmFsdWUpO1xuICAgIH0sXG5cbiAgICByZXZlcnNlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCByZXZlcnNlRmFjdG9yeSh0aGlzLCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICBzbGljZTogZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNsaWNlRmFjdG9yeSh0aGlzLCBiZWdpbiwgZW5kLCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICBzcGxpY2U6IGZ1bmN0aW9uKGluZGV4LCByZW1vdmVOdW0gLyosIC4uLnZhbHVlcyovKSB7XG4gICAgICB2YXIgbnVtQXJncyA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICByZW1vdmVOdW0gPSBNYXRoLm1heChyZW1vdmVOdW0gfCAwLCAwKTtcbiAgICAgIGlmIChudW1BcmdzID09PSAwIHx8IChudW1BcmdzID09PSAyICYmICFyZW1vdmVOdW0pKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaW5kZXggPSByZXNvbHZlQmVnaW4oaW5kZXgsIHRoaXMuc2l6ZSk7XG4gICAgICB2YXIgc3BsaWNlZCA9IHRoaXMuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgcmV0dXJuIHJlaWZ5KFxuICAgICAgICB0aGlzLFxuICAgICAgICBudW1BcmdzID09PSAxID9cbiAgICAgICAgICBzcGxpY2VkIDpcbiAgICAgICAgICBzcGxpY2VkLmNvbmNhdChhcnJDb3B5KGFyZ3VtZW50cywgMiksIHRoaXMuc2xpY2UoaW5kZXggKyByZW1vdmVOdW0pKVxuICAgICAgKTtcbiAgICB9LFxuXG5cbiAgICAvLyAjIyMgTW9yZSBjb2xsZWN0aW9uIG1ldGhvZHNcblxuICAgIGZpbmRMYXN0SW5kZXg6IGZ1bmN0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgdmFyIGtleSA9IHRoaXMudG9LZXllZFNlcSgpLmZpbmRMYXN0S2V5KHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgICByZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgPyAtMSA6IGtleTtcbiAgICB9LFxuXG4gICAgZmlyc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KDApO1xuICAgIH0sXG5cbiAgICBmbGF0dGVuOiBmdW5jdGlvbihkZXB0aCkge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZsYXR0ZW5GYWN0b3J5KHRoaXMsIGRlcHRoLCBmYWxzZSkpO1xuICAgIH0sXG5cbiAgICBnZXQ6IGZ1bmN0aW9uKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgcmV0dXJuIChpbmRleCA8IDAgfHwgKHRoaXMuc2l6ZSA9PT0gSW5maW5pdHkgfHxcbiAgICAgICAgICAodGhpcy5zaXplICE9PSB1bmRlZmluZWQgJiYgaW5kZXggPiB0aGlzLnNpemUpKSkgP1xuICAgICAgICBub3RTZXRWYWx1ZSA6XG4gICAgICAgIHRoaXMuZmluZChmdW5jdGlvbihfLCBrZXkpICB7cmV0dXJuIGtleSA9PT0gaW5kZXh9LCB1bmRlZmluZWQsIG5vdFNldFZhbHVlKTtcbiAgICB9LFxuXG4gICAgaGFzOiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgcmV0dXJuIGluZGV4ID49IDAgJiYgKHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgdGhpcy5zaXplID09PSBJbmZpbml0eSB8fCBpbmRleCA8IHRoaXMuc2l6ZSA6XG4gICAgICAgIHRoaXMuaW5kZXhPZihpbmRleCkgIT09IC0xXG4gICAgICApO1xuICAgIH0sXG5cbiAgICBpbnRlcnBvc2U6IGZ1bmN0aW9uKHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGludGVycG9zZUZhY3RvcnkodGhpcywgc2VwYXJhdG9yKSk7XG4gICAgfSxcblxuICAgIGludGVybGVhdmU6IGZ1bmN0aW9uKC8qLi4uaXRlcmFibGVzKi8pIHtcbiAgICAgIHZhciBpdGVyYWJsZXMgPSBbdGhpc10uY29uY2F0KGFyckNvcHkoYXJndW1lbnRzKSk7XG4gICAgICB2YXIgemlwcGVkID0gemlwV2l0aEZhY3RvcnkodGhpcy50b1NlcSgpLCBJbmRleGVkU2VxLm9mLCBpdGVyYWJsZXMpO1xuICAgICAgdmFyIGludGVybGVhdmVkID0gemlwcGVkLmZsYXR0ZW4odHJ1ZSk7XG4gICAgICBpZiAoemlwcGVkLnNpemUpIHtcbiAgICAgICAgaW50ZXJsZWF2ZWQuc2l6ZSA9IHppcHBlZC5zaXplICogaXRlcmFibGVzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBpbnRlcmxlYXZlZCk7XG4gICAgfSxcblxuICAgIGxhc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KC0xKTtcbiAgICB9LFxuXG4gICAgc2tpcFdoaWxlOiBmdW5jdGlvbihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCBza2lwV2hpbGVGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgZmFsc2UpKTtcbiAgICB9LFxuXG4gICAgemlwOiBmdW5jdGlvbigvKiwgLi4uaXRlcmFibGVzICovKSB7XG4gICAgICB2YXIgaXRlcmFibGVzID0gW3RoaXNdLmNvbmNhdChhcnJDb3B5KGFyZ3VtZW50cykpO1xuICAgICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHppcFdpdGhGYWN0b3J5KHRoaXMsIGRlZmF1bHRaaXBwZXIsIGl0ZXJhYmxlcykpO1xuICAgIH0sXG5cbiAgICB6aXBXaXRoOiBmdW5jdGlvbih6aXBwZXIvKiwgLi4uaXRlcmFibGVzICovKSB7XG4gICAgICB2YXIgaXRlcmFibGVzID0gYXJyQ29weShhcmd1bWVudHMpO1xuICAgICAgaXRlcmFibGVzWzBdID0gdGhpcztcbiAgICAgIHJldHVybiByZWlmeSh0aGlzLCB6aXBXaXRoRmFjdG9yeSh0aGlzLCB6aXBwZXIsIGl0ZXJhYmxlcykpO1xuICAgIH0sXG5cbiAgfSk7XG5cbiAgSW5kZXhlZEl0ZXJhYmxlLnByb3RvdHlwZVtJU19JTkRFWEVEX1NFTlRJTkVMXSA9IHRydWU7XG4gIEluZGV4ZWRJdGVyYWJsZS5wcm90b3R5cGVbSVNfT1JERVJFRF9TRU5USU5FTF0gPSB0cnVlO1xuXG5cblxuICBtaXhpbihTZXRJdGVyYWJsZSwge1xuXG4gICAgLy8gIyMjIEVTNiBDb2xsZWN0aW9uIG1ldGhvZHMgKEVTNiBBcnJheSBhbmQgTWFwKVxuXG4gICAgZ2V0OiBmdW5jdGlvbih2YWx1ZSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyh2YWx1ZSkgPyB2YWx1ZSA6IG5vdFNldFZhbHVlO1xuICAgIH0sXG5cbiAgICBjb250YWluczogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyh2YWx1ZSk7XG4gICAgfSxcblxuXG4gICAgLy8gIyMjIE1vcmUgc2VxdWVudGlhbCBtZXRob2RzXG5cbiAgICBrZXlTZXE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWVTZXEoKTtcbiAgICB9LFxuXG4gIH0pO1xuXG4gIFNldEl0ZXJhYmxlLnByb3RvdHlwZS5oYXMgPSBJdGVyYWJsZVByb3RvdHlwZS5jb250YWlucztcblxuXG4gIC8vIE1peGluIHN1YmNsYXNzZXNcblxuICBtaXhpbihLZXllZFNlcSwgS2V5ZWRJdGVyYWJsZS5wcm90b3R5cGUpO1xuICBtaXhpbihJbmRleGVkU2VxLCBJbmRleGVkSXRlcmFibGUucHJvdG90eXBlKTtcbiAgbWl4aW4oU2V0U2VxLCBTZXRJdGVyYWJsZS5wcm90b3R5cGUpO1xuXG4gIG1peGluKEtleWVkQ29sbGVjdGlvbiwgS2V5ZWRJdGVyYWJsZS5wcm90b3R5cGUpO1xuICBtaXhpbihJbmRleGVkQ29sbGVjdGlvbiwgSW5kZXhlZEl0ZXJhYmxlLnByb3RvdHlwZSk7XG4gIG1peGluKFNldENvbGxlY3Rpb24sIFNldEl0ZXJhYmxlLnByb3RvdHlwZSk7XG5cblxuICAvLyAjcHJhZ21hIEhlbHBlciBmdW5jdGlvbnNcblxuICBmdW5jdGlvbiBrZXlNYXBwZXIodiwgaykge1xuICAgIHJldHVybiBrO1xuICB9XG5cbiAgZnVuY3Rpb24gZW50cnlNYXBwZXIodiwgaykge1xuICAgIHJldHVybiBbaywgdl07XG4gIH1cblxuICBmdW5jdGlvbiBub3QocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBuZWcocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIC1wcmVkaWNhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBxdW90ZVN0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0WmlwcGVyKCkge1xuICAgIHJldHVybiBhcnJDb3B5KGFyZ3VtZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0TmVnQ29tcGFyYXRvcihhLCBiKSB7XG4gICAgcmV0dXJuIGEgPCBiID8gMSA6IGEgPiBiID8gLTEgOiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzaEl0ZXJhYmxlKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlLnNpemUgPT09IEluZmluaXR5KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdmFyIG9yZGVyZWQgPSBpc09yZGVyZWQoaXRlcmFibGUpO1xuICAgIHZhciBrZXllZCA9IGlzS2V5ZWQoaXRlcmFibGUpO1xuICAgIHZhciBoID0gb3JkZXJlZCA/IDEgOiAwO1xuICAgIHZhciBzaXplID0gaXRlcmFibGUuX19pdGVyYXRlKFxuICAgICAga2V5ZWQgP1xuICAgICAgICBvcmRlcmVkID9cbiAgICAgICAgICBmdW5jdGlvbih2LCBrKSAgeyBoID0gMzEgKiBoICsgaGFzaE1lcmdlKGhhc2godiksIGhhc2goaykpIHwgMDsgfSA6XG4gICAgICAgICAgZnVuY3Rpb24odiwgaykgIHsgaCA9IGggKyBoYXNoTWVyZ2UoaGFzaCh2KSwgaGFzaChrKSkgfCAwOyB9IDpcbiAgICAgICAgb3JkZXJlZCA/XG4gICAgICAgICAgZnVuY3Rpb24odiApIHsgaCA9IDMxICogaCArIGhhc2godikgfCAwOyB9IDpcbiAgICAgICAgICBmdW5jdGlvbih2ICkgeyBoID0gaCArIGhhc2godikgfCAwOyB9XG4gICAgKTtcbiAgICByZXR1cm4gbXVybXVySGFzaE9mU2l6ZShzaXplLCBoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG11cm11ckhhc2hPZlNpemUoc2l6ZSwgaCkge1xuICAgIGggPSBNYXRoX19pbXVsKGgsIDB4Q0M5RTJENTEpO1xuICAgIGggPSBNYXRoX19pbXVsKGggPDwgMTUgfCBoID4+PiAtMTUsIDB4MUI4NzM1OTMpO1xuICAgIGggPSBNYXRoX19pbXVsKGggPDwgMTMgfCBoID4+PiAtMTMsIDUpO1xuICAgIGggPSAoaCArIDB4RTY1NDZCNjQgfCAwKSBeIHNpemU7XG4gICAgaCA9IE1hdGhfX2ltdWwoaCBeIGggPj4+IDE2LCAweDg1RUJDQTZCKTtcbiAgICBoID0gTWF0aF9faW11bChoIF4gaCA+Pj4gMTMsIDB4QzJCMkFFMzUpO1xuICAgIGggPSBzbWkoaCBeIGggPj4+IDE2KTtcbiAgICByZXR1cm4gaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc2hNZXJnZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgXiBiICsgMHg5RTM3NzlCOSArIChhIDw8IDYpICsgKGEgPj4gMikgfCAwOyAvLyBpbnRcbiAgfVxuXG4gIHZhciBJbW11dGFibGUgPSB7XG5cbiAgICBJdGVyYWJsZTogSXRlcmFibGUsXG5cbiAgICBTZXE6IFNlcSxcbiAgICBDb2xsZWN0aW9uOiBDb2xsZWN0aW9uLFxuICAgIE1hcDogTWFwLFxuICAgIE9yZGVyZWRNYXA6IE9yZGVyZWRNYXAsXG4gICAgTGlzdDogTGlzdCxcbiAgICBTdGFjazogU3RhY2ssXG4gICAgU2V0OiBTZXQsXG4gICAgT3JkZXJlZFNldDogT3JkZXJlZFNldCxcblxuICAgIFJlY29yZDogUmVjb3JkLFxuICAgIFJhbmdlOiBSYW5nZSxcbiAgICBSZXBlYXQ6IFJlcGVhdCxcblxuICAgIGlzOiBpcyxcbiAgICBmcm9tSlM6IGZyb21KUyxcblxuICB9O1xuXG4gIHJldHVybiBJbW11dGFibGU7XG5cbn0pKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9pbW11dGFibGUvZGlzdC9pbW11dGFibGUuanNcbiAqKiBtb2R1bGUgaWQgPSA5NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cblxudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnanNvbnAnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpzb25wO1xuXG4vKipcbiAqIENhbGxiYWNrIGluZGV4LlxuICovXG5cbnZhciBjb3VudCA9IDA7XG5cbi8qKlxuICogTm9vcCBmdW5jdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBub29wKCl7fVxuXG4vKipcbiAqIEpTT05QIGhhbmRsZXJcbiAqXG4gKiBPcHRpb25zOlxuICogIC0gcGFyYW0ge1N0cmluZ30gcXMgcGFyYW1ldGVyIChgY2FsbGJhY2tgKVxuICogIC0gdGltZW91dCB7TnVtYmVyfSBob3cgbG9uZyBhZnRlciBhIHRpbWVvdXQgZXJyb3IgaXMgZW1pdHRlZCAoYDYwMDAwYClcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge09iamVjdHxGdW5jdGlvbn0gb3B0aW9uYWwgb3B0aW9ucyAvIGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25hbCBjYWxsYmFja1xuICovXG5cbmZ1bmN0aW9uIGpzb25wKHVybCwgb3B0cywgZm4pe1xuICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2Ygb3B0cykge1xuICAgIGZuID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cbiAgaWYgKCFvcHRzKSBvcHRzID0ge307XG5cbiAgdmFyIHByZWZpeCA9IG9wdHMucHJlZml4IHx8ICdfX2pwJztcbiAgdmFyIHBhcmFtID0gb3B0cy5wYXJhbSB8fCAnY2FsbGJhY2snO1xuICB2YXIgdGltZW91dCA9IG51bGwgIT0gb3B0cy50aW1lb3V0ID8gb3B0cy50aW1lb3V0IDogNjAwMDA7XG4gIHZhciBlbmMgPSBlbmNvZGVVUklDb21wb25lbnQ7XG4gIHZhciB0YXJnZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF0gfHwgZG9jdW1lbnQuaGVhZDtcbiAgdmFyIHNjcmlwdDtcbiAgdmFyIHRpbWVyO1xuXG4gIC8vIGdlbmVyYXRlIGEgdW5pcXVlIGlkIGZvciB0aGlzIHJlcXVlc3RcbiAgdmFyIGlkID0gcHJlZml4ICsgKGNvdW50KyspO1xuXG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICBjbGVhbnVwKCk7XG4gICAgICBpZiAoZm4pIGZuKG5ldyBFcnJvcignVGltZW91dCcpKTtcbiAgICB9LCB0aW1lb3V0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKXtcbiAgICBpZiAoc2NyaXB0LnBhcmVudE5vZGUpIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgd2luZG93W2lkXSA9IG5vb3A7XG4gICAgaWYgKHRpbWVyKSBjbGVhclRpbWVvdXQodGltZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCl7XG4gICAgaWYgKHdpbmRvd1tpZF0pIHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICB9XG4gIH1cblxuICB3aW5kb3dbaWRdID0gZnVuY3Rpb24oZGF0YSl7XG4gICAgZGVidWcoJ2pzb25wIGdvdCcsIGRhdGEpO1xuICAgIGNsZWFudXAoKTtcbiAgICBpZiAoZm4pIGZuKG51bGwsIGRhdGEpO1xuICB9O1xuXG4gIC8vIGFkZCBxcyBjb21wb25lbnRcbiAgdXJsICs9ICh+dXJsLmluZGV4T2YoJz8nKSA/ICcmJyA6ICc/JykgKyBwYXJhbSArICc9JyArIGVuYyhpZCk7XG4gIHVybCA9IHVybC5yZXBsYWNlKCc/JicsICc/Jyk7XG5cbiAgZGVidWcoJ2pzb25wIHJlcSBcIiVzXCInLCB1cmwpO1xuXG4gIC8vIGNyZWF0ZSBzY3JpcHRcbiAgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gIHNjcmlwdC5zcmMgPSB1cmw7XG4gIHRhcmdldC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIHRhcmdldCk7XG5cbiAgcmV0dXJuIGNhbmNlbDtcbn1cblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2pzb25wL2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gOTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5cbi8qKlxuICogVXNlIGNocm9tZS5zdG9yYWdlLmxvY2FsIGlmIHdlIGFyZSBpbiBhbiBhcHBcbiAqL1xuXG52YXIgc3RvcmFnZTtcblxuaWYgKHR5cGVvZiBjaHJvbWUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjaHJvbWUuc3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCcpXG4gIHN0b3JhZ2UgPSBjaHJvbWUuc3RvcmFnZS5sb2NhbDtcbmVsc2VcbiAgc3RvcmFnZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnbGlnaHRzZWFncmVlbicsXG4gICdmb3Jlc3RncmVlbicsXG4gICdnb2xkZW5yb2QnLFxuICAnZG9kZ2VyYmx1ZScsXG4gICdkYXJrb3JjaGlkJyxcbiAgJ2NyaW1zb24nXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgcmV0dXJuICgnV2Via2l0QXBwZWFyYW5jZScgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKSB8fFxuICAgIC8vIGlzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcbiAgICAod2luZG93LmNvbnNvbGUgJiYgKGNvbnNvbGUuZmlyZWJ1ZyB8fCAoY29uc29sZS5leGNlcHRpb24gJiYgY29uc29sZS50YWJsZSkpKSB8fFxuICAgIC8vIGlzIGZpcmVmb3ggPj0gdjMxP1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICAgIChuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncygpIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybiBhcmdzO1xuXG4gIHZhciBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcbiAgYXJncyA9IFthcmdzWzBdLCBjLCAnY29sb3I6IGluaGVyaXQnXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncywgMSkpO1xuXG4gIC8vIHRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG4gIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cbiAgLy8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0QyA9IDA7XG4gIGFyZ3NbMF0ucmVwbGFjZSgvJVthLXolXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIGlmICgnJSUnID09PSBtYXRjaCkgcmV0dXJuO1xuICAgIGluZGV4Kys7XG4gICAgaWYgKCclYycgPT09IG1hdGNoKSB7XG4gICAgICAvLyB3ZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcbiAgICAgIC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG4gICAgICBsYXN0QyA9IGluZGV4O1xuICAgIH1cbiAgfSk7XG5cbiAgYXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xuICByZXR1cm4gYXJncztcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIC8vIHRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG4gIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG4gIHJldHVybiAnb2JqZWN0JyA9PT0gdHlwZW9mIGNvbnNvbGVcbiAgICAmJiBjb25zb2xlLmxvZ1xuICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgICBzdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0b3JhZ2UuZGVidWcgPSBuYW1lc3BhY2VzO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHZhciByO1xuICB0cnkge1xuICAgIHIgPSBzdG9yYWdlLmRlYnVnO1xuICB9IGNhdGNoKGUpIHt9XG4gIHJldHVybiByO1xufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuXG4gKi9cblxuZXhwb3J0cy5lbmFibGUobG9hZCgpKTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2pzb25wL34vZGVidWcvYnJvd3Nlci5qc1xuICoqIG1vZHVsZSBpZCA9IDk3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyY2FzZWQgbGV0dGVyLCBpLmUuIFwiblwiLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycyA9IHt9O1xuXG4vKipcbiAqIFByZXZpb3VzbHkgYXNzaWduZWQgY29sb3IuXG4gKi9cblxudmFyIHByZXZDb2xvciA9IDA7XG5cbi8qKlxuICogUHJldmlvdXMgbG9nIHRpbWVzdGFtcC5cbiAqL1xuXG52YXIgcHJldlRpbWU7XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKlxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2VsZWN0Q29sb3IoKSB7XG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1twcmV2Q29sb3IrKyAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlYnVnKG5hbWVzcGFjZSkge1xuXG4gIC8vIGRlZmluZSB0aGUgYGRpc2FibGVkYCB2ZXJzaW9uXG4gIGZ1bmN0aW9uIGRpc2FibGVkKCkge1xuICB9XG4gIGRpc2FibGVkLmVuYWJsZWQgPSBmYWxzZTtcblxuICAvLyBkZWZpbmUgdGhlIGBlbmFibGVkYCB2ZXJzaW9uXG4gIGZ1bmN0aW9uIGVuYWJsZWQoKSB7XG5cbiAgICB2YXIgc2VsZiA9IGVuYWJsZWQ7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIGFkZCB0aGUgYGNvbG9yYCBpZiBub3Qgc2V0XG4gICAgaWYgKG51bGwgPT0gc2VsZi51c2VDb2xvcnMpIHNlbGYudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtcbiAgICBpZiAobnVsbCA9PSBzZWxmLmNvbG9yICYmIHNlbGYudXNlQ29sb3JzKSBzZWxmLmNvbG9yID0gc2VsZWN0Q29sb3IoKTtcblxuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblxuICAgIGFyZ3NbMF0gPSBleHBvcnRzLmNvZXJjZShhcmdzWzBdKTtcblxuICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGFyZ3NbMF0pIHtcbiAgICAgIC8vIGFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVvXG4gICAgICBhcmdzID0gWyclbyddLmNvbmNhdChhcmdzKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16JV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmZvcm1hdEFyZ3MpIHtcbiAgICAgIGFyZ3MgPSBleHBvcnRzLmZvcm1hdEFyZ3MuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuICAgIHZhciBsb2dGbiA9IGVuYWJsZWQubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cbiAgZW5hYmxlZC5lbmFibGVkID0gdHJ1ZTtcblxuICB2YXIgZm4gPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKSA/IGVuYWJsZWQgOiBkaXNhYmxlZDtcblxuICBmbi5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG5cbiAgcmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgZXhwb3J0cy5zYXZlKG5hbWVzcGFjZXMpO1xuXG4gIHZhciBzcGxpdCA9IChuYW1lc3BhY2VzIHx8ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2pzb25wL34vZGVidWcvZGVidWcuanNcbiAqKiBtb2R1bGUgaWQgPSA5OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucyl7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIHZhbCkgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIHJldHVybiBvcHRpb25zLmxvbmdcbiAgICA/IGxvbmcodmFsKVxuICAgIDogc2hvcnQodmFsKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtc3xzZWNvbmRzP3xzfG1pbnV0ZXM/fG18aG91cnM/fGh8ZGF5cz98ZHx5ZWFycz98eSk/JC9pLmV4ZWMoc3RyKTtcbiAgaWYgKCFtYXRjaCkgcmV0dXJuO1xuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2hvcnQobXMpIHtcbiAgaWYgKG1zID49IGQpIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIGlmIChtcyA+PSBoKSByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICBpZiAobXMgPj0gbSkgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgaWYgKG1zID49IHMpIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb25nKG1zKSB7XG4gIHJldHVybiBwbHVyYWwobXMsIGQsICdkYXknKVxuICAgIHx8IHBsdXJhbChtcywgaCwgJ2hvdXInKVxuICAgIHx8IHBsdXJhbChtcywgbSwgJ21pbnV0ZScpXG4gICAgfHwgcGx1cmFsKG1zLCBzLCAnc2Vjb25kJylcbiAgICB8fCBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xuICBpZiAobXMgPCBuKSByZXR1cm47XG4gIGlmIChtcyA8IG4gKiAxLjUpIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICByZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyAnICcgKyBuYW1lICsgJ3MnO1xufVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vanNvbnAvfi9kZWJ1Zy9+L21zL2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gOTlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBwU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4vbGliL2tleXMuanMnKTtcbnZhciBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vbGliL2lzX2FyZ3VtZW50cy5qcycpO1xuXG52YXIgZGVlcEVxdWFsID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYWN0dWFsLCBleHBlY3RlZCwgb3B0cykge1xuICBpZiAoIW9wdHMpIG9wdHMgPSB7fTtcbiAgLy8gNy4xLiBBbGwgaWRlbnRpY2FsIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4gIGlmIChhY3R1YWwgPT09IGV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG5cbiAgfSBlbHNlIGlmIChhY3R1YWwgaW5zdGFuY2VvZiBEYXRlICYmIGV4cGVjdGVkIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgIHJldHVybiBhY3R1YWwuZ2V0VGltZSgpID09PSBleHBlY3RlZC5nZXRUaW1lKCk7XG5cbiAgLy8gNy4zLiBPdGhlciBwYWlycyB0aGF0IGRvIG5vdCBib3RoIHBhc3MgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnLFxuICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LlxuICB9IGVsc2UgaWYgKHR5cGVvZiBhY3R1YWwgIT0gJ29iamVjdCcgJiYgdHlwZW9mIGV4cGVjdGVkICE9ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9wdHMuc3RyaWN0ID8gYWN0dWFsID09PSBleHBlY3RlZCA6IGFjdHVhbCA9PSBleHBlY3RlZDtcblxuICAvLyA3LjQuIEZvciBhbGwgb3RoZXIgT2JqZWN0IHBhaXJzLCBpbmNsdWRpbmcgQXJyYXkgb2JqZWN0cywgZXF1aXZhbGVuY2UgaXNcbiAgLy8gZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkXG4gIC8vIHdpdGggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKSwgdGhlIHNhbWUgc2V0IG9mIGtleXNcbiAgLy8gKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeVxuICAvLyBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpc1xuICAvLyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2JqRXF1aXYoYWN0dWFsLCBleHBlY3RlZCwgb3B0cyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWRPck51bGwodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyICh4KSB7XG4gIGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHgubGVuZ3RoICE9PSAnbnVtYmVyJykgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIHguY29weSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgeC5zbGljZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoeC5sZW5ndGggPiAwICYmIHR5cGVvZiB4WzBdICE9PSAnbnVtYmVyJykgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb2JqRXF1aXYoYSwgYiwgb3B0cykge1xuICB2YXIgaSwga2V5O1xuICBpZiAoaXNVbmRlZmluZWRPck51bGwoYSkgfHwgaXNVbmRlZmluZWRPck51bGwoYikpXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvLyBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuXG4gIGlmIChhLnByb3RvdHlwZSAhPT0gYi5wcm90b3R5cGUpIHJldHVybiBmYWxzZTtcbiAgLy9+fn5JJ3ZlIG1hbmFnZWQgdG8gYnJlYWsgT2JqZWN0LmtleXMgdGhyb3VnaCBzY3Jld3kgYXJndW1lbnRzIHBhc3NpbmcuXG4gIC8vICAgQ29udmVydGluZyB0byBhcnJheSBzb2x2ZXMgdGhlIHByb2JsZW0uXG4gIGlmIChpc0FyZ3VtZW50cyhhKSkge1xuICAgIGlmICghaXNBcmd1bWVudHMoYikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgYSA9IHBTbGljZS5jYWxsKGEpO1xuICAgIGIgPSBwU2xpY2UuY2FsbChiKTtcbiAgICByZXR1cm4gZGVlcEVxdWFsKGEsIGIsIG9wdHMpO1xuICB9XG4gIGlmIChpc0J1ZmZlcihhKSkge1xuICAgIGlmICghaXNCdWZmZXIoYikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYVtpXSAhPT0gYltpXSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB0cnkge1xuICAgIHZhciBrYSA9IG9iamVjdEtleXMoYSksXG4gICAgICAgIGtiID0gb2JqZWN0S2V5cyhiKTtcbiAgfSBjYXRjaCAoZSkgey8vaGFwcGVucyB3aGVuIG9uZSBpcyBhIHN0cmluZyBsaXRlcmFsIGFuZCB0aGUgb3RoZXIgaXNuJ3RcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChrZXlzIGluY29ycG9yYXRlc1xuICAvLyBoYXNPd25Qcm9wZXJ0eSlcbiAgaWYgKGthLmxlbmd0aCAhPSBrYi5sZW5ndGgpXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvL3RoZSBzYW1lIHNldCBvZiBrZXlzIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLFxuICBrYS5zb3J0KCk7XG4gIGtiLnNvcnQoKTtcbiAgLy9+fn5jaGVhcCBrZXkgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmIChrYVtpXSAhPSBrYltpXSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvL2VxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleSwgYW5kXG4gIC8vfn5+cG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGtleSA9IGthW2ldO1xuICAgIGlmICghZGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBvcHRzKSkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0eXBlb2YgYSA9PT0gdHlwZW9mIGI7XG59XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9vbW5pc2NpZW50L34vZGVlcC1lcXVhbC9pbmRleC5qc1xuICoqIG1vZHVsZSBpZCA9IDEwMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIHN1cHBvcnRzQXJndW1lbnRzQ2xhc3MgPSAoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudHMpXG59KSgpID09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBzdXBwb3J0c0FyZ3VtZW50c0NsYXNzID8gc3VwcG9ydGVkIDogdW5zdXBwb3J0ZWQ7XG5cbmV4cG9ydHMuc3VwcG9ydGVkID0gc3VwcG9ydGVkO1xuZnVuY3Rpb24gc3VwcG9ydGVkKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG59O1xuXG5leHBvcnRzLnVuc3VwcG9ydGVkID0gdW5zdXBwb3J0ZWQ7XG5mdW5jdGlvbiB1bnN1cHBvcnRlZChvYmplY3Qpe1xuICByZXR1cm4gb2JqZWN0ICYmXG4gICAgdHlwZW9mIG9iamVjdCA9PSAnb2JqZWN0JyAmJlxuICAgIHR5cGVvZiBvYmplY3QubGVuZ3RoID09ICdudW1iZXInICYmXG4gICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ2NhbGxlZScpICYmXG4gICAgIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsICdjYWxsZWUnKSB8fFxuICAgIGZhbHNlO1xufTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L29tbmlzY2llbnQvfi9kZWVwLWVxdWFsL2xpYi9pc19hcmd1bWVudHMuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gJ2Z1bmN0aW9uJ1xuICA/IE9iamVjdC5rZXlzIDogc2hpbTtcblxuZXhwb3J0cy5zaGltID0gc2hpbTtcbmZ1bmN0aW9uIHNoaW0gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSBrZXlzLnB1c2goa2V5KTtcbiAgcmV0dXJuIGtleXM7XG59XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9vbW5pc2NpZW50L34vZGVlcC1lcXVhbC9saWIva2V5cy5qc1xuICoqIG1vZHVsZSBpZCA9IDEwMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBnZXRSb290SW5zdGFuY2VzRnJvbVJlYWN0TW91bnQoUmVhY3RNb3VudCkge1xuICByZXR1cm4gUmVhY3RNb3VudC5faW5zdGFuY2VzQnlSZWFjdFJvb3RJRCB8fCBSZWFjdE1vdW50Ll9pbnN0YW5jZXNCeUNvbnRhaW5lcklEIHx8IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJvb3RJbnN0YW5jZXNGcm9tUmVhY3RNb3VudDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC1ob3QtbG9hZGVyL2dldFJvb3RJbnN0YW5jZXNGcm9tUmVhY3RNb3VudC5qc1xuICoqIG1vZHVsZSBpZCA9IDEwM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjb21wb25lbnQgZnJvbSAnb21uaXNjaWVudCc7XG5pbXBvcnQgVXNlciBmcm9tICcuL3VzZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudCgnQXBwJywgKHtlbnRyaWVzfSkgPT4ge1xuICB2YXIgYWxsVXNlcnMgPSBlbnRyaWVzLm1hcChmdW5jdGlvbihlbnRyeSl7XG4gICAgcmV0dXJuIDxVc2VyIG5hbWU9e2VudHJ5LmdldCgnbmFtZScpfSAvPlxuICB9KS50b0FycmF5KCk7XG5cbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiZmFsdW50aXBwaW5nXCI+XG4gICAge2FsbFVzZXJzfVxuICA8L2Rpdj5cbn0pO1xuXG5cbi8vIG9yIHdpdGgganN4OlxuLy9cbi8vIDxkaXYgY2xhc3NOYW1lPVwiYXBwXCI+XG4vLyAgIHtjb3VudGVyLmRlcmVmKCl9XG4vLyA8L2Rpdj4pO1xuLy9cbi8vIGp1c3QgcmVtZW1iZXIgdG86XG4vL1xuLy8gaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuXG4vLyBlbmFibGUgNnRvNS1sb2FkZXI/ZXhwZXJpbWVudGFsIHRvIHVzZSBnZW5lcmF0b3JzIGV0Yy5cbi8vIGV4cG9ydCBmdW5jdGlvbiAqIGNvdW50ZXIgKCnCoHtcbi8vICAgdmFyIG4gPSAwO1xuLy8gICB3aGlsZSAodHJ1ZSkgeWllbGQgbisrO1xuLy8gfVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9qcy9hcHAuanNcbiAqKi8iLCJpbXBvcnQganNvbnAgZnJvbSAnanNvbnAnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIGNvbnNvbGUubG9nKCdnZXR0aW5nIGRhdGEhJyk7XG4gIGpzb25wKCdodHRwczovL3NwcmVhZHNoZWV0cy5nb29nbGUuY29tL2ZlZWRzL2xpc3QvMUhhQnBPZ2JvMHVIRURjM3pmRkp4X1h3STR5NlpHa1g5STJXdGlpMFZobUUvMS9wdWJsaWMvdmFsdWVzP2FsdD1qc29uLWluLXNjcmlwdCcsIGZ1bmN0aW9uKGVyciwgZGF0YSl7XG4gICAgY29uc29sZS5sb2coZGF0YSk7XG5cbiAgICB2YXIgZW50cmllcyA9IGRhdGEuZmVlZC5lbnRyeS5tYXAoZnVuY3Rpb24oZ29vZ2xlRW50cnkpIHtcbiAgICAgIHZhciBlbnRyeSA9IHtcbiAgICAgICAgbmFtZTogZ29vZ2xlRW50cnkuZ3N4JG5hdm4uJHRcbiAgICAgIH1cblxuICAgICAgdmFyIG1lZGFscyA9IE9iamVjdC5rZXlzKGdvb2dsZUVudHJ5KVxuICAgICAgLmZpbHRlcihmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleS5pbmRleE9mKCdnc3gkcGxhc3NfJykgIT0gLTFcbiAgICAgIH0pXG4gICAgICAubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gZ29vZ2xlRW50cnlba2V5XS4kdFxuICAgICAgfSk7XG5cbiAgICAgIGVudHJ5LmJldHMgPSBbXTtcbiAgICAgIHdoaWxlKG1lZGFscy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGVudHJ5LmJldHMucHVzaCh7XG4gICAgICAgICAgMTogbWVkYWxzWzBdLFxuICAgICAgICAgIDI6IG1lZGFsc1sxXSxcbiAgICAgICAgICAzOiBtZWRhbHNbMl1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWVkYWxzID0gbWVkYWxzLnNsaWNlKDMpO1xuICAgICAgfVxuXG4gICAgICBlbnRyeS5tZWRhbENvdW50ID0ge1xuICAgICAgICBnb2xkOiBnb29nbGVFbnRyeS5nc3gkYW50YWxsZ3VsbC4kdCxcbiAgICAgICAgc2lsdmVyOiBnb29nbGVFbnRyeS5nc3gkYW50YWxsc8O4bHYuJHQsXG4gICAgICAgIGJyb256ZTogZ29vZ2xlRW50cnkuZ3N4JGFudGFsbGJyb25zZS4kdFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZW50cnk7XG4gICAgfSk7XG5cbiAgICBjYWxsYmFjayh7XG4gICAgICBlbnRyaWVzOiBlbnRyaWVzXG4gICAgfSk7XG4gIH0pO1xufVxuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2pzL2dvb2dsZURhdGEuanNcbiAqKi8iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNvbXBvbmVudCBmcm9tICdvbW5pc2NpZW50JztcbmltcG9ydCBpbW1zdHJ1Y3QgZnJvbSAnaW1tc3RydWN0JztcbmltcG9ydCBJbW11dGFibGUgZnJvbSAnaW1tdXRhYmxlJztcblxuaW1wb3J0IEdvb2dsZURhdGEgZnJvbSAnLi9nb29nbGVEYXRhJztcblxuaW1wb3J0IEFwcCBmcm9tICcuL2FwcCc7XG5pbXBvcnQgJy4uL2xlc3MvaW5kZXgubGVzcyc7XG5cbmxldCBkYXRhID0gaW1tc3RydWN0KHtcbiAgZW50cmllczogW11cbn0pO1xuXG5Hb29nbGVEYXRhKGZ1bmN0aW9uKGdvb2dsZURhdGEpIHtcbiAgZGF0YS5jdXJzb3IoKS51cGRhdGUoZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gSW1tdXRhYmxlLmZyb21KUyhnb29nbGVEYXRhKTtcbiAgfSk7XG59KTtcblxubGV0IHJlbmRlciA9ICgpID0+XG4gIFJlYWN0LnJlbmRlcihcbiAgICBBcHAoeyBlbnRyaWVzOiBkYXRhLmN1cnNvcignZW50cmllcycpIH0pLFxuICAgIGRvY3VtZW50LmJvZHkpO1xuXG5yZW5kZXIoKTtcbmRhdGEub24oJ3N3YXAnLCByZW5kZXIpO1xuXG4gIC8vIHNldEludGVydmFsKFxuICAvLyAgICgpID0+IGRhdGEuY3Vyc29yKCkudXBkYXRlKCdjb3VudGVyJywgaSA9PiBpICsgMSksXG4gIC8vICAgMTAwMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2pzL2luZGV4LmpzXG4gKiovIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjb21wb25lbnQgZnJvbSAnb21uaXNjaWVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudCgnVXNlcicsICh7bmFtZX0pID0+IHtcbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwidXNlclwiPlxuICAgIHtuYW1lfVxuICA8L2Rpdj5cbn0pO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9qcy91c2VyLmpzXG4gKiovIiwidmFyIGlzUmVhY3RDbGFzc2lzaCA9IHJlcXVpcmUoJy4vaXNSZWFjdENsYXNzaXNoJyk7XG5cbmZ1bmN0aW9uIGlzUmVhY3RFbGVtZW50aXNoKG9iaikge1xuICBpZiAoIW9iaikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqLnByb3BzKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiZcbiAgICAgICAgIGlzUmVhY3RDbGFzc2lzaChvYmoudHlwZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNSZWFjdEVsZW1lbnRpc2g7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QtaG90LWxvYWRlci9pc1JlYWN0RWxlbWVudGlzaC5qc1xuICoqIG1vZHVsZSBpZCA9IDEwOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL21hc3Rlci9zcmMvY2xhc3MvUmVhY3RDbGFzcy5qcyNMNjM3XG4gKi9cbmZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZChjb21wb25lbnQsIG1ldGhvZCkge1xuICB2YXIgYm91bmRNZXRob2QgPSBtZXRob2QuYmluZChjb21wb25lbnQpO1xuXG4gIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZE1ldGhvZCA9IG1ldGhvZDtcbiAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gbnVsbDtcblxuICB2YXIgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSxcbiAgICAgIF9iaW5kID0gYm91bmRNZXRob2QuYmluZDtcblxuICBib3VuZE1ldGhvZC5iaW5kID0gZnVuY3Rpb24gKG5ld1RoaXMpIHtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgaWYgKG5ld1RoaXMgIT09IGNvbXBvbmVudCAmJiBuZXdUaGlzICE9PSBudWxsKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdiaW5kKCk6IFJlYWN0IGNvbXBvbmVudCBtZXRob2RzIG1heSBvbmx5IGJlIGJvdW5kIHRvIHRoZSAnICtcbiAgICAgICAgJ2NvbXBvbmVudCBpbnN0YW5jZS4gU2VlICcgKyBjb21wb25lbnROYW1lXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWFyZ3MubGVuZ3RoKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdiaW5kKCk6IFlvdSBhcmUgYmluZGluZyBhIGNvbXBvbmVudCBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC4gJyArXG4gICAgICAgICdSZWFjdCBkb2VzIHRoaXMgZm9yIHlvdSBhdXRvbWF0aWNhbGx5IGluIGEgaGlnaC1wZXJmb3JtYW5jZSAnICtcbiAgICAgICAgJ3dheSwgc28geW91IGNhbiBzYWZlbHkgcmVtb3ZlIHRoaXMgY2FsbC4gU2VlICcgKyBjb21wb25lbnROYW1lXG4gICAgICApO1xuICAgICAgcmV0dXJuIGJvdW5kTWV0aG9kO1xuICAgIH1cblxuICAgIHZhciByZWJvdW5kTWV0aG9kID0gX2JpbmQuYXBwbHkoYm91bmRNZXRob2QsIGFyZ3VtZW50cyk7XG4gICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRDb250ZXh0ID0gY29tcG9uZW50O1xuICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gYXJncztcblxuICAgIHJldHVybiByZWJvdW5kTWV0aG9kO1xuICB9O1xuXG4gIHJldHVybiBib3VuZE1ldGhvZDtcbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBhdXRvLWJpbmRpbmcgc2ltaWxhciB0byBob3cgUmVhY3QgZG9lcyBpdC5cbiAqIFNraXBzIGFscmVhZHkgYXV0by1ib3VuZCBtZXRob2RzLlxuICogQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvbWFzdGVyL3NyYy9jbGFzcy9SZWFjdENsYXNzLmpzI0w2NzkuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZEF1dG9CaW5kTWV0aG9kcyhjb21wb25lbnQpIHtcbiAgZm9yICh2YXIgYXV0b0JpbmRLZXkgaW4gY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZE1hcCkge1xuICAgIGlmICghY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZE1hcC5oYXNPd25Qcm9wZXJ0eShhdXRvQmluZEtleSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIFNraXAgYWxyZWFkeSBib3VuZCBtZXRob2RzXG4gICAgaWYgKGNvbXBvbmVudC5oYXNPd25Qcm9wZXJ0eShhdXRvQmluZEtleSkgJiZcbiAgICAgICAgY29tcG9uZW50W2F1dG9CaW5kS2V5XS5fX3JlYWN0Qm91bmRDb250ZXh0ID09PSBjb21wb25lbnQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBtZXRob2QgPSBjb21wb25lbnQuX19yZWFjdEF1dG9CaW5kTWFwW2F1dG9CaW5kS2V5XTtcbiAgICBjb21wb25lbnRbYXV0b0JpbmRLZXldID0gYmluZEF1dG9CaW5kTWV0aG9kKGNvbXBvbmVudCwgbWV0aG9kKTtcbiAgfVxufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC1ob3QtbG9hZGVyL34vcmVhY3QtaG90LWFwaS9tb2R1bGVzL2JpbmRBdXRvQmluZE1ldGhvZHMuanNcbiAqKiBtb2R1bGUgaWQgPSAxMDlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmRBdXRvQmluZE1ldGhvZHMgPSByZXF1aXJlKCcuL2JpbmRBdXRvQmluZE1ldGhvZHMnKTtcblxuLyoqXG4gKiBVcGRhdGVzIGEgUmVhY3QgY29tcG9uZW50IHJlY3Vyc2l2ZWx5LCBzbyBldmVuIGlmIGNoaWxkcmVuIGRlZmluZSBmdW5reVxuICogYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIHRoZXkgYXJlIGZvcmNlZCB0byByZS1yZW5kZXIuXG4gKiBNYWtlcyBzdXJlIHRoYXQgYW55IG5ld2x5IGFkZGVkIG1ldGhvZHMgYXJlIHByb3Blcmx5IGF1dG8tYm91bmQuXG4gKi9cbmZ1bmN0aW9uIGRlZXBGb3JjZVVwZGF0ZShjb21wb25lbnQpIHtcbiAgaWYgKGNvbXBvbmVudC5faW5zdGFuY2UpIHtcbiAgICAvLyBSZWFjdCAwLjEzXG4gICAgY29tcG9uZW50ID0gY29tcG9uZW50Ll9pbnN0YW5jZTtcbiAgfVxuXG4gIGJpbmRBdXRvQmluZE1ldGhvZHMoY29tcG9uZW50KTtcblxuICBpZiAoY29tcG9uZW50LmZvcmNlVXBkYXRlKSB7XG4gICAgY29tcG9uZW50LmZvcmNlVXBkYXRlKCk7XG4gIH1cblxuICBpZiAoY29tcG9uZW50Ll9yZW5kZXJlZENvbXBvbmVudCkge1xuICAgIGRlZXBGb3JjZVVwZGF0ZShjb21wb25lbnQuX3JlbmRlcmVkQ29tcG9uZW50KTtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBjb21wb25lbnQuX3JlbmRlcmVkQ2hpbGRyZW4pIHtcbiAgICBkZWVwRm9yY2VVcGRhdGUoY29tcG9uZW50Ll9yZW5kZXJlZENoaWxkcmVuW2tleV0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVlcEZvcmNlVXBkYXRlO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0LWhvdC1sb2FkZXIvfi9yZWFjdC1ob3QtYXBpL21vZHVsZXMvZGVlcEZvcmNlVXBkYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gMTEwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgZXN0YWJsaXNoZXMgdGhlIGZpcnN0IHByb3RvdHlwZSBwYXNzZWQgdG8gaXRcbiAqIGFzIHRoZSBcInNvdXJjZSBvZiB0cnV0aFwiIGFuZCBwYXRjaGVzIGl0cyBtZXRob2RzIG9uIHN1YnNlcXVlbnQgaW52b2NhdGlvbnMsXG4gKiBhbHNvIHBhdGNoaW5nIGN1cnJlbnQgYW5kIHByZXZpb3VzIHByb3RvdHlwZXMgdG8gZm9yd2FyZCBjYWxscyB0byBpdC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtYWtlQXNzaW1pbGF0ZVByb3RvdHlwZSgpIHtcbiAgdmFyIHN0b3JlZFByb3RvdHlwZSxcbiAgICAgIGtub3duUHJvdG90eXBlcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIHdyYXBNZXRob2Qoa2V5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzdG9yZWRQcm90b3R5cGVba2V5XSkge1xuICAgICAgICByZXR1cm4gc3RvcmVkUHJvdG90eXBlW2tleV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGF0Y2hQcm9wZXJ0eShwcm90bywga2V5KSB7XG4gICAgcHJvdG9ba2V5XSA9IHN0b3JlZFByb3RvdHlwZVtrZXldO1xuXG4gICAgaWYgKHR5cGVvZiBwcm90b1trZXldICE9PSAnZnVuY3Rpb24nIHx8XG4gICAgICBrZXkgPT09ICd0eXBlJyB8fFxuICAgICAga2V5ID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJvdG9ba2V5XSA9IHdyYXBNZXRob2Qoa2V5KTtcblxuICAgIGlmIChzdG9yZWRQcm90b3R5cGVba2V5XS5pc1JlYWN0Q2xhc3NBcHByb3ZlZCkge1xuICAgICAgcHJvdG9ba2V5XS5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA9IHN0b3JlZFByb3RvdHlwZVtrZXldLmlzUmVhY3RDbGFzc0FwcHJvdmVkO1xuICAgIH1cblxuICAgIGlmIChwcm90by5fX3JlYWN0QXV0b0JpbmRNYXAgJiYgcHJvdG8uX19yZWFjdEF1dG9CaW5kTWFwW2tleV0pIHtcbiAgICAgIHByb3RvLl9fcmVhY3RBdXRvQmluZE1hcFtrZXldID0gcHJvdG9ba2V5XTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVTdG9yZWRQcm90b3R5cGUoZnJlc2hQcm90b3R5cGUpIHtcbiAgICBzdG9yZWRQcm90b3R5cGUgPSB7fTtcblxuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGZyZXNoUHJvdG90eXBlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHN0b3JlZFByb3RvdHlwZVtrZXldID0gZnJlc2hQcm90b3R5cGVba2V5XTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29uY2lsZVdpdGhTdG9yZWRQcm90b3R5cGVzKGZyZXNoUHJvdG90eXBlKSB7XG4gICAga25vd25Qcm90b3R5cGVzLnB1c2goZnJlc2hQcm90b3R5cGUpO1xuICAgIGtub3duUHJvdG90eXBlcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm90bykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc3RvcmVkUHJvdG90eXBlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcGF0Y2hQcm9wZXJ0eShwcm90bywga2V5KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGFzc2ltaWxhdGVQcm90b3R5cGUoZnJlc2hQcm90b3R5cGUpIHtcbiAgICBpZiAoZnJlc2hQcm90b3R5cGUuX19pc0Fzc2ltaWxhdGVkQnlSZWFjdEhvdEFQSSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHVwZGF0ZVN0b3JlZFByb3RvdHlwZShmcmVzaFByb3RvdHlwZSk7XG4gICAgcmVjb25jaWxlV2l0aFN0b3JlZFByb3RvdHlwZXMoZnJlc2hQcm90b3R5cGUpO1xuICAgIGZyZXNoUHJvdG90eXBlLl9faXNBc3NpbWlsYXRlZEJ5UmVhY3RIb3RBUEkgPSB0cnVlO1xuICB9O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC1ob3QtbG9hZGVyL34vcmVhY3QtaG90LWFwaS9tb2R1bGVzL21ha2VBc3NpbWlsYXRlUHJvdG90eXBlLmpzXG4gKiogbW9kdWxlIGlkID0gMTExXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtYWtlUGF0Y2hSZWFjdENsYXNzID0gcmVxdWlyZSgnLi9tYWtlUGF0Y2hSZWFjdENsYXNzJyk7XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gaW52b2tlZCwgcGF0Y2hlcyBhIFJlYWN0IGNsYXNzIHdpdGggYSBuZXdcbiAqIHZlcnNpb24gb2YgaXRzZWxmLiBUbyBwYXRjaCBkaWZmZXJlbnQgY2xhc3NlcywgcGFzcyBkaWZmZXJlbnQgSURzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1ha2VNYWtlSG90KGdldFJvb3RJbnN0YW5jZXMpIHtcbiAgaWYgKHR5cGVvZiBnZXRSb290SW5zdGFuY2VzICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBnZXRSb290SW5zdGFuY2VzIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcGF0Y2hlcnMgPSB7fTtcblxuICByZXR1cm4gZnVuY3Rpb24gbWFrZUhvdChOZXh0Q2xhc3MsIHBlcnNpc3RlbnRJZCkge1xuICAgIHBlcnNpc3RlbnRJZCA9IHBlcnNpc3RlbnRJZCB8fCBOZXh0Q2xhc3MuZGlzcGxheU5hbWUgfHwgTmV4dENsYXNzLm5hbWU7XG5cbiAgICBpZiAoIXBlcnNpc3RlbnRJZCkge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgJ0hvdCByZWxvYWQgaXMgZGlzYWJsZWQgZm9yIG9uZSBvZiB5b3VyIHR5cGVzLiBUbyBlbmFibGUgaXQsIHBhc3MgYSAnICtcbiAgICAgICAgJ3N0cmluZyB1bmlxdWVseSBpZGVudGlmeWluZyB0aGlzIGNsYXNzIHdpdGhpbiB0aGlzIGN1cnJlbnQgbW9kdWxlICcgK1xuICAgICAgICAnYXMgYSBzZWNvbmQgcGFyYW1ldGVyIHRvIG1ha2VIb3QuJ1xuICAgICAgKTtcbiAgICAgIHJldHVybiBOZXh0Q2xhc3M7XG4gICAgfVxuXG4gICAgaWYgKCFwYXRjaGVyc1twZXJzaXN0ZW50SWRdKSB7XG4gICAgICBwYXRjaGVyc1twZXJzaXN0ZW50SWRdID0gbWFrZVBhdGNoUmVhY3RDbGFzcyhnZXRSb290SW5zdGFuY2VzKTtcbiAgICB9XG5cbiAgICB2YXIgcGF0Y2hSZWFjdENsYXNzID0gcGF0Y2hlcnNbcGVyc2lzdGVudElkXTtcbiAgICByZXR1cm4gcGF0Y2hSZWFjdENsYXNzKE5leHRDbGFzcyk7XG4gIH07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0LWhvdC1sb2FkZXIvfi9yZWFjdC1ob3QtYXBpL21vZHVsZXMvbWFrZU1ha2VIb3QuanNcbiAqKiBtb2R1bGUgaWQgPSAxMTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxudmFyIG1ha2VBc3NpbWlsYXRlUHJvdG90eXBlID0gcmVxdWlyZSgnLi9tYWtlQXNzaW1pbGF0ZVByb3RvdHlwZScpLFxuICAgIHJlcXVlc3RGb3JjZVVwZGF0ZUFsbCA9IHJlcXVpcmUoJy4vcmVxdWVzdEZvcmNlVXBkYXRlQWxsJyk7XG5cbmZ1bmN0aW9uIGhhc05vblN0dWJUeXBlUHJvcGVydHkoUmVhY3RDbGFzcykge1xuICBpZiAoIVJlYWN0Q2xhc3MuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihSZWFjdENsYXNzLCAndHlwZScpO1xuICBpZiAodHlwZW9mIGRlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGdldFByb3RvdHlwZShSZWFjdENsYXNzKSB7XG4gIHZhciBwcm90b3R5cGUgPSBSZWFjdENsYXNzLnByb3RvdHlwZSxcbiAgICAgIHNlZW1zTGVnaXQgPSBwcm90b3R5cGUgJiYgdHlwZW9mIHByb3RvdHlwZS5yZW5kZXIgPT09ICdmdW5jdGlvbic7XG5cbiAgaWYgKCFzZWVtc0xlZ2l0ICYmIGhhc05vblN0dWJUeXBlUHJvcGVydHkoUmVhY3RDbGFzcykpIHtcbiAgICBwcm90b3R5cGUgPSBSZWFjdENsYXNzLnR5cGUucHJvdG90eXBlO1xuICB9XG5cbiAgcmV0dXJuIHByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIHBhdGNoIFJlYWN0IGNsYXNzIHdpdGggbmV3IHZlcnNpb25zIG9mIGl0c2VsZlxuICogb24gc3Vic2VxdWVudCBpbnZvY2F0aW9ucy4gQm90aCBsZWdhY3kgYW5kIEVTNiBzdHlsZSBjbGFzc2VzIGFyZSBzdXBwb3J0ZWQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWFrZVBhdGNoUmVhY3RDbGFzcyhnZXRSb290SW5zdGFuY2VzKSB7XG4gIHZhciBhc3NpbWlsYXRlUHJvdG90eXBlID0gbWFrZUFzc2ltaWxhdGVQcm90b3R5cGUoKSxcbiAgICAgIEZpcnN0Q2xhc3MgPSBudWxsO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwYXRjaFJlYWN0Q2xhc3MoTmV4dENsYXNzKSB7XG4gICAgdmFyIG5leHRQcm90b3R5cGUgPSBnZXRQcm90b3R5cGUoTmV4dENsYXNzKTtcbiAgICBhc3NpbWlsYXRlUHJvdG90eXBlKG5leHRQcm90b3R5cGUpO1xuXG4gICAgaWYgKEZpcnN0Q2xhc3MpIHtcbiAgICAgIHJlcXVlc3RGb3JjZVVwZGF0ZUFsbChnZXRSb290SW5zdGFuY2VzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gRmlyc3RDbGFzcyB8fCAoRmlyc3RDbGFzcyA9IE5leHRDbGFzcyk7XG4gIH07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0LWhvdC1sb2FkZXIvfi9yZWFjdC1ob3QtYXBpL21vZHVsZXMvbWFrZVBhdGNoUmVhY3RDbGFzcy5qc1xuICoqIG1vZHVsZSBpZCA9IDExM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGRlZXBGb3JjZVVwZGF0ZSA9IHJlcXVpcmUoJy4vZGVlcEZvcmNlVXBkYXRlJyk7XG5cbnZhciBpc1JlcXVlc3RQZW5kaW5nID0gZmFsc2U7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVxdWVzdEZvcmNlVXBkYXRlQWxsKGdldFJvb3RJbnN0YW5jZXMpIHtcbiAgaWYgKGlzUmVxdWVzdFBlbmRpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRm9yY2VzIGRlZXAgcmUtcmVuZGVyIG9mIGFsbCBtb3VudGVkIFJlYWN0IGNvbXBvbmVudHMuXG4gICAqIEhhdCdzIG9mZiB0byBPbWFyIFNrYWxsaSAoQENoZXRhbmUpIGZvciBzdWdnZXN0aW5nIHRoaXMgYXBwcm9hY2g6XG4gICAqIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0NoZXRhbmUvOWEyMzBhOWZkY2RjYTIxYTRlMjlcbiAgICovXG4gIGZ1bmN0aW9uIGZvcmNlVXBkYXRlQWxsKCkge1xuICAgIGlzUmVxdWVzdFBlbmRpbmcgPSBmYWxzZTtcblxuICAgIHZhciByb290SW5zdGFuY2VzID0gZ2V0Um9vdEluc3RhbmNlcygpLFxuICAgICAgICByb290SW5zdGFuY2U7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gcm9vdEluc3RhbmNlcykge1xuICAgICAgaWYgKHJvb3RJbnN0YW5jZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBkZWVwRm9yY2VVcGRhdGUocm9vdEluc3RhbmNlc1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZXRUaW1lb3V0KGZvcmNlVXBkYXRlQWxsKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QtaG90LWxvYWRlci9+L3JlYWN0LWhvdC1hcGkvbW9kdWxlcy9yZXF1ZXN0Rm9yY2VVcGRhdGVBbGwuanNcbiAqKiBtb2R1bGUgaWQgPSAxMTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZShcIi4vRXZlbnRQcm9wYWdhdG9yc1wiKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xudmFyIFN5bnRoZXRpY0lucHV0RXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNJbnB1dEV2ZW50XCIpO1xuXG52YXIga2V5T2YgPSByZXF1aXJlKFwiLi9rZXlPZlwiKTtcblxudmFyIGNhblVzZVRleHRJbnB1dEV2ZW50ID0gKFxuICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiZcbiAgJ1RleHRFdmVudCcgaW4gd2luZG93ICYmXG4gICEoJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQgfHwgaXNQcmVzdG8oKSlcbik7XG5cbi8qKlxuICogT3BlcmEgPD0gMTIgaW5jbHVkZXMgVGV4dEV2ZW50IGluIHdpbmRvdywgYnV0IGRvZXMgbm90IGZpcmVcbiAqIHRleHQgaW5wdXQgZXZlbnRzLiBSZWx5IG9uIGtleXByZXNzIGluc3RlYWQuXG4gKi9cbmZ1bmN0aW9uIGlzUHJlc3RvKCkge1xuICB2YXIgb3BlcmEgPSB3aW5kb3cub3BlcmE7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIG9wZXJhID09PSAnb2JqZWN0JyAmJlxuICAgIHR5cGVvZiBvcGVyYS52ZXJzaW9uID09PSAnZnVuY3Rpb24nICYmXG4gICAgcGFyc2VJbnQob3BlcmEudmVyc2lvbigpLCAxMCkgPD0gMTJcbiAgKTtcbn1cblxudmFyIFNQQUNFQkFSX0NPREUgPSAzMjtcbnZhciBTUEFDRUJBUl9DSEFSID0gU3RyaW5nLmZyb21DaGFyQ29kZShTUEFDRUJBUl9DT0RFKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG4vLyBFdmVudHMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgbmFtZXMuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgYmVmb3JlSW5wdXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQmVmb3JlSW5wdXQ6IG51bGx9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25CZWZvcmVJbnB1dENhcHR1cmU6IG51bGx9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcyxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wVGV4dElucHV0LFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BQYXN0ZVxuICAgIF1cbiAgfVxufTtcblxuLy8gVHJhY2sgY2hhcmFjdGVycyBpbnNlcnRlZCB2aWEga2V5cHJlc3MgYW5kIGNvbXBvc2l0aW9uIGV2ZW50cy5cbnZhciBmYWxsYmFja0NoYXJzID0gbnVsbDtcblxuLy8gVHJhY2sgd2hldGhlciB3ZSd2ZSBldmVyIGhhbmRsZWQgYSBrZXlwcmVzcyBvbiB0aGUgc3BhY2Uga2V5LlxudmFyIGhhc1NwYWNlS2V5cHJlc3MgPSBmYWxzZTtcblxuLyoqXG4gKiBSZXR1cm4gd2hldGhlciBhIG5hdGl2ZSBrZXlwcmVzcyBldmVudCBpcyBhc3N1bWVkIHRvIGJlIGEgY29tbWFuZC5cbiAqIFRoaXMgaXMgcmVxdWlyZWQgYmVjYXVzZSBGaXJlZm94IGZpcmVzIGBrZXlwcmVzc2AgZXZlbnRzIGZvciBrZXkgY29tbWFuZHNcbiAqIChjdXQsIGNvcHksIHNlbGVjdC1hbGwsIGV0Yy4pIGV2ZW4gdGhvdWdoIG5vIGNoYXJhY3RlciBpcyBpbnNlcnRlZC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlwcmVzc0NvbW1hbmQobmF0aXZlRXZlbnQpIHtcbiAgcmV0dXJuIChcbiAgICAobmF0aXZlRXZlbnQuY3RybEtleSB8fCBuYXRpdmVFdmVudC5hbHRLZXkgfHwgbmF0aXZlRXZlbnQubWV0YUtleSkgJiZcbiAgICAvLyBjdHJsS2V5ICYmIGFsdEtleSBpcyBlcXVpdmFsZW50IHRvIEFsdEdyLCBhbmQgaXMgbm90IGEgY29tbWFuZC5cbiAgICAhKG5hdGl2ZUV2ZW50LmN0cmxLZXkgJiYgbmF0aXZlRXZlbnQuYWx0S2V5KVxuICApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBgb25CZWZvcmVJbnB1dGAgZXZlbnQgdG8gbWF0Y2hcbiAqIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMTMxMTA1LyNldmVudHMtaW5wdXRldmVudHMuXG4gKlxuICogVGhpcyBldmVudCBwbHVnaW4gaXMgYmFzZWQgb24gdGhlIG5hdGl2ZSBgdGV4dElucHV0YCBldmVudFxuICogYXZhaWxhYmxlIGluIENocm9tZSwgU2FmYXJpLCBPcGVyYSwgYW5kIElFLiBUaGlzIGV2ZW50IGZpcmVzIGFmdGVyXG4gKiBgb25LZXlQcmVzc2AgYW5kIGBvbkNvbXBvc2l0aW9uRW5kYCwgYnV0IGJlZm9yZSBgb25JbnB1dGAuXG4gKlxuICogYGJlZm9yZUlucHV0YCBpcyBzcGVjJ2QgYnV0IG5vdCBpbXBsZW1lbnRlZCBpbiBhbnkgYnJvd3NlcnMsIGFuZFxuICogdGhlIGBpbnB1dGAgZXZlbnQgZG9lcyBub3QgcHJvdmlkZSBhbnkgdXNlZnVsIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgaGFzXG4gKiBhY3R1YWxseSBiZWVuIGFkZGVkLCBjb250cmFyeSB0byB0aGUgc3BlYy4gVGh1cywgYHRleHRJbnB1dGAgaXMgdGhlIGJlc3RcbiAqIGF2YWlsYWJsZSBldmVudCB0byBpZGVudGlmeSB0aGUgY2hhcmFjdGVycyB0aGF0IGhhdmUgYWN0dWFsbHkgYmVlbiBpbnNlcnRlZFxuICogaW50byB0aGUgdGFyZ2V0IG5vZGUuXG4gKi9cbnZhciBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luID0ge1xuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudCkge1xuXG4gICAgdmFyIGNoYXJzO1xuXG4gICAgaWYgKGNhblVzZVRleHRJbnB1dEV2ZW50KSB7XG4gICAgICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3M6XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogSWYgbmF0aXZlIGB0ZXh0SW5wdXRgIGV2ZW50cyBhcmUgYXZhaWxhYmxlLCBvdXIgZ29hbCBpcyB0byBtYWtlXG4gICAgICAgICAgICogdXNlIG9mIHRoZW0uIEhvd2V2ZXIsIHRoZXJlIGlzIGEgc3BlY2lhbCBjYXNlOiB0aGUgc3BhY2ViYXIga2V5LlxuICAgICAgICAgICAqIEluIFdlYmtpdCwgcHJldmVudGluZyBkZWZhdWx0IG9uIGEgc3BhY2ViYXIgYHRleHRJbnB1dGAgZXZlbnRcbiAgICAgICAgICAgKiBjYW5jZWxzIGNoYXJhY3RlciBpbnNlcnRpb24sIGJ1dCBpdCAqYWxzbyogY2F1c2VzIHRoZSBicm93c2VyXG4gICAgICAgICAgICogdG8gZmFsbCBiYWNrIHRvIGl0cyBkZWZhdWx0IHNwYWNlYmFyIGJlaGF2aW9yIG9mIHNjcm9sbGluZyB0aGVcbiAgICAgICAgICAgKiBwYWdlLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogVHJhY2tpbmcgYXQ6XG4gICAgICAgICAgICogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM1NTEwM1xuICAgICAgICAgICAqXG4gICAgICAgICAgICogVG8gYXZvaWQgdGhpcyBpc3N1ZSwgdXNlIHRoZSBrZXlwcmVzcyBldmVudCBhcyBpZiBubyBgdGV4dElucHV0YFxuICAgICAgICAgICAqIGV2ZW50IGlzIGF2YWlsYWJsZS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB2YXIgd2hpY2ggPSBuYXRpdmVFdmVudC53aGljaDtcbiAgICAgICAgICBpZiAod2hpY2ggIT09IFNQQUNFQkFSX0NPREUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBoYXNTcGFjZUtleXByZXNzID0gdHJ1ZTtcbiAgICAgICAgICBjaGFycyA9IFNQQUNFQkFSX0NIQVI7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRleHRJbnB1dDpcbiAgICAgICAgICAvLyBSZWNvcmQgdGhlIGNoYXJhY3RlcnMgdG8gYmUgYWRkZWQgdG8gdGhlIERPTS5cbiAgICAgICAgICBjaGFycyA9IG5hdGl2ZUV2ZW50LmRhdGE7XG5cbiAgICAgICAgICAvLyBJZiBpdCdzIGEgc3BhY2ViYXIgY2hhcmFjdGVyLCBhc3N1bWUgdGhhdCB3ZSBoYXZlIGFscmVhZHkgaGFuZGxlZFxuICAgICAgICAgIC8vIGl0IGF0IHRoZSBrZXlwcmVzcyBsZXZlbCBhbmQgYmFpbCBpbW1lZGlhdGVseS4gQW5kcm9pZCBDaHJvbWVcbiAgICAgICAgICAvLyBkb2Vzbid0IGdpdmUgdXMga2V5Y29kZXMsIHNvIHdlIG5lZWQgdG8gYmxhY2tsaXN0IGl0LlxuICAgICAgICAgIGlmIChjaGFycyA9PT0gU1BBQ0VCQVJfQ0hBUiAmJiBoYXNTcGFjZUtleXByZXNzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gT3RoZXJ3aXNlLCBjYXJyeSBvbi5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIC8vIEZvciBvdGhlciBuYXRpdmUgZXZlbnQgdHlwZXMsIGRvIG5vdGhpbmcuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wUGFzdGU6XG4gICAgICAgICAgLy8gSWYgYSBwYXN0ZSBldmVudCBvY2N1cnMgYWZ0ZXIgYSBrZXlwcmVzcywgdGhyb3cgb3V0IHRoZSBpbnB1dFxuICAgICAgICAgIC8vIGNoYXJzLiBQYXN0ZSBldmVudHMgc2hvdWxkIG5vdCBsZWFkIHRvIEJlZm9yZUlucHV0IGV2ZW50cy5cbiAgICAgICAgICBmYWxsYmFja0NoYXJzID0gbnVsbDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEFzIG9mIHYyNywgRmlyZWZveCBtYXkgZmlyZSBrZXlwcmVzcyBldmVudHMgZXZlbiB3aGVuIG5vIGNoYXJhY3RlclxuICAgICAgICAgICAqIHdpbGwgYmUgaW5zZXJ0ZWQuIEEgZmV3IHBvc3NpYmlsaXRpZXM6XG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiAtIGB3aGljaGAgaXMgYDBgLiBBcnJvdyBrZXlzLCBFc2Mga2V5LCBldGMuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiAtIGB3aGljaGAgaXMgdGhlIHByZXNzZWQga2V5IGNvZGUsIGJ1dCBubyBjaGFyIGlzIGF2YWlsYWJsZS5cbiAgICAgICAgICAgKiAgIEV4OiAnQWx0R3IgKyBkYCBpbiBQb2xpc2guIFRoZXJlIGlzIG5vIG1vZGlmaWVkIGNoYXJhY3RlciBmb3JcbiAgICAgICAgICAgKiAgIHRoaXMga2V5IGNvbWJpbmF0aW9uIGFuZCBubyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQgaW50byB0aGVcbiAgICAgICAgICAgKiAgIGRvY3VtZW50LCBidXQgRkYgZmlyZXMgdGhlIGtleXByZXNzIGZvciBjaGFyIGNvZGUgYDEwMGAgYW55d2F5LlxuICAgICAgICAgICAqICAgTm8gYGlucHV0YCBldmVudCB3aWxsIG9jY3VyLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogLSBgd2hpY2hgIGlzIHRoZSBwcmVzc2VkIGtleSBjb2RlLCBidXQgYSBjb21tYW5kIGNvbWJpbmF0aW9uIGlzXG4gICAgICAgICAgICogICBiZWluZyB1c2VkLiBFeDogYENtZCtDYC4gTm8gY2hhcmFjdGVyIGlzIGluc2VydGVkLCBhbmQgbm9cbiAgICAgICAgICAgKiAgIGBpbnB1dGAgZXZlbnQgd2lsbCBvY2N1ci5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBpZiAobmF0aXZlRXZlbnQud2hpY2ggJiYgIWlzS2V5cHJlc3NDb21tYW5kKG5hdGl2ZUV2ZW50KSkge1xuICAgICAgICAgICAgZmFsbGJhY2tDaGFycyA9IFN0cmluZy5mcm9tQ2hhckNvZGUobmF0aXZlRXZlbnQud2hpY2gpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kOlxuICAgICAgICAgIGZhbGxiYWNrQ2hhcnMgPSBuYXRpdmVFdmVudC5kYXRhO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBubyBjaGFuZ2VzIGhhdmUgb2NjdXJyZWQgdG8gdGhlIGZhbGxiYWNrIHN0cmluZywgbm8gcmVsZXZhbnRcbiAgICAgIC8vIGV2ZW50IGhhcyBmaXJlZCBhbmQgd2UncmUgZG9uZS5cbiAgICAgIGlmIChmYWxsYmFja0NoYXJzID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2hhcnMgPSBmYWxsYmFja0NoYXJzO1xuICAgIH1cblxuICAgIC8vIElmIG5vIGNoYXJhY3RlcnMgYXJlIGJlaW5nIGluc2VydGVkLCBubyBCZWZvcmVJbnB1dCBldmVudCBzaG91bGRcbiAgICAvLyBiZSBmaXJlZC5cbiAgICBpZiAoIWNoYXJzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGV2ZW50ID0gU3ludGhldGljSW5wdXRFdmVudC5nZXRQb29sZWQoXG4gICAgICBldmVudFR5cGVzLmJlZm9yZUlucHV0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgKTtcblxuICAgIGV2ZW50LmRhdGEgPSBjaGFycztcbiAgICBmYWxsYmFja0NoYXJzID0gbnVsbDtcbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgIHJldHVybiBldmVudDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL0JlZm9yZUlucHV0RXZlbnRQbHVnaW4uanNcbiAqKiBtb2R1bGUgaWQgPSAxMTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDaGFuZ2VFdmVudFBsdWdpblxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luSHViXCIpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKFwiLi9FdmVudFByb3BhZ2F0b3JzXCIpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIik7XG5cbnZhciBpc0V2ZW50U3VwcG9ydGVkID0gcmVxdWlyZShcIi4vaXNFdmVudFN1cHBvcnRlZFwiKTtcbnZhciBpc1RleHRJbnB1dEVsZW1lbnQgPSByZXF1aXJlKFwiLi9pc1RleHRJbnB1dEVsZW1lbnRcIik7XG52YXIga2V5T2YgPSByZXF1aXJlKFwiLi9rZXlPZlwiKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgY2hhbmdlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNoYW5nZTogbnVsbH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNoYW5nZUNhcHR1cmU6IG51bGx9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEJsdXIsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcENoYW5nZSxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQ2xpY2ssXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BJbnB1dCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5RG93bixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5VXAsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZVxuICAgIF1cbiAgfVxufTtcblxuLyoqXG4gKiBGb3IgSUUgc2hpbXNcbiAqL1xudmFyIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRJRCA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudFZhbHVlID0gbnVsbDtcbnZhciBhY3RpdmVFbGVtZW50VmFsdWVQcm9wID0gbnVsbDtcblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGNoYW5nZWAgZXZlbnRcbiAqL1xuZnVuY3Rpb24gc2hvdWxkVXNlQ2hhbmdlRXZlbnQoZWxlbSkge1xuICByZXR1cm4gKFxuICAgIGVsZW0ubm9kZU5hbWUgPT09ICdTRUxFQ1QnIHx8XG4gICAgKGVsZW0ubm9kZU5hbWUgPT09ICdJTlBVVCcgJiYgZWxlbS50eXBlID09PSAnZmlsZScpXG4gICk7XG59XG5cbnZhciBkb2VzQ2hhbmdlRXZlbnRCdWJibGUgPSBmYWxzZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gU2VlIGBoYW5kbGVDaGFuZ2VgIGNvbW1lbnQgYmVsb3dcbiAgZG9lc0NoYW5nZUV2ZW50QnViYmxlID0gaXNFdmVudFN1cHBvcnRlZCgnY2hhbmdlJykgJiYgKFxuICAgICEoJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQpIHx8IGRvY3VtZW50LmRvY3VtZW50TW9kZSA+IDhcbiAgKTtcbn1cblxuZnVuY3Rpb24gbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudChuYXRpdmVFdmVudCkge1xuICB2YXIgZXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoXG4gICAgZXZlbnRUeXBlcy5jaGFuZ2UsXG4gICAgYWN0aXZlRWxlbWVudElELFxuICAgIG5hdGl2ZUV2ZW50XG4gICk7XG4gIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG5cbiAgLy8gSWYgY2hhbmdlIGFuZCBwcm9wZXJ0eWNoYW5nZSBidWJibGVkLCB3ZSdkIGp1c3QgYmluZCB0byBpdCBsaWtlIGFsbCB0aGVcbiAgLy8gb3RoZXIgZXZlbnRzIGFuZCBoYXZlIGl0IGdvIHRocm91Z2ggUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLiBTaW5jZSBpdFxuICAvLyBkb2Vzbid0LCB3ZSBtYW51YWxseSBsaXN0ZW4gZm9yIHRoZSBldmVudHMgYW5kIHNvIHdlIGhhdmUgdG8gZW5xdWV1ZSBhbmRcbiAgLy8gcHJvY2VzcyB0aGUgYWJzdHJhY3QgZXZlbnQgbWFudWFsbHkuXG4gIC8vXG4gIC8vIEJhdGNoaW5nIGlzIG5lY2Vzc2FyeSBoZXJlIGluIG9yZGVyIHRvIGVuc3VyZSB0aGF0IGFsbCBldmVudCBoYW5kbGVycyBydW5cbiAgLy8gYmVmb3JlIHRoZSBuZXh0IHJlcmVuZGVyIChpbmNsdWRpbmcgZXZlbnQgaGFuZGxlcnMgYXR0YWNoZWQgdG8gYW5jZXN0b3JcbiAgLy8gZWxlbWVudHMgaW5zdGVhZCBvZiBkaXJlY3RseSBvbiB0aGUgaW5wdXQpLiBXaXRob3V0IHRoaXMsIGNvbnRyb2xsZWRcbiAgLy8gY29tcG9uZW50cyBkb24ndCB3b3JrIHByb3Blcmx5IGluIGNvbmp1bmN0aW9uIHdpdGggZXZlbnQgYnViYmxpbmcgYmVjYXVzZVxuICAvLyB0aGUgY29tcG9uZW50IGlzIHJlcmVuZGVyZWQgYW5kIHRoZSB2YWx1ZSByZXZlcnRlZCBiZWZvcmUgYWxsIHRoZSBldmVudFxuICAvLyBoYW5kbGVycyBjYW4gcnVuLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MDguXG4gIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyhydW5FdmVudEluQmF0Y2gsIGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gcnVuRXZlbnRJbkJhdGNoKGV2ZW50KSB7XG4gIEV2ZW50UGx1Z2luSHViLmVucXVldWVFdmVudHMoZXZlbnQpO1xuICBFdmVudFBsdWdpbkh1Yi5wcm9jZXNzRXZlbnRRdWV1ZSgpO1xufVxuXG5mdW5jdGlvbiBzdGFydFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgodGFyZ2V0LCB0YXJnZXRJRCkge1xuICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0O1xuICBhY3RpdmVFbGVtZW50SUQgPSB0YXJnZXRJRDtcbiAgYWN0aXZlRWxlbWVudC5hdHRhY2hFdmVudCgnb25jaGFuZ2UnLCBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KTtcbn1cblxuZnVuY3Rpb24gc3RvcFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgoKSB7XG4gIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbmNoYW5nZScsIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQpO1xuICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JDaGFuZ2VFdmVudChcbiAgICB0b3BMZXZlbFR5cGUsXG4gICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENoYW5nZSkge1xuICAgIHJldHVybiB0b3BMZXZlbFRhcmdldElEO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JDaGFuZ2VFdmVudElFOChcbiAgICB0b3BMZXZlbFR5cGUsXG4gICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzKSB7XG4gICAgLy8gc3RvcFdhdGNoaW5nKCkgc2hvdWxkIGJlIGEgbm9vcCBoZXJlIGJ1dCB3ZSBjYWxsIGl0IGp1c3QgaW4gY2FzZSB3ZVxuICAgIC8vIG1pc3NlZCBhIGJsdXIgZXZlbnQgc29tZWhvdy5cbiAgICBzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCgpO1xuICAgIHN0YXJ0V2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCh0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCk7XG4gIH0gZWxzZSBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEJsdXIpIHtcbiAgICBzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCgpO1xuICB9XG59XG5cblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGlucHV0YCBldmVudFxuICovXG52YXIgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gZmFsc2U7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIC8vIElFOSBjbGFpbXMgdG8gc3VwcG9ydCB0aGUgaW5wdXQgZXZlbnQgYnV0IGZhaWxzIHRvIHRyaWdnZXIgaXQgd2hlblxuICAvLyBkZWxldGluZyB0ZXh0LCBzbyB3ZSBpZ25vcmUgaXRzIGlucHV0IGV2ZW50c1xuICBpc0lucHV0RXZlbnRTdXBwb3J0ZWQgPSBpc0V2ZW50U3VwcG9ydGVkKCdpbnB1dCcpICYmIChcbiAgICAhKCdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50KSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPiA5XG4gICk7XG59XG5cbi8qKlxuICogKEZvciBvbGQgSUUuKSBSZXBsYWNlbWVudCBnZXR0ZXIvc2V0dGVyIGZvciB0aGUgYHZhbHVlYCBwcm9wZXJ0eSB0aGF0IGdldHNcbiAqIHNldCBvbiB0aGUgYWN0aXZlIGVsZW1lbnQuXG4gKi9cbnZhciBuZXdWYWx1ZVByb3AgPSAge1xuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhY3RpdmVFbGVtZW50VmFsdWVQcm9wLmdldC5jYWxsKHRoaXMpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKHZhbCkge1xuICAgIC8vIENhc3QgdG8gYSBzdHJpbmcgc28gd2UgY2FuIGRvIGVxdWFsaXR5IGNoZWNrcy5cbiAgICBhY3RpdmVFbGVtZW50VmFsdWUgPSAnJyArIHZhbDtcbiAgICBhY3RpdmVFbGVtZW50VmFsdWVQcm9wLnNldC5jYWxsKHRoaXMsIHZhbCk7XG4gIH1cbn07XG5cbi8qKlxuICogKEZvciBvbGQgSUUuKSBTdGFydHMgdHJhY2tpbmcgcHJvcGVydHljaGFuZ2UgZXZlbnRzIG9uIHRoZSBwYXNzZWQtaW4gZWxlbWVudFxuICogYW5kIG92ZXJyaWRlIHRoZSB2YWx1ZSBwcm9wZXJ0eSBzbyB0aGF0IHdlIGNhbiBkaXN0aW5ndWlzaCB1c2VyIGV2ZW50cyBmcm9tXG4gKiB2YWx1ZSBjaGFuZ2VzIGluIEpTLlxuICovXG5mdW5jdGlvbiBzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UodGFyZ2V0LCB0YXJnZXRJRCkge1xuICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0O1xuICBhY3RpdmVFbGVtZW50SUQgPSB0YXJnZXRJRDtcbiAgYWN0aXZlRWxlbWVudFZhbHVlID0gdGFyZ2V0LnZhbHVlO1xuICBhY3RpdmVFbGVtZW50VmFsdWVQcm9wID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihcbiAgICB0YXJnZXQuY29uc3RydWN0b3IucHJvdG90eXBlLFxuICAgICd2YWx1ZSdcbiAgKTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYWN0aXZlRWxlbWVudCwgJ3ZhbHVlJywgbmV3VmFsdWVQcm9wKTtcbiAgYWN0aXZlRWxlbWVudC5hdHRhY2hFdmVudCgnb25wcm9wZXJ0eWNoYW5nZScsIGhhbmRsZVByb3BlcnR5Q2hhbmdlKTtcbn1cblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIFJlbW92ZXMgdGhlIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSBjdXJyZW50bHktdHJhY2tlZCBlbGVtZW50LFxuICogaWYgYW55IGV4aXN0cy5cbiAqL1xuZnVuY3Rpb24gc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKSB7XG4gIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGRlbGV0ZSByZXN0b3JlcyB0aGUgb3JpZ2luYWwgcHJvcGVydHkgZGVmaW5pdGlvblxuICBkZWxldGUgYWN0aXZlRWxlbWVudC52YWx1ZTtcbiAgYWN0aXZlRWxlbWVudC5kZXRhY2hFdmVudCgnb25wcm9wZXJ0eWNoYW5nZScsIGhhbmRsZVByb3BlcnR5Q2hhbmdlKTtcblxuICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudFZhbHVlID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudFZhbHVlUHJvcCA9IG51bGw7XG59XG5cbi8qKlxuICogKEZvciBvbGQgSUUuKSBIYW5kbGVzIGEgcHJvcGVydHljaGFuZ2UgZXZlbnQsIHNlbmRpbmcgYSBgY2hhbmdlYCBldmVudCBpZlxuICogdGhlIHZhbHVlIG9mIHRoZSBhY3RpdmUgZWxlbWVudCBoYXMgY2hhbmdlZC5cbiAqL1xuZnVuY3Rpb24gaGFuZGxlUHJvcGVydHlDaGFuZ2UobmF0aXZlRXZlbnQpIHtcbiAgaWYgKG5hdGl2ZUV2ZW50LnByb3BlcnR5TmFtZSAhPT0gJ3ZhbHVlJykge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgdmFsdWUgPSBuYXRpdmVFdmVudC5zcmNFbGVtZW50LnZhbHVlO1xuICBpZiAodmFsdWUgPT09IGFjdGl2ZUVsZW1lbnRWYWx1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBhY3RpdmVFbGVtZW50VmFsdWUgPSB2YWx1ZTtcblxuICBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KG5hdGl2ZUV2ZW50KTtcbn1cblxuLyoqXG4gKiBJZiBhIGBjaGFuZ2VgIGV2ZW50IHNob3VsZCBiZSBmaXJlZCwgcmV0dXJucyB0aGUgdGFyZ2V0J3MgSUQuXG4gKi9cbmZ1bmN0aW9uIGdldFRhcmdldElERm9ySW5wdXRFdmVudChcbiAgICB0b3BMZXZlbFR5cGUsXG4gICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcElucHV0KSB7XG4gICAgLy8gSW4gbW9kZXJuIGJyb3dzZXJzIChpLmUuLCBub3QgSUU4IG9yIElFOSksIHRoZSBpbnB1dCBldmVudCBpcyBleGFjdGx5XG4gICAgLy8gd2hhdCB3ZSB3YW50IHNvIGZhbGwgdGhyb3VnaCBoZXJlIGFuZCB0cmlnZ2VyIGFuIGFic3RyYWN0IGV2ZW50XG4gICAgcmV0dXJuIHRvcExldmVsVGFyZ2V0SUQ7XG4gIH1cbn1cblxuLy8gRm9yIElFOCBhbmQgSUU5LlxuZnVuY3Rpb24gaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudElFKFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldCxcbiAgICB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wRm9jdXMpIHtcbiAgICAvLyBJbiBJRTgsIHdlIGNhbiBjYXB0dXJlIGFsbW9zdCBhbGwgLnZhbHVlIGNoYW5nZXMgYnkgYWRkaW5nIGFcbiAgICAvLyBwcm9wZXJ0eWNoYW5nZSBoYW5kbGVyIGFuZCBsb29raW5nIGZvciBldmVudHMgd2l0aCBwcm9wZXJ0eU5hbWVcbiAgICAvLyBlcXVhbCB0byAndmFsdWUnXG4gICAgLy8gSW4gSUU5LCBwcm9wZXJ0eWNoYW5nZSBmaXJlcyBmb3IgbW9zdCBpbnB1dCBldmVudHMgYnV0IGlzIGJ1Z2d5IGFuZFxuICAgIC8vIGRvZXNuJ3QgZmlyZSB3aGVuIHRleHQgaXMgZGVsZXRlZCwgYnV0IGNvbnZlbmllbnRseSwgc2VsZWN0aW9uY2hhbmdlXG4gICAgLy8gYXBwZWFycyB0byBmaXJlIGluIGFsbCBvZiB0aGUgcmVtYWluaW5nIGNhc2VzIHNvIHdlIGNhdGNoIHRob3NlIGFuZFxuICAgIC8vIGZvcndhcmQgdGhlIGV2ZW50IGlmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZFxuICAgIC8vIEluIGVpdGhlciBjYXNlLCB3ZSBkb24ndCB3YW50IHRvIGNhbGwgdGhlIGV2ZW50IGhhbmRsZXIgaWYgdGhlIHZhbHVlXG4gICAgLy8gaXMgY2hhbmdlZCBmcm9tIEpTIHNvIHdlIHJlZGVmaW5lIGEgc2V0dGVyIGZvciBgLnZhbHVlYCB0aGF0IHVwZGF0ZXNcbiAgICAvLyBvdXIgYWN0aXZlRWxlbWVudFZhbHVlIHZhcmlhYmxlLCBhbGxvd2luZyB1cyB0byBpZ25vcmUgdGhvc2UgY2hhbmdlc1xuICAgIC8vXG4gICAgLy8gc3RvcFdhdGNoaW5nKCkgc2hvdWxkIGJlIGEgbm9vcCBoZXJlIGJ1dCB3ZSBjYWxsIGl0IGp1c3QgaW4gY2FzZSB3ZVxuICAgIC8vIG1pc3NlZCBhIGJsdXIgZXZlbnQgc29tZWhvdy5cbiAgICBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpO1xuICAgIHN0YXJ0V2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSh0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCk7XG4gIH0gZWxzZSBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEJsdXIpIHtcbiAgICBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpO1xuICB9XG59XG5cbi8vIEZvciBJRTggYW5kIElFOS5cbmZ1bmN0aW9uIGdldFRhcmdldElERm9ySW5wdXRFdmVudElFKFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldCxcbiAgICB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wU2VsZWN0aW9uQ2hhbmdlIHx8XG4gICAgICB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wS2V5VXAgfHxcbiAgICAgIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duKSB7XG4gICAgLy8gT24gdGhlIHNlbGVjdGlvbmNoYW5nZSBldmVudCwgdGhlIHRhcmdldCBpcyBqdXN0IGRvY3VtZW50IHdoaWNoIGlzbid0XG4gICAgLy8gaGVscGZ1bCBmb3IgdXMgc28ganVzdCBjaGVjayBhY3RpdmVFbGVtZW50IGluc3RlYWQuXG4gICAgLy9cbiAgICAvLyA5OSUgb2YgdGhlIHRpbWUsIGtleWRvd24gYW5kIGtleXVwIGFyZW4ndCBuZWNlc3NhcnkuIElFOCBmYWlscyB0byBmaXJlXG4gICAgLy8gcHJvcGVydHljaGFuZ2Ugb24gdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFmdGVyIHNldHRpbmcgYHZhbHVlYCBmcm9tIGFcbiAgICAvLyBzY3JpcHQgYW5kIGZpcmVzIG9ubHkga2V5ZG93biwga2V5cHJlc3MsIGtleXVwLiBDYXRjaGluZyBrZXl1cCB1c3VhbGx5XG4gICAgLy8gZ2V0cyBpdCBhbmQgY2F0Y2hpbmcga2V5ZG93biBsZXRzIHVzIGZpcmUgYW4gZXZlbnQgZm9yIHRoZSBmaXJzdFxuICAgIC8vIGtleXN0cm9rZSBpZiB1c2VyIGRvZXMgYSBrZXkgcmVwZWF0IChpdCdsbCBiZSBhIGxpdHRsZSBkZWxheWVkOiByaWdodFxuICAgIC8vIGJlZm9yZSB0aGUgc2Vjb25kIGtleXN0cm9rZSkuIE90aGVyIGlucHV0IG1ldGhvZHMgKGUuZy4sIHBhc3RlKSBzZWVtIHRvXG4gICAgLy8gZmlyZSBzZWxlY3Rpb25jaGFuZ2Ugbm9ybWFsbHkuXG4gICAgaWYgKGFjdGl2ZUVsZW1lbnQgJiYgYWN0aXZlRWxlbWVudC52YWx1ZSAhPT0gYWN0aXZlRWxlbWVudFZhbHVlKSB7XG4gICAgICBhY3RpdmVFbGVtZW50VmFsdWUgPSBhY3RpdmVFbGVtZW50LnZhbHVlO1xuICAgICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnRJRDtcbiAgICB9XG4gIH1cbn1cblxuXG4vKipcbiAqIFNFQ1RJT046IGhhbmRsZSBgY2xpY2tgIGV2ZW50XG4gKi9cbmZ1bmN0aW9uIHNob3VsZFVzZUNsaWNrRXZlbnQoZWxlbSkge1xuICAvLyBVc2UgdGhlIGBjbGlja2AgZXZlbnQgdG8gZGV0ZWN0IGNoYW5nZXMgdG8gY2hlY2tib3ggYW5kIHJhZGlvIGlucHV0cy5cbiAgLy8gVGhpcyBhcHByb2FjaCB3b3JrcyBhY3Jvc3MgYWxsIGJyb3dzZXJzLCB3aGVyZWFzIGBjaGFuZ2VgIGRvZXMgbm90IGZpcmVcbiAgLy8gdW50aWwgYGJsdXJgIGluIElFOC5cbiAgcmV0dXJuIChcbiAgICBlbGVtLm5vZGVOYW1lID09PSAnSU5QVVQnICYmXG4gICAgKGVsZW0udHlwZSA9PT0gJ2NoZWNrYm94JyB8fCBlbGVtLnR5cGUgPT09ICdyYWRpbycpXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdldFRhcmdldElERm9yQ2xpY2tFdmVudChcbiAgICB0b3BMZXZlbFR5cGUsXG4gICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENsaWNrKSB7XG4gICAgcmV0dXJuIHRvcExldmVsVGFyZ2V0SUQ7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIHBsdWdpbiBjcmVhdGVzIGFuIGBvbkNoYW5nZWAgZXZlbnQgdGhhdCBub3JtYWxpemVzIGNoYW5nZSBldmVudHNcbiAqIGFjcm9zcyBmb3JtIGVsZW1lbnRzLiBUaGlzIGV2ZW50IGZpcmVzIGF0IGEgdGltZSB3aGVuIGl0J3MgcG9zc2libGUgdG9cbiAqIGNoYW5nZSB0aGUgZWxlbWVudCdzIHZhbHVlIHdpdGhvdXQgc2VlaW5nIGEgZmxpY2tlci5cbiAqXG4gKiBTdXBwb3J0ZWQgZWxlbWVudHMgYXJlOlxuICogLSBpbnB1dCAoc2VlIGBpc1RleHRJbnB1dEVsZW1lbnRgKVxuICogLSB0ZXh0YXJlYVxuICogLSBzZWxlY3RcbiAqL1xudmFyIENoYW5nZUV2ZW50UGx1Z2luID0ge1xuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudCkge1xuXG4gICAgdmFyIGdldFRhcmdldElERnVuYywgaGFuZGxlRXZlbnRGdW5jO1xuICAgIGlmIChzaG91bGRVc2VDaGFuZ2VFdmVudCh0b3BMZXZlbFRhcmdldCkpIHtcbiAgICAgIGlmIChkb2VzQ2hhbmdlRXZlbnRCdWJibGUpIHtcbiAgICAgICAgZ2V0VGFyZ2V0SURGdW5jID0gZ2V0VGFyZ2V0SURGb3JDaGFuZ2VFdmVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbmRsZUV2ZW50RnVuYyA9IGhhbmRsZUV2ZW50c0ZvckNoYW5nZUV2ZW50SUU4O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNUZXh0SW5wdXRFbGVtZW50KHRvcExldmVsVGFyZ2V0KSkge1xuICAgICAgaWYgKGlzSW5wdXRFdmVudFN1cHBvcnRlZCkge1xuICAgICAgICBnZXRUYXJnZXRJREZ1bmMgPSBnZXRUYXJnZXRJREZvcklucHV0RXZlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZXRUYXJnZXRJREZ1bmMgPSBnZXRUYXJnZXRJREZvcklucHV0RXZlbnRJRTtcbiAgICAgICAgaGFuZGxlRXZlbnRGdW5jID0gaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudElFO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2hvdWxkVXNlQ2xpY2tFdmVudCh0b3BMZXZlbFRhcmdldCkpIHtcbiAgICAgIGdldFRhcmdldElERnVuYyA9IGdldFRhcmdldElERm9yQ2xpY2tFdmVudDtcbiAgICB9XG5cbiAgICBpZiAoZ2V0VGFyZ2V0SURGdW5jKSB7XG4gICAgICB2YXIgdGFyZ2V0SUQgPSBnZXRUYXJnZXRJREZ1bmMoXG4gICAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICAgIHRvcExldmVsVGFyZ2V0SURcbiAgICAgICk7XG4gICAgICBpZiAodGFyZ2V0SUQpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKFxuICAgICAgICAgIGV2ZW50VHlwZXMuY2hhbmdlLFxuICAgICAgICAgIHRhcmdldElELFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICk7XG4gICAgICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaGFuZGxlRXZlbnRGdW5jKSB7XG4gICAgICBoYW5kbGVFdmVudEZ1bmMoXG4gICAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICAgIHRvcExldmVsVGFyZ2V0SURcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2hhbmdlRXZlbnRQbHVnaW47XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvQ2hhbmdlRXZlbnRQbHVnaW4uanNcbiAqKiBtb2R1bGUgaWQgPSAxMTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDbGllbnRSZWFjdFJvb3RJbmRleFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIG5leHRSZWFjdFJvb3RJbmRleCA9IDA7XG5cbnZhciBDbGllbnRSZWFjdFJvb3RJbmRleCA9IHtcbiAgY3JlYXRlUmVhY3RSb290SW5kZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXh0UmVhY3RSb290SW5kZXgrKztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDbGllbnRSZWFjdFJvb3RJbmRleDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9DbGllbnRSZWFjdFJvb3RJbmRleC5qc1xuICoqIG1vZHVsZSBpZCA9IDExN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENvbXBvc2l0aW9uRXZlbnRQbHVnaW5cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKFwiLi9FdmVudFByb3BhZ2F0b3JzXCIpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG52YXIgUmVhY3RJbnB1dFNlbGVjdGlvbiA9IHJlcXVpcmUoXCIuL1JlYWN0SW5wdXRTZWxlY3Rpb25cIik7XG52YXIgU3ludGhldGljQ29tcG9zaXRpb25FdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnRcIik7XG5cbnZhciBnZXRUZXh0Q29udGVudEFjY2Vzc29yID0gcmVxdWlyZShcIi4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclwiKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xuXG52YXIgRU5EX0tFWUNPREVTID0gWzksIDEzLCAyNywgMzJdOyAvLyBUYWIsIFJldHVybiwgRXNjLCBTcGFjZVxudmFyIFNUQVJUX0tFWUNPREUgPSAyMjk7XG5cbnZhciB1c2VDb21wb3NpdGlvbkV2ZW50ID0gKFxuICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiZcbiAgJ0NvbXBvc2l0aW9uRXZlbnQnIGluIHdpbmRvd1xuKTtcblxuLy8gSW4gSUU5Kywgd2UgaGF2ZSBhY2Nlc3MgdG8gY29tcG9zaXRpb24gZXZlbnRzLCBidXQgdGhlIGRhdGEgc3VwcGxpZWRcbi8vIGJ5IHRoZSBuYXRpdmUgY29tcG9zaXRpb25lbmQgZXZlbnQgbWF5IGJlIGluY29ycmVjdC4gSW4gS29yZWFuLCBmb3IgZXhhbXBsZSxcbi8vIHRoZSBjb21wb3NpdGlvbmVuZCBldmVudCBjb250YWlucyBvbmx5IG9uZSBjaGFyYWN0ZXIgcmVnYXJkbGVzcyBvZlxuLy8gaG93IG1hbnkgY2hhcmFjdGVycyBoYXZlIGJlZW4gY29tcG9zZWQgc2luY2UgY29tcG9zaXRpb25zdGFydC5cbi8vIFdlIHRoZXJlZm9yZSB1c2UgdGhlIGZhbGxiYWNrIGRhdGEgd2hpbGUgc3RpbGwgdXNpbmcgdGhlIG5hdGl2ZVxuLy8gZXZlbnRzIGFzIHRyaWdnZXJzLlxudmFyIHVzZUZhbGxiYWNrRGF0YSA9IChcbiAgIXVzZUNvbXBvc2l0aW9uRXZlbnQgfHxcbiAgKFxuICAgICdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50ICYmXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOCAmJlxuICAgIGRvY3VtZW50LmRvY3VtZW50TW9kZSA8PSAxMVxuICApXG4pO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG52YXIgY3VycmVudENvbXBvc2l0aW9uID0gbnVsbDtcblxuLy8gRXZlbnRzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIHByb3BlcnR5IG5hbWVzLlxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIGNvbXBvc2l0aW9uRW5kOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uRW5kOiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25FbmRDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5RG93bixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3MsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVVwLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25cbiAgICBdXG4gIH0sXG4gIGNvbXBvc2l0aW9uU3RhcnQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25TdGFydDogbnVsbH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvblN0YXJ0LFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcyxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5VXAsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93blxuICAgIF1cbiAgfSxcbiAgY29tcG9zaXRpb25VcGRhdGU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25VcGRhdGU6IG51bGx9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmU6IG51bGx9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEJsdXIsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uVXBkYXRlLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcyxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5VXAsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93blxuICAgIF1cbiAgfVxufTtcblxuLyoqXG4gKiBUcmFuc2xhdGUgbmF0aXZlIHRvcCBsZXZlbCBldmVudHMgaW50byBldmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldENvbXBvc2l0aW9uRXZlbnRUeXBlKHRvcExldmVsVHlwZSkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvblN0YXJ0OlxuICAgICAgcmV0dXJuIGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydDtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQ6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvbkVuZDtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25VcGRhdGU6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvblVwZGF0ZTtcbiAgfVxufVxuXG4vKipcbiAqIERvZXMgb3VyIGZhbGxiYWNrIGJlc3QtZ3Vlc3MgbW9kZWwgdGhpbmsgdGhpcyBldmVudCBzaWduaWZpZXMgdGhhdFxuICogY29tcG9zaXRpb24gaGFzIGJlZ3VuP1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGYWxsYmFja1N0YXJ0KHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgcmV0dXJuIChcbiAgICB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wS2V5RG93biAmJlxuICAgIG5hdGl2ZUV2ZW50LmtleUNvZGUgPT09IFNUQVJUX0tFWUNPREVcbiAgKTtcbn1cblxuLyoqXG4gKiBEb2VzIG91ciBmYWxsYmFjayBtb2RlIHRoaW5rIHRoYXQgdGhpcyBldmVudCBpcyB0aGUgZW5kIG9mIGNvbXBvc2l0aW9uP1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGYWxsYmFja0VuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVVwOlxuICAgICAgLy8gQ29tbWFuZCBrZXlzIGluc2VydCBvciBjbGVhciBJTUUgaW5wdXQuXG4gICAgICByZXR1cm4gKEVORF9LRVlDT0RFUy5pbmRleE9mKG5hdGl2ZUV2ZW50LmtleUNvZGUpICE9PSAtMSk7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd246XG4gICAgICAvLyBFeHBlY3QgSU1FIGtleUNvZGUgb24gZWFjaCBrZXlkb3duLiBJZiB3ZSBnZXQgYW55IG90aGVyXG4gICAgICAvLyBjb2RlIHdlIG11c3QgaGF2ZSBleGl0ZWQgZWFybGllci5cbiAgICAgIHJldHVybiAobmF0aXZlRXZlbnQua2V5Q29kZSAhPT0gU1RBUlRfS0VZQ09ERSk7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd246XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEJsdXI6XG4gICAgICAvLyBFdmVudHMgYXJlIG5vdCBwb3NzaWJsZSB3aXRob3V0IGNhbmNlbGxpbmcgSU1FLlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciBjbGFzcyBzdG9yZXMgaW5mb3JtYXRpb24gYWJvdXQgc2VsZWN0aW9uIGFuZCBkb2N1bWVudCBzdGF0ZVxuICogc28gd2UgY2FuIGZpZ3VyZSBvdXQgd2hhdCBjaGFuZ2VkIGF0IGEgbGF0ZXIgZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSByb290XG4gKi9cbmZ1bmN0aW9uIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZShyb290KSB7XG4gIHRoaXMucm9vdCA9IHJvb3Q7XG4gIHRoaXMuc3RhcnRTZWxlY3Rpb24gPSBSZWFjdElucHV0U2VsZWN0aW9uLmdldFNlbGVjdGlvbihyb290KTtcbiAgdGhpcy5zdGFydFZhbHVlID0gdGhpcy5nZXRUZXh0KCk7XG59XG5cbi8qKlxuICogR2V0IGN1cnJlbnQgdGV4dCBvZiBpbnB1dC5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbkZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5wcm90b3R5cGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5yb290LnZhbHVlIHx8IHRoaXMucm9vdFtnZXRUZXh0Q29udGVudEFjY2Vzc29yKCldO1xufTtcblxuLyoqXG4gKiBUZXh0IHRoYXQgaGFzIGNoYW5nZWQgc2luY2UgdGhlIHN0YXJ0IG9mIGNvbXBvc2l0aW9uLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24oKSB7XG4gIHZhciBlbmRWYWx1ZSA9IHRoaXMuZ2V0VGV4dCgpO1xuICB2YXIgcHJlZml4TGVuZ3RoID0gdGhpcy5zdGFydFNlbGVjdGlvbi5zdGFydDtcbiAgdmFyIHN1ZmZpeExlbmd0aCA9IHRoaXMuc3RhcnRWYWx1ZS5sZW5ndGggLSB0aGlzLnN0YXJ0U2VsZWN0aW9uLmVuZDtcblxuICByZXR1cm4gZW5kVmFsdWUuc3Vic3RyKFxuICAgIHByZWZpeExlbmd0aCxcbiAgICBlbmRWYWx1ZS5sZW5ndGggLSBzdWZmaXhMZW5ndGggLSBwcmVmaXhMZW5ndGhcbiAgKTtcbn07XG5cbi8qKlxuICogVGhpcyBwbHVnaW4gY3JlYXRlcyBgb25Db21wb3NpdGlvblN0YXJ0YCwgYG9uQ29tcG9zaXRpb25VcGRhdGVgIGFuZFxuICogYG9uQ29tcG9zaXRpb25FbmRgIGV2ZW50cyBvbiBpbnB1dHMsIHRleHRhcmVhcyBhbmQgY29udGVudEVkaXRhYmxlXG4gKiBub2Rlcy5cbiAqL1xudmFyIENvbXBvc2l0aW9uRXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG5cbiAgICB2YXIgZXZlbnRUeXBlO1xuICAgIHZhciBkYXRhO1xuXG4gICAgaWYgKHVzZUNvbXBvc2l0aW9uRXZlbnQpIHtcbiAgICAgIGV2ZW50VHlwZSA9IGdldENvbXBvc2l0aW9uRXZlbnRUeXBlKHRvcExldmVsVHlwZSk7XG4gICAgfSBlbHNlIGlmICghY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgICBpZiAoaXNGYWxsYmFja1N0YXJ0KHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpKSB7XG4gICAgICAgIGV2ZW50VHlwZSA9IGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRmFsbGJhY2tFbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcbiAgICAgIGV2ZW50VHlwZSA9IGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQ7XG4gICAgfVxuXG4gICAgaWYgKHVzZUZhbGxiYWNrRGF0YSkge1xuICAgICAgLy8gVGhlIGN1cnJlbnQgY29tcG9zaXRpb24gaXMgc3RvcmVkIHN0YXRpY2FsbHkgYW5kIG11c3Qgbm90IGJlXG4gICAgICAvLyBvdmVyd3JpdHRlbiB3aGlsZSBjb21wb3NpdGlvbiBjb250aW51ZXMuXG4gICAgICBpZiAoIWN1cnJlbnRDb21wb3NpdGlvbiAmJiBldmVudFR5cGUgPT09IGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydCkge1xuICAgICAgICBjdXJyZW50Q29tcG9zaXRpb24gPSBuZXcgRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlKHRvcExldmVsVGFyZ2V0KTtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlID09PSBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kKSB7XG4gICAgICAgIGlmIChjdXJyZW50Q29tcG9zaXRpb24pIHtcbiAgICAgICAgICBkYXRhID0gY3VycmVudENvbXBvc2l0aW9uLmdldERhdGEoKTtcbiAgICAgICAgICBjdXJyZW50Q29tcG9zaXRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50VHlwZSkge1xuICAgICAgdmFyIGV2ZW50ID0gU3ludGhldGljQ29tcG9zaXRpb25FdmVudC5nZXRQb29sZWQoXG4gICAgICAgIGV2ZW50VHlwZSxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICk7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICAvLyBJbmplY3QgZGF0YSBnZW5lcmF0ZWQgZnJvbSBmYWxsYmFjayBwYXRoIGludG8gdGhlIHN5bnRoZXRpYyBldmVudC5cbiAgICAgICAgLy8gVGhpcyBtYXRjaGVzIHRoZSBwcm9wZXJ0eSBvZiBuYXRpdmUgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZS5cbiAgICAgICAgZXZlbnQuZGF0YSA9IGRhdGE7XG4gICAgICB9XG4gICAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb3NpdGlvbkV2ZW50UGx1Z2luO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL0NvbXBvc2l0aW9uRXZlbnRQbHVnaW4uanNcbiAqKiBtb2R1bGUgaWQgPSAxMThcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBET01DaGlsZHJlbk9wZXJhdGlvbnNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBEYW5nZXIgPSByZXF1aXJlKFwiLi9EYW5nZXJcIik7XG52YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSByZXF1aXJlKFwiLi9SZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlc1wiKTtcblxudmFyIGdldFRleHRDb250ZW50QWNjZXNzb3IgPSByZXF1aXJlKFwiLi9nZXRUZXh0Q29udGVudEFjY2Vzc29yXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBUaGUgRE9NIHByb3BlcnR5IHRvIHVzZSB3aGVuIHNldHRpbmcgdGV4dCBjb250ZW50LlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgdGV4dENvbnRlbnRBY2Nlc3NvciA9IGdldFRleHRDb250ZW50QWNjZXNzb3IoKTtcblxuLyoqXG4gKiBJbnNlcnRzIGBjaGlsZE5vZGVgIGFzIGEgY2hpbGQgb2YgYHBhcmVudE5vZGVgIGF0IHRoZSBgaW5kZXhgLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcGFyZW50Tm9kZSBQYXJlbnQgbm9kZSBpbiB3aGljaCB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNoaWxkTm9kZSBDaGlsZCBub2RlIHRvIGluc2VydC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCBhdCB3aGljaCB0byBpbnNlcnQgdGhlIGNoaWxkLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGluc2VydENoaWxkQXQocGFyZW50Tm9kZSwgY2hpbGROb2RlLCBpbmRleCkge1xuICAvLyBCeSBleHBsb2l0aW5nIGFycmF5cyByZXR1cm5pbmcgYHVuZGVmaW5lZGAgZm9yIGFuIHVuZGVmaW5lZCBpbmRleCwgd2UgY2FuXG4gIC8vIHJlbHkgZXhjbHVzaXZlbHkgb24gYGluc2VydEJlZm9yZShub2RlLCBudWxsKWAgaW5zdGVhZCBvZiBhbHNvIHVzaW5nXG4gIC8vIGBhcHBlbmRDaGlsZChub2RlKWAuIEhvd2V2ZXIsIHVzaW5nIGB1bmRlZmluZWRgIGlzIG5vdCBhbGxvd2VkIGJ5IGFsbFxuICAvLyBicm93c2VycyBzbyB3ZSBtdXN0IHJlcGxhY2UgaXQgd2l0aCBgbnVsbGAuXG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKFxuICAgIGNoaWxkTm9kZSxcbiAgICBwYXJlbnROb2RlLmNoaWxkTm9kZXNbaW5kZXhdIHx8IG51bGxcbiAgKTtcbn1cblxudmFyIHVwZGF0ZVRleHRDb250ZW50O1xuaWYgKHRleHRDb250ZW50QWNjZXNzb3IgPT09ICd0ZXh0Q29udGVudCcpIHtcbiAgLyoqXG4gICAqIFNldHMgdGhlIHRleHQgY29udGVudCBvZiBgbm9kZWAgdG8gYHRleHRgLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgTm9kZSB0byBjaGFuZ2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgTmV3IHRleHQgY29udGVudFxuICAgKi9cbiAgdXBkYXRlVGV4dENvbnRlbnQgPSBmdW5jdGlvbihub2RlLCB0ZXh0KSB7XG4gICAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG4gIH07XG59IGVsc2Uge1xuICAvKipcbiAgICogU2V0cyB0aGUgdGV4dCBjb250ZW50IG9mIGBub2RlYCB0byBgdGV4dGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZSBOb2RlIHRvIGNoYW5nZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBOZXcgdGV4dCBjb250ZW50XG4gICAqL1xuICB1cGRhdGVUZXh0Q29udGVudCA9IGZ1bmN0aW9uKG5vZGUsIHRleHQpIHtcbiAgICAvLyBJbiBvcmRlciB0byBwcmVzZXJ2ZSBuZXdsaW5lcyBjb3JyZWN0bHksIHdlIGNhbid0IHVzZSAuaW5uZXJUZXh0IHRvIHNldFxuICAgIC8vIHRoZSBjb250ZW50cyAoc2VlICMxMDgwKSwgc28gd2UgZW1wdHkgdGhlIGVsZW1lbnQgdGhlbiBhcHBlbmQgYSB0ZXh0IG5vZGVcbiAgICB3aGlsZSAobm9kZS5maXJzdENoaWxkKSB7XG4gICAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIGlmICh0ZXh0KSB7XG4gICAgICB2YXIgZG9jID0gbm9kZS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xuICAgICAgbm9kZS5hcHBlbmRDaGlsZChkb2MuY3JlYXRlVGV4dE5vZGUodGV4dCkpO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBPcGVyYXRpb25zIGZvciB1cGRhdGluZyB3aXRoIERPTSBjaGlsZHJlbi5cbiAqL1xudmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHtcblxuICBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cDogRGFuZ2VyLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwLFxuXG4gIHVwZGF0ZVRleHRDb250ZW50OiB1cGRhdGVUZXh0Q29udGVudCxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIGNvbXBvbmVudCdzIGNoaWxkcmVuIGJ5IHByb2Nlc3NpbmcgYSBzZXJpZXMgb2YgdXBkYXRlcy4gVGhlXG4gICAqIHVwZGF0ZSBjb25maWd1cmF0aW9ucyBhcmUgZWFjaCBleHBlY3RlZCB0byBoYXZlIGEgYHBhcmVudE5vZGVgIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5PG9iamVjdD59IHVwZGF0ZXMgTGlzdCBvZiB1cGRhdGUgY29uZmlndXJhdGlvbnMuXG4gICAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gbWFya3VwTGlzdCBMaXN0IG9mIG1hcmt1cCBzdHJpbmdzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHByb2Nlc3NVcGRhdGVzOiBmdW5jdGlvbih1cGRhdGVzLCBtYXJrdXBMaXN0KSB7XG4gICAgdmFyIHVwZGF0ZTtcbiAgICAvLyBNYXBwaW5nIGZyb20gcGFyZW50IElEcyB0byBpbml0aWFsIGNoaWxkIG9yZGVyaW5ncy5cbiAgICB2YXIgaW5pdGlhbENoaWxkcmVuID0gbnVsbDtcbiAgICAvLyBMaXN0IG9mIGNoaWxkcmVuIHRoYXQgd2lsbCBiZSBtb3ZlZCBvciByZW1vdmVkLlxuICAgIHZhciB1cGRhdGVkQ2hpbGRyZW4gPSBudWxsO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IHVwZGF0ZSA9IHVwZGF0ZXNbaV07IGkrKykge1xuICAgICAgaWYgKHVwZGF0ZS50eXBlID09PSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5NT1ZFX0VYSVNUSU5HIHx8XG4gICAgICAgICAgdXBkYXRlLnR5cGUgPT09IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlJFTU9WRV9OT0RFKSB7XG4gICAgICAgIHZhciB1cGRhdGVkSW5kZXggPSB1cGRhdGUuZnJvbUluZGV4O1xuICAgICAgICB2YXIgdXBkYXRlZENoaWxkID0gdXBkYXRlLnBhcmVudE5vZGUuY2hpbGROb2Rlc1t1cGRhdGVkSW5kZXhdO1xuICAgICAgICB2YXIgcGFyZW50SUQgPSB1cGRhdGUucGFyZW50SUQ7XG5cbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICB1cGRhdGVkQ2hpbGQsXG4gICAgICAgICAgJ3Byb2Nlc3NVcGRhdGVzKCk6IFVuYWJsZSB0byBmaW5kIGNoaWxkICVzIG9mIGVsZW1lbnQuIFRoaXMgJyArXG4gICAgICAgICAgJ3Byb2JhYmx5IG1lYW5zIHRoZSBET00gd2FzIHVuZXhwZWN0ZWRseSBtdXRhdGVkIChlLmcuLCBieSB0aGUgJyArXG4gICAgICAgICAgJ2Jyb3dzZXIpLCB1c3VhbGx5IGR1ZSB0byBmb3JnZXR0aW5nIGEgPHRib2R5PiB3aGVuIHVzaW5nIHRhYmxlcywgJyArXG4gICAgICAgICAgJ25lc3RpbmcgdGFncyBsaWtlIDxmb3JtPiwgPHA+LCBvciA8YT4sIG9yIHVzaW5nIG5vbi1TVkcgZWxlbWVudHMgJytcbiAgICAgICAgICAnaW4gYW4gPHN2Zz4gcGFyZW50LiBUcnkgaW5zcGVjdGluZyB0aGUgY2hpbGQgbm9kZXMgb2YgdGhlIGVsZW1lbnQgJyArXG4gICAgICAgICAgJ3dpdGggUmVhY3QgSUQgYCVzYC4nLFxuICAgICAgICAgIHVwZGF0ZWRJbmRleCxcbiAgICAgICAgICBwYXJlbnRJRFxuICAgICAgICApIDogaW52YXJpYW50KHVwZGF0ZWRDaGlsZCkpO1xuXG4gICAgICAgIGluaXRpYWxDaGlsZHJlbiA9IGluaXRpYWxDaGlsZHJlbiB8fCB7fTtcbiAgICAgICAgaW5pdGlhbENoaWxkcmVuW3BhcmVudElEXSA9IGluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF0gfHwgW107XG4gICAgICAgIGluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF1bdXBkYXRlZEluZGV4XSA9IHVwZGF0ZWRDaGlsZDtcblxuICAgICAgICB1cGRhdGVkQ2hpbGRyZW4gPSB1cGRhdGVkQ2hpbGRyZW4gfHwgW107XG4gICAgICAgIHVwZGF0ZWRDaGlsZHJlbi5wdXNoKHVwZGF0ZWRDaGlsZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlbmRlcmVkTWFya3VwID0gRGFuZ2VyLmRhbmdlcm91c2x5UmVuZGVyTWFya3VwKG1hcmt1cExpc3QpO1xuXG4gICAgLy8gUmVtb3ZlIHVwZGF0ZWQgY2hpbGRyZW4gZmlyc3Qgc28gdGhhdCBgdG9JbmRleGAgaXMgY29uc2lzdGVudC5cbiAgICBpZiAodXBkYXRlZENoaWxkcmVuKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHVwZGF0ZWRDaGlsZHJlbi5sZW5ndGg7IGorKykge1xuICAgICAgICB1cGRhdGVkQ2hpbGRyZW5bal0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh1cGRhdGVkQ2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGsgPSAwOyB1cGRhdGUgPSB1cGRhdGVzW2tdOyBrKyspIHtcbiAgICAgIHN3aXRjaCAodXBkYXRlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5JTlNFUlRfTUFSS1VQOlxuICAgICAgICAgIGluc2VydENoaWxkQXQoXG4gICAgICAgICAgICB1cGRhdGUucGFyZW50Tm9kZSxcbiAgICAgICAgICAgIHJlbmRlcmVkTWFya3VwW3VwZGF0ZS5tYXJrdXBJbmRleF0sXG4gICAgICAgICAgICB1cGRhdGUudG9JbmRleFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuTU9WRV9FWElTVElORzpcbiAgICAgICAgICBpbnNlcnRDaGlsZEF0KFxuICAgICAgICAgICAgdXBkYXRlLnBhcmVudE5vZGUsXG4gICAgICAgICAgICBpbml0aWFsQ2hpbGRyZW5bdXBkYXRlLnBhcmVudElEXVt1cGRhdGUuZnJvbUluZGV4XSxcbiAgICAgICAgICAgIHVwZGF0ZS50b0luZGV4XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5URVhUX0NPTlRFTlQ6XG4gICAgICAgICAgdXBkYXRlVGV4dENvbnRlbnQoXG4gICAgICAgICAgICB1cGRhdGUucGFyZW50Tm9kZSxcbiAgICAgICAgICAgIHVwZGF0ZS50ZXh0Q29udGVudFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREU6XG4gICAgICAgICAgLy8gQWxyZWFkeSByZW1vdmVkIGJ5IHRoZSBmb3ItbG9vcCBhYm92ZS5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01DaGlsZHJlbk9wZXJhdGlvbnM7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvRE9NQ2hpbGRyZW5PcGVyYXRpb25zLmpzXG4gKiogbW9kdWxlIGlkID0gMTE5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRGFuZ2VyXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbi8qanNsaW50IGV2aWw6IHRydWUsIHN1YjogdHJ1ZSAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAgPSByZXF1aXJlKFwiLi9jcmVhdGVOb2Rlc0Zyb21NYXJrdXBcIik7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG52YXIgZ2V0TWFya3VwV3JhcCA9IHJlcXVpcmUoXCIuL2dldE1hcmt1cFdyYXBcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG52YXIgT1BFTl9UQUdfTkFNRV9FWFAgPSAvXig8W14gXFwvPl0rKS87XG52YXIgUkVTVUxUX0lOREVYX0FUVFIgPSAnZGF0YS1kYW5nZXItaW5kZXgnO1xuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSBgbm9kZU5hbWVgIGZyb20gYSBzdHJpbmcgb2YgbWFya3VwLlxuICpcbiAqIE5PVEU6IEV4dHJhY3RpbmcgdGhlIGBub2RlTmFtZWAgZG9lcyBub3QgcmVxdWlyZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBtYXRjaFxuICogYmVjYXVzZSB3ZSBtYWtlIGFzc3VtcHRpb25zIGFib3V0IFJlYWN0LWdlbmVyYXRlZCBtYXJrdXAgKGkuZS4gdGhlcmUgYXJlIG5vXG4gKiBzcGFjZXMgc3Vycm91bmRpbmcgdGhlIG9wZW5pbmcgdGFnIGFuZCB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgYXR0cmlidXRlKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIFN0cmluZyBvZiBtYXJrdXAuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5vZGUgbmFtZSBvZiB0aGUgc3VwcGxpZWQgbWFya3VwLlxuICogQHNlZSBodHRwOi8vanNwZXJmLmNvbS9leHRyYWN0LW5vZGVuYW1lXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVOYW1lKG1hcmt1cCkge1xuICByZXR1cm4gbWFya3VwLnN1YnN0cmluZygxLCBtYXJrdXAuaW5kZXhPZignICcpKTtcbn1cblxudmFyIERhbmdlciA9IHtcblxuICAvKipcbiAgICogUmVuZGVycyBtYXJrdXAgaW50byBhbiBhcnJheSBvZiBub2Rlcy4gVGhlIG1hcmt1cCBpcyBleHBlY3RlZCB0byByZW5kZXJcbiAgICogaW50byBhIGxpc3Qgb2Ygcm9vdCBub2Rlcy4gQWxzbywgdGhlIGxlbmd0aCBvZiBgcmVzdWx0TGlzdGAgYW5kXG4gICAqIGBtYXJrdXBMaXN0YCBzaG91bGQgYmUgdGhlIHNhbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gbWFya3VwTGlzdCBMaXN0IG9mIG1hcmt1cCBzdHJpbmdzIHRvIHJlbmRlci5cbiAgICogQHJldHVybiB7YXJyYXk8RE9NRWxlbWVudD59IExpc3Qgb2YgcmVuZGVyZWQgbm9kZXMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlSZW5kZXJNYXJrdXA6IGZ1bmN0aW9uKG1hcmt1cExpc3QpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NLFxuICAgICAgJ2Rhbmdlcm91c2x5UmVuZGVyTWFya3VwKC4uLik6IENhbm5vdCByZW5kZXIgbWFya3VwIGluIGEgd29ya2VyICcgK1xuICAgICAgJ3RocmVhZC4gTWFrZSBzdXJlIGB3aW5kb3dgIGFuZCBgZG9jdW1lbnRgIGFyZSBhdmFpbGFibGUgZ2xvYmFsbHkgJyArXG4gICAgICAnYmVmb3JlIHJlcXVpcmluZyBSZWFjdCB3aGVuIHVuaXQgdGVzdGluZyBvciB1c2UgJyArXG4gICAgICAnUmVhY3QucmVuZGVyVG9TdHJpbmcgZm9yIHNlcnZlciByZW5kZXJpbmcuJ1xuICAgICkgOiBpbnZhcmlhbnQoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSk7XG4gICAgdmFyIG5vZGVOYW1lO1xuICAgIHZhciBtYXJrdXBCeU5vZGVOYW1lID0ge307XG4gICAgLy8gR3JvdXAgbWFya3VwIGJ5IGBub2RlTmFtZWAgaWYgYSB3cmFwIGlzIG5lY2Vzc2FyeSwgZWxzZSBieSAnKicuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXJrdXBMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBtYXJrdXBMaXN0W2ldLFxuICAgICAgICAnZGFuZ2Vyb3VzbHlSZW5kZXJNYXJrdXAoLi4uKTogTWlzc2luZyBtYXJrdXAuJ1xuICAgICAgKSA6IGludmFyaWFudChtYXJrdXBMaXN0W2ldKSk7XG4gICAgICBub2RlTmFtZSA9IGdldE5vZGVOYW1lKG1hcmt1cExpc3RbaV0pO1xuICAgICAgbm9kZU5hbWUgPSBnZXRNYXJrdXBXcmFwKG5vZGVOYW1lKSA/IG5vZGVOYW1lIDogJyonO1xuICAgICAgbWFya3VwQnlOb2RlTmFtZVtub2RlTmFtZV0gPSBtYXJrdXBCeU5vZGVOYW1lW25vZGVOYW1lXSB8fCBbXTtcbiAgICAgIG1hcmt1cEJ5Tm9kZU5hbWVbbm9kZU5hbWVdW2ldID0gbWFya3VwTGlzdFtpXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdExpc3QgPSBbXTtcbiAgICB2YXIgcmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCA9IDA7XG4gICAgZm9yIChub2RlTmFtZSBpbiBtYXJrdXBCeU5vZGVOYW1lKSB7XG4gICAgICBpZiAoIW1hcmt1cEJ5Tm9kZU5hbWUuaGFzT3duUHJvcGVydHkobm9kZU5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIG1hcmt1cExpc3RCeU5vZGVOYW1lID0gbWFya3VwQnlOb2RlTmFtZVtub2RlTmFtZV07XG5cbiAgICAgIC8vIFRoaXMgZm9yLWluIGxvb3Agc2tpcHMgdGhlIGhvbGVzIG9mIHRoZSBzcGFyc2UgYXJyYXkuIFRoZSBvcmRlciBvZlxuICAgICAgLy8gaXRlcmF0aW9uIHNob3VsZCBmb2xsb3cgdGhlIG9yZGVyIG9mIGFzc2lnbm1lbnQsIHdoaWNoIGhhcHBlbnMgdG8gbWF0Y2hcbiAgICAgIC8vIG51bWVyaWNhbCBpbmRleCBvcmRlciwgYnV0IHdlIGRvbid0IHJlbHkgb24gdGhhdC5cbiAgICAgIGZvciAodmFyIHJlc3VsdEluZGV4IGluIG1hcmt1cExpc3RCeU5vZGVOYW1lKSB7XG4gICAgICAgIGlmIChtYXJrdXBMaXN0QnlOb2RlTmFtZS5oYXNPd25Qcm9wZXJ0eShyZXN1bHRJbmRleCkpIHtcbiAgICAgICAgICB2YXIgbWFya3VwID0gbWFya3VwTGlzdEJ5Tm9kZU5hbWVbcmVzdWx0SW5kZXhdO1xuXG4gICAgICAgICAgLy8gUHVzaCB0aGUgcmVxdWVzdGVkIG1hcmt1cCB3aXRoIGFuIGFkZGl0aW9uYWwgUkVTVUxUX0lOREVYX0FUVFJcbiAgICAgICAgICAvLyBhdHRyaWJ1dGUuICBJZiB0aGUgbWFya3VwIGRvZXMgbm90IHN0YXJ0IHdpdGggYSA8IGNoYXJhY3RlciwgaXRcbiAgICAgICAgICAvLyB3aWxsIGJlIGRpc2NhcmRlZCBiZWxvdyAod2l0aCBhbiBhcHByb3ByaWF0ZSBjb25zb2xlLmVycm9yKS5cbiAgICAgICAgICBtYXJrdXBMaXN0QnlOb2RlTmFtZVtyZXN1bHRJbmRleF0gPSBtYXJrdXAucmVwbGFjZShcbiAgICAgICAgICAgIE9QRU5fVEFHX05BTUVfRVhQLFxuICAgICAgICAgICAgLy8gVGhpcyBpbmRleCB3aWxsIGJlIHBhcnNlZCBiYWNrIG91dCBiZWxvdy5cbiAgICAgICAgICAgICckMSAnICsgUkVTVUxUX0lOREVYX0FUVFIgKyAnPVwiJyArIHJlc3VsdEluZGV4ICsgJ1wiICdcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbmRlciBlYWNoIGdyb3VwIG9mIG1hcmt1cCB3aXRoIHNpbWlsYXIgd3JhcHBpbmcgYG5vZGVOYW1lYC5cbiAgICAgIHZhciByZW5kZXJOb2RlcyA9IGNyZWF0ZU5vZGVzRnJvbU1hcmt1cChcbiAgICAgICAgbWFya3VwTGlzdEJ5Tm9kZU5hbWUuam9pbignJyksXG4gICAgICAgIGVtcHR5RnVuY3Rpb24gLy8gRG8gbm90aGluZyBzcGVjaWFsIHdpdGggPHNjcmlwdD4gdGFncy5cbiAgICAgICk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZW5kZXJOb2Rlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgcmVuZGVyTm9kZSA9IHJlbmRlck5vZGVzW2ldO1xuICAgICAgICBpZiAocmVuZGVyTm9kZS5oYXNBdHRyaWJ1dGUgJiZcbiAgICAgICAgICAgIHJlbmRlck5vZGUuaGFzQXR0cmlidXRlKFJFU1VMVF9JTkRFWF9BVFRSKSkge1xuXG4gICAgICAgICAgcmVzdWx0SW5kZXggPSArcmVuZGVyTm9kZS5nZXRBdHRyaWJ1dGUoUkVTVUxUX0lOREVYX0FUVFIpO1xuICAgICAgICAgIHJlbmRlck5vZGUucmVtb3ZlQXR0cmlidXRlKFJFU1VMVF9JTkRFWF9BVFRSKTtcblxuICAgICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgICAhcmVzdWx0TGlzdC5oYXNPd25Qcm9wZXJ0eShyZXN1bHRJbmRleCksXG4gICAgICAgICAgICAnRGFuZ2VyOiBBc3NpZ25pbmcgdG8gYW4gYWxyZWFkeS1vY2N1cGllZCByZXN1bHQgaW5kZXguJ1xuICAgICAgICAgICkgOiBpbnZhcmlhbnQoIXJlc3VsdExpc3QuaGFzT3duUHJvcGVydHkocmVzdWx0SW5kZXgpKSk7XG5cbiAgICAgICAgICByZXN1bHRMaXN0W3Jlc3VsdEluZGV4XSA9IHJlbmRlck5vZGU7XG5cbiAgICAgICAgICAvLyBUaGlzIHNob3VsZCBtYXRjaCByZXN1bHRMaXN0Lmxlbmd0aCBhbmQgbWFya3VwTGlzdC5sZW5ndGggd2hlblxuICAgICAgICAgIC8vIHdlJ3JlIGRvbmUuXG4gICAgICAgICAgcmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCArPSAxO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIFwiRGFuZ2VyOiBEaXNjYXJkaW5nIHVuZXhwZWN0ZWQgbm9kZTpcIixcbiAgICAgICAgICAgIHJlbmRlck5vZGVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWx0aG91Z2ggcmVzdWx0TGlzdCB3YXMgcG9wdWxhdGVkIG91dCBvZiBvcmRlciwgaXQgc2hvdWxkIG5vdyBiZSBhIGRlbnNlXG4gICAgLy8gYXJyYXkuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHJlc3VsdExpc3RBc3NpZ25tZW50Q291bnQgPT09IHJlc3VsdExpc3QubGVuZ3RoLFxuICAgICAgJ0RhbmdlcjogRGlkIG5vdCBhc3NpZ24gdG8gZXZlcnkgaW5kZXggb2YgcmVzdWx0TGlzdC4nXG4gICAgKSA6IGludmFyaWFudChyZXN1bHRMaXN0QXNzaWdubWVudENvdW50ID09PSByZXN1bHRMaXN0Lmxlbmd0aCkpO1xuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHJlc3VsdExpc3QubGVuZ3RoID09PSBtYXJrdXBMaXN0Lmxlbmd0aCxcbiAgICAgICdEYW5nZXI6IEV4cGVjdGVkIG1hcmt1cCB0byByZW5kZXIgJXMgbm9kZXMsIGJ1dCByZW5kZXJlZCAlcy4nLFxuICAgICAgbWFya3VwTGlzdC5sZW5ndGgsXG4gICAgICByZXN1bHRMaXN0Lmxlbmd0aFxuICAgICkgOiBpbnZhcmlhbnQocmVzdWx0TGlzdC5sZW5ndGggPT09IG1hcmt1cExpc3QubGVuZ3RoKSk7XG5cbiAgICByZXR1cm4gcmVzdWx0TGlzdDtcbiAgfSxcblxuICAvKipcbiAgICogUmVwbGFjZXMgYSBub2RlIHdpdGggYSBzdHJpbmcgb2YgbWFya3VwIGF0IGl0cyBjdXJyZW50IHBvc2l0aW9uIHdpdGhpbiBpdHNcbiAgICogcGFyZW50LiBUaGUgbWFya3VwIG11c3QgcmVuZGVyIGludG8gYSBzaW5nbGUgcm9vdCBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG9sZENoaWxkIENoaWxkIG5vZGUgdG8gcmVwbGFjZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgdG8gcmVuZGVyIGluIHBsYWNlIG9mIHRoZSBjaGlsZCBub2RlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwOiBmdW5jdGlvbihvbGRDaGlsZCwgbWFya3VwKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSxcbiAgICAgICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBDYW5ub3QgcmVuZGVyIG1hcmt1cCBpbiBhICcgK1xuICAgICAgJ3dvcmtlciB0aHJlYWQuIE1ha2Ugc3VyZSBgd2luZG93YCBhbmQgYGRvY3VtZW50YCBhcmUgYXZhaWxhYmxlICcgK1xuICAgICAgJ2dsb2JhbGx5IGJlZm9yZSByZXF1aXJpbmcgUmVhY3Qgd2hlbiB1bml0IHRlc3Rpbmcgb3IgdXNlICcgK1xuICAgICAgJ1JlYWN0LnJlbmRlclRvU3RyaW5nIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLidcbiAgICApIDogaW52YXJpYW50KEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQobWFya3VwLCAnZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAoLi4uKTogTWlzc2luZyBtYXJrdXAuJykgOiBpbnZhcmlhbnQobWFya3VwKSk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIG9sZENoaWxkLnRhZ05hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2h0bWwnLFxuICAgICAgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKC4uLik6IENhbm5vdCByZXBsYWNlIG1hcmt1cCBvZiB0aGUgJyArXG4gICAgICAnPGh0bWw+IG5vZGUuIFRoaXMgaXMgYmVjYXVzZSBicm93c2VyIHF1aXJrcyBtYWtlIHRoaXMgdW5yZWxpYWJsZSAnICtcbiAgICAgICdhbmQvb3Igc2xvdy4gSWYgeW91IHdhbnQgdG8gcmVuZGVyIHRvIHRoZSByb290IHlvdSBtdXN0IHVzZSAnICtcbiAgICAgICdzZXJ2ZXIgcmVuZGVyaW5nLiBTZWUgcmVuZGVyQ29tcG9uZW50VG9TdHJpbmcoKS4nXG4gICAgKSA6IGludmFyaWFudChvbGRDaGlsZC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdodG1sJykpO1xuXG4gICAgdmFyIG5ld0NoaWxkID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwKG1hcmt1cCwgZW1wdHlGdW5jdGlvbilbMF07XG4gICAgb2xkQ2hpbGQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3Q2hpbGQsIG9sZENoaWxkKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhbmdlcjtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9EYW5nZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxMjBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEZWZhdWx0RXZlbnRQbHVnaW5PcmRlclxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4gdmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG5cbi8qKlxuICogTW9kdWxlIHRoYXQgaXMgaW5qZWN0YWJsZSBpbnRvIGBFdmVudFBsdWdpbkh1YmAsIHRoYXQgc3BlY2lmaWVzIGFcbiAqIGRldGVybWluaXN0aWMgb3JkZXJpbmcgb2YgYEV2ZW50UGx1Z2luYHMuIEEgY29udmVuaWVudCB3YXkgdG8gcmVhc29uIGFib3V0XG4gKiBwbHVnaW5zLCB3aXRob3V0IGhhdmluZyB0byBwYWNrYWdlIGV2ZXJ5IG9uZSBvZiB0aGVtLiBUaGlzIGlzIGJldHRlciB0aGFuXG4gKiBoYXZpbmcgcGx1Z2lucyBiZSBvcmRlcmVkIGluIHRoZSBzYW1lIG9yZGVyIHRoYXQgdGhleSBhcmUgaW5qZWN0ZWQgYmVjYXVzZVxuICogdGhhdCBvcmRlcmluZyB3b3VsZCBiZSBpbmZsdWVuY2VkIGJ5IHRoZSBwYWNrYWdpbmcgb3JkZXIuXG4gKiBgUmVzcG9uZGVyRXZlbnRQbHVnaW5gIG11c3Qgb2NjdXIgYmVmb3JlIGBTaW1wbGVFdmVudFBsdWdpbmAgc28gdGhhdFxuICogcHJldmVudGluZyBkZWZhdWx0IG9uIGV2ZW50cyBpcyBjb252ZW5pZW50IGluIGBTaW1wbGVFdmVudFBsdWdpbmAgaGFuZGxlcnMuXG4gKi9cbnZhciBEZWZhdWx0RXZlbnRQbHVnaW5PcmRlciA9IFtcbiAga2V5T2Yoe1Jlc3BvbmRlckV2ZW50UGx1Z2luOiBudWxsfSksXG4gIGtleU9mKHtTaW1wbGVFdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7VGFwRXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe0VudGVyTGVhdmVFdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7Q2hhbmdlRXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe1NlbGVjdEV2ZW50UGx1Z2luOiBudWxsfSksXG4gIGtleU9mKHtDb21wb3NpdGlvbkV2ZW50UGx1Z2luOiBudWxsfSksXG4gIGtleU9mKHtCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOiBudWxsfSksXG4gIGtleU9mKHtBbmFseXRpY3NFdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7TW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpbjogbnVsbH0pXG5dO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERlZmF1bHRFdmVudFBsdWdpbk9yZGVyO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL0RlZmF1bHRFdmVudFBsdWdpbk9yZGVyLmpzXG4gKiogbW9kdWxlIGlkID0gMTIxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZShcIi4vRXZlbnRQcm9wYWdhdG9yc1wiKTtcbnZhciBTeW50aGV0aWNNb3VzZUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljTW91c2VFdmVudFwiKTtcblxudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcbnZhciBnZXRGaXJzdFJlYWN0RE9NID0gUmVhY3RNb3VudC5nZXRGaXJzdFJlYWN0RE9NO1xuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgbW91c2VFbnRlcjoge1xuICAgIHJlZ2lzdHJhdGlvbk5hbWU6IGtleU9mKHtvbk1vdXNlRW50ZXI6IG51bGx9KSxcbiAgICBkZXBlbmRlbmNpZXM6IFtcbiAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3ZlclxuICAgIF1cbiAgfSxcbiAgbW91c2VMZWF2ZToge1xuICAgIHJlZ2lzdHJhdGlvbk5hbWU6IGtleU9mKHtvbk1vdXNlTGVhdmU6IG51bGx9KSxcbiAgICBkZXBlbmRlbmNpZXM6IFtcbiAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3ZlclxuICAgIF1cbiAgfVxufTtcblxudmFyIGV4dHJhY3RlZEV2ZW50cyA9IFtudWxsLCBudWxsXTtcblxudmFyIEVudGVyTGVhdmVFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBGb3IgYWxtb3N0IGV2ZXJ5IGludGVyYWN0aW9uIHdlIGNhcmUgYWJvdXQsIHRoZXJlIHdpbGwgYmUgYm90aCBhIHRvcC1sZXZlbFxuICAgKiBgbW91c2VvdmVyYCBhbmQgYG1vdXNlb3V0YCBldmVudCB0aGF0IG9jY3Vycy4gT25seSB1c2UgYG1vdXNlb3V0YCBzbyB0aGF0XG4gICAqIHdlIGRvIG5vdCBleHRyYWN0IGR1cGxpY2F0ZSBldmVudHMuIEhvd2V2ZXIsIG1vdmluZyB0aGUgbW91c2UgaW50byB0aGVcbiAgICogYnJvd3NlciBmcm9tIG91dHNpZGUgd2lsbCBub3QgZmlyZSBhIGBtb3VzZW91dGAgZXZlbnQuIEluIHRoaXMgY2FzZSwgd2UgdXNlXG4gICAqIHRoZSBgbW91c2VvdmVyYCB0b3AtbGV2ZWwgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudCkge1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdmVyICYmXG4gICAgICAgIChuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LmZyb21FbGVtZW50KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0b3BMZXZlbFR5cGUgIT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQgJiZcbiAgICAgICAgdG9wTGV2ZWxUeXBlICE9PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3Zlcikge1xuICAgICAgLy8gTXVzdCBub3QgYmUgYSBtb3VzZSBpbiBvciBtb3VzZSBvdXQgLSBpZ25vcmluZy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB3aW47XG4gICAgaWYgKHRvcExldmVsVGFyZ2V0LndpbmRvdyA9PT0gdG9wTGV2ZWxUYXJnZXQpIHtcbiAgICAgIC8vIGB0b3BMZXZlbFRhcmdldGAgaXMgcHJvYmFibHkgYSB3aW5kb3cgb2JqZWN0LlxuICAgICAgd2luID0gdG9wTGV2ZWxUYXJnZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IGBvd25lckRvY3VtZW50YCBpcyBzb21ldGltZXMgdW5kZWZpbmVkIGluIElFOC5cbiAgICAgIHZhciBkb2MgPSB0b3BMZXZlbFRhcmdldC5vd25lckRvY3VtZW50O1xuICAgICAgaWYgKGRvYykge1xuICAgICAgICB3aW4gPSBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbiA9IHdpbmRvdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZnJvbSwgdG87XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCkge1xuICAgICAgZnJvbSA9IHRvcExldmVsVGFyZ2V0O1xuICAgICAgdG8gPVxuICAgICAgICBnZXRGaXJzdFJlYWN0RE9NKG5hdGl2ZUV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbmF0aXZlRXZlbnQudG9FbGVtZW50KSB8fFxuICAgICAgICB3aW47XG4gICAgfSBlbHNlIHtcbiAgICAgIGZyb20gPSB3aW47XG4gICAgICB0byA9IHRvcExldmVsVGFyZ2V0O1xuICAgIH1cblxuICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgLy8gTm90aGluZyBwZXJ0YWlucyB0byBvdXIgbWFuYWdlZCBjb21wb25lbnRzLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGZyb21JRCA9IGZyb20gPyBSZWFjdE1vdW50LmdldElEKGZyb20pIDogJyc7XG4gICAgdmFyIHRvSUQgPSB0byA/IFJlYWN0TW91bnQuZ2V0SUQodG8pIDogJyc7XG5cbiAgICB2YXIgbGVhdmUgPSBTeW50aGV0aWNNb3VzZUV2ZW50LmdldFBvb2xlZChcbiAgICAgIGV2ZW50VHlwZXMubW91c2VMZWF2ZSxcbiAgICAgIGZyb21JRCxcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgKTtcbiAgICBsZWF2ZS50eXBlID0gJ21vdXNlbGVhdmUnO1xuICAgIGxlYXZlLnRhcmdldCA9IGZyb207XG4gICAgbGVhdmUucmVsYXRlZFRhcmdldCA9IHRvO1xuXG4gICAgdmFyIGVudGVyID0gU3ludGhldGljTW91c2VFdmVudC5nZXRQb29sZWQoXG4gICAgICBldmVudFR5cGVzLm1vdXNlRW50ZXIsXG4gICAgICB0b0lELFxuICAgICAgbmF0aXZlRXZlbnRcbiAgICApO1xuICAgIGVudGVyLnR5cGUgPSAnbW91c2VlbnRlcic7XG4gICAgZW50ZXIudGFyZ2V0ID0gdG87XG4gICAgZW50ZXIucmVsYXRlZFRhcmdldCA9IGZyb207XG5cbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyhsZWF2ZSwgZW50ZXIsIGZyb21JRCwgdG9JRCk7XG5cbiAgICBleHRyYWN0ZWRFdmVudHNbMF0gPSBsZWF2ZTtcbiAgICBleHRyYWN0ZWRFdmVudHNbMV0gPSBlbnRlcjtcblxuICAgIHJldHVybiBleHRyYWN0ZWRFdmVudHM7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFbnRlckxlYXZlRXZlbnRQbHVnaW47XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvRW50ZXJMZWF2ZUV2ZW50UGx1Z2luLmpzXG4gKiogbW9kdWxlIGlkID0gMTIyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRMaXN0ZW5lclxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG5cbi8qKlxuICogVXBzdHJlYW0gdmVyc2lvbiBvZiBldmVudCBsaXN0ZW5lci4gRG9lcyBub3QgdGFrZSBpbnRvIGFjY291bnQgc3BlY2lmaWNcbiAqIG5hdHVyZSBvZiBwbGF0Zm9ybS5cbiAqL1xudmFyIEV2ZW50TGlzdGVuZXIgPSB7XG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGJ1YmJsZSBwaGFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdGFyZ2V0IERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGxpc3RlbmVyIG9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIEV2ZW50IHR5cGUsIGUuZy4gJ2NsaWNrJyBvciAnbW91c2VvdmVyJy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggYSBgcmVtb3ZlYCBtZXRob2QuXG4gICAqL1xuICBsaXN0ZW46IGZ1bmN0aW9uKHRhcmdldCwgZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICAgIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0YXJnZXQuYXR0YWNoRXZlbnQpIHtcbiAgICAgIHRhcmdldC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRhcmdldC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgY2FwdHVyZTogZnVuY3Rpb24odGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICdBdHRlbXB0ZWQgdG8gbGlzdGVuIHRvIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2Ugb24gYSAnICtcbiAgICAgICAgICAnYnJvd3NlciB0aGF0IGRvZXMgbm90IHN1cHBvcnQgdGhlIGNhcHR1cmUgcGhhc2UuIFlvdXIgYXBwbGljYXRpb24gJyArXG4gICAgICAgICAgJ3dpbGwgbm90IHJlY2VpdmUgc29tZSBldmVudHMuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBlbXB0eUZ1bmN0aW9uXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIHJlZ2lzdGVyRGVmYXVsdDogZnVuY3Rpb24oKSB7fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudExpc3RlbmVyO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL0V2ZW50TGlzdGVuZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxMjNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBIVE1MRE9NUHJvcGVydHlDb25maWdcbiAqL1xuXG4vKmpzbGludCBiaXR3aXNlOiB0cnVlKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBNVVNUX1VTRV9BVFRSSUJVVEUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uTVVTVF9VU0VfQVRUUklCVVRFO1xudmFyIE1VU1RfVVNFX1BST1BFUlRZID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLk1VU1RfVVNFX1BST1BFUlRZO1xudmFyIEhBU19CT09MRUFOX1ZBTFVFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19CT09MRUFOX1ZBTFVFO1xudmFyIEhBU19TSURFX0VGRkVDVFMgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX1NJREVfRUZGRUNUUztcbnZhciBIQVNfTlVNRVJJQ19WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfTlVNRVJJQ19WQUxVRTtcbnZhciBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSA9XG4gIERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRTtcbnZhciBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFID1cbiAgRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU7XG5cbnZhciBoYXNTVkc7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHZhciBpbXBsZW1lbnRhdGlvbiA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uO1xuICBoYXNTVkcgPSAoXG4gICAgaW1wbGVtZW50YXRpb24gJiZcbiAgICBpbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmXG4gICAgaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShcbiAgICAgICdodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcxMS9mZWF0dXJlI0Jhc2ljU3RydWN0dXJlJyxcbiAgICAgICcxLjEnXG4gICAgKVxuICApO1xufVxuXG5cbnZhciBIVE1MRE9NUHJvcGVydHlDb25maWcgPSB7XG4gIGlzQ3VzdG9tQXR0cmlidXRlOiBSZWdFeHAucHJvdG90eXBlLnRlc3QuYmluZChcbiAgICAvXihkYXRhfGFyaWEpLVthLXpfXVthLXpcXGRfLlxcLV0qJC9cbiAgKSxcbiAgUHJvcGVydGllczoge1xuICAgIC8qKlxuICAgICAqIFN0YW5kYXJkIFByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBhY2NlcHQ6IG51bGwsXG4gICAgYWNjZXB0Q2hhcnNldDogbnVsbCxcbiAgICBhY2Nlc3NLZXk6IG51bGwsXG4gICAgYWN0aW9uOiBudWxsLFxuICAgIGFsbG93RnVsbFNjcmVlbjogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgYWxsb3dUcmFuc3BhcmVuY3k6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBhbHQ6IG51bGwsXG4gICAgYXN5bmM6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGF1dG9Db21wbGV0ZTogbnVsbCxcbiAgICAvLyBhdXRvRm9jdXMgaXMgcG9seWZpbGxlZC9ub3JtYWxpemVkIGJ5IEF1dG9Gb2N1c01peGluXG4gICAgLy8gYXV0b0ZvY3VzOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBhdXRvUGxheTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY2VsbFBhZGRpbmc6IG51bGwsXG4gICAgY2VsbFNwYWNpbmc6IG51bGwsXG4gICAgY2hhclNldDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGNoZWNrZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY2xhc3NJRDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIC8vIFRvIHNldCBjbGFzc05hbWUgb24gU1ZHIGVsZW1lbnRzLCBpdCdzIG5lY2Vzc2FyeSB0byB1c2UgLnNldEF0dHJpYnV0ZTtcbiAgICAvLyB0aGlzIHdvcmtzIG9uIEhUTUwgZWxlbWVudHMgdG9vIGluIGFsbCBicm93c2VycyBleGNlcHQgSUU4LiBDb252ZW5pZW50bHksXG4gICAgLy8gSUU4IGRvZXNuJ3Qgc3VwcG9ydCBTVkcgYW5kIHNvIHdlIGNhbiBzaW1wbHkgdXNlIHRoZSBhdHRyaWJ1dGUgaW5cbiAgICAvLyBicm93c2VycyB0aGF0IHN1cHBvcnQgU1ZHIGFuZCB0aGUgcHJvcGVydHkgaW4gYnJvd3NlcnMgdGhhdCBkb24ndCxcbiAgICAvLyByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgSFRNTCBvciBTVkcuXG4gICAgY2xhc3NOYW1lOiBoYXNTVkcgPyBNVVNUX1VTRV9BVFRSSUJVVEUgOiBNVVNUX1VTRV9QUk9QRVJUWSxcbiAgICBjb2xzOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICBjb2xTcGFuOiBudWxsLFxuICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgY29udGVudEVkaXRhYmxlOiBudWxsLFxuICAgIGNvbnRleHRNZW51OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgY29udHJvbHM6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY29vcmRzOiBudWxsLFxuICAgIGNyb3NzT3JpZ2luOiBudWxsLFxuICAgIGRhdGE6IG51bGwsIC8vIEZvciBgPG9iamVjdCAvPmAgYWN0cyBhcyBgc3JjYC5cbiAgICBkYXRlVGltZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGRlZmVyOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBkaXI6IG51bGwsXG4gICAgZGlzYWJsZWQ6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGRvd25sb2FkOiBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFLFxuICAgIGRyYWdnYWJsZTogbnVsbCxcbiAgICBlbmNUeXBlOiBudWxsLFxuICAgIGZvcm06IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb3JtQWN0aW9uOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9ybUVuY1R5cGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb3JtTWV0aG9kOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9ybU5vVmFsaWRhdGU6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGZvcm1UYXJnZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmcmFtZUJvcmRlcjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGhlaWdodDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGhpZGRlbjogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgaHJlZjogbnVsbCxcbiAgICBocmVmTGFuZzogbnVsbCxcbiAgICBodG1sRm9yOiBudWxsLFxuICAgIGh0dHBFcXVpdjogbnVsbCxcbiAgICBpY29uOiBudWxsLFxuICAgIGlkOiBNVVNUX1VTRV9QUk9QRVJUWSxcbiAgICBsYWJlbDogbnVsbCxcbiAgICBsYW5nOiBudWxsLFxuICAgIGxpc3Q6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBsb29wOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG1hbmlmZXN0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWFyZ2luSGVpZ2h0OiBudWxsLFxuICAgIG1hcmdpbldpZHRoOiBudWxsLFxuICAgIG1heDogbnVsbCxcbiAgICBtYXhMZW5ndGg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtZWRpYTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1lZGlhR3JvdXA6IG51bGwsXG4gICAgbWV0aG9kOiBudWxsLFxuICAgIG1pbjogbnVsbCxcbiAgICBtdWx0aXBsZTogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBtdXRlZDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBuYW1lOiBudWxsLFxuICAgIG5vVmFsaWRhdGU6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG9wZW46IG51bGwsXG4gICAgcGF0dGVybjogbnVsbCxcbiAgICBwbGFjZWhvbGRlcjogbnVsbCxcbiAgICBwb3N0ZXI6IG51bGwsXG4gICAgcHJlbG9hZDogbnVsbCxcbiAgICByYWRpb0dyb3VwOiBudWxsLFxuICAgIHJlYWRPbmx5OiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHJlbDogbnVsbCxcbiAgICByZXF1aXJlZDogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgcm9sZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHJvd3M6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgIHJvd1NwYW46IG51bGwsXG4gICAgc2FuZGJveDogbnVsbCxcbiAgICBzY29wZTogbnVsbCxcbiAgICBzY3JvbGxpbmc6IG51bGwsXG4gICAgc2VhbWxlc3M6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHNlbGVjdGVkOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHNoYXBlOiBudWxsLFxuICAgIHNpemU6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgIHNpemVzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3BhbjogSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgc3BlbGxDaGVjazogbnVsbCxcbiAgICBzcmM6IG51bGwsXG4gICAgc3JjRG9jOiBNVVNUX1VTRV9QUk9QRVJUWSxcbiAgICBzcmNTZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdGFydDogSEFTX05VTUVSSUNfVkFMVUUsXG4gICAgc3RlcDogbnVsbCxcbiAgICBzdHlsZTogbnVsbCxcbiAgICB0YWJJbmRleDogbnVsbCxcbiAgICB0YXJnZXQ6IG51bGwsXG4gICAgdGl0bGU6IG51bGwsXG4gICAgdHlwZTogbnVsbCxcbiAgICB1c2VNYXA6IG51bGwsXG4gICAgdmFsdWU6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX1NJREVfRUZGRUNUUyxcbiAgICB3aWR0aDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHdtb2RlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cbiAgICAvKipcbiAgICAgKiBOb24tc3RhbmRhcmQgUHJvcGVydGllc1xuICAgICAqL1xuICAgIGF1dG9DYXBpdGFsaXplOiBudWxsLCAvLyBTdXBwb3J0ZWQgaW4gTW9iaWxlIFNhZmFyaSBmb3Iga2V5Ym9hcmQgaGludHNcbiAgICBhdXRvQ29ycmVjdDogbnVsbCwgLy8gU3VwcG9ydGVkIGluIE1vYmlsZSBTYWZhcmkgZm9yIGtleWJvYXJkIGhpbnRzXG4gICAgaXRlbVByb3A6IE1VU1RfVVNFX0FUVFJJQlVURSwgLy8gTWljcm9kYXRhOiBodHRwOi8vc2NoZW1hLm9yZy9kb2NzL2dzLmh0bWxcbiAgICBpdGVtU2NvcGU6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLCAvLyBNaWNyb2RhdGE6IGh0dHA6Ly9zY2hlbWEub3JnL2RvY3MvZ3MuaHRtbFxuICAgIGl0ZW1UeXBlOiBNVVNUX1VTRV9BVFRSSUJVVEUsIC8vIE1pY3JvZGF0YTogaHR0cDovL3NjaGVtYS5vcmcvZG9jcy9ncy5odG1sXG4gICAgcHJvcGVydHk6IG51bGwgLy8gU3VwcG9ydHMgT0cgaW4gbWV0YSB0YWdzXG4gIH0sXG4gIERPTUF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgYWNjZXB0Q2hhcnNldDogJ2FjY2VwdC1jaGFyc2V0JyxcbiAgICBjbGFzc05hbWU6ICdjbGFzcycsXG4gICAgaHRtbEZvcjogJ2ZvcicsXG4gICAgaHR0cEVxdWl2OiAnaHR0cC1lcXVpdidcbiAgfSxcbiAgRE9NUHJvcGVydHlOYW1lczoge1xuICAgIGF1dG9DYXBpdGFsaXplOiAnYXV0b2NhcGl0YWxpemUnLFxuICAgIGF1dG9Db21wbGV0ZTogJ2F1dG9jb21wbGV0ZScsXG4gICAgYXV0b0NvcnJlY3Q6ICdhdXRvY29ycmVjdCcsXG4gICAgYXV0b0ZvY3VzOiAnYXV0b2ZvY3VzJyxcbiAgICBhdXRvUGxheTogJ2F1dG9wbGF5JyxcbiAgICBlbmNUeXBlOiAnZW5jdHlwZScsXG4gICAgaHJlZkxhbmc6ICdocmVmbGFuZycsXG4gICAgcmFkaW9Hcm91cDogJ3JhZGlvZ3JvdXAnLFxuICAgIHNwZWxsQ2hlY2s6ICdzcGVsbGNoZWNrJyxcbiAgICBzcmNEb2M6ICdzcmNkb2MnLFxuICAgIHNyY1NldDogJ3NyY3NldCdcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBIVE1MRE9NUHJvcGVydHlDb25maWc7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvSFRNTERPTVByb3BlcnR5Q29uZmlnLmpzXG4gKiogbW9kdWxlIGlkID0gMTI0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgTW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG4vKipcbiAqIE1vYmlsZSBTYWZhcmkgZG9lcyBub3QgZmlyZSBwcm9wZXJseSBidWJibGUgY2xpY2sgZXZlbnRzIG9uIG5vbi1pbnRlcmFjdGl2ZVxuICogZWxlbWVudHMsIHdoaWNoIG1lYW5zIGRlbGVnYXRlZCBjbGljayBsaXN0ZW5lcnMgZG8gbm90IGZpcmUuIFRoZSB3b3JrYXJvdW5kXG4gKiBmb3IgdGhpcyBidWcgaW52b2x2ZXMgYXR0YWNoaW5nIGFuIGVtcHR5IGNsaWNrIGxpc3RlbmVyIG9uIHRoZSB0YXJnZXQgbm9kZS5cbiAqXG4gKiBUaGlzIHBhcnRpY3VsYXIgcGx1Z2luIHdvcmtzIGFyb3VuZCB0aGUgYnVnIGJ5IGF0dGFjaGluZyBhbiBlbXB0eSBjbGlja1xuICogbGlzdGVuZXIgb24gYHRvdWNoc3RhcnRgICh3aGljaCBkb2VzIGZpcmUgb24gZXZlcnkgZWxlbWVudCkuXG4gKi9cbnZhciBNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luID0ge1xuXG4gIGV2ZW50VHlwZXM6IG51bGwsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudCkge1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wVG91Y2hTdGFydCkge1xuICAgICAgdmFyIHRhcmdldCA9IG5hdGl2ZUV2ZW50LnRhcmdldDtcbiAgICAgIGlmICh0YXJnZXQgJiYgIXRhcmdldC5vbmNsaWNrKSB7XG4gICAgICAgIHRhcmdldC5vbmNsaWNrID0gZW1wdHlGdW5jdGlvbjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL01vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW4uanNcbiAqKiBtb2R1bGUgaWQgPSAxMjVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCIpO1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpblV0aWxzXCIpO1xudmFyIFJlYWN0Q2hpbGRyZW4gPSByZXF1aXJlKFwiLi9SZWFjdENoaWxkcmVuXCIpO1xudmFyIFJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRcIik7XG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdENvbnRleHQgPSByZXF1aXJlKFwiLi9SZWFjdENvbnRleHRcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCIpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZShcIi4vUmVhY3RET01cIik7XG52YXIgUmVhY3RET01Db21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdERlZmF1bHRJbmplY3Rpb24gPSByZXF1aXJlKFwiLi9SZWFjdERlZmF1bHRJbmplY3Rpb25cIik7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiKTtcbnZhciBSZWFjdExlZ2FjeUVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdExlZ2FjeUVsZW1lbnRcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG52YXIgUmVhY3RNdWx0aUNoaWxkID0gcmVxdWlyZShcIi4vUmVhY3RNdWx0aUNoaWxkXCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcbnZhciBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVzXCIpO1xudmFyIFJlYWN0U2VydmVyUmVuZGVyaW5nID0gcmVxdWlyZShcIi4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmdcIik7XG52YXIgUmVhY3RUZXh0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RUZXh0Q29tcG9uZW50XCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBkZXByZWNhdGVkID0gcmVxdWlyZShcIi4vZGVwcmVjYXRlZFwiKTtcbnZhciBvbmx5Q2hpbGQgPSByZXF1aXJlKFwiLi9vbmx5Q2hpbGRcIik7XG5cblJlYWN0RGVmYXVsdEluamVjdGlvbi5pbmplY3QoKTtcblxudmFyIGNyZWF0ZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudDtcbnZhciBjcmVhdGVGYWN0b3J5ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3Rvcnk7XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgY3JlYXRlRWxlbWVudCA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVFbGVtZW50O1xuICBjcmVhdGVGYWN0b3J5ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUZhY3Rvcnk7XG59XG5cbi8vIFRPRE86IERyb3AgbGVnYWN5IGVsZW1lbnRzIG9uY2UgY2xhc3NlcyBubyBsb25nZXIgZXhwb3J0IHRoZXNlIGZhY3Rvcmllc1xuY3JlYXRlRWxlbWVudCA9IFJlYWN0TGVnYWN5RWxlbWVudC53cmFwQ3JlYXRlRWxlbWVudChcbiAgY3JlYXRlRWxlbWVudFxuKTtcbmNyZWF0ZUZhY3RvcnkgPSBSZWFjdExlZ2FjeUVsZW1lbnQud3JhcENyZWF0ZUZhY3RvcnkoXG4gIGNyZWF0ZUZhY3Rvcnlcbik7XG5cbnZhciByZW5kZXIgPSBSZWFjdFBlcmYubWVhc3VyZSgnUmVhY3QnLCAncmVuZGVyJywgUmVhY3RNb3VudC5yZW5kZXIpO1xuXG52YXIgUmVhY3QgPSB7XG4gIENoaWxkcmVuOiB7XG4gICAgbWFwOiBSZWFjdENoaWxkcmVuLm1hcCxcbiAgICBmb3JFYWNoOiBSZWFjdENoaWxkcmVuLmZvckVhY2gsXG4gICAgY291bnQ6IFJlYWN0Q2hpbGRyZW4uY291bnQsXG4gICAgb25seTogb25seUNoaWxkXG4gIH0sXG4gIERPTTogUmVhY3RET00sXG4gIFByb3BUeXBlczogUmVhY3RQcm9wVHlwZXMsXG4gIGluaXRpYWxpemVUb3VjaEV2ZW50czogZnVuY3Rpb24oc2hvdWxkVXNlVG91Y2gpIHtcbiAgICBFdmVudFBsdWdpblV0aWxzLnVzZVRvdWNoRXZlbnRzID0gc2hvdWxkVXNlVG91Y2g7XG4gIH0sXG4gIGNyZWF0ZUNsYXNzOiBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5jcmVhdGVDbGFzcyxcbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCxcbiAgY3JlYXRlRmFjdG9yeTogY3JlYXRlRmFjdG9yeSxcbiAgY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50OiBSZWFjdE1vdW50LmNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudCxcbiAgY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50QnlJRDogUmVhY3RNb3VudC5jb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnRCeUlELFxuICByZW5kZXI6IHJlbmRlcixcbiAgcmVuZGVyVG9TdHJpbmc6IFJlYWN0U2VydmVyUmVuZGVyaW5nLnJlbmRlclRvU3RyaW5nLFxuICByZW5kZXJUb1N0YXRpY01hcmt1cDogUmVhY3RTZXJ2ZXJSZW5kZXJpbmcucmVuZGVyVG9TdGF0aWNNYXJrdXAsXG4gIHVubW91bnRDb21wb25lbnRBdE5vZGU6IFJlYWN0TW91bnQudW5tb3VudENvbXBvbmVudEF0Tm9kZSxcbiAgaXNWYWxpZENsYXNzOiBSZWFjdExlZ2FjeUVsZW1lbnQuaXNWYWxpZENsYXNzLFxuICBpc1ZhbGlkRWxlbWVudDogUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50LFxuICB3aXRoQ29udGV4dDogUmVhY3RDb250ZXh0LndpdGhDb250ZXh0LFxuXG4gIC8vIEhvb2sgZm9yIEpTWCBzcHJlYWQsIGRvbid0IHVzZSB0aGlzIGZvciBhbnl0aGluZyBlbHNlLlxuICBfX3NwcmVhZDogYXNzaWduLFxuXG4gIC8vIERlcHJlY2F0aW9ucyAocmVtb3ZlIGZvciAwLjEzKVxuICByZW5kZXJDb21wb25lbnQ6IGRlcHJlY2F0ZWQoXG4gICAgJ1JlYWN0JyxcbiAgICAncmVuZGVyQ29tcG9uZW50JyxcbiAgICAncmVuZGVyJyxcbiAgICB0aGlzLFxuICAgIHJlbmRlclxuICApLFxuICByZW5kZXJDb21wb25lbnRUb1N0cmluZzogZGVwcmVjYXRlZChcbiAgICAnUmVhY3QnLFxuICAgICdyZW5kZXJDb21wb25lbnRUb1N0cmluZycsXG4gICAgJ3JlbmRlclRvU3RyaW5nJyxcbiAgICB0aGlzLFxuICAgIFJlYWN0U2VydmVyUmVuZGVyaW5nLnJlbmRlclRvU3RyaW5nXG4gICksXG4gIHJlbmRlckNvbXBvbmVudFRvU3RhdGljTWFya3VwOiBkZXByZWNhdGVkKFxuICAgICdSZWFjdCcsXG4gICAgJ3JlbmRlckNvbXBvbmVudFRvU3RhdGljTWFya3VwJyxcbiAgICAncmVuZGVyVG9TdGF0aWNNYXJrdXAnLFxuICAgIHRoaXMsXG4gICAgUmVhY3RTZXJ2ZXJSZW5kZXJpbmcucmVuZGVyVG9TdGF0aWNNYXJrdXBcbiAgKSxcbiAgaXNWYWxpZENvbXBvbmVudDogZGVwcmVjYXRlZChcbiAgICAnUmVhY3QnLFxuICAgICdpc1ZhbGlkQ29tcG9uZW50JyxcbiAgICAnaXNWYWxpZEVsZW1lbnQnLFxuICAgIHRoaXMsXG4gICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50XG4gIClcbn07XG5cbi8vIEluamVjdCB0aGUgcnVudGltZSBpbnRvIGEgZGV2dG9vbHMgZ2xvYmFsIGhvb2sgcmVnYXJkbGVzcyBvZiBicm93c2VyLlxuLy8gQWxsb3dzIGZvciBkZWJ1Z2dpbmcgd2hlbiB0aGUgaG9vayBpcyBpbmplY3RlZCBvbiB0aGUgcGFnZS5cbmlmIChcbiAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5pbmplY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdCh7XG4gICAgQ29tcG9uZW50OiBSZWFjdENvbXBvbmVudCxcbiAgICBDdXJyZW50T3duZXI6IFJlYWN0Q3VycmVudE93bmVyLFxuICAgIERPTUNvbXBvbmVudDogUmVhY3RET01Db21wb25lbnQsXG4gICAgRE9NUHJvcGVydHlPcGVyYXRpb25zOiBET01Qcm9wZXJ0eU9wZXJhdGlvbnMsXG4gICAgSW5zdGFuY2VIYW5kbGVzOiBSZWFjdEluc3RhbmNlSGFuZGxlcyxcbiAgICBNb3VudDogUmVhY3RNb3VudCxcbiAgICBNdWx0aUNoaWxkOiBSZWFjdE11bHRpQ2hpbGQsXG4gICAgVGV4dENvbXBvbmVudDogUmVhY3RUZXh0Q29tcG9uZW50XG4gIH0pO1xufVxuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuICBpZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmIHdpbmRvdy50b3AgPT09IHdpbmRvdy5zZWxmKSB7XG5cbiAgICAvLyBJZiB3ZSdyZSBpbiBDaHJvbWUsIGxvb2sgZm9yIHRoZSBkZXZ0b29scyBtYXJrZXIgYW5kIHByb3ZpZGUgYSBkb3dubG9hZFxuICAgIC8vIGxpbmsgaWYgbm90IGluc3RhbGxlZC5cbiAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUnKSA+IC0xKSB7XG4gICAgICBpZiAodHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcbiAgICAgICAgICAnRG93bmxvYWQgdGhlIFJlYWN0IERldlRvb2xzIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOiAnICtcbiAgICAgICAgICAnaHR0cDovL2ZiLm1lL3JlYWN0LWRldnRvb2xzJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBleHBlY3RlZEZlYXR1cmVzID0gW1xuICAgICAgLy8gc2hpbXNcbiAgICAgIEFycmF5LmlzQXJyYXksXG4gICAgICBBcnJheS5wcm90b3R5cGUuZXZlcnksXG4gICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCxcbiAgICAgIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLFxuICAgICAgQXJyYXkucHJvdG90eXBlLm1hcCxcbiAgICAgIERhdGUubm93LFxuICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQsXG4gICAgICBPYmplY3Qua2V5cyxcbiAgICAgIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsXG4gICAgICBTdHJpbmcucHJvdG90eXBlLnRyaW0sXG5cbiAgICAgIC8vIHNoYW1zXG4gICAgICBPYmplY3QuY3JlYXRlLFxuICAgICAgT2JqZWN0LmZyZWV6ZVxuICAgIF07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGVjdGVkRmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZXhwZWN0ZWRGZWF0dXJlc1tpXSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICdPbmUgb3IgbW9yZSBFUzUgc2hpbS9zaGFtcyBleHBlY3RlZCBieSBSZWFjdCBhcmUgbm90IGF2YWlsYWJsZTogJyArXG4gICAgICAgICAgJ2h0dHA6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLXBvbHlmaWxscydcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIFZlcnNpb24gZXhpc3RzIG9ubHkgaW4gdGhlIG9wZW4tc291cmNlIHZlcnNpb24gb2YgUmVhY3QsIG5vdCBpbiBGYWNlYm9vaydzXG4vLyBpbnRlcm5hbCB2ZXJzaW9uLlxuUmVhY3QudmVyc2lvbiA9ICcwLjEyLjInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMTI2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDaGlsZHJlblxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKTtcblxudmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW4gPSByZXF1aXJlKFwiLi90cmF2ZXJzZUFsbENoaWxkcmVuXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgdHdvQXJndW1lbnRQb29sZXIgPSBQb29sZWRDbGFzcy50d29Bcmd1bWVudFBvb2xlcjtcbnZhciB0aHJlZUFyZ3VtZW50UG9vbGVyID0gUG9vbGVkQ2xhc3MudGhyZWVBcmd1bWVudFBvb2xlcjtcblxuLyoqXG4gKiBQb29sZWRDbGFzcyByZXByZXNlbnRpbmcgdGhlIGJvb2trZWVwaW5nIGFzc29jaWF0ZWQgd2l0aCBwZXJmb3JtaW5nIGEgY2hpbGRcbiAqIHRyYXZlcnNhbC4gQWxsb3dzIGF2b2lkaW5nIGJpbmRpbmcgY2FsbGJhY2tzLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBGb3JFYWNoQm9va0tlZXBpbmdcbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBmb3JFYWNoRnVuY3Rpb24gRnVuY3Rpb24gdG8gcGVyZm9ybSB0cmF2ZXJzYWwgd2l0aC5cbiAqIEBwYXJhbSB7Pyp9IGZvckVhY2hDb250ZXh0IENvbnRleHQgdG8gcGVyZm9ybSBjb250ZXh0IHdpdGguXG4gKi9cbmZ1bmN0aW9uIEZvckVhY2hCb29rS2VlcGluZyhmb3JFYWNoRnVuY3Rpb24sIGZvckVhY2hDb250ZXh0KSB7XG4gIHRoaXMuZm9yRWFjaEZ1bmN0aW9uID0gZm9yRWFjaEZ1bmN0aW9uO1xuICB0aGlzLmZvckVhY2hDb250ZXh0ID0gZm9yRWFjaENvbnRleHQ7XG59XG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oRm9yRWFjaEJvb2tLZWVwaW5nLCB0d29Bcmd1bWVudFBvb2xlcik7XG5cbmZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZCh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkLCBuYW1lLCBpKSB7XG4gIHZhciBmb3JFYWNoQm9va0tlZXBpbmcgPSB0cmF2ZXJzZUNvbnRleHQ7XG4gIGZvckVhY2hCb29rS2VlcGluZy5mb3JFYWNoRnVuY3Rpb24uY2FsbChcbiAgICBmb3JFYWNoQm9va0tlZXBpbmcuZm9yRWFjaENvbnRleHQsIGNoaWxkLCBpKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlcyB0aHJvdWdoIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBUaGUgcHJvdmlkZWQgZm9yRWFjaEZ1bmMoY2hpbGQsIGluZGV4KSB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaFxuICogbGVhZiBjaGlsZC5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKiwgaW50KX0gZm9yRWFjaEZ1bmMuXG4gKiBAcGFyYW0geyp9IGZvckVhY2hDb250ZXh0IENvbnRleHQgZm9yIGZvckVhY2hDb250ZXh0LlxuICovXG5mdW5jdGlvbiBmb3JFYWNoQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hGdW5jLCBmb3JFYWNoQ29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIHZhciB0cmF2ZXJzZUNvbnRleHQgPVxuICAgIEZvckVhY2hCb29rS2VlcGluZy5nZXRQb29sZWQoZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KTtcbiAgdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaFNpbmdsZUNoaWxkLCB0cmF2ZXJzZUNvbnRleHQpO1xuICBGb3JFYWNoQm9va0tlZXBpbmcucmVsZWFzZSh0cmF2ZXJzZUNvbnRleHQpO1xufVxuXG4vKipcbiAqIFBvb2xlZENsYXNzIHJlcHJlc2VudGluZyB0aGUgYm9va2tlZXBpbmcgYXNzb2NpYXRlZCB3aXRoIHBlcmZvcm1pbmcgYSBjaGlsZFxuICogbWFwcGluZy4gQWxsb3dzIGF2b2lkaW5nIGJpbmRpbmcgY2FsbGJhY2tzLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBNYXBCb29rS2VlcGluZ1xuICogQHBhcmFtIHshKn0gbWFwUmVzdWx0IE9iamVjdCBjb250YWluaW5nIHRoZSBvcmRlcmVkIG1hcCBvZiByZXN1bHRzLlxuICogQHBhcmFtIHshZnVuY3Rpb259IG1hcEZ1bmN0aW9uIEZ1bmN0aW9uIHRvIHBlcmZvcm0gbWFwcGluZyB3aXRoLlxuICogQHBhcmFtIHs/Kn0gbWFwQ29udGV4dCBDb250ZXh0IHRvIHBlcmZvcm0gbWFwcGluZyB3aXRoLlxuICovXG5mdW5jdGlvbiBNYXBCb29rS2VlcGluZyhtYXBSZXN1bHQsIG1hcEZ1bmN0aW9uLCBtYXBDb250ZXh0KSB7XG4gIHRoaXMubWFwUmVzdWx0ID0gbWFwUmVzdWx0O1xuICB0aGlzLm1hcEZ1bmN0aW9uID0gbWFwRnVuY3Rpb247XG4gIHRoaXMubWFwQ29udGV4dCA9IG1hcENvbnRleHQ7XG59XG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oTWFwQm9va0tlZXBpbmcsIHRocmVlQXJndW1lbnRQb29sZXIpO1xuXG5mdW5jdGlvbiBtYXBTaW5nbGVDaGlsZEludG9Db250ZXh0KHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUsIGkpIHtcbiAgdmFyIG1hcEJvb2tLZWVwaW5nID0gdHJhdmVyc2VDb250ZXh0O1xuICB2YXIgbWFwUmVzdWx0ID0gbWFwQm9va0tlZXBpbmcubWFwUmVzdWx0O1xuXG4gIHZhciBrZXlVbmlxdWUgPSAhbWFwUmVzdWx0Lmhhc093blByb3BlcnR5KG5hbWUpO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICBrZXlVbmlxdWUsXG4gICAgJ1JlYWN0Q2hpbGRyZW4ubWFwKC4uLik6IEVuY291bnRlcmVkIHR3byBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIGtleSwgJyArXG4gICAgJ2Alc2AuIENoaWxkIGtleXMgbXVzdCBiZSB1bmlxdWU7IHdoZW4gdHdvIGNoaWxkcmVuIHNoYXJlIGEga2V5LCBvbmx5ICcgK1xuICAgICd0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSB1c2VkLicsXG4gICAgbmFtZVxuICApIDogbnVsbCk7XG5cbiAgaWYgKGtleVVuaXF1ZSkge1xuICAgIHZhciBtYXBwZWRDaGlsZCA9XG4gICAgICBtYXBCb29rS2VlcGluZy5tYXBGdW5jdGlvbi5jYWxsKG1hcEJvb2tLZWVwaW5nLm1hcENvbnRleHQsIGNoaWxkLCBpKTtcbiAgICBtYXBSZXN1bHRbbmFtZV0gPSBtYXBwZWRDaGlsZDtcbiAgfVxufVxuXG4vKipcbiAqIE1hcHMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIFRoZSBwcm92aWRlZCBtYXBGdW5jdGlvbihjaGlsZCwga2V5LCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQuXG4gKlxuICogVE9ETzogVGhpcyBtYXkgbGlrZWx5IGJyZWFrIGFueSBjYWxscyB0byBgUmVhY3RDaGlsZHJlbi5tYXBgIHRoYXQgd2VyZVxuICogcHJldmlvdXNseSByZWx5aW5nIG9uIHRoZSBmYWN0IHRoYXQgd2UgZ3VhcmRlZCBhZ2FpbnN0IG51bGwgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IG1hcEZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBtYXBDb250ZXh0IENvbnRleHQgZm9yIG1hcEZ1bmN0aW9uLlxuICogQHJldHVybiB7b2JqZWN0fSBPYmplY3QgY29udGFpbmluZyB0aGUgb3JkZXJlZCBtYXAgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gbWFwQ2hpbGRyZW4oY2hpbGRyZW4sIGZ1bmMsIGNvbnRleHQpIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cblxuICB2YXIgbWFwUmVzdWx0ID0ge307XG4gIHZhciB0cmF2ZXJzZUNvbnRleHQgPSBNYXBCb29rS2VlcGluZy5nZXRQb29sZWQobWFwUmVzdWx0LCBmdW5jLCBjb250ZXh0KTtcbiAgdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCwgdHJhdmVyc2VDb250ZXh0KTtcbiAgTWFwQm9va0tlZXBpbmcucmVsZWFzZSh0cmF2ZXJzZUNvbnRleHQpO1xuICByZXR1cm4gbWFwUmVzdWx0O1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkLCBuYW1lLCBpKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIENvdW50IHRoZSBudW1iZXIgb2YgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhc1xuICogYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBjaGlsZHJlbi5cbiAqL1xuZnVuY3Rpb24gY291bnRDaGlsZHJlbihjaGlsZHJlbiwgY29udGV4dCkge1xuICByZXR1cm4gdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaFNpbmdsZUNoaWxkRHVtbXksIG51bGwpO1xufVxuXG52YXIgUmVhY3RDaGlsZHJlbiA9IHtcbiAgZm9yRWFjaDogZm9yRWFjaENoaWxkcmVuLFxuICBtYXA6IG1hcENoaWxkcmVuLFxuICBjb3VudDogY291bnRDaGlsZHJlblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENoaWxkcmVuO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0Q2hpbGRyZW4uanNcbiAqKiBtb2R1bGUgaWQgPSAxMjdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudFxuICovXG5cbi8qanNsaW50IGV2aWw6IHRydWUgKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdERPTUlET3BlcmF0aW9ucyA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NSURPcGVyYXRpb25zXCIpO1xudmFyIFJlYWN0TWFya3VwQ2hlY2tzdW0gPSByZXF1aXJlKFwiLi9SZWFjdE1hcmt1cENoZWNrc3VtXCIpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcbnZhciBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uID0gcmVxdWlyZShcIi4vUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvblwiKTtcblxudmFyIGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lciA9IHJlcXVpcmUoXCIuL2dldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lclwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIgc2V0SW5uZXJIVE1MID0gcmVxdWlyZShcIi4vc2V0SW5uZXJIVE1MXCIpO1xuXG5cbnZhciBFTEVNRU5UX05PREVfVFlQRSA9IDE7XG52YXIgRE9DX05PREVfVFlQRSA9IDk7XG5cblxuLyoqXG4gKiBBYnN0cmFjdHMgYXdheSBhbGwgZnVuY3Rpb25hbGl0eSBvZiBgUmVhY3RDb21wb25lbnRgIHJlcXVpcmVzIGtub3dsZWRnZSBvZlxuICogdGhlIGJyb3dzZXIgY29udGV4dC5cbiAqL1xudmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID0ge1xuICBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uOiBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLFxuXG4gIEJhY2tlbmRJRE9wZXJhdGlvbnM6IFJlYWN0RE9NSURPcGVyYXRpb25zLFxuXG4gIC8qKlxuICAgKiBJZiBhIHBhcnRpY3VsYXIgZW52aXJvbm1lbnQgcmVxdWlyZXMgdGhhdCBzb21lIHJlc291cmNlcyBiZSBjbGVhbmVkIHVwLFxuICAgKiBzcGVjaWZ5IHRoaXMgaW4gdGhlIGluamVjdGVkIE1peGluLiBJbiB0aGUgRE9NLCB3ZSB3b3VsZCBsaWtlbHkgd2FudCB0b1xuICAgKiBwdXJnZSBhbnkgY2FjaGVkIG5vZGUgSUQgbG9va3Vwcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHVubW91bnRJREZyb21FbnZpcm9ubWVudDogZnVuY3Rpb24ocm9vdE5vZGVJRCkge1xuICAgIFJlYWN0TW91bnQucHVyZ2VJRChyb290Tm9kZUlEKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgc3RyaW5nIHRvIHBsYWNlIGludG8gdGhlIERPTSBFbGVtZW50LlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gRWxlbWVudCB0byBpbnNlcnQgbWFya3VwIGludG8uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmV1c2VNYXJrdXAgU2hvdWxkIHJldXNlIHRoZSBleGlzdGluZyBtYXJrdXAgaW4gdGhlXG4gICAqIGNvbnRhaW5lciBpZiBwb3NzaWJsZS5cbiAgICovXG4gIG1vdW50SW1hZ2VJbnRvTm9kZTogUmVhY3RQZXJmLm1lYXN1cmUoXG4gICAgJ1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50JyxcbiAgICAnbW91bnRJbWFnZUludG9Ob2RlJyxcbiAgICBmdW5jdGlvbihtYXJrdXAsIGNvbnRhaW5lciwgc2hvdWxkUmV1c2VNYXJrdXApIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIGNvbnRhaW5lciAmJiAoXG4gICAgICAgICAgY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fFxuICAgICAgICAgICAgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFXG4gICAgICAgICksXG4gICAgICAgICdtb3VudENvbXBvbmVudEludG9Ob2RlKC4uLik6IFRhcmdldCBjb250YWluZXIgaXMgbm90IHZhbGlkLidcbiAgICAgICkgOiBpbnZhcmlhbnQoY29udGFpbmVyICYmIChcbiAgICAgICAgY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fFxuICAgICAgICAgIGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRVxuICAgICAgKSkpO1xuXG4gICAgICBpZiAoc2hvdWxkUmV1c2VNYXJrdXApIHtcbiAgICAgICAgaWYgKFJlYWN0TWFya3VwQ2hlY2tzdW0uY2FuUmV1c2VNYXJrdXAoXG4gICAgICAgICAgbWFya3VwLFxuICAgICAgICAgIGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgICAgY29udGFpbmVyLm5vZGVUeXBlICE9PSBET0NfTk9ERV9UWVBFLFxuICAgICAgICAgICAgJ1lvdVxcJ3JlIHRyeWluZyB0byByZW5kZXIgYSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IHVzaW5nICcgK1xuICAgICAgICAgICAgJ3NlcnZlciByZW5kZXJpbmcgYnV0IHRoZSBjaGVja3N1bSB3YXMgaW52YWxpZC4gVGhpcyB1c3VhbGx5ICcgK1xuICAgICAgICAgICAgJ21lYW5zIHlvdSByZW5kZXJlZCBhIGRpZmZlcmVudCBjb21wb25lbnQgdHlwZSBvciBwcm9wcyBvbiAnICtcbiAgICAgICAgICAgICd0aGUgY2xpZW50IGZyb20gdGhlIG9uZSBvbiB0aGUgc2VydmVyLCBvciB5b3VyIHJlbmRlcigpICcgK1xuICAgICAgICAgICAgJ21ldGhvZHMgYXJlIGltcHVyZS4gUmVhY3QgY2Fubm90IGhhbmRsZSB0aGlzIGNhc2UgZHVlIHRvICcgK1xuICAgICAgICAgICAgJ2Nyb3NzLWJyb3dzZXIgcXVpcmtzIGJ5IHJlbmRlcmluZyBhdCB0aGUgZG9jdW1lbnQgcm9vdC4gWW91ICcgK1xuICAgICAgICAgICAgJ3Nob3VsZCBsb29rIGZvciBlbnZpcm9ubWVudCBkZXBlbmRlbnQgY29kZSBpbiB5b3VyIGNvbXBvbmVudHMgJyArXG4gICAgICAgICAgICAnYW5kIGVuc3VyZSB0aGUgcHJvcHMgYXJlIHRoZSBzYW1lIGNsaWVudCBhbmQgc2VydmVyIHNpZGUuJ1xuICAgICAgICAgICkgOiBpbnZhcmlhbnQoY29udGFpbmVyLm5vZGVUeXBlICE9PSBET0NfTk9ERV9UWVBFKSk7XG5cbiAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICdSZWFjdCBhdHRlbXB0ZWQgdG8gdXNlIHJldXNlIG1hcmt1cCBpbiBhIGNvbnRhaW5lciBidXQgdGhlICcgK1xuICAgICAgICAgICAgICAnY2hlY2tzdW0gd2FzIGludmFsaWQuIFRoaXMgZ2VuZXJhbGx5IG1lYW5zIHRoYXQgeW91IGFyZSAnICtcbiAgICAgICAgICAgICAgJ3VzaW5nIHNlcnZlciByZW5kZXJpbmcgYW5kIHRoZSBtYXJrdXAgZ2VuZXJhdGVkIG9uIHRoZSAnICtcbiAgICAgICAgICAgICAgJ3NlcnZlciB3YXMgbm90IHdoYXQgdGhlIGNsaWVudCB3YXMgZXhwZWN0aW5nLiBSZWFjdCBpbmplY3RlZCAnICtcbiAgICAgICAgICAgICAgJ25ldyBtYXJrdXAgdG8gY29tcGVuc2F0ZSB3aGljaCB3b3JrcyBidXQgeW91IGhhdmUgbG9zdCBtYW55ICcgK1xuICAgICAgICAgICAgICAnb2YgdGhlIGJlbmVmaXRzIG9mIHNlcnZlciByZW5kZXJpbmcuIEluc3RlYWQsIGZpZ3VyZSBvdXQgJyArXG4gICAgICAgICAgICAgICd3aHkgdGhlIG1hcmt1cCBiZWluZyBnZW5lcmF0ZWQgaXMgZGlmZmVyZW50IG9uIHRoZSBjbGllbnQgJyArXG4gICAgICAgICAgICAgICdvciBzZXJ2ZXIuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgY29udGFpbmVyLm5vZGVUeXBlICE9PSBET0NfTk9ERV9UWVBFLFxuICAgICAgICAnWW91XFwncmUgdHJ5aW5nIHRvIHJlbmRlciBhIGNvbXBvbmVudCB0byB0aGUgZG9jdW1lbnQgYnV0ICcgK1xuICAgICAgICAgICd5b3UgZGlkblxcJ3QgdXNlIHNlcnZlciByZW5kZXJpbmcuIFdlIGNhblxcJ3QgZG8gdGhpcyAnICtcbiAgICAgICAgICAnd2l0aG91dCB1c2luZyBzZXJ2ZXIgcmVuZGVyaW5nIGR1ZSB0byBjcm9zcy1icm93c2VyIHF1aXJrcy4gJyArXG4gICAgICAgICAgJ1NlZSByZW5kZXJDb21wb25lbnRUb1N0cmluZygpIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLidcbiAgICAgICkgOiBpbnZhcmlhbnQoY29udGFpbmVyLm5vZGVUeXBlICE9PSBET0NfTk9ERV9UWVBFKSk7XG5cbiAgICAgIHNldElubmVySFRNTChjb250YWluZXIsIG1hcmt1cCk7XG4gICAgfVxuICApXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50LmpzXG4gKiogbW9kdWxlIGlkID0gMTI4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01CdXR0b25cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEF1dG9Gb2N1c01peGluID0gcmVxdWlyZShcIi4vQXV0b0ZvY3VzTWl4aW5cIik7XG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiKTtcbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdERPTSA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NXCIpO1xuXG52YXIga2V5TWlycm9yID0gcmVxdWlyZShcIi4va2V5TWlycm9yXCIpO1xuXG4vLyBTdG9yZSBhIHJlZmVyZW5jZSB0byB0aGUgPGJ1dHRvbj4gYFJlYWN0RE9NQ29tcG9uZW50YC4gVE9ETzogdXNlIHN0cmluZ1xudmFyIGJ1dHRvbiA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KFJlYWN0RE9NLmJ1dHRvbi50eXBlKTtcblxudmFyIG1vdXNlTGlzdGVuZXJOYW1lcyA9IGtleU1pcnJvcih7XG4gIG9uQ2xpY2s6IHRydWUsXG4gIG9uRG91YmxlQ2xpY2s6IHRydWUsXG4gIG9uTW91c2VEb3duOiB0cnVlLFxuICBvbk1vdXNlTW92ZTogdHJ1ZSxcbiAgb25Nb3VzZVVwOiB0cnVlLFxuICBvbkNsaWNrQ2FwdHVyZTogdHJ1ZSxcbiAgb25Eb3VibGVDbGlja0NhcHR1cmU6IHRydWUsXG4gIG9uTW91c2VEb3duQ2FwdHVyZTogdHJ1ZSxcbiAgb25Nb3VzZU1vdmVDYXB0dXJlOiB0cnVlLFxuICBvbk1vdXNlVXBDYXB0dXJlOiB0cnVlXG59KTtcblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgPGJ1dHRvbj4gbmF0aXZlIGNvbXBvbmVudCB0aGF0IGRvZXMgbm90IHJlY2VpdmUgbW91c2UgZXZlbnRzXG4gKiB3aGVuIGBkaXNhYmxlZGAgaXMgc2V0LlxuICovXG52YXIgUmVhY3RET01CdXR0b24gPSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RET01CdXR0b24nLFxuXG4gIG1peGluczogW0F1dG9Gb2N1c01peGluLCBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbl0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJvcHMgPSB7fTtcblxuICAgIC8vIENvcHkgdGhlIHByb3BzOyBleGNlcHQgdGhlIG1vdXNlIGxpc3RlbmVycyBpZiB3ZSdyZSBkaXNhYmxlZFxuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmXG4gICAgICAgICAgKCF0aGlzLnByb3BzLmRpc2FibGVkIHx8ICFtb3VzZUxpc3RlbmVyTmFtZXNba2V5XSkpIHtcbiAgICAgICAgcHJvcHNba2V5XSA9IHRoaXMucHJvcHNba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYnV0dG9uKHByb3BzLCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUJ1dHRvbjtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9SZWFjdERPTUJ1dHRvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDEyOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NRm9ybVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBMb2NhbEV2ZW50VHJhcE1peGluID0gcmVxdWlyZShcIi4vTG9jYWxFdmVudFRyYXBNaXhpblwiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZShcIi4vUmVhY3RET01cIik7XG5cbi8vIFN0b3JlIGEgcmVmZXJlbmNlIHRvIHRoZSA8Zm9ybT4gYFJlYWN0RE9NQ29tcG9uZW50YC4gVE9ETzogdXNlIHN0cmluZ1xudmFyIGZvcm0gPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeShSZWFjdERPTS5mb3JtLnR5cGUpO1xuXG4vKipcbiAqIFNpbmNlIG9uU3VibWl0IGRvZXNuJ3QgYnViYmxlIE9SIGNhcHR1cmUgb24gdGhlIHRvcCBsZXZlbCBpbiBJRTgsIHdlIG5lZWRcbiAqIHRvIGNhcHR1cmUgaXQgb24gdGhlIDxmb3JtPiBlbGVtZW50IGl0c2VsZi4gVGhlcmUgYXJlIGxvdHMgb2YgaGFja3Mgd2UgY291bGRcbiAqIGRvIHRvIGFjY29tcGxpc2ggdGhpcywgYnV0IHRoZSBtb3N0IHJlbGlhYmxlIGlzIHRvIG1ha2UgPGZvcm0+IGFcbiAqIGNvbXBvc2l0ZSBjb21wb25lbnQgYW5kIHVzZSBgY29tcG9uZW50RGlkTW91bnRgIHRvIGF0dGFjaCB0aGUgZXZlbnQgaGFuZGxlcnMuXG4gKi9cbnZhciBSZWFjdERPTUZvcm0gPSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RET01Gb3JtJyxcblxuICBtaXhpbnM6IFtSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiwgTG9jYWxFdmVudFRyYXBNaXhpbl0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAvLyBUT0RPOiBJbnN0ZWFkIG9mIHVzaW5nIGBSZWFjdERPTWAgZGlyZWN0bHksIHdlIHNob3VsZCB1c2UgSlNYLiBIb3dldmVyLFxuICAgIC8vIGBqc2hpbnRgIGZhaWxzIHRvIHBhcnNlIEpTWCBzbyBpbiBvcmRlciBmb3IgbGludGluZyB0byB3b3JrIGluIHRoZSBvcGVuXG4gICAgLy8gc291cmNlIHJlcG8sIHdlIG5lZWQgdG8ganVzdCB1c2UgYFJlYWN0RE9NLmZvcm1gLlxuICAgIHJldHVybiBmb3JtKHRoaXMucHJvcHMpO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BSZXNldCwgJ3Jlc2V0Jyk7XG4gICAgdGhpcy50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wU3VibWl0LCAnc3VibWl0Jyk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NRm9ybTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9SZWFjdERPTUZvcm0uanNcbiAqKiBtb2R1bGUgaWQgPSAxMzBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUlET3BlcmF0aW9uc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgQ1NTUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZShcIi4vQ1NTUHJvcGVydHlPcGVyYXRpb25zXCIpO1xudmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHJlcXVpcmUoXCIuL0RPTUNoaWxkcmVuT3BlcmF0aW9uc1wiKTtcbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoXCIuL3NldElubmVySFRNTFwiKTtcblxuLyoqXG4gKiBFcnJvcnMgZm9yIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgbm90IGJlIHVwZGF0ZWQgd2l0aCBgdXBkYXRlUHJvcGVydHlCeUlkKClgLlxuICpcbiAqIEB0eXBlIHtvYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMgPSB7XG4gIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOlxuICAgICdgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgIG11c3QgYmUgc2V0IHVzaW5nIGB1cGRhdGVJbm5lckhUTUxCeUlEKClgLicsXG4gIHN0eWxlOiAnYHN0eWxlYCBtdXN0IGJlIHNldCB1c2luZyBgdXBkYXRlU3R5bGVzQnlJRCgpYC4nXG59O1xuXG4vKipcbiAqIE9wZXJhdGlvbnMgdXNlZCB0byBwcm9jZXNzIHVwZGF0ZXMgdG8gRE9NIG5vZGVzLiBUaGlzIGlzIG1hZGUgaW5qZWN0YWJsZSB2aWFcbiAqIGBSZWFjdENvbXBvbmVudC5CYWNrZW5kSURPcGVyYXRpb25zYC5cbiAqL1xudmFyIFJlYWN0RE9NSURPcGVyYXRpb25zID0ge1xuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgRE9NIG5vZGUgd2l0aCBuZXcgcHJvcGVydHkgdmFsdWVzLiBUaGlzIHNob3VsZCBvbmx5IGJlIHVzZWQgdG9cbiAgICogdXBkYXRlIERPTSBwcm9wZXJ0aWVzIGluIGBET01Qcm9wZXJ0eWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgbm9kZSB0byB1cGRhdGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEEgdmFsaWQgcHJvcGVydHkgbmFtZSwgc2VlIGBET01Qcm9wZXJ0eWAuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgTmV3IHZhbHVlIG9mIHRoZSBwcm9wZXJ0eS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1cGRhdGVQcm9wZXJ0eUJ5SUQ6IFJlYWN0UGVyZi5tZWFzdXJlKFxuICAgICdSZWFjdERPTUlET3BlcmF0aW9ucycsXG4gICAgJ3VwZGF0ZVByb3BlcnR5QnlJRCcsXG4gICAgZnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAhSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMuaGFzT3duUHJvcGVydHkobmFtZSksXG4gICAgICAgICd1cGRhdGVQcm9wZXJ0eUJ5SUQoLi4uKTogJXMnLFxuICAgICAgICBJTlZBTElEX1BST1BFUlRZX0VSUk9SU1tuYW1lXVxuICAgICAgKSA6IGludmFyaWFudCghSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMuaGFzT3duUHJvcGVydHkobmFtZSkpKTtcblxuICAgICAgLy8gSWYgd2UncmUgdXBkYXRpbmcgdG8gbnVsbCBvciB1bmRlZmluZWQsIHdlIHNob3VsZCByZW1vdmUgdGhlIHByb3BlcnR5XG4gICAgICAvLyBmcm9tIHRoZSBET00gbm9kZSBpbnN0ZWFkIG9mIGluYWR2ZXJ0YW50bHkgc2V0dGluZyB0byBhIHN0cmluZy4gVGhpc1xuICAgICAgLy8gYnJpbmdzIHVzIGluIGxpbmUgd2l0aCB0aGUgc2FtZSBiZWhhdmlvciB3ZSBoYXZlIG9uIGluaXRpYWwgcmVuZGVyLlxuICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkobm9kZSwgbmFtZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLmRlbGV0ZVZhbHVlRm9yUHJvcGVydHkobm9kZSwgbmFtZSk7XG4gICAgICB9XG4gICAgfVxuICApLFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgRE9NIG5vZGUgdG8gcmVtb3ZlIGEgcHJvcGVydHkuIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCB0byByZW1vdmVcbiAgICogRE9NIHByb3BlcnRpZXMgaW4gYERPTVByb3BlcnR5YC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBub2RlIHRvIHVwZGF0ZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSBwcm9wZXJ0eSBuYW1lIHRvIHJlbW92ZSwgc2VlIGBET01Qcm9wZXJ0eWAuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZGVsZXRlUHJvcGVydHlCeUlEOiBSZWFjdFBlcmYubWVhc3VyZShcbiAgICAnUmVhY3RET01JRE9wZXJhdGlvbnMnLFxuICAgICdkZWxldGVQcm9wZXJ0eUJ5SUQnLFxuICAgIGZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUoaWQpO1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgIUlOVkFMSURfUFJPUEVSVFlfRVJST1JTLmhhc093blByb3BlcnR5KG5hbWUpLFxuICAgICAgICAndXBkYXRlUHJvcGVydHlCeUlEKC4uLik6ICVzJyxcbiAgICAgICAgSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlNbbmFtZV1cbiAgICAgICkgOiBpbnZhcmlhbnQoIUlOVkFMSURfUFJPUEVSVFlfRVJST1JTLmhhc093blByb3BlcnR5KG5hbWUpKSk7XG4gICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICApLFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgRE9NIG5vZGUgd2l0aCBuZXcgc3R5bGUgdmFsdWVzLiBJZiBhIHZhbHVlIGlzIHNwZWNpZmllZCBhcyAnJyxcbiAgICogdGhlIGNvcnJlc3BvbmRpbmcgc3R5bGUgcHJvcGVydHkgd2lsbCBiZSB1bnNldC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBub2RlIHRvIHVwZGF0ZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IHN0eWxlcyBNYXBwaW5nIGZyb20gc3R5bGVzIHRvIHZhbHVlcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1cGRhdGVTdHlsZXNCeUlEOiBSZWFjdFBlcmYubWVhc3VyZShcbiAgICAnUmVhY3RET01JRE9wZXJhdGlvbnMnLFxuICAgICd1cGRhdGVTdHlsZXNCeUlEJyxcbiAgICBmdW5jdGlvbihpZCwgc3R5bGVzKSB7XG4gICAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgICBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JTdHlsZXMobm9kZSwgc3R5bGVzKTtcbiAgICB9XG4gICksXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBET00gbm9kZSdzIGlubmVySFRNTC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBub2RlIHRvIHVwZGF0ZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGh0bWwgQW4gSFRNTCBzdHJpbmcuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdXBkYXRlSW5uZXJIVE1MQnlJRDogUmVhY3RQZXJmLm1lYXN1cmUoXG4gICAgJ1JlYWN0RE9NSURPcGVyYXRpb25zJyxcbiAgICAndXBkYXRlSW5uZXJIVE1MQnlJRCcsXG4gICAgZnVuY3Rpb24oaWQsIGh0bWwpIHtcbiAgICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcbiAgICAgIHNldElubmVySFRNTChub2RlLCBodG1sKTtcbiAgICB9XG4gICksXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBET00gbm9kZSdzIHRleHQgY29udGVudCBzZXQgYnkgYHByb3BzLmNvbnRlbnRgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIG5vZGUgdG8gdXBkYXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCBUZXh0IGNvbnRlbnQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdXBkYXRlVGV4dENvbnRlbnRCeUlEOiBSZWFjdFBlcmYubWVhc3VyZShcbiAgICAnUmVhY3RET01JRE9wZXJhdGlvbnMnLFxuICAgICd1cGRhdGVUZXh0Q29udGVudEJ5SUQnLFxuICAgIGZ1bmN0aW9uKGlkLCBjb250ZW50KSB7XG4gICAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgICBET01DaGlsZHJlbk9wZXJhdGlvbnMudXBkYXRlVGV4dENvbnRlbnQobm9kZSwgY29udGVudCk7XG4gICAgfVxuICApLFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhIERPTSBub2RlIHRoYXQgZXhpc3RzIGluIHRoZSBkb2N1bWVudCB3aXRoIG1hcmt1cC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIGNoaWxkIHRvIGJlIHJlcGxhY2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIERhbmdlcm91cyBtYXJrdXAgdG8gaW5qZWN0IGluIHBsYWNlIG9mIGNoaWxkLlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHNlZSB7RGFuZ2VyLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwfVxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEOiBSZWFjdFBlcmYubWVhc3VyZShcbiAgICAnUmVhY3RET01JRE9wZXJhdGlvbnMnLFxuICAgICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQnLFxuICAgIGZ1bmN0aW9uKGlkLCBtYXJrdXApIHtcbiAgICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcbiAgICAgIERPTUNoaWxkcmVuT3BlcmF0aW9ucy5kYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cChub2RlLCBtYXJrdXApO1xuICAgIH1cbiAgKSxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIGNvbXBvbmVudCdzIGNoaWxkcmVuIGJ5IHByb2Nlc3NpbmcgYSBzZXJpZXMgb2YgdXBkYXRlcy5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheTxvYmplY3Q+fSB1cGRhdGVzIExpc3Qgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICAgKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IG1hcmt1cCBMaXN0IG9mIG1hcmt1cCBzdHJpbmdzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlczogUmVhY3RQZXJmLm1lYXN1cmUoXG4gICAgJ1JlYWN0RE9NSURPcGVyYXRpb25zJyxcbiAgICAnZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzJyxcbiAgICBmdW5jdGlvbih1cGRhdGVzLCBtYXJrdXApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXBkYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB1cGRhdGVzW2ldLnBhcmVudE5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUodXBkYXRlc1tpXS5wYXJlbnRJRCk7XG4gICAgICB9XG4gICAgICBET01DaGlsZHJlbk9wZXJhdGlvbnMucHJvY2Vzc1VwZGF0ZXModXBkYXRlcywgbWFya3VwKTtcbiAgICB9XG4gIClcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JRE9wZXJhdGlvbnM7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3RET01JRE9wZXJhdGlvbnMuanNcbiAqKiBtb2R1bGUgaWQgPSAxMzFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUltZ1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBMb2NhbEV2ZW50VHJhcE1peGluID0gcmVxdWlyZShcIi4vTG9jYWxFdmVudFRyYXBNaXhpblwiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZShcIi4vUmVhY3RET01cIik7XG5cbi8vIFN0b3JlIGEgcmVmZXJlbmNlIHRvIHRoZSA8aW1nPiBgUmVhY3RET01Db21wb25lbnRgLiBUT0RPOiB1c2Ugc3RyaW5nXG52YXIgaW1nID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoUmVhY3RET00uaW1nLnR5cGUpO1xuXG4vKipcbiAqIFNpbmNlIG9uTG9hZCBkb2Vzbid0IGJ1YmJsZSBPUiBjYXB0dXJlIG9uIHRoZSB0b3AgbGV2ZWwgaW4gSUU4LCB3ZSBuZWVkIHRvXG4gKiBjYXB0dXJlIGl0IG9uIHRoZSA8aW1nPiBlbGVtZW50IGl0c2VsZi4gVGhlcmUgYXJlIGxvdHMgb2YgaGFja3Mgd2UgY291bGQgZG9cbiAqIHRvIGFjY29tcGxpc2ggdGhpcywgYnV0IHRoZSBtb3N0IHJlbGlhYmxlIGlzIHRvIG1ha2UgPGltZz4gYSBjb21wb3NpdGVcbiAqIGNvbXBvbmVudCBhbmQgdXNlIGBjb21wb25lbnREaWRNb3VudGAgdG8gYXR0YWNoIHRoZSBldmVudCBoYW5kbGVycy5cbiAqL1xudmFyIFJlYWN0RE9NSW1nID0gUmVhY3RDb21wb3NpdGVDb21wb25lbnQuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NSW1nJyxcbiAgdGFnTmFtZTogJ0lNRycsXG5cbiAgbWl4aW5zOiBbUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4sIExvY2FsRXZlbnRUcmFwTWl4aW5dLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGltZyh0aGlzLnByb3BzKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wTG9hZCwgJ2xvYWQnKTtcbiAgICB0aGlzLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BFcnJvciwgJ2Vycm9yJyk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NSW1nO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0RE9NSW1nLmpzXG4gKiogbW9kdWxlIGlkID0gMTMyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01JbnB1dFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgQXV0b0ZvY3VzTWl4aW4gPSByZXF1aXJlKFwiLi9BdXRvRm9jdXNNaXhpblwiKTtcbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIik7XG52YXIgTGlua2VkVmFsdWVVdGlscyA9IHJlcXVpcmUoXCIuL0xpbmtlZFZhbHVlVXRpbHNcIik7XG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiKTtcbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdERPTSA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NXCIpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vLyBTdG9yZSBhIHJlZmVyZW5jZSB0byB0aGUgPGlucHV0PiBgUmVhY3RET01Db21wb25lbnRgLiBUT0RPOiB1c2Ugc3RyaW5nXG52YXIgaW5wdXQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeShSZWFjdERPTS5pbnB1dC50eXBlKTtcblxudmFyIGluc3RhbmNlc0J5UmVhY3RJRCA9IHt9O1xuXG5mdW5jdGlvbiBmb3JjZVVwZGF0ZUlmTW91bnRlZCgpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgaWYgKHRoaXMuaXNNb3VudGVkKCkpIHtcbiAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGFuIDxpbnB1dD4gbmF0aXZlIGNvbXBvbmVudCB0aGF0IGFsbG93cyBzZXR0aW5nIHRoZXNlIG9wdGlvbmFsXG4gKiBwcm9wczogYGNoZWNrZWRgLCBgdmFsdWVgLCBgZGVmYXVsdENoZWNrZWRgLCBhbmQgYGRlZmF1bHRWYWx1ZWAuXG4gKlxuICogSWYgYGNoZWNrZWRgIG9yIGB2YWx1ZWAgYXJlIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnNcbiAqIHRoYXQgYWZmZWN0IHRoZSBjaGVja2VkIHN0YXRlIG9yIHZhbHVlIHdpbGwgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LlxuICpcbiAqIElmIHRoZXkgYXJlIHN1cHBsaWVkIChhbmQgbm90IG51bGwvdW5kZWZpbmVkKSwgdGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBub3RcbiAqIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC4gSW5zdGVhZCwgdGhlIHByb3BzIG11c3QgY2hhbmdlIGluIG9yZGVyIGZvclxuICogdGhlIHJlbmRlcmVkIGVsZW1lbnQgdG8gYmUgdXBkYXRlZC5cbiAqXG4gKiBUaGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsIGJlIGluaXRpYWxpemVkIGFzIHVuY2hlY2tlZCAob3IgYGRlZmF1bHRDaGVja2VkYClcbiAqIHdpdGggYW4gZW1wdHkgdmFsdWUgKG9yIGBkZWZhdWx0VmFsdWVgKS5cbiAqXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTIvV0QtaHRtbDUtMjAxMjEwMjUvdGhlLWlucHV0LWVsZW1lbnQuaHRtbFxuICovXG52YXIgUmVhY3RET01JbnB1dCA9IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWFjdERPTUlucHV0JyxcblxuICBtaXhpbnM6IFtBdXRvRm9jdXNNaXhpbiwgTGlua2VkVmFsdWVVdGlscy5NaXhpbiwgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5dLFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlO1xuICAgIHJldHVybiB7XG4gICAgICBpbml0aWFsQ2hlY2tlZDogdGhpcy5wcm9wcy5kZWZhdWx0Q2hlY2tlZCB8fCBmYWxzZSxcbiAgICAgIGluaXRpYWxWYWx1ZTogZGVmYXVsdFZhbHVlICE9IG51bGwgPyBkZWZhdWx0VmFsdWUgOiBudWxsXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIC8vIENsb25lIGB0aGlzLnByb3BzYCBzbyB3ZSBkb24ndCBtdXRhdGUgdGhlIGlucHV0LlxuICAgIHZhciBwcm9wcyA9IGFzc2lnbih7fSwgdGhpcy5wcm9wcyk7XG5cbiAgICBwcm9wcy5kZWZhdWx0Q2hlY2tlZCA9IG51bGw7XG4gICAgcHJvcHMuZGVmYXVsdFZhbHVlID0gbnVsbDtcblxuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG4gICAgcHJvcHMudmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiB0aGlzLnN0YXRlLmluaXRpYWxWYWx1ZTtcblxuICAgIHZhciBjaGVja2VkID0gTGlua2VkVmFsdWVVdGlscy5nZXRDaGVja2VkKHRoaXMpO1xuICAgIHByb3BzLmNoZWNrZWQgPSBjaGVja2VkICE9IG51bGwgPyBjaGVja2VkIDogdGhpcy5zdGF0ZS5pbml0aWFsQ2hlY2tlZDtcblxuICAgIHByb3BzLm9uQ2hhbmdlID0gdGhpcy5faGFuZGxlQ2hhbmdlO1xuXG4gICAgcmV0dXJuIGlucHV0KHByb3BzLCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlkID0gUmVhY3RNb3VudC5nZXRJRCh0aGlzLmdldERPTU5vZGUoKSk7XG4gICAgaW5zdGFuY2VzQnlSZWFjdElEW2lkXSA9IHRoaXM7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciByb290Tm9kZSA9IHRoaXMuZ2V0RE9NTm9kZSgpO1xuICAgIHZhciBpZCA9IFJlYWN0TW91bnQuZ2V0SUQocm9vdE5vZGUpO1xuICAgIGRlbGV0ZSBpbnN0YW5jZXNCeVJlYWN0SURbaWRdO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24ocHJldlByb3BzLCBwcmV2U3RhdGUsIHByZXZDb250ZXh0KSB7XG4gICAgdmFyIHJvb3ROb2RlID0gdGhpcy5nZXRET01Ob2RlKCk7XG4gICAgaWYgKHRoaXMucHJvcHMuY2hlY2tlZCAhPSBudWxsKSB7XG4gICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JQcm9wZXJ0eShcbiAgICAgICAgcm9vdE5vZGUsXG4gICAgICAgICdjaGVja2VkJyxcbiAgICAgICAgdGhpcy5wcm9wcy5jaGVja2VkIHx8IGZhbHNlXG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIC8vIENhc3QgYHZhbHVlYCB0byBhIHN0cmluZyB0byBlbnN1cmUgdGhlIHZhbHVlIGlzIHNldCBjb3JyZWN0bHkuIFdoaWxlXG4gICAgICAvLyBicm93c2VycyB0eXBpY2FsbHkgZG8gdGhpcyBhcyBuZWNlc3NhcnksIGpzZG9tIGRvZXNuJ3QuXG4gICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JQcm9wZXJ0eShyb290Tm9kZSwgJ3ZhbHVlJywgJycgKyB2YWx1ZSk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVDaGFuZ2U6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHJldHVyblZhbHVlO1xuICAgIHZhciBvbkNoYW5nZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0T25DaGFuZ2UodGhpcyk7XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICByZXR1cm5WYWx1ZSA9IG9uQ2hhbmdlLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cbiAgICAvLyBIZXJlIHdlIHVzZSBhc2FwIHRvIHdhaXQgdW50aWwgYWxsIHVwZGF0ZXMgaGF2ZSBwcm9wYWdhdGVkLCB3aGljaFxuICAgIC8vIGlzIGltcG9ydGFudCB3aGVuIHVzaW5nIGNvbnRyb2xsZWQgY29tcG9uZW50cyB3aXRoaW4gbGF5ZXJzOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTY5OFxuICAgIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCB0aGlzKTtcblxuICAgIHZhciBuYW1lID0gdGhpcy5wcm9wcy5uYW1lO1xuICAgIGlmICh0aGlzLnByb3BzLnR5cGUgPT09ICdyYWRpbycgJiYgbmFtZSAhPSBudWxsKSB7XG4gICAgICB2YXIgcm9vdE5vZGUgPSB0aGlzLmdldERPTU5vZGUoKTtcbiAgICAgIHZhciBxdWVyeVJvb3QgPSByb290Tm9kZTtcblxuICAgICAgd2hpbGUgKHF1ZXJ5Um9vdC5wYXJlbnROb2RlKSB7XG4gICAgICAgIHF1ZXJ5Um9vdCA9IHF1ZXJ5Um9vdC5wYXJlbnROb2RlO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBgcm9vdE5vZGUuZm9ybWAgd2FzIG5vbi1udWxsLCB0aGVuIHdlIGNvdWxkIHRyeSBgZm9ybS5lbGVtZW50c2AsXG4gICAgICAvLyBidXQgdGhhdCBzb21ldGltZXMgYmVoYXZlcyBzdHJhbmdlbHkgaW4gSUU4LiBXZSBjb3VsZCBhbHNvIHRyeSB1c2luZ1xuICAgICAgLy8gYGZvcm0uZ2V0RWxlbWVudHNCeU5hbWVgLCBidXQgdGhhdCB3aWxsIG9ubHkgcmV0dXJuIGRpcmVjdCBjaGlsZHJlblxuICAgICAgLy8gYW5kIHdvbid0IGluY2x1ZGUgaW5wdXRzIHRoYXQgdXNlIHRoZSBIVE1MNSBgZm9ybT1gIGF0dHJpYnV0ZS4gU2luY2VcbiAgICAgIC8vIHRoZSBpbnB1dCBtaWdodCBub3QgZXZlbiBiZSBpbiBhIGZvcm0sIGxldCdzIGp1c3QgdXNlIHRoZSBnbG9iYWxcbiAgICAgIC8vIGBxdWVyeVNlbGVjdG9yQWxsYCB0byBlbnN1cmUgd2UgZG9uJ3QgbWlzcyBhbnl0aGluZy5cbiAgICAgIHZhciBncm91cCA9IHF1ZXJ5Um9vdC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAnaW5wdXRbbmFtZT0nICsgSlNPTi5zdHJpbmdpZnkoJycgKyBuYW1lKSArICddW3R5cGU9XCJyYWRpb1wiXScpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgZ3JvdXBMZW4gPSBncm91cC5sZW5ndGg7IGkgPCBncm91cExlbjsgaSsrKSB7XG4gICAgICAgIHZhciBvdGhlck5vZGUgPSBncm91cFtpXTtcbiAgICAgICAgaWYgKG90aGVyTm9kZSA9PT0gcm9vdE5vZGUgfHxcbiAgICAgICAgICAgIG90aGVyTm9kZS5mb3JtICE9PSByb290Tm9kZS5mb3JtKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG90aGVySUQgPSBSZWFjdE1vdW50LmdldElEKG90aGVyTm9kZSk7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgb3RoZXJJRCxcbiAgICAgICAgICAnUmVhY3RET01JbnB1dDogTWl4aW5nIFJlYWN0IGFuZCBub24tUmVhY3QgcmFkaW8gaW5wdXRzIHdpdGggdGhlICcgK1xuICAgICAgICAgICdzYW1lIGBuYW1lYCBpcyBub3Qgc3VwcG9ydGVkLidcbiAgICAgICAgKSA6IGludmFyaWFudChvdGhlcklEKSk7XG4gICAgICAgIHZhciBvdGhlckluc3RhbmNlID0gaW5zdGFuY2VzQnlSZWFjdElEW290aGVySURdO1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgIG90aGVySW5zdGFuY2UsXG4gICAgICAgICAgJ1JlYWN0RE9NSW5wdXQ6IFVua25vd24gcmFkaW8gYnV0dG9uIElEICVzLicsXG4gICAgICAgICAgb3RoZXJJRFxuICAgICAgICApIDogaW52YXJpYW50KG90aGVySW5zdGFuY2UpKTtcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhIGNvbnRyb2xsZWQgcmFkaW8gYnV0dG9uIGdyb3VwLCBmb3JjaW5nIHRoZSBpbnB1dCB0aGF0XG4gICAgICAgIC8vIHdhcyBwcmV2aW91c2x5IGNoZWNrZWQgdG8gdXBkYXRlIHdpbGwgY2F1c2UgaXQgdG8gYmUgY29tZSByZS1jaGVja2VkXG4gICAgICAgIC8vIGFzIGFwcHJvcHJpYXRlLlxuICAgICAgICBSZWFjdFVwZGF0ZXMuYXNhcChmb3JjZVVwZGF0ZUlmTW91bnRlZCwgb3RoZXJJbnN0YW5jZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NSW5wdXQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3RET01JbnB1dC5qc1xuICoqIG1vZHVsZSBpZCA9IDEzM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NT3B0aW9uXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZShcIi4vUmVhY3RET01cIik7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxuLy8gU3RvcmUgYSByZWZlcmVuY2UgdG8gdGhlIDxvcHRpb24+IGBSZWFjdERPTUNvbXBvbmVudGAuIFRPRE86IHVzZSBzdHJpbmdcbnZhciBvcHRpb24gPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeShSZWFjdERPTS5vcHRpb24udHlwZSk7XG5cbi8qKlxuICogSW1wbGVtZW50cyBhbiA8b3B0aW9uPiBuYXRpdmUgY29tcG9uZW50IHRoYXQgd2FybnMgd2hlbiBgc2VsZWN0ZWRgIGlzIHNldC5cbiAqL1xudmFyIFJlYWN0RE9NT3B0aW9uID0gUmVhY3RDb21wb3NpdGVDb21wb25lbnQuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NT3B0aW9uJyxcblxuICBtaXhpbnM6IFtSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbl0sXG5cbiAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAvLyBUT0RPICh5dW5nc3RlcnMpOiBSZW1vdmUgc3VwcG9ydCBmb3IgYHNlbGVjdGVkYCBpbiA8b3B0aW9uPi5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgdGhpcy5wcm9wcy5zZWxlY3RlZCA9PSBudWxsLFxuICAgICAgICAnVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIG9uIDxzZWxlY3Q+IGluc3RlYWQgb2YgJyArXG4gICAgICAgICdzZXR0aW5nIGBzZWxlY3RlZGAgb24gPG9wdGlvbj4uJ1xuICAgICAgKSA6IG51bGwpO1xuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBvcHRpb24odGhpcy5wcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01PcHRpb247XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3RET01PcHRpb24uanNcbiAqKiBtb2R1bGUgaWQgPSAxMzRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVNlbGVjdFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgQXV0b0ZvY3VzTWl4aW4gPSByZXF1aXJlKFwiLi9BdXRvRm9jdXNNaXhpblwiKTtcbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0gcmVxdWlyZShcIi4vTGlua2VkVmFsdWVVdGlsc1wiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZShcIi4vUmVhY3RET01cIik7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcblxuLy8gU3RvcmUgYSByZWZlcmVuY2UgdG8gdGhlIDxzZWxlY3Q+IGBSZWFjdERPTUNvbXBvbmVudGAuIFRPRE86IHVzZSBzdHJpbmdcbnZhciBzZWxlY3QgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeShSZWFjdERPTS5zZWxlY3QudHlwZSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZVdpdGhQZW5kaW5nVmFsdWVJZk1vdW50ZWQoKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIGlmICh0aGlzLmlzTW91bnRlZCgpKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7dmFsdWU6IHRoaXMuX3BlbmRpbmdWYWx1ZX0pO1xuICAgIHRoaXMuX3BlbmRpbmdWYWx1ZSA9IDA7XG4gIH1cbn1cblxuLyoqXG4gKiBWYWxpZGF0aW9uIGZ1bmN0aW9uIGZvciBgdmFsdWVgIGFuZCBgZGVmYXVsdFZhbHVlYC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNlbGVjdFZhbHVlVHlwZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9wcy5tdWx0aXBsZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJUaGUgYFwiICsgcHJvcE5hbWUgKyBcImAgcHJvcCBzdXBwbGllZCB0byA8c2VsZWN0PiBtdXN0IGJlIGFuIGFycmF5IGlmIFwiKSArXG4gICAgICAgIChcImBtdWx0aXBsZWAgaXMgdHJ1ZS5cIilcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIChcIlRoZSBgXCIgKyBwcm9wTmFtZSArIFwiYCBwcm9wIHN1cHBsaWVkIHRvIDxzZWxlY3Q+IG11c3QgYmUgYSBzY2FsYXIgXCIpICtcbiAgICAgICAgKFwidmFsdWUgaWYgYG11bHRpcGxlYCBpcyBmYWxzZS5cIilcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSWYgYHZhbHVlYCBpcyBzdXBwbGllZCwgdXBkYXRlcyA8b3B0aW9uPiBlbGVtZW50cyBvbiBtb3VudCBhbmQgdXBkYXRlLlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50IEluc3RhbmNlIG9mIFJlYWN0RE9NU2VsZWN0XG4gKiBAcGFyYW0gez8qfSBwcm9wVmFsdWUgRm9yIHVuY29udHJvbGxlZCBjb21wb25lbnRzLCBudWxsL3VuZGVmaW5lZC4gRm9yXG4gKiBjb250cm9sbGVkIGNvbXBvbmVudHMsIGEgc3RyaW5nIChvciB3aXRoIGBtdWx0aXBsZWAsIGEgbGlzdCBvZiBzdHJpbmdzKS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMoY29tcG9uZW50LCBwcm9wVmFsdWUpIHtcbiAgdmFyIG11bHRpcGxlID0gY29tcG9uZW50LnByb3BzLm11bHRpcGxlO1xuICB2YXIgdmFsdWUgPSBwcm9wVmFsdWUgIT0gbnVsbCA/IHByb3BWYWx1ZSA6IGNvbXBvbmVudC5zdGF0ZS52YWx1ZTtcbiAgdmFyIG9wdGlvbnMgPSBjb21wb25lbnQuZ2V0RE9NTm9kZSgpLm9wdGlvbnM7XG4gIHZhciBzZWxlY3RlZFZhbHVlLCBpLCBsO1xuICBpZiAobXVsdGlwbGUpIHtcbiAgICBzZWxlY3RlZFZhbHVlID0ge307XG4gICAgZm9yIChpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgc2VsZWN0ZWRWYWx1ZVsnJyArIHZhbHVlW2ldXSA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNlbGVjdGVkVmFsdWUgPSAnJyArIHZhbHVlO1xuICB9XG4gIGZvciAoaSA9IDAsIGwgPSBvcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBzZWxlY3RlZCA9IG11bHRpcGxlID9cbiAgICAgIHNlbGVjdGVkVmFsdWUuaGFzT3duUHJvcGVydHkob3B0aW9uc1tpXS52YWx1ZSkgOlxuICAgICAgb3B0aW9uc1tpXS52YWx1ZSA9PT0gc2VsZWN0ZWRWYWx1ZTtcblxuICAgIGlmIChzZWxlY3RlZCAhPT0gb3B0aW9uc1tpXS5zZWxlY3RlZCkge1xuICAgICAgb3B0aW9uc1tpXS5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgYSA8c2VsZWN0PiBuYXRpdmUgY29tcG9uZW50IHRoYXQgYWxsb3dzIG9wdGlvbmFsbHkgc2V0dGluZyB0aGVcbiAqIHByb3BzIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLiBJZiBgbXVsdGlwbGVgIGlzIGZhbHNlLCB0aGUgcHJvcCBtdXN0IGJlIGFcbiAqIHN0cmluZy4gSWYgYG11bHRpcGxlYCBpcyB0cnVlLCB0aGUgcHJvcCBtdXN0IGJlIGFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKlxuICogSWYgYHZhbHVlYCBpcyBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zIHRoYXQgY2hhbmdlIHRoZVxuICogc2VsZWN0ZWQgb3B0aW9uIHdpbGwgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSByZW5kZXJlZCBvcHRpb25zLlxuICpcbiAqIElmIGl0IGlzIHN1cHBsaWVkIChhbmQgbm90IG51bGwvdW5kZWZpbmVkKSwgdGhlIHJlbmRlcmVkIG9wdGlvbnMgd2lsbCBub3RcbiAqIHVwZGF0ZSBpbiByZXNwb25zZSB0byB1c2VyIGFjdGlvbnMuIEluc3RlYWQsIHRoZSBgdmFsdWVgIHByb3AgbXVzdCBjaGFuZ2UgaW5cbiAqIG9yZGVyIGZvciB0aGUgcmVuZGVyZWQgb3B0aW9ucyB0byB1cGRhdGUuXG4gKlxuICogSWYgYGRlZmF1bHRWYWx1ZWAgaXMgcHJvdmlkZWQsIGFueSBvcHRpb25zIHdpdGggdGhlIHN1cHBsaWVkIHZhbHVlcyB3aWxsIGJlXG4gKiBzZWxlY3RlZC5cbiAqL1xudmFyIFJlYWN0RE9NU2VsZWN0ID0gUmVhY3RDb21wb3NpdGVDb21wb25lbnQuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NU2VsZWN0JyxcblxuICBtaXhpbnM6IFtBdXRvRm9jdXNNaXhpbiwgTGlua2VkVmFsdWVVdGlscy5NaXhpbiwgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5dLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGRlZmF1bHRWYWx1ZTogc2VsZWN0VmFsdWVUeXBlLFxuICAgIHZhbHVlOiBzZWxlY3RWYWx1ZVR5cGVcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7dmFsdWU6IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlIHx8ICh0aGlzLnByb3BzLm11bHRpcGxlID8gW10gOiAnJyl9O1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcGVuZGluZ1ZhbHVlID0gbnVsbDtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbihuZXh0UHJvcHMpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMubXVsdGlwbGUgJiYgbmV4dFByb3BzLm11bHRpcGxlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHt2YWx1ZTogW3RoaXMuc3RhdGUudmFsdWVdfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLm11bHRpcGxlICYmICFuZXh0UHJvcHMubXVsdGlwbGUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe3ZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlWzBdfSk7XG4gICAgfVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgLy8gQ2xvbmUgYHRoaXMucHJvcHNgIHNvIHdlIGRvbid0IG11dGF0ZSB0aGUgaW5wdXQuXG4gICAgdmFyIHByb3BzID0gYXNzaWduKHt9LCB0aGlzLnByb3BzKTtcblxuICAgIHByb3BzLm9uQ2hhbmdlID0gdGhpcy5faGFuZGxlQ2hhbmdlO1xuICAgIHByb3BzLnZhbHVlID0gbnVsbDtcblxuICAgIHJldHVybiBzZWxlY3QocHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB1cGRhdGVPcHRpb25zKHRoaXMsIExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcykpO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24ocHJldlByb3BzKSB7XG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZSh0aGlzKTtcbiAgICB2YXIgcHJldk11bHRpcGxlID0gISFwcmV2UHJvcHMubXVsdGlwbGU7XG4gICAgdmFyIG11bHRpcGxlID0gISF0aGlzLnByb3BzLm11bHRpcGxlO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsIHx8IHByZXZNdWx0aXBsZSAhPT0gbXVsdGlwbGUpIHtcbiAgICAgIHVwZGF0ZU9wdGlvbnModGhpcywgdmFsdWUpO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlQ2hhbmdlOiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciByZXR1cm5WYWx1ZTtcbiAgICB2YXIgb25DaGFuZ2UgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldE9uQ2hhbmdlKHRoaXMpO1xuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgcmV0dXJuVmFsdWUgPSBvbkNoYW5nZS5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG5cbiAgICB2YXIgc2VsZWN0ZWRWYWx1ZTtcbiAgICBpZiAodGhpcy5wcm9wcy5tdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWRWYWx1ZSA9IFtdO1xuICAgICAgdmFyIG9wdGlvbnMgPSBldmVudC50YXJnZXQub3B0aW9ucztcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKG9wdGlvbnNbaV0uc2VsZWN0ZWQpIHtcbiAgICAgICAgICBzZWxlY3RlZFZhbHVlLnB1c2gob3B0aW9uc1tpXS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRWYWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLl9wZW5kaW5nVmFsdWUgPSBzZWxlY3RlZFZhbHVlO1xuICAgIFJlYWN0VXBkYXRlcy5hc2FwKHVwZGF0ZVdpdGhQZW5kaW5nVmFsdWVJZk1vdW50ZWQsIHRoaXMpO1xuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVNlbGVjdDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9SZWFjdERPTVNlbGVjdC5qc1xuICoqIG1vZHVsZSBpZCA9IDEzNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NU2VsZWN0aW9uXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldCA9IHJlcXVpcmUoXCIuL2dldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXRcIik7XG52YXIgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvciA9IHJlcXVpcmUoXCIuL2dldFRleHRDb250ZW50QWNjZXNzb3JcIik7XG5cbi8qKlxuICogV2hpbGUgYGlzQ29sbGFwc2VkYCBpcyBhdmFpbGFibGUgb24gdGhlIFNlbGVjdGlvbiBvYmplY3QgYW5kIGBjb2xsYXBzZWRgXG4gKiBpcyBhdmFpbGFibGUgb24gdGhlIFJhbmdlIG9iamVjdCwgSUUxMSBzb21ldGltZXMgZ2V0cyB0aGVtIHdyb25nLlxuICogSWYgdGhlIGFuY2hvci9mb2N1cyBub2RlcyBhbmQgb2Zmc2V0cyBhcmUgdGhlIHNhbWUsIHRoZSByYW5nZSBpcyBjb2xsYXBzZWQuXG4gKi9cbmZ1bmN0aW9uIGlzQ29sbGFwc2VkKGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCwgZm9jdXNOb2RlLCBmb2N1c09mZnNldCkge1xuICByZXR1cm4gYW5jaG9yTm9kZSA9PT0gZm9jdXNOb2RlICYmIGFuY2hvck9mZnNldCA9PT0gZm9jdXNPZmZzZXQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBhcHByb3ByaWF0ZSBhbmNob3IgYW5kIGZvY3VzIG5vZGUvb2Zmc2V0IHBhaXJzIGZvciBJRS5cbiAqXG4gKiBUaGUgY2F0Y2ggaGVyZSBpcyB0aGF0IElFJ3Mgc2VsZWN0aW9uIEFQSSBkb2Vzbid0IHByb3ZpZGUgaW5mb3JtYXRpb25cbiAqIGFib3V0IHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBpcyBmb3J3YXJkIG9yIGJhY2t3YXJkLCBzbyB3ZSBoYXZlIHRvXG4gKiBiZWhhdmUgYXMgdGhvdWdoIGl0J3MgYWx3YXlzIGZvcndhcmQuXG4gKlxuICogSUUgdGV4dCBkaWZmZXJzIGZyb20gbW9kZXJuIHNlbGVjdGlvbiBpbiB0aGF0IGl0IGJlaGF2ZXMgYXMgdGhvdWdoXG4gKiBibG9jayBlbGVtZW50cyBlbmQgd2l0aCBhIG5ldyBsaW5lLiBUaGlzIG1lYW5zIGNoYXJhY3RlciBvZmZzZXRzIHdpbGxcbiAqIGRpZmZlciBiZXR3ZWVuIHRoZSB0d28gQVBJcy5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0SUVPZmZzZXRzKG5vZGUpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGRvY3VtZW50LnNlbGVjdGlvbjtcbiAgdmFyIHNlbGVjdGVkUmFuZ2UgPSBzZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgdmFyIHNlbGVjdGVkTGVuZ3RoID0gc2VsZWN0ZWRSYW5nZS50ZXh0Lmxlbmd0aDtcblxuICAvLyBEdXBsaWNhdGUgc2VsZWN0aW9uIHNvIHdlIGNhbiBtb3ZlIHJhbmdlIHdpdGhvdXQgYnJlYWtpbmcgdXNlciBzZWxlY3Rpb24uXG4gIHZhciBmcm9tU3RhcnQgPSBzZWxlY3RlZFJhbmdlLmR1cGxpY2F0ZSgpO1xuICBmcm9tU3RhcnQubW92ZVRvRWxlbWVudFRleHQobm9kZSk7XG4gIGZyb21TdGFydC5zZXRFbmRQb2ludCgnRW5kVG9TdGFydCcsIHNlbGVjdGVkUmFuZ2UpO1xuXG4gIHZhciBzdGFydE9mZnNldCA9IGZyb21TdGFydC50ZXh0Lmxlbmd0aDtcbiAgdmFyIGVuZE9mZnNldCA9IHN0YXJ0T2Zmc2V0ICsgc2VsZWN0ZWRMZW5ndGg7XG5cbiAgcmV0dXJuIHtcbiAgICBzdGFydDogc3RhcnRPZmZzZXQsXG4gICAgZW5kOiBlbmRPZmZzZXRcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm4gez9vYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE1vZGVybk9mZnNldHMobm9kZSkge1xuICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbiAmJiB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgaWYgKCFzZWxlY3Rpb24gfHwgc2VsZWN0aW9uLnJhbmdlQ291bnQgPT09IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBhbmNob3JOb2RlID0gc2VsZWN0aW9uLmFuY2hvck5vZGU7XG4gIHZhciBhbmNob3JPZmZzZXQgPSBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0O1xuICB2YXIgZm9jdXNOb2RlID0gc2VsZWN0aW9uLmZvY3VzTm9kZTtcbiAgdmFyIGZvY3VzT2Zmc2V0ID0gc2VsZWN0aW9uLmZvY3VzT2Zmc2V0O1xuXG4gIHZhciBjdXJyZW50UmFuZ2UgPSBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcblxuICAvLyBJZiB0aGUgbm9kZSBhbmQgb2Zmc2V0IHZhbHVlcyBhcmUgdGhlIHNhbWUsIHRoZSBzZWxlY3Rpb24gaXMgY29sbGFwc2VkLlxuICAvLyBgU2VsZWN0aW9uLmlzQ29sbGFwc2VkYCBpcyBhdmFpbGFibGUgbmF0aXZlbHksIGJ1dCBJRSBzb21ldGltZXMgZ2V0c1xuICAvLyB0aGlzIHZhbHVlIHdyb25nLlxuICB2YXIgaXNTZWxlY3Rpb25Db2xsYXBzZWQgPSBpc0NvbGxhcHNlZChcbiAgICBzZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuICAgIHNlbGVjdGlvbi5mb2N1c05vZGUsXG4gICAgc2VsZWN0aW9uLmZvY3VzT2Zmc2V0XG4gICk7XG5cbiAgdmFyIHJhbmdlTGVuZ3RoID0gaXNTZWxlY3Rpb25Db2xsYXBzZWQgPyAwIDogY3VycmVudFJhbmdlLnRvU3RyaW5nKCkubGVuZ3RoO1xuXG4gIHZhciB0ZW1wUmFuZ2UgPSBjdXJyZW50UmFuZ2UuY2xvbmVSYW5nZSgpO1xuICB0ZW1wUmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKG5vZGUpO1xuICB0ZW1wUmFuZ2Uuc2V0RW5kKGN1cnJlbnRSYW5nZS5zdGFydENvbnRhaW5lciwgY3VycmVudFJhbmdlLnN0YXJ0T2Zmc2V0KTtcblxuICB2YXIgaXNUZW1wUmFuZ2VDb2xsYXBzZWQgPSBpc0NvbGxhcHNlZChcbiAgICB0ZW1wUmFuZ2Uuc3RhcnRDb250YWluZXIsXG4gICAgdGVtcFJhbmdlLnN0YXJ0T2Zmc2V0LFxuICAgIHRlbXBSYW5nZS5lbmRDb250YWluZXIsXG4gICAgdGVtcFJhbmdlLmVuZE9mZnNldFxuICApO1xuXG4gIHZhciBzdGFydCA9IGlzVGVtcFJhbmdlQ29sbGFwc2VkID8gMCA6IHRlbXBSYW5nZS50b1N0cmluZygpLmxlbmd0aDtcbiAgdmFyIGVuZCA9IHN0YXJ0ICsgcmFuZ2VMZW5ndGg7XG5cbiAgLy8gRGV0ZWN0IHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBpcyBiYWNrd2FyZC5cbiAgdmFyIGRldGVjdGlvblJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgZGV0ZWN0aW9uUmFuZ2Uuc2V0U3RhcnQoYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0KTtcbiAgZGV0ZWN0aW9uUmFuZ2Uuc2V0RW5kKGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpO1xuICB2YXIgaXNCYWNrd2FyZCA9IGRldGVjdGlvblJhbmdlLmNvbGxhcHNlZDtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBpc0JhY2t3YXJkID8gZW5kIDogc3RhcnQsXG4gICAgZW5kOiBpc0JhY2t3YXJkID8gc3RhcnQgOiBlbmRcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvZmZzZXRzXG4gKi9cbmZ1bmN0aW9uIHNldElFT2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpLmR1cGxpY2F0ZSgpO1xuICB2YXIgc3RhcnQsIGVuZDtcblxuICBpZiAodHlwZW9mIG9mZnNldHMuZW5kID09PSAndW5kZWZpbmVkJykge1xuICAgIHN0YXJ0ID0gb2Zmc2V0cy5zdGFydDtcbiAgICBlbmQgPSBzdGFydDtcbiAgfSBlbHNlIGlmIChvZmZzZXRzLnN0YXJ0ID4gb2Zmc2V0cy5lbmQpIHtcbiAgICBzdGFydCA9IG9mZnNldHMuZW5kO1xuICAgIGVuZCA9IG9mZnNldHMuc3RhcnQ7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuICAgIGVuZCA9IG9mZnNldHMuZW5kO1xuICB9XG5cbiAgcmFuZ2UubW92ZVRvRWxlbWVudFRleHQobm9kZSk7XG4gIHJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgc3RhcnQpO1xuICByYW5nZS5zZXRFbmRQb2ludCgnRW5kVG9TdGFydCcsIHJhbmdlKTtcbiAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgZW5kIC0gc3RhcnQpO1xuICByYW5nZS5zZWxlY3QoKTtcbn1cblxuLyoqXG4gKiBJbiBtb2Rlcm4gbm9uLUlFIGJyb3dzZXJzLCB3ZSBjYW4gc3VwcG9ydCBib3RoIGZvcndhcmQgYW5kIGJhY2t3YXJkXG4gKiBzZWxlY3Rpb25zLlxuICpcbiAqIE5vdGU6IElFMTArIHN1cHBvcnRzIHRoZSBTZWxlY3Rpb24gb2JqZWN0LCBidXQgaXQgZG9lcyBub3Qgc3VwcG9ydFxuICogdGhlIGBleHRlbmRgIG1ldGhvZCwgd2hpY2ggbWVhbnMgdGhhdCBldmVuIGluIG1vZGVybiBJRSwgaXQncyBub3QgcG9zc2libGVcbiAqIHRvIHByb2dyYW1hdGljYWxseSBjcmVhdGUgYSBiYWNrd2FyZCBzZWxlY3Rpb24uIFRodXMsIGZvciBhbGwgSUVcbiAqIHZlcnNpb25zLCB3ZSB1c2UgdGhlIG9sZCBJRSBBUEkgdG8gY3JlYXRlIG91ciBzZWxlY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHBhcmFtIHtvYmplY3R9IG9mZnNldHNcbiAqL1xuZnVuY3Rpb24gc2V0TW9kZXJuT2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gIGlmICghd2luZG93LmdldFNlbGVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBsZW5ndGggPSBub2RlW2dldFRleHRDb250ZW50QWNjZXNzb3IoKV0ubGVuZ3RoO1xuICB2YXIgc3RhcnQgPSBNYXRoLm1pbihvZmZzZXRzLnN0YXJ0LCBsZW5ndGgpO1xuICB2YXIgZW5kID0gdHlwZW9mIG9mZnNldHMuZW5kID09PSAndW5kZWZpbmVkJyA/XG4gICAgICAgICAgICBzdGFydCA6IE1hdGgubWluKG9mZnNldHMuZW5kLCBsZW5ndGgpO1xuXG4gIC8vIElFIDExIHVzZXMgbW9kZXJuIHNlbGVjdGlvbiwgYnV0IGRvZXNuJ3Qgc3VwcG9ydCB0aGUgZXh0ZW5kIG1ldGhvZC5cbiAgLy8gRmxpcCBiYWNrd2FyZCBzZWxlY3Rpb25zLCBzbyB3ZSBjYW4gc2V0IHdpdGggYSBzaW5nbGUgcmFuZ2UuXG4gIGlmICghc2VsZWN0aW9uLmV4dGVuZCAmJiBzdGFydCA+IGVuZCkge1xuICAgIHZhciB0ZW1wID0gZW5kO1xuICAgIGVuZCA9IHN0YXJ0O1xuICAgIHN0YXJ0ID0gdGVtcDtcbiAgfVxuXG4gIHZhciBzdGFydE1hcmtlciA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQobm9kZSwgc3RhcnQpO1xuICB2YXIgZW5kTWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChub2RlLCBlbmQpO1xuXG4gIGlmIChzdGFydE1hcmtlciAmJiBlbmRNYXJrZXIpIHtcbiAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIHJhbmdlLnNldFN0YXJ0KHN0YXJ0TWFya2VyLm5vZGUsIHN0YXJ0TWFya2VyLm9mZnNldCk7XG4gICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSB7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgc2VsZWN0aW9uLmV4dGVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlLnNldEVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdXNlSUVPZmZzZXRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmIGRvY3VtZW50LnNlbGVjdGlvbjtcblxudmFyIFJlYWN0RE9NU2VsZWN0aW9uID0ge1xuICAvKipcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqL1xuICBnZXRPZmZzZXRzOiB1c2VJRU9mZnNldHMgPyBnZXRJRU9mZnNldHMgOiBnZXRNb2Rlcm5PZmZzZXRzLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAgICogQHBhcmFtIHtvYmplY3R9IG9mZnNldHNcbiAgICovXG4gIHNldE9mZnNldHM6IHVzZUlFT2Zmc2V0cyA/IHNldElFT2Zmc2V0cyA6IHNldE1vZGVybk9mZnNldHNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01TZWxlY3Rpb247XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3RET01TZWxlY3Rpb24uanNcbiAqKiBtb2R1bGUgaWQgPSAxMzZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVRleHRhcmVhXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBBdXRvRm9jdXNNaXhpbiA9IHJlcXVpcmUoXCIuL0F1dG9Gb2N1c01peGluXCIpO1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5T3BlcmF0aW9uc1wiKTtcbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0gcmVxdWlyZShcIi4vTGlua2VkVmFsdWVVdGlsc1wiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZShcIi4vUmVhY3RET01cIik7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxuLy8gU3RvcmUgYSByZWZlcmVuY2UgdG8gdGhlIDx0ZXh0YXJlYT4gYFJlYWN0RE9NQ29tcG9uZW50YC4gVE9ETzogdXNlIHN0cmluZ1xudmFyIHRleHRhcmVhID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoUmVhY3RET00udGV4dGFyZWEudHlwZSk7XG5cbmZ1bmN0aW9uIGZvcmNlVXBkYXRlSWZNb3VudGVkKCkge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICBpZiAodGhpcy5pc01vdW50ZWQoKSkge1xuICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgYSA8dGV4dGFyZWE+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCBhbGxvd3Mgc2V0dGluZyBgdmFsdWVgLCBhbmRcbiAqIGBkZWZhdWx0VmFsdWVgLiBUaGlzIGRpZmZlcnMgZnJvbSB0aGUgdHJhZGl0aW9uYWwgRE9NIEFQSSBiZWNhdXNlIHZhbHVlIGlzXG4gKiB1c3VhbGx5IHNldCBhcyBQQ0RBVEEgY2hpbGRyZW4uXG4gKlxuICogSWYgYHZhbHVlYCBpcyBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zIHRoYXQgYWZmZWN0IHRoZVxuICogdmFsdWUgd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuXG4gKlxuICogSWYgYHZhbHVlYCBpcyBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGxcbiAqIG5vdCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuIEluc3RlYWQsIHRoZSBgdmFsdWVgIHByb3AgbXVzdCBjaGFuZ2UgaW5cbiAqIG9yZGVyIGZvciB0aGUgcmVuZGVyZWQgZWxlbWVudCB0byBiZSB1cGRhdGVkLlxuICpcbiAqIFRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGwgYmUgaW5pdGlhbGl6ZWQgd2l0aCBhbiBlbXB0eSB2YWx1ZSwgdGhlIHByb3BcbiAqIGBkZWZhdWx0VmFsdWVgIGlmIHNwZWNpZmllZCwgb3IgdGhlIGNoaWxkcmVuIGNvbnRlbnQgKGRlcHJlY2F0ZWQpLlxuICovXG52YXIgUmVhY3RET01UZXh0YXJlYSA9IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWFjdERPTVRleHRhcmVhJyxcblxuICBtaXhpbnM6IFtBdXRvRm9jdXNNaXhpbiwgTGlua2VkVmFsdWVVdGlscy5NaXhpbiwgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5dLFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlO1xuICAgIC8vIFRPRE8gKHl1bmdzdGVycyk6IFJlbW92ZSBzdXBwb3J0IGZvciBjaGlsZHJlbiBjb250ZW50IGluIDx0ZXh0YXJlYT4uXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAnVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIGluc3RlYWQgb2Ygc2V0dGluZyAnICtcbiAgICAgICAgICAnY2hpbGRyZW4gb24gPHRleHRhcmVhPi4nXG4gICAgICAgICkgOiBudWxsKTtcbiAgICAgIH1cbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9PSBudWxsLFxuICAgICAgICAnSWYgeW91IHN1cHBseSBgZGVmYXVsdFZhbHVlYCBvbiBhIDx0ZXh0YXJlYT4sIGRvIG5vdCBwYXNzIGNoaWxkcmVuLidcbiAgICAgICkgOiBpbnZhcmlhbnQoZGVmYXVsdFZhbHVlID09IG51bGwpKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgIGNoaWxkcmVuLmxlbmd0aCA8PSAxLFxuICAgICAgICAgICc8dGV4dGFyZWE+IGNhbiBvbmx5IGhhdmUgYXQgbW9zdCBvbmUgY2hpbGQuJ1xuICAgICAgICApIDogaW52YXJpYW50KGNoaWxkcmVuLmxlbmd0aCA8PSAxKSk7XG4gICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW5bMF07XG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHRWYWx1ZSA9ICcnICsgY2hpbGRyZW47XG4gICAgfVxuICAgIGlmIChkZWZhdWx0VmFsdWUgPT0gbnVsbCkge1xuICAgICAgZGVmYXVsdFZhbHVlID0gJyc7XG4gICAgfVxuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFdlIHNhdmUgdGhlIGluaXRpYWwgdmFsdWUgc28gdGhhdCBgUmVhY3RET01Db21wb25lbnRgIGRvZXNuJ3QgdXBkYXRlXG4gICAgICAvLyBgdGV4dENvbnRlbnRgICh1bm5lY2Vzc2FyeSBzaW5jZSB3ZSB1cGRhdGUgdmFsdWUpLlxuICAgICAgLy8gVGhlIGluaXRpYWwgdmFsdWUgY2FuIGJlIGEgYm9vbGVhbiBvciBvYmplY3Qgc28gdGhhdCdzIHdoeSBpdCdzXG4gICAgICAvLyBmb3JjZWQgdG8gYmUgYSBzdHJpbmcuXG4gICAgICBpbml0aWFsVmFsdWU6ICcnICsgKHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZSlcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgLy8gQ2xvbmUgYHRoaXMucHJvcHNgIHNvIHdlIGRvbid0IG11dGF0ZSB0aGUgaW5wdXQuXG4gICAgdmFyIHByb3BzID0gYXNzaWduKHt9LCB0aGlzLnByb3BzKTtcblxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PSBudWxsLFxuICAgICAgJ2BkYW5nZXJvdXNseVNldElubmVySFRNTGAgZG9lcyBub3QgbWFrZSBzZW5zZSBvbiA8dGV4dGFyZWE+LidcbiAgICApIDogaW52YXJpYW50KHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09IG51bGwpKTtcblxuICAgIHByb3BzLmRlZmF1bHRWYWx1ZSA9IG51bGw7XG4gICAgcHJvcHMudmFsdWUgPSBudWxsO1xuICAgIHByb3BzLm9uQ2hhbmdlID0gdGhpcy5faGFuZGxlQ2hhbmdlO1xuXG4gICAgLy8gQWx3YXlzIHNldCBjaGlsZHJlbiB0byB0aGUgc2FtZSB0aGluZy4gSW4gSUU5LCB0aGUgc2VsZWN0aW9uIHJhbmdlIHdpbGxcbiAgICAvLyBnZXQgcmVzZXQgaWYgYHRleHRDb250ZW50YCBpcyBtdXRhdGVkLlxuICAgIHJldHVybiB0ZXh0YXJlYShwcm9wcywgdGhpcy5zdGF0ZS5pbml0aWFsVmFsdWUpO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24ocHJldlByb3BzLCBwcmV2U3RhdGUsIHByZXZDb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZSh0aGlzKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgdmFyIHJvb3ROb2RlID0gdGhpcy5nZXRET01Ob2RlKCk7XG4gICAgICAvLyBDYXN0IGB2YWx1ZWAgdG8gYSBzdHJpbmcgdG8gZW5zdXJlIHRoZSB2YWx1ZSBpcyBzZXQgY29ycmVjdGx5LiBXaGlsZVxuICAgICAgLy8gYnJvd3NlcnMgdHlwaWNhbGx5IGRvIHRoaXMgYXMgbmVjZXNzYXJ5LCBqc2RvbSBkb2Vzbid0LlxuICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkocm9vdE5vZGUsICd2YWx1ZScsICcnICsgdmFsdWUpO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlQ2hhbmdlOiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciByZXR1cm5WYWx1ZTtcbiAgICB2YXIgb25DaGFuZ2UgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldE9uQ2hhbmdlKHRoaXMpO1xuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgcmV0dXJuVmFsdWUgPSBvbkNoYW5nZS5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gICAgUmVhY3RVcGRhdGVzLmFzYXAoZm9yY2VVcGRhdGVJZk1vdW50ZWQsIHRoaXMpO1xuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVRleHRhcmVhO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0RE9NVGV4dGFyZWEuanNcbiAqKiBtb2R1bGUgaWQgPSAxMzdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG52YXIgVHJhbnNhY3Rpb24gPSByZXF1aXJlKFwiLi9UcmFuc2FjdGlvblwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG5cbnZhciBSRVNFVF9CQVRDSEVEX1VQREFURVMgPSB7XG4gIGluaXRpYWxpemU6IGVtcHR5RnVuY3Rpb24sXG4gIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID0gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBGTFVTSF9CQVRDSEVEX1VQREFURVMgPSB7XG4gIGluaXRpYWxpemU6IGVtcHR5RnVuY3Rpb24sXG4gIGNsb3NlOiBSZWFjdFVwZGF0ZXMuZmx1c2hCYXRjaGVkVXBkYXRlcy5iaW5kKFJlYWN0VXBkYXRlcylcbn07XG5cbnZhciBUUkFOU0FDVElPTl9XUkFQUEVSUyA9IFtGTFVTSF9CQVRDSEVEX1VQREFURVMsIFJFU0VUX0JBVENIRURfVVBEQVRFU107XG5cbmZ1bmN0aW9uIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lUcmFuc2FjdGlvbigpIHtcbiAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xufVxuXG5hc3NpZ24oXG4gIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lUcmFuc2FjdGlvbi5wcm90b3R5cGUsXG4gIFRyYW5zYWN0aW9uLk1peGluLFxuICB7XG4gICAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gICAgfVxuICB9XG4pO1xuXG52YXIgdHJhbnNhY3Rpb24gPSBuZXcgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uKCk7XG5cbnZhciBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5ID0ge1xuICBpc0JhdGNoaW5nVXBkYXRlczogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENhbGwgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIGluIGEgY29udGV4dCB3aXRoaW4gd2hpY2ggY2FsbHMgdG8gYHNldFN0YXRlYFxuICAgKiBhbmQgZnJpZW5kcyBhcmUgYmF0Y2hlZCBzdWNoIHRoYXQgY29tcG9uZW50cyBhcmVuJ3QgdXBkYXRlZCB1bm5lY2Vzc2FyaWx5LlxuICAgKi9cbiAgYmF0Y2hlZFVwZGF0ZXM6IGZ1bmN0aW9uKGNhbGxiYWNrLCBhLCBiKSB7XG4gICAgdmFyIGFscmVhZHlCYXRjaGluZ1VwZGF0ZXMgPSBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzO1xuXG4gICAgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyA9IHRydWU7XG5cbiAgICAvLyBUaGUgY29kZSBpcyB3cml0dGVuIHRoaXMgd2F5IHRvIGF2b2lkIGV4dHJhIGFsbG9jYXRpb25zXG4gICAgaWYgKGFscmVhZHlCYXRjaGluZ1VwZGF0ZXMpIHtcbiAgICAgIGNhbGxiYWNrKGEsIGIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2FjdGlvbi5wZXJmb3JtKGNhbGxiYWNrLCBudWxsLCBhLCBiKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9SZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmpzXG4gKiogbW9kdWxlIGlkID0gMTM4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3REZWZhdWx0SW5qZWN0aW9uXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luID0gcmVxdWlyZShcIi4vQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiKTtcbnZhciBDaGFuZ2VFdmVudFBsdWdpbiA9IHJlcXVpcmUoXCIuL0NoYW5nZUV2ZW50UGx1Z2luXCIpO1xudmFyIENsaWVudFJlYWN0Um9vdEluZGV4ID0gcmVxdWlyZShcIi4vQ2xpZW50UmVhY3RSb290SW5kZXhcIik7XG52YXIgQ29tcG9zaXRpb25FdmVudFBsdWdpbiA9IHJlcXVpcmUoXCIuL0NvbXBvc2l0aW9uRXZlbnRQbHVnaW5cIik7XG52YXIgRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIgPSByZXF1aXJlKFwiLi9EZWZhdWx0RXZlbnRQbHVnaW5PcmRlclwiKTtcbnZhciBFbnRlckxlYXZlRXZlbnRQbHVnaW4gPSByZXF1aXJlKFwiLi9FbnRlckxlYXZlRXZlbnRQbHVnaW5cIik7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcbnZhciBIVE1MRE9NUHJvcGVydHlDb25maWcgPSByZXF1aXJlKFwiLi9IVE1MRE9NUHJvcGVydHlDb25maWdcIik7XG52YXIgTW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpbiA9IHJlcXVpcmUoXCIuL01vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW5cIik7XG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiKTtcbnZhciBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCA9XG4gIHJlcXVpcmUoXCIuL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50XCIpO1xudmFyIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kgPSByZXF1aXJlKFwiLi9SZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5XCIpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RET01Db21wb25lbnRcIik7XG52YXIgUmVhY3RET01CdXR0b24gPSByZXF1aXJlKFwiLi9SZWFjdERPTUJ1dHRvblwiKTtcbnZhciBSZWFjdERPTUZvcm0gPSByZXF1aXJlKFwiLi9SZWFjdERPTUZvcm1cIik7XG52YXIgUmVhY3RET01JbWcgPSByZXF1aXJlKFwiLi9SZWFjdERPTUltZ1wiKTtcbnZhciBSZWFjdERPTUlucHV0ID0gcmVxdWlyZShcIi4vUmVhY3RET01JbnB1dFwiKTtcbnZhciBSZWFjdERPTU9wdGlvbiA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NT3B0aW9uXCIpO1xudmFyIFJlYWN0RE9NU2VsZWN0ID0gcmVxdWlyZShcIi4vUmVhY3RET01TZWxlY3RcIik7XG52YXIgUmVhY3RET01UZXh0YXJlYSA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NVGV4dGFyZWFcIik7XG52YXIgUmVhY3RFdmVudExpc3RlbmVyID0gcmVxdWlyZShcIi4vUmVhY3RFdmVudExpc3RlbmVyXCIpO1xudmFyIFJlYWN0SW5qZWN0aW9uID0gcmVxdWlyZShcIi4vUmVhY3RJbmplY3Rpb25cIik7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBTZWxlY3RFdmVudFBsdWdpbiA9IHJlcXVpcmUoXCIuL1NlbGVjdEV2ZW50UGx1Z2luXCIpO1xudmFyIFNlcnZlclJlYWN0Um9vdEluZGV4ID0gcmVxdWlyZShcIi4vU2VydmVyUmVhY3RSb290SW5kZXhcIik7XG52YXIgU2ltcGxlRXZlbnRQbHVnaW4gPSByZXF1aXJlKFwiLi9TaW1wbGVFdmVudFBsdWdpblwiKTtcbnZhciBTVkdET01Qcm9wZXJ0eUNvbmZpZyA9IHJlcXVpcmUoXCIuL1NWR0RPTVByb3BlcnR5Q29uZmlnXCIpO1xuXG52YXIgY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQgPSByZXF1aXJlKFwiLi9jcmVhdGVGdWxsUGFnZUNvbXBvbmVudFwiKTtcblxuZnVuY3Rpb24gaW5qZWN0KCkge1xuICBSZWFjdEluamVjdGlvbi5FdmVudEVtaXR0ZXIuaW5qZWN0UmVhY3RFdmVudExpc3RlbmVyKFxuICAgIFJlYWN0RXZlbnRMaXN0ZW5lclxuICApO1xuXG4gIC8qKlxuICAgKiBJbmplY3QgbW9kdWxlcyBmb3IgcmVzb2x2aW5nIERPTSBoaWVyYXJjaHkgYW5kIHBsdWdpbiBvcmRlcmluZy5cbiAgICovXG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIpO1xuICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RJbnN0YW5jZUhhbmRsZShSZWFjdEluc3RhbmNlSGFuZGxlcyk7XG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdE1vdW50KFJlYWN0TW91bnQpO1xuXG4gIC8qKlxuICAgKiBTb21lIGltcG9ydGFudCBldmVudCBwbHVnaW5zIGluY2x1ZGVkIGJ5IGRlZmF1bHQgKHdpdGhvdXQgaGF2aW5nIHRvIHJlcXVpcmVcbiAgICogdGhlbSkuXG4gICAqL1xuICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1xuICAgIFNpbXBsZUV2ZW50UGx1Z2luOiBTaW1wbGVFdmVudFBsdWdpbixcbiAgICBFbnRlckxlYXZlRXZlbnRQbHVnaW46IEVudGVyTGVhdmVFdmVudFBsdWdpbixcbiAgICBDaGFuZ2VFdmVudFBsdWdpbjogQ2hhbmdlRXZlbnRQbHVnaW4sXG4gICAgQ29tcG9zaXRpb25FdmVudFBsdWdpbjogQ29tcG9zaXRpb25FdmVudFBsdWdpbixcbiAgICBNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luOiBNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luLFxuICAgIFNlbGVjdEV2ZW50UGx1Z2luOiBTZWxlY3RFdmVudFBsdWdpbixcbiAgICBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXG4gIH0pO1xuXG4gIFJlYWN0SW5qZWN0aW9uLk5hdGl2ZUNvbXBvbmVudC5pbmplY3RHZW5lcmljQ29tcG9uZW50Q2xhc3MoXG4gICAgUmVhY3RET01Db21wb25lbnRcbiAgKTtcblxuICBSZWFjdEluamVjdGlvbi5OYXRpdmVDb21wb25lbnQuaW5qZWN0Q29tcG9uZW50Q2xhc3Nlcyh7XG4gICAgJ2J1dHRvbic6IFJlYWN0RE9NQnV0dG9uLFxuICAgICdmb3JtJzogUmVhY3RET01Gb3JtLFxuICAgICdpbWcnOiBSZWFjdERPTUltZyxcbiAgICAnaW5wdXQnOiBSZWFjdERPTUlucHV0LFxuICAgICdvcHRpb24nOiBSZWFjdERPTU9wdGlvbixcbiAgICAnc2VsZWN0JzogUmVhY3RET01TZWxlY3QsXG4gICAgJ3RleHRhcmVhJzogUmVhY3RET01UZXh0YXJlYSxcblxuICAgICdodG1sJzogY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQoJ2h0bWwnKSxcbiAgICAnaGVhZCc6IGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50KCdoZWFkJyksXG4gICAgJ2JvZHknOiBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudCgnYm9keScpXG4gIH0pO1xuXG4gIC8vIFRoaXMgbmVlZHMgdG8gaGFwcGVuIGFmdGVyIGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50KCkgb3RoZXJ3aXNlIHRoZSBtaXhpblxuICAvLyBnZXRzIGRvdWJsZSBpbmplY3RlZC5cbiAgUmVhY3RJbmplY3Rpb24uQ29tcG9zaXRlQ29tcG9uZW50LmluamVjdE1peGluKFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluKTtcblxuICBSZWFjdEluamVjdGlvbi5ET01Qcm9wZXJ0eS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhIVE1MRE9NUHJvcGVydHlDb25maWcpO1xuICBSZWFjdEluamVjdGlvbi5ET01Qcm9wZXJ0eS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhTVkdET01Qcm9wZXJ0eUNvbmZpZyk7XG5cbiAgUmVhY3RJbmplY3Rpb24uRW1wdHlDb21wb25lbnQuaW5qZWN0RW1wdHlDb21wb25lbnQoJ25vc2NyaXB0Jyk7XG5cbiAgUmVhY3RJbmplY3Rpb24uVXBkYXRlcy5pbmplY3RSZWNvbmNpbGVUcmFuc2FjdGlvbihcbiAgICBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudC5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uXG4gICk7XG4gIFJlYWN0SW5qZWN0aW9uLlVwZGF0ZXMuaW5qZWN0QmF0Y2hpbmdTdHJhdGVneShcbiAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5XG4gICk7XG5cbiAgUmVhY3RJbmplY3Rpb24uUm9vdEluZGV4LmluamVjdENyZWF0ZVJlYWN0Um9vdEluZGV4KFxuICAgIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/XG4gICAgICBDbGllbnRSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleCA6XG4gICAgICBTZXJ2ZXJSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleFxuICApO1xuXG4gIFJlYWN0SW5qZWN0aW9uLkNvbXBvbmVudC5pbmplY3RFbnZpcm9ubWVudChSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCk7XG5cbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIHZhciB1cmwgPSAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmKSB8fCAnJztcbiAgICBpZiAoKC9bPyZdcmVhY3RfcGVyZlxcYi8pLnRlc3QodXJsKSkge1xuICAgICAgdmFyIFJlYWN0RGVmYXVsdFBlcmYgPSByZXF1aXJlKFwiLi9SZWFjdERlZmF1bHRQZXJmXCIpO1xuICAgICAgUmVhY3REZWZhdWx0UGVyZi5zdGFydCgpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaW5qZWN0OiBpbmplY3Rcbn07XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3REZWZhdWx0SW5qZWN0aW9uLmpzXG4gKiogbW9kdWxlIGlkID0gMTM5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3REZWZhdWx0UGVyZlxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlcIik7XG52YXIgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzID0gcmVxdWlyZShcIi4vUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzXCIpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcblxudmFyIHBlcmZvcm1hbmNlTm93ID0gcmVxdWlyZShcIi4vcGVyZm9ybWFuY2VOb3dcIik7XG5cbmZ1bmN0aW9uIHJvdW5kRmxvYXQodmFsKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKHZhbCAqIDEwMCkgLyAxMDA7XG59XG5cbmZ1bmN0aW9uIGFkZFZhbHVlKG9iaiwga2V5LCB2YWwpIHtcbiAgb2JqW2tleV0gPSAob2JqW2tleV0gfHwgMCkgKyB2YWw7XG59XG5cbnZhciBSZWFjdERlZmF1bHRQZXJmID0ge1xuICBfYWxsTWVhc3VyZW1lbnRzOiBbXSwgLy8gbGFzdCBpdGVtIGluIHRoZSBsaXN0IGlzIHRoZSBjdXJyZW50IG9uZVxuICBfbW91bnRTdGFjazogWzBdLFxuICBfaW5qZWN0ZWQ6IGZhbHNlLFxuXG4gIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIVJlYWN0RGVmYXVsdFBlcmYuX2luamVjdGVkKSB7XG4gICAgICBSZWFjdFBlcmYuaW5qZWN0aW9uLmluamVjdE1lYXN1cmUoUmVhY3REZWZhdWx0UGVyZi5tZWFzdXJlKTtcbiAgICB9XG5cbiAgICBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHMubGVuZ3RoID0gMDtcbiAgICBSZWFjdFBlcmYuZW5hYmxlTWVhc3VyZSA9IHRydWU7XG4gIH0sXG5cbiAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgUmVhY3RQZXJmLmVuYWJsZU1lYXN1cmUgPSBmYWxzZTtcbiAgfSxcblxuICBnZXRMYXN0TWVhc3VyZW1lbnRzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICB9LFxuXG4gIHByaW50RXhjbHVzaXZlOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldEV4Y2x1c2l2ZVN1bW1hcnkobWVhc3VyZW1lbnRzKTtcbiAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdDb21wb25lbnQgY2xhc3MgbmFtZSc6IGl0ZW0uY29tcG9uZW50TmFtZSxcbiAgICAgICAgJ1RvdGFsIGluY2x1c2l2ZSB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0uaW5jbHVzaXZlKSxcbiAgICAgICAgJ0V4Y2x1c2l2ZSBtb3VudCB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0uZXhjbHVzaXZlKSxcbiAgICAgICAgJ0V4Y2x1c2l2ZSByZW5kZXIgdGltZSAobXMpJzogcm91bmRGbG9hdChpdGVtLnJlbmRlciksXG4gICAgICAgICdNb3VudCB0aW1lIHBlciBpbnN0YW5jZSAobXMpJzogcm91bmRGbG9hdChpdGVtLmV4Y2x1c2l2ZSAvIGl0ZW0uY291bnQpLFxuICAgICAgICAnUmVuZGVyIHRpbWUgcGVyIGluc3RhbmNlIChtcyknOiByb3VuZEZsb2F0KGl0ZW0ucmVuZGVyIC8gaXRlbS5jb3VudCksXG4gICAgICAgICdJbnN0YW5jZXMnOiBpdGVtLmNvdW50XG4gICAgICB9O1xuICAgIH0pKTtcbiAgICAvLyBUT0RPOiBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKCkgZG9lcyBub3QgcmV0dXJuIHRoZSBjb3JyZWN0XG4gICAgLy8gbnVtYmVyLlxuICB9LFxuXG4gIHByaW50SW5jbHVzaXZlOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldEluY2x1c2l2ZVN1bW1hcnkobWVhc3VyZW1lbnRzKTtcbiAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdPd25lciA+IGNvbXBvbmVudCc6IGl0ZW0uY29tcG9uZW50TmFtZSxcbiAgICAgICAgJ0luY2x1c2l2ZSB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0udGltZSksXG4gICAgICAgICdJbnN0YW5jZXMnOiBpdGVtLmNvdW50XG4gICAgICB9O1xuICAgIH0pKTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgICdUb3RhbCB0aW1lOicsXG4gICAgICBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykudG9GaXhlZCgyKSArICcgbXMnXG4gICAgKTtcbiAgfSxcblxuICBnZXRNZWFzdXJlbWVudHNTdW1tYXJ5TWFwOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICB2YXIgc3VtbWFyeSA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRJbmNsdXNpdmVTdW1tYXJ5KFxuICAgICAgbWVhc3VyZW1lbnRzLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgcmV0dXJuIHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdPd25lciA+IGNvbXBvbmVudCc6IGl0ZW0uY29tcG9uZW50TmFtZSxcbiAgICAgICAgJ1dhc3RlZCB0aW1lIChtcyknOiBpdGVtLnRpbWUsXG4gICAgICAgICdJbnN0YW5jZXMnOiBpdGVtLmNvdW50XG4gICAgICB9O1xuICAgIH0pO1xuICB9LFxuXG4gIHByaW50V2FzdGVkOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIGNvbnNvbGUudGFibGUoUmVhY3REZWZhdWx0UGVyZi5nZXRNZWFzdXJlbWVudHNTdW1tYXJ5TWFwKG1lYXN1cmVtZW50cykpO1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgJ1RvdGFsIHRpbWU6JyxcbiAgICAgIFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRUb3RhbFRpbWUobWVhc3VyZW1lbnRzKS50b0ZpeGVkKDIpICsgJyBtcydcbiAgICApO1xuICB9LFxuXG4gIHByaW50RE9NOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldERPTVN1bW1hcnkobWVhc3VyZW1lbnRzKTtcbiAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIHJlc3VsdFtET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRV0gPSBpdGVtLmlkO1xuICAgICAgcmVzdWx0Wyd0eXBlJ10gPSBpdGVtLnR5cGU7XG4gICAgICByZXN1bHRbJ2FyZ3MnXSA9IEpTT04uc3RyaW5naWZ5KGl0ZW0uYXJncyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pKTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgICdUb3RhbCB0aW1lOicsXG4gICAgICBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykudG9GaXhlZCgyKSArICcgbXMnXG4gICAgKTtcbiAgfSxcblxuICBfcmVjb3JkV3JpdGU6IGZ1bmN0aW9uKGlkLCBmbk5hbWUsIHRvdGFsVGltZSwgYXJncykge1xuICAgIC8vIFRPRE86IHRvdGFsVGltZSBpc24ndCB0aGF0IHVzZWZ1bCBzaW5jZSBpdCBkb2Vzbid0IGNvdW50IHBhaW50cy9yZWZsb3dzXG4gICAgdmFyIHdyaXRlcyA9XG4gICAgICBSZWFjdERlZmF1bHRQZXJmXG4gICAgICAgIC5fYWxsTWVhc3VyZW1lbnRzW1JlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5sZW5ndGggLSAxXVxuICAgICAgICAud3JpdGVzO1xuICAgIHdyaXRlc1tpZF0gPSB3cml0ZXNbaWRdIHx8IFtdO1xuICAgIHdyaXRlc1tpZF0ucHVzaCh7XG4gICAgICB0eXBlOiBmbk5hbWUsXG4gICAgICB0aW1lOiB0b3RhbFRpbWUsXG4gICAgICBhcmdzOiBhcmdzXG4gICAgfSk7XG4gIH0sXG5cbiAgbWVhc3VyZTogZnVuY3Rpb24obW9kdWxlTmFtZSwgZm5OYW1lLCBmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge2ZvciAodmFyIGFyZ3M9W10sJF9fMD0wLCRfXzE9YXJndW1lbnRzLmxlbmd0aDskX18wPCRfXzE7JF9fMCsrKSBhcmdzLnB1c2goYXJndW1lbnRzWyRfXzBdKTtcbiAgICAgIHZhciB0b3RhbFRpbWU7XG4gICAgICB2YXIgcnY7XG4gICAgICB2YXIgc3RhcnQ7XG5cbiAgICAgIGlmIChmbk5hbWUgPT09ICdfcmVuZGVyTmV3Um9vdENvbXBvbmVudCcgfHxcbiAgICAgICAgICBmbk5hbWUgPT09ICdmbHVzaEJhdGNoZWRVcGRhdGVzJykge1xuICAgICAgICAvLyBBIFwibWVhc3VyZW1lbnRcIiBpcyBhIHNldCBvZiBtZXRyaWNzIHJlY29yZGVkIGZvciBlYWNoIGZsdXNoLiBXZSB3YW50XG4gICAgICAgIC8vIHRvIGdyb3VwIHRoZSBtZXRyaWNzIGZvciBhIGdpdmVuIGZsdXNoIHRvZ2V0aGVyIHNvIHdlIGNhbiBsb29rIGF0IHRoZVxuICAgICAgICAvLyBjb21wb25lbnRzIHRoYXQgcmVuZGVyZWQgYW5kIHRoZSBET00gb3BlcmF0aW9ucyB0aGF0IGFjdHVhbGx5XG4gICAgICAgIC8vIGhhcHBlbmVkIHRvIGRldGVybWluZSB0aGUgYW1vdW50IG9mIFwid2FzdGVkIHdvcmtcIiBwZXJmb3JtZWQuXG4gICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5wdXNoKHtcbiAgICAgICAgICBleGNsdXNpdmU6IHt9LFxuICAgICAgICAgIGluY2x1c2l2ZToge30sXG4gICAgICAgICAgcmVuZGVyOiB7fSxcbiAgICAgICAgICBjb3VudHM6IHt9LFxuICAgICAgICAgIHdyaXRlczoge30sXG4gICAgICAgICAgZGlzcGxheU5hbWVzOiB7fSxcbiAgICAgICAgICB0b3RhbFRpbWU6IDBcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXJ0ID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHNbXG4gICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCAtIDFcbiAgICAgICAgXS50b3RhbFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpIC0gc3RhcnQ7XG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH0gZWxzZSBpZiAobW9kdWxlTmFtZSA9PT0gJ1JlYWN0RE9NSURPcGVyYXRpb25zJyB8fFxuICAgICAgICBtb2R1bGVOYW1lID09PSAnUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQnKSB7XG4gICAgICAgIHN0YXJ0ID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB0b3RhbFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpIC0gc3RhcnQ7XG5cbiAgICAgICAgaWYgKGZuTmFtZSA9PT0gJ21vdW50SW1hZ2VJbnRvTm9kZScpIHtcbiAgICAgICAgICB2YXIgbW91bnRJRCA9IFJlYWN0TW91bnQuZ2V0SUQoYXJnc1sxXSk7XG4gICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fcmVjb3JkV3JpdGUobW91bnRJRCwgZm5OYW1lLCB0b3RhbFRpbWUsIGFyZ3NbMF0pO1xuICAgICAgICB9IGVsc2UgaWYgKGZuTmFtZSA9PT0gJ2Rhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlcycpIHtcbiAgICAgICAgICAvLyBzcGVjaWFsIGZvcm1hdFxuICAgICAgICAgIGFyZ3NbMF0uZm9yRWFjaChmdW5jdGlvbih1cGRhdGUpIHtcbiAgICAgICAgICAgIHZhciB3cml0ZUFyZ3MgPSB7fTtcbiAgICAgICAgICAgIGlmICh1cGRhdGUuZnJvbUluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHdyaXRlQXJncy5mcm9tSW5kZXggPSB1cGRhdGUuZnJvbUluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVwZGF0ZS50b0luZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHdyaXRlQXJncy50b0luZGV4ID0gdXBkYXRlLnRvSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBkYXRlLnRleHRDb250ZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHdyaXRlQXJncy50ZXh0Q29udGVudCA9IHVwZGF0ZS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1cGRhdGUubWFya3VwSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgd3JpdGVBcmdzLm1hcmt1cCA9IGFyZ3NbMV1bdXBkYXRlLm1hcmt1cEluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX3JlY29yZFdyaXRlKFxuICAgICAgICAgICAgICB1cGRhdGUucGFyZW50SUQsXG4gICAgICAgICAgICAgIHVwZGF0ZS50eXBlLFxuICAgICAgICAgICAgICB0b3RhbFRpbWUsXG4gICAgICAgICAgICAgIHdyaXRlQXJnc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBiYXNpYyBmb3JtYXRcbiAgICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9yZWNvcmRXcml0ZShcbiAgICAgICAgICAgIGFyZ3NbMF0sXG4gICAgICAgICAgICBmbk5hbWUsXG4gICAgICAgICAgICB0b3RhbFRpbWUsXG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzLCAxKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgICAgfSBlbHNlIGlmIChtb2R1bGVOYW1lID09PSAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnICYmIChcbiAgICAgICAgZm5OYW1lID09PSAnbW91bnRDb21wb25lbnQnIHx8XG4gICAgICAgIGZuTmFtZSA9PT0gJ3VwZGF0ZUNvbXBvbmVudCcgfHwgLy8gVE9ETzogcmVjZWl2ZUNvbXBvbmVudCgpP1xuICAgICAgICBmbk5hbWUgPT09ICdfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50JykpIHtcblxuICAgICAgICB2YXIgcm9vdE5vZGVJRCA9IGZuTmFtZSA9PT0gJ21vdW50Q29tcG9uZW50JyA/XG4gICAgICAgICAgYXJnc1swXSA6XG4gICAgICAgICAgdGhpcy5fcm9vdE5vZGVJRDtcbiAgICAgICAgdmFyIGlzUmVuZGVyID0gZm5OYW1lID09PSAnX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCc7XG4gICAgICAgIHZhciBpc01vdW50ID0gZm5OYW1lID09PSAnbW91bnRDb21wb25lbnQnO1xuXG4gICAgICAgIHZhciBtb3VudFN0YWNrID0gUmVhY3REZWZhdWx0UGVyZi5fbW91bnRTdGFjaztcbiAgICAgICAgdmFyIGVudHJ5ID0gUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzW1xuICAgICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5sZW5ndGggLSAxXG4gICAgICAgIF07XG5cbiAgICAgICAgaWYgKGlzUmVuZGVyKSB7XG4gICAgICAgICAgYWRkVmFsdWUoZW50cnkuY291bnRzLCByb290Tm9kZUlELCAxKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc01vdW50KSB7XG4gICAgICAgICAgbW91bnRTdGFjay5wdXNoKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnQgPSBwZXJmb3JtYW5jZU5vdygpO1xuICAgICAgICBydiA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIHRvdGFsVGltZSA9IHBlcmZvcm1hbmNlTm93KCkgLSBzdGFydDtcblxuICAgICAgICBpZiAoaXNSZW5kZXIpIHtcbiAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5yZW5kZXIsIHJvb3ROb2RlSUQsIHRvdGFsVGltZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNNb3VudCkge1xuICAgICAgICAgIHZhciBzdWJNb3VudFRpbWUgPSBtb3VudFN0YWNrLnBvcCgpO1xuICAgICAgICAgIG1vdW50U3RhY2tbbW91bnRTdGFjay5sZW5ndGggLSAxXSArPSB0b3RhbFRpbWU7XG4gICAgICAgICAgYWRkVmFsdWUoZW50cnkuZXhjbHVzaXZlLCByb290Tm9kZUlELCB0b3RhbFRpbWUgLSBzdWJNb3VudFRpbWUpO1xuICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LmluY2x1c2l2ZSwgcm9vdE5vZGVJRCwgdG90YWxUaW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5pbmNsdXNpdmUsIHJvb3ROb2RlSUQsIHRvdGFsVGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbnRyeS5kaXNwbGF5TmFtZXNbcm9vdE5vZGVJRF0gPSB7XG4gICAgICAgICAgY3VycmVudDogdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSxcbiAgICAgICAgICBvd25lcjogdGhpcy5fb3duZXIgPyB0aGlzLl9vd25lci5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSA6ICc8cm9vdD4nXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERlZmF1bHRQZXJmO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0RGVmYXVsdFBlcmYuanNcbiAqKiBtb2R1bGUgaWQgPSAxNDBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXNcbiAqL1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcblxuLy8gRG9uJ3QgdHJ5IHRvIHNhdmUgdXNlcnMgbGVzcyB0aGFuIDEuMm1zIChhIG51bWJlciBJIG1hZGUgdXApXG52YXIgRE9OVF9DQVJFX1RIUkVTSE9MRCA9IDEuMjtcbnZhciBET01fT1BFUkFUSU9OX1RZUEVTID0ge1xuICAnbW91bnRJbWFnZUludG9Ob2RlJzogJ3NldCBpbm5lckhUTUwnLFxuICBJTlNFUlRfTUFSS1VQOiAnc2V0IGlubmVySFRNTCcsXG4gIE1PVkVfRVhJU1RJTkc6ICdtb3ZlJyxcbiAgUkVNT1ZFX05PREU6ICdyZW1vdmUnLFxuICBURVhUX0NPTlRFTlQ6ICdzZXQgdGV4dENvbnRlbnQnLFxuICAndXBkYXRlUHJvcGVydHlCeUlEJzogJ3VwZGF0ZSBhdHRyaWJ1dGUnLFxuICAnZGVsZXRlUHJvcGVydHlCeUlEJzogJ2RlbGV0ZSBhdHRyaWJ1dGUnLFxuICAndXBkYXRlU3R5bGVzQnlJRCc6ICd1cGRhdGUgc3R5bGVzJyxcbiAgJ3VwZGF0ZUlubmVySFRNTEJ5SUQnOiAnc2V0IGlubmVySFRNTCcsXG4gICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQnOiAncmVwbGFjZSdcbn07XG5cbmZ1bmN0aW9uIGdldFRvdGFsVGltZShtZWFzdXJlbWVudHMpIHtcbiAgLy8gVE9ETzogcmV0dXJuIG51bWJlciBvZiBET00gb3BzPyBjb3VsZCBiZSBtaXNsZWFkaW5nLlxuICAvLyBUT0RPOiBtZWFzdXJlIGRyb3BwZWQgZnJhbWVzIGFmdGVyIHJlY29uY2lsZT9cbiAgLy8gVE9ETzogbG9nIHRvdGFsIHRpbWUgb2YgZWFjaCByZWNvbmNpbGUgYW5kIHRoZSB0b3AtbGV2ZWwgY29tcG9uZW50XG4gIC8vIGNsYXNzIHRoYXQgdHJpZ2dlcmVkIGl0LlxuICB2YXIgdG90YWxUaW1lID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWFzdXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgdG90YWxUaW1lICs9IG1lYXN1cmVtZW50LnRvdGFsVGltZTtcbiAgfVxuICByZXR1cm4gdG90YWxUaW1lO1xufVxuXG5mdW5jdGlvbiBnZXRET01TdW1tYXJ5KG1lYXN1cmVtZW50cykge1xuICB2YXIgaXRlbXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWFzdXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgdmFyIGlkO1xuXG4gICAgZm9yIChpZCBpbiBtZWFzdXJlbWVudC53cml0ZXMpIHtcbiAgICAgIG1lYXN1cmVtZW50LndyaXRlc1tpZF0uZm9yRWFjaChmdW5jdGlvbih3cml0ZSkge1xuICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgdHlwZTogRE9NX09QRVJBVElPTl9UWVBFU1t3cml0ZS50eXBlXSB8fCB3cml0ZS50eXBlLFxuICAgICAgICAgIGFyZ3M6IHdyaXRlLmFyZ3NcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGl0ZW1zO1xufVxuXG5mdW5jdGlvbiBnZXRFeGNsdXNpdmVTdW1tYXJ5KG1lYXN1cmVtZW50cykge1xuICB2YXIgY2FuZGlkYXRlcyA9IHt9O1xuICB2YXIgZGlzcGxheU5hbWU7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWFzdXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgdmFyIGFsbElEcyA9IGFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgbWVhc3VyZW1lbnQuZXhjbHVzaXZlLFxuICAgICAgbWVhc3VyZW1lbnQuaW5jbHVzaXZlXG4gICAgKTtcblxuICAgIGZvciAodmFyIGlkIGluIGFsbElEcykge1xuICAgICAgZGlzcGxheU5hbWUgPSBtZWFzdXJlbWVudC5kaXNwbGF5TmFtZXNbaWRdLmN1cnJlbnQ7XG5cbiAgICAgIGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdID0gY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0gfHwge1xuICAgICAgICBjb21wb25lbnROYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgICAgaW5jbHVzaXZlOiAwLFxuICAgICAgICBleGNsdXNpdmU6IDAsXG4gICAgICAgIHJlbmRlcjogMCxcbiAgICAgICAgY291bnQ6IDBcbiAgICAgIH07XG4gICAgICBpZiAobWVhc3VyZW1lbnQucmVuZGVyW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5yZW5kZXIgKz0gbWVhc3VyZW1lbnQucmVuZGVyW2lkXTtcbiAgICAgIH1cbiAgICAgIGlmIChtZWFzdXJlbWVudC5leGNsdXNpdmVbaWRdKSB7XG4gICAgICAgIGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLmV4Y2x1c2l2ZSArPSBtZWFzdXJlbWVudC5leGNsdXNpdmVbaWRdO1xuICAgICAgfVxuICAgICAgaWYgKG1lYXN1cmVtZW50LmluY2x1c2l2ZVtpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0uaW5jbHVzaXZlICs9IG1lYXN1cmVtZW50LmluY2x1c2l2ZVtpZF07XG4gICAgICB9XG4gICAgICBpZiAobWVhc3VyZW1lbnQuY291bnRzW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5jb3VudCArPSBtZWFzdXJlbWVudC5jb3VudHNbaWRdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIE5vdyBtYWtlIGEgc29ydGVkIGFycmF5IHdpdGggdGhlIHJlc3VsdHMuXG4gIHZhciBhcnIgPSBbXTtcbiAgZm9yIChkaXNwbGF5TmFtZSBpbiBjYW5kaWRhdGVzKSB7XG4gICAgaWYgKGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLmV4Y2x1c2l2ZSA+PSBET05UX0NBUkVfVEhSRVNIT0xEKSB7XG4gICAgICBhcnIucHVzaChjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXSk7XG4gICAgfVxuICB9XG5cbiAgYXJyLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiLmV4Y2x1c2l2ZSAtIGEuZXhjbHVzaXZlO1xuICB9KTtcblxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBnZXRJbmNsdXNpdmVTdW1tYXJ5KG1lYXN1cmVtZW50cywgb25seUNsZWFuKSB7XG4gIHZhciBjYW5kaWRhdGVzID0ge307XG4gIHZhciBpbmNsdXNpdmVLZXk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWFzdXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgdmFyIGFsbElEcyA9IGFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgbWVhc3VyZW1lbnQuZXhjbHVzaXZlLFxuICAgICAgbWVhc3VyZW1lbnQuaW5jbHVzaXZlXG4gICAgKTtcbiAgICB2YXIgY2xlYW5Db21wb25lbnRzO1xuXG4gICAgaWYgKG9ubHlDbGVhbikge1xuICAgICAgY2xlYW5Db21wb25lbnRzID0gZ2V0VW5jaGFuZ2VkQ29tcG9uZW50cyhtZWFzdXJlbWVudCk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaWQgaW4gYWxsSURzKSB7XG4gICAgICBpZiAob25seUNsZWFuICYmICFjbGVhbkNvbXBvbmVudHNbaWRdKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlzcGxheU5hbWUgPSBtZWFzdXJlbWVudC5kaXNwbGF5TmFtZXNbaWRdO1xuXG4gICAgICAvLyBJbmNsdXNpdmUgdGltZSBpcyBub3QgdXNlZnVsIGZvciBtYW55IGNvbXBvbmVudHMgd2l0aG91dCBrbm93aW5nIHdoZXJlXG4gICAgICAvLyB0aGV5IGFyZSBpbnN0YW50aWF0ZWQuIFNvIHdlIGFnZ3JlZ2F0ZSBpbmNsdXNpdmUgdGltZSB3aXRoIGJvdGggdGhlXG4gICAgICAvLyBvd25lciBhbmQgY3VycmVudCBkaXNwbGF5TmFtZSBhcyB0aGUga2V5LlxuICAgICAgaW5jbHVzaXZlS2V5ID0gZGlzcGxheU5hbWUub3duZXIgKyAnID4gJyArIGRpc3BsYXlOYW1lLmN1cnJlbnQ7XG5cbiAgICAgIGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XSA9IGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XSB8fCB7XG4gICAgICAgIGNvbXBvbmVudE5hbWU6IGluY2x1c2l2ZUtleSxcbiAgICAgICAgdGltZTogMCxcbiAgICAgICAgY291bnQ6IDBcbiAgICAgIH07XG5cbiAgICAgIGlmIChtZWFzdXJlbWVudC5pbmNsdXNpdmVbaWRdKSB7XG4gICAgICAgIGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XS50aW1lICs9IG1lYXN1cmVtZW50LmluY2x1c2l2ZVtpZF07XG4gICAgICB9XG4gICAgICBpZiAobWVhc3VyZW1lbnQuY291bnRzW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0uY291bnQgKz0gbWVhc3VyZW1lbnQuY291bnRzW2lkXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBOb3cgbWFrZSBhIHNvcnRlZCBhcnJheSB3aXRoIHRoZSByZXN1bHRzLlxuICB2YXIgYXJyID0gW107XG4gIGZvciAoaW5jbHVzaXZlS2V5IGluIGNhbmRpZGF0ZXMpIHtcbiAgICBpZiAoY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldLnRpbWUgPj0gRE9OVF9DQVJFX1RIUkVTSE9MRCkge1xuICAgICAgYXJyLnB1c2goY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldKTtcbiAgICB9XG4gIH1cblxuICBhcnIuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIudGltZSAtIGEudGltZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5jaGFuZ2VkQ29tcG9uZW50cyhtZWFzdXJlbWVudCkge1xuICAvLyBGb3IgYSBnaXZlbiByZWNvbmNpbGUsIGxvb2sgYXQgd2hpY2ggY29tcG9uZW50cyBkaWQgbm90IGFjdHVhbGx5XG4gIC8vIHJlbmRlciBhbnl0aGluZyB0byB0aGUgRE9NIGFuZCByZXR1cm4gYSBtYXBwaW5nIG9mIHRoZWlyIElEIHRvXG4gIC8vIHRoZSBhbW91bnQgb2YgdGltZSBpdCB0b29rIHRvIHJlbmRlciB0aGUgZW50aXJlIHN1YnRyZWUuXG4gIHZhciBjbGVhbkNvbXBvbmVudHMgPSB7fTtcbiAgdmFyIGRpcnR5TGVhZklEcyA9IE9iamVjdC5rZXlzKG1lYXN1cmVtZW50LndyaXRlcyk7XG4gIHZhciBhbGxJRHMgPSBhc3NpZ24oe30sIG1lYXN1cmVtZW50LmV4Y2x1c2l2ZSwgbWVhc3VyZW1lbnQuaW5jbHVzaXZlKTtcblxuICBmb3IgKHZhciBpZCBpbiBhbGxJRHMpIHtcbiAgICB2YXIgaXNEaXJ0eSA9IGZhbHNlO1xuICAgIC8vIEZvciBlYWNoIGNvbXBvbmVudCB0aGF0IHJlbmRlcmVkLCBzZWUgaWYgYSBjb21wb25lbnQgdGhhdCB0cmlnZ2VyZWRcbiAgICAvLyBhIERPTSBvcCBpcyBpbiBpdHMgc3VidHJlZS5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnR5TGVhZklEcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGRpcnR5TGVhZklEc1tpXS5pbmRleE9mKGlkKSA9PT0gMCkge1xuICAgICAgICBpc0RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghaXNEaXJ0eSAmJiBtZWFzdXJlbWVudC5jb3VudHNbaWRdID4gMCkge1xuICAgICAgY2xlYW5Db21wb25lbnRzW2lkXSA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBjbGVhbkNvbXBvbmVudHM7XG59XG5cbnZhciBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMgPSB7XG4gIGdldEV4Y2x1c2l2ZVN1bW1hcnk6IGdldEV4Y2x1c2l2ZVN1bW1hcnksXG4gIGdldEluY2x1c2l2ZVN1bW1hcnk6IGdldEluY2x1c2l2ZVN1bW1hcnksXG4gIGdldERPTVN1bW1hcnk6IGdldERPTVN1bW1hcnksXG4gIGdldFRvdGFsVGltZTogZ2V0VG90YWxUaW1lXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcztcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9SZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuanNcbiAqKiBtb2R1bGUgaWQgPSAxNDFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEVycm9yVXRpbHNcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdEVycm9yVXRpbHMgPSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZ3VhcmRlZCB2ZXJzaW9uIG9mIGEgZnVuY3Rpb24uIFRoaXMgaXMgc3VwcG9zZWQgdG8gbWFrZSBkZWJ1Z2dpbmdcbiAgICogb2YgZXZlbnQgaGFuZGxlcnMgZWFzaWVyLiBUbyBhaWQgZGVidWdnaW5nIHdpdGggdGhlIGJyb3dzZXIncyBkZWJ1Z2dlcixcbiAgICogdGhpcyBjdXJyZW50bHkgc2ltcGx5IHJldHVybnMgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jIEZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBndWFyZFxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICovXG4gIGd1YXJkOiBmdW5jdGlvbihmdW5jLCBuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFcnJvclV0aWxzO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0RXJyb3JVdGlscy5qc1xuICoqIG1vZHVsZSBpZCA9IDE0MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5IdWJcIik7XG5cbmZ1bmN0aW9uIHJ1bkV2ZW50UXVldWVJbkJhdGNoKGV2ZW50cykge1xuICBFdmVudFBsdWdpbkh1Yi5lbnF1ZXVlRXZlbnRzKGV2ZW50cyk7XG4gIEV2ZW50UGx1Z2luSHViLnByb2Nlc3NFdmVudFF1ZXVlKCk7XG59XG5cbnZhciBSZWFjdEV2ZW50RW1pdHRlck1peGluID0ge1xuXG4gIC8qKlxuICAgKiBTdHJlYW1zIGEgZmlyZWQgdG9wLWxldmVsIGV2ZW50IHRvIGBFdmVudFBsdWdpbkh1YmAgd2hlcmUgcGx1Z2lucyBoYXZlIHRoZVxuICAgKiBvcHBvcnR1bml0eSB0byBjcmVhdGUgYFJlYWN0RXZlbnRgcyB0byBiZSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgZW52aXJvbm1lbnQgZXZlbnQuXG4gICAqL1xuICBoYW5kbGVUb3BMZXZlbDogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudCkge1xuICAgIHZhciBldmVudHMgPSBFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgbmF0aXZlRXZlbnRcbiAgICApO1xuXG4gICAgcnVuRXZlbnRRdWV1ZUluQmF0Y2goZXZlbnRzKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEV2ZW50RW1pdHRlck1peGluO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0RXZlbnRFbWl0dGVyTWl4aW4uanNcbiAqKiBtb2R1bGUgaWQgPSAxNDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEV2ZW50TGlzdGVuZXJcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBFdmVudExpc3RlbmVyID0gcmVxdWlyZShcIi4vRXZlbnRMaXN0ZW5lclwiKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGdldEV2ZW50VGFyZ2V0ID0gcmVxdWlyZShcIi4vZ2V0RXZlbnRUYXJnZXRcIik7XG52YXIgZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24gPSByZXF1aXJlKFwiLi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvblwiKTtcblxuLyoqXG4gKiBGaW5kcyB0aGUgcGFyZW50IFJlYWN0IGNvbXBvbmVudCBvZiBgbm9kZWAuXG4gKlxuICogQHBhcmFtIHsqfSBub2RlXG4gKiBAcmV0dXJuIHs/RE9NRXZlbnRUYXJnZXR9IFBhcmVudCBjb250YWluZXIsIG9yIGBudWxsYCBpZiB0aGUgc3BlY2lmaWVkIG5vZGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgbm90IG5lc3RlZC5cbiAqL1xuZnVuY3Rpb24gZmluZFBhcmVudChub2RlKSB7XG4gIC8vIFRPRE86IEl0IG1heSBiZSBhIGdvb2QgaWRlYSB0byBjYWNoZSB0aGlzIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgRE9NXG4gIC8vIHRyYXZlcnNhbCwgYnV0IGNhY2hpbmcgaXMgZGlmZmljdWx0IHRvIGRvIGNvcnJlY3RseSB3aXRob3V0IHVzaW5nIGFcbiAgLy8gbXV0YXRpb24gb2JzZXJ2ZXIgdG8gbGlzdGVuIGZvciBhbGwgRE9NIGNoYW5nZXMuXG4gIHZhciBub2RlSUQgPSBSZWFjdE1vdW50LmdldElEKG5vZGUpO1xuICB2YXIgcm9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKG5vZGVJRCk7XG4gIHZhciBjb250YWluZXIgPSBSZWFjdE1vdW50LmZpbmRSZWFjdENvbnRhaW5lckZvcklEKHJvb3RJRCk7XG4gIHZhciBwYXJlbnQgPSBSZWFjdE1vdW50LmdldEZpcnN0UmVhY3RET00oY29udGFpbmVyKTtcbiAgcmV0dXJuIHBhcmVudDtcbn1cblxuLy8gVXNlZCB0byBzdG9yZSBhbmNlc3RvciBoaWVyYXJjaHkgaW4gdG9wIGxldmVsIGNhbGxiYWNrXG5mdW5jdGlvbiBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICB0aGlzLnRvcExldmVsVHlwZSA9IHRvcExldmVsVHlwZTtcbiAgdGhpcy5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuICB0aGlzLmFuY2VzdG9ycyA9IFtdO1xufVxuYXNzaWduKFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5wcm90b3R5cGUsIHtcbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50b3BMZXZlbFR5cGUgPSBudWxsO1xuICAgIHRoaXMubmF0aXZlRXZlbnQgPSBudWxsO1xuICAgIHRoaXMuYW5jZXN0b3JzLmxlbmd0aCA9IDA7XG4gIH1cbn0pO1xuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFxuICBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcsXG4gIFBvb2xlZENsYXNzLnR3b0FyZ3VtZW50UG9vbGVyXG4pO1xuXG5mdW5jdGlvbiBoYW5kbGVUb3BMZXZlbEltcGwoYm9va0tlZXBpbmcpIHtcbiAgdmFyIHRvcExldmVsVGFyZ2V0ID0gUmVhY3RNb3VudC5nZXRGaXJzdFJlYWN0RE9NKFxuICAgIGdldEV2ZW50VGFyZ2V0KGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50KVxuICApIHx8IHdpbmRvdztcblxuICAvLyBMb29wIHRocm91Z2ggdGhlIGhpZXJhcmNoeSwgaW4gY2FzZSB0aGVyZSdzIGFueSBuZXN0ZWQgY29tcG9uZW50cy5cbiAgLy8gSXQncyBpbXBvcnRhbnQgdGhhdCB3ZSBidWlsZCB0aGUgYXJyYXkgb2YgYW5jZXN0b3JzIGJlZm9yZSBjYWxsaW5nIGFueVxuICAvLyBldmVudCBoYW5kbGVycywgYmVjYXVzZSBldmVudCBoYW5kbGVycyBjYW4gbW9kaWZ5IHRoZSBET00sIGxlYWRpbmcgdG9cbiAgLy8gaW5jb25zaXN0ZW5jaWVzIHdpdGggUmVhY3RNb3VudCdzIG5vZGUgY2FjaGUuIFNlZSAjMTEwNS5cbiAgdmFyIGFuY2VzdG9yID0gdG9wTGV2ZWxUYXJnZXQ7XG4gIHdoaWxlIChhbmNlc3Rvcikge1xuICAgIGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5wdXNoKGFuY2VzdG9yKTtcbiAgICBhbmNlc3RvciA9IGZpbmRQYXJlbnQoYW5jZXN0b3IpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBib29rS2VlcGluZy5hbmNlc3RvcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdG9wTGV2ZWxUYXJnZXQgPSBib29rS2VlcGluZy5hbmNlc3RvcnNbaV07XG4gICAgdmFyIHRvcExldmVsVGFyZ2V0SUQgPSBSZWFjdE1vdW50LmdldElEKHRvcExldmVsVGFyZ2V0KSB8fCAnJztcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsKFxuICAgICAgYm9va0tlZXBpbmcudG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgYm9va0tlZXBpbmcubmF0aXZlRXZlbnRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNjcm9sbFZhbHVlTW9uaXRvcihjYikge1xuICB2YXIgc2Nyb2xsUG9zaXRpb24gPSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbih3aW5kb3cpO1xuICBjYihzY3JvbGxQb3NpdGlvbik7XG59XG5cbnZhciBSZWFjdEV2ZW50TGlzdGVuZXIgPSB7XG4gIF9lbmFibGVkOiB0cnVlLFxuICBfaGFuZGxlVG9wTGV2ZWw6IG51bGwsXG5cbiAgV0lORE9XX0hBTkRMRTogRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gd2luZG93IDogbnVsbCxcblxuICBzZXRIYW5kbGVUb3BMZXZlbDogZnVuY3Rpb24oaGFuZGxlVG9wTGV2ZWwpIHtcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsID0gaGFuZGxlVG9wTGV2ZWw7XG4gIH0sXG5cbiAgc2V0RW5hYmxlZDogZnVuY3Rpb24oZW5hYmxlZCkge1xuICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5fZW5hYmxlZCA9ICEhZW5hYmxlZDtcbiAgfSxcblxuICBpc0VuYWJsZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQ7XG4gIH0sXG5cblxuICAvKipcbiAgICogVHJhcHMgdG9wLWxldmVsIGV2ZW50cyBieSB1c2luZyBldmVudCBidWJibGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlckJhc2VOYW1lIEV2ZW50IG5hbWUgKGUuZy4gXCJjbGlja1wiKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGhhbmRsZSBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cbiAgICogQHJldHVybiB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCBhIHJlbW92ZSBmdW5jdGlvbiB3aGljaCB3aWxsIGZvcmNlZnVsbHlcbiAgICogICAgICAgICAgICAgICAgICByZW1vdmUgdGhlIGxpc3RlbmVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXBCdWJibGVkRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICB2YXIgZWxlbWVudCA9IGhhbmRsZTtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIEV2ZW50TGlzdGVuZXIubGlzdGVuKFxuICAgICAgZWxlbWVudCxcbiAgICAgIGhhbmRsZXJCYXNlTmFtZSxcbiAgICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5kaXNwYXRjaEV2ZW50LmJpbmQobnVsbCwgdG9wTGV2ZWxUeXBlKVxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYXBzIGEgdG9wLWxldmVsIGV2ZW50IGJ5IHVzaW5nIGV2ZW50IGNhcHR1cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlckJhc2VOYW1lIEV2ZW50IG5hbWUgKGUuZy4gXCJjbGlja1wiKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGhhbmRsZSBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cbiAgICogQHJldHVybiB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCBhIHJlbW92ZSBmdW5jdGlvbiB3aGljaCB3aWxsIGZvcmNlZnVsbHlcbiAgICogICAgICAgICAgICAgICAgICByZW1vdmUgdGhlIGxpc3RlbmVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXBDYXB0dXJlZEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBoYW5kbGU7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBFdmVudExpc3RlbmVyLmNhcHR1cmUoXG4gICAgICBlbGVtZW50LFxuICAgICAgaGFuZGxlckJhc2VOYW1lLFxuICAgICAgUmVhY3RFdmVudExpc3RlbmVyLmRpc3BhdGNoRXZlbnQuYmluZChudWxsLCB0b3BMZXZlbFR5cGUpXG4gICAgKTtcbiAgfSxcblxuICBtb25pdG9yU2Nyb2xsVmFsdWU6IGZ1bmN0aW9uKHJlZnJlc2gpIHtcbiAgICB2YXIgY2FsbGJhY2sgPSBzY3JvbGxWYWx1ZU1vbml0b3IuYmluZChudWxsLCByZWZyZXNoKTtcbiAgICBFdmVudExpc3RlbmVyLmxpc3Rlbih3aW5kb3csICdzY3JvbGwnLCBjYWxsYmFjayk7XG4gICAgRXZlbnRMaXN0ZW5lci5saXN0ZW4od2luZG93LCAncmVzaXplJywgY2FsbGJhY2spO1xuICB9LFxuXG4gIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgICBpZiAoIVJlYWN0RXZlbnRMaXN0ZW5lci5fZW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBib29rS2VlcGluZyA9IFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5nZXRQb29sZWQoXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICBuYXRpdmVFdmVudFxuICAgICk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEV2ZW50IHF1ZXVlIGJlaW5nIHByb2Nlc3NlZCBpbiB0aGUgc2FtZSBjeWNsZSBhbGxvd3NcbiAgICAgIC8vIGBwcmV2ZW50RGVmYXVsdGAuXG4gICAgICBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMoaGFuZGxlVG9wTGV2ZWxJbXBsLCBib29rS2VlcGluZyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5yZWxlYXNlKGJvb2tLZWVwaW5nKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFdmVudExpc3RlbmVyO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0RXZlbnRMaXN0ZW5lci5qc1xuICoqIG1vZHVsZSBpZCA9IDE0NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0SW5qZWN0aW9uXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5IdWJcIik7XG52YXIgUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudFwiKTtcbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCIpO1xudmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVtcHR5Q29tcG9uZW50XCIpO1xudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiKTtcbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0TmF0aXZlQ29tcG9uZW50XCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcbnZhciBSZWFjdFJvb3RJbmRleCA9IHJlcXVpcmUoXCIuL1JlYWN0Um9vdEluZGV4XCIpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcblxudmFyIFJlYWN0SW5qZWN0aW9uID0ge1xuICBDb21wb25lbnQ6IFJlYWN0Q29tcG9uZW50LmluamVjdGlvbixcbiAgQ29tcG9zaXRlQ29tcG9uZW50OiBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5pbmplY3Rpb24sXG4gIERPTVByb3BlcnR5OiBET01Qcm9wZXJ0eS5pbmplY3Rpb24sXG4gIEVtcHR5Q29tcG9uZW50OiBSZWFjdEVtcHR5Q29tcG9uZW50LmluamVjdGlvbixcbiAgRXZlbnRQbHVnaW5IdWI6IEV2ZW50UGx1Z2luSHViLmluamVjdGlvbixcbiAgRXZlbnRFbWl0dGVyOiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuaW5qZWN0aW9uLFxuICBOYXRpdmVDb21wb25lbnQ6IFJlYWN0TmF0aXZlQ29tcG9uZW50LmluamVjdGlvbixcbiAgUGVyZjogUmVhY3RQZXJmLmluamVjdGlvbixcbiAgUm9vdEluZGV4OiBSZWFjdFJvb3RJbmRleC5pbmplY3Rpb24sXG4gIFVwZGF0ZXM6IFJlYWN0VXBkYXRlcy5pbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbmplY3Rpb247XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvUmVhY3RJbmplY3Rpb24uanNcbiAqKiBtb2R1bGUgaWQgPSAxNDVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFByb3BUcmFuc2ZlcmVyXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciBqb2luQ2xhc3NlcyA9IHJlcXVpcmUoXCIuL2pvaW5DbGFzc2VzXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgZGlkV2FybiA9IGZhbHNlO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0cmFuc2ZlciBzdHJhdGVneSB0aGF0IHdpbGwgbWVyZ2UgcHJvcCB2YWx1ZXMgdXNpbmcgdGhlIHN1cHBsaWVkXG4gKiBgbWVyZ2VTdHJhdGVneWAuIElmIGEgcHJvcCB3YXMgcHJldmlvdXNseSB1bnNldCwgdGhpcyBqdXN0IHNldHMgaXQuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gbWVyZ2VTdHJhdGVneVxuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zZmVyU3RyYXRlZ3kobWVyZ2VTdHJhdGVneSkge1xuICByZXR1cm4gZnVuY3Rpb24ocHJvcHMsIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHNba2V5XSA9IG1lcmdlU3RyYXRlZ3kocHJvcHNba2V5XSwgdmFsdWUpO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHRyYW5zZmVyU3RyYXRlZ3lNZXJnZSA9IGNyZWF0ZVRyYW5zZmVyU3RyYXRlZ3koZnVuY3Rpb24oYSwgYikge1xuICAvLyBgbWVyZ2VgIG92ZXJyaWRlcyB0aGUgZmlyc3Qgb2JqZWN0J3MgKGBwcm9wc1trZXldYCBhYm92ZSkga2V5cyB1c2luZyB0aGVcbiAgLy8gc2Vjb25kIG9iamVjdCdzIChgdmFsdWVgKSBrZXlzLiBBbiBvYmplY3QncyBzdHlsZSdzIGV4aXN0aW5nIGBwcm9wQWAgd291bGRcbiAgLy8gZ2V0IG92ZXJyaWRkZW4uIEZsaXAgdGhlIG9yZGVyIGhlcmUuXG4gIHJldHVybiBhc3NpZ24oe30sIGIsIGEpO1xufSk7XG5cbi8qKlxuICogVHJhbnNmZXIgc3RyYXRlZ2llcyBkaWN0YXRlIGhvdyBwcm9wcyBhcmUgdHJhbnNmZXJyZWQgYnkgYHRyYW5zZmVyUHJvcHNUb2AuXG4gKiBOT1RFOiBpZiB5b3UgYWRkIGFueSBtb3JlIGV4Y2VwdGlvbnMgdG8gdGhpcyBsaXN0IHlvdSBzaG91bGQgYmUgc3VyZSB0b1xuICogdXBkYXRlIGBjbG9uZVdpdGhQcm9wcygpYCBhY2NvcmRpbmdseS5cbiAqL1xudmFyIFRyYW5zZmVyU3RyYXRlZ2llcyA9IHtcbiAgLyoqXG4gICAqIE5ldmVyIHRyYW5zZmVyIGBjaGlsZHJlbmAuXG4gICAqL1xuICBjaGlsZHJlbjogZW1wdHlGdW5jdGlvbixcbiAgLyoqXG4gICAqIFRyYW5zZmVyIHRoZSBgY2xhc3NOYW1lYCBwcm9wIGJ5IG1lcmdpbmcgdGhlbS5cbiAgICovXG4gIGNsYXNzTmFtZTogY3JlYXRlVHJhbnNmZXJTdHJhdGVneShqb2luQ2xhc3NlcyksXG4gIC8qKlxuICAgKiBUcmFuc2ZlciB0aGUgYHN0eWxlYCBwcm9wICh3aGljaCBpcyBhbiBvYmplY3QpIGJ5IG1lcmdpbmcgdGhlbS5cbiAgICovXG4gIHN0eWxlOiB0cmFuc2ZlclN0cmF0ZWd5TWVyZ2Vcbn07XG5cbi8qKlxuICogTXV0YXRlcyB0aGUgZmlyc3QgYXJndW1lbnQgYnkgdHJhbnNmZXJyaW5nIHRoZSBwcm9wZXJ0aWVzIGZyb20gdGhlIHNlY29uZFxuICogYXJndW1lbnQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gbmV3UHJvcHNcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gdHJhbnNmZXJJbnRvKHByb3BzLCBuZXdQcm9wcykge1xuICBmb3IgKHZhciB0aGlzS2V5IGluIG5ld1Byb3BzKSB7XG4gICAgaWYgKCFuZXdQcm9wcy5oYXNPd25Qcm9wZXJ0eSh0aGlzS2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zZmVyU3RyYXRlZ3kgPSBUcmFuc2ZlclN0cmF0ZWdpZXNbdGhpc0tleV07XG5cbiAgICBpZiAodHJhbnNmZXJTdHJhdGVneSAmJiBUcmFuc2ZlclN0cmF0ZWdpZXMuaGFzT3duUHJvcGVydHkodGhpc0tleSkpIHtcbiAgICAgIHRyYW5zZmVyU3RyYXRlZ3kocHJvcHMsIHRoaXNLZXksIG5ld1Byb3BzW3RoaXNLZXldKTtcbiAgICB9IGVsc2UgaWYgKCFwcm9wcy5oYXNPd25Qcm9wZXJ0eSh0aGlzS2V5KSkge1xuICAgICAgcHJvcHNbdGhpc0tleV0gPSBuZXdQcm9wc1t0aGlzS2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHByb3BzO1xufVxuXG4vKipcbiAqIFJlYWN0UHJvcFRyYW5zZmVyZXIgYXJlIGNhcGFibGUgb2YgdHJhbnNmZXJyaW5nIHByb3BzIHRvIGFub3RoZXIgY29tcG9uZW50XG4gKiB1c2luZyBhIGB0cmFuc2ZlclByb3BzVG9gIG1ldGhvZC5cbiAqXG4gKiBAY2xhc3MgUmVhY3RQcm9wVHJhbnNmZXJlclxuICovXG52YXIgUmVhY3RQcm9wVHJhbnNmZXJlciA9IHtcblxuICBUcmFuc2ZlclN0cmF0ZWdpZXM6IFRyYW5zZmVyU3RyYXRlZ2llcyxcblxuICAvKipcbiAgICogTWVyZ2UgdHdvIHByb3BzIG9iamVjdHMgdXNpbmcgVHJhbnNmZXJTdHJhdGVnaWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gb2xkUHJvcHMgb3JpZ2luYWwgcHJvcHMgKHRoZXkgdGFrZSBwcmVjZWRlbmNlKVxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV3UHJvcHMgbmV3IHByb3BzIHRvIG1lcmdlIGluXG4gICAqIEByZXR1cm4ge29iamVjdH0gYSBuZXcgb2JqZWN0IGNvbnRhaW5pbmcgYm90aCBzZXRzIG9mIHByb3BzIG1lcmdlZC5cbiAgICovXG4gIG1lcmdlUHJvcHM6IGZ1bmN0aW9uKG9sZFByb3BzLCBuZXdQcm9wcykge1xuICAgIHJldHVybiB0cmFuc2ZlckludG8oYXNzaWduKHt9LCBvbGRQcm9wcyksIG5ld1Byb3BzKTtcbiAgfSxcblxuICAvKipcbiAgICogQGxlbmRzIHtSZWFjdFByb3BUcmFuc2ZlcmVyLnByb3RvdHlwZX1cbiAgICovXG4gIE1peGluOiB7XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2ZlciBwcm9wcyBmcm9tIHRoaXMgY29tcG9uZW50IHRvIGEgdGFyZ2V0IGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIFByb3BzIHRoYXQgZG8gbm90IGhhdmUgYW4gZXhwbGljaXQgdHJhbnNmZXIgc3RyYXRlZ3kgd2lsbCBiZSB0cmFuc2ZlcnJlZFxuICAgICAqIG9ubHkgaWYgdGhlIHRhcmdldCBjb21wb25lbnQgZG9lcyBub3QgYWxyZWFkeSBoYXZlIHRoZSBwcm9wIHNldC5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgdXN1YWxseSB1c2VkIHRvIHBhc3MgZG93biBwcm9wcyB0byBhIHJldHVybmVkIHJvb3QgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQgQ29tcG9uZW50IHJlY2VpdmluZyB0aGUgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJuIHtSZWFjdEVsZW1lbnR9IFRoZSBzdXBwbGllZCBgY29tcG9uZW50YC5cbiAgICAgKiBAZmluYWxcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgdHJhbnNmZXJQcm9wc1RvOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBlbGVtZW50Ll9vd25lciA9PT0gdGhpcyxcbiAgICAgICAgJyVzOiBZb3UgY2FuXFwndCBjYWxsIHRyYW5zZmVyUHJvcHNUbygpIG9uIGEgY29tcG9uZW50IHRoYXQgeW91ICcgK1xuICAgICAgICAnZG9uXFwndCBvd24sICVzLiBUaGlzIHVzdWFsbHkgbWVhbnMgeW91IGFyZSBjYWxsaW5nICcgK1xuICAgICAgICAndHJhbnNmZXJQcm9wc1RvKCkgb24gYSBjb21wb25lbnQgcGFzc2VkIGluIGFzIHByb3BzIG9yIGNoaWxkcmVuLicsXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWUsXG4gICAgICAgIHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnID9cbiAgICAgICAgZWxlbWVudC50eXBlIDpcbiAgICAgICAgZWxlbWVudC50eXBlLmRpc3BsYXlOYW1lXG4gICAgICApIDogaW52YXJpYW50KGVsZW1lbnQuX293bmVyID09PSB0aGlzKSk7XG5cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgaWYgKCFkaWRXYXJuKSB7XG4gICAgICAgICAgZGlkV2FybiA9IHRydWU7XG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICd0cmFuc2ZlclByb3BzVG8gaXMgZGVwcmVjYXRlZC4gJyArXG4gICAgICAgICAgICAnU2VlIGh0dHA6Ly9mYi5tZS9yZWFjdC10cmFuc2ZlcnByb3BzdG8gZm9yIG1vcmUgaW5mb3JtYXRpb24uJ1xuICAgICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBCZWNhdXNlIGVsZW1lbnRzIGFyZSBpbW11dGFibGUgd2UgaGF2ZSB0byBtZXJnZSBpbnRvIHRoZSBleGlzdGluZ1xuICAgICAgLy8gcHJvcHMgb2JqZWN0IHJhdGhlciB0aGFuIGNsb25lIGl0LlxuICAgICAgdHJhbnNmZXJJbnRvKGVsZW1lbnQucHJvcHMsIHRoaXMucHJvcHMpO1xuXG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG5cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUcmFuc2ZlcmVyO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0UHJvcFRyYW5zZmVyZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxNDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgQ2FsbGJhY2tRdWV1ZSA9IHJlcXVpcmUoXCIuL0NhbGxiYWNrUXVldWVcIik7XG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIik7XG52YXIgUmVhY3RJbnB1dFNlbGVjdGlvbiA9IHJlcXVpcmUoXCIuL1JlYWN0SW5wdXRTZWxlY3Rpb25cIik7XG52YXIgUmVhY3RQdXRMaXN0ZW5lclF1ZXVlID0gcmVxdWlyZShcIi4vUmVhY3RQdXRMaXN0ZW5lclF1ZXVlXCIpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZShcIi4vVHJhbnNhY3Rpb25cIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xuXG4vKipcbiAqIEVuc3VyZXMgdGhhdCwgd2hlbiBwb3NzaWJsZSwgdGhlIHNlbGVjdGlvbiByYW5nZSAoY3VycmVudGx5IHNlbGVjdGVkIHRleHRcbiAqIGlucHV0KSBpcyBub3QgZGlzdHVyYmVkIGJ5IHBlcmZvcm1pbmcgdGhlIHRyYW5zYWN0aW9uLlxuICovXG52YXIgU0VMRUNUSU9OX1JFU1RPUkFUSU9OID0ge1xuICAvKipcbiAgICogQHJldHVybiB7U2VsZWN0aW9ufSBTZWxlY3Rpb24gaW5mb3JtYXRpb24uXG4gICAqL1xuICBpbml0aWFsaXplOiBSZWFjdElucHV0U2VsZWN0aW9uLmdldFNlbGVjdGlvbkluZm9ybWF0aW9uLFxuICAvKipcbiAgICogQHBhcmFtIHtTZWxlY3Rpb259IHNlbCBTZWxlY3Rpb24gaW5mb3JtYXRpb24gcmV0dXJuZWQgZnJvbSBgaW5pdGlhbGl6ZWAuXG4gICAqL1xuICBjbG9zZTogUmVhY3RJbnB1dFNlbGVjdGlvbi5yZXN0b3JlU2VsZWN0aW9uXG59O1xuXG4vKipcbiAqIFN1cHByZXNzZXMgZXZlbnRzIChibHVyL2ZvY3VzKSB0aGF0IGNvdWxkIGJlIGluYWR2ZXJ0ZW50bHkgZGlzcGF0Y2hlZCBkdWUgdG9cbiAqIGhpZ2ggbGV2ZWwgRE9NIG1hbmlwdWxhdGlvbnMgKGxpa2UgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgYSB0ZXh0IGlucHV0IGZyb20gdGhlXG4gKiBET00pLlxuICovXG52YXIgRVZFTlRfU1VQUFJFU1NJT04gPSB7XG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUaGUgZW5hYmxlZCBzdGF0dXMgb2YgYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgYmVmb3JlXG4gICAqIHRoZSByZWNvbmNpbGlhdGlvbi5cbiAgICovXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdXJyZW50bHlFbmFibGVkID0gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmlzRW5hYmxlZCgpO1xuICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5zZXRFbmFibGVkKGZhbHNlKTtcbiAgICByZXR1cm4gY3VycmVudGx5RW5hYmxlZDtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSBwcmV2aW91c2x5RW5hYmxlZCBFbmFibGVkIHN0YXR1cyBvZlxuICAgKiAgIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGJlZm9yZSB0aGUgcmVjb25jaWxpYXRpb24gb2NjdXJlZC4gYGNsb3NlYFxuICAgKiAgIHJlc3RvcmVzIHRoZSBwcmV2aW91cyB2YWx1ZS5cbiAgICovXG4gIGNsb3NlOiBmdW5jdGlvbihwcmV2aW91c2x5RW5hYmxlZCkge1xuICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5zZXRFbmFibGVkKHByZXZpb3VzbHlFbmFibGVkKTtcbiAgfVxufTtcblxuLyoqXG4gKiBQcm92aWRlcyBhIHF1ZXVlIGZvciBjb2xsZWN0aW5nIGBjb21wb25lbnREaWRNb3VudGAgYW5kXG4gKiBgY29tcG9uZW50RGlkVXBkYXRlYCBjYWxsYmFja3MgZHVyaW5nIHRoZSB0aGUgdHJhbnNhY3Rpb24uXG4gKi9cbnZhciBPTl9ET01fUkVBRFlfUVVFVUVJTkcgPSB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgaW50ZXJuYWwgYG9uRE9NUmVhZHlgIHF1ZXVlLlxuICAgKi9cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkucmVzZXQoKTtcbiAgfSxcblxuICAvKipcbiAgICogQWZ0ZXIgRE9NIGlzIGZsdXNoZWQsIGludm9rZSBhbGwgcmVnaXN0ZXJlZCBgb25ET01SZWFkeWAgY2FsbGJhY2tzLlxuICAgKi9cbiAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5Lm5vdGlmeUFsbCgpO1xuICB9XG59O1xuXG52YXIgUFVUX0xJU1RFTkVSX1FVRVVFSU5HID0ge1xuICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnB1dExpc3RlbmVyUXVldWUucmVzZXQoKTtcbiAgfSxcblxuICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlLnB1dExpc3RlbmVycygpO1xuICB9XG59O1xuXG4vKipcbiAqIEV4ZWN1dGVkIHdpdGhpbiB0aGUgc2NvcGUgb2YgdGhlIGBUcmFuc2FjdGlvbmAgaW5zdGFuY2UuIENvbnNpZGVyIHRoZXNlIGFzXG4gKiBiZWluZyBtZW1iZXIgbWV0aG9kcywgYnV0IHdpdGggYW4gaW1wbGllZCBvcmRlcmluZyB3aGlsZSBiZWluZyBpc29sYXRlZCBmcm9tXG4gKiBlYWNoIG90aGVyLlxuICovXG52YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbXG4gIFBVVF9MSVNURU5FUl9RVUVVRUlORyxcbiAgU0VMRUNUSU9OX1JFU1RPUkFUSU9OLFxuICBFVkVOVF9TVVBQUkVTU0lPTixcbiAgT05fRE9NX1JFQURZX1FVRVVFSU5HXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseTpcbiAqIC0gVGhlIG9yZGVyIHRoYXQgdGhlc2UgYXJlIGxpc3RlZCBpbiB0aGUgdHJhbnNhY3Rpb24gaXMgY3JpdGljYWw6XG4gKiAtIFN1cHByZXNzZXMgZXZlbnRzLlxuICogLSBSZXN0b3JlcyBzZWxlY3Rpb24gcmFuZ2UuXG4gKlxuICogRnV0dXJlOlxuICogLSBSZXN0b3JlIGRvY3VtZW50L292ZXJmbG93IHNjcm9sbCBwb3NpdGlvbnMgdGhhdCB3ZXJlIHVuaW50ZW50aW9uYWxseVxuICogICBtb2RpZmllZCB2aWEgRE9NIGluc2VydGlvbnMgYWJvdmUgdGhlIHRvcCB2aWV3cG9ydCBib3VuZGFyeS5cbiAqIC0gSW1wbGVtZW50L2ludGVncmF0ZSB3aXRoIGN1c3RvbWl6ZWQgY29uc3RyYWludCBiYXNlZCBsYXlvdXQgc3lzdGVtIGFuZCBrZWVwXG4gKiAgIHRyYWNrIG9mIHdoaWNoIGRpbWVuc2lvbnMgbXVzdCBiZSByZW1lYXN1cmVkLlxuICpcbiAqIEBjbGFzcyBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uXG4gKi9cbmZ1bmN0aW9uIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24oKSB7XG4gIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcbiAgLy8gT25seSBzZXJ2ZXItc2lkZSByZW5kZXJpbmcgcmVhbGx5IG5lZWRzIHRoaXMgb3B0aW9uIChzZWVcbiAgLy8gYFJlYWN0U2VydmVyUmVuZGVyaW5nYCksIGJ1dCBzZXJ2ZXItc2lkZSB1c2VzXG4gIC8vIGBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uYCBpbnN0ZWFkLiBUaGlzIG9wdGlvbiBpcyBoZXJlIHNvIHRoYXQgaXQnc1xuICAvLyBhY2Nlc3NpYmxlIGFuZCBkZWZhdWx0cyB0byBmYWxzZSB3aGVuIGBSZWFjdERPTUNvbXBvbmVudGAgYW5kXG4gIC8vIGBSZWFjdFRleHRDb21wb25lbnRgIGNoZWNrcyBpdCBpbiBgbW91bnRDb21wb25lbnRgLmBcbiAgdGhpcy5yZW5kZXJUb1N0YXRpY01hcmt1cCA9IGZhbHNlO1xuICB0aGlzLnJlYWN0TW91bnRSZWFkeSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKG51bGwpO1xuICB0aGlzLnB1dExpc3RlbmVyUXVldWUgPSBSZWFjdFB1dExpc3RlbmVyUXVldWUuZ2V0UG9vbGVkKCk7XG59XG5cbnZhciBNaXhpbiA9IHtcbiAgLyoqXG4gICAqIEBzZWUgVHJhbnNhY3Rpb25cbiAgICogQGFic3RyYWN0XG4gICAqIEBmaW5hbFxuICAgKiBAcmV0dXJuIHthcnJheTxvYmplY3Q+fSBMaXN0IG9mIG9wZXJhdGlvbiB3cmFwIHByb2NlZWR1cmVzLlxuICAgKiAgIFRPRE86IGNvbnZlcnQgdG8gYXJyYXk8VHJhbnNhY3Rpb25XcmFwcGVyPlxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBxdWV1ZSB0byBjb2xsZWN0IGBvbkRPTVJlYWR5YCBjYWxsYmFja3Mgd2l0aC5cbiAgICovXG4gIGdldFJlYWN0TW91bnRSZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhY3RNb3VudFJlYWR5O1xuICB9LFxuXG4gIGdldFB1dExpc3RlbmVyUXVldWU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnB1dExpc3RlbmVyUXVldWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGBQb29sZWRDbGFzc2AgbG9va3MgZm9yIHRoaXMsIGFuZCB3aWxsIGludm9rZSB0aGlzIGJlZm9yZSBhbGxvd2luZyB0aGlzXG4gICAqIGluc3RhbmNlIHRvIGJlIHJlc3VzZWQuXG4gICAqL1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5yZWFjdE1vdW50UmVhZHkpO1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5ID0gbnVsbDtcblxuICAgIFJlYWN0UHV0TGlzdGVuZXJRdWV1ZS5yZWxlYXNlKHRoaXMucHV0TGlzdGVuZXJRdWV1ZSk7XG4gICAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlID0gbnVsbDtcbiAgfVxufTtcblxuXG5hc3NpZ24oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5wcm90b3R5cGUsIFRyYW5zYWN0aW9uLk1peGluLCBNaXhpbik7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24uanNcbiAqKiBtb2R1bGUgaWQgPSAxNDdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiKTtcbnZhciBSZWFjdE1hcmt1cENoZWNrc3VtID0gcmVxdWlyZShcIi4vUmVhY3RNYXJrdXBDaGVja3N1bVwiKTtcbnZhciBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uID1cbiAgcmVxdWlyZShcIi4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvblwiKTtcblxudmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgSFRNTCBtYXJrdXBcbiAqL1xuZnVuY3Rpb24gcmVuZGVyVG9TdHJpbmcoZWxlbWVudCkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSxcbiAgICAncmVuZGVyVG9TdHJpbmcoKTogWW91IG11c3QgcGFzcyBhIHZhbGlkIFJlYWN0RWxlbWVudC4nXG4gICkgOiBpbnZhcmlhbnQoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSk7XG5cbiAgdmFyIHRyYW5zYWN0aW9uO1xuICB0cnkge1xuICAgIHZhciBpZCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0Um9vdElEKCk7XG4gICAgdHJhbnNhY3Rpb24gPSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLmdldFBvb2xlZChmYWxzZSk7XG5cbiAgICByZXR1cm4gdHJhbnNhY3Rpb24ucGVyZm9ybShmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoZWxlbWVudCwgbnVsbCk7XG4gICAgICB2YXIgbWFya3VwID0gY29tcG9uZW50SW5zdGFuY2UubW91bnRDb21wb25lbnQoaWQsIHRyYW5zYWN0aW9uLCAwKTtcbiAgICAgIHJldHVybiBSZWFjdE1hcmt1cENoZWNrc3VtLmFkZENoZWNrc3VtVG9NYXJrdXAobWFya3VwKTtcbiAgICB9LCBudWxsKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIEhUTUwgbWFya3VwLCB3aXRob3V0IHRoZSBleHRyYSBSZWFjdCBJRCBhbmQgY2hlY2tzdW1cbiAqIChmb3IgZ2VuZXJhdGluZyBzdGF0aWMgcGFnZXMpXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclRvU3RhdGljTWFya3VwKGVsZW1lbnQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCksXG4gICAgJ3JlbmRlclRvU3RhdGljTWFya3VwKCk6IFlvdSBtdXN0IHBhc3MgYSB2YWxpZCBSZWFjdEVsZW1lbnQuJ1xuICApIDogaW52YXJpYW50KFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkpO1xuXG4gIHZhciB0cmFuc2FjdGlvbjtcbiAgdHJ5IHtcbiAgICB2YXIgaWQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdFJvb3RJRCgpO1xuICAgIHRyYW5zYWN0aW9uID0gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5nZXRQb29sZWQodHJ1ZSk7XG5cbiAgICByZXR1cm4gdHJhbnNhY3Rpb24ucGVyZm9ybShmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoZWxlbWVudCwgbnVsbCk7XG4gICAgICByZXR1cm4gY29tcG9uZW50SW5zdGFuY2UubW91bnRDb21wb25lbnQoaWQsIHRyYW5zYWN0aW9uLCAwKTtcbiAgICB9LCBudWxsKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZW5kZXJUb1N0cmluZzogcmVuZGVyVG9TdHJpbmcsXG4gIHJlbmRlclRvU3RhdGljTWFya3VwOiByZW5kZXJUb1N0YXRpY01hcmt1cFxufTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9SZWFjdFNlcnZlclJlbmRlcmluZy5qc1xuICoqIG1vZHVsZSBpZCA9IDE0OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKTtcbnZhciBDYWxsYmFja1F1ZXVlID0gcmVxdWlyZShcIi4vQ2FsbGJhY2tRdWV1ZVwiKTtcbnZhciBSZWFjdFB1dExpc3RlbmVyUXVldWUgPSByZXF1aXJlKFwiLi9SZWFjdFB1dExpc3RlbmVyUXVldWVcIik7XG52YXIgVHJhbnNhY3Rpb24gPSByZXF1aXJlKFwiLi9UcmFuc2FjdGlvblwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG5cbi8qKlxuICogUHJvdmlkZXMgYSBgQ2FsbGJhY2tRdWV1ZWAgcXVldWUgZm9yIGNvbGxlY3RpbmcgYG9uRE9NUmVhZHlgIGNhbGxiYWNrc1xuICogZHVyaW5nIHRoZSBwZXJmb3JtaW5nIG9mIHRoZSB0cmFuc2FjdGlvbi5cbiAqL1xudmFyIE9OX0RPTV9SRUFEWV9RVUVVRUlORyA9IHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBpbnRlcm5hbCBgb25ET01SZWFkeWAgcXVldWUuXG4gICAqL1xuICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeS5yZXNldCgpO1xuICB9LFxuXG4gIGNsb3NlOiBlbXB0eUZ1bmN0aW9uXG59O1xuXG52YXIgUFVUX0xJU1RFTkVSX1FVRVVFSU5HID0ge1xuICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnB1dExpc3RlbmVyUXVldWUucmVzZXQoKTtcbiAgfSxcblxuICBjbG9zZTogZW1wdHlGdW5jdGlvblxufTtcblxuLyoqXG4gKiBFeGVjdXRlZCB3aXRoaW4gdGhlIHNjb3BlIG9mIHRoZSBgVHJhbnNhY3Rpb25gIGluc3RhbmNlLiBDb25zaWRlciB0aGVzZSBhc1xuICogYmVpbmcgbWVtYmVyIG1ldGhvZHMsIGJ1dCB3aXRoIGFuIGltcGxpZWQgb3JkZXJpbmcgd2hpbGUgYmVpbmcgaXNvbGF0ZWQgZnJvbVxuICogZWFjaCBvdGhlci5cbiAqL1xudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW1xuICBQVVRfTElTVEVORVJfUVVFVUVJTkcsXG4gIE9OX0RPTV9SRUFEWV9RVUVVRUlOR1xuXTtcblxuLyoqXG4gKiBAY2xhc3MgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvblxuICogQHBhcmFtIHtib29sZWFufSByZW5kZXJUb1N0YXRpY01hcmt1cFxuICovXG5mdW5jdGlvbiBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uKHJlbmRlclRvU3RhdGljTWFya3VwKSB7XG4gIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcbiAgdGhpcy5yZW5kZXJUb1N0YXRpY01hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwO1xuICB0aGlzLnJlYWN0TW91bnRSZWFkeSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKG51bGwpO1xuICB0aGlzLnB1dExpc3RlbmVyUXVldWUgPSBSZWFjdFB1dExpc3RlbmVyUXVldWUuZ2V0UG9vbGVkKCk7XG59XG5cbnZhciBNaXhpbiA9IHtcbiAgLyoqXG4gICAqIEBzZWUgVHJhbnNhY3Rpb25cbiAgICogQGFic3RyYWN0XG4gICAqIEBmaW5hbFxuICAgKiBAcmV0dXJuIHthcnJheX0gRW1wdHkgbGlzdCBvZiBvcGVyYXRpb24gd3JhcCBwcm9jZWVkdXJlcy5cbiAgICovXG4gIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgcXVldWUgdG8gY29sbGVjdCBgb25ET01SZWFkeWAgY2FsbGJhY2tzIHdpdGguXG4gICAqL1xuICBnZXRSZWFjdE1vdW50UmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWN0TW91bnRSZWFkeTtcbiAgfSxcblxuICBnZXRQdXRMaXN0ZW5lclF1ZXVlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wdXRMaXN0ZW5lclF1ZXVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciB0aGlzLCBhbmQgd2lsbCBpbnZva2UgdGhpcyBiZWZvcmUgYWxsb3dpbmcgdGhpc1xuICAgKiBpbnN0YW5jZSB0byBiZSByZXN1c2VkLlxuICAgKi9cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG4gICAgQ2FsbGJhY2tRdWV1ZS5yZWxlYXNlKHRoaXMucmVhY3RNb3VudFJlYWR5KTtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeSA9IG51bGw7XG5cbiAgICBSZWFjdFB1dExpc3RlbmVyUXVldWUucmVsZWFzZSh0aGlzLnB1dExpc3RlbmVyUXVldWUpO1xuICAgIHRoaXMucHV0TGlzdGVuZXJRdWV1ZSA9IG51bGw7XG4gIH1cbn07XG5cblxuYXNzaWduKFxuICBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLnByb3RvdHlwZSxcbiAgVHJhbnNhY3Rpb24uTWl4aW4sXG4gIE1peGluXG4pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbjtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9SZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLmpzXG4gKiogbW9kdWxlIGlkID0gMTQ5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU1ZHRE9NUHJvcGVydHlDb25maWdcbiAqL1xuXG4vKmpzbGludCBiaXR3aXNlOiB0cnVlKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpO1xuXG52YXIgTVVTVF9VU0VfQVRUUklCVVRFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLk1VU1RfVVNFX0FUVFJJQlVURTtcblxudmFyIFNWR0RPTVByb3BlcnR5Q29uZmlnID0ge1xuICBQcm9wZXJ0aWVzOiB7XG4gICAgY3g6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBjeTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBkeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZmlsbDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZpbGxPcGFjaXR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9udEZhbWlseTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZvbnRTaXplOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZng6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmeTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGdyYWRpZW50VHJhbnNmb3JtOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZ3JhZGllbnRVbml0czogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1hcmtlckVuZDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1hcmtlck1pZDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1hcmtlclN0YXJ0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgb2Zmc2V0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgb3BhY2l0eTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHBhdHRlcm5Db250ZW50VW5pdHM6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBwYXR0ZXJuVW5pdHM6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBwb2ludHM6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHJ4OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcnk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzcHJlYWRNZXRob2Q6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdG9wQ29sb3I6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdG9wT3BhY2l0eTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0cm9rZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0cm9rZURhc2hhcnJheTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0cm9rZUxpbmVjYXA6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdHJva2VPcGFjaXR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3Ryb2tlV2lkdGg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB0ZXh0QW5jaG9yOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgdHJhbnNmb3JtOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgdmVyc2lvbjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHZpZXdCb3g6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4MTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHgyOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHkxOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeTI6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB5OiBNVVNUX1VTRV9BVFRSSUJVVEVcbiAgfSxcbiAgRE9NQXR0cmlidXRlTmFtZXM6IHtcbiAgICBmaWxsT3BhY2l0eTogJ2ZpbGwtb3BhY2l0eScsXG4gICAgZm9udEZhbWlseTogJ2ZvbnQtZmFtaWx5JyxcbiAgICBmb250U2l6ZTogJ2ZvbnQtc2l6ZScsXG4gICAgZ3JhZGllbnRUcmFuc2Zvcm06ICdncmFkaWVudFRyYW5zZm9ybScsXG4gICAgZ3JhZGllbnRVbml0czogJ2dyYWRpZW50VW5pdHMnLFxuICAgIG1hcmtlckVuZDogJ21hcmtlci1lbmQnLFxuICAgIG1hcmtlck1pZDogJ21hcmtlci1taWQnLFxuICAgIG1hcmtlclN0YXJ0OiAnbWFya2VyLXN0YXJ0JyxcbiAgICBwYXR0ZXJuQ29udGVudFVuaXRzOiAncGF0dGVybkNvbnRlbnRVbml0cycsXG4gICAgcGF0dGVyblVuaXRzOiAncGF0dGVyblVuaXRzJyxcbiAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiAncHJlc2VydmVBc3BlY3RSYXRpbycsXG4gICAgc3ByZWFkTWV0aG9kOiAnc3ByZWFkTWV0aG9kJyxcbiAgICBzdG9wQ29sb3I6ICdzdG9wLWNvbG9yJyxcbiAgICBzdG9wT3BhY2l0eTogJ3N0b3Atb3BhY2l0eScsXG4gICAgc3Ryb2tlRGFzaGFycmF5OiAnc3Ryb2tlLWRhc2hhcnJheScsXG4gICAgc3Ryb2tlTGluZWNhcDogJ3N0cm9rZS1saW5lY2FwJyxcbiAgICBzdHJva2VPcGFjaXR5OiAnc3Ryb2tlLW9wYWNpdHknLFxuICAgIHN0cm9rZVdpZHRoOiAnc3Ryb2tlLXdpZHRoJyxcbiAgICB0ZXh0QW5jaG9yOiAndGV4dC1hbmNob3InLFxuICAgIHZpZXdCb3g6ICd2aWV3Qm94J1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNWR0RPTVByb3BlcnR5Q29uZmlnO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1NWR0RPTVByb3BlcnR5Q29uZmlnLmpzXG4gKiogbW9kdWxlIGlkID0gMTUwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU2VsZWN0RXZlbnRQbHVnaW5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoXCIuL0V2ZW50UHJvcGFnYXRvcnNcIik7XG52YXIgUmVhY3RJbnB1dFNlbGVjdGlvbiA9IHJlcXVpcmUoXCIuL1JlYWN0SW5wdXRTZWxlY3Rpb25cIik7XG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNFdmVudFwiKTtcblxudmFyIGdldEFjdGl2ZUVsZW1lbnQgPSByZXF1aXJlKFwiLi9nZXRBY3RpdmVFbGVtZW50XCIpO1xudmFyIGlzVGV4dElucHV0RWxlbWVudCA9IHJlcXVpcmUoXCIuL2lzVGV4dElucHV0RWxlbWVudFwiKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xudmFyIHNoYWxsb3dFcXVhbCA9IHJlcXVpcmUoXCIuL3NoYWxsb3dFcXVhbFwiKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgc2VsZWN0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblNlbGVjdDogbnVsbH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblNlbGVjdENhcHR1cmU6IG51bGx9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEJsdXIsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcENvbnRleHRNZW51LFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BGb2N1cyxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5RG93bixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZVVwLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BTZWxlY3Rpb25DaGFuZ2VcbiAgICBdXG4gIH1cbn07XG5cbnZhciBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbnZhciBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xudmFyIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xudmFyIG1vdXNlRG93biA9IGZhbHNlO1xuXG4vKipcbiAqIEdldCBhbiBvYmplY3Qgd2hpY2ggaXMgYSB1bmlxdWUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGN1cnJlbnQgc2VsZWN0aW9uLlxuICpcbiAqIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBub3QgYmUgY29uc2lzdGVudCBhY3Jvc3Mgbm9kZXMgb3IgYnJvd3NlcnMsIGJ1dFxuICogdHdvIGlkZW50aWNhbCBzZWxlY3Rpb25zIG9uIHRoZSBzYW1lIG5vZGUgd2lsbCByZXR1cm4gaWRlbnRpY2FsIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0U2VsZWN0aW9uKG5vZGUpIHtcbiAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gbm9kZSAmJlxuICAgICAgUmVhY3RJbnB1dFNlbGVjdGlvbi5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMobm9kZSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IG5vZGUuc2VsZWN0aW9uU3RhcnQsXG4gICAgICBlbmQ6IG5vZGUuc2VsZWN0aW9uRW5kXG4gICAgfTtcbiAgfSBlbHNlIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAgYW5jaG9yTm9kZTogc2VsZWN0aW9uLmFuY2hvck5vZGUsXG4gICAgICBhbmNob3JPZmZzZXQ6IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQsXG4gICAgICBmb2N1c05vZGU6IHNlbGVjdGlvbi5mb2N1c05vZGUsXG4gICAgICBmb2N1c09mZnNldDogc2VsZWN0aW9uLmZvY3VzT2Zmc2V0XG4gICAgfTtcbiAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24pIHtcbiAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICByZXR1cm4ge1xuICAgICAgcGFyZW50RWxlbWVudDogcmFuZ2UucGFyZW50RWxlbWVudCgpLFxuICAgICAgdGV4dDogcmFuZ2UudGV4dCxcbiAgICAgIHRvcDogcmFuZ2UuYm91bmRpbmdUb3AsXG4gICAgICBsZWZ0OiByYW5nZS5ib3VuZGluZ0xlZnRcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogUG9sbCBzZWxlY3Rpb24gdG8gc2VlIHdoZXRoZXIgaXQncyBjaGFuZ2VkLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7P1N5bnRoZXRpY0V2ZW50fVxuICovXG5mdW5jdGlvbiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCkge1xuICAvLyBFbnN1cmUgd2UgaGF2ZSB0aGUgcmlnaHQgZWxlbWVudCwgYW5kIHRoYXQgdGhlIHVzZXIgaXMgbm90IGRyYWdnaW5nIGFcbiAgLy8gc2VsZWN0aW9uICh0aGlzIG1hdGNoZXMgbmF0aXZlIGBzZWxlY3RgIGV2ZW50IGJlaGF2aW9yKS4gSW4gSFRNTDUsIHNlbGVjdFxuICAvLyBmaXJlcyBvbmx5IG9uIGlucHV0IGFuZCB0ZXh0YXJlYSB0aHVzIGlmIHRoZXJlJ3Mgbm8gZm9jdXNlZCBlbGVtZW50IHdlXG4gIC8vIHdvbid0IGRpc3BhdGNoLlxuICBpZiAobW91c2VEb3duIHx8XG4gICAgICBhY3RpdmVFbGVtZW50ID09IG51bGwgfHxcbiAgICAgIGFjdGl2ZUVsZW1lbnQgIT0gZ2V0QWN0aXZlRWxlbWVudCgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gT25seSBmaXJlIHdoZW4gc2VsZWN0aW9uIGhhcyBhY3R1YWxseSBjaGFuZ2VkLlxuICB2YXIgY3VycmVudFNlbGVjdGlvbiA9IGdldFNlbGVjdGlvbihhY3RpdmVFbGVtZW50KTtcbiAgaWYgKCFsYXN0U2VsZWN0aW9uIHx8ICFzaGFsbG93RXF1YWwobGFzdFNlbGVjdGlvbiwgY3VycmVudFNlbGVjdGlvbikpIHtcbiAgICBsYXN0U2VsZWN0aW9uID0gY3VycmVudFNlbGVjdGlvbjtcblxuICAgIHZhciBzeW50aGV0aWNFdmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChcbiAgICAgIGV2ZW50VHlwZXMuc2VsZWN0LFxuICAgICAgYWN0aXZlRWxlbWVudElELFxuICAgICAgbmF0aXZlRXZlbnRcbiAgICApO1xuXG4gICAgc3ludGhldGljRXZlbnQudHlwZSA9ICdzZWxlY3QnO1xuICAgIHN5bnRoZXRpY0V2ZW50LnRhcmdldCA9IGFjdGl2ZUVsZW1lbnQ7XG5cbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoc3ludGhldGljRXZlbnQpO1xuXG4gICAgcmV0dXJuIHN5bnRoZXRpY0V2ZW50O1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBwbHVnaW4gY3JlYXRlcyBhbiBgb25TZWxlY3RgIGV2ZW50IHRoYXQgbm9ybWFsaXplcyBzZWxlY3QgZXZlbnRzXG4gKiBhY3Jvc3MgZm9ybSBlbGVtZW50cy5cbiAqXG4gKiBTdXBwb3J0ZWQgZWxlbWVudHMgYXJlOlxuICogLSBpbnB1dCAoc2VlIGBpc1RleHRJbnB1dEVsZW1lbnRgKVxuICogLSB0ZXh0YXJlYVxuICogLSBjb250ZW50RWRpdGFibGVcbiAqXG4gKiBUaGlzIGRpZmZlcnMgZnJvbSBuYXRpdmUgYnJvd3NlciBpbXBsZW1lbnRhdGlvbnMgaW4gdGhlIGZvbGxvd2luZyB3YXlzOlxuICogLSBGaXJlcyBvbiBjb250ZW50RWRpdGFibGUgZmllbGRzIGFzIHdlbGwgYXMgaW5wdXRzLlxuICogLSBGaXJlcyBmb3IgY29sbGFwc2VkIHNlbGVjdGlvbi5cbiAqIC0gRmlyZXMgYWZ0ZXIgdXNlciBpbnB1dC5cbiAqL1xudmFyIFNlbGVjdEV2ZW50UGx1Z2luID0ge1xuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudCkge1xuXG4gICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgIC8vIFRyYWNrIHRoZSBpbnB1dCBub2RlIHRoYXQgaGFzIGZvY3VzLlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzOlxuICAgICAgICBpZiAoaXNUZXh0SW5wdXRFbGVtZW50KHRvcExldmVsVGFyZ2V0KSB8fFxuICAgICAgICAgICAgdG9wTGV2ZWxUYXJnZXQuY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScpIHtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50ID0gdG9wTGV2ZWxUYXJnZXQ7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudElEID0gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgICAgICAgICBsYXN0U2VsZWN0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BCbHVyOlxuICAgICAgICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcbiAgICAgICAgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAvLyBEb24ndCBmaXJlIHRoZSBldmVudCB3aGlsZSB0aGUgdXNlciBpcyBkcmFnZ2luZy4gVGhpcyBtYXRjaGVzIHRoZVxuICAgICAgLy8gc2VtYW50aWNzIG9mIHRoZSBuYXRpdmUgc2VsZWN0IGV2ZW50LlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bjpcbiAgICAgICAgbW91c2VEb3duID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29udGV4dE1lbnU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VVcDpcbiAgICAgICAgbW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCk7XG5cbiAgICAgIC8vIENocm9tZSBhbmQgSUUgZmlyZSBub24tc3RhbmRhcmQgZXZlbnQgd2hlbiBzZWxlY3Rpb24gaXMgY2hhbmdlZCAoYW5kXG4gICAgICAvLyBzb21ldGltZXMgd2hlbiBpdCBoYXNuJ3QpLlxuICAgICAgLy8gRmlyZWZveCBkb2Vzbid0IHN1cHBvcnQgc2VsZWN0aW9uY2hhbmdlLCBzbyBjaGVjayBzZWxlY3Rpb24gc3RhdHVzXG4gICAgICAvLyBhZnRlciBlYWNoIGtleSBlbnRyeS4gVGhlIHNlbGVjdGlvbiBjaGFuZ2VzIGFmdGVyIGtleWRvd24gYW5kIGJlZm9yZVxuICAgICAgLy8ga2V5dXAsIGJ1dCB3ZSBjaGVjayBvbiBrZXlkb3duIGFzIHdlbGwgaW4gdGhlIGNhc2Ugb2YgaG9sZGluZyBkb3duIGFcbiAgICAgIC8vIGtleSwgd2hlbiBtdWx0aXBsZSBrZXlkb3duIGV2ZW50cyBhcmUgZmlyZWQgYnV0IG9ubHkgb25lIGtleXVwIGlzLlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVVwOlxuICAgICAgICByZXR1cm4gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3RFdmVudFBsdWdpbjtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9TZWxlY3RFdmVudFBsdWdpbi5qc1xuICoqIG1vZHVsZSBpZCA9IDE1MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFNlcnZlclJlYWN0Um9vdEluZGV4XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFNpemUgb2YgdGhlIHJlYWN0Um9vdCBJRCBzcGFjZS4gV2UgZ2VuZXJhdGUgcmFuZG9tIG51bWJlcnMgZm9yIFJlYWN0IHJvb3RcbiAqIElEcyBhbmQgaWYgdGhlcmUncyBhIGNvbGxpc2lvbiB0aGUgZXZlbnRzIGFuZCBET00gdXBkYXRlIHN5c3RlbSB3aWxsXG4gKiBnZXQgY29uZnVzZWQuIEluIHRoZSBmdXR1cmUgd2UgbmVlZCBhIHdheSB0byBnZW5lcmF0ZSBHVUlEcyBidXQgZm9yXG4gKiBub3cgdGhpcyB3aWxsIHdvcmsgb24gYSBzbWFsbGVyIHNjYWxlLlxuICovXG52YXIgR0xPQkFMX01PVU5UX1BPSU5UX01BWCA9IE1hdGgucG93KDIsIDUzKTtcblxudmFyIFNlcnZlclJlYWN0Um9vdEluZGV4ID0ge1xuICBjcmVhdGVSZWFjdFJvb3RJbmRleDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogR0xPQkFMX01PVU5UX1BPSU5UX01BWCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2VydmVyUmVhY3RSb290SW5kZXg7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvU2VydmVyUmVhY3RSb290SW5kZXguanNcbiAqKiBtb2R1bGUgaWQgPSAxNTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTaW1wbGVFdmVudFBsdWdpblxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBFdmVudFBsdWdpblV0aWxzID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5VdGlsc1wiKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZShcIi4vRXZlbnRQcm9wYWdhdG9yc1wiKTtcbnZhciBTeW50aGV0aWNDbGlwYm9hcmRFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0NsaXBib2FyZEV2ZW50XCIpO1xudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIik7XG52YXIgU3ludGhldGljRm9jdXNFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0ZvY3VzRXZlbnRcIik7XG52YXIgU3ludGhldGljS2V5Ym9hcmRFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0tleWJvYXJkRXZlbnRcIik7XG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIik7XG52YXIgU3ludGhldGljRHJhZ0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRHJhZ0V2ZW50XCIpO1xudmFyIFN5bnRoZXRpY1RvdWNoRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNUb3VjaEV2ZW50XCIpO1xudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNVSUV2ZW50XCIpO1xudmFyIFN5bnRoZXRpY1doZWVsRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNXaGVlbEV2ZW50XCIpO1xuXG52YXIgZ2V0RXZlbnRDaGFyQ29kZSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50Q2hhckNvZGVcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIga2V5T2YgPSByZXF1aXJlKFwiLi9rZXlPZlwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgYmx1cjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25CbHVyOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQmx1ckNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgY2xpY2s6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ2xpY2s6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25DbGlja0NhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgY29udGV4dE1lbnU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ29udGV4dE1lbnU6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Db250ZXh0TWVudUNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgY29weToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Db3B5OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ29weUNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgY3V0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkN1dDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkN1dENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZG91YmxlQ2xpY2s6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRG91YmxlQ2xpY2s6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Eb3VibGVDbGlja0NhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZHJhZzoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ0NhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ0VuZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnRW5kOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ0VuZENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ0VudGVyOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdFbnRlcjogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdFbnRlckNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ0V4aXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJhZ0V4aXQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnRXhpdENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ0xlYXZlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdMZWF2ZTogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdMZWF2ZUNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ092ZXI6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJhZ092ZXI6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnT3ZlckNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ1N0YXJ0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdTdGFydDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdTdGFydENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZHJvcDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Ecm9wOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJvcENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZm9jdXM6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRm9jdXM6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Gb2N1c0NhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgaW5wdXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uSW5wdXQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25JbnB1dENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAga2V5RG93bjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25LZXlEb3duOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uS2V5RG93bkNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAga2V5UHJlc3M6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uS2V5UHJlc3M6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25LZXlQcmVzc0NhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAga2V5VXA6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uS2V5VXA6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25LZXlVcENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgbG9hZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Mb2FkOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTG9hZENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRXJyb3I6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25FcnJvckNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgLy8gTm90ZTogV2UgZG8gbm90IGFsbG93IGxpc3RlbmluZyB0byBtb3VzZU92ZXIgZXZlbnRzLiBJbnN0ZWFkLCB1c2UgdGhlXG4gIC8vIG9uTW91c2VFbnRlci9vbk1vdXNlTGVhdmUgY3JlYXRlZCBieSBgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luYC5cbiAgbW91c2VEb3duOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbk1vdXNlRG93bjogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbk1vdXNlRG93bkNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgbW91c2VNb3ZlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbk1vdXNlTW92ZTogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbk1vdXNlTW92ZUNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgbW91c2VPdXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uTW91c2VPdXQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Nb3VzZU91dENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgbW91c2VPdmVyOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbk1vdXNlT3ZlcjogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbk1vdXNlT3ZlckNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgbW91c2VVcDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Nb3VzZVVwOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTW91c2VVcENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgcGFzdGU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uUGFzdGU6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25QYXN0ZUNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgcmVzZXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uUmVzZXQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25SZXNldENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgc2Nyb2xsOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblNjcm9sbDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblNjcm9sbENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgc3VibWl0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblN1Ym1pdDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblN1Ym1pdENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgdG91Y2hDYW5jZWw6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uVG91Y2hDYW5jZWw6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Ub3VjaENhbmNlbENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgdG91Y2hFbmQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uVG91Y2hFbmQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Ub3VjaEVuZENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgdG91Y2hNb3ZlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblRvdWNoTW92ZTogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblRvdWNoTW92ZUNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgdG91Y2hTdGFydDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Ub3VjaFN0YXJ0OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uVG91Y2hTdGFydENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgd2hlZWw6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uV2hlZWw6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25XaGVlbENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfVxufTtcblxudmFyIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZyA9IHtcbiAgdG9wQmx1cjogICAgICAgIGV2ZW50VHlwZXMuYmx1cixcbiAgdG9wQ2xpY2s6ICAgICAgIGV2ZW50VHlwZXMuY2xpY2ssXG4gIHRvcENvbnRleHRNZW51OiBldmVudFR5cGVzLmNvbnRleHRNZW51LFxuICB0b3BDb3B5OiAgICAgICAgZXZlbnRUeXBlcy5jb3B5LFxuICB0b3BDdXQ6ICAgICAgICAgZXZlbnRUeXBlcy5jdXQsXG4gIHRvcERvdWJsZUNsaWNrOiBldmVudFR5cGVzLmRvdWJsZUNsaWNrLFxuICB0b3BEcmFnOiAgICAgICAgZXZlbnRUeXBlcy5kcmFnLFxuICB0b3BEcmFnRW5kOiAgICAgZXZlbnRUeXBlcy5kcmFnRW5kLFxuICB0b3BEcmFnRW50ZXI6ICAgZXZlbnRUeXBlcy5kcmFnRW50ZXIsXG4gIHRvcERyYWdFeGl0OiAgICBldmVudFR5cGVzLmRyYWdFeGl0LFxuICB0b3BEcmFnTGVhdmU6ICAgZXZlbnRUeXBlcy5kcmFnTGVhdmUsXG4gIHRvcERyYWdPdmVyOiAgICBldmVudFR5cGVzLmRyYWdPdmVyLFxuICB0b3BEcmFnU3RhcnQ6ICAgZXZlbnRUeXBlcy5kcmFnU3RhcnQsXG4gIHRvcERyb3A6ICAgICAgICBldmVudFR5cGVzLmRyb3AsXG4gIHRvcEVycm9yOiAgICAgICBldmVudFR5cGVzLmVycm9yLFxuICB0b3BGb2N1czogICAgICAgZXZlbnRUeXBlcy5mb2N1cyxcbiAgdG9wSW5wdXQ6ICAgICAgIGV2ZW50VHlwZXMuaW5wdXQsXG4gIHRvcEtleURvd246ICAgICBldmVudFR5cGVzLmtleURvd24sXG4gIHRvcEtleVByZXNzOiAgICBldmVudFR5cGVzLmtleVByZXNzLFxuICB0b3BLZXlVcDogICAgICAgZXZlbnRUeXBlcy5rZXlVcCxcbiAgdG9wTG9hZDogICAgICAgIGV2ZW50VHlwZXMubG9hZCxcbiAgdG9wTW91c2VEb3duOiAgIGV2ZW50VHlwZXMubW91c2VEb3duLFxuICB0b3BNb3VzZU1vdmU6ICAgZXZlbnRUeXBlcy5tb3VzZU1vdmUsXG4gIHRvcE1vdXNlT3V0OiAgICBldmVudFR5cGVzLm1vdXNlT3V0LFxuICB0b3BNb3VzZU92ZXI6ICAgZXZlbnRUeXBlcy5tb3VzZU92ZXIsXG4gIHRvcE1vdXNlVXA6ICAgICBldmVudFR5cGVzLm1vdXNlVXAsXG4gIHRvcFBhc3RlOiAgICAgICBldmVudFR5cGVzLnBhc3RlLFxuICB0b3BSZXNldDogICAgICAgZXZlbnRUeXBlcy5yZXNldCxcbiAgdG9wU2Nyb2xsOiAgICAgIGV2ZW50VHlwZXMuc2Nyb2xsLFxuICB0b3BTdWJtaXQ6ICAgICAgZXZlbnRUeXBlcy5zdWJtaXQsXG4gIHRvcFRvdWNoQ2FuY2VsOiBldmVudFR5cGVzLnRvdWNoQ2FuY2VsLFxuICB0b3BUb3VjaEVuZDogICAgZXZlbnRUeXBlcy50b3VjaEVuZCxcbiAgdG9wVG91Y2hNb3ZlOiAgIGV2ZW50VHlwZXMudG91Y2hNb3ZlLFxuICB0b3BUb3VjaFN0YXJ0OiAgZXZlbnRUeXBlcy50b3VjaFN0YXJ0LFxuICB0b3BXaGVlbDogICAgICAgZXZlbnRUeXBlcy53aGVlbFxufTtcblxuZm9yICh2YXIgdG9wTGV2ZWxUeXBlIGluIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZykge1xuICB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdG9wTGV2ZWxUeXBlXS5kZXBlbmRlbmNpZXMgPSBbdG9wTGV2ZWxUeXBlXTtcbn1cblxudmFyIFNpbXBsZUV2ZW50UGx1Z2luID0ge1xuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIFNhbWUgYXMgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24sIGV4Y2VwdCBjYW5jZWxzIHRoZSBldmVudCB3aGVuIHJldHVyblxuICAgKiB2YWx1ZSBpcyBmYWxzZS4gVGhpcyBiZWhhdmlvciB3aWxsIGJlIGRpc2FibGVkIGluIGEgZnV0dXJlIHJlbGVhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBFdmVudCB0byBiZSBkaXNwYXRjaGVkLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBBcHBsaWNhdGlvbi1sZXZlbCBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGRvbUlEIERPTSBJRCB0byBwYXNzIHRvIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIGV4ZWN1dGVEaXNwYXRjaDogZnVuY3Rpb24oZXZlbnQsIGxpc3RlbmVyLCBkb21JRCkge1xuICAgIHZhciByZXR1cm5WYWx1ZSA9IEV2ZW50UGx1Z2luVXRpbHMuZXhlY3V0ZURpc3BhdGNoKGV2ZW50LCBsaXN0ZW5lciwgZG9tSUQpO1xuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICB0eXBlb2YgcmV0dXJuVmFsdWUgIT09ICdib29sZWFuJyxcbiAgICAgICdSZXR1cm5pbmcgYGZhbHNlYCBmcm9tIGFuIGV2ZW50IGhhbmRsZXIgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSAnICtcbiAgICAgICdpZ25vcmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuIEluc3RlYWQsIG1hbnVhbGx5IGNhbGwgJyArXG4gICAgICAnZS5zdG9wUHJvcGFnYXRpb24oKSBvciBlLnByZXZlbnREZWZhdWx0KCksIGFzIGFwcHJvcHJpYXRlLidcbiAgICApIDogbnVsbCk7XG5cbiAgICBpZiAocmV0dXJuVmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgbmF0aXZlRXZlbnQpIHtcbiAgICB2YXIgZGlzcGF0Y2hDb25maWcgPSB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdG9wTGV2ZWxUeXBlXTtcbiAgICBpZiAoIWRpc3BhdGNoQ29uZmlnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIEV2ZW50Q29uc3RydWN0b3I7XG4gICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BJbnB1dDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BMb2FkOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEVycm9yOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFJlc2V0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFN1Ym1pdDpcbiAgICAgICAgLy8gSFRNTCBFdmVudHNcbiAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9pbmRleC5odG1sI2V2ZW50cy0wXG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3M6XG4gICAgICAgIC8vIEZpcmVGb3ggY3JlYXRlcyBhIGtleXByZXNzIGV2ZW50IGZvciBmdW5jdGlvbiBrZXlzIHRvby4gVGhpcyByZW1vdmVzXG4gICAgICAgIC8vIHRoZSB1bndhbnRlZCBrZXlwcmVzcyBldmVudHMuIEVudGVyIGlzIGhvd2V2ZXIgYm90aCBwcmludGFibGUgYW5kXG4gICAgICAgIC8vIG5vbi1wcmludGFibGUuIE9uZSB3b3VsZCBleHBlY3QgVGFiIHRvIGJlIGFzIHdlbGwgKGJ1dCBpdCBpc24ndCkuXG4gICAgICAgIGlmIChnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVVwOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljS2V5Ym9hcmRFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQmx1cjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BGb2N1czpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENsaWNrOlxuICAgICAgICAvLyBGaXJlZm94IGNyZWF0ZXMgYSBjbGljayBldmVudCBvbiByaWdodCBtb3VzZSBjbGlja3MuIFRoaXMgcmVtb3ZlcyB0aGVcbiAgICAgICAgLy8gdW53YW50ZWQgY2xpY2sgZXZlbnRzLlxuICAgICAgICBpZiAobmF0aXZlRXZlbnQuYnV0dG9uID09PSAyKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbnRleHRNZW51OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERvdWJsZUNsaWNrOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU1vdmU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VPdmVyOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXA6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFbmQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ0VudGVyOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFeGl0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdMZWF2ZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnT3ZlcjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnU3RhcnQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJvcDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hDYW5jZWw6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hFbmQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hNb3ZlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoU3RhcnQ6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNUb3VjaEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTY3JvbGw6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNVSUV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BXaGVlbDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1doZWVsRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvcHk6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ3V0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBhc3RlOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgRXZlbnRDb25zdHJ1Y3RvcixcbiAgICAgICdTaW1wbGVFdmVudFBsdWdpbjogVW5oYW5kbGVkIGV2ZW50IHR5cGUsIGAlc2AuJyxcbiAgICAgIHRvcExldmVsVHlwZVxuICAgICkgOiBpbnZhcmlhbnQoRXZlbnRDb25zdHJ1Y3RvcikpO1xuICAgIHZhciBldmVudCA9IEV2ZW50Q29uc3RydWN0b3IuZ2V0UG9vbGVkKFxuICAgICAgZGlzcGF0Y2hDb25maWcsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgbmF0aXZlRXZlbnRcbiAgICApO1xuICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2ltcGxlRXZlbnRQbHVnaW47XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvU2ltcGxlRXZlbnRQbHVnaW4uanNcbiAqKiBtb2R1bGUgaWQgPSAxNTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNDbGlwYm9hcmRFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9jbGlwYm9hcmQtYXBpcy9cbiAqL1xudmFyIENsaXBib2FyZEV2ZW50SW50ZXJmYWNlID0ge1xuICBjbGlwYm9hcmREYXRhOiBmdW5jdGlvbihldmVudCkge1xuICAgIHJldHVybiAoXG4gICAgICAnY2xpcGJvYXJkRGF0YScgaW4gZXZlbnQgP1xuICAgICAgICBldmVudC5jbGlwYm9hcmREYXRhIDpcbiAgICAgICAgd2luZG93LmNsaXBib2FyZERhdGFcbiAgICApO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNDbGlwYm9hcmRFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNDbGlwYm9hcmRFdmVudCwgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50O1xuXG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvU3ludGhldGljQ2xpcGJvYXJkRXZlbnQuanNcbiAqKiBtb2R1bGUgaWQgPSAxNTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNFdmVudFwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWNvbXBvc2l0aW9uZXZlbnRzXG4gKi9cbnZhciBDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlID0ge1xuICBkYXRhOiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50KFxuICBkaXNwYXRjaENvbmZpZyxcbiAgZGlzcGF0Y2hNYXJrZXIsXG4gIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhcbiAgU3ludGhldGljQ29tcG9zaXRpb25FdmVudCxcbiAgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZVxuKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50O1xuXG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvU3ludGhldGljQ29tcG9zaXRpb25FdmVudC5qc1xuICoqIG1vZHVsZSBpZCA9IDE1NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0RyYWdFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNNb3VzZUV2ZW50XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRHJhZ0V2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIERyYWdFdmVudEludGVyZmFjZSA9IHtcbiAgZGF0YVRyYW5zZmVyOiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNEcmFnRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNNb3VzZUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY01vdXNlRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0RyYWdFdmVudCwgRHJhZ0V2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNEcmFnRXZlbnQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvU3ludGhldGljRHJhZ0V2ZW50LmpzXG4gKiogbW9kdWxlIGlkID0gMTU2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljRm9jdXNFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNVSUV2ZW50XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRm9jdXNFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBGb2N1c0V2ZW50SW50ZXJmYWNlID0ge1xuICByZWxhdGVkVGFyZ2V0OiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNGb2N1c0V2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcbiAgU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xufVxuXG5TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNGb2N1c0V2ZW50LCBGb2N1c0V2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNGb2N1c0V2ZW50O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL1N5bnRoZXRpY0ZvY3VzRXZlbnQuanNcbiAqKiBtb2R1bGUgaWQgPSAxNTdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNJbnB1dEV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNFdmVudFwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMTMxMTA1XG4gKiAgICAgIC8jZXZlbnRzLWlucHV0ZXZlbnRzXG4gKi9cbnZhciBJbnB1dEV2ZW50SW50ZXJmYWNlID0ge1xuICBkYXRhOiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNJbnB1dEV2ZW50KFxuICBkaXNwYXRjaENvbmZpZyxcbiAgZGlzcGF0Y2hNYXJrZXIsXG4gIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhcbiAgU3ludGhldGljSW5wdXRFdmVudCxcbiAgSW5wdXRFdmVudEludGVyZmFjZVxuKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNJbnB1dEV2ZW50O1xuXG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvU3ludGhldGljSW5wdXRFdmVudC5qc1xuICoqIG1vZHVsZSBpZCA9IDE1OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0tleWJvYXJkRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcblxudmFyIGdldEV2ZW50Q2hhckNvZGUgPSByZXF1aXJlKFwiLi9nZXRFdmVudENoYXJDb2RlXCIpO1xudmFyIGdldEV2ZW50S2V5ID0gcmVxdWlyZShcIi4vZ2V0RXZlbnRLZXlcIik7XG52YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gcmVxdWlyZShcIi4vZ2V0RXZlbnRNb2RpZmllclN0YXRlXCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgS2V5Ym9hcmRFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBLZXlib2FyZEV2ZW50SW50ZXJmYWNlID0ge1xuICBrZXk6IGdldEV2ZW50S2V5LFxuICBsb2NhdGlvbjogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgcmVwZWF0OiBudWxsLFxuICBsb2NhbGU6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgLy8gTGVnYWN5IEludGVyZmFjZVxuICBjaGFyQ29kZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAvLyBgY2hhckNvZGVgIGlzIHRoZSByZXN1bHQgb2YgYSBLZXlQcmVzcyBldmVudCBhbmQgcmVwcmVzZW50cyB0aGUgdmFsdWUgb2ZcbiAgICAvLyB0aGUgYWN0dWFsIHByaW50YWJsZSBjaGFyYWN0ZXIuXG5cbiAgICAvLyBLZXlQcmVzcyBpcyBkZXByZWNhdGVkLCBidXQgaXRzIHJlcGxhY2VtZW50IGlzIG5vdCB5ZXQgZmluYWwgYW5kIG5vdFxuICAgIC8vIGltcGxlbWVudGVkIGluIGFueSBtYWpvciBicm93c2VyLiBPbmx5IEtleVByZXNzIGhhcyBjaGFyQ29kZS5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgICAgcmV0dXJuIGdldEV2ZW50Q2hhckNvZGUoZXZlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSxcbiAga2V5Q29kZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAvLyBga2V5Q29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleURvd24vVXAgZXZlbnQgYW5kIHJlcHJlc2VudHMgdGhlIHZhbHVlIG9mXG4gICAgLy8gcGh5c2ljYWwga2V5Ym9hcmQga2V5LlxuXG4gICAgLy8gVGhlIGFjdHVhbCBtZWFuaW5nIG9mIHRoZSB2YWx1ZSBkZXBlbmRzIG9uIHRoZSB1c2Vycycga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gd2hpY2ggY2Fubm90IGJlIGRldGVjdGVkLiBBc3N1bWluZyB0aGF0IGl0IGlzIGEgVVMga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gcHJvdmlkZXMgYSBzdXJwcmlzaW5nbHkgYWNjdXJhdGUgbWFwcGluZyBmb3IgVVMgYW5kIEV1cm9wZWFuIHVzZXJzLlxuICAgIC8vIER1ZSB0byB0aGlzLCBpdCBpcyBsZWZ0IHRvIHRoZSB1c2VyIHRvIGltcGxlbWVudCBhdCB0aGlzIHRpbWUuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIHdoaWNoOiBmdW5jdGlvbihldmVudCkge1xuICAgIC8vIGB3aGljaGAgaXMgYW4gYWxpYXMgZm9yIGVpdGhlciBga2V5Q29kZWAgb3IgYGNoYXJDb2RlYCBkZXBlbmRpbmcgb24gdGhlXG4gICAgLy8gdHlwZSBvZiB0aGUgZXZlbnQuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICAgIHJldHVybiBnZXRFdmVudENoYXJDb2RlKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0tleWJvYXJkRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0tleWJvYXJkRXZlbnQsIEtleWJvYXJkRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0tleWJvYXJkRXZlbnQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvU3ludGhldGljS2V5Ym9hcmRFdmVudC5qc1xuICoqIG1vZHVsZSBpZCA9IDE1OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY1RvdWNoRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcblxudmFyIGdldEV2ZW50TW9kaWZpZXJTdGF0ZSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFRvdWNoRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvdG91Y2gtZXZlbnRzL1xuICovXG52YXIgVG91Y2hFdmVudEludGVyZmFjZSA9IHtcbiAgdG91Y2hlczogbnVsbCxcbiAgdGFyZ2V0VG91Y2hlczogbnVsbCxcbiAgY2hhbmdlZFRvdWNoZXM6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljVG91Y2hFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljVG91Y2hFdmVudCwgVG91Y2hFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljVG91Y2hFdmVudDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9TeW50aGV0aWNUb3VjaEV2ZW50LmpzXG4gKiogbW9kdWxlIGlkID0gMTYwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljV2hlZWxFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNNb3VzZUV2ZW50XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgV2hlZWxFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBXaGVlbEV2ZW50SW50ZXJmYWNlID0ge1xuICBkZWx0YVg6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIChcbiAgICAgICdkZWx0YVgnIGluIGV2ZW50ID8gZXZlbnQuZGVsdGFYIDpcbiAgICAgIC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhWGAgZm9yIFdlYmtpdCBhbmQgbm9ybWFsaXplIChyaWdodCBpcyBwb3NpdGl2ZSkuXG4gICAgICAnd2hlZWxEZWx0YVgnIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFYIDogMFxuICAgICk7XG4gIH0sXG4gIGRlbHRhWTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgJ2RlbHRhWScgaW4gZXZlbnQgPyBldmVudC5kZWx0YVkgOlxuICAgICAgLy8gRmFsbGJhY2sgdG8gYHdoZWVsRGVsdGFZYCBmb3IgV2Via2l0IGFuZCBub3JtYWxpemUgKGRvd24gaXMgcG9zaXRpdmUpLlxuICAgICAgJ3doZWVsRGVsdGFZJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhWSA6XG4gICAgICAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YWAgZm9yIElFPDkgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG4gICAgICAnd2hlZWxEZWx0YScgaW4gZXZlbnQgPyAtZXZlbnQud2hlZWxEZWx0YSA6IDBcbiAgICApO1xuICB9LFxuICBkZWx0YVo6IG51bGwsXG5cbiAgLy8gQnJvd3NlcnMgd2l0aG91dCBcImRlbHRhTW9kZVwiIGlzIHJlcG9ydGluZyBpbiByYXcgd2hlZWwgZGVsdGEgd2hlcmUgb25lXG4gIC8vIG5vdGNoIG9uIHRoZSBzY3JvbGwgaXMgYWx3YXlzICsvLSAxMjAsIHJvdWdobHkgZXF1aXZhbGVudCB0byBwaXhlbHMuXG4gIC8vIEEgZ29vZCBhcHByb3hpbWF0aW9uIG9mIERPTV9ERUxUQV9MSU5FICgxKSBpcyA1JSBvZiB2aWV3cG9ydCBzaXplIG9yXG4gIC8vIH40MCBwaXhlbHMsIGZvciBET01fREVMVEFfU0NSRUVOICgyKSBpdCBpcyA4Ny41JSBvZiB2aWV3cG9ydCBzaXplLlxuICBkZWx0YU1vZGU6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY01vdXNlRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY1doZWVsRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNNb3VzZUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY01vdXNlRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY1doZWVsRXZlbnQsIFdoZWVsRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY1doZWVsRXZlbnQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvU3ludGhldGljV2hlZWxFdmVudC5qc1xuICoqIG1vZHVsZSBpZCA9IDE2MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGFkbGVyMzJcbiAqL1xuXG4vKiBqc2xpbnQgYml0d2lzZTp0cnVlICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgTU9EID0gNjU1MjE7XG5cbi8vIFRoaXMgaXMgYSBjbGVhbi1yb29tIGltcGxlbWVudGF0aW9uIG9mIGFkbGVyMzIgZGVzaWduZWQgZm9yIGRldGVjdGluZ1xuLy8gaWYgbWFya3VwIGlzIG5vdCB3aGF0IHdlIGV4cGVjdCBpdCB0byBiZS4gSXQgZG9lcyBub3QgbmVlZCB0byBiZVxuLy8gY3J5cHRvZ3JhcGhpY2FsbHkgc3Ryb25nLCBvbmx5IHJlYXNvbmFibHkgZ29vZCBhdCBkZXRlY3RpbmcgaWYgbWFya3VwXG4vLyBnZW5lcmF0ZWQgb24gdGhlIHNlcnZlciBpcyBkaWZmZXJlbnQgdGhhbiB0aGF0IG9uIHRoZSBjbGllbnQuXG5mdW5jdGlvbiBhZGxlcjMyKGRhdGEpIHtcbiAgdmFyIGEgPSAxO1xuICB2YXIgYiA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGEgPSAoYSArIGRhdGEuY2hhckNvZGVBdChpKSkgJSBNT0Q7XG4gICAgYiA9IChiICsgYSkgJSBNT0Q7XG4gIH1cbiAgcmV0dXJuIGEgfCAoYiA8PCAxNik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWRsZXIzMjtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9hZGxlcjMyLmpzXG4gKiogbW9kdWxlIGlkID0gMTYyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY2FtZWxpemVcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIF9oeXBoZW5QYXR0ZXJuID0gLy0oLikvZztcblxuLyoqXG4gKiBDYW1lbGNhc2VzIGEgaHlwaGVuYXRlZCBzdHJpbmcsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBjYW1lbGl6ZSgnYmFja2dyb3VuZC1jb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kQ29sb3JcIlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2FtZWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShfaHlwaGVuUGF0dGVybiwgZnVuY3Rpb24oXywgY2hhcmFjdGVyKSB7XG4gICAgcmV0dXJuIGNoYXJhY3Rlci50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGl6ZTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9jYW1lbGl6ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE2M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjYW1lbGl6ZVN0eWxlTmFtZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGNhbWVsaXplID0gcmVxdWlyZShcIi4vY2FtZWxpemVcIik7XG5cbnZhciBtc1BhdHRlcm4gPSAvXi1tcy0vO1xuXG4vKipcbiAqIENhbWVsY2FzZXMgYSBoeXBoZW5hdGVkIENTUyBwcm9wZXJ0eSBuYW1lLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gY2FtZWxpemVTdHlsZU5hbWUoJ2JhY2tncm91bmQtY29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZENvbG9yXCJcbiAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnLW1vei10cmFuc2l0aW9uJylcbiAqICAgPCBcIk1velRyYW5zaXRpb25cIlxuICogICA+IGNhbWVsaXplU3R5bGVOYW1lKCctbXMtdHJhbnNpdGlvbicpXG4gKiAgIDwgXCJtc1RyYW5zaXRpb25cIlxuICpcbiAqIEFzIEFuZGkgU21pdGggc3VnZ2VzdHNcbiAqIChodHRwOi8vd3d3LmFuZGlzbWl0aC5jb20vYmxvZy8yMDEyLzAyL21vZGVybml6ci1wcmVmaXhlZC8pLCBhbiBgLW1zYCBwcmVmaXhcbiAqIGlzIGNvbnZlcnRlZCB0byBsb3dlcmNhc2UgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNhbWVsaXplU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gY2FtZWxpemUoc3RyaW5nLnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhbWVsaXplU3R5bGVOYW1lO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL2NhbWVsaXplU3R5bGVOYW1lLmpzXG4gKiogbW9kdWxlIGlkID0gMTY0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY3JlYXRlQXJyYXlGcm9tXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciB0b0FycmF5ID0gcmVxdWlyZShcIi4vdG9BcnJheVwiKTtcblxuLyoqXG4gKiBQZXJmb3JtIGEgaGV1cmlzdGljIHRlc3QgdG8gZGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBcImFycmF5LWxpa2VcIi5cbiAqXG4gKiAgIEEgbW9uayBhc2tlZCBKb3NodSwgYSBaZW4gbWFzdGVyLCBcIkhhcyBhIGRvZyBCdWRkaGEgbmF0dXJlP1wiXG4gKiAgIEpvc2h1IHJlcGxpZWQ6IFwiTXUuXCJcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGRldGVybWluZXMgaWYgaXRzIGFyZ3VtZW50IGhhcyBcImFycmF5IG5hdHVyZVwiOiBpdCByZXR1cm5zXG4gKiB0cnVlIGlmIHRoZSBhcmd1bWVudCBpcyBhbiBhY3R1YWwgYXJyYXksIGFuIGBhcmd1bWVudHMnIG9iamVjdCwgb3IgYW5cbiAqIEhUTUxDb2xsZWN0aW9uIChlLmcuIG5vZGUuY2hpbGROb2RlcyBvciBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCkpLlxuICpcbiAqIEl0IHdpbGwgcmV0dXJuIGZhbHNlIGZvciBvdGhlciBhcnJheS1saWtlIG9iamVjdHMgbGlrZSBGaWxlbGlzdC5cbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaGFzQXJyYXlOYXR1cmUob2JqKSB7XG4gIHJldHVybiAoXG4gICAgLy8gbm90IG51bGwvZmFsc2VcbiAgICAhIW9iaiAmJlxuICAgIC8vIGFycmF5cyBhcmUgb2JqZWN0cywgTm9kZUxpc3RzIGFyZSBmdW5jdGlvbnMgaW4gU2FmYXJpXG4gICAgKHR5cGVvZiBvYmogPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nKSAmJlxuICAgIC8vIHF1YWNrcyBsaWtlIGFuIGFycmF5XG4gICAgKCdsZW5ndGgnIGluIG9iaikgJiZcbiAgICAvLyBub3Qgd2luZG93XG4gICAgISgnc2V0SW50ZXJ2YWwnIGluIG9iaikgJiZcbiAgICAvLyBubyBET00gbm9kZSBzaG91bGQgYmUgY29uc2lkZXJlZCBhbiBhcnJheS1saWtlXG4gICAgLy8gYSAnc2VsZWN0JyBlbGVtZW50IGhhcyAnbGVuZ3RoJyBhbmQgJ2l0ZW0nIHByb3BlcnRpZXMgb24gSUU4XG4gICAgKHR5cGVvZiBvYmoubm9kZVR5cGUgIT0gJ251bWJlcicpICYmXG4gICAgKFxuICAgICAgLy8gYSByZWFsIGFycmF5XG4gICAgICAoLy8gSFRNTENvbGxlY3Rpb24vTm9kZUxpc3RcbiAgICAgIChBcnJheS5pc0FycmF5KG9iaikgfHxcbiAgICAgIC8vIGFyZ3VtZW50c1xuICAgICAgKCdjYWxsZWUnIGluIG9iaikgfHwgJ2l0ZW0nIGluIG9iaikpXG4gICAgKVxuICApO1xufVxuXG4vKipcbiAqIEVuc3VyZSB0aGF0IHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheSBieSB3cmFwcGluZyBpdCBpbiBhbiBhcnJheSBpZiBpdCBpcyBub3QuXG4gKiBDcmVhdGVzIGEgY29weSBvZiB0aGUgYXJndW1lbnQgaWYgaXQgaXMgYWxyZWFkeSBhbiBhcnJheS5cbiAqXG4gKiBUaGlzIGlzIG1vc3RseSB1c2VmdWwgaWRpb21hdGljYWxseTpcbiAqXG4gKiAgIHZhciBjcmVhdGVBcnJheUZyb20gPSByZXF1aXJlKCdjcmVhdGVBcnJheUZyb20nKTtcbiAqXG4gKiAgIGZ1bmN0aW9uIHRha2VzT25lT3JNb3JlVGhpbmdzKHRoaW5ncykge1xuICogICAgIHRoaW5ncyA9IGNyZWF0ZUFycmF5RnJvbSh0aGluZ3MpO1xuICogICAgIC4uLlxuICogICB9XG4gKlxuICogVGhpcyBhbGxvd3MgeW91IHRvIHRyZWF0IGB0aGluZ3MnIGFzIGFuIGFycmF5LCBidXQgYWNjZXB0IHNjYWxhcnMgaW4gdGhlIEFQSS5cbiAqXG4gKiBJZiB5b3UgbmVlZCB0byBjb252ZXJ0IGFuIGFycmF5LWxpa2Ugb2JqZWN0LCBsaWtlIGBhcmd1bWVudHNgLCBpbnRvIGFuIGFycmF5XG4gKiB1c2UgdG9BcnJheSBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXJyYXlGcm9tKG9iaikge1xuICBpZiAoIWhhc0FycmF5TmF0dXJlKG9iaikpIHtcbiAgICByZXR1cm4gW29ial07XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5zbGljZSgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0b0FycmF5KG9iaik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVBcnJheUZyb207XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvY3JlYXRlQXJyYXlGcm9tLmpzXG4gKiogbW9kdWxlIGlkID0gMTY1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY3JlYXRlRnVsbFBhZ2VDb21wb25lbnRcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIERlZmVhdCBjaXJjdWxhciByZWZlcmVuY2VzIGJ5IHJlcXVpcmluZyB0aGlzIGRpcmVjdGx5LlxudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIENyZWF0ZSBhIGNvbXBvbmVudCB0aGF0IHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIHdoZW4gdW5tb3VudGVkLlxuICpcbiAqIENvbXBvbmVudHMgbGlrZSA8aHRtbD4gPGhlYWQ+IGFuZCA8Ym9keT4gY2FuJ3QgYmUgcmVtb3ZlZCBvciBhZGRlZFxuICogZWFzaWx5IGluIGEgY3Jvc3MtYnJvd3NlciB3YXksIGhvd2V2ZXIgaXQncyB2YWx1YWJsZSB0byBiZSBhYmxlIHRvXG4gKiB0YWtlIGFkdmFudGFnZSBvZiBSZWFjdCdzIHJlY29uY2lsaWF0aW9uIGZvciBzdHlsaW5nIGFuZCA8dGl0bGU+XG4gKiBtYW5hZ2VtZW50LiBTbyB3ZSBqdXN0IGRvY3VtZW50IGl0IGFuZCB0aHJvdyBpbiBkYW5nZXJvdXMgY2FzZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgdGFnIHRvIHdyYXBcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBjb252ZW5pZW5jZSBjb25zdHJ1Y3RvciBvZiBuZXcgY29tcG9uZW50XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50KHRhZykge1xuICB2YXIgZWxlbWVudEZhY3RvcnkgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSh0YWcpO1xuXG4gIHZhciBGdWxsUGFnZUNvbXBvbmVudCA9IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ1JlYWN0RnVsbFBhZ2VDb21wb25lbnQnICsgdGFnLFxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICclcyB0cmllZCB0byB1bm1vdW50LiBCZWNhdXNlIG9mIGNyb3NzLWJyb3dzZXIgcXVpcmtzIGl0IGlzICcgK1xuICAgICAgICAnaW1wb3NzaWJsZSB0byB1bm1vdW50IHNvbWUgdG9wLWxldmVsIGNvbXBvbmVudHMgKGVnIDxodG1sPiwgPGhlYWQ+LCAnICtcbiAgICAgICAgJ2FuZCA8Ym9keT4pIHJlbGlhYmx5IGFuZCBlZmZpY2llbnRseS4gVG8gZml4IHRoaXMsIGhhdmUgYSBzaW5nbGUgJyArXG4gICAgICAgICd0b3AtbGV2ZWwgY29tcG9uZW50IHRoYXQgbmV2ZXIgdW5tb3VudHMgcmVuZGVyIHRoZXNlIGVsZW1lbnRzLicsXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWVcbiAgICAgICkgOiBpbnZhcmlhbnQoZmFsc2UpKTtcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBlbGVtZW50RmFjdG9yeSh0aGlzLnByb3BzKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBGdWxsUGFnZUNvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9jcmVhdGVGdWxsUGFnZUNvbXBvbmVudC5qc1xuICoqIG1vZHVsZSBpZCA9IDE2NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlLCBzdWI6IHRydWUgKi9cblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBjcmVhdGVBcnJheUZyb20gPSByZXF1aXJlKFwiLi9jcmVhdGVBcnJheUZyb21cIik7XG52YXIgZ2V0TWFya3VwV3JhcCA9IHJlcXVpcmUoXCIuL2dldE1hcmt1cFdyYXBcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIER1bW15IGNvbnRhaW5lciB1c2VkIHRvIHJlbmRlciBhbGwgbWFya3VwLlxuICovXG52YXIgZHVtbXlOb2RlID1cbiAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuXG4vKipcbiAqIFBhdHRlcm4gdXNlZCBieSBgZ2V0Tm9kZU5hbWVgLlxuICovXG52YXIgbm9kZU5hbWVQYXR0ZXJuID0gL15cXHMqPChcXHcrKS87XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIGBub2RlTmFtZWAgb2YgdGhlIGZpcnN0IGVsZW1lbnQgaW4gYSBzdHJpbmcgb2YgbWFya3VwLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgU3RyaW5nIG9mIG1hcmt1cC5cbiAqIEByZXR1cm4gez9zdHJpbmd9IE5vZGUgbmFtZSBvZiB0aGUgc3VwcGxpZWQgbWFya3VwLlxuICovXG5mdW5jdGlvbiBnZXROb2RlTmFtZShtYXJrdXApIHtcbiAgdmFyIG5vZGVOYW1lTWF0Y2ggPSBtYXJrdXAubWF0Y2gobm9kZU5hbWVQYXR0ZXJuKTtcbiAgcmV0dXJuIG5vZGVOYW1lTWF0Y2ggJiYgbm9kZU5hbWVNYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbm9kZXMgcmVuZGVyZWQgZnJvbSB0aGUgc3VwcGxpZWQgbWFya3VwLiBUaGVcbiAqIG9wdGlvbmFsbHkgc3VwcGxpZWQgYGhhbmRsZVNjcmlwdGAgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIG9uY2UgZm9yIGVhY2hcbiAqIDxzY3JpcHQ+IGVsZW1lbnQgdGhhdCBpcyByZW5kZXJlZC4gSWYgbm8gYGhhbmRsZVNjcmlwdGAgZnVuY3Rpb24gaXMgc3VwcGxpZWQsXG4gKiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGlmIGFueSA8c2NyaXB0PiBlbGVtZW50cyBhcmUgcmVuZGVyZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBBIHN0cmluZyBvZiB2YWxpZCBIVE1MIG1hcmt1cC5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBoYW5kbGVTY3JpcHQgSW52b2tlZCBvbmNlIGZvciBlYWNoIHJlbmRlcmVkIDxzY3JpcHQ+LlxuICogQHJldHVybiB7YXJyYXk8RE9NRWxlbWVudHxET01UZXh0Tm9kZT59IEFuIGFycmF5IG9mIHJlbmRlcmVkIG5vZGVzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAobWFya3VwLCBoYW5kbGVTY3JpcHQpIHtcbiAgdmFyIG5vZGUgPSBkdW1teU5vZGU7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoISFkdW1teU5vZGUsICdjcmVhdGVOb2Rlc0Zyb21NYXJrdXAgZHVtbXkgbm90IGluaXRpYWxpemVkJykgOiBpbnZhcmlhbnQoISFkdW1teU5vZGUpKTtcbiAgdmFyIG5vZGVOYW1lID0gZ2V0Tm9kZU5hbWUobWFya3VwKTtcblxuICB2YXIgd3JhcCA9IG5vZGVOYW1lICYmIGdldE1hcmt1cFdyYXAobm9kZU5hbWUpO1xuICBpZiAod3JhcCkge1xuICAgIG5vZGUuaW5uZXJIVE1MID0gd3JhcFsxXSArIG1hcmt1cCArIHdyYXBbMl07XG5cbiAgICB2YXIgd3JhcERlcHRoID0gd3JhcFswXTtcbiAgICB3aGlsZSAod3JhcERlcHRoLS0pIHtcbiAgICAgIG5vZGUgPSBub2RlLmxhc3RDaGlsZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5pbm5lckhUTUwgPSBtYXJrdXA7XG4gIH1cblxuICB2YXIgc2NyaXB0cyA9IG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xuICBpZiAoc2NyaXB0cy5sZW5ndGgpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgaGFuZGxlU2NyaXB0LFxuICAgICAgJ2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCguLi4pOiBVbmV4cGVjdGVkIDxzY3JpcHQ+IGVsZW1lbnQgcmVuZGVyZWQuJ1xuICAgICkgOiBpbnZhcmlhbnQoaGFuZGxlU2NyaXB0KSk7XG4gICAgY3JlYXRlQXJyYXlGcm9tKHNjcmlwdHMpLmZvckVhY2goaGFuZGxlU2NyaXB0KTtcbiAgfVxuXG4gIHZhciBub2RlcyA9IGNyZWF0ZUFycmF5RnJvbShub2RlLmNoaWxkTm9kZXMpO1xuICB3aGlsZSAobm9kZS5sYXN0Q2hpbGQpIHtcbiAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUubGFzdENoaWxkKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL2NyZWF0ZU5vZGVzRnJvbU1hcmt1cC5qc1xuICoqIG1vZHVsZSBpZCA9IDE2N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGRhbmdlcm91c1N0eWxlVmFsdWVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBDU1NQcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL0NTU1Byb3BlcnR5XCIpO1xuXG52YXIgaXNVbml0bGVzc051bWJlciA9IENTU1Byb3BlcnR5LmlzVW5pdGxlc3NOdW1iZXI7XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIGludG8gdGhlIHByb3BlciBjc3Mgd3JpdGFibGUgdmFsdWUuIFRoZSBzdHlsZSBuYW1lIGBuYW1lYFxuICogc2hvdWxkIGJlIGxvZ2ljYWwgKG5vIGh5cGhlbnMpLCBhcyBzcGVjaWZpZWRcbiAqIGluIGBDU1NQcm9wZXJ0eS5pc1VuaXRsZXNzTnVtYmVyYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBDU1MgcHJvcGVydHkgbmFtZSBzdWNoIGFzIGB0b3BNYXJnaW5gLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBDU1MgcHJvcGVydHkgdmFsdWUgc3VjaCBhcyBgMTBweGAuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5vcm1hbGl6ZWQgc3R5bGUgdmFsdWUgd2l0aCBkaW1lbnNpb25zIGFwcGxpZWQuXG4gKi9cbmZ1bmN0aW9uIGRhbmdlcm91c1N0eWxlVmFsdWUobmFtZSwgdmFsdWUpIHtcbiAgLy8gTm90ZSB0aGF0IHdlJ3ZlIHJlbW92ZWQgZXNjYXBlVGV4dEZvckJyb3dzZXIoKSBjYWxscyBoZXJlIHNpbmNlIHRoZVxuICAvLyB3aG9sZSBzdHJpbmcgd2lsbCBiZSBlc2NhcGVkIHdoZW4gdGhlIGF0dHJpYnV0ZSBpcyBpbmplY3RlZCBpbnRvXG4gIC8vIHRoZSBtYXJrdXAuIElmIHlvdSBwcm92aWRlIHVuc2FmZSB1c2VyIGRhdGEgaGVyZSB0aGV5IGNhbiBpbmplY3RcbiAgLy8gYXJiaXRyYXJ5IENTUyB3aGljaCBtYXkgYmUgcHJvYmxlbWF0aWMgKEkgY291bGRuJ3QgcmVwcm8gdGhpcyk6XG4gIC8vIGh0dHBzOi8vd3d3Lm93YXNwLm9yZy9pbmRleC5waHAvWFNTX0ZpbHRlcl9FdmFzaW9uX0NoZWF0X1NoZWV0XG4gIC8vIGh0dHA6Ly93d3cudGhlc3Bhbm5lci5jby51ay8yMDA3LzExLzI2L3VsdGltYXRlLXhzcy1jc3MtaW5qZWN0aW9uL1xuICAvLyBUaGlzIGlzIG5vdCBhbiBYU1MgaG9sZSBidXQgaW5zdGVhZCBhIHBvdGVudGlhbCBDU1MgaW5qZWN0aW9uIGlzc3VlXG4gIC8vIHdoaWNoIGhhcyBsZWFkIHRvIGEgZ3JlYXRlciBkaXNjdXNzaW9uIGFib3V0IGhvdyB3ZSdyZSBnb2luZyB0b1xuICAvLyB0cnVzdCBVUkxzIG1vdmluZyBmb3J3YXJkLiBTZWUgIzIxMTU5MDFcblxuICB2YXIgaXNFbXB0eSA9IHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHwgdmFsdWUgPT09ICcnO1xuICBpZiAoaXNFbXB0eSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHZhciBpc05vbk51bWVyaWMgPSBpc05hTih2YWx1ZSk7XG4gIGlmIChpc05vbk51bWVyaWMgfHwgdmFsdWUgPT09IDAgfHxcbiAgICAgIGlzVW5pdGxlc3NOdW1iZXIuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgaXNVbml0bGVzc051bWJlcltuYW1lXSkge1xuICAgIHJldHVybiAnJyArIHZhbHVlOyAvLyBjYXN0IHRvIHN0cmluZ1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgfVxuICByZXR1cm4gdmFsdWUgKyAncHgnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRhbmdlcm91c1N0eWxlVmFsdWU7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvZGFuZ2Vyb3VzU3R5bGVWYWx1ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE2OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVtcHR5T2JqZWN0XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIE9iamVjdC5mcmVlemUoZW1wdHlPYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5T2JqZWN0O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL2VtcHR5T2JqZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMTY5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZmxhdHRlbkNoaWxkcmVuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdFRleHRDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdFRleHRDb21wb25lbnRcIik7XG5cbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZShcIi4vdHJhdmVyc2VBbGxDaGlsZHJlblwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0cmF2ZXJzZUNvbnRleHQgQ29udGV4dCBwYXNzZWQgdGhyb3VnaCB0cmF2ZXJzYWwuXG4gKiBAcGFyYW0gez9SZWFjdENvbXBvbmVudH0gY2hpbGQgUmVhY3QgY2hpbGQgY29tcG9uZW50LlxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lIFN0cmluZyBuYW1lIG9mIGtleSBwYXRoIHRvIGNoaWxkLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkLCBuYW1lKSB7XG4gIC8vIFdlIGZvdW5kIGEgY29tcG9uZW50IGluc3RhbmNlLlxuICB2YXIgcmVzdWx0ID0gdHJhdmVyc2VDb250ZXh0O1xuICB2YXIga2V5VW5pcXVlID0gIXJlc3VsdC5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAga2V5VW5pcXVlLFxuICAgICdmbGF0dGVuQ2hpbGRyZW4oLi4uKTogRW5jb3VudGVyZWQgdHdvIGNoaWxkcmVuIHdpdGggdGhlIHNhbWUga2V5LCAnICtcbiAgICAnYCVzYC4gQ2hpbGQga2V5cyBtdXN0IGJlIHVuaXF1ZTsgd2hlbiB0d28gY2hpbGRyZW4gc2hhcmUgYSBrZXksIG9ubHkgJyArXG4gICAgJ3RoZSBmaXJzdCBjaGlsZCB3aWxsIGJlIHVzZWQuJyxcbiAgICBuYW1lXG4gICkgOiBudWxsKTtcbiAgaWYgKGtleVVuaXF1ZSAmJiBjaGlsZCAhPSBudWxsKSB7XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgY2hpbGQ7XG4gICAgdmFyIG5vcm1hbGl6ZWRWYWx1ZTtcblxuICAgIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgbm9ybWFsaXplZFZhbHVlID0gUmVhY3RUZXh0Q29tcG9uZW50KGNoaWxkKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICBub3JtYWxpemVkVmFsdWUgPSBSZWFjdFRleHRDb21wb25lbnQoJycgKyBjaGlsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vcm1hbGl6ZWRWYWx1ZSA9IGNoaWxkO1xuICAgIH1cblxuICAgIHJlc3VsdFtuYW1lXSA9IG5vcm1hbGl6ZWRWYWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEZsYXR0ZW5zIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC4gQW55IG51bGxcbiAqIGNoaWxkcmVuIHdpbGwgbm90IGJlIGluY2x1ZGVkIGluIHRoZSByZXN1bHRpbmcgb2JqZWN0LlxuICogQHJldHVybiB7IW9iamVjdH0gZmxhdHRlbmVkIGNoaWxkcmVuIGtleWVkIGJ5IG5hbWUuXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW5DaGlsZHJlbihjaGlsZHJlbikge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICB2YXIgcmVzdWx0ID0ge307XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0LCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5DaGlsZHJlbjtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9mbGF0dGVuQ2hpbGRyZW4uanNcbiAqKiBtb2R1bGUgaWQgPSAxNzBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFdmVudEtleVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGdldEV2ZW50Q2hhckNvZGUgPSByZXF1aXJlKFwiLi9nZXRFdmVudENoYXJDb2RlXCIpO1xuXG4vKipcbiAqIE5vcm1hbGl6YXRpb24gb2YgZGVwcmVjYXRlZCBIVE1MNSBga2V5YCB2YWx1ZXNcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQjS2V5X25hbWVzXG4gKi9cbnZhciBub3JtYWxpemVLZXkgPSB7XG4gICdFc2MnOiAnRXNjYXBlJyxcbiAgJ1NwYWNlYmFyJzogJyAnLFxuICAnTGVmdCc6ICdBcnJvd0xlZnQnLFxuICAnVXAnOiAnQXJyb3dVcCcsXG4gICdSaWdodCc6ICdBcnJvd1JpZ2h0JyxcbiAgJ0Rvd24nOiAnQXJyb3dEb3duJyxcbiAgJ0RlbCc6ICdEZWxldGUnLFxuICAnV2luJzogJ09TJyxcbiAgJ01lbnUnOiAnQ29udGV4dE1lbnUnLFxuICAnQXBwcyc6ICdDb250ZXh0TWVudScsXG4gICdTY3JvbGwnOiAnU2Nyb2xsTG9jaycsXG4gICdNb3pQcmludGFibGVLZXknOiAnVW5pZGVudGlmaWVkJ1xufTtcblxuLyoqXG4gKiBUcmFuc2xhdGlvbiBmcm9tIGxlZ2FjeSBga2V5Q29kZWAgdG8gSFRNTDUgYGtleWBcbiAqIE9ubHkgc3BlY2lhbCBrZXlzIHN1cHBvcnRlZCwgYWxsIG90aGVycyBkZXBlbmQgb24ga2V5Ym9hcmQgbGF5b3V0IG9yIGJyb3dzZXJcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQjS2V5X25hbWVzXG4gKi9cbnZhciB0cmFuc2xhdGVUb0tleSA9IHtcbiAgODogJ0JhY2tzcGFjZScsXG4gIDk6ICdUYWInLFxuICAxMjogJ0NsZWFyJyxcbiAgMTM6ICdFbnRlcicsXG4gIDE2OiAnU2hpZnQnLFxuICAxNzogJ0NvbnRyb2wnLFxuICAxODogJ0FsdCcsXG4gIDE5OiAnUGF1c2UnLFxuICAyMDogJ0NhcHNMb2NrJyxcbiAgMjc6ICdFc2NhcGUnLFxuICAzMjogJyAnLFxuICAzMzogJ1BhZ2VVcCcsXG4gIDM0OiAnUGFnZURvd24nLFxuICAzNTogJ0VuZCcsXG4gIDM2OiAnSG9tZScsXG4gIDM3OiAnQXJyb3dMZWZ0JyxcbiAgMzg6ICdBcnJvd1VwJyxcbiAgMzk6ICdBcnJvd1JpZ2h0JyxcbiAgNDA6ICdBcnJvd0Rvd24nLFxuICA0NTogJ0luc2VydCcsXG4gIDQ2OiAnRGVsZXRlJyxcbiAgMTEyOiAnRjEnLCAxMTM6ICdGMicsIDExNDogJ0YzJywgMTE1OiAnRjQnLCAxMTY6ICdGNScsIDExNzogJ0Y2JyxcbiAgMTE4OiAnRjcnLCAxMTk6ICdGOCcsIDEyMDogJ0Y5JywgMTIxOiAnRjEwJywgMTIyOiAnRjExJywgMTIzOiAnRjEyJyxcbiAgMTQ0OiAnTnVtTG9jaycsXG4gIDE0NTogJ1Njcm9sbExvY2snLFxuICAyMjQ6ICdNZXRhJ1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5vcm1hbGl6ZWQgYGtleWAgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50S2V5KG5hdGl2ZUV2ZW50KSB7XG4gIGlmIChuYXRpdmVFdmVudC5rZXkpIHtcbiAgICAvLyBOb3JtYWxpemUgaW5jb25zaXN0ZW50IHZhbHVlcyByZXBvcnRlZCBieSBicm93c2VycyBkdWUgdG9cbiAgICAvLyBpbXBsZW1lbnRhdGlvbnMgb2YgYSB3b3JraW5nIGRyYWZ0IHNwZWNpZmljYXRpb24uXG5cbiAgICAvLyBGaXJlRm94IGltcGxlbWVudHMgYGtleWAgYnV0IHJldHVybnMgYE1velByaW50YWJsZUtleWAgZm9yIGFsbFxuICAgIC8vIHByaW50YWJsZSBjaGFyYWN0ZXJzIChub3JtYWxpemVkIHRvIGBVbmlkZW50aWZpZWRgKSwgaWdub3JlIGl0LlxuICAgIHZhciBrZXkgPSBub3JtYWxpemVLZXlbbmF0aXZlRXZlbnQua2V5XSB8fCBuYXRpdmVFdmVudC5rZXk7XG4gICAgaWYgKGtleSAhPT0gJ1VuaWRlbnRpZmllZCcpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG5cbiAgLy8gQnJvd3NlciBkb2VzIG5vdCBpbXBsZW1lbnQgYGtleWAsIHBvbHlmaWxsIGFzIG11Y2ggb2YgaXQgYXMgd2UgY2FuLlxuICBpZiAobmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgIHZhciBjaGFyQ29kZSA9IGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpO1xuXG4gICAgLy8gVGhlIGVudGVyLWtleSBpcyB0ZWNobmljYWxseSBib3RoIHByaW50YWJsZSBhbmQgbm9uLXByaW50YWJsZSBhbmQgY2FuXG4gICAgLy8gdGh1cyBiZSBjYXB0dXJlZCBieSBga2V5cHJlc3NgLCBubyBvdGhlciBub24tcHJpbnRhYmxlIGtleSBzaG91bGQuXG4gICAgcmV0dXJuIGNoYXJDb2RlID09PSAxMyA/ICdFbnRlcicgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcbiAgfVxuICBpZiAobmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleWRvd24nIHx8IG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXl1cCcpIHtcbiAgICAvLyBXaGlsZSB1c2VyIGtleWJvYXJkIGxheW91dCBkZXRlcm1pbmVzIHRoZSBhY3R1YWwgbWVhbmluZyBvZiBlYWNoXG4gICAgLy8gYGtleUNvZGVgIHZhbHVlLCBhbG1vc3QgYWxsIGZ1bmN0aW9uIGtleXMgaGF2ZSBhIHVuaXZlcnNhbCB2YWx1ZS5cbiAgICByZXR1cm4gdHJhbnNsYXRlVG9LZXlbbmF0aXZlRXZlbnQua2V5Q29kZV0gfHwgJ1VuaWRlbnRpZmllZCc7XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50S2V5O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL2dldEV2ZW50S2V5LmpzXG4gKiogbW9kdWxlIGlkID0gMTcxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEdpdmVuIGFueSBub2RlIHJldHVybiB0aGUgZmlyc3QgbGVhZiBub2RlIHdpdGhvdXQgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcmV0dXJuIHtET01FbGVtZW50fERPTVRleHROb2RlfVxuICovXG5mdW5jdGlvbiBnZXRMZWFmTm9kZShub2RlKSB7XG4gIHdoaWxlIChub2RlICYmIG5vZGUuZmlyc3RDaGlsZCkge1xuICAgIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogR2V0IHRoZSBuZXh0IHNpYmxpbmcgd2l0aGluIGEgY29udGFpbmVyLiBUaGlzIHdpbGwgd2FsayB1cCB0aGVcbiAqIERPTSBpZiBhIG5vZGUncyBzaWJsaW5ncyBoYXZlIGJlZW4gZXhoYXVzdGVkLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7P0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9XG4gKi9cbmZ1bmN0aW9uIGdldFNpYmxpbmdOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgb2JqZWN0IGRlc2NyaWJpbmcgdGhlIG5vZGVzIHdoaWNoIGNvbnRhaW4gY2hhcmFjdGVycyBhdCBvZmZzZXQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSByb290XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KHJvb3QsIG9mZnNldCkge1xuICB2YXIgbm9kZSA9IGdldExlYWZOb2RlKHJvb3QpO1xuICB2YXIgbm9kZVN0YXJ0ID0gMDtcbiAgdmFyIG5vZGVFbmQgPSAwO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMykge1xuICAgICAgbm9kZUVuZCA9IG5vZGVTdGFydCArIG5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuXG4gICAgICBpZiAobm9kZVN0YXJ0IDw9IG9mZnNldCAmJiBub2RlRW5kID49IG9mZnNldCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgLSBub2RlU3RhcnRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgbm9kZVN0YXJ0ID0gbm9kZUVuZDtcbiAgICB9XG5cbiAgICBub2RlID0gZ2V0TGVhZk5vZGUoZ2V0U2libGluZ05vZGUobm9kZSkpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9nZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0LmpzXG4gKiogbW9kdWxlIGlkID0gMTcyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaHlwaGVuYXRlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBfdXBwZXJjYXNlUGF0dGVybiA9IC8oW0EtWl0pL2c7XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKlxuICogRm9yIENTUyBzdHlsZSBuYW1lcywgdXNlIGBoeXBoZW5hdGVTdHlsZU5hbWVgIGluc3RlYWQgd2hpY2ggd29ya3MgcHJvcGVybHlcbiAqIHdpdGggYWxsIHZlbmRvciBwcmVmaXhlcywgaW5jbHVkaW5nIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShfdXBwZXJjYXNlUGF0dGVybiwgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL2h5cGhlbmF0ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE3M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGh5cGhlbmF0ZVN0eWxlTmFtZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGh5cGhlbmF0ZSA9IHJlcXVpcmUoXCIuL2h5cGhlbmF0ZVwiKTtcblxudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcblxuLyoqXG4gKiBIeXBoZW5hdGVzIGEgY2FtZWxjYXNlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnYmFja2dyb3VuZENvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnTW96VHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbW96LXRyYW5zaXRpb25cIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnbXNUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tcy10cmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBNb2Rlcm5penIgc3VnZ2VzdHMgKGh0dHA6Ly9tb2Rlcm5penIuY29tL2RvY3MvI3ByZWZpeGVkKSwgYW4gYG1zYCBwcmVmaXhcbiAqIGlzIGNvbnZlcnRlZCB0byBgLW1zLWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiBoeXBoZW5hdGUoc3RyaW5nKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoeXBoZW5hdGVTdHlsZU5hbWU7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvaHlwaGVuYXRlU3R5bGVOYW1lLmpzXG4gKiogbW9kdWxlIGlkID0gMTc0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNOb2RlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICByZXR1cm4gISEob2JqZWN0ICYmIChcbiAgICB0eXBlb2YgTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIE5vZGUgOlxuICAgICAgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmXG4gICAgICB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJ1xuICApKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvaXNOb2RlLmpzXG4gKiogbW9kdWxlIGlkID0gMTc1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNUZXh0Tm9kZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZShcIi4vaXNOb2RlXCIpO1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIHRleHQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Tm9kZShvYmplY3QpIHtcbiAgcmV0dXJuIGlzTm9kZShvYmplY3QpICYmIG9iamVjdC5ub2RlVHlwZSA9PSAzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dE5vZGU7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvaXNUZXh0Tm9kZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE3NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGpvaW5DbGFzc2VzXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvbWJpbmVzIG11bHRpcGxlIGNsYXNzTmFtZSBzdHJpbmdzIGludG8gb25lLlxuICogaHR0cDovL2pzcGVyZi5jb20vam9pbmNsYXNzZXMtYXJncy12cy1hcnJheVxuICpcbiAqIEBwYXJhbSB7Li4uP3N0cmluZ30gY2xhc3Nlc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBqb2luQ2xhc3NlcyhjbGFzc05hbWUvKiwgLi4uICovKSB7XG4gIGlmICghY2xhc3NOYW1lKSB7XG4gICAgY2xhc3NOYW1lID0gJyc7XG4gIH1cbiAgdmFyIG5leHRDbGFzcztcbiAgdmFyIGFyZ0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIGlmIChhcmdMZW5ndGggPiAxKSB7XG4gICAgZm9yICh2YXIgaWkgPSAxOyBpaSA8IGFyZ0xlbmd0aDsgaWkrKykge1xuICAgICAgbmV4dENsYXNzID0gYXJndW1lbnRzW2lpXTtcbiAgICAgIGlmIChuZXh0Q2xhc3MpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gKGNsYXNzTmFtZSA/IGNsYXNzTmFtZSArICcgJyA6ICcnKSArIG5leHRDbGFzcztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNsYXNzTmFtZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBqb2luQ2xhc3NlcztcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9qb2luQ2xhc3Nlcy5qc1xuICoqIG1vZHVsZSBpZCA9IDE3N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG9ubHlDaGlsZFxuICovXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBjaGlsZCBpbiBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4gYW5kIHZlcmlmaWVzIHRoYXQgdGhlcmVcbiAqIGlzIG9ubHkgb25lIGNoaWxkIGluIHRoZSBjb2xsZWN0aW9uLiBUaGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzXG4gKiBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgYSBzaW5nbGUgY2hpbGQgZ2V0cyBwYXNzZWQgd2l0aG91dCBhIHdyYXBwZXIsIGJ1dCB0aGVcbiAqIHB1cnBvc2Ugb2YgdGhpcyBoZWxwZXIgZnVuY3Rpb24gaXMgdG8gYWJzdHJhY3QgYXdheSB0aGUgcGFydGljdWxhciBzdHJ1Y3R1cmVcbiAqIG9mIGNoaWxkcmVuLlxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gY2hpbGRyZW4gQ2hpbGQgY29sbGVjdGlvbiBzdHJ1Y3R1cmUuXG4gKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gVGhlIGZpcnN0IGFuZCBvbmx5IGBSZWFjdENvbXBvbmVudGAgY29udGFpbmVkIGluIHRoZVxuICogc3RydWN0dXJlLlxuICovXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pLFxuICAgICdvbmx5Q2hpbGQgbXVzdCBiZSBwYXNzZWQgYSBjaGlsZHJlbiB3aXRoIGV4YWN0bHkgb25lIGNoaWxkLidcbiAgKSA6IGludmFyaWFudChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKSk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvbmx5Q2hpbGQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvb25seUNoaWxkLmpzXG4gKiogbW9kdWxlIGlkID0gMTc4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgcGVyZm9ybWFuY2VcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgcGVyZm9ybWFuY2U7XG5cbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgcGVyZm9ybWFuY2UgPVxuICAgIHdpbmRvdy5wZXJmb3JtYW5jZSB8fFxuICAgIHdpbmRvdy5tc1BlcmZvcm1hbmNlIHx8XG4gICAgd2luZG93LndlYmtpdFBlcmZvcm1hbmNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBlcmZvcm1hbmNlIHx8IHt9O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmVhY3QvbGliL3BlcmZvcm1hbmNlLmpzXG4gKiogbW9kdWxlIGlkID0gMTc5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgcGVyZm9ybWFuY2VOb3dcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIHBlcmZvcm1hbmNlID0gcmVxdWlyZShcIi4vcGVyZm9ybWFuY2VcIik7XG5cbi8qKlxuICogRGV0ZWN0IGlmIHdlIGNhbiB1c2UgYHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKWAgYW5kIGdyYWNlZnVsbHkgZmFsbGJhY2sgdG9cbiAqIGBEYXRlLm5vdygpYCBpZiBpdCBkb2Vzbid0IGV4aXN0LiBXZSBuZWVkIHRvIHN1cHBvcnQgRmlyZWZveCA8IDE1IGZvciBub3dcbiAqIGJlY2F1c2Ugb2YgRmFjZWJvb2sncyB0ZXN0aW5nIGluZnJhc3RydWN0dXJlLlxuICovXG5pZiAoIXBlcmZvcm1hbmNlIHx8ICFwZXJmb3JtYW5jZS5ub3cpIHtcbiAgcGVyZm9ybWFuY2UgPSBEYXRlO1xufVxuXG52YXIgcGVyZm9ybWFuY2VOb3cgPSBwZXJmb3JtYW5jZS5ub3cuYmluZChwZXJmb3JtYW5jZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGVyZm9ybWFuY2VOb3c7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvcGVyZm9ybWFuY2VOb3cuanNcbiAqKiBtb2R1bGUgaWQgPSAxODBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzaGFsbG93RXF1YWxcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBQZXJmb3JtcyBlcXVhbGl0eSBieSBpdGVyYXRpbmcgdGhyb3VnaCBrZXlzIG9uIGFuIG9iamVjdCBhbmQgcmV0dXJuaW5nXG4gKiBmYWxzZSB3aGVuIGFueSBrZXkgaGFzIHZhbHVlcyB3aGljaCBhcmUgbm90IHN0cmljdGx5IGVxdWFsIGJldHdlZW5cbiAqIG9iakEgYW5kIG9iakIuIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSB2YWx1ZXMgb2YgYWxsIGtleXMgYXJlIHN0cmljdGx5IGVxdWFsLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGtleTtcbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yIChrZXkgaW4gb2JqQSkge1xuICAgIGlmIChvYmpBLmhhc093blByb3BlcnR5KGtleSkgJiZcbiAgICAgICAgKCFvYmpCLmhhc093blByb3BlcnR5KGtleSkgfHwgb2JqQVtrZXldICE9PSBvYmpCW2tleV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIFRlc3QgZm9yIEIncyBrZXlzIG1pc3NpbmcgZnJvbSBBLlxuICBmb3IgKGtleSBpbiBvYmpCKSB7XG4gICAgaWYgKG9iakIuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhb2JqQS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dFcXVhbDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3JlYWN0L2xpYi9zaGFsbG93RXF1YWwuanNcbiAqKiBtb2R1bGUgaWQgPSAxODFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgdG9BcnJheVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIENvbnZlcnQgYXJyYXktbGlrZSBvYmplY3RzIHRvIGFycmF5cy5cbiAqXG4gKiBUaGlzIEFQSSBhc3N1bWVzIHRoZSBjYWxsZXIga25vd3MgdGhlIGNvbnRlbnRzIG9mIHRoZSBkYXRhIHR5cGUuIEZvciBsZXNzXG4gKiB3ZWxsIGRlZmluZWQgaW5wdXRzIHVzZSBjcmVhdGVBcnJheUZyb20uXG4gKlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb258ZmlsZWxpc3R9IG9ialxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkob2JqKSB7XG4gIHZhciBsZW5ndGggPSBvYmoubGVuZ3RoO1xuXG4gIC8vIFNvbWUgYnJvd3NlIGJ1aWx0aW4gb2JqZWN0cyBjYW4gcmVwb3J0IHR5cGVvZiAnZnVuY3Rpb24nIChlLmcuIE5vZGVMaXN0IGluXG4gIC8vIG9sZCB2ZXJzaW9ucyBvZiBTYWZhcmkpLlxuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICFBcnJheS5pc0FycmF5KG9iaikgJiZcbiAgICAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJyksXG4gICAgJ3RvQXJyYXk6IEFycmF5LWxpa2Ugb2JqZWN0IGV4cGVjdGVkJ1xuICApIDogaW52YXJpYW50KCFBcnJheS5pc0FycmF5KG9iaikgJiZcbiAgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpKSk7XG5cbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICB0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJyxcbiAgICAndG9BcnJheTogT2JqZWN0IG5lZWRzIGEgbGVuZ3RoIHByb3BlcnR5J1xuICApIDogaW52YXJpYW50KHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInKSk7XG5cbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBsZW5ndGggPT09IDAgfHxcbiAgICAobGVuZ3RoIC0gMSkgaW4gb2JqLFxuICAgICd0b0FycmF5OiBPYmplY3Qgc2hvdWxkIGhhdmUga2V5cyBmb3IgaW5kaWNlcydcbiAgKSA6IGludmFyaWFudChsZW5ndGggPT09IDAgfHxcbiAgKGxlbmd0aCAtIDEpIGluIG9iaikpO1xuXG4gIC8vIE9sZCBJRSBkb2Vzbid0IGdpdmUgY29sbGVjdGlvbnMgYWNjZXNzIHRvIGhhc093blByb3BlcnR5LiBBc3N1bWUgaW5wdXRzXG4gIC8vIHdpdGhvdXQgbWV0aG9kIHdpbGwgdGhyb3cgZHVyaW5nIHRoZSBzbGljZSBjYWxsIGFuZCBza2lwIHN0cmFpZ2h0IHRvIHRoZVxuICAvLyBmYWxsYmFjay5cbiAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwob2JqKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJRSA8IDkgZG9lcyBub3Qgc3VwcG9ydCBBcnJheSNzbGljZSBvbiBjb2xsZWN0aW9ucyBvYmplY3RzXG4gICAgfVxuICB9XG5cbiAgLy8gRmFsbCBiYWNrIHRvIGNvcHlpbmcga2V5IGJ5IGtleS4gVGhpcyBhc3N1bWVzIGFsbCBrZXlzIGhhdmUgYSB2YWx1ZSxcbiAgLy8gc28gd2lsbCBub3QgcHJlc2VydmUgc3BhcnNlbHkgcG9wdWxhdGVkIGlucHV0cy5cbiAgdmFyIHJldCA9IEFycmF5KGxlbmd0aCk7XG4gIGZvciAodmFyIGlpID0gMDsgaWkgPCBsZW5ndGg7IGlpKyspIHtcbiAgICByZXRbaWldID0gb2JqW2lpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvQXJyYXk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yZWFjdC9saWIvdG9BcnJheS5qc1xuICoqIG1vZHVsZSBpZCA9IDE4MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLypcclxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuKi9cclxudmFyIHN0eWxlc0luRG9tID0ge30sXHJcblx0bWVtb2l6ZSA9IGZ1bmN0aW9uKGZuKSB7XHJcblx0XHR2YXIgbWVtbztcclxuXHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblx0XHRcdHJldHVybiBtZW1vO1xyXG5cdFx0fTtcclxuXHR9LFxyXG5cdGlzSUU5ID0gbWVtb2l6ZShmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiAvbXNpZSA5XFxiLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpO1xyXG5cdH0pLFxyXG5cdGdldEhlYWRFbGVtZW50ID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XHJcblx0XHRyZXR1cm4gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XHJcblx0fSksXHJcblx0c2luZ2xldG9uRWxlbWVudCA9IG51bGwsXHJcblx0c2luZ2xldG9uQ291bnRlciA9IDA7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcclxuXHRpZih0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcclxuXHRcdGlmKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xyXG5cdH1cclxuXHJcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxyXG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcclxuXHRpZiAodHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uID09PSBcInVuZGVmaW5lZFwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzSUU5KCk7XHJcblxyXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCk7XHJcblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcclxuXHJcblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XHJcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcclxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xyXG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XHJcblx0XHR9XHJcblx0XHRpZihuZXdMaXN0KSB7XHJcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCk7XHJcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XHJcblx0XHR9XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcclxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xyXG5cdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKylcclxuXHRcdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKCk7XHJcblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucykge1xyXG5cdGZvcih2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XHJcblx0XHRpZihkb21TdHlsZSkge1xyXG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XHJcblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xyXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QpIHtcclxuXHR2YXIgc3R5bGVzID0gW107XHJcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xyXG5cdGZvcih2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XHJcblx0XHR2YXIgaWQgPSBpdGVtWzBdO1xyXG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XHJcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xyXG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XHJcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XHJcblx0XHRpZighbmV3U3R5bGVzW2lkXSlcclxuXHRcdFx0c3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcclxuXHRcdGVsc2VcclxuXHRcdFx0bmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xyXG5cdH1cclxuXHRyZXR1cm4gc3R5bGVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQoKSB7XHJcblx0dmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcclxuXHR2YXIgaGVhZCA9IGdldEhlYWRFbGVtZW50KCk7XHJcblx0c3R5bGVFbGVtZW50LnR5cGUgPSBcInRleHQvY3NzXCI7XHJcblx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdHJldHVybiBzdHlsZUVsZW1lbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xyXG5cdHZhciBzdHlsZUVsZW1lbnQsIHVwZGF0ZSwgcmVtb3ZlO1xyXG5cclxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcclxuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xyXG5cdFx0c3R5bGVFbGVtZW50ID0gc2luZ2xldG9uRWxlbWVudCB8fCAoc2luZ2xldG9uRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudCgpKTtcclxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQsIHN0eWxlSW5kZXgsIGZhbHNlKTtcclxuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQsIHN0eWxlSW5kZXgsIHRydWUpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRzdHlsZUVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKTtcclxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpO1xyXG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdHVwZGF0ZShvYmopO1xyXG5cclxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XHJcblx0XHRpZihuZXdPYmopIHtcclxuXHRcdFx0aWYobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKVxyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZW1vdmUoKTtcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXBsYWNlVGV4dChzb3VyY2UsIGlkLCByZXBsYWNlbWVudCkge1xyXG5cdHZhciBib3VuZGFyaWVzID0gW1wiLyoqID4+XCIgKyBpZCArIFwiICoqL1wiLCBcIi8qKiBcIiArIGlkICsgXCI8PCAqKi9cIl07XHJcblx0dmFyIHN0YXJ0ID0gc291cmNlLmxhc3RJbmRleE9mKGJvdW5kYXJpZXNbMF0pO1xyXG5cdHZhciB3cmFwcGVkUmVwbGFjZW1lbnQgPSByZXBsYWNlbWVudFxyXG5cdFx0PyAoYm91bmRhcmllc1swXSArIHJlcGxhY2VtZW50ICsgYm91bmRhcmllc1sxXSlcclxuXHRcdDogXCJcIjtcclxuXHRpZiAoc291cmNlLmxhc3RJbmRleE9mKGJvdW5kYXJpZXNbMF0pID49IDApIHtcclxuXHRcdHZhciBlbmQgPSBzb3VyY2UubGFzdEluZGV4T2YoYm91bmRhcmllc1sxXSkgKyBib3VuZGFyaWVzWzFdLmxlbmd0aDtcclxuXHRcdHJldHVybiBzb3VyY2Uuc2xpY2UoMCwgc3RhcnQpICsgd3JhcHBlZFJlcGxhY2VtZW50ICsgc291cmNlLnNsaWNlKGVuZCk7XHJcblx0fSBlbHNlIHtcclxuXHRcdHJldHVybiBzb3VyY2UgKyB3cmFwcGVkUmVwbGFjZW1lbnQ7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XHJcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xyXG5cclxuXHRpZihzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xyXG5cdFx0c3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQsIGluZGV4LCBjc3MpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XHJcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlRWxlbWVudC5jaGlsZE5vZGVzO1xyXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xyXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGNzc05vZGUpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZUVsZW1lbnQsIG9iaikge1xyXG5cdHZhciBjc3MgPSBvYmouY3NzO1xyXG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcclxuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcclxuXHJcblx0aWYoc291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpICsgXCIgKi9cIjtcclxuXHRcdFx0Y3NzID0gXCJAaW1wb3J0IHVybChcXFwiZGF0YTp0ZXh0L2NzcztiYXNlNjQsXCIgKyBidG9hKGNzcykgKyBcIlxcXCIpXCI7XHJcblx0XHR9IGNhdGNoKGUpIHt9XHJcblx0fVxyXG5cclxuXHRpZihtZWRpYSkge1xyXG5cdFx0c3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxyXG5cdH1cclxuXHJcblx0aWYoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcclxuXHRcdHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XHJcblx0fSBlbHNlIHtcclxuXHRcdHdoaWxlKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XHJcblx0XHR9XHJcblx0XHRzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XHJcblx0fVxyXG59XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcbiAqKiBtb2R1bGUgaWQgPSAxODNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEvVXNlcnMvdG9yZ2Vpci9Db2RlL2ZhbHVuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS9Vc2Vycy90b3JnZWlyL0NvZGUvZmFsdW4vbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1sb2FkZXIvaW5kZXguanM/YnJvd3NlcnM9bGFzdCAyIHZlcnNpb24hL1VzZXJzL3RvcmdlaXIvQ29kZS9mYWx1bi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvaW5kZXguanM/c3RyaWN0TWF0aCZjbGVhbmNzcyEvVXNlcnMvdG9yZ2Vpci9Db2RlL2ZhbHVuL2xlc3MvaW5kZXgubGVzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhL1VzZXJzL3RvcmdlaXIvQ29kZS9mYWx1bi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEvVXNlcnMvdG9yZ2Vpci9Db2RlL2ZhbHVuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS9Vc2Vycy90b3JnZWlyL0NvZGUvZmFsdW4vbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1sb2FkZXIvaW5kZXguanM/YnJvd3NlcnM9bGFzdCAyIHZlcnNpb24hL1VzZXJzL3RvcmdlaXIvQ29kZS9mYWx1bi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvaW5kZXguanM/c3RyaWN0TWF0aCZjbGVhbmNzcyEvVXNlcnMvdG9yZ2Vpci9Db2RlL2ZhbHVuL2xlc3MvaW5kZXgubGVzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS9Vc2Vycy90b3JnZWlyL0NvZGUvZmFsdW4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhL1VzZXJzL3RvcmdlaXIvQ29kZS9mYWx1bi9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWxvYWRlci9pbmRleC5qcz9icm93c2Vycz1sYXN0IDIgdmVyc2lvbiEvVXNlcnMvdG9yZ2Vpci9Db2RlL2ZhbHVuL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9pbmRleC5qcz9zdHJpY3RNYXRoJmNsZWFuY3NzIS9Vc2Vycy90b3JnZWlyL0NvZGUvZmFsdW4vbGVzcy9pbmRleC5sZXNzXCIpO1xuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2xlc3MvaW5kZXgubGVzc1xuICoqIG1vZHVsZSBpZCA9IDE4NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibnVsbFxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqICh3ZWJwYWNrKS1kZXYtc2VydmVyL2NsaWVudD9odHRwOi8wLjAuMC4wOjMwMDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3NvY2tldC5pb1wiKTtcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAod2VicGFjayktZGV2LXNlcnZlci9jbGllbnQvd2ViX21vZHVsZXMvc29ja2V0LmlvL2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gMTg2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKiEgU29ja2V0LklPLmpzIGJ1aWxkOjAuOS4xMCwgZGV2ZWxvcG1lbnQuIENvcHlyaWdodChjKSAyMDExIExlYXJuQm9vc3QgPGRldkBsZWFybmJvb3N0LmNvbT4gTUlUIExpY2Vuc2VkICovXHJcblxyXG52YXIgaW8gPSAoJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiBtb2R1bGUgPyB7fSA6IG1vZHVsZS5leHBvcnRzKTtcclxuKGZ1bmN0aW9uKCkge1xyXG5cclxuLyoqXHJcbiAqIHNvY2tldC5pb1xyXG4gKiBDb3B5cmlnaHQoYykgMjAxMSBMZWFybkJvb3N0IDxkZXZAbGVhcm5ib29zdC5jb20+XHJcbiAqIE1JVCBMaWNlbnNlZFxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoZXhwb3J0cywgZ2xvYmFsKSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIElPIG5hbWVzcGFjZS5cclxuICAgKlxyXG4gICAqIEBuYW1lc3BhY2VcclxuICAgKi9cclxuXHJcbiAgdmFyIGlvID0gZXhwb3J0cztcclxuXHJcbiAgLyoqXHJcbiAgICogU29ja2V0LklPIHZlcnNpb25cclxuICAgKlxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIGlvLnZlcnNpb24gPSAnMC45LjEwJztcclxuXHJcbiAgLyoqXHJcbiAgICogUHJvdG9jb2wgaW1wbGVtZW50ZWQuXHJcbiAgICpcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBpby5wcm90b2NvbCA9IDE7XHJcblxyXG4gIC8qKlxyXG4gICAqIEF2YWlsYWJsZSB0cmFuc3BvcnRzLCB0aGVzZSB3aWxsIGJlIHBvcHVsYXRlZCB3aXRoIHRoZSBhdmFpbGFibGUgdHJhbnNwb3J0c1xyXG4gICAqXHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgaW8udHJhbnNwb3J0cyA9IFtdO1xyXG5cclxuICAvKipcclxuICAgKiBLZWVwIHRyYWNrIG9mIGpzb25wIGNhbGxiYWNrcy5cclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBpby5qID0gW107XHJcblxyXG4gIC8qKlxyXG4gICAqIEtlZXAgdHJhY2sgb2Ygb3VyIGlvLlNvY2tldHNcclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG4gIGlvLnNvY2tldHMgPSB7fTtcclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIE1hbmFnZXMgY29ubmVjdGlvbnMgdG8gaG9zdHMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gdXJpXHJcbiAgICogQFBhcmFtIHtCb29sZWFufSBmb3JjZSBjcmVhdGlvbiBvZiBuZXcgc29ja2V0IChkZWZhdWx0cyB0byBmYWxzZSlcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBpby5jb25uZWN0ID0gZnVuY3Rpb24gKGhvc3QsIGRldGFpbHMpIHtcclxuICAgIHZhciB1cmkgPSBpby51dGlsLnBhcnNlVXJpKGhvc3QpXHJcbiAgICAgICwgdXVyaVxyXG4gICAgICAsIHNvY2tldDtcclxuXHJcbiAgICBpZiAoZ2xvYmFsICYmIGdsb2JhbC5sb2NhdGlvbikge1xyXG4gICAgICB1cmkucHJvdG9jb2wgPSB1cmkucHJvdG9jb2wgfHwgZ2xvYmFsLmxvY2F0aW9uLnByb3RvY29sLnNsaWNlKDAsIC0xKTtcclxuICAgICAgdXJpLmhvc3QgPSB1cmkuaG9zdCB8fCAoZ2xvYmFsLmRvY3VtZW50XHJcbiAgICAgICAgPyBnbG9iYWwuZG9jdW1lbnQuZG9tYWluIDogZ2xvYmFsLmxvY2F0aW9uLmhvc3RuYW1lKTtcclxuICAgICAgdXJpLnBvcnQgPSB1cmkucG9ydCB8fCBnbG9iYWwubG9jYXRpb24ucG9ydDtcclxuICAgIH1cclxuXHJcbiAgICB1dXJpID0gaW8udXRpbC51bmlxdWVVcmkodXJpKTtcclxuXHJcbiAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICBob3N0OiB1cmkuaG9zdFxyXG4gICAgICAsIHNlY3VyZTogJ2h0dHBzJyA9PSB1cmkucHJvdG9jb2xcclxuICAgICAgLCBwb3J0OiB1cmkucG9ydCB8fCAoJ2h0dHBzJyA9PSB1cmkucHJvdG9jb2wgPyA0NDMgOiA4MClcclxuICAgICAgLCBxdWVyeTogdXJpLnF1ZXJ5IHx8ICcnXHJcbiAgICB9O1xyXG5cclxuICAgIGlvLnV0aWwubWVyZ2Uob3B0aW9ucywgZGV0YWlscyk7XHJcblxyXG4gICAgaWYgKG9wdGlvbnNbJ2ZvcmNlIG5ldyBjb25uZWN0aW9uJ10gfHwgIWlvLnNvY2tldHNbdXVyaV0pIHtcclxuICAgICAgc29ja2V0ID0gbmV3IGlvLlNvY2tldChvcHRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIW9wdGlvbnNbJ2ZvcmNlIG5ldyBjb25uZWN0aW9uJ10gJiYgc29ja2V0KSB7XHJcbiAgICAgIGlvLnNvY2tldHNbdXVyaV0gPSBzb2NrZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgc29ja2V0ID0gc29ja2V0IHx8IGlvLnNvY2tldHNbdXVyaV07XHJcblxyXG4gICAgLy8gaWYgcGF0aCBpcyBkaWZmZXJlbnQgZnJvbSAnJyBvciAvXHJcbiAgICByZXR1cm4gc29ja2V0Lm9mKHVyaS5wYXRoLmxlbmd0aCA+IDEgPyB1cmkucGF0aCA6ICcnKTtcclxuICB9O1xyXG5cclxufSkoJ29iamVjdCcgPT09IHR5cGVvZiBtb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6ICh0aGlzLmlvID0ge30pLCB0aGlzKTtcclxuLyoqXHJcbiAqIHNvY2tldC5pb1xyXG4gKiBDb3B5cmlnaHQoYykgMjAxMSBMZWFybkJvb3N0IDxkZXZAbGVhcm5ib29zdC5jb20+XHJcbiAqIE1JVCBMaWNlbnNlZFxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoZXhwb3J0cywgZ2xvYmFsKSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIFV0aWxpdGllcyBuYW1lc3BhY2UuXHJcbiAgICpcclxuICAgKiBAbmFtZXNwYWNlXHJcbiAgICovXHJcblxyXG4gIHZhciB1dGlsID0gZXhwb3J0cy51dGlsID0ge307XHJcblxyXG4gIC8qKlxyXG4gICAqIFBhcnNlcyBhbiBVUklcclxuICAgKlxyXG4gICAqIEBhdXRob3IgU3RldmVuIExldml0aGFuIDxzdGV2ZW5sZXZpdGhhbi5jb20+IChNSVQgbGljZW5zZSlcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICB2YXIgcmUgPSAvXig/Oig/IVteOkBdKzpbXjpAXFwvXSpAKShbXjpcXC8/Iy5dKyk6KT8oPzpcXC9cXC8pPygoPzooKFteOkBdKikoPzo6KFteOkBdKikpPyk/QCk/KFteOlxcLz8jXSopKD86OihcXGQqKSk/KSgoKFxcLyg/OltePyNdKD8hW14/I1xcL10qXFwuW14/I1xcLy5dKyg/Ols/I118JCkpKSpcXC8/KT8oW14/I1xcL10qKSkoPzpcXD8oW14jXSopKT8oPzojKC4qKSk/KS87XHJcblxyXG4gIHZhciBwYXJ0cyA9IFsnc291cmNlJywgJ3Byb3RvY29sJywgJ2F1dGhvcml0eScsICd1c2VySW5mbycsICd1c2VyJywgJ3Bhc3N3b3JkJyxcclxuICAgICAgICAgICAgICAgJ2hvc3QnLCAncG9ydCcsICdyZWxhdGl2ZScsICdwYXRoJywgJ2RpcmVjdG9yeScsICdmaWxlJywgJ3F1ZXJ5JyxcclxuICAgICAgICAgICAgICAgJ2FuY2hvciddO1xyXG5cclxuICB1dGlsLnBhcnNlVXJpID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgdmFyIG0gPSByZS5leGVjKHN0ciB8fCAnJylcclxuICAgICAgLCB1cmkgPSB7fVxyXG4gICAgICAsIGkgPSAxNDtcclxuXHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgIHVyaVtwYXJ0c1tpXV0gPSBtW2ldIHx8ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1cmk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogUHJvZHVjZXMgYSB1bmlxdWUgdXJsIHRoYXQgaWRlbnRpZmllcyBhIFNvY2tldC5JTyBjb25uZWN0aW9uLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHVyaVxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIHV0aWwudW5pcXVlVXJpID0gZnVuY3Rpb24gKHVyaSkge1xyXG4gICAgdmFyIHByb3RvY29sID0gdXJpLnByb3RvY29sXHJcbiAgICAgICwgaG9zdCA9IHVyaS5ob3N0XHJcbiAgICAgICwgcG9ydCA9IHVyaS5wb3J0O1xyXG5cclxuICAgIGlmICgnZG9jdW1lbnQnIGluIGdsb2JhbCkge1xyXG4gICAgICBob3N0ID0gaG9zdCB8fCBkb2N1bWVudC5kb21haW47XHJcbiAgICAgIHBvcnQgPSBwb3J0IHx8IChwcm90b2NvbCA9PSAnaHR0cHMnXHJcbiAgICAgICAgJiYgZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wgIT09ICdodHRwczonID8gNDQzIDogZG9jdW1lbnQubG9jYXRpb24ucG9ydCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBob3N0ID0gaG9zdCB8fCAnbG9jYWxob3N0JztcclxuXHJcbiAgICAgIGlmICghcG9ydCAmJiBwcm90b2NvbCA9PSAnaHR0cHMnKSB7XHJcbiAgICAgICAgcG9ydCA9IDQ0MztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAocHJvdG9jb2wgfHwgJ2h0dHAnKSArICc6Ly8nICsgaG9zdCArICc6JyArIChwb3J0IHx8IDgwKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBNZXJnZXN0IDIgcXVlcnkgc3RyaW5ncyBpbiB0byBvbmNlIHVuaXF1ZSBxdWVyeSBzdHJpbmdcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBiYXNlXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IGFkZGl0aW9uXHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgdXRpbC5xdWVyeSA9IGZ1bmN0aW9uIChiYXNlLCBhZGRpdGlvbikge1xyXG4gICAgdmFyIHF1ZXJ5ID0gdXRpbC5jaHVua1F1ZXJ5KGJhc2UgfHwgJycpXHJcbiAgICAgICwgY29tcG9uZW50cyA9IFtdO1xyXG5cclxuICAgIHV0aWwubWVyZ2UocXVlcnksIHV0aWwuY2h1bmtRdWVyeShhZGRpdGlvbiB8fCAnJykpO1xyXG4gICAgZm9yICh2YXIgcGFydCBpbiBxdWVyeSkge1xyXG4gICAgICBpZiAocXVlcnkuaGFzT3duUHJvcGVydHkocGFydCkpIHtcclxuICAgICAgICBjb21wb25lbnRzLnB1c2gocGFydCArICc9JyArIHF1ZXJ5W3BhcnRdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjb21wb25lbnRzLmxlbmd0aCA/ICc/JyArIGNvbXBvbmVudHMuam9pbignJicpIDogJyc7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogVHJhbnNmb3JtcyBhIHF1ZXJ5c3RyaW5nIGluIHRvIGFuIG9iamVjdFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHFzXHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgdXRpbC5jaHVua1F1ZXJ5ID0gZnVuY3Rpb24gKHFzKSB7XHJcbiAgICB2YXIgcXVlcnkgPSB7fVxyXG4gICAgICAsIHBhcmFtcyA9IHFzLnNwbGl0KCcmJylcclxuICAgICAgLCBpID0gMFxyXG4gICAgICAsIGwgPSBwYXJhbXMubGVuZ3RoXHJcbiAgICAgICwga3Y7XHJcblxyXG4gICAgZm9yICg7IGkgPCBsOyArK2kpIHtcclxuICAgICAga3YgPSBwYXJhbXNbaV0uc3BsaXQoJz0nKTtcclxuICAgICAgaWYgKGt2WzBdKSB7XHJcbiAgICAgICAgcXVlcnlba3ZbMF1dID0ga3ZbMV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcXVlcnk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogRXhlY3V0ZXMgdGhlIGdpdmVuIGZ1bmN0aW9uIHdoZW4gdGhlIHBhZ2UgaXMgbG9hZGVkLlxyXG4gICAqXHJcbiAgICogICAgIGlvLnV0aWwubG9hZChmdW5jdGlvbiAoKSB7IGNvbnNvbGUubG9nKCdwYWdlIGxvYWRlZCcpOyB9KTtcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgdmFyIHBhZ2VMb2FkZWQgPSBmYWxzZTtcclxuXHJcbiAgdXRpbC5sb2FkID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICBpZiAoJ2RvY3VtZW50JyBpbiBnbG9iYWwgJiYgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJyB8fCBwYWdlTG9hZGVkKSB7XHJcbiAgICAgIHJldHVybiBmbigpO1xyXG4gICAgfVxyXG5cclxuICAgIHV0aWwub24oZ2xvYmFsLCAnbG9hZCcsIGZuLCBmYWxzZSk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyBhbiBldmVudC5cclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICB1dGlsLm9uID0gZnVuY3Rpb24gKGVsZW1lbnQsIGV2ZW50LCBmbiwgY2FwdHVyZSkge1xyXG4gICAgaWYgKGVsZW1lbnQuYXR0YWNoRXZlbnQpIHtcclxuICAgICAgZWxlbWVudC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGZuKTtcclxuICAgIH0gZWxzZSBpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7XHJcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZm4sIGNhcHR1cmUpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEdlbmVyYXRlcyB0aGUgY29ycmVjdCBgWE1MSHR0cFJlcXVlc3RgIGZvciByZWd1bGFyIGFuZCBjcm9zcyBkb21haW4gcmVxdWVzdHMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFt4ZG9tYWluXSBDcmVhdGUgYSByZXF1ZXN0IHRoYXQgY2FuIGJlIHVzZWQgY3Jvc3MgZG9tYWluLlxyXG4gICAqIEByZXR1cm5zIHtYTUxIdHRwUmVxdWVzdHxmYWxzZX0gSWYgd2UgY2FuIGNyZWF0ZSBhIFhNTEh0dHBSZXF1ZXN0LlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICB1dGlsLnJlcXVlc3QgPSBmdW5jdGlvbiAoeGRvbWFpbikge1xyXG5cclxuICAgIGlmICh4ZG9tYWluICYmICd1bmRlZmluZWQnICE9IHR5cGVvZiBYRG9tYWluUmVxdWVzdCkge1xyXG4gICAgICByZXR1cm4gbmV3IFhEb21haW5SZXF1ZXN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCd1bmRlZmluZWQnICE9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAmJiAoIXhkb21haW4gfHwgdXRpbC51YS5oYXNDT1JTKSkge1xyXG4gICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF4ZG9tYWluKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3dbKFsnQWN0aXZlJ10uY29uY2F0KCdPYmplY3QnKS5qb2luKCdYJykpXSgnTWljcm9zb2Z0LlhNTEhUVFAnKTtcclxuICAgICAgfSBjYXRjaChlKSB7IH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBYSFIgYmFzZWQgdHJhbnNwb3J0IGNvbnN0cnVjdG9yLlxyXG4gICAqXHJcbiAgICogQGNvbnN0cnVjdG9yXHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hhbmdlIHRoZSBpbnRlcm5hbCBwYWdlTG9hZGVkIHZhbHVlLlxyXG4gICAqL1xyXG5cclxuICBpZiAoJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIHdpbmRvdykge1xyXG4gICAgdXRpbC5sb2FkKGZ1bmN0aW9uICgpIHtcclxuICAgICAgcGFnZUxvYWRlZCA9IHRydWU7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlZmVycyBhIGZ1bmN0aW9uIHRvIGVuc3VyZSBhIHNwaW5uZXIgaXMgbm90IGRpc3BsYXllZCBieSB0aGUgYnJvd3NlclxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICB1dGlsLmRlZmVyID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICBpZiAoIXV0aWwudWEud2Via2l0IHx8ICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbXBvcnRTY3JpcHRzKSB7XHJcbiAgICAgIHJldHVybiBmbigpO1xyXG4gICAgfVxyXG5cclxuICAgIHV0aWwubG9hZChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoZm4sIDEwMCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBNZXJnZXMgdHdvIG9iamVjdHMuXHJcbiAgICpcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG4gIFxyXG4gIHV0aWwubWVyZ2UgPSBmdW5jdGlvbiBtZXJnZSAodGFyZ2V0LCBhZGRpdGlvbmFsLCBkZWVwLCBsYXN0c2Vlbikge1xyXG4gICAgdmFyIHNlZW4gPSBsYXN0c2VlbiB8fCBbXVxyXG4gICAgICAsIGRlcHRoID0gdHlwZW9mIGRlZXAgPT0gJ3VuZGVmaW5lZCcgPyAyIDogZGVlcFxyXG4gICAgICAsIHByb3A7XHJcblxyXG4gICAgZm9yIChwcm9wIGluIGFkZGl0aW9uYWwpIHtcclxuICAgICAgaWYgKGFkZGl0aW9uYWwuaGFzT3duUHJvcGVydHkocHJvcCkgJiYgdXRpbC5pbmRleE9mKHNlZW4sIHByb3ApIDwgMCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0W3Byb3BdICE9PSAnb2JqZWN0JyB8fCAhZGVwdGgpIHtcclxuICAgICAgICAgIHRhcmdldFtwcm9wXSA9IGFkZGl0aW9uYWxbcHJvcF07XHJcbiAgICAgICAgICBzZWVuLnB1c2goYWRkaXRpb25hbFtwcm9wXSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHV0aWwubWVyZ2UodGFyZ2V0W3Byb3BdLCBhZGRpdGlvbmFsW3Byb3BdLCBkZXB0aCAtIDEsIHNlZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogTWVyZ2VzIHByb3RvdHlwZXMgZnJvbSBvYmplY3RzXHJcbiAgICpcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG4gIFxyXG4gIHV0aWwubWl4aW4gPSBmdW5jdGlvbiAoY3RvciwgY3RvcjIpIHtcclxuICAgIHV0aWwubWVyZ2UoY3Rvci5wcm90b3R5cGUsIGN0b3IyLnByb3RvdHlwZSk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogU2hvcnRjdXQgZm9yIHByb3RvdHlwaWNhbCBhbmQgc3RhdGljIGluaGVyaXRhbmNlLlxyXG4gICAqXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIHV0aWwuaW5oZXJpdCA9IGZ1bmN0aW9uIChjdG9yLCBjdG9yMikge1xyXG4gICAgZnVuY3Rpb24gZigpIHt9O1xyXG4gICAgZi5wcm90b3R5cGUgPSBjdG9yMi5wcm90b3R5cGU7XHJcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBmO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGFuIEFycmF5LlxyXG4gICAqXHJcbiAgICogICAgIGlvLnV0aWwuaXNBcnJheShbXSk7IC8vIHRydWVcclxuICAgKiAgICAgaW8udXRpbC5pc0FycmF5KHt9KTsgLy8gZmFsc2VcclxuICAgKlxyXG4gICAqIEBwYXJhbSBPYmplY3Qgb2JqXHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgdXRpbC5pc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogSW50ZXJzZWN0cyB2YWx1ZXMgb2YgdHdvIGFycmF5cyBpbnRvIGEgdGhpcmRcclxuICAgKlxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIHV0aWwuaW50ZXJzZWN0ID0gZnVuY3Rpb24gKGFyciwgYXJyMikge1xyXG4gICAgdmFyIHJldCA9IFtdXHJcbiAgICAgICwgbG9uZ2VzdCA9IGFyci5sZW5ndGggPiBhcnIyLmxlbmd0aCA/IGFyciA6IGFycjJcclxuICAgICAgLCBzaG9ydGVzdCA9IGFyci5sZW5ndGggPiBhcnIyLmxlbmd0aCA/IGFycjIgOiBhcnI7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzaG9ydGVzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgaWYgKH51dGlsLmluZGV4T2YobG9uZ2VzdCwgc2hvcnRlc3RbaV0pKVxyXG4gICAgICAgIHJldC5wdXNoKHNob3J0ZXN0W2ldKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXJyYXkgaW5kZXhPZiBjb21wYXRpYmlsaXR5LlxyXG4gICAqXHJcbiAgICogQHNlZSBiaXQubHkvYTVEeGEyXHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgdXRpbC5pbmRleE9mID0gZnVuY3Rpb24gKGFyciwgbywgaSkge1xyXG4gICAgXHJcbiAgICBmb3IgKHZhciBqID0gYXJyLmxlbmd0aCwgaSA9IGkgPCAwID8gaSArIGogPCAwID8gMCA6IGkgKyBqIDogaSB8fCAwOyBcclxuICAgICAgICAgaSA8IGogJiYgYXJyW2ldICE9PSBvOyBpKyspIHt9XHJcblxyXG4gICAgcmV0dXJuIGogPD0gaSA/IC0xIDogaTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDb252ZXJ0cyBlbnVtZXJhYmxlcyB0byBhcnJheS5cclxuICAgKlxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIHV0aWwudG9BcnJheSA9IGZ1bmN0aW9uIChlbnUpIHtcclxuICAgIHZhciBhcnIgPSBbXTtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGVudS5sZW5ndGg7IGkgPCBsOyBpKyspXHJcbiAgICAgIGFyci5wdXNoKGVudVtpXSk7XHJcblxyXG4gICAgcmV0dXJuIGFycjtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBVQSAvIGVuZ2luZXMgZGV0ZWN0aW9uIG5hbWVzcGFjZS5cclxuICAgKlxyXG4gICAqIEBuYW1lc3BhY2VcclxuICAgKi9cclxuXHJcbiAgdXRpbC51YSA9IHt9O1xyXG5cclxuICAvKipcclxuICAgKiBXaGV0aGVyIHRoZSBVQSBzdXBwb3J0cyBDT1JTIGZvciBYSFIuXHJcbiAgICpcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICB1dGlsLnVhLmhhc0NPUlMgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgJiYgKGZ1bmN0aW9uICgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHZhciBhID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYS53aXRoQ3JlZGVudGlhbHMgIT0gdW5kZWZpbmVkO1xyXG4gIH0pKCk7XHJcblxyXG4gIC8qKlxyXG4gICAqIERldGVjdCB3ZWJraXQuXHJcbiAgICpcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICB1dGlsLnVhLndlYmtpdCA9ICd1bmRlZmluZWQnICE9IHR5cGVvZiBuYXZpZ2F0b3JcclxuICAgICYmIC93ZWJraXQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG5cclxuICAgLyoqXHJcbiAgICogRGV0ZWN0IGlQYWQvaVBob25lL2lQb2QuXHJcbiAgICpcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICB1dGlsLnVhLmlEZXZpY2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgbmF2aWdhdG9yXHJcbiAgICAgICYmIC9pUGFkfGlQaG9uZXxpUG9kL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcclxuXHJcbn0pKCd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLmV4cG9ydHMsIHRoaXMpO1xyXG4vKipcclxuICogc29ja2V0LmlvXHJcbiAqIENvcHlyaWdodChjKSAyMDExIExlYXJuQm9vc3QgPGRldkBsZWFybmJvb3N0LmNvbT5cclxuICogTUlUIExpY2Vuc2VkXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uIChleHBvcnRzLCBpbykge1xyXG5cclxuICAvKipcclxuICAgKiBFeHBvc2UgY29uc3RydWN0b3IuXHJcbiAgICovXHJcblxyXG4gIGV4cG9ydHMuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xyXG5cclxuICAvKipcclxuICAgKiBFdmVudCBlbWl0dGVyIGNvbnN0cnVjdG9yLlxyXG4gICAqXHJcbiAgICogQGFwaSBwdWJsaWMuXHJcbiAgICovXHJcblxyXG4gIGZ1bmN0aW9uIEV2ZW50RW1pdHRlciAoKSB7fTtcclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyBhIGxpc3RlbmVyXHJcbiAgICpcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKG5hbWUsIGZuKSB7XHJcbiAgICBpZiAoIXRoaXMuJGV2ZW50cykge1xyXG4gICAgICB0aGlzLiRldmVudHMgPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXRoaXMuJGV2ZW50c1tuYW1lXSkge1xyXG4gICAgICB0aGlzLiRldmVudHNbbmFtZV0gPSBmbjtcclxuICAgIH0gZWxzZSBpZiAoaW8udXRpbC5pc0FycmF5KHRoaXMuJGV2ZW50c1tuYW1lXSkpIHtcclxuICAgICAgdGhpcy4kZXZlbnRzW25hbWVdLnB1c2goZm4pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy4kZXZlbnRzW25hbWVdID0gW3RoaXMuJGV2ZW50c1tuYW1lXSwgZm5dO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uO1xyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGEgdm9sYXRpbGUgbGlzdGVuZXIuXHJcbiAgICpcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiAobmFtZSwgZm4pIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICBmdW5jdGlvbiBvbiAoKSB7XHJcbiAgICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIobmFtZSwgb24pO1xyXG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxuXHJcbiAgICBvbi5saXN0ZW5lciA9IGZuO1xyXG4gICAgdGhpcy5vbihuYW1lLCBvbik7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyBhIGxpc3RlbmVyLlxyXG4gICAqXHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChuYW1lLCBmbikge1xyXG4gICAgaWYgKHRoaXMuJGV2ZW50cyAmJiB0aGlzLiRldmVudHNbbmFtZV0pIHtcclxuICAgICAgdmFyIGxpc3QgPSB0aGlzLiRldmVudHNbbmFtZV07XHJcblxyXG4gICAgICBpZiAoaW8udXRpbC5pc0FycmF5KGxpc3QpKSB7XHJcbiAgICAgICAgdmFyIHBvcyA9IC0xO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gZm4gfHwgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gZm4pKSB7XHJcbiAgICAgICAgICAgIHBvcyA9IGk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBvcyA8IDApIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGlzdC5zcGxpY2UocG9zLCAxKTtcclxuXHJcbiAgICAgICAgaWYgKCFsaXN0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgZGVsZXRlIHRoaXMuJGV2ZW50c1tuYW1lXTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAobGlzdCA9PT0gZm4gfHwgKGxpc3QubGlzdGVuZXIgJiYgbGlzdC5saXN0ZW5lciA9PT0gZm4pKSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuJGV2ZW50c1tuYW1lXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBmb3IgYW4gZXZlbnQuXHJcbiAgICpcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICBpZiAobmFtZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMuJGV2ZW50cyA9IHt9O1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy4kZXZlbnRzICYmIHRoaXMuJGV2ZW50c1tuYW1lXSkge1xyXG4gICAgICB0aGlzLiRldmVudHNbbmFtZV0gPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgYWxsIGxpc3RlbmVycyBmb3IgYSBjZXJ0YWluIGV2ZW50LlxyXG4gICAqXHJcbiAgICogQGFwaSBwdWJsY2lcclxuICAgKi9cclxuXHJcbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgaWYgKCF0aGlzLiRldmVudHMpIHtcclxuICAgICAgdGhpcy4kZXZlbnRzID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF0aGlzLiRldmVudHNbbmFtZV0pIHtcclxuICAgICAgdGhpcy4kZXZlbnRzW25hbWVdID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFpby51dGlsLmlzQXJyYXkodGhpcy4kZXZlbnRzW25hbWVdKSkge1xyXG4gICAgICB0aGlzLiRldmVudHNbbmFtZV0gPSBbdGhpcy4kZXZlbnRzW25hbWVdXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy4kZXZlbnRzW25hbWVdO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEVtaXRzIGFuIGV2ZW50LlxyXG4gICAqXHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgIGlmICghdGhpcy4kZXZlbnRzKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaGFuZGxlciA9IHRoaXMuJGV2ZW50c1tuYW1lXTtcclxuXHJcbiAgICBpZiAoIWhhbmRsZXIpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcclxuXHJcbiAgICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgaGFuZGxlcikge1xyXG4gICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgfSBlbHNlIGlmIChpby51dGlsLmlzQXJyYXkoaGFuZGxlcikpIHtcclxuICAgICAgdmFyIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcclxuXHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH07XHJcblxyXG59KShcclxuICAgICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLmV4cG9ydHNcclxuICAsICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLnBhcmVudC5leHBvcnRzXHJcbik7XHJcblxyXG4vKipcclxuICogc29ja2V0LmlvXHJcbiAqIENvcHlyaWdodChjKSAyMDExIExlYXJuQm9vc3QgPGRldkBsZWFybmJvb3N0LmNvbT5cclxuICogTUlUIExpY2Vuc2VkXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEJhc2VkIG9uIEpTT04yIChodHRwOi8vd3d3LkpTT04ub3JnL2pzLmh0bWwpLlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoZXhwb3J0cywgbmF0aXZlSlNPTikge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAvLyB1c2UgbmF0aXZlIEpTT04gaWYgaXQncyBhdmFpbGFibGVcclxuICBpZiAobmF0aXZlSlNPTiAmJiBuYXRpdmVKU09OLnBhcnNlKXtcclxuICAgIHJldHVybiBleHBvcnRzLkpTT04gPSB7XHJcbiAgICAgIHBhcnNlOiBuYXRpdmVKU09OLnBhcnNlXHJcbiAgICAsIHN0cmluZ2lmeTogbmF0aXZlSlNPTi5zdHJpbmdpZnlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBKU09OID0gZXhwb3J0cy5KU09OID0ge307XHJcblxyXG4gIGZ1bmN0aW9uIGYobikge1xyXG4gICAgICAvLyBGb3JtYXQgaW50ZWdlcnMgdG8gaGF2ZSBhdCBsZWFzdCB0d28gZGlnaXRzLlxyXG4gICAgICByZXR1cm4gbiA8IDEwID8gJzAnICsgbiA6IG47XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkYXRlKGQsIGtleSkge1xyXG4gICAgcmV0dXJuIGlzRmluaXRlKGQudmFsdWVPZigpKSA/XHJcbiAgICAgICAgZC5nZXRVVENGdWxsWWVhcigpICAgICArICctJyArXHJcbiAgICAgICAgZihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArXHJcbiAgICAgICAgZihkLmdldFVUQ0RhdGUoKSkgICAgICArICdUJyArXHJcbiAgICAgICAgZihkLmdldFVUQ0hvdXJzKCkpICAgICArICc6JyArXHJcbiAgICAgICAgZihkLmdldFVUQ01pbnV0ZXMoKSkgICArICc6JyArXHJcbiAgICAgICAgZihkLmdldFVUQ1NlY29uZHMoKSkgICArICdaJyA6IG51bGw7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGN4ID0gL1tcXHUwMDAwXFx1MDBhZFxcdTA2MDAtXFx1MDYwNFxcdTA3MGZcXHUxN2I0XFx1MTdiNVxcdTIwMGMtXFx1MjAwZlxcdTIwMjgtXFx1MjAyZlxcdTIwNjAtXFx1MjA2ZlxcdWZlZmZcXHVmZmYwLVxcdWZmZmZdL2csXHJcbiAgICAgIGVzY2FwYWJsZSA9IC9bXFxcXFxcXCJcXHgwMC1cXHgxZlxceDdmLVxceDlmXFx1MDBhZFxcdTA2MDAtXFx1MDYwNFxcdTA3MGZcXHUxN2I0XFx1MTdiNVxcdTIwMGMtXFx1MjAwZlxcdTIwMjgtXFx1MjAyZlxcdTIwNjAtXFx1MjA2ZlxcdWZlZmZcXHVmZmYwLVxcdWZmZmZdL2csXHJcbiAgICAgIGdhcCxcclxuICAgICAgaW5kZW50LFxyXG4gICAgICBtZXRhID0geyAgICAvLyB0YWJsZSBvZiBjaGFyYWN0ZXIgc3Vic3RpdHV0aW9uc1xyXG4gICAgICAgICAgJ1xcYic6ICdcXFxcYicsXHJcbiAgICAgICAgICAnXFx0JzogJ1xcXFx0JyxcclxuICAgICAgICAgICdcXG4nOiAnXFxcXG4nLFxyXG4gICAgICAgICAgJ1xcZic6ICdcXFxcZicsXHJcbiAgICAgICAgICAnXFxyJzogJ1xcXFxyJyxcclxuICAgICAgICAgICdcIicgOiAnXFxcXFwiJyxcclxuICAgICAgICAgICdcXFxcJzogJ1xcXFxcXFxcJ1xyXG4gICAgICB9LFxyXG4gICAgICByZXA7XHJcblxyXG5cclxuICBmdW5jdGlvbiBxdW90ZShzdHJpbmcpIHtcclxuXHJcbi8vIElmIHRoZSBzdHJpbmcgY29udGFpbnMgbm8gY29udHJvbCBjaGFyYWN0ZXJzLCBubyBxdW90ZSBjaGFyYWN0ZXJzLCBhbmQgbm9cclxuLy8gYmFja3NsYXNoIGNoYXJhY3RlcnMsIHRoZW4gd2UgY2FuIHNhZmVseSBzbGFwIHNvbWUgcXVvdGVzIGFyb3VuZCBpdC5cclxuLy8gT3RoZXJ3aXNlIHdlIG11c3QgYWxzbyByZXBsYWNlIHRoZSBvZmZlbmRpbmcgY2hhcmFjdGVycyB3aXRoIHNhZmUgZXNjYXBlXHJcbi8vIHNlcXVlbmNlcy5cclxuXHJcbiAgICAgIGVzY2FwYWJsZS5sYXN0SW5kZXggPSAwO1xyXG4gICAgICByZXR1cm4gZXNjYXBhYmxlLnRlc3Qoc3RyaW5nKSA/ICdcIicgKyBzdHJpbmcucmVwbGFjZShlc2NhcGFibGUsIGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICB2YXIgYyA9IG1ldGFbYV07XHJcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIGMgPT09ICdzdHJpbmcnID8gYyA6XHJcbiAgICAgICAgICAgICAgJ1xcXFx1JyArICgnMDAwMCcgKyBhLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNCk7XHJcbiAgICAgIH0pICsgJ1wiJyA6ICdcIicgKyBzdHJpbmcgKyAnXCInO1xyXG4gIH1cclxuXHJcblxyXG4gIGZ1bmN0aW9uIHN0cihrZXksIGhvbGRlcikge1xyXG5cclxuLy8gUHJvZHVjZSBhIHN0cmluZyBmcm9tIGhvbGRlcltrZXldLlxyXG5cclxuICAgICAgdmFyIGksICAgICAgICAgIC8vIFRoZSBsb29wIGNvdW50ZXIuXHJcbiAgICAgICAgICBrLCAgICAgICAgICAvLyBUaGUgbWVtYmVyIGtleS5cclxuICAgICAgICAgIHYsICAgICAgICAgIC8vIFRoZSBtZW1iZXIgdmFsdWUuXHJcbiAgICAgICAgICBsZW5ndGgsXHJcbiAgICAgICAgICBtaW5kID0gZ2FwLFxyXG4gICAgICAgICAgcGFydGlhbCxcclxuICAgICAgICAgIHZhbHVlID0gaG9sZGVyW2tleV07XHJcblxyXG4vLyBJZiB0aGUgdmFsdWUgaGFzIGEgdG9KU09OIG1ldGhvZCwgY2FsbCBpdCB0byBvYnRhaW4gYSByZXBsYWNlbWVudCB2YWx1ZS5cclxuXHJcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgICAgICAgIHZhbHVlID0gZGF0ZShrZXkpO1xyXG4gICAgICB9XHJcblxyXG4vLyBJZiB3ZSB3ZXJlIGNhbGxlZCB3aXRoIGEgcmVwbGFjZXIgZnVuY3Rpb24sIHRoZW4gY2FsbCB0aGUgcmVwbGFjZXIgdG9cclxuLy8gb2J0YWluIGEgcmVwbGFjZW1lbnQgdmFsdWUuXHJcblxyXG4gICAgICBpZiAodHlwZW9mIHJlcCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgdmFsdWUgPSByZXAuY2FsbChob2xkZXIsIGtleSwgdmFsdWUpO1xyXG4gICAgICB9XHJcblxyXG4vLyBXaGF0IGhhcHBlbnMgbmV4dCBkZXBlbmRzIG9uIHRoZSB2YWx1ZSdzIHR5cGUuXHJcblxyXG4gICAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xyXG4gICAgICBjYXNlICdzdHJpbmcnOlxyXG4gICAgICAgICAgcmV0dXJuIHF1b3RlKHZhbHVlKTtcclxuXHJcbiAgICAgIGNhc2UgJ251bWJlcic6XHJcblxyXG4vLyBKU09OIG51bWJlcnMgbXVzdCBiZSBmaW5pdGUuIEVuY29kZSBub24tZmluaXRlIG51bWJlcnMgYXMgbnVsbC5cclxuXHJcbiAgICAgICAgICByZXR1cm4gaXNGaW5pdGUodmFsdWUpID8gU3RyaW5nKHZhbHVlKSA6ICdudWxsJztcclxuXHJcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxyXG4gICAgICBjYXNlICdudWxsJzpcclxuXHJcbi8vIElmIHRoZSB2YWx1ZSBpcyBhIGJvb2xlYW4gb3IgbnVsbCwgY29udmVydCBpdCB0byBhIHN0cmluZy4gTm90ZTpcclxuLy8gdHlwZW9mIG51bGwgZG9lcyBub3QgcHJvZHVjZSAnbnVsbCcuIFRoZSBjYXNlIGlzIGluY2x1ZGVkIGhlcmUgaW5cclxuLy8gdGhlIHJlbW90ZSBjaGFuY2UgdGhhdCB0aGlzIGdldHMgZml4ZWQgc29tZWRheS5cclxuXHJcbiAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcclxuXHJcbi8vIElmIHRoZSB0eXBlIGlzICdvYmplY3QnLCB3ZSBtaWdodCBiZSBkZWFsaW5nIHdpdGggYW4gb2JqZWN0IG9yIGFuIGFycmF5IG9yXHJcbi8vIG51bGwuXHJcblxyXG4gICAgICBjYXNlICdvYmplY3QnOlxyXG5cclxuLy8gRHVlIHRvIGEgc3BlY2lmaWNhdGlvbiBibHVuZGVyIGluIEVDTUFTY3JpcHQsIHR5cGVvZiBudWxsIGlzICdvYmplY3QnLFxyXG4vLyBzbyB3YXRjaCBvdXQgZm9yIHRoYXQgY2FzZS5cclxuXHJcbiAgICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuICdudWxsJztcclxuICAgICAgICAgIH1cclxuXHJcbi8vIE1ha2UgYW4gYXJyYXkgdG8gaG9sZCB0aGUgcGFydGlhbCByZXN1bHRzIG9mIHN0cmluZ2lmeWluZyB0aGlzIG9iamVjdCB2YWx1ZS5cclxuXHJcbiAgICAgICAgICBnYXAgKz0gaW5kZW50O1xyXG4gICAgICAgICAgcGFydGlhbCA9IFtdO1xyXG5cclxuLy8gSXMgdGhlIHZhbHVlIGFuIGFycmF5P1xyXG5cclxuICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xyXG5cclxuLy8gVGhlIHZhbHVlIGlzIGFuIGFycmF5LiBTdHJpbmdpZnkgZXZlcnkgZWxlbWVudC4gVXNlIG51bGwgYXMgYSBwbGFjZWhvbGRlclxyXG4vLyBmb3Igbm9uLUpTT04gdmFsdWVzLlxyXG5cclxuICAgICAgICAgICAgICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgIHBhcnRpYWxbaV0gPSBzdHIoaSwgdmFsdWUpIHx8ICdudWxsJztcclxuICAgICAgICAgICAgICB9XHJcblxyXG4vLyBKb2luIGFsbCBvZiB0aGUgZWxlbWVudHMgdG9nZXRoZXIsIHNlcGFyYXRlZCB3aXRoIGNvbW1hcywgYW5kIHdyYXAgdGhlbSBpblxyXG4vLyBicmFja2V0cy5cclxuXHJcbiAgICAgICAgICAgICAgdiA9IHBhcnRpYWwubGVuZ3RoID09PSAwID8gJ1tdJyA6IGdhcCA/XHJcbiAgICAgICAgICAgICAgICAgICdbXFxuJyArIGdhcCArIHBhcnRpYWwuam9pbignLFxcbicgKyBnYXApICsgJ1xcbicgKyBtaW5kICsgJ10nIDpcclxuICAgICAgICAgICAgICAgICAgJ1snICsgcGFydGlhbC5qb2luKCcsJykgKyAnXSc7XHJcbiAgICAgICAgICAgICAgZ2FwID0gbWluZDtcclxuICAgICAgICAgICAgICByZXR1cm4gdjtcclxuICAgICAgICAgIH1cclxuXHJcbi8vIElmIHRoZSByZXBsYWNlciBpcyBhbiBhcnJheSwgdXNlIGl0IHRvIHNlbGVjdCB0aGUgbWVtYmVycyB0byBiZSBzdHJpbmdpZmllZC5cclxuXHJcbiAgICAgICAgICBpZiAocmVwICYmIHR5cGVvZiByZXAgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgbGVuZ3RoID0gcmVwLmxlbmd0aDtcclxuICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBbaV0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBrID0gcmVwW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdiA9IHN0cihrLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpYWwucHVzaChxdW90ZShrKSArIChnYXAgPyAnOiAnIDogJzonKSArIHYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuXHJcbi8vIE90aGVyd2lzZSwgaXRlcmF0ZSB0aHJvdWdoIGFsbCBvZiB0aGUga2V5cyBpbiB0aGUgb2JqZWN0LlxyXG5cclxuICAgICAgICAgICAgICBmb3IgKGsgaW4gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgaykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHYgPSBzdHIoaywgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0aWFsLnB1c2gocXVvdGUoaykgKyAoZ2FwID8gJzogJyA6ICc6JykgKyB2KTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbi8vIEpvaW4gYWxsIG9mIHRoZSBtZW1iZXIgdGV4dHMgdG9nZXRoZXIsIHNlcGFyYXRlZCB3aXRoIGNvbW1hcyxcclxuLy8gYW5kIHdyYXAgdGhlbSBpbiBicmFjZXMuXHJcblxyXG4gICAgICAgICAgdiA9IHBhcnRpYWwubGVuZ3RoID09PSAwID8gJ3t9JyA6IGdhcCA/XHJcbiAgICAgICAgICAgICAgJ3tcXG4nICsgZ2FwICsgcGFydGlhbC5qb2luKCcsXFxuJyArIGdhcCkgKyAnXFxuJyArIG1pbmQgKyAnfScgOlxyXG4gICAgICAgICAgICAgICd7JyArIHBhcnRpYWwuam9pbignLCcpICsgJ30nO1xyXG4gICAgICAgICAgZ2FwID0gbWluZDtcclxuICAgICAgICAgIHJldHVybiB2O1xyXG4gICAgICB9XHJcbiAgfVxyXG5cclxuLy8gSWYgdGhlIEpTT04gb2JqZWN0IGRvZXMgbm90IHlldCBoYXZlIGEgc3RyaW5naWZ5IG1ldGhvZCwgZ2l2ZSBpdCBvbmUuXHJcblxyXG4gIEpTT04uc3RyaW5naWZ5ID0gZnVuY3Rpb24gKHZhbHVlLCByZXBsYWNlciwgc3BhY2UpIHtcclxuXHJcbi8vIFRoZSBzdHJpbmdpZnkgbWV0aG9kIHRha2VzIGEgdmFsdWUgYW5kIGFuIG9wdGlvbmFsIHJlcGxhY2VyLCBhbmQgYW4gb3B0aW9uYWxcclxuLy8gc3BhY2UgcGFyYW1ldGVyLCBhbmQgcmV0dXJucyBhIEpTT04gdGV4dC4gVGhlIHJlcGxhY2VyIGNhbiBiZSBhIGZ1bmN0aW9uXHJcbi8vIHRoYXQgY2FuIHJlcGxhY2UgdmFsdWVzLCBvciBhbiBhcnJheSBvZiBzdHJpbmdzIHRoYXQgd2lsbCBzZWxlY3QgdGhlIGtleXMuXHJcbi8vIEEgZGVmYXVsdCByZXBsYWNlciBtZXRob2QgY2FuIGJlIHByb3ZpZGVkLiBVc2Ugb2YgdGhlIHNwYWNlIHBhcmFtZXRlciBjYW5cclxuLy8gcHJvZHVjZSB0ZXh0IHRoYXQgaXMgbW9yZSBlYXNpbHkgcmVhZGFibGUuXHJcblxyXG4gICAgICB2YXIgaTtcclxuICAgICAgZ2FwID0gJyc7XHJcbiAgICAgIGluZGVudCA9ICcnO1xyXG5cclxuLy8gSWYgdGhlIHNwYWNlIHBhcmFtZXRlciBpcyBhIG51bWJlciwgbWFrZSBhbiBpbmRlbnQgc3RyaW5nIGNvbnRhaW5pbmcgdGhhdFxyXG4vLyBtYW55IHNwYWNlcy5cclxuXHJcbiAgICAgIGlmICh0eXBlb2Ygc3BhY2UgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3BhY2U7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICAgIGluZGVudCArPSAnICc7XHJcbiAgICAgICAgICB9XHJcblxyXG4vLyBJZiB0aGUgc3BhY2UgcGFyYW1ldGVyIGlzIGEgc3RyaW5nLCBpdCB3aWxsIGJlIHVzZWQgYXMgdGhlIGluZGVudCBzdHJpbmcuXHJcblxyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzcGFjZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgIGluZGVudCA9IHNwYWNlO1xyXG4gICAgICB9XHJcblxyXG4vLyBJZiB0aGVyZSBpcyBhIHJlcGxhY2VyLCBpdCBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgYW4gYXJyYXkuXHJcbi8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3IuXHJcblxyXG4gICAgICByZXAgPSByZXBsYWNlcjtcclxuICAgICAgaWYgKHJlcGxhY2VyICYmIHR5cGVvZiByZXBsYWNlciAhPT0gJ2Z1bmN0aW9uJyAmJlxyXG4gICAgICAgICAgICAgICh0eXBlb2YgcmVwbGFjZXIgIT09ICdvYmplY3QnIHx8XHJcbiAgICAgICAgICAgICAgdHlwZW9mIHJlcGxhY2VyLmxlbmd0aCAhPT0gJ251bWJlcicpKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0pTT04uc3RyaW5naWZ5Jyk7XHJcbiAgICAgIH1cclxuXHJcbi8vIE1ha2UgYSBmYWtlIHJvb3Qgb2JqZWN0IGNvbnRhaW5pbmcgb3VyIHZhbHVlIHVuZGVyIHRoZSBrZXkgb2YgJycuXHJcbi8vIFJldHVybiB0aGUgcmVzdWx0IG9mIHN0cmluZ2lmeWluZyB0aGUgdmFsdWUuXHJcblxyXG4gICAgICByZXR1cm4gc3RyKCcnLCB7Jyc6IHZhbHVlfSk7XHJcbiAgfTtcclxuXHJcbi8vIElmIHRoZSBKU09OIG9iamVjdCBkb2VzIG5vdCB5ZXQgaGF2ZSBhIHBhcnNlIG1ldGhvZCwgZ2l2ZSBpdCBvbmUuXHJcblxyXG4gIEpTT04ucGFyc2UgPSBmdW5jdGlvbiAodGV4dCwgcmV2aXZlcikge1xyXG4gIC8vIFRoZSBwYXJzZSBtZXRob2QgdGFrZXMgYSB0ZXh0IGFuZCBhbiBvcHRpb25hbCByZXZpdmVyIGZ1bmN0aW9uLCBhbmQgcmV0dXJuc1xyXG4gIC8vIGEgSmF2YVNjcmlwdCB2YWx1ZSBpZiB0aGUgdGV4dCBpcyBhIHZhbGlkIEpTT04gdGV4dC5cclxuXHJcbiAgICAgIHZhciBqO1xyXG5cclxuICAgICAgZnVuY3Rpb24gd2Fsayhob2xkZXIsIGtleSkge1xyXG5cclxuICAvLyBUaGUgd2FsayBtZXRob2QgaXMgdXNlZCB0byByZWN1cnNpdmVseSB3YWxrIHRoZSByZXN1bHRpbmcgc3RydWN0dXJlIHNvXHJcbiAgLy8gdGhhdCBtb2RpZmljYXRpb25zIGNhbiBiZSBtYWRlLlxyXG5cclxuICAgICAgICAgIHZhciBrLCB2LCB2YWx1ZSA9IGhvbGRlcltrZXldO1xyXG4gICAgICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICBmb3IgKGsgaW4gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgaykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHYgPSB3YWxrKHZhbHVlLCBrKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVtrXSA9IHY7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtrXTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiByZXZpdmVyLmNhbGwoaG9sZGVyLCBrZXksIHZhbHVlKTtcclxuICAgICAgfVxyXG5cclxuXHJcbiAgLy8gUGFyc2luZyBoYXBwZW5zIGluIGZvdXIgc3RhZ2VzLiBJbiB0aGUgZmlyc3Qgc3RhZ2UsIHdlIHJlcGxhY2UgY2VydGFpblxyXG4gIC8vIFVuaWNvZGUgY2hhcmFjdGVycyB3aXRoIGVzY2FwZSBzZXF1ZW5jZXMuIEphdmFTY3JpcHQgaGFuZGxlcyBtYW55IGNoYXJhY3RlcnNcclxuICAvLyBpbmNvcnJlY3RseSwgZWl0aGVyIHNpbGVudGx5IGRlbGV0aW5nIHRoZW0sIG9yIHRyZWF0aW5nIHRoZW0gYXMgbGluZSBlbmRpbmdzLlxyXG5cclxuICAgICAgdGV4dCA9IFN0cmluZyh0ZXh0KTtcclxuICAgICAgY3gubGFzdEluZGV4ID0gMDtcclxuICAgICAgaWYgKGN4LnRlc3QodGV4dCkpIHtcclxuICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoY3gsIGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuICdcXFxcdScgK1xyXG4gICAgICAgICAgICAgICAgICAoJzAwMDAnICsgYS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgLy8gSW4gdGhlIHNlY29uZCBzdGFnZSwgd2UgcnVuIHRoZSB0ZXh0IGFnYWluc3QgcmVndWxhciBleHByZXNzaW9ucyB0aGF0IGxvb2tcclxuICAvLyBmb3Igbm9uLUpTT04gcGF0dGVybnMuIFdlIGFyZSBlc3BlY2lhbGx5IGNvbmNlcm5lZCB3aXRoICcoKScgYW5kICduZXcnXHJcbiAgLy8gYmVjYXVzZSB0aGV5IGNhbiBjYXVzZSBpbnZvY2F0aW9uLCBhbmQgJz0nIGJlY2F1c2UgaXQgY2FuIGNhdXNlIG11dGF0aW9uLlxyXG4gIC8vIEJ1dCBqdXN0IHRvIGJlIHNhZmUsIHdlIHdhbnQgdG8gcmVqZWN0IGFsbCB1bmV4cGVjdGVkIGZvcm1zLlxyXG5cclxuICAvLyBXZSBzcGxpdCB0aGUgc2Vjb25kIHN0YWdlIGludG8gNCByZWdleHAgb3BlcmF0aW9ucyBpbiBvcmRlciB0byB3b3JrIGFyb3VuZFxyXG4gIC8vIGNyaXBwbGluZyBpbmVmZmljaWVuY2llcyBpbiBJRSdzIGFuZCBTYWZhcmkncyByZWdleHAgZW5naW5lcy4gRmlyc3Qgd2VcclxuICAvLyByZXBsYWNlIHRoZSBKU09OIGJhY2tzbGFzaCBwYWlycyB3aXRoICdAJyAoYSBub24tSlNPTiBjaGFyYWN0ZXIpLiBTZWNvbmQsIHdlXHJcbiAgLy8gcmVwbGFjZSBhbGwgc2ltcGxlIHZhbHVlIHRva2VucyB3aXRoICddJyBjaGFyYWN0ZXJzLiBUaGlyZCwgd2UgZGVsZXRlIGFsbFxyXG4gIC8vIG9wZW4gYnJhY2tldHMgdGhhdCBmb2xsb3cgYSBjb2xvbiBvciBjb21tYSBvciB0aGF0IGJlZ2luIHRoZSB0ZXh0LiBGaW5hbGx5LFxyXG4gIC8vIHdlIGxvb2sgdG8gc2VlIHRoYXQgdGhlIHJlbWFpbmluZyBjaGFyYWN0ZXJzIGFyZSBvbmx5IHdoaXRlc3BhY2Ugb3IgJ10nIG9yXHJcbiAgLy8gJywnIG9yICc6JyBvciAneycgb3IgJ30nLiBJZiB0aGF0IGlzIHNvLCB0aGVuIHRoZSB0ZXh0IGlzIHNhZmUgZm9yIGV2YWwuXHJcblxyXG4gICAgICBpZiAoL15bXFxdLDp7fVxcc10qJC9cclxuICAgICAgICAgICAgICAudGVzdCh0ZXh0LnJlcGxhY2UoL1xcXFwoPzpbXCJcXFxcXFwvYmZucnRdfHVbMC05YS1mQS1GXXs0fSkvZywgJ0AnKVxyXG4gICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXCJbXlwiXFxcXFxcblxccl0qXCJ8dHJ1ZXxmYWxzZXxudWxsfC0/XFxkKyg/OlxcLlxcZCopPyg/OltlRV1bK1xcLV0/XFxkKyk/L2csICddJylcclxuICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyg/Ol58OnwsKSg/OlxccypcXFspKy9nLCAnJykpKSB7XHJcblxyXG4gIC8vIEluIHRoZSB0aGlyZCBzdGFnZSB3ZSB1c2UgdGhlIGV2YWwgZnVuY3Rpb24gdG8gY29tcGlsZSB0aGUgdGV4dCBpbnRvIGFcclxuICAvLyBKYXZhU2NyaXB0IHN0cnVjdHVyZS4gVGhlICd7JyBvcGVyYXRvciBpcyBzdWJqZWN0IHRvIGEgc3ludGFjdGljIGFtYmlndWl0eVxyXG4gIC8vIGluIEphdmFTY3JpcHQ6IGl0IGNhbiBiZWdpbiBhIGJsb2NrIG9yIGFuIG9iamVjdCBsaXRlcmFsLiBXZSB3cmFwIHRoZSB0ZXh0XHJcbiAgLy8gaW4gcGFyZW5zIHRvIGVsaW1pbmF0ZSB0aGUgYW1iaWd1aXR5LlxyXG5cclxuICAgICAgICAgIGogPSBldmFsKCcoJyArIHRleHQgKyAnKScpO1xyXG5cclxuICAvLyBJbiB0aGUgb3B0aW9uYWwgZm91cnRoIHN0YWdlLCB3ZSByZWN1cnNpdmVseSB3YWxrIHRoZSBuZXcgc3RydWN0dXJlLCBwYXNzaW5nXHJcbiAgLy8gZWFjaCBuYW1lL3ZhbHVlIHBhaXIgdG8gYSByZXZpdmVyIGZ1bmN0aW9uIGZvciBwb3NzaWJsZSB0cmFuc2Zvcm1hdGlvbi5cclxuXHJcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIHJldml2ZXIgPT09ICdmdW5jdGlvbicgP1xyXG4gICAgICAgICAgICAgIHdhbGsoeycnOiBqfSwgJycpIDogajtcclxuICAgICAgfVxyXG5cclxuICAvLyBJZiB0aGUgdGV4dCBpcyBub3QgSlNPTiBwYXJzZWFibGUsIHRoZW4gYSBTeW50YXhFcnJvciBpcyB0aHJvd24uXHJcblxyXG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0pTT04ucGFyc2UnKTtcclxuICB9O1xyXG5cclxufSkoXHJcbiAgICAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5leHBvcnRzXHJcbiAgLCB0eXBlb2YgSlNPTiAhPT0gJ3VuZGVmaW5lZCcgPyBKU09OIDogdW5kZWZpbmVkXHJcbik7XHJcblxyXG4vKipcclxuICogc29ja2V0LmlvXHJcbiAqIENvcHlyaWdodChjKSAyMDExIExlYXJuQm9vc3QgPGRldkBsZWFybmJvb3N0LmNvbT5cclxuICogTUlUIExpY2Vuc2VkXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uIChleHBvcnRzLCBpbykge1xyXG5cclxuICAvKipcclxuICAgKiBQYXJzZXIgbmFtZXNwYWNlLlxyXG4gICAqXHJcbiAgICogQG5hbWVzcGFjZVxyXG4gICAqL1xyXG5cclxuICB2YXIgcGFyc2VyID0gZXhwb3J0cy5wYXJzZXIgPSB7fTtcclxuXHJcbiAgLyoqXHJcbiAgICogUGFja2V0IHR5cGVzLlxyXG4gICAqL1xyXG5cclxuICB2YXIgcGFja2V0cyA9IHBhcnNlci5wYWNrZXRzID0gW1xyXG4gICAgICAnZGlzY29ubmVjdCdcclxuICAgICwgJ2Nvbm5lY3QnXHJcbiAgICAsICdoZWFydGJlYXQnXHJcbiAgICAsICdtZXNzYWdlJ1xyXG4gICAgLCAnanNvbidcclxuICAgICwgJ2V2ZW50J1xyXG4gICAgLCAnYWNrJ1xyXG4gICAgLCAnZXJyb3InXHJcbiAgICAsICdub29wJ1xyXG4gIF07XHJcblxyXG4gIC8qKlxyXG4gICAqIEVycm9ycyByZWFzb25zLlxyXG4gICAqL1xyXG5cclxuICB2YXIgcmVhc29ucyA9IHBhcnNlci5yZWFzb25zID0gW1xyXG4gICAgICAndHJhbnNwb3J0IG5vdCBzdXBwb3J0ZWQnXHJcbiAgICAsICdjbGllbnQgbm90IGhhbmRzaGFrZW4nXHJcbiAgICAsICd1bmF1dGhvcml6ZWQnXHJcbiAgXTtcclxuXHJcbiAgLyoqXHJcbiAgICogRXJyb3JzIGFkdmljZS5cclxuICAgKi9cclxuXHJcbiAgdmFyIGFkdmljZSA9IHBhcnNlci5hZHZpY2UgPSBbXHJcbiAgICAgICdyZWNvbm5lY3QnXHJcbiAgXTtcclxuXHJcbiAgLyoqXHJcbiAgICogU2hvcnRjdXRzLlxyXG4gICAqL1xyXG5cclxuICB2YXIgSlNPTiA9IGlvLkpTT05cclxuICAgICwgaW5kZXhPZiA9IGlvLnV0aWwuaW5kZXhPZjtcclxuXHJcbiAgLyoqXHJcbiAgICogRW5jb2RlcyBhIHBhY2tldC5cclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBwYXJzZXIuZW5jb2RlUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xyXG4gICAgdmFyIHR5cGUgPSBpbmRleE9mKHBhY2tldHMsIHBhY2tldC50eXBlKVxyXG4gICAgICAsIGlkID0gcGFja2V0LmlkIHx8ICcnXHJcbiAgICAgICwgZW5kcG9pbnQgPSBwYWNrZXQuZW5kcG9pbnQgfHwgJydcclxuICAgICAgLCBhY2sgPSBwYWNrZXQuYWNrXHJcbiAgICAgICwgZGF0YSA9IG51bGw7XHJcblxyXG4gICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xyXG4gICAgICBjYXNlICdlcnJvcic6XHJcbiAgICAgICAgdmFyIHJlYXNvbiA9IHBhY2tldC5yZWFzb24gPyBpbmRleE9mKHJlYXNvbnMsIHBhY2tldC5yZWFzb24pIDogJydcclxuICAgICAgICAgICwgYWR2ID0gcGFja2V0LmFkdmljZSA/IGluZGV4T2YoYWR2aWNlLCBwYWNrZXQuYWR2aWNlKSA6ICcnO1xyXG5cclxuICAgICAgICBpZiAocmVhc29uICE9PSAnJyB8fCBhZHYgIT09ICcnKVxyXG4gICAgICAgICAgZGF0YSA9IHJlYXNvbiArIChhZHYgIT09ICcnID8gKCcrJyArIGFkdikgOiAnJyk7XHJcblxyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnbWVzc2FnZSc6XHJcbiAgICAgICAgaWYgKHBhY2tldC5kYXRhICE9PSAnJylcclxuICAgICAgICAgIGRhdGEgPSBwYWNrZXQuZGF0YTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ2V2ZW50JzpcclxuICAgICAgICB2YXIgZXYgPSB7IG5hbWU6IHBhY2tldC5uYW1lIH07XHJcblxyXG4gICAgICAgIGlmIChwYWNrZXQuYXJncyAmJiBwYWNrZXQuYXJncy5sZW5ndGgpIHtcclxuICAgICAgICAgIGV2LmFyZ3MgPSBwYWNrZXQuYXJncztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRhdGEgPSBKU09OLnN0cmluZ2lmeShldik7XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlICdqc29uJzpcclxuICAgICAgICBkYXRhID0gSlNPTi5zdHJpbmdpZnkocGFja2V0LmRhdGEpO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnY29ubmVjdCc6XHJcbiAgICAgICAgaWYgKHBhY2tldC5xcylcclxuICAgICAgICAgIGRhdGEgPSBwYWNrZXQucXM7XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlICdhY2snOlxyXG4gICAgICAgIGRhdGEgPSBwYWNrZXQuYWNrSWRcclxuICAgICAgICAgICsgKHBhY2tldC5hcmdzICYmIHBhY2tldC5hcmdzLmxlbmd0aFxyXG4gICAgICAgICAgICAgID8gJysnICsgSlNPTi5zdHJpbmdpZnkocGFja2V0LmFyZ3MpIDogJycpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbnN0cnVjdCBwYWNrZXQgd2l0aCByZXF1aXJlZCBmcmFnbWVudHNcclxuICAgIHZhciBlbmNvZGVkID0gW1xyXG4gICAgICAgIHR5cGVcclxuICAgICAgLCBpZCArIChhY2sgPT0gJ2RhdGEnID8gJysnIDogJycpXHJcbiAgICAgICwgZW5kcG9pbnRcclxuICAgIF07XHJcblxyXG4gICAgLy8gZGF0YSBmcmFnbWVudCBpcyBvcHRpb25hbFxyXG4gICAgaWYgKGRhdGEgIT09IG51bGwgJiYgZGF0YSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICBlbmNvZGVkLnB1c2goZGF0YSk7XHJcblxyXG4gICAgcmV0dXJuIGVuY29kZWQuam9pbignOicpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEVuY29kZXMgbXVsdGlwbGUgbWVzc2FnZXMgKHBheWxvYWQpLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtBcnJheX0gbWVzc2FnZXNcclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgcGFyc2VyLmVuY29kZVBheWxvYWQgPSBmdW5jdGlvbiAocGFja2V0cykge1xyXG4gICAgdmFyIGRlY29kZWQgPSAnJztcclxuXHJcbiAgICBpZiAocGFja2V0cy5sZW5ndGggPT0gMSlcclxuICAgICAgcmV0dXJuIHBhY2tldHNbMF07XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYWNrZXRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICB2YXIgcGFja2V0ID0gcGFja2V0c1tpXTtcclxuICAgICAgZGVjb2RlZCArPSAnXFx1ZmZmZCcgKyBwYWNrZXQubGVuZ3RoICsgJ1xcdWZmZmQnICsgcGFja2V0c1tpXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGVjb2RlZDtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBEZWNvZGVzIGEgcGFja2V0XHJcbiAgICpcclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgdmFyIHJlZ2V4cCA9IC8oW146XSspOihbMC05XSspPyhcXCspPzooW146XSspPzo/KFtcXHNcXFNdKik/LztcclxuXHJcbiAgcGFyc2VyLmRlY29kZVBhY2tldCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB2YXIgcGllY2VzID0gZGF0YS5tYXRjaChyZWdleHApO1xyXG5cclxuICAgIGlmICghcGllY2VzKSByZXR1cm4ge307XHJcblxyXG4gICAgdmFyIGlkID0gcGllY2VzWzJdIHx8ICcnXHJcbiAgICAgICwgZGF0YSA9IHBpZWNlc1s1XSB8fCAnJ1xyXG4gICAgICAsIHBhY2tldCA9IHtcclxuICAgICAgICAgICAgdHlwZTogcGFja2V0c1twaWVjZXNbMV1dXHJcbiAgICAgICAgICAsIGVuZHBvaW50OiBwaWVjZXNbNF0gfHwgJydcclxuICAgICAgICB9O1xyXG5cclxuICAgIC8vIHdoZXRoZXIgd2UgbmVlZCB0byBhY2tub3dsZWRnZSB0aGUgcGFja2V0XHJcbiAgICBpZiAoaWQpIHtcclxuICAgICAgcGFja2V0LmlkID0gaWQ7XHJcbiAgICAgIGlmIChwaWVjZXNbM10pXHJcbiAgICAgICAgcGFja2V0LmFjayA9ICdkYXRhJztcclxuICAgICAgZWxzZVxyXG4gICAgICAgIHBhY2tldC5hY2sgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGhhbmRsZSBkaWZmZXJlbnQgcGFja2V0IHR5cGVzXHJcbiAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XHJcbiAgICAgIGNhc2UgJ2Vycm9yJzpcclxuICAgICAgICB2YXIgcGllY2VzID0gZGF0YS5zcGxpdCgnKycpO1xyXG4gICAgICAgIHBhY2tldC5yZWFzb24gPSByZWFzb25zW3BpZWNlc1swXV0gfHwgJyc7XHJcbiAgICAgICAgcGFja2V0LmFkdmljZSA9IGFkdmljZVtwaWVjZXNbMV1dIHx8ICcnO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnbWVzc2FnZSc6XHJcbiAgICAgICAgcGFja2V0LmRhdGEgPSBkYXRhIHx8ICcnO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnZXZlbnQnOlxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICB2YXIgb3B0cyA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgICBwYWNrZXQubmFtZSA9IG9wdHMubmFtZTtcclxuICAgICAgICAgIHBhY2tldC5hcmdzID0gb3B0cy5hcmdzO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgfVxyXG5cclxuICAgICAgICBwYWNrZXQuYXJncyA9IHBhY2tldC5hcmdzIHx8IFtdO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnanNvbic6XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHBhY2tldC5kYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IH1cclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ2Nvbm5lY3QnOlxyXG4gICAgICAgIHBhY2tldC5xcyA9IGRhdGEgfHwgJyc7XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlICdhY2snOlxyXG4gICAgICAgIHZhciBwaWVjZXMgPSBkYXRhLm1hdGNoKC9eKFswLTldKykoXFwrKT8oLiopLyk7XHJcbiAgICAgICAgaWYgKHBpZWNlcykge1xyXG4gICAgICAgICAgcGFja2V0LmFja0lkID0gcGllY2VzWzFdO1xyXG4gICAgICAgICAgcGFja2V0LmFyZ3MgPSBbXTtcclxuXHJcbiAgICAgICAgICBpZiAocGllY2VzWzNdKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgcGFja2V0LmFyZ3MgPSBwaWVjZXNbM10gPyBKU09OLnBhcnNlKHBpZWNlc1szXSkgOiBbXTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnZGlzY29ubmVjdCc6XHJcbiAgICAgIGNhc2UgJ2hlYXJ0YmVhdCc6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBwYWNrZXQ7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogRGVjb2RlcyBkYXRhIHBheWxvYWQuIERldGVjdHMgbXVsdGlwbGUgbWVzc2FnZXNcclxuICAgKlxyXG4gICAqIEByZXR1cm4ge0FycmF5fSBtZXNzYWdlc1xyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIHBhcnNlci5kZWNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIC8vIElFIGRvZXNuJ3QgbGlrZSBkYXRhW2ldIGZvciB1bmljb2RlIGNoYXJzLCBjaGFyQXQgd29ya3MgZmluZVxyXG4gICAgaWYgKGRhdGEuY2hhckF0KDApID09ICdcXHVmZmZkJykge1xyXG4gICAgICB2YXIgcmV0ID0gW107XHJcblxyXG4gICAgICBmb3IgKHZhciBpID0gMSwgbGVuZ3RoID0gJyc7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGRhdGEuY2hhckF0KGkpID09ICdcXHVmZmZkJykge1xyXG4gICAgICAgICAgcmV0LnB1c2gocGFyc2VyLmRlY29kZVBhY2tldChkYXRhLnN1YnN0cihpICsgMSkuc3Vic3RyKDAsIGxlbmd0aCkpKTtcclxuICAgICAgICAgIGkgKz0gTnVtYmVyKGxlbmd0aCkgKyAxO1xyXG4gICAgICAgICAgbGVuZ3RoID0gJyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGxlbmd0aCArPSBkYXRhLmNoYXJBdChpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gW3BhcnNlci5kZWNvZGVQYWNrZXQoZGF0YSldO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG59KShcclxuICAgICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLmV4cG9ydHNcclxuICAsICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLnBhcmVudC5leHBvcnRzXHJcbik7XHJcbi8qKlxyXG4gKiBzb2NrZXQuaW9cclxuICogQ29weXJpZ2h0KGMpIDIwMTEgTGVhcm5Cb29zdCA8ZGV2QGxlYXJuYm9vc3QuY29tPlxyXG4gKiBNSVQgTGljZW5zZWRcclxuICovXHJcblxyXG4oZnVuY3Rpb24gKGV4cG9ydHMsIGlvKSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4cG9zZSBjb25zdHJ1Y3Rvci5cclxuICAgKi9cclxuXHJcbiAgZXhwb3J0cy5UcmFuc3BvcnQgPSBUcmFuc3BvcnQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgaXMgdGhlIHRyYW5zcG9ydCB0ZW1wbGF0ZSBmb3IgYWxsIHN1cHBvcnRlZCB0cmFuc3BvcnQgbWV0aG9kcy5cclxuICAgKlxyXG4gICAqIEBjb25zdHJ1Y3RvclxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIGZ1bmN0aW9uIFRyYW5zcG9ydCAoc29ja2V0LCBzZXNzaWQpIHtcclxuICAgIHRoaXMuc29ja2V0ID0gc29ja2V0O1xyXG4gICAgdGhpcy5zZXNzaWQgPSBzZXNzaWQ7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbHkgRXZlbnRFbWl0dGVyIG1peGluLlxyXG4gICAqL1xyXG5cclxuICBpby51dGlsLm1peGluKFRyYW5zcG9ydCwgaW8uRXZlbnRFbWl0dGVyKTtcclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIGhlYXJ0YmVhdHMgaXMgZW5hYmxlZCBmb3IgdGhpcyB0cmFuc3BvcnRcclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBUcmFuc3BvcnQucHJvdG90eXBlLmhlYXJ0YmVhdHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhhbmRsZXMgdGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlci4gV2hlbiBhIG5ldyByZXNwb25zZSBpcyByZWNlaXZlZFxyXG4gICAqIGl0IHdpbGwgYXV0b21hdGljYWxseSB1cGRhdGUgdGhlIHRpbWVvdXQsIGRlY29kZSB0aGUgbWVzc2FnZSBhbmRcclxuICAgKiBmb3J3YXJkcyB0aGUgcmVzcG9uc2UgdG8gdGhlIG9uTWVzc2FnZSBmdW5jdGlvbiBmb3IgZnVydGhlciBwcm9jZXNzaW5nLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgUmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyLlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBUcmFuc3BvcnQucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB0aGlzLmNsZWFyQ2xvc2VUaW1lb3V0KCk7XHJcbiAgICBcclxuICAgIC8vIElmIHRoZSBjb25uZWN0aW9uIGluIGN1cnJlbnRseSBvcGVuIChvciBpbiBhIHJlb3BlbmluZyBzdGF0ZSkgcmVzZXQgdGhlIGNsb3NlIFxyXG4gICAgLy8gdGltZW91dCBzaW5jZSB3ZSBoYXZlIGp1c3QgcmVjZWl2ZWQgZGF0YS4gVGhpcyBjaGVjayBpcyBuZWNlc3Nhcnkgc29cclxuICAgIC8vIHRoYXQgd2UgZG9uJ3QgcmVzZXQgdGhlIHRpbWVvdXQgb24gYW4gZXhwbGljaXRseSBkaXNjb25uZWN0ZWQgY29ubmVjdGlvbi5cclxuICAgIGlmICh0aGlzLnNvY2tldC5jb25uZWN0ZWQgfHwgdGhpcy5zb2NrZXQuY29ubmVjdGluZyB8fCB0aGlzLnNvY2tldC5yZWNvbm5lY3RpbmcpIHtcclxuICAgICAgdGhpcy5zZXRDbG9zZVRpbWVvdXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGF0YSAhPT0gJycpIHtcclxuICAgICAgLy8gdG9kbzogd2Ugc2hvdWxkIG9ubHkgZG8gZGVjb2RlUGF5bG9hZCBmb3IgeGhyIHRyYW5zcG9ydHNcclxuICAgICAgdmFyIG1zZ3MgPSBpby5wYXJzZXIuZGVjb2RlUGF5bG9hZChkYXRhKTtcclxuXHJcbiAgICAgIGlmIChtc2dzICYmIG1zZ3MubGVuZ3RoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBtc2dzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgdGhpcy5vblBhY2tldChtc2dzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBIYW5kbGVzIHBhY2tldHMuXHJcbiAgICpcclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgVHJhbnNwb3J0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcclxuICAgIHRoaXMuc29ja2V0LnNldEhlYXJ0YmVhdFRpbWVvdXQoKTtcclxuXHJcbiAgICBpZiAocGFja2V0LnR5cGUgPT0gJ2hlYXJ0YmVhdCcpIHtcclxuICAgICAgcmV0dXJuIHRoaXMub25IZWFydGJlYXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocGFja2V0LnR5cGUgPT0gJ2Nvbm5lY3QnICYmIHBhY2tldC5lbmRwb2ludCA9PSAnJykge1xyXG4gICAgICB0aGlzLm9uQ29ubmVjdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwYWNrZXQudHlwZSA9PSAnZXJyb3InICYmIHBhY2tldC5hZHZpY2UgPT0gJ3JlY29ubmVjdCcpIHtcclxuICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNvY2tldC5vblBhY2tldChwYWNrZXQpO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgY2xvc2UgdGltZW91dFxyXG4gICAqXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcbiAgXHJcbiAgVHJhbnNwb3J0LnByb3RvdHlwZS5zZXRDbG9zZVRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoIXRoaXMuY2xvc2VUaW1lb3V0KSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgIHRoaXMuY2xvc2VUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2VsZi5vbkRpc2Nvbm5lY3QoKTtcclxuICAgICAgfSwgdGhpcy5zb2NrZXQuY2xvc2VUaW1lb3V0KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDYWxsZWQgd2hlbiB0cmFuc3BvcnQgZGlzY29ubmVjdHMuXHJcbiAgICpcclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5pc09wZW4pIHRoaXMuY2xvc2UoKTtcclxuICAgIHRoaXMuY2xlYXJUaW1lb3V0cygpO1xyXG4gICAgdGhpcy5zb2NrZXQub25EaXNjb25uZWN0KCk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDYWxsZWQgd2hlbiB0cmFuc3BvcnQgY29ubmVjdHNcclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBUcmFuc3BvcnQucHJvdG90eXBlLm9uQ29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuc29ja2V0Lm9uQ29ubmVjdCgpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbGVhcnMgY2xvc2UgdGltZW91dFxyXG4gICAqXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIFRyYW5zcG9ydC5wcm90b3R5cGUuY2xlYXJDbG9zZVRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5jbG9zZVRpbWVvdXQpIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY2xvc2VUaW1lb3V0KTtcclxuICAgICAgdGhpcy5jbG9zZVRpbWVvdXQgPSBudWxsO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENsZWFyIHRpbWVvdXRzXHJcbiAgICpcclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgVHJhbnNwb3J0LnByb3RvdHlwZS5jbGVhclRpbWVvdXRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5jbGVhckNsb3NlVGltZW91dCgpO1xyXG5cclxuICAgIGlmICh0aGlzLnJlb3BlblRpbWVvdXQpIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVvcGVuVGltZW91dCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogU2VuZHMgYSBwYWNrZXRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgb2JqZWN0LlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBUcmFuc3BvcnQucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcclxuICAgIHRoaXMuc2VuZChpby5wYXJzZXIuZW5jb2RlUGFja2V0KHBhY2tldCkpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFNlbmQgdGhlIHJlY2VpdmVkIGhlYXJ0YmVhdCBtZXNzYWdlIGJhY2sgdG8gc2VydmVyLiBTbyB0aGUgc2VydmVyXHJcbiAgICoga25vd3Mgd2UgYXJlIHN0aWxsIGNvbm5lY3RlZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBoZWFydGJlYXQgSGVhcnRiZWF0IHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlci5cclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkhlYXJ0YmVhdCA9IGZ1bmN0aW9uIChoZWFydGJlYXQpIHtcclxuICAgIHRoaXMucGFja2V0KHsgdHlwZTogJ2hlYXJ0YmVhdCcgfSk7XHJcbiAgfTtcclxuIFxyXG4gIC8qKlxyXG4gICAqIENhbGxlZCB3aGVuIHRoZSB0cmFuc3BvcnQgb3BlbnMuXHJcbiAgICpcclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmlzT3BlbiA9IHRydWU7XHJcbiAgICB0aGlzLmNsZWFyQ2xvc2VUaW1lb3V0KCk7XHJcbiAgICB0aGlzLnNvY2tldC5vbk9wZW4oKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBOb3RpZmllcyB0aGUgYmFzZSB3aGVuIHRoZSBjb25uZWN0aW9uIHdpdGggdGhlIFNvY2tldC5JTyBzZXJ2ZXJcclxuICAgKiBoYXMgYmVlbiBkaXNjb25uZWN0ZWQuXHJcbiAgICpcclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIC8qIEZJWE1FOiByZW9wZW4gZGVsYXkgY2F1c2luZyBhIGluZmluaXQgbG9vcFxyXG4gICAgdGhpcy5yZW9wZW5UaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYub3BlbigpO1xyXG4gICAgfSwgdGhpcy5zb2NrZXQub3B0aW9uc1sncmVvcGVuIGRlbGF5J10pOyovXHJcblxyXG4gICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcclxuICAgIHRoaXMuc29ja2V0Lm9uQ2xvc2UoKTtcclxuICAgIHRoaXMub25EaXNjb25uZWN0KCk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogR2VuZXJhdGVzIGEgY29ubmVjdGlvbiB1cmwgYmFzZWQgb24gdGhlIFNvY2tldC5JTyBVUkwgUHJvdG9jb2wuXHJcbiAgICogU2VlIDxodHRwczovL2dpdGh1Yi5jb20vbGVhcm5ib29zdC9zb2NrZXQuaW8tbm9kZS8+IGZvciBtb3JlIGRldGFpbHMuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBDb25uZWN0aW9uIHVybFxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBUcmFuc3BvcnQucHJvdG90eXBlLnByZXBhcmVVcmwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMuc29ja2V0Lm9wdGlvbnM7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuc2NoZW1lKCkgKyAnOi8vJ1xyXG4gICAgICArIG9wdGlvbnMuaG9zdCArICc6JyArIG9wdGlvbnMucG9ydCArICcvJ1xyXG4gICAgICArIG9wdGlvbnMucmVzb3VyY2UgKyAnLycgKyBpby5wcm90b2NvbFxyXG4gICAgICArICcvJyArIHRoaXMubmFtZSArICcvJyArIHRoaXMuc2Vzc2lkO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrcyBpZiB0aGUgdHJhbnNwb3J0IGlzIHJlYWR5IHRvIHN0YXJ0IGEgY29ubmVjdGlvbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7U29ja2V0fSBzb2NrZXQgVGhlIHNvY2tldCBpbnN0YW5jZSB0aGF0IG5lZWRzIGEgdHJhbnNwb3J0XHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIFRyYW5zcG9ydC5wcm90b3R5cGUucmVhZHkgPSBmdW5jdGlvbiAoc29ja2V0LCBmbikge1xyXG4gICAgZm4uY2FsbCh0aGlzKTtcclxuICB9O1xyXG59KShcclxuICAgICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLmV4cG9ydHNcclxuICAsICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLnBhcmVudC5leHBvcnRzXHJcbik7XHJcbi8qKlxyXG4gKiBzb2NrZXQuaW9cclxuICogQ29weXJpZ2h0KGMpIDIwMTEgTGVhcm5Cb29zdCA8ZGV2QGxlYXJuYm9vc3QuY29tPlxyXG4gKiBNSVQgTGljZW5zZWRcclxuICovXHJcblxyXG4oZnVuY3Rpb24gKGV4cG9ydHMsIGlvLCBnbG9iYWwpIHtcclxuXHJcbiAgLyoqXHJcbiAgICogRXhwb3NlIGNvbnN0cnVjdG9yLlxyXG4gICAqL1xyXG5cclxuICBleHBvcnRzLlNvY2tldCA9IFNvY2tldDtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgbmV3IGBTb2NrZXQuSU8gY2xpZW50YCB3aGljaCBjYW4gZXN0YWJsaXNoIGEgcGVyc2lzdGVudFxyXG4gICAqIGNvbm5lY3Rpb24gd2l0aCBhIFNvY2tldC5JTyBlbmFibGVkIHNlcnZlci5cclxuICAgKlxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIGZ1bmN0aW9uIFNvY2tldCAob3B0aW9ucykge1xyXG4gICAgdGhpcy5vcHRpb25zID0ge1xyXG4gICAgICAgIHBvcnQ6IDgwXHJcbiAgICAgICwgc2VjdXJlOiBmYWxzZVxyXG4gICAgICAsIGRvY3VtZW50OiAnZG9jdW1lbnQnIGluIGdsb2JhbCA/IGRvY3VtZW50IDogZmFsc2VcclxuICAgICAgLCByZXNvdXJjZTogJ3NvY2tldC5pbydcclxuICAgICAgLCB0cmFuc3BvcnRzOiBpby50cmFuc3BvcnRzXHJcbiAgICAgICwgJ2Nvbm5lY3QgdGltZW91dCc6IDEwMDAwXHJcbiAgICAgICwgJ3RyeSBtdWx0aXBsZSB0cmFuc3BvcnRzJzogdHJ1ZVxyXG4gICAgICAsICdyZWNvbm5lY3QnOiB0cnVlXHJcbiAgICAgICwgJ3JlY29ubmVjdGlvbiBkZWxheSc6IDUwMFxyXG4gICAgICAsICdyZWNvbm5lY3Rpb24gbGltaXQnOiBJbmZpbml0eVxyXG4gICAgICAsICdyZW9wZW4gZGVsYXknOiAzMDAwXHJcbiAgICAgICwgJ21heCByZWNvbm5lY3Rpb24gYXR0ZW1wdHMnOiAxMFxyXG4gICAgICAsICdzeW5jIGRpc2Nvbm5lY3Qgb24gdW5sb2FkJzogZmFsc2VcclxuICAgICAgLCAnYXV0byBjb25uZWN0JzogdHJ1ZVxyXG4gICAgICAsICdmbGFzaCBwb2xpY3kgcG9ydCc6IDEwODQzXHJcbiAgICAgICwgJ21hbnVhbEZsdXNoJzogZmFsc2VcclxuICAgIH07XHJcblxyXG4gICAgaW8udXRpbC5tZXJnZSh0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xyXG5cclxuICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XHJcbiAgICB0aGlzLm9wZW4gPSBmYWxzZTtcclxuICAgIHRoaXMuY29ubmVjdGluZyA9IGZhbHNlO1xyXG4gICAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcclxuICAgIHRoaXMubmFtZXNwYWNlcyA9IHt9O1xyXG4gICAgdGhpcy5idWZmZXIgPSBbXTtcclxuICAgIHRoaXMuZG9CdWZmZXIgPSBmYWxzZTtcclxuXHJcbiAgICBpZiAodGhpcy5vcHRpb25zWydzeW5jIGRpc2Nvbm5lY3Qgb24gdW5sb2FkJ10gJiZcclxuICAgICAgICAoIXRoaXMuaXNYRG9tYWluKCkgfHwgaW8udXRpbC51YS5oYXNDT1JTKSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgIGlvLnV0aWwub24oZ2xvYmFsLCAnYmVmb3JldW5sb2FkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNlbGYuZGlzY29ubmVjdFN5bmMoKTtcclxuICAgICAgfSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLm9wdGlvbnNbJ2F1dG8gY29ubmVjdCddKSB7XHJcbiAgICAgIHRoaXMuY29ubmVjdCgpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuICAvKipcclxuICAgKiBBcHBseSBFdmVudEVtaXR0ZXIgbWl4aW4uXHJcbiAgICovXHJcblxyXG4gIGlvLnV0aWwubWl4aW4oU29ja2V0LCBpby5FdmVudEVtaXR0ZXIpO1xyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgbmFtZXNwYWNlIGxpc3RlbmVyL2VtaXR0ZXIgZm9yIHRoaXMgc29ja2V0XHJcbiAgICpcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBTb2NrZXQucHJvdG90eXBlLm9mID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgIGlmICghdGhpcy5uYW1lc3BhY2VzW25hbWVdKSB7XHJcbiAgICAgIHRoaXMubmFtZXNwYWNlc1tuYW1lXSA9IG5ldyBpby5Tb2NrZXROYW1lc3BhY2UodGhpcywgbmFtZSk7XHJcblxyXG4gICAgICBpZiAobmFtZSAhPT0gJycpIHtcclxuICAgICAgICB0aGlzLm5hbWVzcGFjZXNbbmFtZV0ucGFja2V0KHsgdHlwZTogJ2Nvbm5lY3QnIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMubmFtZXNwYWNlc1tuYW1lXTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBFbWl0cyB0aGUgZ2l2ZW4gZXZlbnQgdG8gdGhlIFNvY2tldCBhbmQgYWxsIG5hbWVzcGFjZXNcclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBTb2NrZXQucHJvdG90eXBlLnB1Ymxpc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHJcbiAgICB2YXIgbnNwO1xyXG5cclxuICAgIGZvciAodmFyIGkgaW4gdGhpcy5uYW1lc3BhY2VzKSB7XHJcbiAgICAgIGlmICh0aGlzLm5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcclxuICAgICAgICBuc3AgPSB0aGlzLm9mKGkpO1xyXG4gICAgICAgIG5zcC4kZW1pdC5hcHBseShuc3AsIGFyZ3VtZW50cyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBQZXJmb3JtcyB0aGUgaGFuZHNoYWtlXHJcbiAgICpcclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgZnVuY3Rpb24gZW1wdHkgKCkgeyB9O1xyXG5cclxuICBTb2NrZXQucHJvdG90eXBlLmhhbmRzaGFrZSA9IGZ1bmN0aW9uIChmbikge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzXHJcbiAgICAgICwgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcclxuXHJcbiAgICBmdW5jdGlvbiBjb21wbGV0ZSAoZGF0YSkge1xyXG4gICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgc2VsZi5jb25uZWN0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgc2VsZi5vbkVycm9yKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZm4uYXBwbHkobnVsbCwgZGF0YS5zcGxpdCgnOicpKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgdXJsID0gW1xyXG4gICAgICAgICAgJ2h0dHAnICsgKG9wdGlvbnMuc2VjdXJlID8gJ3MnIDogJycpICsgJzovJ1xyXG4gICAgICAgICwgb3B0aW9ucy5ob3N0ICsgJzonICsgb3B0aW9ucy5wb3J0XHJcbiAgICAgICAgLCBvcHRpb25zLnJlc291cmNlXHJcbiAgICAgICAgLCBpby5wcm90b2NvbFxyXG4gICAgICAgICwgaW8udXRpbC5xdWVyeSh0aGlzLm9wdGlvbnMucXVlcnksICd0PScgKyArbmV3IERhdGUpXHJcbiAgICAgIF0uam9pbignLycpO1xyXG5cclxuICAgIGlmICh0aGlzLmlzWERvbWFpbigpICYmICFpby51dGlsLnVhLmhhc0NPUlMpIHtcclxuICAgICAgdmFyIGluc2VydEF0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdXHJcbiAgICAgICAgLCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuXHJcbiAgICAgIHNjcmlwdC5zcmMgPSB1cmwgKyAnJmpzb25wPScgKyBpby5qLmxlbmd0aDtcclxuICAgICAgaW5zZXJ0QXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2NyaXB0LCBpbnNlcnRBdCk7XHJcblxyXG4gICAgICBpby5qLnB1c2goZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBjb21wbGV0ZShkYXRhKTtcclxuICAgICAgICBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciB4aHIgPSBpby51dGlsLnJlcXVlc3QoKTtcclxuXHJcbiAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xyXG4gICAgICBpZiAodGhpcy5pc1hEb21haW4oKSkge1xyXG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09IDQpIHtcclxuICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eTtcclxuXHJcbiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PSAyMDApIHtcclxuICAgICAgICAgICAgY29tcGxldGUoeGhyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHhoci5zdGF0dXMgPT0gNDAzKSB7XHJcbiAgICAgICAgICAgIHNlbGYub25FcnJvcih4aHIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNlbGYuY29ubmVjdGluZyA9IGZhbHNlOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAhc2VsZi5yZWNvbm5lY3RpbmcgJiYgc2VsZi5vbkVycm9yKHhoci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgICAgeGhyLnNlbmQobnVsbCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogRmluZCBhbiBhdmFpbGFibGUgdHJhbnNwb3J0IGJhc2VkIG9uIHRoZSBvcHRpb25zIHN1cHBsaWVkIGluIHRoZSBjb25zdHJ1Y3Rvci5cclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBTb2NrZXQucHJvdG90eXBlLmdldFRyYW5zcG9ydCA9IGZ1bmN0aW9uIChvdmVycmlkZSkge1xyXG4gICAgdmFyIHRyYW5zcG9ydHMgPSBvdmVycmlkZSB8fCB0aGlzLnRyYW5zcG9ydHMsIG1hdGNoO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwLCB0cmFuc3BvcnQ7IHRyYW5zcG9ydCA9IHRyYW5zcG9ydHNbaV07IGkrKykge1xyXG4gICAgICBpZiAoaW8uVHJhbnNwb3J0W3RyYW5zcG9ydF1cclxuICAgICAgICAmJiBpby5UcmFuc3BvcnRbdHJhbnNwb3J0XS5jaGVjayh0aGlzKVxyXG4gICAgICAgICYmICghdGhpcy5pc1hEb21haW4oKSB8fCBpby5UcmFuc3BvcnRbdHJhbnNwb3J0XS54ZG9tYWluQ2hlY2sodGhpcykpKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBpby5UcmFuc3BvcnRbdHJhbnNwb3J0XSh0aGlzLCB0aGlzLnNlc3Npb25pZCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDb25uZWN0cyB0byB0aGUgc2VydmVyLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZuXSBDYWxsYmFjay5cclxuICAgKiBAcmV0dXJucyB7aW8uU29ja2V0fVxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIFNvY2tldC5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChmbikge1xyXG4gICAgaWYgKHRoaXMuY29ubmVjdGluZykge1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLmNvbm5lY3RpbmcgPSB0cnVlO1xyXG4gICAgXHJcbiAgICB0aGlzLmhhbmRzaGFrZShmdW5jdGlvbiAoc2lkLCBoZWFydGJlYXQsIGNsb3NlLCB0cmFuc3BvcnRzKSB7XHJcbiAgICAgIHNlbGYuc2Vzc2lvbmlkID0gc2lkO1xyXG4gICAgICBzZWxmLmNsb3NlVGltZW91dCA9IGNsb3NlICogMTAwMDtcclxuICAgICAgc2VsZi5oZWFydGJlYXRUaW1lb3V0ID0gaGVhcnRiZWF0ICogMTAwMDtcclxuICAgICAgaWYoIXNlbGYudHJhbnNwb3J0cylcclxuICAgICAgICAgIHNlbGYudHJhbnNwb3J0cyA9IHNlbGYub3JpZ1RyYW5zcG9ydHMgPSAodHJhbnNwb3J0cyA/IGlvLnV0aWwuaW50ZXJzZWN0KFxyXG4gICAgICAgICAgICAgIHRyYW5zcG9ydHMuc3BsaXQoJywnKVxyXG4gICAgICAgICAgICAsIHNlbGYub3B0aW9ucy50cmFuc3BvcnRzXHJcbiAgICAgICAgICApIDogc2VsZi5vcHRpb25zLnRyYW5zcG9ydHMpO1xyXG5cclxuICAgICAgc2VsZi5zZXRIZWFydGJlYXRUaW1lb3V0KCk7XHJcblxyXG4gICAgICBmdW5jdGlvbiBjb25uZWN0ICh0cmFuc3BvcnRzKXtcclxuICAgICAgICBpZiAoc2VsZi50cmFuc3BvcnQpIHNlbGYudHJhbnNwb3J0LmNsZWFyVGltZW91dHMoKTtcclxuXHJcbiAgICAgICAgc2VsZi50cmFuc3BvcnQgPSBzZWxmLmdldFRyYW5zcG9ydCh0cmFuc3BvcnRzKTtcclxuICAgICAgICBpZiAoIXNlbGYudHJhbnNwb3J0KSByZXR1cm4gc2VsZi5wdWJsaXNoKCdjb25uZWN0X2ZhaWxlZCcpO1xyXG5cclxuICAgICAgICAvLyBvbmNlIHRoZSB0cmFuc3BvcnQgaXMgcmVhZHlcclxuICAgICAgICBzZWxmLnRyYW5zcG9ydC5yZWFkeShzZWxmLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBzZWxmLmNvbm5lY3RpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgc2VsZi5wdWJsaXNoKCdjb25uZWN0aW5nJywgc2VsZi50cmFuc3BvcnQubmFtZSk7XHJcbiAgICAgICAgICBzZWxmLnRyYW5zcG9ydC5vcGVuKCk7XHJcblxyXG4gICAgICAgICAgaWYgKHNlbGYub3B0aW9uc1snY29ubmVjdCB0aW1lb3V0J10pIHtcclxuICAgICAgICAgICAgc2VsZi5jb25uZWN0VGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgaWYgKCFzZWxmLmNvbm5lY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5jb25uZWN0aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYub3B0aW9uc1sndHJ5IG11bHRpcGxlIHRyYW5zcG9ydHMnXSkge1xyXG4gICAgICAgICAgICAgICAgICB2YXIgcmVtYWluaW5nID0gc2VsZi50cmFuc3BvcnRzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgd2hpbGUgKHJlbWFpbmluZy5sZW5ndGggPiAwICYmIHJlbWFpbmluZy5zcGxpY2UoMCwxKVswXSAhPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50cmFuc3BvcnQubmFtZSkge31cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlbWFpbmluZy5sZW5ndGgpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgY29ubmVjdChyZW1haW5pbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBzZWxmLnB1Ymxpc2goJ2Nvbm5lY3RfZmFpbGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgc2VsZi5vcHRpb25zWydjb25uZWN0IHRpbWVvdXQnXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbm5lY3Qoc2VsZi50cmFuc3BvcnRzKTtcclxuXHJcbiAgICAgIHNlbGYub25jZSgnY29ubmVjdCcsIGZ1bmN0aW9uICgpe1xyXG4gICAgICAgIGNsZWFyVGltZW91dChzZWxmLmNvbm5lY3RUaW1lb3V0VGltZXIpO1xyXG5cclxuICAgICAgICBmbiAmJiB0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyAmJiBmbigpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENsZWFycyBhbmQgc2V0cyBhIG5ldyBoZWFydGJlYXQgdGltZW91dCB1c2luZyB0aGUgdmFsdWUgZ2l2ZW4gYnkgdGhlXHJcbiAgICogc2VydmVyIGR1cmluZyB0aGUgaGFuZHNoYWtlLlxyXG4gICAqXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIFNvY2tldC5wcm90b3R5cGUuc2V0SGVhcnRiZWF0VGltZW91dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGNsZWFyVGltZW91dCh0aGlzLmhlYXJ0YmVhdFRpbWVvdXRUaW1lcik7XHJcbiAgICBpZih0aGlzLnRyYW5zcG9ydCAmJiAhdGhpcy50cmFuc3BvcnQuaGVhcnRiZWF0cygpKSByZXR1cm47XHJcblxyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgdGhpcy5oZWFydGJlYXRUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi50cmFuc3BvcnQub25DbG9zZSgpO1xyXG4gICAgfSwgdGhpcy5oZWFydGJlYXRUaW1lb3V0KTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBTZW5kcyBhIG1lc3NhZ2UuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBwYWNrZXQuXHJcbiAgICogQHJldHVybnMge2lvLlNvY2tldH1cclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBTb2NrZXQucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICBpZiAodGhpcy5jb25uZWN0ZWQgJiYgIXRoaXMuZG9CdWZmZXIpIHtcclxuICAgICAgdGhpcy50cmFuc3BvcnQucGFja2V0KGRhdGEpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5idWZmZXIucHVzaChkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBTZXRzIGJ1ZmZlciBzdGF0ZVxyXG4gICAqXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIFNvY2tldC5wcm90b3R5cGUuc2V0QnVmZmVyID0gZnVuY3Rpb24gKHYpIHtcclxuICAgIHRoaXMuZG9CdWZmZXIgPSB2O1xyXG5cclxuICAgIGlmICghdiAmJiB0aGlzLmNvbm5lY3RlZCAmJiB0aGlzLmJ1ZmZlci5sZW5ndGgpIHtcclxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnNbJ21hbnVhbEZsdXNoJ10pIHtcclxuICAgICAgICB0aGlzLmZsdXNoQnVmZmVyKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBGbHVzaGVzIHRoZSBidWZmZXIgZGF0YSBvdmVyIHRoZSB3aXJlLlxyXG4gICAqIFRvIGJlIGludm9rZWQgbWFudWFsbHkgd2hlbiAnbWFudWFsRmx1c2gnIGlzIHNldCB0byB0cnVlLlxyXG4gICAqXHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgU29ja2V0LnByb3RvdHlwZS5mbHVzaEJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy50cmFuc3BvcnQucGF5bG9hZCh0aGlzLmJ1ZmZlcik7XHJcbiAgICB0aGlzLmJ1ZmZlciA9IFtdO1xyXG4gIH07XHJcbiAgXHJcblxyXG4gIC8qKlxyXG4gICAqIERpc2Nvbm5lY3QgdGhlIGVzdGFibGlzaGVkIGNvbm5lY3QuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7aW8uU29ja2V0fVxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIFNvY2tldC5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0aGlzLmNvbm5lY3RlZCB8fCB0aGlzLmNvbm5lY3RpbmcpIHtcclxuICAgICAgaWYgKHRoaXMub3Blbikge1xyXG4gICAgICAgIHRoaXMub2YoJycpLnBhY2tldCh7IHR5cGU6ICdkaXNjb25uZWN0JyB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gaGFuZGxlIGRpc2Nvbm5lY3Rpb24gaW1tZWRpYXRlbHlcclxuICAgICAgdGhpcy5vbkRpc2Nvbm5lY3QoJ2Jvb3RlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc2Nvbm5lY3RzIHRoZSBzb2NrZXQgd2l0aCBhIHN5bmMgWEhSLlxyXG4gICAqXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIFNvY2tldC5wcm90b3R5cGUuZGlzY29ubmVjdFN5bmMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBlbnN1cmUgZGlzY29ubmVjdGlvblxyXG4gICAgdmFyIHhociA9IGlvLnV0aWwucmVxdWVzdCgpO1xyXG4gICAgdmFyIHVyaSA9IFtcclxuICAgICAgICAnaHR0cCcgKyAodGhpcy5vcHRpb25zLnNlY3VyZSA/ICdzJyA6ICcnKSArICc6LydcclxuICAgICAgLCB0aGlzLm9wdGlvbnMuaG9zdCArICc6JyArIHRoaXMub3B0aW9ucy5wb3J0XHJcbiAgICAgICwgdGhpcy5vcHRpb25zLnJlc291cmNlXHJcbiAgICAgICwgaW8ucHJvdG9jb2xcclxuICAgICAgLCAnJ1xyXG4gICAgICAsIHRoaXMuc2Vzc2lvbmlkXHJcbiAgICBdLmpvaW4oJy8nKSArICcvP2Rpc2Nvbm5lY3Q9MSc7XHJcblxyXG4gICAgeGhyLm9wZW4oJ0dFVCcsIHVyaSwgZmFsc2UpO1xyXG4gICAgeGhyLnNlbmQobnVsbCk7XHJcblxyXG4gICAgLy8gaGFuZGxlIGRpc2Nvbm5lY3Rpb24gaW1tZWRpYXRlbHlcclxuICAgIHRoaXMub25EaXNjb25uZWN0KCdib290ZWQnKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiB3ZSBuZWVkIHRvIHVzZSBjcm9zcyBkb21haW4gZW5hYmxlZCB0cmFuc3BvcnRzLiBDcm9zcyBkb21haW4gd291bGRcclxuICAgKiBiZSBhIGRpZmZlcmVudCBwb3J0IG9yIGRpZmZlcmVudCBkb21haW4gbmFtZS5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBTb2NrZXQucHJvdG90eXBlLmlzWERvbWFpbiA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB2YXIgcG9ydCA9IGdsb2JhbC5sb2NhdGlvbi5wb3J0IHx8XHJcbiAgICAgICgnaHR0cHM6JyA9PSBnbG9iYWwubG9jYXRpb24ucHJvdG9jb2wgPyA0NDMgOiA4MCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5ob3N0ICE9PSBnbG9iYWwubG9jYXRpb24uaG9zdG5hbWUgXHJcbiAgICAgIHx8IHRoaXMub3B0aW9ucy5wb3J0ICE9IHBvcnQ7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIHVwb24gaGFuZHNoYWtlLlxyXG4gICAqXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIFNvY2tldC5wcm90b3R5cGUub25Db25uZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCF0aGlzLmNvbm5lY3RlZCkge1xyXG4gICAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XHJcbiAgICAgIHRoaXMuY29ubmVjdGluZyA9IGZhbHNlO1xyXG4gICAgICBpZiAoIXRoaXMuZG9CdWZmZXIpIHtcclxuICAgICAgICAvLyBtYWtlIHN1cmUgdG8gZmx1c2ggdGhlIGJ1ZmZlclxyXG4gICAgICAgIHRoaXMuc2V0QnVmZmVyKGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3QnKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdHJhbnNwb3J0IG9wZW5zXHJcbiAgICpcclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgU29ja2V0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLm9wZW4gPSB0cnVlO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxlZCB3aGVuIHRoZSB0cmFuc3BvcnQgY2xvc2VzLlxyXG4gICAqXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIFNvY2tldC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMub3BlbiA9IGZhbHNlO1xyXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuaGVhcnRiZWF0VGltZW91dFRpbWVyKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdHJhbnNwb3J0IGZpcnN0IG9wZW5zIGEgY29ubmVjdGlvblxyXG4gICAqXHJcbiAgICogQHBhcmFtIHRleHRcclxuICAgKi9cclxuXHJcbiAgU29ja2V0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcclxuICAgIHRoaXMub2YocGFja2V0LmVuZHBvaW50KS5vblBhY2tldChwYWNrZXQpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEhhbmRsZXMgYW4gZXJyb3IuXHJcbiAgICpcclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgU29ja2V0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKGVycikge1xyXG4gICAgaWYgKGVyciAmJiBlcnIuYWR2aWNlKSB7XHJcbiAgICAgIGlmIChlcnIuYWR2aWNlID09PSAncmVjb25uZWN0JyAmJiAodGhpcy5jb25uZWN0ZWQgfHwgdGhpcy5jb25uZWN0aW5nKSkge1xyXG4gICAgICAgIHRoaXMuZGlzY29ubmVjdCgpO1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVjb25uZWN0KSB7XHJcbiAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucHVibGlzaCgnZXJyb3InLCBlcnIgJiYgZXJyLnJlYXNvbiA/IGVyci5yZWFzb24gOiBlcnIpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxlZCB3aGVuIHRoZSB0cmFuc3BvcnQgZGlzY29ubmVjdHMuXHJcbiAgICpcclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgU29ja2V0LnByb3RvdHlwZS5vbkRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAocmVhc29uKSB7XHJcbiAgICB2YXIgd2FzQ29ubmVjdGVkID0gdGhpcy5jb25uZWN0ZWRcclxuICAgICAgLCB3YXNDb25uZWN0aW5nID0gdGhpcy5jb25uZWN0aW5nO1xyXG5cclxuICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XHJcbiAgICB0aGlzLmNvbm5lY3RpbmcgPSBmYWxzZTtcclxuICAgIHRoaXMub3BlbiA9IGZhbHNlO1xyXG5cclxuICAgIGlmICh3YXNDb25uZWN0ZWQgfHwgd2FzQ29ubmVjdGluZykge1xyXG4gICAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xyXG4gICAgICB0aGlzLnRyYW5zcG9ydC5jbGVhclRpbWVvdXRzKCk7XHJcbiAgICAgIGlmICh3YXNDb25uZWN0ZWQpIHtcclxuICAgICAgICB0aGlzLnB1Ymxpc2goJ2Rpc2Nvbm5lY3QnLCByZWFzb24pO1xyXG5cclxuICAgICAgICBpZiAoJ2Jvb3RlZCcgIT0gcmVhc29uICYmIHRoaXMub3B0aW9ucy5yZWNvbm5lY3QgJiYgIXRoaXMucmVjb25uZWN0aW5nKSB7XHJcbiAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxlZCB1cG9uIHJlY29ubmVjdGlvbi5cclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBTb2NrZXQucHJvdG90eXBlLnJlY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMucmVjb25uZWN0aW5nID0gdHJ1ZTtcclxuICAgIHRoaXMucmVjb25uZWN0aW9uQXR0ZW1wdHMgPSAwO1xyXG4gICAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheSA9IHRoaXMub3B0aW9uc1sncmVjb25uZWN0aW9uIGRlbGF5J107XHJcblxyXG4gICAgdmFyIHNlbGYgPSB0aGlzXHJcbiAgICAgICwgbWF4QXR0ZW1wdHMgPSB0aGlzLm9wdGlvbnNbJ21heCByZWNvbm5lY3Rpb24gYXR0ZW1wdHMnXVxyXG4gICAgICAsIHRyeU11bHRpcGxlID0gdGhpcy5vcHRpb25zWyd0cnkgbXVsdGlwbGUgdHJhbnNwb3J0cyddXHJcbiAgICAgICwgbGltaXQgPSB0aGlzLm9wdGlvbnNbJ3JlY29ubmVjdGlvbiBsaW1pdCddO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJlc2V0ICgpIHtcclxuICAgICAgaWYgKHNlbGYuY29ubmVjdGVkKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSBpbiBzZWxmLm5hbWVzcGFjZXMpIHtcclxuICAgICAgICAgIGlmIChzZWxmLm5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkoaSkgJiYgJycgIT09IGkpIHtcclxuICAgICAgICAgICAgICBzZWxmLm5hbWVzcGFjZXNbaV0ucGFja2V0KHsgdHlwZTogJ2Nvbm5lY3QnIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzZWxmLnB1Ymxpc2goJ3JlY29ubmVjdCcsIHNlbGYudHJhbnNwb3J0Lm5hbWUsIHNlbGYucmVjb25uZWN0aW9uQXR0ZW1wdHMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjbGVhclRpbWVvdXQoc2VsZi5yZWNvbm5lY3Rpb25UaW1lcik7XHJcblxyXG4gICAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCdjb25uZWN0X2ZhaWxlZCcsIG1heWJlUmVjb25uZWN0KTtcclxuICAgICAgc2VsZi5yZW1vdmVMaXN0ZW5lcignY29ubmVjdCcsIG1heWJlUmVjb25uZWN0KTtcclxuXHJcbiAgICAgIHNlbGYucmVjb25uZWN0aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICBkZWxldGUgc2VsZi5yZWNvbm5lY3Rpb25BdHRlbXB0cztcclxuICAgICAgZGVsZXRlIHNlbGYucmVjb25uZWN0aW9uRGVsYXk7XHJcbiAgICAgIGRlbGV0ZSBzZWxmLnJlY29ubmVjdGlvblRpbWVyO1xyXG4gICAgICBkZWxldGUgc2VsZi5yZWRvVHJhbnNwb3J0cztcclxuXHJcbiAgICAgIHNlbGYub3B0aW9uc1sndHJ5IG11bHRpcGxlIHRyYW5zcG9ydHMnXSA9IHRyeU11bHRpcGxlO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBtYXliZVJlY29ubmVjdCAoKSB7XHJcbiAgICAgIGlmICghc2VsZi5yZWNvbm5lY3RpbmcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzZWxmLmNvbm5lY3RlZCkge1xyXG4gICAgICAgIHJldHVybiByZXNldCgpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgaWYgKHNlbGYuY29ubmVjdGluZyAmJiBzZWxmLnJlY29ubmVjdGluZykge1xyXG4gICAgICAgIHJldHVybiBzZWxmLnJlY29ubmVjdGlvblRpbWVyID0gc2V0VGltZW91dChtYXliZVJlY29ubmVjdCwgMTAwMCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzZWxmLnJlY29ubmVjdGlvbkF0dGVtcHRzKysgPj0gbWF4QXR0ZW1wdHMpIHtcclxuICAgICAgICBpZiAoIXNlbGYucmVkb1RyYW5zcG9ydHMpIHtcclxuICAgICAgICAgIHNlbGYub24oJ2Nvbm5lY3RfZmFpbGVkJywgbWF5YmVSZWNvbm5lY3QpO1xyXG4gICAgICAgICAgc2VsZi5vcHRpb25zWyd0cnkgbXVsdGlwbGUgdHJhbnNwb3J0cyddID0gdHJ1ZTtcclxuICAgICAgICAgIHNlbGYudHJhbnNwb3J0cyA9IHNlbGYub3JpZ1RyYW5zcG9ydHM7XHJcbiAgICAgICAgICBzZWxmLnRyYW5zcG9ydCA9IHNlbGYuZ2V0VHJhbnNwb3J0KCk7XHJcbiAgICAgICAgICBzZWxmLnJlZG9UcmFuc3BvcnRzID0gdHJ1ZTtcclxuICAgICAgICAgIHNlbGYuY29ubmVjdCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzZWxmLnB1Ymxpc2goJ3JlY29ubmVjdF9mYWlsZWQnKTtcclxuICAgICAgICAgIHJlc2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChzZWxmLnJlY29ubmVjdGlvbkRlbGF5IDwgbGltaXQpIHtcclxuICAgICAgICAgIHNlbGYucmVjb25uZWN0aW9uRGVsYXkgKj0gMjsgLy8gZXhwb25lbnRpYWwgYmFjayBvZmZcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYuY29ubmVjdCgpO1xyXG4gICAgICAgIHNlbGYucHVibGlzaCgncmVjb25uZWN0aW5nJywgc2VsZi5yZWNvbm5lY3Rpb25EZWxheSwgc2VsZi5yZWNvbm5lY3Rpb25BdHRlbXB0cyk7XHJcbiAgICAgICAgc2VsZi5yZWNvbm5lY3Rpb25UaW1lciA9IHNldFRpbWVvdXQobWF5YmVSZWNvbm5lY3QsIHNlbGYucmVjb25uZWN0aW9uRGVsYXkpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMub3B0aW9uc1sndHJ5IG11bHRpcGxlIHRyYW5zcG9ydHMnXSA9IGZhbHNlO1xyXG4gICAgdGhpcy5yZWNvbm5lY3Rpb25UaW1lciA9IHNldFRpbWVvdXQobWF5YmVSZWNvbm5lY3QsIHRoaXMucmVjb25uZWN0aW9uRGVsYXkpO1xyXG5cclxuICAgIHRoaXMub24oJ2Nvbm5lY3QnLCBtYXliZVJlY29ubmVjdCk7XHJcbiAgfTtcclxuXHJcbn0pKFxyXG4gICAgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGlvID8gaW8gOiBtb2R1bGUuZXhwb3J0c1xyXG4gICwgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGlvID8gaW8gOiBtb2R1bGUucGFyZW50LmV4cG9ydHNcclxuICAsIHRoaXNcclxuKTtcclxuLyoqXHJcbiAqIHNvY2tldC5pb1xyXG4gKiBDb3B5cmlnaHQoYykgMjAxMSBMZWFybkJvb3N0IDxkZXZAbGVhcm5ib29zdC5jb20+XHJcbiAqIE1JVCBMaWNlbnNlZFxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoZXhwb3J0cywgaW8pIHtcclxuXHJcbiAgLyoqXHJcbiAgICogRXhwb3NlIGNvbnN0cnVjdG9yLlxyXG4gICAqL1xyXG5cclxuICBleHBvcnRzLlNvY2tldE5hbWVzcGFjZSA9IFNvY2tldE5hbWVzcGFjZTtcclxuXHJcbiAgLyoqXHJcbiAgICogU29ja2V0IG5hbWVzcGFjZSBjb25zdHJ1Y3Rvci5cclxuICAgKlxyXG4gICAqIEBjb25zdHJ1Y3RvclxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIGZ1bmN0aW9uIFNvY2tldE5hbWVzcGFjZSAoc29ja2V0LCBuYW1lKSB7XHJcbiAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcclxuICAgIHRoaXMubmFtZSA9IG5hbWUgfHwgJyc7XHJcbiAgICB0aGlzLmZsYWdzID0ge307XHJcbiAgICB0aGlzLmpzb24gPSBuZXcgRmxhZyh0aGlzLCAnanNvbicpO1xyXG4gICAgdGhpcy5hY2tQYWNrZXRzID0gMDtcclxuICAgIHRoaXMuYWNrcyA9IHt9O1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGx5IEV2ZW50RW1pdHRlciBtaXhpbi5cclxuICAgKi9cclxuXHJcbiAgaW8udXRpbC5taXhpbihTb2NrZXROYW1lc3BhY2UsIGlvLkV2ZW50RW1pdHRlcik7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvcGllcyBlbWl0IHNpbmNlIHdlIG92ZXJyaWRlIGl0XHJcbiAgICpcclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgU29ja2V0TmFtZXNwYWNlLnByb3RvdHlwZS4kZW1pdCA9IGlvLkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdDtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG5ldyBuYW1lc3BhY2UsIGJ5IHByb3h5aW5nIHRoZSByZXF1ZXN0IHRvIHRoZSBzb2NrZXQuIFRoaXNcclxuICAgKiBhbGxvd3MgdXMgdG8gdXNlIHRoZSBzeW5heCBhcyB3ZSBkbyBvbiB0aGUgc2VydmVyLlxyXG4gICAqXHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgU29ja2V0TmFtZXNwYWNlLnByb3RvdHlwZS5vZiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLnNvY2tldC5vZi5hcHBseSh0aGlzLnNvY2tldCwgYXJndW1lbnRzKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBTZW5kcyBhIHBhY2tldC5cclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBTb2NrZXROYW1lc3BhY2UucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcclxuICAgIHBhY2tldC5lbmRwb2ludCA9IHRoaXMubmFtZTtcclxuICAgIHRoaXMuc29ja2V0LnBhY2tldChwYWNrZXQpO1xyXG4gICAgdGhpcy5mbGFncyA9IHt9O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogU2VuZHMgYSBtZXNzYWdlXHJcbiAgICpcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBTb2NrZXROYW1lc3BhY2UucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoZGF0YSwgZm4pIHtcclxuICAgIHZhciBwYWNrZXQgPSB7XHJcbiAgICAgICAgdHlwZTogdGhpcy5mbGFncy5qc29uID8gJ2pzb24nIDogJ21lc3NhZ2UnXHJcbiAgICAgICwgZGF0YTogZGF0YVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgZm4pIHtcclxuICAgICAgcGFja2V0LmlkID0gKyt0aGlzLmFja1BhY2tldHM7XHJcbiAgICAgIHBhY2tldC5hY2sgPSB0cnVlO1xyXG4gICAgICB0aGlzLmFja3NbcGFja2V0LmlkXSA9IGZuO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLnBhY2tldChwYWNrZXQpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEVtaXRzIGFuIGV2ZW50XHJcbiAgICpcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG4gIFxyXG4gIFNvY2tldE5hbWVzcGFjZS5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcclxuICAgICAgLCBsYXN0QXJnID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdXHJcbiAgICAgICwgcGFja2V0ID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnZXZlbnQnXHJcbiAgICAgICAgICAsIG5hbWU6IG5hbWVcclxuICAgICAgICB9O1xyXG5cclxuICAgIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBsYXN0QXJnKSB7XHJcbiAgICAgIHBhY2tldC5pZCA9ICsrdGhpcy5hY2tQYWNrZXRzO1xyXG4gICAgICBwYWNrZXQuYWNrID0gJ2RhdGEnO1xyXG4gICAgICB0aGlzLmFja3NbcGFja2V0LmlkXSA9IGxhc3RBcmc7XHJcbiAgICAgIGFyZ3MgPSBhcmdzLnNsaWNlKDAsIGFyZ3MubGVuZ3RoIC0gMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcGFja2V0LmFyZ3MgPSBhcmdzO1xyXG5cclxuICAgIHJldHVybiB0aGlzLnBhY2tldChwYWNrZXQpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc2Nvbm5lY3RzIHRoZSBuYW1lc3BhY2VcclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBTb2NrZXROYW1lc3BhY2UucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5uYW1lID09PSAnJykge1xyXG4gICAgICB0aGlzLnNvY2tldC5kaXNjb25uZWN0KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnBhY2tldCh7IHR5cGU6ICdkaXNjb25uZWN0JyB9KTtcclxuICAgICAgdGhpcy4kZW1pdCgnZGlzY29ubmVjdCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEhhbmRsZXMgYSBwYWNrZXRcclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBTb2NrZXROYW1lc3BhY2UucHJvdG90eXBlLm9uUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFjayAoKSB7XHJcbiAgICAgIHNlbGYucGFja2V0KHtcclxuICAgICAgICAgIHR5cGU6ICdhY2snXHJcbiAgICAgICAgLCBhcmdzOiBpby51dGlsLnRvQXJyYXkoYXJndW1lbnRzKVxyXG4gICAgICAgICwgYWNrSWQ6IHBhY2tldC5pZFxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xyXG4gICAgICBjYXNlICdjb25uZWN0JzpcclxuICAgICAgICB0aGlzLiRlbWl0KCdjb25uZWN0Jyk7XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlICdkaXNjb25uZWN0JzpcclxuICAgICAgICBpZiAodGhpcy5uYW1lID09PSAnJykge1xyXG4gICAgICAgICAgdGhpcy5zb2NrZXQub25EaXNjb25uZWN0KHBhY2tldC5yZWFzb24gfHwgJ2Jvb3RlZCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLiRlbWl0KCdkaXNjb25uZWN0JywgcGFja2V0LnJlYXNvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnbWVzc2FnZSc6XHJcbiAgICAgIGNhc2UgJ2pzb24nOlxyXG4gICAgICAgIHZhciBwYXJhbXMgPSBbJ21lc3NhZ2UnLCBwYWNrZXQuZGF0YV07XHJcblxyXG4gICAgICAgIGlmIChwYWNrZXQuYWNrID09ICdkYXRhJykge1xyXG4gICAgICAgICAgcGFyYW1zLnB1c2goYWNrKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHBhY2tldC5hY2spIHtcclxuICAgICAgICAgIHRoaXMucGFja2V0KHsgdHlwZTogJ2FjaycsIGFja0lkOiBwYWNrZXQuaWQgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLiRlbWl0LmFwcGx5KHRoaXMsIHBhcmFtcyk7XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlICdldmVudCc6XHJcbiAgICAgICAgdmFyIHBhcmFtcyA9IFtwYWNrZXQubmFtZV0uY29uY2F0KHBhY2tldC5hcmdzKTtcclxuXHJcbiAgICAgICAgaWYgKHBhY2tldC5hY2sgPT0gJ2RhdGEnKVxyXG4gICAgICAgICAgcGFyYW1zLnB1c2goYWNrKTtcclxuXHJcbiAgICAgICAgdGhpcy4kZW1pdC5hcHBseSh0aGlzLCBwYXJhbXMpO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnYWNrJzpcclxuICAgICAgICBpZiAodGhpcy5hY2tzW3BhY2tldC5hY2tJZF0pIHtcclxuICAgICAgICAgIHRoaXMuYWNrc1twYWNrZXQuYWNrSWRdLmFwcGx5KHRoaXMsIHBhY2tldC5hcmdzKTtcclxuICAgICAgICAgIGRlbGV0ZSB0aGlzLmFja3NbcGFja2V0LmFja0lkXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlICdlcnJvcic6XHJcbiAgICAgICAgaWYgKHBhY2tldC5hZHZpY2Upe1xyXG4gICAgICAgICAgdGhpcy5zb2NrZXQub25FcnJvcihwYWNrZXQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAocGFja2V0LnJlYXNvbiA9PSAndW5hdXRob3JpemVkJykge1xyXG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdjb25uZWN0X2ZhaWxlZCcsIHBhY2tldC5yZWFzb24pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4kZW1pdCgnZXJyb3InLCBwYWNrZXQucmVhc29uKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogRmxhZyBpbnRlcmZhY2UuXHJcbiAgICpcclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgZnVuY3Rpb24gRmxhZyAobnNwLCBuYW1lKSB7XHJcbiAgICB0aGlzLm5hbWVzcGFjZSA9IG5zcDtcclxuICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogU2VuZCBhIG1lc3NhZ2VcclxuICAgKlxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIEZsYWcucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLm5hbWVzcGFjZS5mbGFnc1t0aGlzLm5hbWVdID0gdHJ1ZTtcclxuICAgIHRoaXMubmFtZXNwYWNlLnNlbmQuYXBwbHkodGhpcy5uYW1lc3BhY2UsIGFyZ3VtZW50cyk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogRW1pdCBhbiBldmVudFxyXG4gICAqXHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgRmxhZy5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMubmFtZXNwYWNlLmZsYWdzW3RoaXMubmFtZV0gPSB0cnVlO1xyXG4gICAgdGhpcy5uYW1lc3BhY2UuZW1pdC5hcHBseSh0aGlzLm5hbWVzcGFjZSwgYXJndW1lbnRzKTtcclxuICB9O1xyXG5cclxufSkoXHJcbiAgICAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5leHBvcnRzXHJcbiAgLCAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5wYXJlbnQuZXhwb3J0c1xyXG4pO1xyXG5cclxuLyoqXHJcbiAqIHNvY2tldC5pb1xyXG4gKiBDb3B5cmlnaHQoYykgMjAxMSBMZWFybkJvb3N0IDxkZXZAbGVhcm5ib29zdC5jb20+XHJcbiAqIE1JVCBMaWNlbnNlZFxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoZXhwb3J0cywgaW8sIGdsb2JhbCkge1xyXG5cclxuICAvKipcclxuICAgKiBFeHBvc2UgY29uc3RydWN0b3IuXHJcbiAgICovXHJcblxyXG4gIGV4cG9ydHMud2Vic29ja2V0ID0gV1M7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBXZWJTb2NrZXQgdHJhbnNwb3J0IHVzZXMgdGhlIEhUTUw1IFdlYlNvY2tldCBBUEkgdG8gZXN0YWJsaXNoIGFuXHJcbiAgICogcGVyc2lzdGVudCBjb25uZWN0aW9uIHdpdGggdGhlIFNvY2tldC5JTyBzZXJ2ZXIuIFRoaXMgdHJhbnNwb3J0IHdpbGwgYWxzb1xyXG4gICAqIGJlIGluaGVyaXRlZCBieSB0aGUgRmxhc2hTb2NrZXQgZmFsbGJhY2sgYXMgaXQgcHJvdmlkZXMgYSBBUEkgY29tcGF0aWJsZVxyXG4gICAqIHBvbHlmaWxsIGZvciB0aGUgV2ViU29ja2V0cy5cclxuICAgKlxyXG4gICAqIEBjb25zdHJ1Y3RvclxyXG4gICAqIEBleHRlbmRzIHtpby5UcmFuc3BvcnR9XHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgZnVuY3Rpb24gV1MgKHNvY2tldCkge1xyXG4gICAgaW8uVHJhbnNwb3J0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogSW5oZXJpdHMgZnJvbSBUcmFuc3BvcnQuXHJcbiAgICovXHJcblxyXG4gIGlvLnV0aWwuaW5oZXJpdChXUywgaW8uVHJhbnNwb3J0KTtcclxuXHJcbiAgLyoqXHJcbiAgICogVHJhbnNwb3J0IG5hbWVcclxuICAgKlxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIFdTLnByb3RvdHlwZS5uYW1lID0gJ3dlYnNvY2tldCc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemVzIGEgbmV3IGBXZWJTb2NrZXRgIGNvbm5lY3Rpb24gd2l0aCB0aGUgU29ja2V0LklPIHNlcnZlci4gV2UgYXR0YWNoXHJcbiAgICogYWxsIHRoZSBhcHByb3ByaWF0ZSBsaXN0ZW5lcnMgdG8gaGFuZGxlIHRoZSByZXNwb25zZXMgZnJvbSB0aGUgc2VydmVyLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1RyYW5zcG9ydH1cclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBXUy5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBxdWVyeSA9IGlvLnV0aWwucXVlcnkodGhpcy5zb2NrZXQub3B0aW9ucy5xdWVyeSlcclxuICAgICAgLCBzZWxmID0gdGhpc1xyXG4gICAgICAsIFNvY2tldFxyXG5cclxuXHJcbiAgICBpZiAoIVNvY2tldCkge1xyXG4gICAgICBTb2NrZXQgPSBnbG9iYWwuTW96V2ViU29ja2V0IHx8IGdsb2JhbC5XZWJTb2NrZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy53ZWJzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMucHJlcGFyZVVybCgpICsgcXVlcnkpO1xyXG5cclxuICAgIHRoaXMud2Vic29ja2V0Lm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi5vbk9wZW4oKTtcclxuICAgICAgc2VsZi5zb2NrZXQuc2V0QnVmZmVyKGZhbHNlKTtcclxuICAgIH07XHJcbiAgICB0aGlzLndlYnNvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXYpIHtcclxuICAgICAgc2VsZi5vbkRhdGEoZXYuZGF0YSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy53ZWJzb2NrZXQub25jbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi5vbkNsb3NlKCk7XHJcbiAgICAgIHNlbGYuc29ja2V0LnNldEJ1ZmZlcih0cnVlKTtcclxuICAgIH07XHJcbiAgICB0aGlzLndlYnNvY2tldC5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgc2VsZi5vbkVycm9yKGUpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBTZW5kIGEgbWVzc2FnZSB0byB0aGUgU29ja2V0LklPIHNlcnZlci4gVGhlIG1lc3NhZ2Ugd2lsbCBhdXRvbWF0aWNhbGx5IGJlXHJcbiAgICogZW5jb2RlZCBpbiB0aGUgY29ycmVjdCBtZXNzYWdlIGZvcm1hdC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtUcmFuc3BvcnR9XHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgLy8gRG8gdG8gYSBidWcgaW4gdGhlIGN1cnJlbnQgSURldmljZXMgYnJvd3Nlciwgd2UgbmVlZCB0byB3cmFwIHRoZSBzZW5kIGluIGEgXHJcbiAgLy8gc2V0VGltZW91dCwgd2hlbiB0aGV5IHJlc3VtZSBmcm9tIHNsZWVwaW5nIHRoZSBicm93c2VyIHdpbGwgY3Jhc2ggaWYgXHJcbiAgLy8gd2UgZG9uJ3QgYWxsb3cgdGhlIGJyb3dzZXIgdGltZSB0byBkZXRlY3QgdGhlIHNvY2tldCBoYXMgYmVlbiBjbG9zZWRcclxuICBpZiAoaW8udXRpbC51YS5pRGV2aWNlKSB7XHJcbiAgICBXUy5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgc2VsZi53ZWJzb2NrZXQuc2VuZChkYXRhKTtcclxuICAgICAgfSwwKTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gIH0gZWxzZSB7XHJcbiAgICBXUy5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgIHRoaXMud2Vic29ja2V0LnNlbmQoZGF0YSk7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBheWxvYWRcclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBXUy5wcm90b3R5cGUucGF5bG9hZCA9IGZ1bmN0aW9uIChhcnIpIHtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICB0aGlzLnBhY2tldChhcnJbaV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogRGlzY29ubmVjdCB0aGUgZXN0YWJsaXNoZWQgYFdlYlNvY2tldGAgY29ubmVjdGlvbi5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtUcmFuc3BvcnR9XHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgV1MucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy53ZWJzb2NrZXQuY2xvc2UoKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEhhbmRsZSB0aGUgZXJyb3JzIHRoYXQgYFdlYlNvY2tldGAgbWlnaHQgYmUgZ2l2aW5nIHdoZW4gd2VcclxuICAgKiBhcmUgYXR0ZW1wdGluZyB0byBjb25uZWN0IG9yIHNlbmQgbWVzc2FnZXMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0Vycm9yfSBlIFRoZSBlcnJvci5cclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgV1MucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgdGhpcy5zb2NrZXQub25FcnJvcihlKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBhcHByb3ByaWF0ZSBzY2hlbWUgZm9yIHRoZSBVUkkgZ2VuZXJhdGlvbi5cclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG4gIFdTLnByb3RvdHlwZS5zY2hlbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zb2NrZXQub3B0aW9ucy5zZWN1cmUgPyAnd3NzJyA6ICd3cyc7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2tzIGlmIHRoZSBicm93c2VyIGhhcyBzdXBwb3J0IGZvciBuYXRpdmUgYFdlYlNvY2tldHNgIGFuZCB0aGF0XHJcbiAgICogaXQncyBub3QgdGhlIHBvbHlmaWxsIGNyZWF0ZWQgZm9yIHRoZSBGbGFzaFNvY2tldCB0cmFuc3BvcnQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIFdTLmNoZWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICgnV2ViU29ja2V0JyBpbiBnbG9iYWwgJiYgISgnX19hZGRUYXNrJyBpbiBXZWJTb2NrZXQpKVxyXG4gICAgICAgICAgfHwgJ01veldlYlNvY2tldCcgaW4gZ2xvYmFsO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIHRoZSBgV2ViU29ja2V0YCB0cmFuc3BvcnQgc3VwcG9ydCBjcm9zcyBkb21haW4gY29tbXVuaWNhdGlvbnMuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBXUy54ZG9tYWluQ2hlY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBBZGQgdGhlIHRyYW5zcG9ydCB0byB5b3VyIHB1YmxpYyBpby50cmFuc3BvcnRzIGFycmF5LlxyXG4gICAqXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIGlvLnRyYW5zcG9ydHMucHVzaCgnd2Vic29ja2V0Jyk7XHJcblxyXG59KShcclxuICAgICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvLlRyYW5zcG9ydCA6IG1vZHVsZS5leHBvcnRzXHJcbiAgLCAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5wYXJlbnQuZXhwb3J0c1xyXG4gICwgdGhpc1xyXG4pO1xyXG5cclxuLyoqXHJcbiAqIHNvY2tldC5pb1xyXG4gKiBDb3B5cmlnaHQoYykgMjAxMSBMZWFybkJvb3N0IDxkZXZAbGVhcm5ib29zdC5jb20+XHJcbiAqIE1JVCBMaWNlbnNlZFxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoZXhwb3J0cywgaW8pIHtcclxuXHJcbiAgLyoqXHJcbiAgICogRXhwb3NlIGNvbnN0cnVjdG9yLlxyXG4gICAqL1xyXG5cclxuICBleHBvcnRzLmZsYXNoc29ja2V0ID0gRmxhc2hzb2NrZXQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBGbGFzaFNvY2tldCB0cmFuc3BvcnQuIFRoaXMgaXMgYSBBUEkgd3JhcHBlciBmb3IgdGhlIEhUTUw1IFdlYlNvY2tldFxyXG4gICAqIHNwZWNpZmljYXRpb24uIEl0IHVzZXMgYSAuc3dmIGZpbGUgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgc2VydmVyLiBJZiB5b3Ugd2FudFxyXG4gICAqIHRvIHNlcnZlIHRoZSAuc3dmIGZpbGUgZnJvbSBhIG90aGVyIHNlcnZlciB0aGFuIHdoZXJlIHRoZSBTb2NrZXQuSU8gc2NyaXB0IGlzXHJcbiAgICogY29taW5nIGZyb20geW91IG5lZWQgdG8gdXNlIHRoZSBpbnNlY3VyZSB2ZXJzaW9uIG9mIHRoZSAuc3dmLiBNb3JlIGluZm9ybWF0aW9uXHJcbiAgICogYWJvdXQgdGhpcyBjYW4gYmUgZm91bmQgb24gdGhlIGdpdGh1YiBwYWdlLlxyXG4gICAqXHJcbiAgICogQGNvbnN0cnVjdG9yXHJcbiAgICogQGV4dGVuZHMge2lvLlRyYW5zcG9ydC53ZWJzb2NrZXR9XHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgZnVuY3Rpb24gRmxhc2hzb2NrZXQgKCkge1xyXG4gICAgaW8uVHJhbnNwb3J0LndlYnNvY2tldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaGVyaXRzIGZyb20gVHJhbnNwb3J0LlxyXG4gICAqL1xyXG5cclxuICBpby51dGlsLmluaGVyaXQoRmxhc2hzb2NrZXQsIGlvLlRyYW5zcG9ydC53ZWJzb2NrZXQpO1xyXG5cclxuICAvKipcclxuICAgKiBUcmFuc3BvcnQgbmFtZVxyXG4gICAqXHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgRmxhc2hzb2NrZXQucHJvdG90eXBlLm5hbWUgPSAnZmxhc2hzb2NrZXQnO1xyXG5cclxuICAvKipcclxuICAgKiBEaXNjb25uZWN0IHRoZSBlc3RhYmxpc2hlZCBgRmxhc2hTb2NrZXRgIGNvbm5lY3Rpb24uIFRoaXMgaXMgZG9uZSBieSBhZGRpbmcgYSBcclxuICAgKiBuZXcgdGFzayB0byB0aGUgRmxhc2hTb2NrZXQuIFRoZSByZXN0IHdpbGwgYmUgaGFuZGxlZCBvZmYgYnkgdGhlIGBXZWJTb2NrZXRgIFxyXG4gICAqIHRyYW5zcG9ydC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtUcmFuc3BvcnR9XHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgRmxhc2hzb2NrZXQucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXNcclxuICAgICAgLCBhcmdzID0gYXJndW1lbnRzO1xyXG5cclxuICAgIFdlYlNvY2tldC5fX2FkZFRhc2soZnVuY3Rpb24gKCkge1xyXG4gICAgICBpby5UcmFuc3BvcnQud2Vic29ja2V0LnByb3RvdHlwZS5vcGVuLmFwcGx5KHNlbGYsIGFyZ3MpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG4gIFxyXG4gIC8qKlxyXG4gICAqIFNlbmRzIGEgbWVzc2FnZSB0byB0aGUgU29ja2V0LklPIHNlcnZlci4gVGhpcyBpcyBkb25lIGJ5IGFkZGluZyBhIG5ld1xyXG4gICAqIHRhc2sgdG8gdGhlIEZsYXNoU29ja2V0LiBUaGUgcmVzdCB3aWxsIGJlIGhhbmRsZWQgb2ZmIGJ5IHRoZSBgV2ViU29ja2V0YCBcclxuICAgKiB0cmFuc3BvcnQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7VHJhbnNwb3J0fVxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIEZsYXNoc29ja2V0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xyXG4gICAgV2ViU29ja2V0Ll9fYWRkVGFzayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlvLlRyYW5zcG9ydC53ZWJzb2NrZXQucHJvdG90eXBlLnNlbmQuYXBwbHkoc2VsZiwgYXJncyk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc2Nvbm5lY3RzIHRoZSBlc3RhYmxpc2hlZCBgRmxhc2hTb2NrZXRgIGNvbm5lY3Rpb24uXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7VHJhbnNwb3J0fVxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIEZsYXNoc29ja2V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFdlYlNvY2tldC5fX3Rhc2tzLmxlbmd0aCA9IDA7XHJcbiAgICBpby5UcmFuc3BvcnQud2Vic29ja2V0LnByb3RvdHlwZS5jbG9zZS5jYWxsKHRoaXMpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIFdlYlNvY2tldCBmYWxsIGJhY2sgbmVlZHMgdG8gYXBwZW5kIHRoZSBmbGFzaCBjb250YWluZXIgdG8gdGhlIGJvZHlcclxuICAgKiBlbGVtZW50LCBzbyB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB3ZSBoYXZlIGFjY2VzcyB0byBpdC4gT3IgZGVmZXIgdGhlIGNhbGxcclxuICAgKiB1bnRpbCB3ZSBhcmUgc3VyZSB0aGVyZSBpcyBhIGJvZHkgZWxlbWVudC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7U29ja2V0fSBzb2NrZXQgVGhlIHNvY2tldCBpbnN0YW5jZSB0aGF0IG5lZWRzIGEgdHJhbnNwb3J0XHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIEZsYXNoc29ja2V0LnByb3RvdHlwZS5yZWFkeSA9IGZ1bmN0aW9uIChzb2NrZXQsIGZuKSB7XHJcbiAgICBmdW5jdGlvbiBpbml0ICgpIHtcclxuICAgICAgdmFyIG9wdGlvbnMgPSBzb2NrZXQub3B0aW9uc1xyXG4gICAgICAgICwgcG9ydCA9IG9wdGlvbnNbJ2ZsYXNoIHBvbGljeSBwb3J0J11cclxuICAgICAgICAsIHBhdGggPSBbXHJcbiAgICAgICAgICAgICAgJ2h0dHAnICsgKG9wdGlvbnMuc2VjdXJlID8gJ3MnIDogJycpICsgJzovJ1xyXG4gICAgICAgICAgICAsIG9wdGlvbnMuaG9zdCArICc6JyArIG9wdGlvbnMucG9ydFxyXG4gICAgICAgICAgICAsIG9wdGlvbnMucmVzb3VyY2VcclxuICAgICAgICAgICAgLCAnc3RhdGljL2ZsYXNoc29ja2V0J1xyXG4gICAgICAgICAgICAsICdXZWJTb2NrZXRNYWluJyArIChzb2NrZXQuaXNYRG9tYWluKCkgPyAnSW5zZWN1cmUnIDogJycpICsgJy5zd2YnXHJcbiAgICAgICAgICBdO1xyXG5cclxuICAgICAgLy8gT25seSBzdGFydCBkb3dubG9hZGluZyB0aGUgc3dmIGZpbGUgd2hlbiB0aGUgY2hlY2tlZCB0aGF0IHRoaXMgYnJvd3NlclxyXG4gICAgICAvLyBhY3R1YWxseSBzdXBwb3J0cyBpdFxyXG4gICAgICBpZiAoIUZsYXNoc29ja2V0LmxvYWRlZCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgV0VCX1NPQ0tFVF9TV0ZfTE9DQVRJT04gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAvLyBTZXQgdGhlIGNvcnJlY3QgZmlsZSBiYXNlZCBvbiB0aGUgWERvbWFpbiBzZXR0aW5nc1xyXG4gICAgICAgICAgV0VCX1NPQ0tFVF9TV0ZfTE9DQVRJT04gPSBwYXRoLmpvaW4oJy8nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwb3J0ICE9PSA4NDMpIHtcclxuICAgICAgICAgIFdlYlNvY2tldC5sb2FkRmxhc2hQb2xpY3lGaWxlKCd4bWxzb2NrZXQ6Ly8nICsgb3B0aW9ucy5ob3N0ICsgJzonICsgcG9ydCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBXZWJTb2NrZXQuX19pbml0aWFsaXplKCk7XHJcbiAgICAgICAgRmxhc2hzb2NrZXQubG9hZGVkID0gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZm4uY2FsbChzZWxmKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBpZiAoZG9jdW1lbnQuYm9keSkgcmV0dXJuIGluaXQoKTtcclxuXHJcbiAgICBpby51dGlsLmxvYWQoaW5pdCk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgdGhlIEZsYXNoU29ja2V0IHRyYW5zcG9ydCBpcyBzdXBwb3J0ZWQgYXMgaXQgcmVxdWlyZXMgdGhhdCB0aGUgQWRvYmVcclxuICAgKiBGbGFzaCBQbGF5ZXIgcGx1Zy1pbiB2ZXJzaW9uIGAxMC4wLjBgIG9yIGdyZWF0ZXIgaXMgaW5zdGFsbGVkLiBBbmQgYWxzbyBjaGVjayBpZlxyXG4gICAqIHRoZSBwb2x5ZmlsbCBpcyBjb3JyZWN0bHkgbG9hZGVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgRmxhc2hzb2NrZXQuY2hlY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgICAgdHlwZW9mIFdlYlNvY2tldCA9PSAndW5kZWZpbmVkJ1xyXG4gICAgICB8fCAhKCdfX2luaXRpYWxpemUnIGluIFdlYlNvY2tldCkgfHwgIXN3Zm9iamVjdFxyXG4gICAgKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgcmV0dXJuIHN3Zm9iamVjdC5nZXRGbGFzaFBsYXllclZlcnNpb24oKS5tYWpvciA+PSAxMDtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiB0aGUgRmxhc2hTb2NrZXQgdHJhbnNwb3J0IGNhbiBiZSB1c2VkIGFzIGNyb3NzIGRvbWFpbiAvIGNyb3NzIG9yaWdpbiBcclxuICAgKiB0cmFuc3BvcnQuIEJlY2F1c2Ugd2UgY2FuJ3Qgc2VlIHdoaWNoIHR5cGUgKHNlY3VyZSBvciBpbnNlY3VyZSkgb2YgLnN3ZiBpcyB1c2VkXHJcbiAgICogd2Ugd2lsbCBqdXN0IHJldHVybiB0cnVlLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgRmxhc2hzb2NrZXQueGRvbWFpbkNoZWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogRGlzYWJsZSBBVVRPX0lOSVRJQUxJWkFUSU9OXHJcbiAgICovXHJcblxyXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnKSB7XHJcbiAgICBXRUJfU09DS0VUX0RJU0FCTEVfQVVUT19JTklUSUFMSVpBVElPTiA9IHRydWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGQgdGhlIHRyYW5zcG9ydCB0byB5b3VyIHB1YmxpYyBpby50cmFuc3BvcnRzIGFycmF5LlxyXG4gICAqXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIGlvLnRyYW5zcG9ydHMucHVzaCgnZmxhc2hzb2NrZXQnKTtcclxufSkoXHJcbiAgICAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpby5UcmFuc3BvcnQgOiBtb2R1bGUuZXhwb3J0c1xyXG4gICwgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGlvID8gaW8gOiBtb2R1bGUucGFyZW50LmV4cG9ydHNcclxuKTtcclxuLypcdFNXRk9iamVjdCB2Mi4yIDxodHRwOi8vY29kZS5nb29nbGUuY29tL3Avc3dmb2JqZWN0Lz4gXHJcblx0aXMgcmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIDxodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocD4gXHJcbiovXHJcbmlmICgndW5kZWZpbmVkJyAhPSB0eXBlb2Ygd2luZG93KSB7XHJcbnZhciBzd2ZvYmplY3Q9ZnVuY3Rpb24oKXt2YXIgRD1cInVuZGVmaW5lZFwiLHI9XCJvYmplY3RcIixTPVwiU2hvY2t3YXZlIEZsYXNoXCIsVz1cIlNob2Nrd2F2ZUZsYXNoLlNob2Nrd2F2ZUZsYXNoXCIscT1cImFwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoXCIsUj1cIlNXRk9iamVjdEV4cHJJbnN0XCIseD1cIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLE89d2luZG93LGo9ZG9jdW1lbnQsdD1uYXZpZ2F0b3IsVD1mYWxzZSxVPVtoXSxvPVtdLE49W10sST1bXSxsLFEsRSxCLEo9ZmFsc2UsYT1mYWxzZSxuLEcsbT10cnVlLE09ZnVuY3Rpb24oKXt2YXIgYWE9dHlwZW9mIGouZ2V0RWxlbWVudEJ5SWQhPUQmJnR5cGVvZiBqLmdldEVsZW1lbnRzQnlUYWdOYW1lIT1EJiZ0eXBlb2Ygai5jcmVhdGVFbGVtZW50IT1ELGFoPXQudXNlckFnZW50LnRvTG93ZXJDYXNlKCksWT10LnBsYXRmb3JtLnRvTG93ZXJDYXNlKCksYWU9WT8vd2luLy50ZXN0KFkpOi93aW4vLnRlc3QoYWgpLGFjPVk/L21hYy8udGVzdChZKTovbWFjLy50ZXN0KGFoKSxhZj0vd2Via2l0Ly50ZXN0KGFoKT9wYXJzZUZsb2F0KGFoLnJlcGxhY2UoL14uKndlYmtpdFxcLyhcXGQrKFxcLlxcZCspPykuKiQvLFwiJDFcIikpOmZhbHNlLFg9IStcIlxcdjFcIixhZz1bMCwwLDBdLGFiPW51bGw7aWYodHlwZW9mIHQucGx1Z2lucyE9RCYmdHlwZW9mIHQucGx1Z2luc1tTXT09cil7YWI9dC5wbHVnaW5zW1NdLmRlc2NyaXB0aW9uO2lmKGFiJiYhKHR5cGVvZiB0Lm1pbWVUeXBlcyE9RCYmdC5taW1lVHlwZXNbcV0mJiF0Lm1pbWVUeXBlc1txXS5lbmFibGVkUGx1Z2luKSl7VD10cnVlO1g9ZmFsc2U7YWI9YWIucmVwbGFjZSgvXi4qXFxzKyhcXFMrXFxzK1xcUyskKS8sXCIkMVwiKTthZ1swXT1wYXJzZUludChhYi5yZXBsYWNlKC9eKC4qKVxcLi4qJC8sXCIkMVwiKSwxMCk7YWdbMV09cGFyc2VJbnQoYWIucmVwbGFjZSgvXi4qXFwuKC4qKVxccy4qJC8sXCIkMVwiKSwxMCk7YWdbMl09L1thLXpBLVpdLy50ZXN0KGFiKT9wYXJzZUludChhYi5yZXBsYWNlKC9eLipbYS16QS1aXSsoLiopJC8sXCIkMVwiKSwxMCk6MH19ZWxzZXtpZih0eXBlb2YgT1soWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKSldIT1EKXt0cnl7dmFyIGFkPW5ldyB3aW5kb3dbKFsnQWN0aXZlJ10uY29uY2F0KCdPYmplY3QnKS5qb2luKCdYJykpXShXKTtpZihhZCl7YWI9YWQuR2V0VmFyaWFibGUoXCIkdmVyc2lvblwiKTtpZihhYil7WD10cnVlO2FiPWFiLnNwbGl0KFwiIFwiKVsxXS5zcGxpdChcIixcIik7YWc9W3BhcnNlSW50KGFiWzBdLDEwKSxwYXJzZUludChhYlsxXSwxMCkscGFyc2VJbnQoYWJbMl0sMTApXX19fWNhdGNoKFope319fXJldHVybnt3MzphYSxwdjphZyx3azphZixpZTpYLHdpbjphZSxtYWM6YWN9fSgpLGs9ZnVuY3Rpb24oKXtpZighTS53Myl7cmV0dXJufWlmKCh0eXBlb2Ygai5yZWFkeVN0YXRlIT1EJiZqLnJlYWR5U3RhdGU9PVwiY29tcGxldGVcIil8fCh0eXBlb2Ygai5yZWFkeVN0YXRlPT1EJiYoai5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF18fGouYm9keSkpKXtmKCl9aWYoIUope2lmKHR5cGVvZiBqLmFkZEV2ZW50TGlzdGVuZXIhPUQpe2ouYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixmLGZhbHNlKX1pZihNLmllJiZNLndpbil7ai5hdHRhY2hFdmVudCh4LGZ1bmN0aW9uKCl7aWYoai5yZWFkeVN0YXRlPT1cImNvbXBsZXRlXCIpe2ouZGV0YWNoRXZlbnQoeCxhcmd1bWVudHMuY2FsbGVlKTtmKCl9fSk7aWYoTz09dG9wKXsoZnVuY3Rpb24oKXtpZihKKXtyZXR1cm59dHJ5e2ouZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsKFwibGVmdFwiKX1jYXRjaChYKXtzZXRUaW1lb3V0KGFyZ3VtZW50cy5jYWxsZWUsMCk7cmV0dXJufWYoKX0pKCl9fWlmKE0ud2speyhmdW5jdGlvbigpe2lmKEope3JldHVybn1pZighL2xvYWRlZHxjb21wbGV0ZS8udGVzdChqLnJlYWR5U3RhdGUpKXtzZXRUaW1lb3V0KGFyZ3VtZW50cy5jYWxsZWUsMCk7cmV0dXJufWYoKX0pKCl9cyhmKX19KCk7ZnVuY3Rpb24gZigpe2lmKEope3JldHVybn10cnl7dmFyIFo9ai5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF0uYXBwZW5kQ2hpbGQoQyhcInNwYW5cIikpO1oucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChaKX1jYXRjaChhYSl7cmV0dXJufUo9dHJ1ZTt2YXIgWD1VLmxlbmd0aDtmb3IodmFyIFk9MDtZPFg7WSsrKXtVW1ldKCl9fWZ1bmN0aW9uIEsoWCl7aWYoSil7WCgpfWVsc2V7VVtVLmxlbmd0aF09WH19ZnVuY3Rpb24gcyhZKXtpZih0eXBlb2YgTy5hZGRFdmVudExpc3RlbmVyIT1EKXtPLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsWSxmYWxzZSl9ZWxzZXtpZih0eXBlb2Ygai5hZGRFdmVudExpc3RlbmVyIT1EKXtqLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsWSxmYWxzZSl9ZWxzZXtpZih0eXBlb2YgTy5hdHRhY2hFdmVudCE9RCl7aShPLFwib25sb2FkXCIsWSl9ZWxzZXtpZih0eXBlb2YgTy5vbmxvYWQ9PVwiZnVuY3Rpb25cIil7dmFyIFg9Ty5vbmxvYWQ7Ty5vbmxvYWQ9ZnVuY3Rpb24oKXtYKCk7WSgpfX1lbHNle08ub25sb2FkPVl9fX19fWZ1bmN0aW9uIGgoKXtpZihUKXtWKCl9ZWxzZXtIKCl9fWZ1bmN0aW9uIFYoKXt2YXIgWD1qLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYm9keVwiKVswXTt2YXIgYWE9QyhyKTthYS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIscSk7dmFyIFo9WC5hcHBlbmRDaGlsZChhYSk7aWYoWil7dmFyIFk9MDsoZnVuY3Rpb24oKXtpZih0eXBlb2YgWi5HZXRWYXJpYWJsZSE9RCl7dmFyIGFiPVouR2V0VmFyaWFibGUoXCIkdmVyc2lvblwiKTtpZihhYil7YWI9YWIuc3BsaXQoXCIgXCIpWzFdLnNwbGl0KFwiLFwiKTtNLnB2PVtwYXJzZUludChhYlswXSwxMCkscGFyc2VJbnQoYWJbMV0sMTApLHBhcnNlSW50KGFiWzJdLDEwKV19fWVsc2V7aWYoWTwxMCl7WSsrO3NldFRpbWVvdXQoYXJndW1lbnRzLmNhbGxlZSwxMCk7cmV0dXJufX1YLnJlbW92ZUNoaWxkKGFhKTtaPW51bGw7SCgpfSkoKX1lbHNle0goKX19ZnVuY3Rpb24gSCgpe3ZhciBhZz1vLmxlbmd0aDtpZihhZz4wKXtmb3IodmFyIGFmPTA7YWY8YWc7YWYrKyl7dmFyIFk9b1thZl0uaWQ7dmFyIGFiPW9bYWZdLmNhbGxiYWNrRm47dmFyIGFhPXtzdWNjZXNzOmZhbHNlLGlkOll9O2lmKE0ucHZbMF0+MCl7dmFyIGFlPWMoWSk7aWYoYWUpe2lmKEYob1thZl0uc3dmVmVyc2lvbikmJiEoTS53ayYmTS53azwzMTIpKXt3KFksdHJ1ZSk7aWYoYWIpe2FhLnN1Y2Nlc3M9dHJ1ZTthYS5yZWY9eihZKTthYihhYSl9fWVsc2V7aWYob1thZl0uZXhwcmVzc0luc3RhbGwmJkEoKSl7dmFyIGFpPXt9O2FpLmRhdGE9b1thZl0uZXhwcmVzc0luc3RhbGw7YWkud2lkdGg9YWUuZ2V0QXR0cmlidXRlKFwid2lkdGhcIil8fFwiMFwiO2FpLmhlaWdodD1hZS5nZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIil8fFwiMFwiO2lmKGFlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpKXthaS5zdHlsZWNsYXNzPWFlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfWlmKGFlLmdldEF0dHJpYnV0ZShcImFsaWduXCIpKXthaS5hbGlnbj1hZS5nZXRBdHRyaWJ1dGUoXCJhbGlnblwiKX12YXIgYWg9e307dmFyIFg9YWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwYXJhbVwiKTt2YXIgYWM9WC5sZW5ndGg7Zm9yKHZhciBhZD0wO2FkPGFjO2FkKyspe2lmKFhbYWRdLmdldEF0dHJpYnV0ZShcIm5hbWVcIikudG9Mb3dlckNhc2UoKSE9XCJtb3ZpZVwiKXthaFtYW2FkXS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpXT1YW2FkXS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKX19UChhaSxhaCxZLGFiKX1lbHNle3AoYWUpO2lmKGFiKXthYihhYSl9fX19fWVsc2V7dyhZLHRydWUpO2lmKGFiKXt2YXIgWj16KFkpO2lmKFomJnR5cGVvZiBaLlNldFZhcmlhYmxlIT1EKXthYS5zdWNjZXNzPXRydWU7YWEucmVmPVp9YWIoYWEpfX19fX1mdW5jdGlvbiB6KGFhKXt2YXIgWD1udWxsO3ZhciBZPWMoYWEpO2lmKFkmJlkubm9kZU5hbWU9PVwiT0JKRUNUXCIpe2lmKHR5cGVvZiBZLlNldFZhcmlhYmxlIT1EKXtYPVl9ZWxzZXt2YXIgWj1ZLmdldEVsZW1lbnRzQnlUYWdOYW1lKHIpWzBdO2lmKFope1g9Wn19fXJldHVybiBYfWZ1bmN0aW9uIEEoKXtyZXR1cm4gIWEmJkYoXCI2LjAuNjVcIikmJihNLndpbnx8TS5tYWMpJiYhKE0ud2smJk0ud2s8MzEyKX1mdW5jdGlvbiBQKGFhLGFiLFgsWil7YT10cnVlO0U9Wnx8bnVsbDtCPXtzdWNjZXNzOmZhbHNlLGlkOlh9O3ZhciBhZT1jKFgpO2lmKGFlKXtpZihhZS5ub2RlTmFtZT09XCJPQkpFQ1RcIil7bD1nKGFlKTtRPW51bGx9ZWxzZXtsPWFlO1E9WH1hYS5pZD1SO2lmKHR5cGVvZiBhYS53aWR0aD09RHx8KCEvJSQvLnRlc3QoYWEud2lkdGgpJiZwYXJzZUludChhYS53aWR0aCwxMCk8MzEwKSl7YWEud2lkdGg9XCIzMTBcIn1pZih0eXBlb2YgYWEuaGVpZ2h0PT1EfHwoIS8lJC8udGVzdChhYS5oZWlnaHQpJiZwYXJzZUludChhYS5oZWlnaHQsMTApPDEzNykpe2FhLmhlaWdodD1cIjEzN1wifWoudGl0bGU9ai50aXRsZS5zbGljZSgwLDQ3KStcIiAtIEZsYXNoIFBsYXllciBJbnN0YWxsYXRpb25cIjt2YXIgYWQ9TS5pZSYmTS53aW4/KFsnQWN0aXZlJ10uY29uY2F0KCcnKS5qb2luKCdYJykpOlwiUGx1Z0luXCIsYWM9XCJNTXJlZGlyZWN0VVJMPVwiK08ubG9jYXRpb24udG9TdHJpbmcoKS5yZXBsYWNlKC8mL2csXCIlMjZcIikrXCImTU1wbGF5ZXJUeXBlPVwiK2FkK1wiJk1NZG9jdGl0bGU9XCIrai50aXRsZTtpZih0eXBlb2YgYWIuZmxhc2h2YXJzIT1EKXthYi5mbGFzaHZhcnMrPVwiJlwiK2FjfWVsc2V7YWIuZmxhc2h2YXJzPWFjfWlmKE0uaWUmJk0ud2luJiZhZS5yZWFkeVN0YXRlIT00KXt2YXIgWT1DKFwiZGl2XCIpO1grPVwiU1dGT2JqZWN0TmV3XCI7WS5zZXRBdHRyaWJ1dGUoXCJpZFwiLFgpO2FlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKFksYWUpO2FlLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7KGZ1bmN0aW9uKCl7aWYoYWUucmVhZHlTdGF0ZT09NCl7YWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChhZSl9ZWxzZXtzZXRUaW1lb3V0KGFyZ3VtZW50cy5jYWxsZWUsMTApfX0pKCl9dShhYSxhYixYKX19ZnVuY3Rpb24gcChZKXtpZihNLmllJiZNLndpbiYmWS5yZWFkeVN0YXRlIT00KXt2YXIgWD1DKFwiZGl2XCIpO1kucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoWCxZKTtYLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGcoWSksWCk7WS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiOyhmdW5jdGlvbigpe2lmKFkucmVhZHlTdGF0ZT09NCl7WS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKFkpfWVsc2V7c2V0VGltZW91dChhcmd1bWVudHMuY2FsbGVlLDEwKX19KSgpfWVsc2V7WS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChnKFkpLFkpfX1mdW5jdGlvbiBnKGFiKXt2YXIgYWE9QyhcImRpdlwiKTtpZihNLndpbiYmTS5pZSl7YWEuaW5uZXJIVE1MPWFiLmlubmVySFRNTH1lbHNle3ZhciBZPWFiLmdldEVsZW1lbnRzQnlUYWdOYW1lKHIpWzBdO2lmKFkpe3ZhciBhZD1ZLmNoaWxkTm9kZXM7aWYoYWQpe3ZhciBYPWFkLmxlbmd0aDtmb3IodmFyIFo9MDtaPFg7WisrKXtpZighKGFkW1pdLm5vZGVUeXBlPT0xJiZhZFtaXS5ub2RlTmFtZT09XCJQQVJBTVwiKSYmIShhZFtaXS5ub2RlVHlwZT09OCkpe2FhLmFwcGVuZENoaWxkKGFkW1pdLmNsb25lTm9kZSh0cnVlKSl9fX19fXJldHVybiBhYX1mdW5jdGlvbiB1KGFpLGFnLFkpe3ZhciBYLGFhPWMoWSk7aWYoTS53ayYmTS53azwzMTIpe3JldHVybiBYfWlmKGFhKXtpZih0eXBlb2YgYWkuaWQ9PUQpe2FpLmlkPVl9aWYoTS5pZSYmTS53aW4pe3ZhciBhaD1cIlwiO2Zvcih2YXIgYWUgaW4gYWkpe2lmKGFpW2FlXSE9T2JqZWN0LnByb3RvdHlwZVthZV0pe2lmKGFlLnRvTG93ZXJDYXNlKCk9PVwiZGF0YVwiKXthZy5tb3ZpZT1haVthZV19ZWxzZXtpZihhZS50b0xvd2VyQ2FzZSgpPT1cInN0eWxlY2xhc3NcIil7YWgrPScgY2xhc3M9XCInK2FpW2FlXSsnXCInfWVsc2V7aWYoYWUudG9Mb3dlckNhc2UoKSE9XCJjbGFzc2lkXCIpe2FoKz1cIiBcIithZSsnPVwiJythaVthZV0rJ1wiJ319fX19dmFyIGFmPVwiXCI7Zm9yKHZhciBhZCBpbiBhZyl7aWYoYWdbYWRdIT1PYmplY3QucHJvdG90eXBlW2FkXSl7YWYrPSc8cGFyYW0gbmFtZT1cIicrYWQrJ1wiIHZhbHVlPVwiJythZ1thZF0rJ1wiIC8+J319YWEub3V0ZXJIVE1MPSc8b2JqZWN0IGNsYXNzaWQ9XCJjbHNpZDpEMjdDREI2RS1BRTZELTExY2YtOTZCOC00NDQ1NTM1NDAwMDBcIicrYWgrXCI+XCIrYWYrXCI8L29iamVjdD5cIjtOW04ubGVuZ3RoXT1haS5pZDtYPWMoYWkuaWQpfWVsc2V7dmFyIFo9QyhyKTtaLnNldEF0dHJpYnV0ZShcInR5cGVcIixxKTtmb3IodmFyIGFjIGluIGFpKXtpZihhaVthY10hPU9iamVjdC5wcm90b3R5cGVbYWNdKXtpZihhYy50b0xvd2VyQ2FzZSgpPT1cInN0eWxlY2xhc3NcIil7Wi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGFpW2FjXSl9ZWxzZXtpZihhYy50b0xvd2VyQ2FzZSgpIT1cImNsYXNzaWRcIil7Wi5zZXRBdHRyaWJ1dGUoYWMsYWlbYWNdKX19fX1mb3IodmFyIGFiIGluIGFnKXtpZihhZ1thYl0hPU9iamVjdC5wcm90b3R5cGVbYWJdJiZhYi50b0xvd2VyQ2FzZSgpIT1cIm1vdmllXCIpe2UoWixhYixhZ1thYl0pfX1hYS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChaLGFhKTtYPVp9fXJldHVybiBYfWZ1bmN0aW9uIGUoWixYLFkpe3ZhciBhYT1DKFwicGFyYW1cIik7YWEuc2V0QXR0cmlidXRlKFwibmFtZVwiLFgpO2FhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsWSk7Wi5hcHBlbmRDaGlsZChhYSl9ZnVuY3Rpb24geShZKXt2YXIgWD1jKFkpO2lmKFgmJlgubm9kZU5hbWU9PVwiT0JKRUNUXCIpe2lmKE0uaWUmJk0ud2luKXtYLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7KGZ1bmN0aW9uKCl7aWYoWC5yZWFkeVN0YXRlPT00KXtiKFkpfWVsc2V7c2V0VGltZW91dChhcmd1bWVudHMuY2FsbGVlLDEwKX19KSgpfWVsc2V7WC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKFgpfX19ZnVuY3Rpb24gYihaKXt2YXIgWT1jKFopO2lmKFkpe2Zvcih2YXIgWCBpbiBZKXtpZih0eXBlb2YgWVtYXT09XCJmdW5jdGlvblwiKXtZW1hdPW51bGx9fVkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChZKX19ZnVuY3Rpb24gYyhaKXt2YXIgWD1udWxsO3RyeXtYPWouZ2V0RWxlbWVudEJ5SWQoWil9Y2F0Y2goWSl7fXJldHVybiBYfWZ1bmN0aW9uIEMoWCl7cmV0dXJuIGouY3JlYXRlRWxlbWVudChYKX1mdW5jdGlvbiBpKFosWCxZKXtaLmF0dGFjaEV2ZW50KFgsWSk7SVtJLmxlbmd0aF09W1osWCxZXX1mdW5jdGlvbiBGKFope3ZhciBZPU0ucHYsWD1aLnNwbGl0KFwiLlwiKTtYWzBdPXBhcnNlSW50KFhbMF0sMTApO1hbMV09cGFyc2VJbnQoWFsxXSwxMCl8fDA7WFsyXT1wYXJzZUludChYWzJdLDEwKXx8MDtyZXR1cm4oWVswXT5YWzBdfHwoWVswXT09WFswXSYmWVsxXT5YWzFdKXx8KFlbMF09PVhbMF0mJllbMV09PVhbMV0mJllbMl0+PVhbMl0pKT90cnVlOmZhbHNlfWZ1bmN0aW9uIHYoYWMsWSxhZCxhYil7aWYoTS5pZSYmTS5tYWMpe3JldHVybn12YXIgYWE9ai5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07aWYoIWFhKXtyZXR1cm59dmFyIFg9KGFkJiZ0eXBlb2YgYWQ9PVwic3RyaW5nXCIpP2FkOlwic2NyZWVuXCI7aWYoYWIpe249bnVsbDtHPW51bGx9aWYoIW58fEchPVgpe3ZhciBaPUMoXCJzdHlsZVwiKTtaLnNldEF0dHJpYnV0ZShcInR5cGVcIixcInRleHQvY3NzXCIpO1ouc2V0QXR0cmlidXRlKFwibWVkaWFcIixYKTtuPWFhLmFwcGVuZENoaWxkKFopO2lmKE0uaWUmJk0ud2luJiZ0eXBlb2Ygai5zdHlsZVNoZWV0cyE9RCYmai5zdHlsZVNoZWV0cy5sZW5ndGg+MCl7bj1qLnN0eWxlU2hlZXRzW2ouc3R5bGVTaGVldHMubGVuZ3RoLTFdfUc9WH1pZihNLmllJiZNLndpbil7aWYobiYmdHlwZW9mIG4uYWRkUnVsZT09cil7bi5hZGRSdWxlKGFjLFkpfX1lbHNle2lmKG4mJnR5cGVvZiBqLmNyZWF0ZVRleHROb2RlIT1EKXtuLmFwcGVuZENoaWxkKGouY3JlYXRlVGV4dE5vZGUoYWMrXCIge1wiK1krXCJ9XCIpKX19fWZ1bmN0aW9uIHcoWixYKXtpZighbSl7cmV0dXJufXZhciBZPVg/XCJ2aXNpYmxlXCI6XCJoaWRkZW5cIjtpZihKJiZjKFopKXtjKFopLnN0eWxlLnZpc2liaWxpdHk9WX1lbHNle3YoXCIjXCIrWixcInZpc2liaWxpdHk6XCIrWSl9fWZ1bmN0aW9uIEwoWSl7dmFyIFo9L1tcXFxcXFxcIjw+XFwuO10vO3ZhciBYPVouZXhlYyhZKSE9bnVsbDtyZXR1cm4gWCYmdHlwZW9mIGVuY29kZVVSSUNvbXBvbmVudCE9RD9lbmNvZGVVUklDb21wb25lbnQoWSk6WX12YXIgZD1mdW5jdGlvbigpe2lmKE0uaWUmJk0ud2luKXt3aW5kb3cuYXR0YWNoRXZlbnQoXCJvbnVubG9hZFwiLGZ1bmN0aW9uKCl7dmFyIGFjPUkubGVuZ3RoO2Zvcih2YXIgYWI9MDthYjxhYzthYisrKXtJW2FiXVswXS5kZXRhY2hFdmVudChJW2FiXVsxXSxJW2FiXVsyXSl9dmFyIFo9Ti5sZW5ndGg7Zm9yKHZhciBhYT0wO2FhPFo7YWErKyl7eShOW2FhXSl9Zm9yKHZhciBZIGluIE0pe01bWV09bnVsbH1NPW51bGw7Zm9yKHZhciBYIGluIHN3Zm9iamVjdCl7c3dmb2JqZWN0W1hdPW51bGx9c3dmb2JqZWN0PW51bGx9KX19KCk7cmV0dXJue3JlZ2lzdGVyT2JqZWN0OmZ1bmN0aW9uKGFiLFgsYWEsWil7aWYoTS53MyYmYWImJlgpe3ZhciBZPXt9O1kuaWQ9YWI7WS5zd2ZWZXJzaW9uPVg7WS5leHByZXNzSW5zdGFsbD1hYTtZLmNhbGxiYWNrRm49WjtvW28ubGVuZ3RoXT1ZO3coYWIsZmFsc2UpfWVsc2V7aWYoWil7Wih7c3VjY2VzczpmYWxzZSxpZDphYn0pfX19LGdldE9iamVjdEJ5SWQ6ZnVuY3Rpb24oWCl7aWYoTS53Myl7cmV0dXJuIHooWCl9fSxlbWJlZFNXRjpmdW5jdGlvbihhYixhaCxhZSxhZyxZLGFhLFosYWQsYWYsYWMpe3ZhciBYPXtzdWNjZXNzOmZhbHNlLGlkOmFofTtpZihNLnczJiYhKE0ud2smJk0ud2s8MzEyKSYmYWImJmFoJiZhZSYmYWcmJlkpe3coYWgsZmFsc2UpO0soZnVuY3Rpb24oKXthZSs9XCJcIjthZys9XCJcIjt2YXIgYWo9e307aWYoYWYmJnR5cGVvZiBhZj09PXIpe2Zvcih2YXIgYWwgaW4gYWYpe2FqW2FsXT1hZlthbF19fWFqLmRhdGE9YWI7YWoud2lkdGg9YWU7YWouaGVpZ2h0PWFnO3ZhciBhbT17fTtpZihhZCYmdHlwZW9mIGFkPT09cil7Zm9yKHZhciBhayBpbiBhZCl7YW1bYWtdPWFkW2FrXX19aWYoWiYmdHlwZW9mIFo9PT1yKXtmb3IodmFyIGFpIGluIFope2lmKHR5cGVvZiBhbS5mbGFzaHZhcnMhPUQpe2FtLmZsYXNodmFycys9XCImXCIrYWkrXCI9XCIrWlthaV19ZWxzZXthbS5mbGFzaHZhcnM9YWkrXCI9XCIrWlthaV19fX1pZihGKFkpKXt2YXIgYW49dShhaixhbSxhaCk7aWYoYWouaWQ9PWFoKXt3KGFoLHRydWUpfVguc3VjY2Vzcz10cnVlO1gucmVmPWFufWVsc2V7aWYoYWEmJkEoKSl7YWouZGF0YT1hYTtQKGFqLGFtLGFoLGFjKTtyZXR1cm59ZWxzZXt3KGFoLHRydWUpfX1pZihhYyl7YWMoWCl9fSl9ZWxzZXtpZihhYyl7YWMoWCl9fX0sc3dpdGNoT2ZmQXV0b0hpZGVTaG93OmZ1bmN0aW9uKCl7bT1mYWxzZX0sdWE6TSxnZXRGbGFzaFBsYXllclZlcnNpb246ZnVuY3Rpb24oKXtyZXR1cm57bWFqb3I6TS5wdlswXSxtaW5vcjpNLnB2WzFdLHJlbGVhc2U6TS5wdlsyXX19LGhhc0ZsYXNoUGxheWVyVmVyc2lvbjpGLGNyZWF0ZVNXRjpmdW5jdGlvbihaLFksWCl7aWYoTS53Myl7cmV0dXJuIHUoWixZLFgpfWVsc2V7cmV0dXJuIHVuZGVmaW5lZH19LHNob3dFeHByZXNzSW5zdGFsbDpmdW5jdGlvbihaLGFhLFgsWSl7aWYoTS53MyYmQSgpKXtQKFosYWEsWCxZKX19LHJlbW92ZVNXRjpmdW5jdGlvbihYKXtpZihNLnczKXt5KFgpfX0sY3JlYXRlQ1NTOmZ1bmN0aW9uKGFhLFosWSxYKXtpZihNLnczKXt2KGFhLFosWSxYKX19LGFkZERvbUxvYWRFdmVudDpLLGFkZExvYWRFdmVudDpzLGdldFF1ZXJ5UGFyYW1WYWx1ZTpmdW5jdGlvbihhYSl7dmFyIFo9ai5sb2NhdGlvbi5zZWFyY2h8fGoubG9jYXRpb24uaGFzaDtpZihaKXtpZigvXFw/Ly50ZXN0KFopKXtaPVouc3BsaXQoXCI/XCIpWzFdfWlmKGFhPT1udWxsKXtyZXR1cm4gTChaKX12YXIgWT1aLnNwbGl0KFwiJlwiKTtmb3IodmFyIFg9MDtYPFkubGVuZ3RoO1grKyl7aWYoWVtYXS5zdWJzdHJpbmcoMCxZW1hdLmluZGV4T2YoXCI9XCIpKT09YWEpe3JldHVybiBMKFlbWF0uc3Vic3RyaW5nKChZW1hdLmluZGV4T2YoXCI9XCIpKzEpKSl9fX1yZXR1cm5cIlwifSxleHByZXNzSW5zdGFsbENhbGxiYWNrOmZ1bmN0aW9uKCl7aWYoYSl7dmFyIFg9YyhSKTtpZihYJiZsKXtYLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGwsWCk7aWYoUSl7dyhRLHRydWUpO2lmKE0uaWUmJk0ud2luKXtsLnN0eWxlLmRpc3BsYXk9XCJibG9ja1wifX1pZihFKXtFKEIpfX1hPWZhbHNlfX19fSgpO1xyXG59XHJcbi8vIENvcHlyaWdodDogSGlyb3NoaSBJY2hpa2F3YSA8aHR0cDovL2dpbWl0ZS5uZXQvZW4vPlxyXG4vLyBMaWNlbnNlOiBOZXcgQlNEIExpY2Vuc2VcclxuLy8gUmVmZXJlbmNlOiBodHRwOi8vZGV2LnczLm9yZy9odG1sNS93ZWJzb2NrZXRzL1xyXG4vLyBSZWZlcmVuY2U6IGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWhpeGllLXRoZXdlYnNvY2tldHByb3RvY29sXHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcbiAgXHJcbiAgaWYgKCd1bmRlZmluZWQnID09IHR5cGVvZiB3aW5kb3cgfHwgd2luZG93LldlYlNvY2tldCkgcmV0dXJuO1xyXG5cclxuICB2YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xyXG4gIGlmICghY29uc29sZSB8fCAhY29uc29sZS5sb2cgfHwgIWNvbnNvbGUuZXJyb3IpIHtcclxuICAgIGNvbnNvbGUgPSB7bG9nOiBmdW5jdGlvbigpeyB9LCBlcnJvcjogZnVuY3Rpb24oKXsgfX07XHJcbiAgfVxyXG4gIFxyXG4gIGlmICghc3dmb2JqZWN0Lmhhc0ZsYXNoUGxheWVyVmVyc2lvbihcIjEwLjAuMFwiKSkge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkZsYXNoIFBsYXllciA+PSAxMC4wLjAgaXMgcmVxdWlyZWQuXCIpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBpZiAobG9jYXRpb24ucHJvdG9jb2wgPT0gXCJmaWxlOlwiKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICBcIldBUk5JTkc6IHdlYi1zb2NrZXQtanMgZG9lc24ndCB3b3JrIGluIGZpbGU6Ly8vLi4uIFVSTCBcIiArXHJcbiAgICAgIFwidW5sZXNzIHlvdSBzZXQgRmxhc2ggU2VjdXJpdHkgU2V0dGluZ3MgcHJvcGVybHkuIFwiICtcclxuICAgICAgXCJPcGVuIHRoZSBwYWdlIHZpYSBXZWIgc2VydmVyIGkuZS4gaHR0cDovLy4uLlwiKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIGZhdXggd2ViIHNvY2tldC5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXHJcbiAgICogQHBhcmFtIHthcnJheSBvciBzdHJpbmd9IHByb3RvY29sc1xyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm94eUhvc3RcclxuICAgKiBAcGFyYW0ge2ludH0gcHJveHlQb3J0XHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhlYWRlcnNcclxuICAgKi9cclxuICBXZWJTb2NrZXQgPSBmdW5jdGlvbih1cmwsIHByb3RvY29scywgcHJveHlIb3N0LCBwcm94eVBvcnQsIGhlYWRlcnMpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYuX19pZCA9IFdlYlNvY2tldC5fX25leHRJZCsrO1xyXG4gICAgV2ViU29ja2V0Ll9faW5zdGFuY2VzW3NlbGYuX19pZF0gPSBzZWxmO1xyXG4gICAgc2VsZi5yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNPTk5FQ1RJTkc7XHJcbiAgICBzZWxmLmJ1ZmZlcmVkQW1vdW50ID0gMDtcclxuICAgIHNlbGYuX19ldmVudHMgPSB7fTtcclxuICAgIGlmICghcHJvdG9jb2xzKSB7XHJcbiAgICAgIHByb3RvY29scyA9IFtdO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG9jb2xzID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgcHJvdG9jb2xzID0gW3Byb3RvY29sc107XHJcbiAgICB9XHJcbiAgICAvLyBVc2VzIHNldFRpbWVvdXQoKSB0byBtYWtlIHN1cmUgX19jcmVhdGVGbGFzaCgpIHJ1bnMgYWZ0ZXIgdGhlIGNhbGxlciBzZXRzIHdzLm9ub3BlbiBldGMuXHJcbiAgICAvLyBPdGhlcndpc2UsIHdoZW4gb25vcGVuIGZpcmVzIGltbWVkaWF0ZWx5LCBvbm9wZW4gaXMgY2FsbGVkIGJlZm9yZSBpdCBpcyBzZXQuXHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICBXZWJTb2NrZXQuX19hZGRUYXNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIFdlYlNvY2tldC5fX2ZsYXNoLmNyZWF0ZShcclxuICAgICAgICAgICAgc2VsZi5fX2lkLCB1cmwsIHByb3RvY29scywgcHJveHlIb3N0IHx8IG51bGwsIHByb3h5UG9ydCB8fCAwLCBoZWFkZXJzIHx8IG51bGwpO1xyXG4gICAgICB9KTtcclxuICAgIH0sIDApO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFNlbmQgZGF0YSB0byB0aGUgd2ViIHNvY2tldC5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YSAgVGhlIGRhdGEgdG8gc2VuZCB0byB0aGUgc29ja2V0LlxyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59ICBUcnVlIGZvciBzdWNjZXNzLCBmYWxzZSBmb3IgZmFpbHVyZS5cclxuICAgKi9cclxuICBXZWJTb2NrZXQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09IFdlYlNvY2tldC5DT05ORUNUSU5HKSB7XHJcbiAgICAgIHRocm93IFwiSU5WQUxJRF9TVEFURV9FUlI6IFdlYiBTb2NrZXQgY29ubmVjdGlvbiBoYXMgbm90IGJlZW4gZXN0YWJsaXNoZWRcIjtcclxuICAgIH1cclxuICAgIC8vIFdlIHVzZSBlbmNvZGVVUklDb21wb25lbnQoKSBoZXJlLCBiZWNhdXNlIEZBQnJpZGdlIGRvZXNuJ3Qgd29yayBpZlxyXG4gICAgLy8gdGhlIGFyZ3VtZW50IGluY2x1ZGVzIHNvbWUgY2hhcmFjdGVycy4gV2UgZG9uJ3QgdXNlIGVzY2FwZSgpIGhlcmVcclxuICAgIC8vIGJlY2F1c2Ugb2YgdGhpczpcclxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0NvcmVfSmF2YVNjcmlwdF8xLjVfR3VpZGUvRnVuY3Rpb25zI2VzY2FwZV9hbmRfdW5lc2NhcGVfRnVuY3Rpb25zXHJcbiAgICAvLyBCdXQgaXQgbG9va3MgZGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZVVSSUNvbXBvbmVudChzKSkgZG9lc24ndFxyXG4gICAgLy8gcHJlc2VydmUgYWxsIFVuaWNvZGUgY2hhcmFjdGVycyBlaXRoZXIgZS5nLiBcIlxcdWZmZmZcIiBpbiBGaXJlZm94LlxyXG4gICAgLy8gTm90ZSBieSB3dHJpdGNoOiBIb3BlZnVsbHkgdGhpcyB3aWxsIG5vdCBiZSBuZWNlc3NhcnkgdXNpbmcgRXh0ZXJuYWxJbnRlcmZhY2UuICBXaWxsIHJlcXVpcmVcclxuICAgIC8vIGFkZGl0aW9uYWwgdGVzdGluZy5cclxuICAgIHZhciByZXN1bHQgPSBXZWJTb2NrZXQuX19mbGFzaC5zZW5kKHRoaXMuX19pZCwgZW5jb2RlVVJJQ29tcG9uZW50KGRhdGEpKTtcclxuICAgIGlmIChyZXN1bHQgPCAwKSB7IC8vIHN1Y2Nlc3NcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmJ1ZmZlcmVkQW1vdW50ICs9IHJlc3VsdDtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENsb3NlIHRoaXMgd2ViIHNvY2tldCBncmFjZWZ1bGx5LlxyXG4gICAqL1xyXG4gIFdlYlNvY2tldC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT0gV2ViU29ja2V0LkNMT1NFRCB8fCB0aGlzLnJlYWR5U3RhdGUgPT0gV2ViU29ja2V0LkNMT1NJTkcpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNMT1NJTkc7XHJcbiAgICBXZWJTb2NrZXQuX19mbGFzaC5jbG9zZSh0aGlzLl9faWQpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEltcGxlbWVudGF0aW9uIG9mIHtAbGluayA8YSBocmVmPVwiaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItRXZlbnRzL2V2ZW50cy5odG1sI0V2ZW50cy1yZWdpc3RyYXRpb25cIj5ET00gMiBFdmVudFRhcmdldCBJbnRlcmZhY2U8L2E+fVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lclxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlQ2FwdHVyZVxyXG4gICAqIEByZXR1cm4gdm9pZFxyXG4gICAqL1xyXG4gIFdlYlNvY2tldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKSB7XHJcbiAgICBpZiAoISh0eXBlIGluIHRoaXMuX19ldmVudHMpKSB7XHJcbiAgICAgIHRoaXMuX19ldmVudHNbdHlwZV0gPSBbXTtcclxuICAgIH1cclxuICAgIHRoaXMuX19ldmVudHNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogSW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIDxhIGhyZWY9XCJodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1FdmVudHMvZXZlbnRzLmh0bWwjRXZlbnRzLXJlZ2lzdHJhdGlvblwiPkRPTSAyIEV2ZW50VGFyZ2V0IEludGVyZmFjZTwvYT59XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXHJcbiAgICogQHBhcmFtIHtib29sZWFufSB1c2VDYXB0dXJlXHJcbiAgICogQHJldHVybiB2b2lkXHJcbiAgICovXHJcbiAgV2ViU29ja2V0LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpIHtcclxuICAgIGlmICghKHR5cGUgaW4gdGhpcy5fX2V2ZW50cykpIHJldHVybjtcclxuICAgIHZhciBldmVudHMgPSB0aGlzLl9fZXZlbnRzW3R5cGVdO1xyXG4gICAgZm9yICh2YXIgaSA9IGV2ZW50cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xyXG4gICAgICBpZiAoZXZlbnRzW2ldID09PSBsaXN0ZW5lcikge1xyXG4gICAgICAgIGV2ZW50cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBJbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgPGEgaHJlZj1cImh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLUV2ZW50cy9ldmVudHMuaHRtbCNFdmVudHMtcmVnaXN0cmF0aW9uXCI+RE9NIDIgRXZlbnRUYXJnZXQgSW50ZXJmYWNlPC9hPn1cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XHJcbiAgICogQHJldHVybiB2b2lkXHJcbiAgICovXHJcbiAgV2ViU29ja2V0LnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgIHZhciBldmVudHMgPSB0aGlzLl9fZXZlbnRzW2V2ZW50LnR5cGVdIHx8IFtdO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgZXZlbnRzW2ldKGV2ZW50KTtcclxuICAgIH1cclxuICAgIHZhciBoYW5kbGVyID0gdGhpc1tcIm9uXCIgKyBldmVudC50eXBlXTtcclxuICAgIGlmIChoYW5kbGVyKSBoYW5kbGVyKGV2ZW50KTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBIYW5kbGVzIGFuIGV2ZW50IGZyb20gRmxhc2guXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IGZsYXNoRXZlbnRcclxuICAgKi9cclxuICBXZWJTb2NrZXQucHJvdG90eXBlLl9faGFuZGxlRXZlbnQgPSBmdW5jdGlvbihmbGFzaEV2ZW50KSB7XHJcbiAgICBpZiAoXCJyZWFkeVN0YXRlXCIgaW4gZmxhc2hFdmVudCkge1xyXG4gICAgICB0aGlzLnJlYWR5U3RhdGUgPSBmbGFzaEV2ZW50LnJlYWR5U3RhdGU7XHJcbiAgICB9XHJcbiAgICBpZiAoXCJwcm90b2NvbFwiIGluIGZsYXNoRXZlbnQpIHtcclxuICAgICAgdGhpcy5wcm90b2NvbCA9IGZsYXNoRXZlbnQucHJvdG9jb2w7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZhciBqc0V2ZW50O1xyXG4gICAgaWYgKGZsYXNoRXZlbnQudHlwZSA9PSBcIm9wZW5cIiB8fCBmbGFzaEV2ZW50LnR5cGUgPT0gXCJlcnJvclwiKSB7XHJcbiAgICAgIGpzRXZlbnQgPSB0aGlzLl9fY3JlYXRlU2ltcGxlRXZlbnQoZmxhc2hFdmVudC50eXBlKTtcclxuICAgIH0gZWxzZSBpZiAoZmxhc2hFdmVudC50eXBlID09IFwiY2xvc2VcIikge1xyXG4gICAgICAvLyBUT0RPIGltcGxlbWVudCBqc0V2ZW50Lndhc0NsZWFuXHJcbiAgICAgIGpzRXZlbnQgPSB0aGlzLl9fY3JlYXRlU2ltcGxlRXZlbnQoXCJjbG9zZVwiKTtcclxuICAgIH0gZWxzZSBpZiAoZmxhc2hFdmVudC50eXBlID09IFwibWVzc2FnZVwiKSB7XHJcbiAgICAgIHZhciBkYXRhID0gZGVjb2RlVVJJQ29tcG9uZW50KGZsYXNoRXZlbnQubWVzc2FnZSk7XHJcbiAgICAgIGpzRXZlbnQgPSB0aGlzLl9fY3JlYXRlTWVzc2FnZUV2ZW50KFwibWVzc2FnZVwiLCBkYXRhKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IFwidW5rbm93biBldmVudCB0eXBlOiBcIiArIGZsYXNoRXZlbnQudHlwZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KGpzRXZlbnQpO1xyXG4gIH07XHJcbiAgXHJcbiAgV2ViU29ja2V0LnByb3RvdHlwZS5fX2NyZWF0ZVNpbXBsZUV2ZW50ID0gZnVuY3Rpb24odHlwZSkge1xyXG4gICAgaWYgKGRvY3VtZW50LmNyZWF0ZUV2ZW50ICYmIHdpbmRvdy5FdmVudCkge1xyXG4gICAgICB2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xyXG4gICAgICBldmVudC5pbml0RXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlKTtcclxuICAgICAgcmV0dXJuIGV2ZW50O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHt0eXBlOiB0eXBlLCBidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2V9O1xyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgV2ViU29ja2V0LnByb3RvdHlwZS5fX2NyZWF0ZU1lc3NhZ2VFdmVudCA9IGZ1bmN0aW9uKHR5cGUsIGRhdGEpIHtcclxuICAgIGlmIChkb2N1bWVudC5jcmVhdGVFdmVudCAmJiB3aW5kb3cuTWVzc2FnZUV2ZW50ICYmICF3aW5kb3cub3BlcmEpIHtcclxuICAgICAgdmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNZXNzYWdlRXZlbnRcIik7XHJcbiAgICAgIGV2ZW50LmluaXRNZXNzYWdlRXZlbnQoXCJtZXNzYWdlXCIsIGZhbHNlLCBmYWxzZSwgZGF0YSwgbnVsbCwgbnVsbCwgd2luZG93LCBudWxsKTtcclxuICAgICAgcmV0dXJuIGV2ZW50O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gSUUgYW5kIE9wZXJhLCB0aGUgbGF0dGVyIG9uZSB0cnVuY2F0ZXMgdGhlIGRhdGEgcGFyYW1ldGVyIGFmdGVyIGFueSAweDAwIGJ5dGVzLlxyXG4gICAgICByZXR1cm4ge3R5cGU6IHR5cGUsIGRhdGE6IGRhdGEsIGJ1YmJsZXM6IGZhbHNlLCBjYW5jZWxhYmxlOiBmYWxzZX07XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBEZWZpbmUgdGhlIFdlYlNvY2tldCByZWFkeVN0YXRlIGVudW1lcmF0aW9uLlxyXG4gICAqL1xyXG4gIFdlYlNvY2tldC5DT05ORUNUSU5HID0gMDtcclxuICBXZWJTb2NrZXQuT1BFTiA9IDE7XHJcbiAgV2ViU29ja2V0LkNMT1NJTkcgPSAyO1xyXG4gIFdlYlNvY2tldC5DTE9TRUQgPSAzO1xyXG5cclxuICBXZWJTb2NrZXQuX19mbGFzaCA9IG51bGw7XHJcbiAgV2ViU29ja2V0Ll9faW5zdGFuY2VzID0ge307XHJcbiAgV2ViU29ja2V0Ll9fdGFza3MgPSBbXTtcclxuICBXZWJTb2NrZXQuX19uZXh0SWQgPSAwO1xyXG4gIFxyXG4gIC8qKlxyXG4gICAqIExvYWQgYSBuZXcgZmxhc2ggc2VjdXJpdHkgcG9saWN5IGZpbGUuXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxyXG4gICAqL1xyXG4gIFdlYlNvY2tldC5sb2FkRmxhc2hQb2xpY3lGaWxlID0gZnVuY3Rpb24odXJsKXtcclxuICAgIFdlYlNvY2tldC5fX2FkZFRhc2soZnVuY3Rpb24oKSB7XHJcbiAgICAgIFdlYlNvY2tldC5fX2ZsYXNoLmxvYWRNYW51YWxQb2xpY3lGaWxlKHVybCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBMb2FkcyBXZWJTb2NrZXRNYWluLnN3ZiBhbmQgY3JlYXRlcyBXZWJTb2NrZXRNYWluIG9iamVjdCBpbiBGbGFzaC5cclxuICAgKi9cclxuICBXZWJTb2NrZXQuX19pbml0aWFsaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoV2ViU29ja2V0Ll9fZmxhc2gpIHJldHVybjtcclxuICAgIFxyXG4gICAgaWYgKFdlYlNvY2tldC5fX3N3ZkxvY2F0aW9uKSB7XHJcbiAgICAgIC8vIEZvciBiYWNrd29yZCBjb21wYXRpYmlsaXR5LlxyXG4gICAgICB3aW5kb3cuV0VCX1NPQ0tFVF9TV0ZfTE9DQVRJT04gPSBXZWJTb2NrZXQuX19zd2ZMb2NhdGlvbjtcclxuICAgIH1cclxuICAgIGlmICghd2luZG93LldFQl9TT0NLRVRfU1dGX0xPQ0FUSU9OKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV2ViU29ja2V0XSBzZXQgV0VCX1NPQ0tFVF9TV0ZfTE9DQVRJT04gdG8gbG9jYXRpb24gb2YgV2ViU29ja2V0TWFpbi5zd2ZcIik7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgY29udGFpbmVyLmlkID0gXCJ3ZWJTb2NrZXRDb250YWluZXJcIjtcclxuICAgIC8vIEhpZGVzIEZsYXNoIGJveC4gV2UgY2Fubm90IHVzZSBkaXNwbGF5OiBub25lIG9yIHZpc2liaWxpdHk6IGhpZGRlbiBiZWNhdXNlIGl0IHByZXZlbnRzXHJcbiAgICAvLyBGbGFzaCBmcm9tIGxvYWRpbmcgYXQgbGVhc3QgaW4gSUUuIFNvIHdlIG1vdmUgaXQgb3V0IG9mIHRoZSBzY3JlZW4gYXQgKC0xMDAsIC0xMDApLlxyXG4gICAgLy8gQnV0IHRoaXMgZXZlbiBkb2Vzbid0IHdvcmsgd2l0aCBGbGFzaCBMaXRlIChlLmcuIGluIERyb2lkIEluY3JlZGlibGUpLiBTbyB3aXRoIEZsYXNoXHJcbiAgICAvLyBMaXRlLCB3ZSBwdXQgaXQgYXQgKDAsIDApLiBUaGlzIHNob3dzIDF4MSBib3ggdmlzaWJsZSBhdCBsZWZ0LXRvcCBjb3JuZXIgYnV0IHRoaXMgaXNcclxuICAgIC8vIHRoZSBiZXN0IHdlIGNhbiBkbyBhcyBmYXIgYXMgd2Uga25vdyBub3cuXHJcbiAgICBjb250YWluZXIuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XHJcbiAgICBpZiAoV2ViU29ja2V0Ll9faXNGbGFzaExpdGUoKSkge1xyXG4gICAgICBjb250YWluZXIuc3R5bGUubGVmdCA9IFwiMHB4XCI7XHJcbiAgICAgIGNvbnRhaW5lci5zdHlsZS50b3AgPSBcIjBweFwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29udGFpbmVyLnN0eWxlLmxlZnQgPSBcIi0xMDBweFwiO1xyXG4gICAgICBjb250YWluZXIuc3R5bGUudG9wID0gXCItMTAwcHhcIjtcclxuICAgIH1cclxuICAgIHZhciBob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgaG9sZGVyLmlkID0gXCJ3ZWJTb2NrZXRGbGFzaFwiO1xyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGhvbGRlcik7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcbiAgICAvLyBTZWUgdGhpcyBhcnRpY2xlIGZvciBoYXNQcmlvcml0eTpcclxuICAgIC8vIGh0dHA6Ly9oZWxwLmFkb2JlLmNvbS9lbl9VUy9hczMvbW9iaWxlL1dTNGJlYmNkNjZhNzQyNzVjMzZjZmI4MTM3MTI0MzE4ZWViYzYtN2ZmZC5odG1sXHJcbiAgICBzd2ZvYmplY3QuZW1iZWRTV0YoXHJcbiAgICAgIFdFQl9TT0NLRVRfU1dGX0xPQ0FUSU9OLFxyXG4gICAgICBcIndlYlNvY2tldEZsYXNoXCIsXHJcbiAgICAgIFwiMVwiIC8qIHdpZHRoICovLFxyXG4gICAgICBcIjFcIiAvKiBoZWlnaHQgKi8sXHJcbiAgICAgIFwiMTAuMC4wXCIgLyogU1dGIHZlcnNpb24gKi8sXHJcbiAgICAgIG51bGwsXHJcbiAgICAgIG51bGwsXHJcbiAgICAgIHtoYXNQcmlvcml0eTogdHJ1ZSwgc3dsaXZlY29ubmVjdCA6IHRydWUsIGFsbG93U2NyaXB0QWNjZXNzOiBcImFsd2F5c1wifSxcclxuICAgICAgbnVsbCxcclxuICAgICAgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGlmICghZS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dlYlNvY2tldF0gc3dmb2JqZWN0LmVtYmVkU1dGIGZhaWxlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIGJ5IEZsYXNoIHRvIG5vdGlmeSBKUyB0aGF0IGl0J3MgZnVsbHkgbG9hZGVkIGFuZCByZWFkeVxyXG4gICAqIGZvciBjb21tdW5pY2F0aW9uLlxyXG4gICAqL1xyXG4gIFdlYlNvY2tldC5fX29uRmxhc2hJbml0aWFsaXplZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gV2UgbmVlZCB0byBzZXQgYSB0aW1lb3V0IGhlcmUgdG8gYXZvaWQgcm91bmQtdHJpcCBjYWxsc1xyXG4gICAgLy8gdG8gZmxhc2ggZHVyaW5nIHRoZSBpbml0aWFsaXphdGlvbiBwcm9jZXNzLlxyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgV2ViU29ja2V0Ll9fZmxhc2ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIndlYlNvY2tldEZsYXNoXCIpO1xyXG4gICAgICBXZWJTb2NrZXQuX19mbGFzaC5zZXRDYWxsZXJVcmwobG9jYXRpb24uaHJlZik7XHJcbiAgICAgIFdlYlNvY2tldC5fX2ZsYXNoLnNldERlYnVnKCEhd2luZG93LldFQl9TT0NLRVRfREVCVUcpO1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IFdlYlNvY2tldC5fX3Rhc2tzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgV2ViU29ja2V0Ll9fdGFza3NbaV0oKTtcclxuICAgICAgfVxyXG4gICAgICBXZWJTb2NrZXQuX190YXNrcyA9IFtdO1xyXG4gICAgfSwgMCk7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBDYWxsZWQgYnkgRmxhc2ggdG8gbm90aWZ5IFdlYlNvY2tldHMgZXZlbnRzIGFyZSBmaXJlZC5cclxuICAgKi9cclxuICBXZWJTb2NrZXQuX19vbkZsYXNoRXZlbnQgPSBmdW5jdGlvbigpIHtcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgLy8gR2V0cyBldmVudHMgdXNpbmcgcmVjZWl2ZUV2ZW50cygpIGluc3RlYWQgb2YgZ2V0dGluZyBpdCBmcm9tIGV2ZW50IG9iamVjdFxyXG4gICAgICAgIC8vIG9mIEZsYXNoIGV2ZW50LiBUaGlzIGlzIHRvIG1ha2Ugc3VyZSB0byBrZWVwIG1lc3NhZ2Ugb3JkZXIuXHJcbiAgICAgICAgLy8gSXQgc2VlbXMgc29tZXRpbWVzIEZsYXNoIGV2ZW50cyBkb24ndCBhcnJpdmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhleSBhcmUgc2VudC5cclxuICAgICAgICB2YXIgZXZlbnRzID0gV2ViU29ja2V0Ll9fZmxhc2gucmVjZWl2ZUV2ZW50cygpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICBXZWJTb2NrZXQuX19pbnN0YW5jZXNbZXZlbnRzW2ldLndlYlNvY2tldElkXS5fX2hhbmRsZUV2ZW50KGV2ZW50c1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgfVxyXG4gICAgfSwgMCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9O1xyXG4gIFxyXG4gIC8vIENhbGxlZCBieSBGbGFzaC5cclxuICBXZWJTb2NrZXQuX19sb2cgPSBmdW5jdGlvbihtZXNzYWdlKSB7XHJcbiAgICBjb25zb2xlLmxvZyhkZWNvZGVVUklDb21wb25lbnQobWVzc2FnZSkpO1xyXG4gIH07XHJcbiAgXHJcbiAgLy8gQ2FsbGVkIGJ5IEZsYXNoLlxyXG4gIFdlYlNvY2tldC5fX2Vycm9yID0gZnVuY3Rpb24obWVzc2FnZSkge1xyXG4gICAgY29uc29sZS5lcnJvcihkZWNvZGVVUklDb21wb25lbnQobWVzc2FnZSkpO1xyXG4gIH07XHJcbiAgXHJcbiAgV2ViU29ja2V0Ll9fYWRkVGFzayA9IGZ1bmN0aW9uKHRhc2spIHtcclxuICAgIGlmIChXZWJTb2NrZXQuX19mbGFzaCkge1xyXG4gICAgICB0YXNrKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBXZWJTb2NrZXQuX190YXNrcy5wdXNoKHRhc2spO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogVGVzdCBpZiB0aGUgYnJvd3NlciBpcyBydW5uaW5nIGZsYXNoIGxpdGUuXHJcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBmbGFzaCBsaXRlIGlzIHJ1bm5pbmcsIGZhbHNlIG90aGVyd2lzZS5cclxuICAgKi9cclxuICBXZWJTb2NrZXQuX19pc0ZsYXNoTGl0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKCF3aW5kb3cubmF2aWdhdG9yIHx8ICF3aW5kb3cubmF2aWdhdG9yLm1pbWVUeXBlcykge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB2YXIgbWltZVR5cGUgPSB3aW5kb3cubmF2aWdhdG9yLm1pbWVUeXBlc1tcImFwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoXCJdO1xyXG4gICAgaWYgKCFtaW1lVHlwZSB8fCAhbWltZVR5cGUuZW5hYmxlZFBsdWdpbiB8fCAhbWltZVR5cGUuZW5hYmxlZFBsdWdpbi5maWxlbmFtZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWltZVR5cGUuZW5hYmxlZFBsdWdpbi5maWxlbmFtZS5tYXRjaCgvZmxhc2hsaXRlL2kpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gIH07XHJcbiAgXHJcbiAgaWYgKCF3aW5kb3cuV0VCX1NPQ0tFVF9ESVNBQkxFX0FVVE9fSU5JVElBTElaQVRJT04pIHtcclxuICAgIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24oKXtcclxuICAgICAgICBXZWJTb2NrZXQuX19pbml0aWFsaXplKCk7XHJcbiAgICAgIH0sIGZhbHNlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHdpbmRvdy5hdHRhY2hFdmVudChcIm9ubG9hZFwiLCBmdW5jdGlvbigpe1xyXG4gICAgICAgIFdlYlNvY2tldC5fX2luaXRpYWxpemUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIHNvY2tldC5pb1xyXG4gKiBDb3B5cmlnaHQoYykgMjAxMSBMZWFybkJvb3N0IDxkZXZAbGVhcm5ib29zdC5jb20+XHJcbiAqIE1JVCBMaWNlbnNlZFxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoZXhwb3J0cywgaW8sIGdsb2JhbCkge1xyXG5cclxuICAvKipcclxuICAgKiBFeHBvc2UgY29uc3RydWN0b3IuXHJcbiAgICpcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBleHBvcnRzLlhIUiA9IFhIUjtcclxuXHJcbiAgLyoqXHJcbiAgICogWEhSIGNvbnN0cnVjdG9yXHJcbiAgICpcclxuICAgKiBAY29zdHJ1Y3RvclxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIGZ1bmN0aW9uIFhIUiAoc29ja2V0KSB7XHJcbiAgICBpZiAoIXNvY2tldCkgcmV0dXJuO1xyXG5cclxuICAgIGlvLlRyYW5zcG9ydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgdGhpcy5zZW5kQnVmZmVyID0gW107XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogSW5oZXJpdHMgZnJvbSBUcmFuc3BvcnQuXHJcbiAgICovXHJcblxyXG4gIGlvLnV0aWwuaW5oZXJpdChYSFIsIGlvLlRyYW5zcG9ydCk7XHJcblxyXG4gIC8qKlxyXG4gICAqIEVzdGFibGlzaCBhIGNvbm5lY3Rpb25cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtUcmFuc3BvcnR9XHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgWEhSLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5zb2NrZXQuc2V0QnVmZmVyKGZhbHNlKTtcclxuICAgIHRoaXMub25PcGVuKCk7XHJcbiAgICB0aGlzLmdldCgpO1xyXG5cclxuICAgIC8vIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoZSByZXF1ZXN0IHN1Y2NlZWRzIHNpbmNlIHdlIGhhdmUgbm8gaW5kaWNhdGlvblxyXG4gICAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBvcGVuZWQgb3Igbm90IHVudGlsIGl0IHN1Y2NlZWRlZC5cclxuICAgIHRoaXMuc2V0Q2xvc2VUaW1lb3V0KCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgd2UgbmVlZCB0byBzZW5kIGRhdGEgdG8gdGhlIFNvY2tldC5JTyBzZXJ2ZXIsIGlmIHdlIGhhdmUgZGF0YSBpbiBvdXJcclxuICAgKiBidWZmZXIgd2UgZW5jb2RlIGl0IGFuZCBmb3J3YXJkIGl0IHRvIHRoZSBgcG9zdGAgbWV0aG9kLlxyXG4gICAqXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIFhIUi5wcm90b3R5cGUucGF5bG9hZCA9IGZ1bmN0aW9uIChwYXlsb2FkKSB7XHJcbiAgICB2YXIgbXNncyA9IFtdO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gcGF5bG9hZC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgbXNncy5wdXNoKGlvLnBhcnNlci5lbmNvZGVQYWNrZXQocGF5bG9hZFtpXSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2VuZChpby5wYXJzZXIuZW5jb2RlUGF5bG9hZChtc2dzKSk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogU2VuZCBkYXRhIHRvIHRoZSBTb2NrZXQuSU8gc2VydmVyLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGRhdGEgVGhlIG1lc3NhZ2VcclxuICAgKiBAcmV0dXJucyB7VHJhbnNwb3J0fVxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIFhIUi5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB0aGlzLnBvc3QoZGF0YSk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBQb3N0cyBhIGVuY29kZWQgbWVzc2FnZSB0byB0aGUgU29ja2V0LklPIHNlcnZlci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIEEgZW5jb2RlZCBtZXNzYWdlLlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBmdW5jdGlvbiBlbXB0eSAoKSB7IH07XHJcblxyXG4gIFhIUi5wcm90b3R5cGUucG9zdCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICB0aGlzLnNvY2tldC5zZXRCdWZmZXIodHJ1ZSk7XHJcblxyXG4gICAgZnVuY3Rpb24gc3RhdGVDaGFuZ2UgKCkge1xyXG4gICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09IDQpIHtcclxuICAgICAgICB0aGlzLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGVtcHR5O1xyXG4gICAgICAgIHNlbGYucG9zdGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT0gMjAwKXtcclxuICAgICAgICAgIHNlbGYuc29ja2V0LnNldEJ1ZmZlcihmYWxzZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNlbGYub25DbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG9ubG9hZCAoKSB7XHJcbiAgICAgIHRoaXMub25sb2FkID0gZW1wdHk7XHJcbiAgICAgIHNlbGYuc29ja2V0LnNldEJ1ZmZlcihmYWxzZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuc2VuZFhIUiA9IHRoaXMucmVxdWVzdCgnUE9TVCcpO1xyXG5cclxuICAgIGlmIChnbG9iYWwuWERvbWFpblJlcXVlc3QgJiYgdGhpcy5zZW5kWEhSIGluc3RhbmNlb2YgWERvbWFpblJlcXVlc3QpIHtcclxuICAgICAgdGhpcy5zZW5kWEhSLm9ubG9hZCA9IHRoaXMuc2VuZFhIUi5vbmVycm9yID0gb25sb2FkO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zZW5kWEhSLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHN0YXRlQ2hhbmdlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2VuZFhIUi5zZW5kKGRhdGEpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc2Nvbm5lY3RzIHRoZSBlc3RhYmxpc2hlZCBgWEhSYCBjb25uZWN0aW9uLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1RyYW5zcG9ydH1cclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBYSFIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5vbkNsb3NlKCk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBHZW5lcmF0ZXMgYSBjb25maWd1cmVkIFhIUiByZXF1ZXN0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSB1cmwgdGhhdCBuZWVkcyB0byBiZSByZXF1ZXN0ZWQuXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBUaGUgbWV0aG9kIHRoZSByZXF1ZXN0IHNob3VsZCB1c2UuXHJcbiAgICogQHJldHVybnMge1hNTEh0dHBSZXF1ZXN0fVxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBYSFIucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiAobWV0aG9kKSB7XHJcbiAgICB2YXIgcmVxID0gaW8udXRpbC5yZXF1ZXN0KHRoaXMuc29ja2V0LmlzWERvbWFpbigpKVxyXG4gICAgICAsIHF1ZXJ5ID0gaW8udXRpbC5xdWVyeSh0aGlzLnNvY2tldC5vcHRpb25zLnF1ZXJ5LCAndD0nICsgK25ldyBEYXRlKTtcclxuXHJcbiAgICByZXEub3BlbihtZXRob2QgfHwgJ0dFVCcsIHRoaXMucHJlcGFyZVVybCgpICsgcXVlcnksIHRydWUpO1xyXG5cclxuICAgIGlmIChtZXRob2QgPT0gJ1BPU1QnKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgaWYgKHJlcS5zZXRSZXF1ZXN0SGVhZGVyKSB7XHJcbiAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBYRG9tYWluUmVxdWVzdFxyXG4gICAgICAgICAgcmVxLmNvbnRlbnRUeXBlID0gJ3RleHQvcGxhaW4nO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBjYXRjaCAoZSkge31cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVxO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIHNjaGVtZSB0byB1c2UgZm9yIHRoZSB0cmFuc3BvcnQgVVJMcy5cclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBYSFIucHJvdG90eXBlLnNjaGVtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLnNvY2tldC5vcHRpb25zLnNlY3VyZSA/ICdodHRwcycgOiAnaHR0cCc7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgdGhlIFhIUiB0cmFuc3BvcnRzIGFyZSBzdXBwb3J0ZWRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0geGRvbWFpbiBDaGVjayBpZiB3ZSBzdXBwb3J0IGNyb3NzIGRvbWFpbiByZXF1ZXN0cy5cclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBYSFIuY2hlY2sgPSBmdW5jdGlvbiAoc29ja2V0LCB4ZG9tYWluKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICB2YXIgcmVxdWVzdCA9IGlvLnV0aWwucmVxdWVzdCh4ZG9tYWluKSxcclxuICAgICAgICAgIHVzZXNYRG9tUmVxID0gKGdsb2JhbC5YRG9tYWluUmVxdWVzdCAmJiByZXF1ZXN0IGluc3RhbmNlb2YgWERvbWFpblJlcXVlc3QpLFxyXG4gICAgICAgICAgc29ja2V0UHJvdG9jb2wgPSAoc29ja2V0ICYmIHNvY2tldC5vcHRpb25zICYmIHNvY2tldC5vcHRpb25zLnNlY3VyZSA/ICdodHRwczonIDogJ2h0dHA6JyksXHJcbiAgICAgICAgICBpc1hQcm90b2NvbCA9IChzb2NrZXRQcm90b2NvbCAhPSBnbG9iYWwubG9jYXRpb24ucHJvdG9jb2wpO1xyXG4gICAgICBpZiAocmVxdWVzdCAmJiAhKHVzZXNYRG9tUmVxICYmIGlzWFByb3RvY29sKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoKGUpIHt9XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIHRoZSBYSFIgdHJhbnNwb3J0IHN1cHBvcnRzIGNyb3NzIGRvbWFpbiByZXF1ZXN0cy5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIFhIUi54ZG9tYWluQ2hlY2sgPSBmdW5jdGlvbiAoc29ja2V0KSB7XHJcbiAgICByZXR1cm4gWEhSLmNoZWNrKHNvY2tldCwgdHJ1ZSk7XHJcbiAgfTtcclxuXHJcbn0pKFxyXG4gICAgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGlvID8gaW8uVHJhbnNwb3J0IDogbW9kdWxlLmV4cG9ydHNcclxuICAsICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLnBhcmVudC5leHBvcnRzXHJcbiAgLCB0aGlzXHJcbik7XHJcbi8qKlxyXG4gKiBzb2NrZXQuaW9cclxuICogQ29weXJpZ2h0KGMpIDIwMTEgTGVhcm5Cb29zdCA8ZGV2QGxlYXJuYm9vc3QuY29tPlxyXG4gKiBNSVQgTGljZW5zZWRcclxuICovXHJcblxyXG4oZnVuY3Rpb24gKGV4cG9ydHMsIGlvKSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4cG9zZSBjb25zdHJ1Y3Rvci5cclxuICAgKi9cclxuXHJcbiAgZXhwb3J0cy5odG1sZmlsZSA9IEhUTUxGaWxlO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgSFRNTEZpbGUgdHJhbnNwb3J0IGNyZWF0ZXMgYSBgZm9yZXZlciBpZnJhbWVgIGJhc2VkIHRyYW5zcG9ydFxyXG4gICAqIGZvciBJbnRlcm5ldCBFeHBsb3Jlci4gUmVndWxhciBmb3JldmVyIGlmcmFtZSBpbXBsZW1lbnRhdGlvbnMgd2lsbCBcclxuICAgKiBjb250aW51b3VzbHkgdHJpZ2dlciB0aGUgYnJvd3NlcnMgYnV6eSBpbmRpY2F0b3JzLiBJZiB0aGUgZm9yZXZlciBpZnJhbWVcclxuICAgKiBpcyBjcmVhdGVkIGluc2lkZSBhIGBodG1sZmlsZWAgdGhlc2UgaW5kaWNhdG9ycyB3aWxsIG5vdCBiZSB0cmlnZ2VkLlxyXG4gICAqXHJcbiAgICogQGNvbnN0cnVjdG9yXHJcbiAgICogQGV4dGVuZHMge2lvLlRyYW5zcG9ydC5YSFJ9XHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgZnVuY3Rpb24gSFRNTEZpbGUgKHNvY2tldCkge1xyXG4gICAgaW8uVHJhbnNwb3J0LlhIUi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaGVyaXRzIGZyb20gWEhSIHRyYW5zcG9ydC5cclxuICAgKi9cclxuXHJcbiAgaW8udXRpbC5pbmhlcml0KEhUTUxGaWxlLCBpby5UcmFuc3BvcnQuWEhSKTtcclxuXHJcbiAgLyoqXHJcbiAgICogVHJhbnNwb3J0IG5hbWVcclxuICAgKlxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIEhUTUxGaWxlLnByb3RvdHlwZS5uYW1lID0gJ2h0bWxmaWxlJztcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG5ldyBBYy4uLmVYIGBodG1sZmlsZWAgd2l0aCBhIGZvcmV2ZXIgbG9hZGluZyBpZnJhbWVcclxuICAgKiB0aGF0IGNhbiBiZSB1c2VkIHRvIGxpc3RlbiB0byBtZXNzYWdlcy4gSW5zaWRlIHRoZSBnZW5lcmF0ZWRcclxuICAgKiBgaHRtbGZpbGVgIGEgcmVmZXJlbmNlIHdpbGwgYmUgbWFkZSB0byB0aGUgSFRNTEZpbGUgdHJhbnNwb3J0LlxyXG4gICAqXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIEhUTUxGaWxlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmRvYyA9IG5ldyB3aW5kb3dbKFsnQWN0aXZlJ10uY29uY2F0KCdPYmplY3QnKS5qb2luKCdYJykpXSgnaHRtbGZpbGUnKTtcclxuICAgIHRoaXMuZG9jLm9wZW4oKTtcclxuICAgIHRoaXMuZG9jLndyaXRlKCc8aHRtbD48L2h0bWw+Jyk7XHJcbiAgICB0aGlzLmRvYy5jbG9zZSgpO1xyXG4gICAgdGhpcy5kb2MucGFyZW50V2luZG93LnMgPSB0aGlzO1xyXG5cclxuICAgIHZhciBpZnJhbWVDID0gdGhpcy5kb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBpZnJhbWVDLmNsYXNzTmFtZSA9ICdzb2NrZXRpbyc7XHJcblxyXG4gICAgdGhpcy5kb2MuYm9keS5hcHBlbmRDaGlsZChpZnJhbWVDKTtcclxuICAgIHRoaXMuaWZyYW1lID0gdGhpcy5kb2MuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XHJcblxyXG4gICAgaWZyYW1lQy5hcHBlbmRDaGlsZCh0aGlzLmlmcmFtZSk7XHJcblxyXG4gICAgdmFyIHNlbGYgPSB0aGlzXHJcbiAgICAgICwgcXVlcnkgPSBpby51dGlsLnF1ZXJ5KHRoaXMuc29ja2V0Lm9wdGlvbnMucXVlcnksICd0PScrICtuZXcgRGF0ZSk7XHJcblxyXG4gICAgdGhpcy5pZnJhbWUuc3JjID0gdGhpcy5wcmVwYXJlVXJsKCkgKyBxdWVyeTtcclxuXHJcbiAgICBpby51dGlsLm9uKHdpbmRvdywgJ3VubG9hZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2VsZi5kZXN0cm95KCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgU29ja2V0LklPIHNlcnZlciB3aWxsIHdyaXRlIHNjcmlwdCB0YWdzIGluc2lkZSB0aGUgZm9yZXZlclxyXG4gICAqIGlmcmFtZSwgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIHVzZWQgYXMgY2FsbGJhY2sgZm9yIHRoZSBpbmNvbWluZ1xyXG4gICAqIGluZm9ybWF0aW9uLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgVGhlIG1lc3NhZ2VcclxuICAgKiBAcGFyYW0ge2RvY3VtZW50fSBkb2MgUmVmZXJlbmNlIHRvIHRoZSBjb250ZXh0XHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIEhUTUxGaWxlLnByb3RvdHlwZS5fID0gZnVuY3Rpb24gKGRhdGEsIGRvYykge1xyXG4gICAgdGhpcy5vbkRhdGEoZGF0YSk7XHJcbiAgICB0cnkge1xyXG4gICAgICB2YXIgc2NyaXB0ID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcclxuICAgICAgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcclxuICAgIH0gY2F0Y2ggKGUpIHsgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIERlc3Ryb3kgdGhlIGVzdGFibGlzaGVkIGNvbm5lY3Rpb24sIGlmcmFtZSBhbmQgYGh0bWxmaWxlYC5cclxuICAgKiBBbmQgY2FsbHMgdGhlIGBDb2xsZWN0R2FyYmFnZWAgZnVuY3Rpb24gb2YgSW50ZXJuZXQgRXhwbG9yZXJcclxuICAgKiB0byByZWxlYXNlIHRoZSBtZW1vcnkuXHJcbiAgICpcclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgSFRNTEZpbGUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5pZnJhbWUpe1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHRoaXMuaWZyYW1lLnNyYyA9ICdhYm91dDpibGFuayc7XHJcbiAgICAgIH0gY2F0Y2goZSl7fVxyXG5cclxuICAgICAgdGhpcy5kb2MgPSBudWxsO1xyXG4gICAgICB0aGlzLmlmcmFtZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuaWZyYW1lKTtcclxuICAgICAgdGhpcy5pZnJhbWUgPSBudWxsO1xyXG5cclxuICAgICAgQ29sbGVjdEdhcmJhZ2UoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBEaXNjb25uZWN0cyB0aGUgZXN0YWJsaXNoZWQgY29ubmVjdGlvbi5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtUcmFuc3BvcnR9IENoYWluaW5nLlxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIEhUTUxGaWxlLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuZGVzdHJveSgpO1xyXG4gICAgcmV0dXJuIGlvLlRyYW5zcG9ydC5YSFIucHJvdG90eXBlLmNsb3NlLmNhbGwodGhpcyk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2tzIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoaXMgdHJhbnNwb3J0LiBUaGUgYnJvd3NlclxyXG4gICAqIG11c3QgaGF2ZSBhbiBgQWMuLi5lWE9iamVjdGAgaW1wbGVtZW50YXRpb24uXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIEhUTUxGaWxlLmNoZWNrID0gZnVuY3Rpb24gKHNvY2tldCkge1xyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT0gXCJ1bmRlZmluZWRcIiAmJiAoWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKSkgaW4gd2luZG93KXtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB2YXIgYSA9IG5ldyB3aW5kb3dbKFsnQWN0aXZlJ10uY29uY2F0KCdPYmplY3QnKS5qb2luKCdYJykpXSgnaHRtbGZpbGUnKTtcclxuICAgICAgICByZXR1cm4gYSAmJiBpby5UcmFuc3BvcnQuWEhSLmNoZWNrKHNvY2tldCk7XHJcbiAgICAgIH0gY2F0Y2goZSl7fVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIGNyb3NzIGRvbWFpbiByZXF1ZXN0cyBhcmUgc3VwcG9ydGVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgSFRNTEZpbGUueGRvbWFpbkNoZWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gd2UgY2FuIHByb2JhYmx5IGRvIGhhbmRsaW5nIGZvciBzdWItZG9tYWlucywgd2Ugc2hvdWxkXHJcbiAgICAvLyB0ZXN0IHRoYXQgaXQncyBjcm9zcyBkb21haW4gYnV0IGEgc3ViZG9tYWluIGhlcmVcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBBZGQgdGhlIHRyYW5zcG9ydCB0byB5b3VyIHB1YmxpYyBpby50cmFuc3BvcnRzIGFycmF5LlxyXG4gICAqXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIGlvLnRyYW5zcG9ydHMucHVzaCgnaHRtbGZpbGUnKTtcclxuXHJcbn0pKFxyXG4gICAgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGlvID8gaW8uVHJhbnNwb3J0IDogbW9kdWxlLmV4cG9ydHNcclxuICAsICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLnBhcmVudC5leHBvcnRzXHJcbik7XHJcblxyXG4vKipcclxuICogc29ja2V0LmlvXHJcbiAqIENvcHlyaWdodChjKSAyMDExIExlYXJuQm9vc3QgPGRldkBsZWFybmJvb3N0LmNvbT5cclxuICogTUlUIExpY2Vuc2VkXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uIChleHBvcnRzLCBpbywgZ2xvYmFsKSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4cG9zZSBjb25zdHJ1Y3Rvci5cclxuICAgKi9cclxuXHJcbiAgZXhwb3J0c1sneGhyLXBvbGxpbmcnXSA9IFhIUlBvbGxpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBYSFItcG9sbGluZyB0cmFuc3BvcnQgdXNlcyBsb25nIHBvbGxpbmcgWEhSIHJlcXVlc3RzIHRvIGNyZWF0ZSBhXHJcbiAgICogXCJwZXJzaXN0ZW50XCIgY29ubmVjdGlvbiB3aXRoIHRoZSBzZXJ2ZXIuXHJcbiAgICpcclxuICAgKiBAY29uc3RydWN0b3JcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBmdW5jdGlvbiBYSFJQb2xsaW5nICgpIHtcclxuICAgIGlvLlRyYW5zcG9ydC5YSFIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBJbmhlcml0cyBmcm9tIFhIUiB0cmFuc3BvcnQuXHJcbiAgICovXHJcblxyXG4gIGlvLnV0aWwuaW5oZXJpdChYSFJQb2xsaW5nLCBpby5UcmFuc3BvcnQuWEhSKTtcclxuXHJcbiAgLyoqXHJcbiAgICogTWVyZ2UgdGhlIHByb3BlcnRpZXMgZnJvbSBYSFIgdHJhbnNwb3J0XHJcbiAgICovXHJcblxyXG4gIGlvLnV0aWwubWVyZ2UoWEhSUG9sbGluZywgaW8uVHJhbnNwb3J0LlhIUik7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRyYW5zcG9ydCBuYW1lXHJcbiAgICpcclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBYSFJQb2xsaW5nLnByb3RvdHlwZS5uYW1lID0gJ3hoci1wb2xsaW5nJztcclxuXHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgaGVhcnRiZWF0cyBpcyBlbmFibGVkIGZvciB0aGlzIHRyYW5zcG9ydFxyXG4gICAqXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIFhIUlBvbGxpbmcucHJvdG90eXBlLmhlYXJ0YmVhdHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgLyoqIFxyXG4gICAqIEVzdGFibGlzaCBhIGNvbm5lY3Rpb24sIGZvciBpUGhvbmUgYW5kIEFuZHJvaWQgdGhpcyB3aWxsIGJlIGRvbmUgb25jZSB0aGUgcGFnZVxyXG4gICAqIGlzIGxvYWRlZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtUcmFuc3BvcnR9IENoYWluaW5nLlxyXG4gICAqIEBhcGkgcHVibGljXHJcbiAgICovXHJcblxyXG4gIFhIUlBvbGxpbmcucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgaW8uVHJhbnNwb3J0LlhIUi5wcm90b3R5cGUub3Blbi5jYWxsKHNlbGYpO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0cyBhIFhIUiByZXF1ZXN0IHRvIHdhaXQgZm9yIGluY29taW5nIG1lc3NhZ2VzLlxyXG4gICAqXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIGZ1bmN0aW9uIGVtcHR5ICgpIHt9O1xyXG5cclxuICBYSFJQb2xsaW5nLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoIXRoaXMuaXNPcGVuKSByZXR1cm47XHJcblxyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIGZ1bmN0aW9uIHN0YXRlQ2hhbmdlICgpIHtcclxuICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PSA0KSB7XHJcbiAgICAgICAgdGhpcy5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgc2VsZi5vbkRhdGEodGhpcy5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgc2VsZi5nZXQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc2VsZi5vbkNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIG9ubG9hZCAoKSB7XHJcbiAgICAgIHRoaXMub25sb2FkID0gZW1wdHk7XHJcbiAgICAgIHRoaXMub25lcnJvciA9IGVtcHR5O1xyXG4gICAgICBzZWxmLm9uRGF0YSh0aGlzLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgIHNlbGYuZ2V0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIG9uZXJyb3IgKCkge1xyXG4gICAgICBzZWxmLm9uQ2xvc2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy54aHIgPSB0aGlzLnJlcXVlc3QoKTtcclxuXHJcbiAgICBpZiAoZ2xvYmFsLlhEb21haW5SZXF1ZXN0ICYmIHRoaXMueGhyIGluc3RhbmNlb2YgWERvbWFpblJlcXVlc3QpIHtcclxuICAgICAgdGhpcy54aHIub25sb2FkID0gb25sb2FkO1xyXG4gICAgICB0aGlzLnhoci5vbmVycm9yID0gb25lcnJvcjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHN0YXRlQ2hhbmdlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMueGhyLnNlbmQobnVsbCk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogSGFuZGxlIHRoZSB1bmNsZWFuIGNsb3NlIGJlaGF2aW9yLlxyXG4gICAqXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIFhIUlBvbGxpbmcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpby5UcmFuc3BvcnQuWEhSLnByb3RvdHlwZS5vbkNsb3NlLmNhbGwodGhpcyk7XHJcblxyXG4gICAgaWYgKHRoaXMueGhyKSB7XHJcbiAgICAgIHRoaXMueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHRoaXMueGhyLm9ubG9hZCA9IHRoaXMueGhyLm9uZXJyb3IgPSBlbXB0eTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB0aGlzLnhoci5hYm9ydCgpO1xyXG4gICAgICB9IGNhdGNoKGUpe31cclxuICAgICAgdGhpcy54aHIgPSBudWxsO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFdlYmtpdCBiYXNlZCBicm93c2VycyBzaG93IGEgaW5maW5pdCBzcGlubmVyIHdoZW4geW91IHN0YXJ0IGEgWEhSIHJlcXVlc3RcclxuICAgKiBiZWZvcmUgdGhlIGJyb3dzZXJzIG9ubG9hZCBldmVudCBpcyBjYWxsZWQgc28gd2UgbmVlZCB0byBkZWZlciBvcGVuaW5nIG9mXHJcbiAgICogdGhlIHRyYW5zcG9ydCB1bnRpbCB0aGUgb25sb2FkIGV2ZW50IGlzIGNhbGxlZC4gV3JhcHBpbmcgdGhlIGNiIGluIG91clxyXG4gICAqIGRlZmVyIG1ldGhvZCBzb2x2ZSB0aGlzLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtTb2NrZXR9IHNvY2tldCBUaGUgc29ja2V0IGluc3RhbmNlIHRoYXQgbmVlZHMgYSB0cmFuc3BvcnRcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2tcclxuICAgKiBAYXBpIHByaXZhdGVcclxuICAgKi9cclxuXHJcbiAgWEhSUG9sbGluZy5wcm90b3R5cGUucmVhZHkgPSBmdW5jdGlvbiAoc29ja2V0LCBmbikge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIGlvLnV0aWwuZGVmZXIoZnVuY3Rpb24gKCkge1xyXG4gICAgICBmbi5jYWxsKHNlbGYpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIHRoZSB0cmFuc3BvcnQgdG8geW91ciBwdWJsaWMgaW8udHJhbnNwb3J0cyBhcnJheS5cclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBpby50cmFuc3BvcnRzLnB1c2goJ3hoci1wb2xsaW5nJyk7XHJcblxyXG59KShcclxuICAgICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvLlRyYW5zcG9ydCA6IG1vZHVsZS5leHBvcnRzXHJcbiAgLCAndW5kZWZpbmVkJyAhPSB0eXBlb2YgaW8gPyBpbyA6IG1vZHVsZS5wYXJlbnQuZXhwb3J0c1xyXG4gICwgdGhpc1xyXG4pO1xyXG5cclxuLyoqXHJcbiAqIHNvY2tldC5pb1xyXG4gKiBDb3B5cmlnaHQoYykgMjAxMSBMZWFybkJvb3N0IDxkZXZAbGVhcm5ib29zdC5jb20+XHJcbiAqIE1JVCBMaWNlbnNlZFxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoZXhwb3J0cywgaW8sIGdsb2JhbCkge1xyXG4gIC8qKlxyXG4gICAqIFRoZXJlIGlzIGEgd2F5IHRvIGhpZGUgdGhlIGxvYWRpbmcgaW5kaWNhdG9yIGluIEZpcmVmb3guIElmIHlvdSBjcmVhdGUgYW5kXHJcbiAgICogcmVtb3ZlIGEgaWZyYW1lIGl0IHdpbGwgc3RvcCBzaG93aW5nIHRoZSBjdXJyZW50IGxvYWRpbmcgaW5kaWNhdG9yLlxyXG4gICAqIFVuZm9ydHVuYXRlbHkgd2UgY2FuJ3QgZmVhdHVyZSBkZXRlY3QgdGhhdCBhbmQgVUEgc25pZmZpbmcgaXMgZXZpbC5cclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICB2YXIgaW5kaWNhdG9yID0gZ2xvYmFsLmRvY3VtZW50ICYmIFwiTW96QXBwZWFyYW5jZVwiIGluXHJcbiAgICBnbG9iYWwuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xyXG5cclxuICAvKipcclxuICAgKiBFeHBvc2UgY29uc3RydWN0b3IuXHJcbiAgICovXHJcblxyXG4gIGV4cG9ydHNbJ2pzb25wLXBvbGxpbmcnXSA9IEpTT05QUG9sbGluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIEpTT05QIHRyYW5zcG9ydCBjcmVhdGVzIGFuIHBlcnNpc3RlbnQgY29ubmVjdGlvbiBieSBkeW5hbWljYWxseVxyXG4gICAqIGluc2VydGluZyBhIHNjcmlwdCB0YWcgaW4gdGhlIHBhZ2UuIFRoaXMgc2NyaXB0IHRhZyB3aWxsIHJlY2VpdmUgdGhlXHJcbiAgICogaW5mb3JtYXRpb24gb2YgdGhlIFNvY2tldC5JTyBzZXJ2ZXIuIFdoZW4gbmV3IGluZm9ybWF0aW9uIGlzIHJlY2VpdmVkXHJcbiAgICogaXQgY3JlYXRlcyBhIG5ldyBzY3JpcHQgdGFnIGZvciB0aGUgbmV3IGRhdGEgc3RyZWFtLlxyXG4gICAqXHJcbiAgICogQGNvbnN0cnVjdG9yXHJcbiAgICogQGV4dGVuZHMge2lvLlRyYW5zcG9ydC54aHItcG9sbGluZ31cclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBmdW5jdGlvbiBKU09OUFBvbGxpbmcgKHNvY2tldCkge1xyXG4gICAgaW8uVHJhbnNwb3J0Wyd4aHItcG9sbGluZyddLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblxyXG4gICAgdGhpcy5pbmRleCA9IGlvLmoubGVuZ3RoO1xyXG5cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICBpby5qLnB1c2goZnVuY3Rpb24gKG1zZykge1xyXG4gICAgICBzZWxmLl8obXNnKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaGVyaXRzIGZyb20gWEhSIHBvbGxpbmcgdHJhbnNwb3J0LlxyXG4gICAqL1xyXG5cclxuICBpby51dGlsLmluaGVyaXQoSlNPTlBQb2xsaW5nLCBpby5UcmFuc3BvcnRbJ3hoci1wb2xsaW5nJ10pO1xyXG5cclxuICAvKipcclxuICAgKiBUcmFuc3BvcnQgbmFtZVxyXG4gICAqXHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5uYW1lID0gJ2pzb25wLXBvbGxpbmcnO1xyXG5cclxuICAvKipcclxuICAgKiBQb3N0cyBhIGVuY29kZWQgbWVzc2FnZSB0byB0aGUgU29ja2V0LklPIHNlcnZlciB1c2luZyBhbiBpZnJhbWUuXHJcbiAgICogVGhlIGlmcmFtZSBpcyB1c2VkIGJlY2F1c2Ugc2NyaXB0IHRhZ3MgY2FuIGNyZWF0ZSBQT1NUIGJhc2VkIHJlcXVlc3RzLlxyXG4gICAqIFRoZSBpZnJhbWUgaXMgcG9zaXRpb25lZCBvdXRzaWRlIG9mIHRoZSB2aWV3IHNvIHRoZSB1c2VyIGRvZXMgbm90XHJcbiAgICogbm90aWNlIGl0J3MgZXhpc3RlbmNlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgQSBlbmNvZGVkIG1lc3NhZ2UuXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIEpTT05QUG9sbGluZy5wcm90b3R5cGUucG9zdCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXNcclxuICAgICAgLCBxdWVyeSA9IGlvLnV0aWwucXVlcnkoXHJcbiAgICAgICAgICAgICB0aGlzLnNvY2tldC5vcHRpb25zLnF1ZXJ5XHJcbiAgICAgICAgICAsICd0PScrICgrbmV3IERhdGUpICsgJyZpPScgKyB0aGlzLmluZGV4XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICBpZiAoIXRoaXMuZm9ybSkge1xyXG4gICAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKVxyXG4gICAgICAgICwgYXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJylcclxuICAgICAgICAsIGlkID0gdGhpcy5pZnJhbWVJZCA9ICdzb2NrZXRpb19pZnJhbWVfJyArIHRoaXMuaW5kZXhcclxuICAgICAgICAsIGlmcmFtZTtcclxuXHJcbiAgICAgIGZvcm0uY2xhc3NOYW1lID0gJ3NvY2tldGlvJztcclxuICAgICAgZm9ybS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgIGZvcm0uc3R5bGUudG9wID0gJzBweCc7XHJcbiAgICAgIGZvcm0uc3R5bGUubGVmdCA9ICcwcHgnO1xyXG4gICAgICBmb3JtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGZvcm0udGFyZ2V0ID0gaWQ7XHJcbiAgICAgIGZvcm0ubWV0aG9kID0gJ1BPU1QnO1xyXG4gICAgICBmb3JtLnNldEF0dHJpYnV0ZSgnYWNjZXB0LWNoYXJzZXQnLCAndXRmLTgnKTtcclxuICAgICAgYXJlYS5uYW1lID0gJ2QnO1xyXG4gICAgICBmb3JtLmFwcGVuZENoaWxkKGFyZWEpO1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xyXG5cclxuICAgICAgdGhpcy5mb3JtID0gZm9ybTtcclxuICAgICAgdGhpcy5hcmVhID0gYXJlYTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmZvcm0uYWN0aW9uID0gdGhpcy5wcmVwYXJlVXJsKCkgKyBxdWVyeTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb21wbGV0ZSAoKSB7XHJcbiAgICAgIGluaXRJZnJhbWUoKTtcclxuICAgICAgc2VsZi5zb2NrZXQuc2V0QnVmZmVyKGZhbHNlKTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdElmcmFtZSAoKSB7XHJcbiAgICAgIGlmIChzZWxmLmlmcmFtZSkge1xyXG4gICAgICAgIHNlbGYuZm9ybS5yZW1vdmVDaGlsZChzZWxmLmlmcmFtZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgLy8gaWU2IGR5bmFtaWMgaWZyYW1lcyB3aXRoIHRhcmdldD1cIlwiIHN1cHBvcnQgKHRoYW5rcyBDaHJpcyBMYW1iYWNoZXIpXHJcbiAgICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnPGlmcmFtZSBuYW1lPVwiJysgc2VsZi5pZnJhbWVJZCArJ1wiPicpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XHJcbiAgICAgICAgaWZyYW1lLm5hbWUgPSBzZWxmLmlmcmFtZUlkO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZnJhbWUuaWQgPSBzZWxmLmlmcmFtZUlkO1xyXG5cclxuICAgICAgc2VsZi5mb3JtLmFwcGVuZENoaWxkKGlmcmFtZSk7XHJcbiAgICAgIHNlbGYuaWZyYW1lID0gaWZyYW1lO1xyXG4gICAgfTtcclxuXHJcbiAgICBpbml0SWZyYW1lKCk7XHJcblxyXG4gICAgLy8gd2UgdGVtcG9yYXJpbHkgc3RyaW5naWZ5IHVudGlsIHdlIGZpZ3VyZSBvdXQgaG93IHRvIHByZXZlbnRcclxuICAgIC8vIGJyb3dzZXJzIGZyb20gdHVybmluZyBgXFxuYCBpbnRvIGBcXHJcXG5gIGluIGZvcm0gaW5wdXRzXHJcbiAgICB0aGlzLmFyZWEudmFsdWUgPSBpby5KU09OLnN0cmluZ2lmeShkYXRhKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLmZvcm0uc3VibWl0KCk7XHJcbiAgICB9IGNhdGNoKGUpIHt9XHJcblxyXG4gICAgaWYgKHRoaXMuaWZyYW1lLmF0dGFjaEV2ZW50KSB7XHJcbiAgICAgIGlmcmFtZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHNlbGYuaWZyYW1lLnJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJykge1xyXG4gICAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmlmcmFtZS5vbmxvYWQgPSBjb21wbGV0ZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNvY2tldC5zZXRCdWZmZXIodHJ1ZSk7XHJcbiAgfTtcclxuICBcclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgbmV3IEpTT05QIHBvbGwgdGhhdCBjYW4gYmUgdXNlZCB0byBsaXN0ZW5cclxuICAgKiBmb3IgbWVzc2FnZXMgZnJvbSB0aGUgU29ja2V0LklPIHNlcnZlci5cclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBKU09OUFBvbGxpbmcucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpc1xyXG4gICAgICAsIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpXHJcbiAgICAgICwgcXVlcnkgPSBpby51dGlsLnF1ZXJ5KFxyXG4gICAgICAgICAgICAgdGhpcy5zb2NrZXQub3B0aW9ucy5xdWVyeVxyXG4gICAgICAgICAgLCAndD0nKyAoK25ldyBEYXRlKSArICcmaT0nICsgdGhpcy5pbmRleFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgaWYgKHRoaXMuc2NyaXB0KSB7XHJcbiAgICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xyXG4gICAgICB0aGlzLnNjcmlwdCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcclxuICAgIHNjcmlwdC5zcmMgPSB0aGlzLnByZXBhcmVVcmwoKSArIHF1ZXJ5O1xyXG4gICAgc2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNlbGYub25DbG9zZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgaW5zZXJ0QXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF1cclxuICAgIGluc2VydEF0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNjcmlwdCwgaW5zZXJ0QXQpO1xyXG4gICAgdGhpcy5zY3JpcHQgPSBzY3JpcHQ7XHJcblxyXG4gICAgaWYgKGluZGljYXRvcikge1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcclxuICAgICAgfSwgMTAwKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmb3IgdGhlIGluY29taW5nIG1lc3NhZ2Ugc3RyZWFtIGZyb20gdGhlIFNvY2tldC5JTyBzZXJ2ZXIuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YSBUaGUgbWVzc2FnZVxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBKU09OUFBvbGxpbmcucHJvdG90eXBlLl8gPSBmdW5jdGlvbiAobXNnKSB7XHJcbiAgICB0aGlzLm9uRGF0YShtc2cpO1xyXG4gICAgaWYgKHRoaXMuaXNPcGVuKSB7XHJcbiAgICAgIHRoaXMuZ2V0KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgaW5kaWNhdG9yIGhhY2sgb25seSB3b3JrcyBhZnRlciBvbmxvYWRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7U29ja2V0fSBzb2NrZXQgVGhlIHNvY2tldCBpbnN0YW5jZSB0aGF0IG5lZWRzIGEgdHJhbnNwb3J0XHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrXHJcbiAgICogQGFwaSBwcml2YXRlXHJcbiAgICovXHJcblxyXG4gIEpTT05QUG9sbGluZy5wcm90b3R5cGUucmVhZHkgPSBmdW5jdGlvbiAoc29ja2V0LCBmbikge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgaWYgKCFpbmRpY2F0b3IpIHJldHVybiBmbi5jYWxsKHRoaXMpO1xyXG5cclxuICAgIGlvLnV0aWwubG9hZChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGZuLmNhbGwoc2VsZik7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDaGVja3MgaWYgYnJvd3NlciBzdXBwb3J0cyB0aGlzIHRyYW5zcG9ydC5cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAgICogQGFwaSBwdWJsaWNcclxuICAgKi9cclxuXHJcbiAgSlNPTlBQb2xsaW5nLmNoZWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICdkb2N1bWVudCcgaW4gZ2xvYmFsO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIGNyb3NzIGRvbWFpbiByZXF1ZXN0cyBhcmUgc3VwcG9ydGVkXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cclxuICAgKiBAYXBpIHB1YmxpY1xyXG4gICAqL1xyXG5cclxuICBKU09OUFBvbGxpbmcueGRvbWFpbkNoZWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIHRoZSB0cmFuc3BvcnQgdG8geW91ciBwdWJsaWMgaW8udHJhbnNwb3J0cyBhcnJheS5cclxuICAgKlxyXG4gICAqIEBhcGkgcHJpdmF0ZVxyXG4gICAqL1xyXG5cclxuICBpby50cmFuc3BvcnRzLnB1c2goJ2pzb25wLXBvbGxpbmcnKTtcclxuXHJcbn0pKFxyXG4gICAgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGlvID8gaW8uVHJhbnNwb3J0IDogbW9kdWxlLmV4cG9ydHNcclxuICAsICd1bmRlZmluZWQnICE9IHR5cGVvZiBpbyA/IGlvIDogbW9kdWxlLnBhcmVudC5leHBvcnRzXHJcbiAgLCB0aGlzXHJcbik7XHJcblxyXG59KSgpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50L3dlYl9tb2R1bGVzL3NvY2tldC5pby9zb2NrZXQuaW8uanNcbiAqKiBtb2R1bGUgaWQgPSAxODdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImlmKG1vZHVsZS5ob3QpIHtcblx0dmFyIGxhc3REYXRhO1xuXHR2YXIgdXBUb0RhdGUgPSBmdW5jdGlvbiB1cFRvRGF0ZSgpIHtcblx0XHRyZXR1cm4gbGFzdERhdGEuaW5kZXhPZihfX3dlYnBhY2tfaGFzaF9fKSA+PSAwO1xuXHR9O1xuXHR2YXIgY2hlY2sgPSBmdW5jdGlvbiBjaGVjaygpIHtcblx0XHRtb2R1bGUuaG90LmNoZWNrKGZ1bmN0aW9uKGVyciwgdXBkYXRlZE1vZHVsZXMpIHtcblx0XHRcdGlmKGVycikge1xuXHRcdFx0XHRpZihtb2R1bGUuaG90LnN0YXR1cygpIGluIHthYm9ydDoxLGZhaWw6MX0pIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJbSE1SXSBDYW5ub3QgY2hlY2sgZm9yIHVwZGF0ZS4gTmVlZCB0byBkbyBhIGZ1bGwgcmVsb2FkIVwiKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJbSE1SXSBVcGRhdGUgY2hlY2sgZmFpbGVkOiBcIiArIGVycik7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZighdXBkYXRlZE1vZHVsZXMpIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiW0hNUl0gQ2Fubm90IGZpbmQgdXBkYXRlLiBOZWVkIHRvIGRvIGEgZnVsbCByZWxvYWQhXCIpO1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJbSE1SXSAoUHJvcGFibHkgYmVjYXVzZSBvZiByZXN0YXJ0aW5nIHRoZSB3ZWJwYWNrLWRldi1zZXJ2ZXIpXCIpXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0bW9kdWxlLmhvdC5hcHBseSh7XG5cdFx0XHRcdGlnbm9yZVVuYWNjZXB0ZWQ6IHRydWVcblx0XHRcdH0sIGZ1bmN0aW9uKGVyciwgcmVuZXdlZE1vZHVsZXMpIHtcblx0XHRcdFx0aWYoZXJyKSB7XG5cdFx0XHRcdFx0aWYobW9kdWxlLmhvdC5zdGF0dXMoKSBpbiB7YWJvcnQ6MSxmYWlsOjF9KSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJbSE1SXSBDYW5ub3QgYXBwbHkgdXBkYXRlIChOZWVkIHRvIGRvIGEgZnVsbCByZWxvYWQhKTogXCIgKyBlcnIpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJbSE1SXSBVcGRhdGUgZmFpbGVkOiBcIiArIGVycik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKCF1cFRvRGF0ZSgpKSB7XG5cdFx0XHRcdFx0Y2hlY2soKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciB1bmFjY2VwdGVkTW9kdWxlcyA9IHVwZGF0ZWRNb2R1bGVzLmZpbHRlcihmdW5jdGlvbihtb2R1bGVJZCkge1xuXHRcdFx0XHRcdHJldHVybiByZW5ld2VkTW9kdWxlcy5pbmRleE9mKG1vZHVsZUlkKSA8IDA7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKHVuYWNjZXB0ZWRNb2R1bGVzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJbSE1SXSBUaGUgZm9sbG93aW5nIG1vZHVsZXMgY291bGRuJ3QgYmUgaG90IHVwZGF0ZWQ6IChUaGV5IHdvdWxkIG5lZWQgYSBmdWxsIHJlbG9hZCEpXCIpO1xuXHRcdFx0XHRcdHVuYWNjZXB0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24obW9kdWxlSWQpIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIltITVJdICAtIFwiICsgbW9kdWxlSWQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoIXJlbmV3ZWRNb2R1bGVzIHx8IHJlbmV3ZWRNb2R1bGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiW0hNUl0gTm90aGluZyBob3QgdXBkYXRlZC5cIik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJbSE1SXSBVcGRhdGVkIG1vZHVsZXM6XCIpO1xuXHRcdFx0XHRcdHJlbmV3ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24obW9kdWxlSWQpIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiW0hNUl0gIC0gXCIgKyBtb2R1bGVJZCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYodXBUb0RhdGUoKSkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiW0hNUl0gQXBwIGlzIHVwIHRvIGRhdGUuXCIpO1xuXHRcdFx0XHR9XG5cblxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH07XG5cdHZhciBhZGRFdmVudExpc3RlbmVyID0gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgPyBmdW5jdGlvbihldmVudE5hbWUsIGxpc3RlbmVyKSB7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lciwgZmFsc2UpO1xuXHR9IDogZnVuY3Rpb24gKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcblx0XHR3aW5kb3cuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuXHR9O1xuXHRhZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBmdW5jdGlvbihldmVudCkge1xuXHRcdGlmKHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmIGV2ZW50LmRhdGEuaW5kZXhPZihcIndlYnBhY2tIb3RVcGRhdGVcIikgPT09IDApIHtcblx0XHRcdGxhc3REYXRhID0gZXZlbnQuZGF0YTtcblx0XHRcdGlmKCF1cFRvRGF0ZSgpICYmIG1vZHVsZS5ob3Quc3RhdHVzKCkgPT09IFwiaWRsZVwiKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiW0hNUl0gQ2hlY2tpbmcgZm9yIHVwZGF0ZXMgb24gdGhlIHNlcnZlci4uLlwiKTtcblx0XHRcdFx0Y2hlY2soKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXHRjb25zb2xlLmxvZyhcIltITVJdIFdhaXRpbmcgZm9yIHVwZGF0ZSBzaWduYWwgZnJvbSBXRFMuLi5cIik7XG59IGVsc2Uge1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJbSE1SXSBIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGlzIGRpc2FibGVkXCIpO1xufVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAod2VicGFjaykvaG90L29ubHktZGV2LXNlcnZlci5qc1xuICoqIG1vZHVsZSBpZCA9IDE4OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==